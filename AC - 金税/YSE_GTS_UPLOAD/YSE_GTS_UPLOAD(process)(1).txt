SELECT-OPTIONS:S_VKORG  FOR VBAK-VKORG NO-EXTENSION NO INTERVALS.
SELECT-OPTIONS:S_VTWEG  FOR VBAK-VTWEG NO-EXTENSION NO INTERVALS.
SELECT-OPTIONS:S_SPART  FOR VBAK-SPART NO-EXTENSION NO INTERVALS.
PARAMETERS: P_INPUT TYPE RLGRAP-FILENAME.
AT SELECTION-SCREEN.
  PERFORM AUTHORITY_CHECK.
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_input.
  PERFORM GET_FILE_NAME CHANGING P_INPUT.
START-OF-SELECTION.
  PERFORM INIT_DATA.
  PERFORM FETCH_UPDATA.
  PERFORM FETCH_GTS004.
  PERFORM UPDAE_DOCUMENT.
  PERFORM UPDAE_GTS001.
FORM AUTHORITY_CHECK.
  AUTHORITY-CHECK OBJECT 'YAM_BB_VKO'
           ID 'VKORG' FIELD S_VKORG-LOW
           ID 'ACTVT' FIELD '16'.
  IF SY-SUBRC <> 0.
    MESSAGE E005 WITH S_VKORG-LOW.
  ENDIF.
ENDFORM.                    " AUTHORITY_CHECK
FORM GET_FILE_NAME CHANGING P_FNAME             TYPE RLGRAP-FILENAME.
  REFRESH T_TABFICH.
  CLEAR T_TABFICH.
  CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG
    EXPORTING
      DEFAULT_EXTENSION = L_EXTENSION
      DEFAULT_FILENAME  = L_NOMBRE
      INITIAL_DIRECTORY = L_DIRECTORIO
      MULTISELECTION    = SPACE
    CHANGING
      FILE_TABLE        = T_TABFICH
      RC                = L_RC.
  IF SY-SUBRC <> 0.
    MESSAGE W003.
  ELSE.
    READ TABLE T_TABFICH INDEX L_RC INTO P_FNAME.
    V_PATH = P_FNAME.
  ENDIF.
ENDFORM.                    " GET_FILE_NAME
FORM INIT_DATA .
ENDFORM.                    " INIT_DATA
FORM FETCH_UPDATA .
  CALL METHOD CL_GUI_FRONTEND_SERVICES=>GUI_UPLOAD
    EXPORTING
      FILENAME            = V_PATH
      FILETYPE            = 'ASC'
      HAS_FIELD_SEPARATOR = 'X'
      CODEPAGE            = '8400'
      READ_BY_LINE        = 'X'
    CHANGING
      DATA_TAB            = I_UPDATA
    EXCEPTIONS
       FILE_OPEN_ERROR         = 1
       FILE_READ_ERROR         = 2
       NO_BATCH                = 3
       GUI_REFUSE_FILETRANSFER = 4
       INVALID_TYPE            = 5
       NO_AUTHORITY            = 6
       UNKNOWN_ERROR           = 7
       BAD_DATA_FORMAT         = 8
       HEADER_NOT_ALLOWED      = 9
       SEPARATOR_NOT_ALLOWED   = 10
       HEADER_TOO_LONG         = 11
       UNKNOWN_DP_ERROR        = 12
       ACCESS_DENIED           = 13
       DP_OUT_OF_MEMORY        = 14
       DISK_FULL               = 15
       DP_TIMEOUT              = 16
       NOT_SUPPORTED_BY_GUI    = 17
       ERROR_NO_GUI            = 18
       others                  = 19
           .
 IF SY-SUBRC <> 0.
  MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
             WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
 ENDIF.
ENDFORM.                    " FETCH_UPDATA
FORM FETCH_GTS004 .
  LOOP AT I_UPDATA INTO REC_UPDATA.
    CLEAR:L_FRONT,
          L_END.
    SPLIT REC_UPDATA-REFNO AT '-'
            INTO L_FRONT
                 L_END.
    IF L_END IS INITIAL.
      SPLIT REC_UPDATA-REFNO AT '~'
              INTO L_FRONT
                   L_END.
      IF L_END IS NOT INITIAL.
        LREC_REFNO-REFNO = L_FRONT.
      ELSE.
        LREC_REFNO-REFNO = REC_UPDATA-REFNO.
      ENDIF.
    ELSE.
      LREC_REFNO-REFNO = L_FRONT.
    ENDIF.
    COLLECT LREC_REFNO INTO LI_REFNO.
    REC_UPDATA-REFNO = LREC_REFNO-REFNO.
    MODIFY I_UPDATA FROM REC_UPDATA TRANSPORTING REFNO.
  ENDLOOP.
  IF LI_REFNO IS NOT INITIAL.
    SELECT BUKRS
           GJAHR
           VBELN
           VATREF
           BELNR
      INTO CORRESPONDING FIELDS OF TABLE I_GTS004
      FROM YSE_GTS004
           FOR ALL ENTRIES IN LI_REFNO
     WHERE VATREF = LI_REFNO-REFNO.
  ENDIF.
  LOOP AT I_GTS004 INTO REC_GTS004.
    CLEAR REC_FB02.
    LOOP AT I_UPDATA INTO REC_UPDATA
              WHERE REFNO = REC_GTS004-VATREF.
      CONCATENATE REC_UPDATA-VATNO
                  REC_FB02-ASSIGN
             INTO REC_FB02-ASSIGN.
    ENDLOOP.
    REC_FB02-VATYPE = REC_UPDATA-VATYPE.
    REC_FB02-BUKRS = REC_GTS004-BUKRS.
    REC_FB02-GJAHR = REC_GTS004-GJAHR.
    REC_FB02-VBELN = REC_GTS004-VBELN.
    REC_FB02-BELNR = REC_GTS004-BELNR.
    REC_FB02-VATREF = REC_GTS004-VATREF.
    APPEND REC_FB02 TO I_FB02.
  ENDLOOP.
ENDFORM.                    " FETCH_GTS004
FORM UPDAE_DOCUMENT .
  CHECK I_FB02 IS NOT INITIAL.
  SELECT BUKRS
         GJAHR
         BELNR
         ZUONR
    INTO TABLE I_BSEG
    FROM BSEG
         FOR ALL ENTRIES IN I_FB02
   WHERE BELNR = I_FB02-BELNR
     AND BUKRS = I_FB02-BUKRS
     AND GJAHR = I_FB02-GJAHR
     AND BUZEI = '001'.
  LOOP AT I_FB02 INTO REC_FB02.
    CLEAR L_ERROR.
    REFRESH GT_BDCDATA.
    READ TABLE I_BSEG INTO REC_BSEG
           WITH KEY BELNR = REC_FB02-BELNR
                    BUKRS = REC_FB02-BUKRS
                    GJAHR = REC_FB02-GJAHR.
    CLEAR LS_BDCDATA.
    LS_BDCDATA-PROGRAM  = 'SAPMF05L'.
    LS_BDCDATA-DYNPRO   = '0100'.
    LS_BDCDATA-DYNBEGIN = 'X'.
    APPEND LS_BDCDATA TO GT_BDCDATA.
    CLEAR   LS_BDCDATA.
    LS_BDCDATA-FNAM     = 'BDC_CURSOR'.
    LS_BDCDATA-FVAL     = 'RF05L-AWKEY'.
    APPEND LS_BDCDATA TO GT_BDCDATA.
    CLEAR   LS_BDCDATA.
    LS_BDCDATA-FNAM     = 'BDC_OKCODE'.
    LS_BDCDATA-FVAL     = '/00'.
    APPEND LS_BDCDATA TO GT_BDCDATA.
    CLEAR   LS_BDCDATA.
    LS_BDCDATA-FNAM     = 'RF05L-BELNR'.
    LS_BDCDATA-FVAL     = ''.
    APPEND LS_BDCDATA TO GT_BDCDATA.
    CLEAR   LS_BDCDATA.
    LS_BDCDATA-FNAM     = 'RF05L-BUKRS'.
    LS_BDCDATA-FVAL     = ''.
    APPEND LS_BDCDATA TO GT_BDCDATA.
    CLEAR   LS_BDCDATA.
    LS_BDCDATA-FNAM     = 'RF05L-GJAHR'.
    LS_BDCDATA-FVAL     = ''.
    APPEND LS_BDCDATA TO GT_BDCDATA.
    CLEAR   LS_BDCDATA.
    LS_BDCDATA-FNAM     = 'RF05L-AWTYP'.
    LS_BDCDATA-FVAL     = 'VBRK'.
    APPEND LS_BDCDATA TO GT_BDCDATA.
    CLEAR   LS_BDCDATA.
    LS_BDCDATA-FNAM     = 'RF05L-AWKEY'.
    LS_BDCDATA-FVAL     = REC_FB02-VBELN.    "BILLING NO.
    APPEND LS_BDCDATA TO GT_BDCDATA.
    CLEAR   LS_BDCDATA.
    LS_BDCDATA-PROGRAM  = 'SAPMF05L'.
    LS_BDCDATA-DYNPRO   = '0700'.
    LS_BDCDATA-DYNBEGIN = 'X'.
    APPEND LS_BDCDATA TO GT_BDCDATA.
    CLEAR   LS_BDCDATA.
    LS_BDCDATA-FNAM     = 'BDC_CURSOR'.
    LS_BDCDATA-FVAL     = 'RF05L-ANZDT(01)'.
    APPEND LS_BDCDATA TO GT_BDCDATA.
    CLEAR   LS_BDCDATA.
    LS_BDCDATA-FNAM     = 'BDC_OKCODE'.
    LS_BDCDATA-FVAL     = '=PK'.
    APPEND LS_BDCDATA TO GT_BDCDATA.
    CLEAR   LS_BDCDATA.
    LS_BDCDATA-PROGRAM  = 'SAPMF05L'.
    LS_BDCDATA-DYNPRO   = '0301'.
    LS_BDCDATA-DYNBEGIN = 'X'.
    APPEND LS_BDCDATA TO GT_BDCDATA.
    CLEAR   LS_BDCDATA.
    LS_BDCDATA-FNAM     = 'BDC_CURSOR'.
    LS_BDCDATA-FVAL     = 'BSEG-ZUONR'.
    APPEND LS_BDCDATA TO GT_BDCDATA.
    CLEAR   LS_BDCDATA.
    LS_BDCDATA-FNAM     = 'BDC_OKCODE'.
    LS_BDCDATA-FVAL     = '=AE'.
    APPEND LS_BDCDATA TO GT_BDCDATA.
    CLEAR   LS_BDCDATA.
    LS_BDCDATA-FNAM     = 'BSEG-ZUONR'.
    IF REC_FB02-VATYPE = TEXT-T01."N
      CONCATENATE 'N'
                  REC_FB02-ASSIGN
             INTO REC_FB02-ASSIGN.
    ELSEIF REC_FB02-VATYPE = TEXT-T02."G
      CONCATENATE 'G'
                   REC_FB02-ASSIGN
             INTO REC_FB02-ASSIGN.
    ENDIF.
    IF REC_BSEG-ZUONR  = REC_FB02-VBELN.
      LS_BDCDATA-FVAL   = REC_FB02-ASSIGN. "Assignment Number
      REC_LOG-BUKRS = REC_FB02-BUKRS.
      REC_LOG-GJAHR = REC_FB02-GJAHR.
      REC_LOG-VBELN = REC_FB02-VBELN.
      REC_LOG-BELNR = REC_FB02-BELNR.
      REC_LOG-TEXT1 = ''.
      REC_LOG-VATNO = REC_FB02-ASSIGN.
      REC_LOG-VATREF = REC_FB02-VATREF.
      REC_LOG-TEXT2 = TEXT-S01.
      APPEND REC_LOG TO I_SUCESS.
    ELSEIF REC_BSEG-ZUONR+0(1) = 'N'
        OR REC_BSEG-ZUONR+0(1) = 'G'.
      L_ERROR = C_FLAG.
      REC_LOG-VBELN = REC_FB02-VBELN.
      REC_LOG-BELNR = REC_FB02-BELNR.
      REC_LOG-TEXT1 = TEXT-T00.
      REC_LOG-VATNO = REC_BSEG-ZUONR.
      REC_LOG-TEXT2 = TEXT-E01.
      APPEND REC_LOG TO I_ERROR.
    ELSE.
      LS_BDCDATA-FVAL   = REC_FB02-ASSIGN. "Assignment Number
      REC_LOG-BUKRS = REC_FB02-BUKRS.
      REC_LOG-GJAHR = REC_FB02-GJAHR.
      REC_LOG-VBELN = REC_FB02-VBELN.
      REC_LOG-BELNR = REC_FB02-BELNR.
      REC_LOG-TEXT1 = ''.
      REC_LOG-VATNO = REC_FB02-ASSIGN.
      REC_LOG-VATREF = REC_FB02-VATREF.
      REC_LOG-TEXT2 = TEXT-S01.
      APPEND REC_LOG TO I_SUCESS.
    ENDIF.
    IF L_ERROR IS INITIAL.
      APPEND LS_BDCDATA TO GT_BDCDATA.
      CALL TRANSACTION 'FB02' USING GT_BDCDATA
           MODE LS_MODE
           MESSAGES INTO GT_LOG.
    ENDIF.
  ENDLOOP.
  LOOP AT GT_LOG INTO GREC_LOG.
    WRITE: / GREC_LOG-MSGV1.
  ENDLOOP.
  READ TABLE GT_LOG INTO GREC_LOG
         WITH KEY MSGTYP = 'E'.
  CHECK SY-SUBRC IS NOT INITIAL.
  DESCRIBE TABLE I_ERROR LINES L_NUM.
  WRITE:1(22) TEXT-E02.
  WRITE:24(5) L_NUM.
  WRITE:/.
  LOOP AT I_ERROR INTO REC_LOG.
    WRITE:1(10) REC_LOG-VBELN.
    WRITE:12(10) REC_LOG-BELNR.
    WRITE:23(20) REC_LOG-TEXT1.
    WRITE:44(30) REC_LOG-VATNO.
    WRITE:75(20) REC_LOG-TEXT2.
    WRITE:/.
  ENDLOOP.
  WRITE:/.
  DESCRIBE TABLE I_SUCESS LINES L_NUM.
  WRITE:1(22) TEXT-S02.
  WRITE:24(5) L_NUM.
  WRITE:/.
  LOOP AT I_SUCESS INTO REC_LOG.
    WRITE:1(10) REC_LOG-VBELN.
    WRITE:12(10) REC_LOG-BELNR.
    WRITE:23(20) REC_LOG-TEXT1.
    WRITE:44(30) REC_LOG-VATNO.
    WRITE:75(20) REC_LOG-TEXT2.
    WRITE:/.
  ENDLOOP.
ENDFORM.                    " UPDAE_DOCUMENT
FORM UPDAE_GTS001 .
  SELECT *
    INTO TABLE LI_GTS001
    FROM YSE_GTS001
         FOR ALL ENTRIES IN I_SUCESS
   WHERE BUKRS = I_SUCESS-BUKRS
     AND GJAHR = I_SUCESS-GJAHR
     AND ZSTAUS = '2'            "已开票
     AND VATREF = I_SUCESS-VATREF.
  LOOP AT LI_GTS001 ASSIGNING <LREC_GTS001>.
    READ TABLE I_SUCESS INTO REC_LOG
           WITH KEY BUKRS  = <LREC_GTS001>-BUKRS
                    GJAHR  = <LREC_GTS001>-GJAHR
                    VATREF = <LREC_GTS001>-VATREF.
    IF SY-SUBRC = 0.
      <LREC_GTS001>-ZSTAUS    = '3'.          "已回传
      <LREC_GTS001>-ZVATVOICE = REC_LOG-VATNO.
      <LREC_GTS001>-ZREDATE = SY-DATUM.
      <LREC_GTS001>-ZRENAME = SY-UNAME.
    ENDIF.
  ENDLOOP.
  DO 1 TIMES.
    CALL FUNCTION 'ENQUEUE_EYSE_GTS001'
      EXPORTING
        MODE_YSE_GTS001 = C_E
      EXCEPTIONS
        FOREIGN_LOCK    = 1
        SYSTEM_FAILURE  = 2
        OTHERS          = 3.
    IF SY-SUBRC <> 0.
      FLG_STOP = C_FLAG.
      MESSAGE E000 WITH TEXT-W33.
    ENDIF.
  ENDDO.
  CHECK FLG_STOP IS INITIAL.
  MODIFY YSE_GTS001 FROM TABLE LI_GTS001.
  IF SY-SUBRC <> 0.
    V_UPDATE = C_FLAG.
  ENDIF.
  IF V_UPDATE IS INITIAL.
    COMMIT WORK.
  ELSE.
   ROLLBACK WORK.
  ENDIF.
  CALL FUNCTION 'DEQUEUE_EYSE_GTS001'
    EXPORTING
      MODE_YSE_GTS001 = C_E.
ENDFORM.                    " UPDAE_GTS001
