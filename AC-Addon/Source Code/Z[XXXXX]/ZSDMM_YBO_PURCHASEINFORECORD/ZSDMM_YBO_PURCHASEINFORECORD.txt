REPORT ZAL_ABAP message-id 26 line-size 255
no standard page heading.
* YBO_PurchaseInfoRecord.
PARAMETER DOWNLOAD(1) DEFAULT 'N' lower case. "N-svr,Y-clnt
PARAMETER EXECMODE(1) DEFAULT 'B' lower case. "D-dlg,B-btch
PARAMETER OUT_DIR(48) DEFAULT "output file dir
*'/var/load/CP1/UK/read' LOWER CASE.
'/var/load/xxx/UK/read' LOWER CASE.
PARAMETER IN_DIR(48) DEFAULT "input file dir
*'/var/load/CP1/UK/read' LOWER CASE.
'/var/load/xxx/UK/read' LOWER CASE.

PARAMETER P_DF_VK(40) DEFAULT "ABAP data flow object key
'' lower case.
PARAMETER P_DI_GEN(40) DEFAULT "DI version that generated ABAP
'' lower case.

*** Machine generated ABAP. Do not modify.            ***
*** # Copyright Business Objects S.A.  All rights reserved. ***
*
* Date Time:
*    06/09/15 02:54:15
* SAP used for generated this ABAP:
*    Release: 701
*    Host   : 10.25.3.26
*
* ABAP Dataflow Name:
*    DF_SDMM_R3_PurchaseInfoRecord
* ABAP Dataflow comments:
*    SAP source: EINA, AINE
* ABAP program name in SAP:
*    YBO_PURCHASEINFORECORD
* Generated ABAP file name:
*    D:/Data/SAPLogistics/PRD/ABAP/YBO_PurchaseInfoRecord
TABLES EINA.
TABLES EINE.

DATA: begin of ITAB3 occurs 0,
MANDT(3) TYPE C,
INFNR(10) TYPE C,
EKORG(4) TYPE C,
ESOKZ(1) TYPE C,
WERKS(4) TYPE C,
APLFZ(16) TYPE P DECIMALS 0,
EKGRP(3) TYPE C,
BSTAE(4) TYPE C,
EVERS(2) TYPE C,
NETPR(16) TYPE P DECIMALS 2,
WAERS(5) TYPE C,
PEINH(16) TYPE P DECIMALS 0,
BPRME(3) TYPE C,
EFFPR(16) TYPE P DECIMALS 2,
LIFNR(10) TYPE C,
MATNR(18) TYPE C.
DATA: end of ITAB3.

data: append_flag(1) value ' ',
      cntbuf type i,
      delimleng type i.

CONSTANTS C_DF_VK(40) VALUE '7942'.
CONSTANTS C_DI_GEN(40) VALUE '12.2.2.3'.
DATA WARN_MSG(50).
DATA: gv_directory     TYPE epsdirnam  VALUE '/var/load/xxx/UK/read/',
      gv_logsys        like tbdlst-logsys.

start-of-selection.
* Logical system
  CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
    IMPORTING
      own_logical_system             = gv_logsys
    EXCEPTIONS
      own_logical_system_not_defined = 1
      OTHERS                         = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE 'E' NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    STOP.
  ENDIF.
  REPLACE 'xxx' IN out_dir WITH gv_logsys(3).
  REPLACE 'xxx' IN in_dir WITH gv_logsys(3).



PERFORM FORM3.
PERFORM FORM4.
FREE ITAB3.

end-of-selection.

CLEAR WARN_MSG.

IF NOT P_DF_VK IS INITIAL.
  IF P_DF_VK <> C_DF_VK.
     CONCATENATE '$$Warning$'
                 C_DF_VK
                 '$' INTO WARN_MSG.
  ENDIF.
ENDIF.
IF NOT P_DI_GEN IS INITIAL.
  IF P_DI_GEN <> C_DI_GEN.
     IF WARN_MSG IS INITIAL.
       CONCATENATE '$$Warning$$'
                   C_DI_GEN
                   INTO WARN_MSG.
     ELSE.
       CONCATENATE WARN_MSG
                   C_DI_GEN
                   INTO WARN_MSG.
     ENDIF.
  ENDIF.
ENDIF.

IF NOT WARN_MSG IS INITIAL.
  IF EXECMODE = 'D'.
    WRITE WARN_MSG.
    NEW-LINE.
  ELSE.
    MESSAGE S000 with WARN_MSG.
  ENDIF.
ENDIF.


write  '* Program Complete *'.
write  '# Copyright Business Objects S.A.  All rights reserved.'
.

FORM FORM3.
DATA ALTMP1(3) TYPE C.
DATA ALTMP2(10) TYPE C.
DATA ALTMP3(4) TYPE C.
DATA ALTMP4(1) TYPE C.
DATA ALTMP5(4) TYPE C.
DATA ALTMP6(16) TYPE P DECIMALS 0.
DATA ALTMP7(3) TYPE C.
DATA ALTMP8(4) TYPE C.
DATA ALTMP9(2) TYPE C.
DATA ALTMP10(16) TYPE P DECIMALS 2.
DATA ALTMP11(5) TYPE C.
DATA ALTMP12(16) TYPE P DECIMALS 0.
DATA ALTMP13(3) TYPE C.
DATA ALTMP14(16) TYPE P DECIMALS 2.
DATA ALTMP15(10) TYPE C.
DATA ALTMP16(18) TYPE C.

DATA EINE9MANDT LIKE EINE-MANDT.
DATA EINE9INFNR LIKE EINE-INFNR.
DATA EINE9EKORG LIKE EINE-EKORG.
DATA EINE9ESOKZ LIKE EINE-ESOKZ.
DATA EINE9WERKS LIKE EINE-WERKS.
DATA EINE9APLFZ LIKE EINE-APLFZ.
DATA EINE9EKGRP LIKE EINE-EKGRP.
DATA EINE9BSTAE LIKE EINE-BSTAE.
DATA EINE9EVERS LIKE EINE-EVERS.
DATA EINE9NETPR LIKE EINE-NETPR.
DATA EINE9WAERS LIKE EINE-WAERS.
DATA EINE9PEINH LIKE EINE-PEINH.
DATA EINE9BPRME LIKE EINE-BPRME.
DATA EINE9EFFPR LIKE EINE-EFFPR.
DATA EINA9LIFNR LIKE EINA-LIFNR.
DATA EINA9MATNR LIKE EINA-MATNR.
DATA EINA9INFNR LIKE EINA-INFNR.



SELECT
  EINE9~MANDT
  EINE9~INFNR
  EINE9~EKORG
  EINE9~ESOKZ
  EINE9~WERKS
  EINE9~APLFZ
  EINE9~EKGRP
  EINE9~BSTAE
  EINE9~EVERS
  EINE9~NETPR
  EINE9~WAERS
  EINE9~PEINH
  EINE9~BPRME
  EINE9~EFFPR
  EINA9~LIFNR
  EINA9~MATNR
  EINA9~INFNR
into (EINE9MANDT,
  EINE9INFNR,
  EINE9EKORG,
  EINE9ESOKZ,
  EINE9WERKS,
  EINE9APLFZ,
  EINE9EKGRP,
  EINE9BSTAE,
  EINE9EVERS,
  EINE9NETPR,
  EINE9WAERS,
  EINE9PEINH,
  EINE9BPRME,
  EINE9EFFPR,
  EINA9LIFNR,
  EINA9MATNR,
  EINA9INFNR)
FROM EINE AS EINE9
 INNER JOIN EINA AS EINA9
 ON ( EINE9~INFNR = EINA9~INFNR )
WHERE EINE9~EKORG IN ('CN01',
'CN04',
'HK01',
'RU01').
ALTMP1 = EINE9MANDT.
ALTMP2 = EINE9INFNR.
ALTMP3 = EINE9EKORG.
ALTMP4 = EINE9ESOKZ.
ALTMP5 = EINE9WERKS.
ALTMP6 = EINE9APLFZ.
ALTMP7 = EINE9EKGRP.
ALTMP8 = EINE9BSTAE.
ALTMP9 = EINE9EVERS.
ALTMP10 = EINE9NETPR.
ALTMP11 = EINE9WAERS.
ALTMP12 = EINE9PEINH.
ALTMP13 = EINE9BPRME.
ALTMP14 = EINE9EFFPR.
ALTMP15 = EINA9LIFNR.
ALTMP16 = EINA9MATNR.
 move ALTMP1 to ITAB3-MANDT.
 move ALTMP2 to ITAB3-INFNR.
 move ALTMP3 to ITAB3-EKORG.
 move ALTMP4 to ITAB3-ESOKZ.
 move ALTMP5 to ITAB3-WERKS.
 move ALTMP6 to ITAB3-APLFZ.
 move ALTMP7 to ITAB3-EKGRP.
 move ALTMP8 to ITAB3-BSTAE.
 move ALTMP9 to ITAB3-EVERS.
 move ALTMP10 to ITAB3-NETPR.
 move ALTMP11 to ITAB3-WAERS.
 move ALTMP12 to ITAB3-PEINH.
 move ALTMP13 to ITAB3-BPRME.
 move ALTMP14 to ITAB3-EFFPR.
 move ALTMP15 to ITAB3-LIFNR.
 move ALTMP16 to ITAB3-MATNR.
 append ITAB3.
 cntbuf = cntbuf + 1.
 if download = 'N'.
  if cntbuf > 5000.
    perform FORM4.
    clear cntbuf.
    refresh ITAB3.
    append_flag = 'A'.
  endif.
 endif.
ENDSELECT.
ENDFORM.

FORM FORM4.
data: outfile(128), ldfile(50).
ldfile = 'EINA_EINE_PURCHINFORECORD'.
concatenate out_dir ldfile into outfile
  separated by '/'.
data  dlmtlen type i value '1'.
data xdlmtlen type i value '1'.
data:
  ht(1) type c,
  xht(1) type x,
  conv type ref to cl_abap_conv_in_ce.
xht = '7F'.
conv = cl_abap_conv_in_ce=>create(
  encoding = '4110'
  input = xht
).
call method conv->read(
  exporting n    = xdlmtlen
  importing data = ht
            len = dlmtlen
).
data return_code type i.
 perform write_delimited_file
           tables   ITAB3
           using    outfile
                    append_flag
                    ht
                    dlmtlen
                    download
           changing return_code.

  case return_code.
    when 1.
      IF EXECMODE = 'D'.
        WRITE: /5 'No line selected'.
      ELSE.
        MESSAGE E098.
      ENDIF.
    when 2.
      IF EXECMODE = 'D'.
        WRITE: /5 'Open File Error -- ', 25 OUTFILE.
      ELSE.
        MESSAGE  E107 WITH OUTFILE.
      ENDIF.
    when 3.
      IF EXECMODE = 'D'.
        WRITE: /5 'Data exceed length limit (8192) '.
      ELSE.
        MESSAGE  E000 WITH
             'Data exceed length limit (8192) '.
      ENDIF.
    when 4.
      IF EXECMODE = 'D'.
        WRITE: /5 'Call function WS_DOWNLOAD error'.
      ELSE.
        MESSAGE  E000 WITH
             'Call function WS_DOWNLOAD error'.
      ENDIF.
  endcase.
ENDFORM.

FORM SUBSTRING USING SRC BEG LEN CHANGING RET.

DATA: VA1 TYPE I.
DATA: VA2 TYPE I.
DATA: VA3 TYPE I.

VA3 = STRLEN( SRC ).

IF  BEG = 0.   VA1 = 0.
ELSE.
  IF  BEG < 0.
    VA1 = VA3 + BEG.
    IF  VA1 < 0.   VA1 = 0.
    ENDIF.
  ELSE.          VA1 = BEG - 1.
  ENDIF.
ENDIF.

IF  LEN < 0.   VA2 = 0.
ELSE.          VA2 = VA3 - VA1.
ENDIF.

IF  VA2 > LEN. VA2 = LEN.
ENDIF.

IF  VA2 < 1.   MOVE ''           TO RET.
ELSE.          MOVE SRC+VA1(VA2) TO RET.
ENDIF.

ENDFORM.

form write_delimited_file
           tables   datatab
           using    file
                    append
                    delimit
                    dlength
                    dwnload
          changing rc.

  data: type1,
        appd(1),
        temp(32),
        time1(8),
        date1(10),
        output(8192),
        rcount type i,
        offset type i,
        tablen type i,
        maxlen type i value '8192'.

  data: begin of clientab occurs 0,
             output(8192),
          end of clientab.

  field-symbols: <f>.
  field-symbols <delim1>.
  data delim2(16).
  data l_filename type string.

  appd = append.
  if appd is not initial.
     appd = 'X'.
  endif.
  move file to l_filename.
  describe table datatab lines tablen.


  if dwnload = 'Y'.
     clear clientab. refresh clientab.
     rcount = 0.
  else.
     if appd = space.
         open dataset file for output in text mode ENCODING
UTF-8.
     else.
         open dataset file for appending in text mode ENCODING
UTF-8.
     endif.
     if sy-subrc <> 0.
         rc = 2. exit.
     endif.
  endif.

  loop at datatab.
    clear: tablen, offset, output.
    do.
      assign component sy-index of
         structure datatab to <f>.
      if sy-subrc <> 0. exit. endif.
      if sy-index > 1.
         assign delimit(dlength) TO <delim1> CASTING TYPE C.
         delim2 = <delim1>.
         write delim2(dlength) to output+offset(dlength).
         add dlength to offset.
      endif.

      describe field <f> type type1.

      if type1 = 'I' or type1 = 'N'.
          type1 = 'P'.
      endif.

      case type1.
        when 'D'.
          if <f> = '00000000'.
             <f> = ' '.
          else.
             move <f> to time1.
             assign time1 to <f>.
          endif.
        when 'F'.
          if <f> = '0.0'.
            temp = '0.0'.
          else.
             write <f> to temp exponent 0.
          endif.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
        when 'P'.
          if <f> < 0.
             write '-' to output+offset(1).
             add 1 to offset.
             <f> = <f> * ( -1 ).
          endif.
          move <f> to temp.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
      endcase.

      sy-fdpos = strlen( <f> ).

      tablen = offset + sy-fdpos.
      if tablen > maxlen.
         rc = 3. exit.
      endif.
      write <f> to output+offset(sy-fdpos).
      add sy-fdpos to offset.
    enddo.

    if dwnload = 'Y'.
       clientab-output = output.
       append clientab.
       rcount = rcount + 1.
       if rcount >= 50.
          SY-BATCH = SPACE.
          CALL FUNCTION 'GUI_DOWNLOAD'
            EXPORTING
              FILENAME = l_filename
              FILETYPE = 'ASC'
              CODEPAGE = '4110'
              APPEND   = appd
              WRITE_FIELD_SEPARATOR = 'X'
*            IMPORTING
*              FILELENGTH =
            TABLES
              DATA_TAB = clientab
            EXCEPTIONS
              OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
          clear clientab. refresh clientab.
          rcount = 0. appd = 'A'.
       endif.
    else.
       transfer output to file.
    endif.
  endloop.

  if dwnload = 'Y'.
       SY-BATCH = SPACE.
       CALL FUNCTION 'GUI_DOWNLOAD'
         EXPORTING
           FILENAME = l_filename
           FILETYPE = 'ASC'
              CODEPAGE = '4110'
           APPEND   = appd
           WRITE_FIELD_SEPARATOR = 'X'
*         IMPORTING
*           FILELENGTH =
         TABLES
           DATA_TAB = clientab
         EXCEPTIONS
           OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
  else.
       close dataset file.
  endif.
endform.
