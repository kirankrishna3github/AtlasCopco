*&---------------------------------------------------------------------*
*& Report  ZTEST_UMK
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  ZTEST_UMK.

CONSTANTS :            gc_max_item   TYPE i VALUE 10.
DATA :    lv_t001l_lines TYPE i VALUE 100,
          lv_times    TYPE i,
          lv1_times   TYPE p DECIMALS 2."+MOD-001

  lv1_times =  ceil( lv_t001l_lines / gc_max_item ).
  lv_times = lv1_times.
CALL FUNCTION 'ROUND'
  EXPORTING
*   DECIMALS            = 0
    input               = lv_times
*   SIGN                = ' '
 IMPORTING
   OUTPUT               = lv_times
* EXCEPTIONS
*   INPUT_INVALID       = 1
*   OVERFLOW            = 2
*   TYPE_INVALID        = 3
*   OTHERS              = 4
          .
IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.


WRITE:  lv_times.
***
***DATA : lw_text(10) TYPE c VALUE '1234',
***       lw_msg TYPE bal_s_msg,
***       l_text(100) TYPE c .
***
***
***  DATA :  gv_log_handle TYPE balloghndl,
***          lw_s_log      TYPE bal_s_log,   " BAL_LOG_CREATE - To send application log header
***          lw_s_msg  TYPE bal_s_msg,       " BAL_LOG_CREATE - To send application message
***          lt_log_handle TYPE bal_t_logh.  " BAL_DB_SAVE - to pass the logs to be saved
***
***  lw_s_log-object    = 'YSE_CUST'.
***  lw_s_log-subobject = 'YSE_CUST_STAT'.
***  lw_s_log-aldate    = sy-datlo.
***  lw_s_log-altime    = sy-timlo.
***  lw_s_log-aluser    = sy-uname.
***  CALL FUNCTION 'BAL_LOG_CREATE'
***    EXPORTING
***      i_s_log      = lw_s_log
***    IMPORTING
***      e_log_handle = gv_log_handle.
***  lw_msg-msgty = 'I'.
***lw_msg-msgid   = 'YSE_CUST'.
***lw_msg-msgno = '001'.
***lw_msg-msgv1 = 'Hello world'.
***lw_msg-msgv2 = lw_text.
***
***PERFORM bal_log.
***
**** Save application log to database
***  APPEND gv_log_handle TO lt_log_handle.
***  CALL FUNCTION 'BAL_DB_SAVE'
***    EXPORTING
***      i_save_all       = 'X'
***      i_t_log_handle   = lt_log_handle
***    EXCEPTIONS
***      log_not_found    = 0
***      save_not_allowed = 0
***      numbering_error  = 0
***      OTHERS           = 0.
****TABLES : vbak.
****SELECT-OPTIONS: so_erdat  FOR vbak-erdat OBLIGATORY.
****start-of-selection .
****
****  field-symbols <lt_pay_data> type any table.
****  data lr_pay_data type ref to data.
****
****  cl_salv_bs_runtime_info=>set( exporting display  = abap_true
****                                          metadata = abap_false
****                                          data     = abap_true ).
****
****  submit YSE_CCRDC_REPORT WITH SO_ERDAT in SO_ERDAT and return.
****  try.
****      cl_salv_bs_runtime_info=>get_data_ref( importing r_data = lr_pay_data ).
****      assign lr_pay_data->* to <lt_pay_data>.
****    catch cx_salv_bs_sc_runtime_info.
****      message `Unable to retrieve ALV data` type 'E'.
****  endtry.
****
****  cl_salv_bs_runtime_info=>clear_all( ).
***
****DATA : DMBTR TYPE DMBTR VALUE '10000.01',
****       LV_DMBTR(15) TYPE C ..
********       lw_waers TYPE WAERS.
********
********       DATA : lv_stern TYPE i.
********CLEAR : LV_DMBTR.
********* FIELD-SYMBOLS: <f1> TYPE ANY.
*********
*********  UNASSIGN <F1>.
*********
*********  ASSIGN DMBTR TO <F1>.
*********  MOVE <F1> TO LV_DMBTR.
********
*********       MOVE DMBTR TO LV_DMBTR.
********lv_stern = strlen( dmbtr ).
********
********lv_stren = lv_strlen - 2.
********
********lv_dmbtr = dmbtr+0(lv_stern).
********
********
********   WRITE :/ LV_DMBTR.
****
****       lv_dmbtr = dmbtr.
****       WRITE :/ LV_DMBTR.
***
***INCLUDE ZTEST_UMK_BAL_LOGF01.
