*&---------------------------------------------------------------------*
*& Report  ZCWU_FI_YUNNAN
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  zcwu_fi_yunnan.

*----------------------------------------------------------------------*
* Der FB START_ONLINE wird im selben Rollbereich mit verschiedenen
* Berichten. Es darf deshalb keine echten globalen Daten geben!
* D.h. alle m¨¹ssen initialisiert werden!!
*----------------------------------------------------------------------*


INCLUDE lkyp4typ.                    " Global Types

TYPE-POOLS: rkd1.

CONSTANTS: c_msgty_s    LIKE sy-msgty VALUE 'S',
           c_msgty_e    LIKE sy-msgty VALUE 'E'.

INCLUDE fkcbdc00.                    " data mining variables
INCLUDE mkcbgcco.
INCLUDE mkcbgc30.
INCLUDE lkypmmac.                    " Performance-Messung

DATA: report      TYPE rkd_sc_report,
      fdep_tab    LIKE cdidep  OCCURS  20 WITH HEADER LINE,
      field_tab   LIKE cdifie  OCCURS 100 WITH HEADER LINE,
      add_sel_tab LIKE cedst   OCCURS  10 WITH HEADER LINE,
      texte_tab   LIKE rkb1w   OCCURS 200 WITH HEADER LINE,
      tc          LIKE cfbtc01,
      zeit_f      LIKE cftime,
      rkb1d       LIKE rkb1d,
      rkb1u       LIKE rkb1u.
DATA: g_s_vrange   TYPE rkd0_s_vrange,
      g_ts_vrange  TYPE SORTED TABLE OF rkd0_s_vrange
                        WITH NON-UNIQUE KEY fskz fnam vnam.

TABLES: rkb1f, coix, coix_data40.

TYPES: BEGIN OF ys_send,
         fienm  LIKE cdifie-fienm,
         par    TYPE i,
         int    TYPE i,
         typ2   TYPE i,
         typ5   TYPE i,
      END OF ys_send.

TYPES: BEGIN OF g_s_sel,
         sign   TYPE cedst-sign,
         option TYPE cedst-option,
         low    TYPE cedst-low,
         high   TYPE cedst-high,
       END OF g_s_sel,
       g_t_sel TYPE g_s_sel OCCURS 0.

DATA: char1(1),
      char2(2).

DATA: t_addsel TYPE rkd_t_sel.

DATA BEGIN OF var_tab OCCURS 10.
        INCLUDE STRUCTURE cfbvp01.
DATA END OF var_tab.

DATA: coixid_pakom LIKE rkb1i-coix_id,
      coixid       LIKE rkb1i-coix_id,
      coix_dskz    LIKE rkb1d-rcoix,
      last_num     LIKE cfcokey-pakom,
      called       LIKE char1,
      mode         LIKE char1,
      i            TYPE i,
      check        LIKE ccvalid-xfeld.

* Globale Ablage der ¨¹bergebenen DDIC-Version
DATA: global_dvers LIKE tkeb1-dvers.
* Aktuelle DDIC-Version

DATA g_bg_kokrs LIKE rkb1x-kokrs.        "H429307 - background kokrs

*.................................Globale Daten f¨¹r RKD_PAKOMB_READ

DATA: gu23_var   TYPE rkd_t_var,
      gu23_tabix LIKE sy-tabix.


* information about the receiver fields for report/report interface
TYPES: BEGIN OF t_s_rec_info,
          fienm  LIKE cdifie-fienm,
          oblig  TYPE i,
          hoblig TYPE i,
          low    TYPE i,
          high   TYPE i,
          typ2   TYPE i,
          typ5   TYPE i,
          adds   TYPE i,
          selopt TYPE cfbvp01-vparsel,
        END OF t_s_rec_info.
TYPES:  t_t_rec_info TYPE STANDARD TABLE OF t_s_rec_info.

TYPE-POOLS: rkd.
PARAMETERS:   applcla TYPE  rkb1d-applclass,
              function  TYPE  char10 DEFAULT  'EXEC',
              repid TYPE  rkb1d-repid,
              i_vari TYPE  rkb1d-variante,
              rsti_ca TYPE  char1,
              smodus  TYPE  char1 DEFAULT 'N',
              subclass  TYPE  rkb1d-subclass  ,
              tabname TYPE  rkb1d-tabname      ,
              i_info  TYPE  char1.

START-OF-SELECTION.

  DATA:  c_ts_vrange TYPE rkd_ts_vrange.
  DATA:  p_vartab TYPE STANDARD TABLE OF cfbvp01.
  DATA:  e_techtab TYPE t_info_tab.
  DATA: u11_function  TYPE sy-ucomm,
        u11_rsti_ca TYPE char1.
  u11_function  = function.
  u11_rsti_ca = rsti_ca.
  PERFORM report_start TABLES p_vartab
                              e_techtab
                       USING applcla
                             tabname
                             subclass
                             repid
                             i_vari
                             smodus
                             u11_rsti_ca
                             u11_function
                             i_info
                    CHANGING c_ts_vrange.

*&---------------------------------------------------------------------*
*&      Form  report_start
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->C_VARTAB            text
*      -->E_TECHTAB           text
*      -->VALUE(P_APPL)       text
*      -->VALUE(P_TABNAME)    text
*      -->VALUE(P_SUBCLASS)   text
*      -->VALUE(P_REPID)      text
*      -->VALUE(I_VARI)       text
*      -->VALUE(P_SMODUS)     text
*      -->VALUE(P_RSTI_CA)    text
*      -->VALUE(P_FUNCTION)   text
*      -->VALUE(P_INFO_MODE)  text
*      -->CT_TS_VRANGE        text
*----------------------------------------------------------------------*
FORM report_start TABLES c_vartab            TYPE rkd_t_var
                         e_techtab     " TYPE t_info_tab
                  USING  value(p_appl)       LIKE rkb1d-applclass
                         value(p_tabname)    LIKE rkb1d-tabname
                         value(p_subclass)   LIKE rkb1d-subclass
                         value(p_repid)      LIKE rkb1d-repid
                         value(i_vari)       TYPE rkb1d-variante
                         value(p_smodus)     LIKE rkb1d-smodus
                         value(p_rsti_ca)    TYPE char1
                         value(p_function)   TYPE c
                         value(p_info_mode)  TYPE char1
                CHANGING ct_ts_vrange        TYPE rkd_ts_vrange."TTK8/99

  DATA: res_subrc            LIKE sy-subrc,
        res_popup            TYPE rkd_flag,
        res_var_tab_from_mem LIKE cfbvp01 OCCURS  1  WITH HEADER LINE,
        l_vartab             TYPE rkd_t_var,      " TTK, 18.5.98
        l_vt                 TYPE rkd_s_var,      " TTK, 18.5.98
        l_tt                 TYPE s_info_tab,          " TTK, 18.5.98
        l_ft                 LIKE LINE OF field_tab,   " TTK, 18.5.98
        l_sel_screen         TYPE char1.

  CLEAR: rkb1d, report, tc, zeit_f, rkb1u.
  REFRESH: texte_tab, field_tab, fdep_tab, add_sel_tab.
  IF p_rsti_ca EQ 'M'.
*..................................
*......Aus Mail gerufen...............
    CALL FUNCTION 'RKD_OBJPARB_RETRIEVE'
      IMPORTING
        applc               = p_appl
        repid               = p_repid
        subcl               = p_subclass
        table               = p_tabname
        smods               = p_smodus
      TABLES
        var_tab_from_memory = res_var_tab_from_mem
        c_add_sel_tab       = add_sel_tab.
  ENDIF.

  rkb1d-applclass        = p_appl.
  rkb1d-tabname          = p_tabname.
  report-rkb1x-tabname   = p_tabname.
  rkb1d-subclass         = p_subclass.
  rkb1d-repid            = p_repid.
  rkb1d-variante         = i_vari.
  rkb1d-smodus           = p_smodus.
  PERFORM e_start_1 TABLES   fdep_tab
                             field_tab
                    USING    p_rsti_ca
                    CHANGING rkb1d
                             rkb1u
                             tc
                             report
                             res_subrc.
* Info zur¨¹ckgeben oder Input verarbeiten ?             TTK, 18.5.98
  CASE p_info_mode.
    WHEN 'G'.                          " Get info and return
      REFRESH: e_techtab, c_vartab.
      LOOP AT report-var INTO l_vt WHERE fskz    CA 'FSX'
                                     AND vartyp  CA '1234'
                                 AND varrart CA rkd_varrart-eingabe_all
                                     AND flstart NE space.
        l_tt-fnam  = l_vt-fnam.
        l_tt-lhkz  = l_vt-lhkz.
        l_tt-keyid = l_vt-keyid.
        READ TABLE field_tab WITH KEY fienm = l_tt-fnam INTO l_ft.
        IF sy-subrc = 0.
          l_tt-rolnm = l_ft-rolnm.
          APPEND l_tt TO e_techtab.                  "#EC *  "Benutzt?!
          APPEND l_vt TO c_vartab.
        ENDIF.
      ENDLOOP.
    WHEN 'U'.                          " use e_vartab and run
* Kopiere ¨¹bergeben Vartab
      l_vartab[] = c_vartab[].
* Keyid aus vartab l#schen (f¨¹r Preview)
    WHEN 'P'.                          "preview
      l_vartab[] = report-var[].
      LOOP AT l_vartab INTO l_vt.
        CLEAR l_vt-keyid.
        MODIFY l_vartab FROM l_vt.
      ENDLOOP.
    WHEN OTHERS.                       " use default vartab and run
      l_vartab[] = report-var[].
  ENDCASE.
* R¨¹cksprung, falls p_info_mode = 'G'
  CHECK p_info_mode <> 'G'.
*................................... Sitzt SMODUS noch ??
  IF res_subrc EQ 0.
    IF p_rsti_ca EQ 'M'.
*..................................
*......Aus Mail gerufen...............
      CALL FUNCTION 'RKD_VAR_TAB_SUBSTITUTE'
           IMPORTING
                e_popup             = res_popup
           TABLES
*                var_tab_from_coix   = report-var
                var_tab_from_coix   = l_vartab              "H376369
                var_tab_from_memory = res_var_tab_from_mem.
    ELSEIF p_rsti_ca EQ 'I'.
*.............................. Start aus RFC-Schnittstelle

*     analog RKD_VAR_TAB_SUBSTITUTE'
*
    ENDIF.
* i0_smodus_h steuert Erscheinen des Selektionsbildschirmes
* bei info_mode = P, d.h. Preview, wird kein Selektionsbild ben#tigt
    IF p_info_mode EQ rkd_smodus-preview.
      l_sel_screen = 2.
    ELSEIF p_info_mode EQ 'V'.
* Bericht mit Variante und ohne Selektsionsbild aufrufen
      l_sel_screen = 3.
    ELSEIF p_info_mode EQ 'W'.
* Bericht mit Variante und mit Selektsionsbild aufrufen
      l_sel_screen = ' '.
    ELSE.
      l_sel_screen = ' '.
    ENDIF.

    CALL FUNCTION 'RKD_REPORT_START_ONLINE'
      EXPORTING
        i0_function      = p_function
        i0_popup         = res_popup
        i0_rkb1d         = rkb1d
        i0_rkb1f         = report-rkb1f
        i0_rkb1u         = rkb1u
        i0_rkb1x         = report-rkb1x
        i0_tc            = tc
        i0_zeit_f        = zeit_f
        rsti_ca          = p_rsti_ca
        i0_smodus_h      = l_sel_screen
      IMPORTING
        e0_rkb1d         = rkb1d
        e0_rkb1x         = report-rkb1x
      TABLES
        i0_add_sel_tab   = add_sel_tab
        i0_add_tab0      = report-add0
        i0_back_tab      = report-back
        i0_bed_tab       = report-bed
        i0_excep_tab     = report-excep
        i0_extxt_tab     = report-extxt
        i0_fdep_tab      = fdep_tab
        i0_field_tab     = field_tab
        i0_form_tab      = report-form
        i0_level_tab     = report-level
        i0_lrech         = report-lrech
        i0_options       = report-options
        i0_port_tab      = report-port
        i0_print         = report-print
        i0_ps_tab        = report-ps
        i0_seig          = report-seig
        i0_sel_tab       = report-sel
        i0_sf_tab        = report-sf
        i0_sh_tab        = report-sh
        i0_sort_tab      = report-sort
        i0_summ_tab      = report-summ
        i0_texte_tab     = texte_tab
        i0_textparam_tab = report-textparam
        i0_trace_tab     = report-trace
        i0_var_tab       = l_vartab
        i0_zahld_tab     = report-zahld
        i0_zwert         = report-zwert
      CHANGING
        c_t_lcol         = report-lcol
        c_ts_vrange      = ct_ts_vrange. " TTK, 20.8.99 46C
  ENDIF.
ENDFORM.                    "report_start

*&---------------------------------------------------------------------*
*&      Form  e_start_1
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_FDEP_TAB   text
*      -->P_FIELD_TAB  text
*      -->P_KOKRS_D    text
*      -->P_RKB1D      text
*      -->P_RKB1U      text
*      -->P_TC         text
*      -->P_REPORT     text
*      -->P_SUBRC      text
*----------------------------------------------------------------------*
FORM e_start_1 TABLES   p_fdep_tab   STRUCTURE cdidep
                        p_field_tab  STRUCTURE cdifie
               USING    p_kokrs_d    LIKE char1
               CHANGING p_rkb1d      LIKE rkb1d
                        p_rkb1u      LIKE rkb1u
                        p_tc         LIKE cfbtc01
                        p_report     TYPE rkd_sc_report
                        p_subrc      TYPE simple.

  DATA: BEGIN OF es1_modif,
          report(1)   VALUE 'F',     " modification of report
          position(1) VALUE 'F',     " modification of hierarchy positio
        END OF es1_modif.
  DATA: l_msgv1           LIKE sy-msgv1,
        l_msgv2           LIKE sy-msgv2,
        import_status     TYPE rkd2_s_import_status,
        check_status      TYPE rkd2_s_check_status,
        generate_status   TYPE rkd2_s_generate_status.
  DATA: l_arbgb LIKE mesg-arbgb VALUE 'KY'.

  CLEAR p_subrc.

  CALL FUNCTION 'TRANSACTIONS_INITIALIZE'
    EXPORTING
      applclass    = p_rkb1d-applclass
    IMPORTING
      e_applclass  = p_rkb1d-applclass
      transactions = p_tc.

  IF p_kokrs_d NE space.
    CALL FUNCTION 'RKD_SET_DEFAULT_KOKRS'
      CHANGING
        kokrs = p_report-rkb1x-kokrs.
  ENDIF.

  CALL FUNCTION 'RKD_RKB1X_SET'
    EXPORTING
      applclass = p_rkb1d-applclass
      i_rkb1x   = p_report-rkb1x
    IMPORTING
      e_rkb1x   = p_report-rkb1x
      e_table   = p_rkb1d-tabname.
*..................................... Verzeichnis TKEB1 lesen
  CALL FUNCTION 'REPORT_DIRECTORY_READ'
    EXPORTING
      monitor             = p_tc-monitor
      report_parameter_in = p_rkb1d
    IMPORTING
      report_parameter    = p_rkb1d
    EXCEPTIONS
      no_report           = 01.
  IF sy-subrc GT 0.
    MESSAGE e014(kh) WITH p_rkb1d-repid.
  ENDIF.
*..................................
*... Datenbericht aus Berichtsheft?...
  IF p_rkb1d-smodus CA 'HP' AND p_rkb1d-smode CA '23'.          "preview
    CALL FUNCTION 'BB_DATA_REPORT_EXECUTE'
      EXPORTING
        i_rkb1d        = p_rkb1d
        i_transactions = p_tc
        i_modif        = es1_modif
        i_display_all  = space.
    p_subrc = 4.
    EXIT.
  ENDIF.
*..................................
*... Rkb1U_SET........................
  CALL FUNCTION 'RKD_RKB1U_SET'
    EXPORTING
      i_applclass = p_rkb1d-applclass
      i_rkb1x     = p_report-rkb1x
    IMPORTING
      e_rkb1u     = p_rkb1u.     " enqueue Flag f¨¹r rep_imp
*..................................... Import der COIX-Definition
  CALL FUNCTION 'RKD_REPORT_IMPORT_C'
    EXPORTING
      i_rkb1x             = p_report-rkb1x
      import_mode         = '0'
      import_message_typ  = 'S'
      import_enqueue_flag = p_rkb1u-enqueue
    IMPORTING
      e_import_status     = import_status
      e_check_status      = check_status
      e_generate_status   = generate_status
      e_report            = p_report
    TABLES
      e_field_tab         = p_field_tab
      e_fdep_tab          = p_fdep_tab
    CHANGING
      c_rkb1d             = p_rkb1d.
*.......................... p_report-rkb1x ist erst jetzt vollst#ndig
  CALL FUNCTION 'RKD_RKB1U_SET'
    EXPORTING
      i_applclass = p_rkb1d-applclass
      i_rkb1x     = p_report-rkb1x
    IMPORTING
      e_rkb1u     = p_rkb1u.

  CLEAR p_subrc.
  IF     import_status CA 'X'.
    p_subrc = 8.
  ELSEIF check_status CA 'X'.
    p_subrc = 8.
    l_msgv1 = p_rkb1d-repid.
    l_msgv2 = p_rkb1d-form.
    CALL FUNCTION 'RKD_ERROR_MESSAGE'
      EXPORTING
        i_type   = 'A'
        i_number = '165'
        i_id     = l_arbgb
        i_msgv1  = l_msgv1
        i_msgv2  = l_msgv2
        i_msgv3  = 'A'
        i_rkb1d  = p_rkb1d
        i_rkb1x  = p_report-rkb1x
        i_group  = 'B'.
  ENDIF.

* Erweiterung Immobilien: Export der Selektionstabelle zur Auswertung *
* zum Zeitpunkt PBO auf dem Selektionsdynpro                          *
  PERFORM fvvi_export_sel_tab(saplkyp4)
          TABLES p_report-sel
                 p_report-form
          USING  rkb1d-applclass
          IF FOUND.

ENDFORM.                    "e_start_1
