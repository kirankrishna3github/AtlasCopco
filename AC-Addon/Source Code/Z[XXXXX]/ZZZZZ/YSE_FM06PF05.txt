*----------------------------------------------------------------------*
*    Subroutines .
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  GET_VENDOR_ADDRESS
*&---------------------------------------------------------------------*
FORM get_vendor_address USING    p_emlif LIKE lfa1-lifnr
                        CHANGING p_adrnr.
* parameter P_ADRNR without type since there are several address
* fields with different domains

  DATA: l_lfa1 LIKE lfa1.

  CHECK NOT p_emlif IS INITIAL.
  CALL FUNCTION 'VENDOR_MASTER_DATA_SELECT_00'
    EXPORTING
      i_lfa1_lifnr     = p_emlif
      i_data           = 'X'
      i_partner        = ' '
    IMPORTING
      a_lfa1           = l_lfa1
    EXCEPTIONS
      vendor_not_found = 1.
  IF sy-subrc EQ 0.
    p_adrnr = l_lfa1-adrnr.
  ELSE.
    CLEAR p_adrnr.
  ENDIF.

ENDFORM.                               " GET_VENDOR_ADDRESS
*&---------------------------------------------------------------------*
*&      Form  get_addr_key
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_CS_BIL_INVOICE_HD_ADR  text
*      <--P_CS_ADDR_KEY  text
*----------------------------------------------------------------------*
FORM get_addr_key
                  CHANGING l_addr_key LIKE addr_key.

  DATA: l_lfa1 LIKE lfa1.
  SELECT SINGLE * FROM lfa1 INTO l_lfa1
  WHERE lifnr = nast-parnr.
  IF sy-subrc = 0.
    MOVE l_lfa1-adrnr TO l_addr_key.
  ENDIF.

ENDFORM.                               " get_addr_key
*&---------------------------------------------------------------------*
*&      Form  protocol_update_I
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM protocol_update_i.
  CHECK xscreen = space.
  CALL FUNCTION 'NAST_PROTOCOL_UPDATE'
    EXPORTING
      msg_arbgb = syst-msgid
      msg_nr    = syst-msgno
      msg_ty    = syst-msgty
      msg_v1    = syst-msgv1
      msg_v2    = syst-msgv2
      msg_v3    = syst-msgv3
      msg_v4    = syst-msgv4
    EXCEPTIONS
      OTHERS    = 1.
ENDFORM.                               " protocol_update_I
*&---------------------------------------------------------------------*
*&      Form  add_smfrm_prot
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM add_smfrm_prot.
  DATA: lt_errortab             TYPE tsferror.
  DATA: lf_msgnr                TYPE sy-msgno.
  DATA:  l_s_log          TYPE bal_s_log,
         p_loghandle      TYPE balloghndl,
       l_s_msg          TYPE bal_s_msg.
  FIELD-SYMBOLS: <fs_errortab>  TYPE LINE OF tsferror.
* get smart form protocoll
  CALL FUNCTION 'SSF_READ_ERRORS'
    IMPORTING
      errortab = lt_errortab.
  SORT lt_errortab.
* delete adjacent duplicates from lt_errortab comparing errnumber.
* add smartform protocoll to nast protocoll
  LOOP AT lt_errortab ASSIGNING <fs_errortab>.
    CLEAR lf_msgnr.
    lf_msgnr = <fs_errortab>-errnumber.
    CALL FUNCTION 'NAST_PROTOCOL_UPDATE'
      EXPORTING
        msg_arbgb = <fs_errortab>-msgid
        msg_nr    = lf_msgnr
        msg_ty    = <fs_errortab>-msgty
        msg_v1    = <fs_errortab>-msgv1
        msg_v2    = <fs_errortab>-msgv2
        msg_v3    = <fs_errortab>-msgv3
        msg_v4    = <fs_errortab>-msgv4
      EXCEPTIONS
        OTHERS    = 1.
  ENDLOOP.

* open the application log
  l_s_log-extnumber    = sy-uname.

  CALL FUNCTION 'BAL_LOG_CREATE'
    EXPORTING
      i_s_log      = l_s_log
    IMPORTING
      e_log_handle = p_loghandle
    EXCEPTIONS
      OTHERS       = 1.
  IF sy-subrc <> 0.
  ENDIF.

  LOOP AT lt_errortab ASSIGNING <fs_errortab>.
    MOVE-CORRESPONDING <fs_errortab> TO l_s_msg.
    CALL FUNCTION 'BAL_LOG_MSG_ADD'
      EXPORTING
        i_log_handle = p_loghandle
        i_s_msg      = l_s_msg
      EXCEPTIONS
        OTHERS       = 1.
    IF sy-subrc <> 0.
    ENDIF.
  ENDLOOP.
*  call function 'BAL_DSP_LOG_DISPLAY'.


ENDFORM.                               " add_smfrm_prot
