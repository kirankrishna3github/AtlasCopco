*&---------------------------------------------------------------------*
*&  Include           ZCWU_CLASS_EXC
*&---------------------------------------------------------------------*
TYPE-POOLS: icon.
*TABLES: ekko.
*DATA: BEGIN OF ty_ekpo,
*        ebeln TYPE ekko-ebeln,
*        ebelp TYPE ekpo-ebelp,
*        matnr TYPE ekpo-matnr,
*      END OF ty_ekpo,
*
*      BEGIN OF ty_po_lines,
*        ebeln TYPE ekko-ebeln,
*        lines TYPE i,
*      END OF ty_po_lines.
*
*  DATA: lt_ekpo TYPE STANDARD TABLE OF ty_ekpo,
*        lt_po_lines TYPE STANDARD TABLE OF ty_po_lines,
*        ls_ekpo TYPE ty_ekpo,
*        ls_po_lines TYPE ty_po_lines.
*  SELECT-OPTIONS: s_ebeln FOR ekko-ebeln.
*  START-OF-SELECTION.
*
*    SELECT  ebeln
*            ebelp
*            matnr
*      FROM ekpo
*      WHERE ebeln = s_ebeln.
*
*    " È¡Êý¾Ý - LT_EKPO
*    SORT lt_ekpo.
*    LOOP AT lt_ekpo INTO ls_ekpo.
*      ls_po_lines-ebeln = ls_ekpo-ebeln.
*      ls_po_lines-LINES = 1.
*      COLLECT ls_po_lines INTO lt_po_lines.
*    ENDLOOP.
*----------------------------------------------------------------------*
*       INTERFACE lif_partners
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
INTERFACE  lif_partners.
  METHODS: display_partners.
ENDINTERFACE.                    "lif_partners
*----------------------------------------------------------------------*
*       CLASS lcl_airplane DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_airplane DEFINITION.

  PUBLIC SECTION.
    METHODS:  constructor
                IMPORTING iv_name TYPE string
                          iv_panetype TYPE saplane-planetype,
              display_attributes.
    CLASS-METHODS: dispay_no_airplanes.

  PROTECTED SECTION.

*  PRIVATE SECTION.
    DATA: name TYPE string,
          planetype TYPE saplane-planetype.

    CLASS-DATA: n_o_airplanes TYPE i.

    METHODS: get_technical_attribute
      IMPORTING im_type   TYPE saplane-planetype
        EXPORTING ex_weight  TYPE s_plan_wei
                  ex_tunkcap  TYPE s_capacity.
ENDCLASS.                    "lcl_airplane DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_passenger_plane DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_passenger_plane DEFINITION INHERITING FROM lcl_airplane.
  PUBLIC SECTION.
    METHODS: constructor
                IMPORTING iv_name TYPE string
                          iv_planetype TYPE saplane-planetype
                          iv_maxseat  TYPE  saplane-seatsmax.
    METHODS display_attributes REDEFINITION.
  PRIVATE SECTION.
    DATA: max_seats TYPE saplane-seatsmax.

ENDCLASS.                    "lcl_passenger_plane DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_cargo_plane DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_cargo_plane DEFINITION INHERITING FROM lcl_airplane.
  PUBLIC SECTION.
    METHODS: constructor
            IMPORTING iv_name TYPE string
                      iv_planetype TYPE saplane-planetype
                      iv_productor TYPE saplane-producer,
            display_attributes REDEFINITION.
  PRIVATE SECTION.
    DATA: productor TYPE saplane-producer.
ENDCLASS.                    "lcl_cargo_plane DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_carrier DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_carrier DEFINITION.
  PUBLIC SECTION.
    METHODS:
      constructor IMPORTING im_name  TYPE string,
      get_name    RETURNING value(ex_name) TYPE string,
      add_airplan IMPORTING im_airplane TYPE REF TO lcl_airplane,
      display_airplanes,
      display_attributes.
    INTERFACES: lif_partners.
  PRIVATE SECTION.
    DATA: name TYPE string,
          airplanelist TYPE TABLE OF REF TO lcl_airplane.
ENDCLASS.                    "lcl_carrier DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_vehicel DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_vehicel DEFINITION.
  PUBLIC SECTION.
    METHODS: get_average_fuel
              IMPORTING im_distance TYPE s_distance
                        im_fuel     TYPE s_capacity
              RETURNING value(re_average) TYPE s_consum,
             constructor  IMPORTING im_make TYPE string,
             display_attributes,
             set_make IMPORTING im_make TYPE string,
             get_make EXPORTING ex_make TYPE string.
    CLASS-METHODS: get_count EXPORTING re_court TYPE i.

  PRIVATE SECTION.
    DATA: make TYPE string.
    METHODS init_make.
    CLASS-DATA: n_o_vehicles TYPE i.
ENDCLASS.                    "lcl_vehicel DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_truck DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_truck DEFINITION INHERITING FROM lcl_vehicel.
  PUBLIC SECTION.
    METHODS: constructor
                IMPORTING im_make TYPE string
                          im_cargo TYPE s_plan_car,
             display_attributes REDEFINITION,
             get_cargo RETURNING value(re_cargo) TYPE s_plan_car.
  PRIVATE SECTION.
    DATA: max_cargo TYPE s_plan_car.
ENDCLASS.                    "lcl_truck DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_bus DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_bus DEFINITION INHERITING FROM lcl_vehicel.
  PUBLIC SECTION.
    METHODs: constructor
              IMPORTING im_make TYPE string
                        im_passengers TYPE i,
             display_attributes REDEFINITION.
  PRIVATE SECTION.
    DATA: max_passengers TYPE i.
ENDCLASS.                    "lcl_bus DEFINITION

CLASS lcl_rental DEFINITION.
  PUBLIC SECTION.
    METHODS: constructor IMPORTING im_name TYPE string,
             add_vehicel IMPORTING im_vehicel TYPE REF TO lcl_vehicel,
             display_attributes.
    INTERFACES lif_partnerS.
  PRIVATE SECTION.
    DATA: name TYPE string,
          vehicellist TYPE TABLE OF REF TO lcl_vehicel.
endclass.

CLASS lcl_travel_agency DEFINITION.

  PUBLIC SECTION.
  METHODS: constructor IMPORTING im_name TYPE string,
           add_partner IMPORTING im_partner TYPE REF TO lif_partners,
           display_agency_partners.
  PRIVATE SECTION.
  DATA: name TYPE string,
        partnerlist TYPE TABLE OF REF TO lif_partners.

ENDCLASS.
*----------------------------------------------------------------------*
*       CLASS lcl_airplane IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_airplane IMPLEMENTATION.
  METHOD constructor.

    name = iv_name.
    planetype = iv_panetype.
    n_o_airplanes = n_o_airplanes + 1.

  ENDMETHOD.                    "set_attributes

  METHOD display_attributes.
    DATA: lv_weight TYPE s_plan_wei,
          lv_tunkcap  TYPE s_capacity.
    me->get_technical_attribute( EXPORTING im_type = planetype
                                 IMPORTING ex_weight = lv_weight
                                           ex_tunkcap = lv_tunkcap ).
    WRITE: 'Name:' , name, 'Planetype:', planetype,
           'Weight:',lv_weight, 'Tunkcap:' , lv_tunkcap .
  ENDMETHOD.                    "display_attributes

  METHOD  dispay_no_airplanes.
    WRITE: n_o_airplanes.
  ENDMETHOD.                    "dispay_no_airplanes

  METHOD get_technical_attribute.
    IF im_type = 'MA'.
      ex_weight  = '25'.
      ex_tunkcap = '10'.
    ENDIF.
  ENDMETHOD.                    "get_technical_attribute
ENDCLASS.                    "lcl_airplane IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_passenger_plane IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_passenger_plane IMPLEMENTATION.
  METHOD constructor.
    super->constructor( EXPORTING iv_name = iv_name
                                  iv_panetype = iv_planetype ).
    max_seats = iv_maxseat.
  ENDMETHOD.                    "constructor

  METHOD display_attributes.
    super->display_attributes( ).
    WRITE: 'maxseats', max_seats , /.
  ENDMETHOD.                    "display_attributes
ENDCLASS.                    "lcl_passenger_plane IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_cargo_plane IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_cargo_plane IMPLEMENTATION.

  METHOD constructor.
    super->constructor( EXPORTING iv_name = iv_name
                                  iv_panetype = iv_planetype ).
    productor = iv_productor.

  ENDMETHOD.                    "constructor

  METHOD display_attributes.
    super->display_attributes( ).
    WRITE: 'Productor:', productor , /.
  ENDMETHOD.                    "display_attributes
ENDCLASS.                    "lcl_cargo_plane IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_carrier IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS  lcl_carrier IMPLEMENTATION.

  METHOD lif_partners~display_partners.
    display_attributes( ).
  endmethod.

  METHOD constructor.
    name = im_name.
  ENDMETHOD.                    "constructor

  METHOD add_airplan.
    APPEND im_airplane TO airplanelist.
  ENDMETHOD.                    "add_airplan

  METHOD display_airplanes.
    DATA: lr_airplane TYPE REF TO lcl_airplane.
    LOOP AT airplanelist INTO lr_airplane.
      lr_airplane->display_attributes( ).
    ENDLOOP.
  ENDMETHOD.                    "display_airplanes

  METHOD display_attributes.
    WRITE: / name.
    display_airplanes( ).
  ENDMETHOD.                    "display_attributes

  METHOD get_name.
    ex_name = name.
  ENDMETHOD.                    "get_name

ENDCLASS.                    "lcl_carrier IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_vehicel IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_vehicel IMPLEMENTATION.
  METHOD get_average_fuel.
    re_average = im_distance / im_fuel.
  ENDMETHOD.                    "get_average_fuel
  METHOD constructor.
    make = im_make.
    n_o_vehicles = n_o_vehicles + 1.
  ENDMETHOD.                    "constructor
  METHOD set_make.
    IF im_make IS NOT INITIAL.
      make = im_make.
    ELSE.
      init_make( ).
    ENDIF.
  ENDMETHOD.                    "set_make
  METHOD init_make.
    make = 'Deafault Make'.
  ENDMETHOD.                    "INIT_MAKE
  METHOD get_make.
    ex_make = make.
  ENDMETHOD.                    "get_make
  METHOD display_attributes.
    WRITE: make.
  ENDMETHOD.                    "display_attributes
  METHOD get_count.
    re_court = n_o_vehicles.
  ENDMETHOD.                    "get_count
ENDCLASS.                    "lcl_vehicel IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_truck IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_truck IMPLEMENTATION.
  METHOD constructor.
    super->constructor( im_make = im_make ).
    max_cargo = im_cargo.
  ENDMETHOD.                    "constructor
  METHOD display_attributes.
    WRITE:   /  icon_ws_truck AS ICON.
    super->display_attributes( ).
    WRITE: 20 'Max cargo:', max_cargo.
    ULINE.
  ENDMETHOD.                    "display_attributes
  METHOD get_cargo.
    re_cargo = max_cargo.
  ENDMETHOD.                    "get_cargo
ENDCLASS.                    "lcl_truck IMPLEMENTATION

CLASS lcl_bus IMPLEMENTATION.
  METHOD constructor.
    super->constructor( exPORTING im_make = im_make ).
    max_passengers = im_passengers.
  ENDMETHOD.
  METHOD display_attributes.
    WRITE:  / icon_transportation_mode as ICON.
    super->display_attributes( ).
    WRITE: 20 'Max passengers:', max_passengers.
    ULINE.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_rental IMPLEMENTATION.
  METHOD lif_partners~display_partners.
    display_attributes( ).
  ENDMETHOD.
  METHOD constructor.
     name = im_name.
     refresh: vehicellist[].
  ENDMETHOD.
  METHOD add_vehicel.
    append im_vehicel to vehicellist.
  ENDMETHOD.
  METHOD display_attributes.
    DATA: lr_vehicel TYPE REF TO lcl_vehicel.
    WRITE: / ICON_TRANSPort_proposal as ICON, name.
    LOOP AT vehicellist INTO lr_vehicel.
      lr_vehicel->display_attributes( ).
    ENDLOOP.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_travel_agency IMPLEMENTATION.
  METHOD constructor.
    name = im_name.
  ENDMETHOD.
  METHOD add_partner.
    APPEND im_partner to partnerlist.
  ENDMETHOD.
  METHOD display_agency_partners.
    DATA: lr_partner TYPE REF TO lif_partners.
    WRITE: / ICON_DEPENDENTS as ICON , name.
    LOOP AT partnerlist INTO lr_partner.
      lr_partner->display_partners( ).
    ENDLOOP.
  ENDMETHOD.
ENDCLASS.
