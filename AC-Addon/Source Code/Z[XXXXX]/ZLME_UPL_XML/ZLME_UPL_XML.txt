*&---------------------------------------------------------------------*
*& Report  ZLME_UPL_XML
*&
*&---------------------------------------------------------------------*
*& Upload XML-file (IQ#) into internal table
*&
*&---------------------------------------------------------------------*
REPORT  ZLME_UPL_XML.

PARAMETERS: p_infile     TYPE rlgrap-filename OBLIGATORY.

TYPES: BEGIN OF ty_tab,
          name  TYPE string,
          value TYPE string,
       END OF ty_tab.

data: lcl_xml_doc TYPE REF TO cl_xml_document,
      v_subrc TYPE sysubrc,
      v_node TYPE REF TO if_ixml_node,
      v_root TYPE REF TO if_ixml_node,
      v_iterator TYPE REF TO if_ixml_node_iterator,
      v_nodemap TYPE REF TO if_ixml_named_node_map,
      v_count TYPE i,
      v_index TYPE i,
      v_attr TYPE REF TO if_ixml_node,
      v_name TYPE string,
      v_prefix TYPE string,
      v_value TYPE string,
      v_char TYPE char2,
      gv_ind(2) type n,
      gv_mbdatfld(14) TYPE c,
      gv_mbvalfld(14) TYPE c,
      gv_partfld(14) TYPE c,
      gv_qtyfld(13) TYPE c.

DATA: itab TYPE STANDARD TABLE OF ty_tab,
      wa TYPE ty_tab,
      wa_save_name  TYPE string,
      wa_save_value TYPE string.

DATA: begin of gt_hdr occurs 1,
        vlaufz(1)    TYPE c,
        waerk(5)     TYPE c,
        fpart(2)     TYPE c,
        perio(2)     TYPE c,
      END OF gt_hdr.

DATA: begin of gt_bill occurs 0,
        MBDAT(8),
        MBVAL(15),
      END OF gt_bill.

*DATA: begin of gt_part occurs 0,
*        part(10),
*        qty(5),
*      END OF gt_part.

DATA: begin of gt_itm occurs 0,
        line(4)       TYPE n,
        oldsp(18)     TYPE c,
        auart(2)      TYPE c,
        maktx(40)     TYPE c,
        rhrsy(10)     TYPE c,
        sernr(18)     TYPE c,
        rhrs_stat(10) TYPE c,
        rhrs_date(8)  TYPE c,
        slprs(15)     TYPE c,
        stprs(15)     TYPE c,
        stcost(15)    TYPE c,
        prdha(18)     TYPE c,
        prctr(10)     TYPE c,
        visyr(3),
        visitplan(20),
        1STVISIT_DATE(8),
        1STVISIT_INDEX(2),
        plnnr(8),
        strat(6),
        OILTYPE2(40),
        travel2(15),
        mileage(15),
        one_time(15),
        expenses(15),
        I_LABOUR(3),
        A_LABOUR(3),
        B_LABOUR(3),
        C_LABOUR(3),
        D_LABOUR(3),
        E_LABOUR(3),
        F_LABOUR(3),
        COUNT_I(10),
        COUNT_A(10),
        COUNT_B(10),
        COUNT_C(10),
        COUNT_D(10),
        COUNT_E(10),
        COUNT_F(10),
      END OF gt_itm.

DATA: begin of gt_rec occurs 0.
        INCLUDE STRUCTURE yam_iqq.
DATA:   waerk type waerk.
DATA: end of gt_rec.

FIELD-SYMBOLS:
   <fs1>,
   <fs2>.

*-------------------------------------------------------------------
AT SELECTION-SCREEN on value-request FOR p_infile.
  CALL FUNCTION 'WS_FILENAME_GET'
    EXPORTING
      def_path         = 'C:\'
      mask             = '*.xml'
    IMPORTING
      filename         = p_infile
    EXCEPTIONS
      inv_winsys       = 1
      no_batch         = 2
      selection_cancel = 3
      selection_error  = 4
      OTHERS           = 5.

*-------------------------------------------------------------------
START-OF-SELECTION.

  CREATE OBJECT lcl_xml_doc.

  CALL METHOD lcl_xml_doc->import_from_file
    EXPORTING
      filename = p_infile
    RECEIVING
      retcode  = v_subrc.

  CHECK v_subrc = 0.

  v_node = lcl_xml_doc->m_document.
  CHECK NOT v_node IS INITIAL.

  v_iterator = v_node->create_iterator( ).

  v_node = v_iterator->get_next( ).

  WHILE NOT v_node IS INITIAL.
    CASE v_node->get_type( ).
      WHEN if_ixml_node=>co_node_element.
        v_name = v_node->get_name( ).
        v_nodemap = v_node->get_attributes( ).
        IF v_name = 'Billing' or v_name = 'OneTimeService' or
           v_name = 'ContractLine' or v_name = 'AdditionalService' or
*           v_name = 'Oil' or v_name = 'Part' or v_name = 'Visitmaster'.
           v_name = 'Oil' or v_name = 'Visitmaster'.
          wa-name = v_name.
          append wa to itab.
          clear wa.
        ENDIF.
        IF NOT v_nodemap IS INITIAL.
* attributes
          v_count = v_nodemap->get_length( ).
          DO v_count TIMES.
            v_index = sy-index - 1.
            v_attr = v_nodemap->get_item( v_index ).
            v_name = v_attr->get_name( ).
            v_prefix = v_attr->get_namespace_prefix( ).
            v_value = v_attr->get_value( ).
          ENDDO.
        ENDIF.
      WHEN if_ixml_node=>co_node_text or
           if_ixml_node=>co_node_cdata_section.
* text node
        v_value = v_node->get_value( ).
        move v_value to v_char.
        if v_char <> cl_abap_char_utilities=>cr_lf.
          wa-name = v_name.
          wa-value = v_value.
          append wa to itab.
          clear wa.
        endif.
    ENDCASE.
* advance to next node
    v_node = v_iterator->get_next( ).
  ENDWHILE.

* Move fields to internal tables
  LOOP AT itab INTO wa.
    CASE wa-name.
      WHEN 'Billing' or 'ContractLine' or 'OneTimeService' or
           'AdditionalService' or 'Visitmaster' or 'Oil'.
*           'Part'.
        move wa-name to wa_save_name.
      WHEN 'ContractDuration'.
        move wa-value to gt_hdr-vlaufz.
      WHEN 'currency'.
        move wa-value to gt_hdr-waerk.
      WHEN 'BillingFrequency'.
        move wa-value to gt_hdr-fpart.
      WHEN 'BillingPlanType'.
        move wa-value to gt_hdr-perio.
        APPEND gt_hdr.
        CLEAR gt_hdr.
      WHEN 'date'.
        if wa_save_name  = 'Billing'.
          move wa-value to gt_bill-mbdat.
        ENDif.
      WHEN 'amount'.
        if wa_save_name = 'Billing'.
          move wa-value to gt_bill-mbval.
          APPEND gt_bill.
          clear gt_bill.
        ENDif.
      WHEN 'ProductNumber'.
        move wa-value to gt_itm-oldsp.
      WHEN 'ContractTypeAb'.
        move wa-value to gt_itm-auart.
      WHEN 'ServiceProductDescription'.
        move wa-value to gt_itm-maktx.
      WHEN 'EstRHRS'.
        move wa-value to gt_itm-rhrsy.
      WHEN 'SerialNumber'.
        move wa-value to gt_itm-sernr.
      WHEN 'RHRSStatus'.
        move wa-value to gt_itm-rhrs_stat.
      WHEN 'RHRSDate'.
        move wa-value to gt_itm-rhrs_date.
      WHEN 'ListPrice'.
        move wa-value to gt_itm-slprs.
      WHEN 'Salesprice'.
        move wa-value to gt_itm-stprs.
      WHEN 'GACPGC'.
        move wa-value to gt_itm-prdha.
      WHEN 'ProfitCenter'.
        move wa-value to gt_itm-prctr.
      WHEN 'VisitsPerYear'.
        move wa-value to gt_itm-visyr.
      WHEN 'VisitSchedule'.
        move wa-value to gt_itm-visitplan.
      WHEN 'FirstVisitDate'.
        move wa-value to gt_itm-1stvisit_date.
      WHEN 'FirstVisitIndex'.
        move wa-value to gt_itm-1stvisit_index.
      WHEN 'SAPTasklistGroup'.
        move wa-value to gt_itm-plnnr.
      WHEN 'SAPStrategy'.
        move wa-value to gt_itm-strat.
      WHEN 'Function'.
        if wa_save_name = 'Oil' and wa-value = 'Compressor'.
          wa_save_value = 'Compressor'.
        endif.
      WHEN 'Type'.
        if wa_save_value = 'Compressor'.
          move wa-value to gt_itm-oiltype2.
        endif.
        if wa_save_name = 'Visitmaster'.
          move wa-value to wa_save_value.
        endif.
      WHEN 'TravelTime'.
        move wa-value to gt_itm-travel2.
      WHEN 'TravelDistance'.
        move wa-value to gt_itm-mileage.
      WHEN 'Cost'.
        if wa_save_name = 'ContractLine'.
          move wa-value to gt_itm-stcost.
        elseif wa_save_name = 'OneTimeService'.
          move wa-value to gt_itm-one_time.
        elseif wa_save_name = 'AdditionalService'.
          move wa-value to gt_itm-expenses.
        endif.
      WHEN 'Labour'.
        CASE wa_save_value.
          WHEN 'I'.
            move wa-value to gt_itm-i_labour.
          WHEN 'A'.
            move wa-value to gt_itm-a_labour.
          WHEN 'B'.
            move wa-value to gt_itm-b_labour.
          WHEN 'C'.
            move wa-value to gt_itm-c_labour.
          WHEN 'D'.
            move wa-value to gt_itm-d_labour.
          WHEN 'E'.
            move wa-value to gt_itm-e_labour.
          WHEN 'F'.
            move wa-value to gt_itm-f_labour.
        ENDCASE.
      WHEN 'SAPTasklistCounter'.
        CASE wa_save_value.
          WHEN 'I'.
            move wa-value to gt_itm-count_i.
          WHEN 'A'.
            move wa-value to gt_itm-count_a.
          WHEN 'B'.
            move wa-value to gt_itm-count_b.
          WHEN 'C'.
            move wa-value to gt_itm-count_c.
          WHEN 'D'.
            move wa-value to gt_itm-count_d.
          WHEN 'E'.
            move wa-value to gt_itm-count_e.
          WHEN 'F'.
            move wa-value to gt_itm-count_f.
        ENDCASE.
        gt_itm-line = gt_itm-line + 1.
        APPEND gt_itm.
        CLEAR gt_itm.
*      WHEN 'PartNumber'.
*        IF wa_save_name = 'Part'.
*          move wa-value to gt_part-part.
*        ENDIF.
*      WHEN 'Quantity'.
*        IF wa_save_name = 'Part'.
*          move wa-value to gt_part-qty.
*          APPEND gt_part.
*          clear gt_part.
*        ENDIF.
    ENDCASE.
  ENDLOOP.

* Fill gt_rec, so then the rest of the program can remain the same
* (except for the currency, which is a new field)
  LOOP AT gt_itm.
    READ TABLE gt_hdr INDEX 1.
    if sy-subrc = 0.
      MOVE-CORRESPONDING gt_hdr to gt_rec.
    endif.

    MOVE-CORRESPONDING gt_itm to gt_rec.

    loop at gt_bill.
      gv_ind = sy-tabix.
      CONCATENATE 'GT_REC-MBDAT' gv_ind INTO gv_mbdatfld.
      ASSIGN (gv_mbdatfld) to <fs1>.
      MOVE gt_bill-mbdat to <fs1>.

      CONCATENATE 'GT_REC-MBVAL' gv_ind INTO gv_mbvalfld.
      ASSIGN (gv_mbvalfld) to <fs2>.
      MOVE gt_bill-mbval to <fs2>.
    endloop.

    UNASSIGN: <fs1>, <fs2>.

*    loop at gt_part.
*      gv_ind = sy-tabix.
*      CONCATENATE 'GT_REC-PART_' gv_ind INTO gv_partfld.
*      ASSIGN (gv_partfld) to <fs1>.
*      MOVE gt_part-part to <fs1>.
*
*      CONCATENATE 'GT_REC-QTY_' gv_ind INTO gv_qtyfld.
*      ASSIGN (gv_qtyfld) to <fs2>.
*      MOVE gt_part-qty to <fs2>.
*    endloop.

    append gt_rec.
    CLEAR gt_rec.
  ENDLOOP.
