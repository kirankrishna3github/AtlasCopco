*&---------------------------------------------------------------------*
*& Report  RC1_IDOC_SET_STATUS                                         *
*&                                                                     *
*&---------------------------------------------------------------------*
*&                                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*

REPORT  z_rc1_idoc_set_status.

TABLES: edidc.

SELECTION-SCREEN BEGIN OF BLOCK 1.
SELECT-OPTIONS: p_idoc   FOR edidc-docnum NO INTERVALS.
PARAMETERS:     p_mestyp LIKE edidc-mestyp.
SELECTION-SCREEN END OF BLOCK 1.

SELECTION-SCREEN BEGIN OF BLOCK 2.
PARAMETERS : p_status LIKE edids-status DEFAULT 51 OBLIGATORY,
             p_staneu LIKE edids-status DEFAULT 68 OBLIGATORY.
SELECTION-SCREEN END OF BLOCK 2.

SELECTION-SCREEN BEGIN OF BLOCK 3.
PARAMETERS : p_idocs  TYPE i DEFAULT 1000 OBLIGATORY.
SELECTION-SCREEN END OF BLOCK 3.

PARAMETERS p_test AS CHECKBOX DEFAULT 'X'.


DATA: l_edidc_tab       LIKE edidc      OCCURS 1 WITH HEADER LINE,
      l_idoc_status_tab LIKE bdidocstat OCCURS 1 WITH HEADER LINE,
      l_lines           LIKE sy-tabix,
      l_idoc_control    LIKE edidc,
      l_zaehler         LIKE sy-tabix,
      l_maxidocs        TYPE i,
      count_idocs       TYPE i.

l_maxidocs = '100000'.  "limit the number of idocs per run to prevent deadlocks
CLEAR count_idocs.

IF p_mestyp <> space.
  SELECT * INTO TABLE l_edidc_tab PACKAGE SIZE p_idocs FROM edidc
                                 WHERE mestyp = p_mestyp
                                   AND status = p_status.
    DESCRIBE TABLE l_edidc_tab LINES l_lines.

    IF p_test = 'X'.
      WRITE: l_lines, ' IDOCs werden umgesetzt.'(001).
      EXIT.
    ELSE.
      LOOP AT l_edidc_tab.
        CLEAR l_idoc_status_tab. REFRESH l_idoc_status_tab.

        l_idoc_status_tab-docnum = l_edidc_tab-docnum.
        l_idoc_status_tab-status = p_staneu.
        APPEND l_idoc_status_tab.


        CALL FUNCTION 'IDOC_STATUS_WRITE_TO_DATABASE'
          EXPORTING
            idoc_number               = l_edidc_tab-docnum
          IMPORTING
            idoc_control              = l_idoc_control
          TABLES
            idoc_status               = l_idoc_status_tab
          EXCEPTIONS
            idoc_foreign_lock         = 1
            idoc_not_found            = 2
            idoc_status_records_empty = 3
            idoc_status_invalid       = 4
            db_error                  = 5
            OTHERS                    = 6.

        ADD 1 TO l_zaehler.
        ADD 1 TO count_idocs.


*   Um #berlauf der Sperrtabelle zu verhindern, bei gro#er Anzahl IDOCs
        IF l_zaehler = 1000.
          CALL FUNCTION 'DEQUEUE_ALL'.
          CLEAR l_zaehler.
*          WAIT UP TO 1 SECONDS.
        ENDIF.

        IF sy-subrc <> 0.
          WRITE : / 'Fehler:'(002), sy-subrc.
        ENDIF.

      ENDLOOP.
    ENDIF.
    IF count_idocs GT l_maxidocs.
      WRITE: / count_idocs, ' IDOCs status changed.'(003).

      EXIT.
    ENDIF.
  ENDSELECT.
        WRITE: / count_idocs, ' IDOCs status changed.'(003).

ELSEIF NOT p_idoc[] IS INITIAL.
  LOOP AT p_idoc.
    SELECT * FROM edidc WHERE docnum = p_idoc-low.
      l_edidc_tab = edidc.
      APPEND l_edidc_tab.
    ENDSELECT.
  ENDLOOP.
  DESCRIBE TABLE l_edidc_tab LINES l_lines.

  IF p_test = 'X'.
    WRITE: l_lines, ' IDOCs werden umgesetzt.'(001).
    EXIT.
  ELSE.
    LOOP AT l_edidc_tab.
      CLEAR l_idoc_status_tab. REFRESH l_idoc_status_tab.

      l_idoc_status_tab-docnum = l_edidc_tab-docnum.
      l_idoc_status_tab-status = p_staneu.
      APPEND l_idoc_status_tab.


      CALL FUNCTION 'IDOC_STATUS_WRITE_TO_DATABASE'
        EXPORTING
          idoc_number               = l_edidc_tab-docnum
        IMPORTING
          idoc_control              = l_idoc_control
        TABLES
          idoc_status               = l_idoc_status_tab
        EXCEPTIONS
          idoc_foreign_lock         = 1
          idoc_not_found            = 2
          idoc_status_records_empty = 3
          idoc_status_invalid       = 4
          db_error                  = 5
          OTHERS                    = 6.

      ADD 1 TO l_zaehler.

*   Um #berlauf der Sperrtabelle zu verhindern, bei gro#er Anzahl IDOCs
      IF l_zaehler = 1000.
        CALL FUNCTION 'DEQUEUE_ALL'.
        CLEAR l_zaehler.
      ENDIF.

      IF sy-subrc <> 0.
        WRITE : / 'Fehler:'(002), sy-subrc.
      ENDIF.
      WRITE: l_lines, ' IDOCs wurden umgesetzt.'(003).
    ENDLOOP.
  ENDIF.
ELSE.
  EXIT.
ENDIF.

*DESCRIBE TABLE l_edidc_tab LINES l_lines.
*
*IF p_test = 'X'.
*  WRITE: l_lines, ' IDOCs werden umgesetzt.'(001).
*  EXIT.
*ELSE.
*  LOOP AT l_edidc_tab.
*    CLEAR l_idoc_status_tab. REFRESH l_idoc_status_tab.
*
*    l_idoc_status_tab-docnum = l_edidc_tab-docnum.
*    l_idoc_status_tab-status = p_staneu.
*    APPEND l_idoc_status_tab.
*
*
*    CALL FUNCTION 'IDOC_STATUS_WRITE_TO_DATABASE'
*      EXPORTING
*        idoc_number               = l_edidc_tab-docnum
*      IMPORTING
*        idoc_control              = l_idoc_control
*      TABLES
*        idoc_status               = l_idoc_status_tab
*      EXCEPTIONS
*        idoc_foreign_lock         = 1
*        idoc_not_found            = 2
*        idoc_status_records_empty = 3
*        idoc_status_invalid       = 4
*        db_error                  = 5
*        OTHERS                    = 6.
*
*    ADD 1 TO l_zaehler.
*
**   Um #berlauf der Sperrtabelle zu verhindern, bei gro#er Anzahl IDOCs
*    IF l_zaehler = 1000.
*      CALL FUNCTION 'DEQUEUE_ALL'.
*      CLEAR l_zaehler.
*    ENDIF.
*
*    IF sy-subrc <> 0.
*      WRITE : / 'Fehler:'(002), sy-subrc.
*    ENDIF.
*  ENDLOOP.
*
*  WRITE: l_lines, ' IDOCs wurden umgesetzt.'(003).

*ENDIF.
*Text symbol text£º
*001:IDocs are converted.
*002:Errors:

*003:IDocs were converted.
*Selection text£º
*P_IDOC:        IDoc Number
*P_IDOCS:        Group of idocs
*P_MESTYP:        Message Type
*P_STANEU:        New Status
*P_STATUS:        Status
*P_TEST:        Test
