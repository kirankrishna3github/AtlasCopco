*&---------------------------------------------------------------------*
*& Report  ZPK_TEST
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  zpk_test.

data: var1 type p decimals 2 value '1234.00',
      var2(15),
      var3(15),
      var(15) type n.


DATA: moff TYPE i,
      mlen TYPE i.

write var1 to var.

var2 = var.

FIND REGEX '.' IN var2
     MATCH OFFSET moff
     MATCH LENGTH mlen.

REPLACE ALL OCCURRENCES OF '.' IN var2 WITH space.



*TABLES: ekpo.
*
*
*SELECTION-SCREEN: BEGIN OF BLOCK b1.
*SELECT-OPTIONS: s_ebeln FOR ekpo-ebeln,
*                s_ebelp FOR ekpo-ebelp.
*SELECTION-SCREEN: END OF BLOCK b1.
*
*
*TYPES: BEGIN OF ty_ekbe,
*        ebeln TYPE ebeln,
*        ebelp TYPE ebelp,
*        bewtp TYPE bewtp,
*        menge TYPE menge_d,
*        shkzg TYPE shkzg,
*       END OF ty_ekbe.
*
*DATA: t_ekbe TYPE STANDARD TABLE OF ty_ekbe INITIAL SIZE 0,
*      t_final TYPE STANDARD TABLE OF ty_ekbe INITIAL SIZE 0,
*      t_final1 TYPE STANDARD TABLE OF ty_ekbe INITIAL SIZE 0,
*      t_final2 TYPE STANDARD TABLE OF ty_ekbe INITIAL SIZE 0,
*      w_final TYPE ty_ekbe,
*      w_final1 TYPE ty_ekbe,
*      w_final2 TYPE ty_ekbe,
*      w_ekbe TYPE ty_ekbe.
*
*DATA: v_menge TYPE menge_d,
*      v_text(50).
*
*FIELD-SYMBOLS: <fs> TYPE ty_ekbe.
*
*START-OF-SELECTION.
*  SELECT ebeln
*         ebelp
*         bewtp
*         menge
*         shkzg
*         FROM ekbe
*         INTO TABLE t_ekbe
*         WHERE ebeln IN s_ebeln
*         AND   ebelp IN s_ebelp.
*
*  IF sy-subrc = 0.
*    SORT t_ekbe.
*  ENDIF.
*
*
*
*  LOOP AT t_ekbe INTO w_ekbe.
*    CHECK ( w_ekbe-bewtp = 'E' OR
*          w_ekbe-bewtp = 'Q' ).
*    w_final-ebeln = w_ekbe-ebeln.
*    w_final-ebelp = w_ekbe-ebelp.
*    w_final-bewtp = w_ekbe-bewtp.
*    IF w_ekbe-shkzg = 'S'.
*      w_final-menge = w_ekbe-menge.
*    ELSE.
*      w_final-menge = -1 * w_ekbe-menge.
*    ENDIF.
*    COLLECT w_final INTO t_final.
*    CLEAR: w_final.
*  ENDLOOP.
*
*  LOOP AT t_final INTO w_final.
*    ASSIGN w_final TO <fs>.
*    IF <fs>-bewtp = 'E'.
*      APPEND <fs> TO t_final1.
*    ELSEIF <fs>-bewtp = 'Q'.
*      APPEND <fs> TO t_final2.
*    ENDIF.
*    CLEAR: <fs>.
*  ENDLOOP.
*
*
*  LOOP AT t_final1 INTO w_final1.
*
*    READ TABLE t_final2 INTO w_final2 WITH KEY ebeln = w_final1-ebeln
*                                               menge = w_final1-menge.
*    IF sy-subrc = 0.
*      CONCATENATE 'PO' w_final1-ebeln 'is closed' INTO v_text.
*data: enter.
*      CALL FUNCTION 'POPUP_IMC_MESSAGE'
*       IMPORTING
**         MESSTYPE       = '2'
*         SDATA          = v_text
*         OKCODE         = enter.
*                .
*
**      WRITE:/5 v_text.
*    ELSE.
*      CONCATENATE 'PO' w_final1-ebeln 'is open' INTO v_text.
*      WRITE:/5 v_text.
*    ENDIF.
*    CLEAR: v_text.
*  ENDLOOP.
