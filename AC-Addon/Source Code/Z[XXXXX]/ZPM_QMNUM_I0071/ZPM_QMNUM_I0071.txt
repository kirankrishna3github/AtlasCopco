*&---------------------------------------------------------------------*
*& Report  ZPM_QMNUM_I0071
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  ZPM_QMNUM_I0071.

tables : jest, viqmel, afih, hiko, objk, tq80.

select-options : s_qmnum for viqmel-qmnum.

parameters: p_testl(1)   type c default 'X'.

data: begin of gt_objnr occurs 0,
        objnr    like jest-objnr,
      end of gt_objnr.

data: begin of gt_qmart occurs 0,
        qmart    like tq80-qmart,
      end of gt_qmart.

data: begin of gt_qmnum occurs 0,
        objnr    like jest-objnr,
      end of gt_qmnum.

data: begin of gt_bad_noti occurs 0,
        qmnum        like afih-qmnum,
        aufnr        like afih-qmnum,
        header(1)    type C,
        historic(1)  type c,
        objk_err(1)  type c,
      end of gt_bad_noti.

data: g_akt_qmnum like viqmel-qmnum,
      g_akt_aufnr like afih-aufnr,
      g_akt_objnr like jest-objnr.

data: g_qmel_update_OK      type p,
      g_qmel_update_ERROR   type p,
      g_jest_update_OK      type p,
      g_jest_update_error   type p.

* determine PM and CS notification types
select qmart from tq80
        into corresponding fields of table gt_qmart
       where qmtyp = '01' or qmtyp = '03'.

if gt_qmart[] is initial.
  write : / 'No PM or CS  Notification types'.
  stop.
endif.

* determine PM  and CS notifications without order in QMIH-AUFNR
select objnr from viqmel
             into corresponding fields of table gt_objnr
              for all entries in gt_qmart
            where qmart = gt_qmart-qmart
              and qmnum in s_qmnum
              and aufnr =  space.

if gt_objnr[] is initial.
  write : / 'No bad PM or CS Notification'.
  stop.
endif.

* determine PM and CS notifications with status I0071 active --> order assigned
select objnr from jest
             into corresponding fields of table gt_qmnum
              for all entries in gt_objnr
            where objnr  = gt_objnr-objnr
              and stat   = 'I0071'
              and inact  = ' '.

if gt_qmnum[] is initial.
  write : 'All notifications are OK'.
  stop.
endif.

loop at gt_qmnum.
  clear g_akt_aufnr.
  clear gt_bad_noti.
  g_akt_qmnum = gt_qmnum-objnr+2(12).
* notification is header notification in historical order ?
  perform check_qmnum_in_hiko.
  check g_akt_aufnr is initial.
* notification is header notification in order ?
  perform check_qmnum_in_afih.
  check g_akt_aufnr is initial.
* notification is assigned by object list ?
  perform check_qmnum_in_objk.
  check g_akt_aufnr is initial.
* notification is not assigned --> delete status I0071
  clear gt_bad_noti.
  gt_bad_noti-qmnum = g_akt_qmnum.
  append gt_bad_noti.
endloop.

write : /    'notification',
        15   'order number',
        29   'Historic',
        39   'Header',
        47   '> 2 OBJK'.

loop at gt_bad_noti.
  write : /    gt_bad_noti-qmnum,
          15   gt_bad_noti-aufnr,
          33   gt_bad_noti-historic,
          42   gt_bad_noti-header,
          51   gt_bad_noti-objk_err.
  if p_testl = ' '.
    If gt_bad_noti-aufnr <> space.
* update notification with order information
      update qmel set aufnr = gt_bad_noti-aufnr
                where qmnum = gt_bad_noti-qmnum.
      if sy-subrc <> 0.
        g_qmel_update_ok = g_qmel_update_ok + 1.
        write : / 'error by update notification', gt_bad_noti-qmnum.
      else.
        g_qmel_update_error = g_qmel_update_error + 1.
      endif.
    else.
* no order could be determined
* inactivate status I0071 for notification
      clear g_akt_objnr.
      g_akt_objnr       = 'QM'.
      g_akt_objnr+2(12) = gt_bad_noti-qmnum.
      update jest set inact = 'X'
                where objnr = g_akt_objnr
                  and stat  = 'I0071'.
      if sy-subrc <> 0.
        g_jest_update_ok = g_jest_update_ok + 1.
        write : / 'error by update notification status',
                  gt_bad_noti-qmnum.
      else.
        g_jest_update_error = g_jest_update_error + 1.
      endif.
    endif.
  endif.
endloop.

skip 5.
IF p_Testl = ' '.
  write :   / 'Testmode inactive',
            / 'Update QMEL OK      :',g_qmel_update_ok,
            / 'Update QMEL ERROR   :',g_qmel_update_error,
            / 'Update JEST OK      :',g_jest_update_ok,
            / 'Update JEST ERROR   :',g_jest_update_error.
else.
  write :   / 'Testmode active'.
endif.

* Form's

form check_qmnum_in_hiko.
  select single * from hiko where qmnum = g_akt_qmnum.
  if sy-subrc = 0.
    g_akt_aufnr          = hiko-aufnr.
    gt_bad_noti-aufnr    = hiko-aufnr.
    gt_bad_noti-qmnum    = g_akt_qmnum.
    gt_bad_noti-header   = 'X'.
    gt_bad_noti-historic = 'X'.
    append gt_bad_noti.
  endif.
endform.

form check_qmnum_in_afih.
  select single * from afih where qmnum = g_akt_qmnum.
  if sy-subrc = 0.
    g_akt_aufnr          = afih-aufnr.
    gt_bad_noti-aufnr    = afih-aufnr.
    gt_bad_noti-qmnum    = g_akt_qmnum.
    gt_bad_noti-header   = 'X'.
    gt_bad_noti-historic = ' '.
    append gt_bad_noti.
  endif.
endform.

form check_qmnum_in_objk.
data : l_dbcnt like sy-dbcnt.

  select * from objk where ihnum = g_akt_qmnum.
  endselect.
  check sy-subrc = 0.
  l_dbcnt = sy-dbcnt.

  select single * from hiko where obknr = objk-obknr.
  if sy-subrc = 0.
    g_akt_aufnr          = hiko-aufnr.
    gt_bad_noti-aufnr    = hiko-aufnr.
    gt_bad_noti-qmnum    = g_akt_qmnum.
    gt_bad_noti-header   = ' '.
    gt_bad_noti-historic = 'X'.
  else.
    select single * from afih where obknr = objk-obknr.
    if sy-subrc = 0.
      g_akt_aufnr          = afih-aufnr.
      gt_bad_noti-aufnr    = afih-aufnr.
      gt_bad_noti-qmnum    = g_akt_qmnum.
      gt_bad_noti-header   = ' '.
      gt_bad_noti-historic = ' '.
    endif.
  endif.

  if l_dbcnt > 1.
* more than one object list entry --> error
    gt_bad_noti-objk_err = 'X'.
  else.
    gt_bad_noti-objk_err = ' '.
  endif.
  append gt_bad_noti.
endform.

*Selection text£º
*P_TESTL:        Test?
*S_QMNUM:D       .
