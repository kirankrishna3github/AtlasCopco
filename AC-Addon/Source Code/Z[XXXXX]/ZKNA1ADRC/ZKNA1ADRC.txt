*&---------------------------------------------------------------------*
*& Report  ZKNA1ADRC                                            *
*&                                                                     *
*&---------------------------------------------------------------------*
* This report checks for all KNA1-entries whether a correct ADRC-entry
* exists. It checks field country, region, city and post code in ADRC.
* When there is not complete data in ADRC, it will update the ADRC.
* It assumes that there is already correct entry in ADRV.
*----------------------------------------------------------------------*
* Parameters:
*   TESTMODE: run report in test mode without changing database
*&---------------------------------------------------------------------*
* Note: 418007

* This report does NOT consider any communication data (JUST ADRC, not
* ADRV...)
* IMPORTANT: This report can be enhanced: If addr = space =>
*  you can loop at all kna1-entries and update adrc
* ATTENTION: update adrc only if necessary, i.e. if kna1 is stronger!
* DO NOT UPDATE ADRC in general if the adrc-entry differs KNA1, example:
* ADRC-CITY1 differs from KNA1-ort01, this can be due to the different
* field lenghth....!!!!

REPORT  ZKNA1ADRC.

PARAMETERS: TESTMODE(1) TYPE C DEFAULT 'X',
            ADDR like adrc-addrnumber.

* variable for KNA1 internal table
data: lt_kna1 like table of kna1,
      lv_kna1 like kna1.

* variable for ADRC internal table
data: lt_adrc like table of adrc.
field-symbols : <lv_adrc> like line of lt_adrc.

* variable for TFMC internal table
data: lt_tfmc like table of tfmc,
      lv_tfmc like tfmc.

DATA: help_title LIKE kna1-anred.
data : salutation_title like tsad3t-title,
       bp   LIKE adrc-addr_group VALUE 'BP'.

CONSTANTS:  c_default_date_from LIKE adrc-date_from VALUE '00010101',
            c_default_nation    LIKE adrc-nation    VALUE ' ',
            c_default_date_to   LIKE adrc-date_to   VALUE '99991231'.

start-of-selection.


* Initialization
  clear lv_kna1.

  refresh lt_adrc.
  refresh lt_kna1.
* Get data from KNA1
  if addr is initial.
*   now: User has to enter an address number.
*   perhaps later: loop at kna1 and update the corresponding adrc-entry
*                  if necessary
*      select * from kna1 into table lt_kna1 where adrnr ne space.
    exit.   "later: select above....
  else.
    select * from kna1 into table lt_kna1 where adrnr eq addr.
    IF lt_kna1[] IS INITIAL.
      write:/ 'No KNA1-entry found pointing to this address'.
      exit.
    ENDIF.
  endif.

* Get data from ADRC
  select * from adrc into corresponding fields
    of table lt_adrc
    for all entries in lt_kna1 where addrnumber = lt_kna1-adrnr.

* Get all data from TFMC
  select * from tfmc into table lt_tfmc.

* Sort internal table for faster processing
  sort lt_kna1 by adrnr.
  sort lt_adrc by addrnumber.

* Start processing
  loop at lt_kna1 into lv_kna1.

* Check entry in the ADRC
    read table lt_adrc
       with key addrnumber = lv_kna1-adrnr binary search
       assigning <lv_adrc>.

* Move Value from KNA1 to ADRC
    MOVE lv_kna1-mandt         TO <lv_adrc>-client.
    MOVE lv_kna1-adrnr         TO <lv_adrc>-addrnumber.
    MOVE c_default_date_from   TO <lv_adrc>-date_from.
    MOVE c_default_nation      TO <lv_adrc>-nation.
    MOVE c_default_date_to     TO <lv_adrc>-date_to.

    IF lv_kna1-anred NE space.
      help_title = lv_kna1-anred.
      TRANSLATE help_title TO UPPER CASE.                "#EC TRANSLANG
      select single title from tsad3t into salutation_title
             where title_medi = help_title .
      IF sy-subrc EQ 0.
        <lv_adrc>-title = salutation_title.
      ENDIF.
    endif.

    MOVE lv_kna1-datlt         TO <lv_adrc>-extension1.
    MOVE lv_kna1-land1         TO <lv_adrc>-country.
    MOVE lv_kna1-name1         TO <lv_adrc>-name1.
    MOVE lv_kna1-name2         TO <lv_adrc>-name2.
    MOVE lv_kna1-name3         TO <lv_adrc>-name3.
    MOVE lv_kna1-name4         TO <lv_adrc>-name4.
    MOVE lv_kna1-ort01         TO <lv_adrc>-city1.
    MOVE lv_kna1-ort02         TO <lv_adrc>-city2.
    MOVE lv_kna1-pfach         TO <lv_adrc>-po_box.
    IF lv_kna1-pfach <> space.
      MOVE lv_kna1-pstl2       TO <lv_adrc>-post_code2.
    ELSE.
      MOVE lv_kna1-pstl2       TO <lv_adrc>-post_code3.
    ENDIF.

    MOVE lv_kna1-pstlz         TO <lv_adrc>-post_code1.
    MOVE lv_kna1-regio         TO <lv_adrc>-region.
    MOVE lv_kna1-sortl         TO <lv_adrc>-sort1.
    MOVE lv_kna1-spras         TO <lv_adrc>-langu.
    MOVE lv_kna1-stras         TO <lv_adrc>-street.
    MOVE lv_kna1-telbx         TO <lv_adrc>-extension2.
    MOVE lv_kna1-pfort         TO <lv_adrc>-po_box_loc.
    MOVE lv_kna1-lzone         TO <lv_adrc>-transpzone.
    MOVE lv_kna1-txjcd         TO <lv_adrc>-taxjurcode.
    MOVE bp                   TO  <lv_adrc>-addr_group.

    CLEAR lv_tfmc.
    READ TABLE lt_tfmc into lv_tfmc WITH KEY ktoid = 'D'
                                         fldna = 'NAME1'.
    IF sy-subrc = 0 AND
      ( lv_tfmc-fldnr = '1' OR
        lv_tfmc-fldnr = '2' OR
        lv_tfmc-fldnr = '3' ).
      IF lv_tfmc-fldnr = '1'.
        MOVE lv_kna1-mcod1 TO <lv_adrc>-mc_name1.
      ELSEIF lv_tfmc-fldnr = '2'.
        MOVE lv_kna1-mcod2 TO <lv_adrc>-mc_name1.
      ELSEIF lv_tfmc-fldnr = '3'.
        MOVE lv_kna1-mcod3 TO <lv_adrc>-mc_name1.
      ENDIF.
    ELSE.
*349i-
      PERFORM shift_and_uppercase
        USING <lv_adrc>-name1 CHANGING <lv_adrc>-mc_name1.
    ENDIF.                                                  "*349i
*349i+
* Ort
    CLEAR lv_tfmc.
    READ TABLE lt_tfmc into lv_tfmc WITH KEY ktoid = 'D'
                                             fldna = 'ORT01'.
    IF sy-subrc = 0 AND
      ( lv_tfmc-fldnr = '1' OR
        lv_tfmc-fldnr = '2' OR
        lv_tfmc-fldnr = '3' ).
      IF lv_tfmc-fldnr = '1'.
        MOVE lv_kna1-mcod1 TO <lv_adrc>-mc_city1.
      ELSEIF lv_tfmc-fldnr = '2'.
        MOVE lv_kna1-mcod2 TO <lv_adrc>-mc_city1.
      ELSEIF lv_tfmc-fldnr = '3'.
        MOVE lv_kna1-mcod3 TO <lv_adrc>-mc_city1.
      ENDIF.
    ELSE.
*349i-
      PERFORM shift_and_uppercase
        USING <lv_adrc>-city1 CHANGING <lv_adrc>-mc_city1.
    ENDIF.                                                  "*349i
*349i+
* Stra#e
    CLEAR lv_tfmc.
    READ TABLE lt_tfmc into lv_tfmc WITH KEY ktoid = 'D'
                                             fldna = 'STRAS'.
    IF sy-subrc = 0 AND
      ( lv_tfmc-fldnr = '1' OR
        lv_tfmc-fldnr = '2' OR
        lv_tfmc-fldnr = '3' ).
      IF lv_tfmc-fldnr = '1'.
        MOVE lv_kna1-mcod1 TO <lv_adrc>-mc_street.
      ELSEIF lv_tfmc-fldnr = '2'.
        MOVE lv_kna1-mcod2 TO <lv_adrc>-mc_street.
      ELSEIF lv_tfmc-fldnr = '3'.
        MOVE lv_kna1-mcod3 TO <lv_adrc>-mc_street.
      ENDIF.
    ELSE.
*349i-
      PERFORM shift_and_uppercase
        USING <lv_adrc>-street CHANGING <lv_adrc>-mc_street.
    ENDIF.
    write :/ ' Modified Address : ', lv_kna1-adrnr.
  endloop.
  if testmode is initial.
    update adrc from table lt_adrc.
  endif.
*&---------------------------------------------------------------------*
*&      Form  shift_and_uppercase
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_ADRC_NAME1  text
*      <--P_LV_ADRC_MC_NAME1  text
*----------------------------------------------------------------------*
FORM shift_and_uppercase
  USING    field1
  CHANGING field2.

  DATA: helpfield(50).

  MOVE field1 TO helpfield.
  SHIFT helpfield LEFT DELETING LEADING space.
*tg  ausf¨¹hrlichere Behandlung SET LOCALE LANGUAGE ..... ?
  TRANSLATE helpfield TO UPPER CASE.        "#EC TRANSLANG     wg. TODO
  MOVE helpfield TO field2.

ENDFORM.                    "SHIFT_AND_UPPERCASE

*Selection text£º
*ADDR:D       .
*TESTMODE:        TESTMODE
