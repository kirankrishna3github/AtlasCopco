*&---------------------------------------------------------------------*
*& Report  ZCWU_TEST_020
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  zcwu_test_020.

TABLES: equi,
        sscrfields.
TYPES: BEGIN OF ty_equi,
          equnr TYPE equi-equnr,
          objnr TYPE equi-objnr,
       END OF ty_equi.

DATA: gt_equi_dea   TYPE STANDARD TABLE OF ty_equi,
      gt_equi_act   TYPE STANDARD TABLE OF ty_equi,
      gt_equi_set   TYPE STANDARD TABLE OF ty_equi,
      gt_equi_reset TYPE STANDARD TABLE OF ty_equi,
      gt_equi       TYPE STANDARD TABLE OF ty_equi,
      gs_jsto       TYPE jsto,
      gs_equi       TYPE ty_equi.

CONSTANTS: gc_deactivate TYPE jest-stat VALUE 'I0320',     "Object Deactivated
           gc_deletion   TYPE jest-stat VALUE 'I0076'.     "Deletion Flag

DATA: gt_jest_ins	TYPE TABLE OF	  jest_upd,
      gs_jest_upd TYPE jest_upd,
      gt_jest_upd TYPE TABLE OF   jest_upd,
      gt_jsto_ins TYPE TABLE OF   jsto,
      gt_jsto_upd TYPE TABLE OF   jsto_upd,
      gt_obj_del  TYPE TABLE OF   onr00.

DATA: gv_position TYPE i.

SELECT-OPTIONS: s_equnr FOR equi-equnr.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-t01 .
PARAMETERS:  cb_dea AS CHECKBOX USER-COMMAND dea,
             cb_del AS CHECKBOX USER-COMMAND del.
SELECTION-SCREEN END OF BLOCK b1.

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE text-t02 .
  SELECTION-SCREEN BEGIN OF BLOCK b21 WITH FRAME TITLE text-t03 .
  PARAMETERS: rb_dea RADIOBUTTON GROUP g1,
              rb_act RADIOBUTTON GROUP g1.
  SELECTION-SCREEN END OF BLOCK b21.
  SELECTION-SCREEN BEGIN OF BLOCK b22 WITH FRAME TITLE text-t04 .
  PARAMETERS: rb_set RADIOBUTTON GROUP g2,
              rb_reset RADIOBUTTON GROUP g2.
  SELECTION-SCREEN END OF BLOCK b22.
SELECTION-SCREEN END OF BLOCK b2.

AT SELECTION-SCREEN OUTPUT.
  PERFORM frm_screen_set.

START-OF-SELECTION.

  SELECT  equnr
          objnr
    FROM equi
    INTO TABLE gt_equi
    WHERE equnr IN s_equnr.
  IF sy-subrc <> 0.
    MESSAGE 'Please enter valid equipment numbers!' TYPE 'S'
      DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.

  LOOP AT gt_equi INTO gs_equi.
    IF cb_dea IS NOT INITIAL.
      CALL FUNCTION 'STATUS_CHECK'
        EXPORTING
          objnr             = gs_equi-objnr
          status            = gc_deactivate
        EXCEPTIONS
          object_not_found  = 1
          status_not_active = 2
          OTHERS            = 3.
      IF sy-subrc = 0.
        APPEND gs_equi TO gt_equi_dea .
      ELSE.
        APPEND gs_equi TO gt_equi_act .
      ENDIF.
    ENDIF.

    IF cb_del IS NOT INITIAL.
      CALL FUNCTION 'STATUS_CHECK'
        EXPORTING
          objnr             = gs_equi-objnr
          status            = gc_deletion
        EXCEPTIONS
          object_not_found  = 1
          status_not_active = 2
          OTHERS            = 3.
      IF sy-subrc = 0.
        APPEND gs_equi TO gt_equi_set.
      ELSE.
        APPEND gs_equi TO gt_equi_reset.
      ENDIF.
    ENDIF.
  ENDLOOP.

  PERFORM frm_func_seting.

END-OF-SELECTION.
  IF gt_equi IS INITIAL.
    WRITE: 'All activated successfully!'.
  ELSE.
    WRITE: 'Following equipment are not activated, please check!', / .
    LOOP AT gt_equi INTO gs_equi.
      gv_position = sy-tabix MOD 6.
      IF gv_position  = 0.
        WRITE  /.
      ENDIF.
      gv_position = ( gv_position - 1 ) * 25.
      WRITE: AT gv_position gs_equi-equnr.
    ENDLOOP.
  ENDIF.
*&---------------------------------------------------------------------*
*&      Form  frm_screen_set
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_screen_set .

  DATA: lv_invis    TYPE char1.
  IF cb_dea = 'X'.
    lv_invis = '0'.
  ELSE.
    lv_invis = '1'.
  ENDIF.
  LOOP AT SCREEN.
    IF    screen-name CS 'RB_DEA'
      OR  screen-name CS 'RB_ACT'.
      screen-invisible = lv_invis.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.
  IF cb_del = 'X'.
    lv_invis = '0'.
  ELSE.
    lv_invis = '1'.
  ENDIF.
  LOOP AT SCREEN.
    IF    screen-name CS 'RB_SET'
      OR  screen-name CS 'RB_RESET'.
      screen-invisible = lv_invis.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " FRM_SCREEN_SET
*&---------------------------------------------------------------------*
*&      Form  FRM_FUNC_SETING
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_func_seting .
  DATA: lv_inact TYPE char1.
  IF cb_dea IS NOT INITIAL.
    IF rb_dea IS NOT INITIAL.
      LOOP AT gt_equi_act INTO gs_equi.
        SELECT SINGLE *
          FROM jsto
          INTO gs_jsto
          WHERE objnr = gs_equi-objnr.
        gs_jest_upd-mandt = sy-mandt.
        gs_jest_upd-objnr = gs_equi-objnr.
        gs_jest_upd-stat  = gc_deactivate.
        gs_jest_upd-inact = 'X'.
        gs_jest_upd-chgkz = gs_jsto-chgkz.
        gs_jest_upd-obtyp = gs_jsto-obtyp.
        gs_jest_upd-stsma = gs_jsto-stsma.
        APPEND gs_jest_upd TO gt_jest_upd.
        CALL FUNCTION 'STATUS_UPDATE'
          TABLES
            jest_ins = gt_jest_ins
            jest_upd = gt_jest_upd
            jsto_ins = gt_jsto_ins
            jsto_upd = gt_jsto_upd
            obj_del  = gt_obj_del.

      ENDLOOP.
    ELSE.
      LOOP AT gt_equi_dea INTO gs_equi.
        SELECT SINGLE *
          FROM jsto
          INTO gs_jsto
          WHERE objnr = gs_equi-objnr.
        gs_jest_upd-mandt = sy-mandt.
        gs_jest_upd-objnr = gs_equi-objnr.
        gs_jest_upd-stat  = gc_deactivate.
        CLEAR gs_jest_upd-inact.
        gs_jest_upd-chgkz = gs_jsto-chgkz.
        gs_jest_upd-obtyp = gs_jsto-obtyp.
        gs_jest_upd-stsma = gs_jsto-stsma.
        APPEND gs_jest_upd TO gt_jest_upd.
        CALL FUNCTION 'STATUS_UPDATE'
          TABLES
            jest_ins = gt_jest_ins
            jest_upd = gt_jest_upd
            jsto_ins = gt_jsto_ins
            jsto_upd = gt_jsto_upd
            obj_del  = gt_obj_del.
      ENDLOOP.
    ENDIF.
  ENDIF.

  IF cb_del IS NOT INITIAL.
    IF rb_set IS NOT INITIAL.
      LOOP AT gt_equi_reset INTO gs_equi.
        SELECT SINGLE *
          FROM jsto
          INTO gs_jsto
          WHERE objnr = gs_equi-objnr.
        gs_jest_upd-mandt = sy-mandt.
        gs_jest_upd-objnr = gs_equi-objnr.
        gs_jest_upd-stat  = gc_deletion.
        gs_jest_upd-inact = 'X'.
        gs_jest_upd-chgkz = gs_jsto-chgkz.
        gs_jest_upd-obtyp = gs_jsto-obtyp.
        gs_jest_upd-stsma = gs_jsto-stsma.
        APPEND gs_jest_upd TO gt_jest_upd.
        CALL FUNCTION 'STATUS_UPDATE'
          TABLES
            jest_ins = gt_jest_ins
            jest_upd = gt_jest_upd
            jsto_ins = gt_jsto_ins
            jsto_upd = gt_jsto_upd
            obj_del  = gt_obj_del.

      ENDLOOP.
    ELSE.
      LOOP AT gt_equi_set INTO gs_equi.
        SELECT SINGLE *
          FROM jsto
          INTO gs_jsto
          WHERE objnr = gs_equi-objnr.
        gs_jest_upd-mandt = sy-mandt.
        gs_jest_upd-objnr = gs_equi-objnr.
        gs_jest_upd-stat  = gc_deletion.
        CLEAR gs_jest_upd-inact.
        gs_jest_upd-chgkz = gs_jsto-chgkz.
        gs_jest_upd-obtyp = gs_jsto-obtyp.
        gs_jest_upd-stsma = gs_jsto-stsma.
        APPEND gs_jest_upd TO gt_jest_upd.
        CALL FUNCTION 'STATUS_UPDATE'
          TABLES
            jest_ins = gt_jest_ins
            jest_upd = gt_jest_upd
            jsto_ins = gt_jsto_ins
            jsto_upd = gt_jsto_upd
            obj_del  = gt_obj_del.
      ENDLOOP.
    ENDIF.
  ENDIF.
ENDFORM.                    " FRM_FUNC_SETING

*Text symbol text£º
*T01:Functions
*T02:Setting
*T03:Activate

*T04:Deletion Flag
*Selection text£º
*CB_DEA:        Active <-> Inactive
*CB_DEL:        Deletion Flag
*RB_DEA_1:        Deactivate
*RB_DEA_2:        Activate
*RB_DEL_1:        Set
*RB_DEL_2:        Reset
*S_EQUNR:D       .
