*&---------------------------------------------------------------------*
*& Report  ZTC_ABAP_OO_01
*&---------------------------------------------------------------------*
*  Solution of exercises of the ABAP OO handsOn.
*&---------------------------------------------------------------------*
REPORT ztc_abap_00_01 NO STANDARD PAGE HEADING.

*----------------------------------------------------------------------*
*       INTERFACE lintf_vehicle
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
INTERFACE lintf_vehicle.
  METHODS : getmaxspeed EXPORTING ex_maxspeed TYPE i,
            getcurrentspeed EXPORTING ex_currentspeed TYPE i.
ENDINTERFACE.                    "lintf_vehicle

*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&       Class LCL_VEHICLE
*&---------------------------------------------------------------------*
*        Definition of the class lcl_vehicle.
*----------------------------------------------------------------------*
CLASS lcl_vehicle DEFINITION ABSTRACT.

  PUBLIC SECTION.

    INTERFACES: lintf_vehicle.

    METHODS constructor IMPORTING im_maxspeed TYPE i
                                  im_currentspeed TYPE i.

    METHODS: "getCurrentSpeed exporting ex_currentSpeed type i,
             "getMaxSpeed exporting ex_maxSpeed type i,
             displayattributes,
             accelerate ABSTRACT.
    CLASS-METHODS displaynbofvehicles.

  PROTECTED SECTION.
    METHODS: setcurrentspeed IMPORTING im_currentspeed TYPE i,
             setmaxspeed IMPORTING im_maxspeed TYPE i.

  PRIVATE SECTION.
    DATA: maxspeed TYPE i,
          currentspeed TYPE i.
    CLASS-DATA: nbofvehicles TYPE i.


ENDCLASS.               "LCL_VEHICLE

*&---------------------------------------------------------------------*
*&       Class (Implementation)  lcl_vehicle
*&---------------------------------------------------------------------*
*        Implementation of the class lcl_vehicle.
*----------------------------------------------------------------------*
CLASS lcl_vehicle IMPLEMENTATION.

  METHOD constructor.
    setmaxspeed( im_maxspeed ).
    setcurrentspeed( im_currentspeed ).
    nbofvehicles = nbofvehicles + 1.
  ENDMETHOD.                    "constructor

  METHOD lintf_vehicle~getmaxspeed.
    ex_maxspeed = maxspeed.
  ENDMETHOD.                    "lintf_vehicle~getMaxSpeed

  METHOD setmaxspeed.
    maxspeed = im_maxspeed.
  ENDMETHOD.                    "setMaxSpeed

  METHOD lintf_vehicle~getcurrentspeed.
    ex_currentspeed = currentspeed.
  ENDMETHOD.                    "lintf_vehicle~getCurrentSpeed

  METHOD setcurrentspeed.
    currentspeed = im_currentspeed.
  ENDMETHOD.                    "setCurrentSpeed

  METHOD displayattributes.
    WRITE: / 'The maximum speed is ', 30 maxspeed,
           / 'The current speed is ', 30 currentspeed.
  ENDMETHOD.                    "displayAttributes

  METHOD displaynbofvehicles.
    WRITE: / 'The number of vehicles is ', 30 nbofvehicles.
  ENDMETHOD.                    "displayNbOfVehicles

ENDCLASS.               "lcl_vehicle


*----------------------------------------------------------------------*
*       CLASS lcl_car DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_car DEFINITION INHERITING FROM lcl_vehicle.

  PUBLIC SECTION.
    METHODS: constructor IMPORTING im_maxspeed TYPE i
                                   im_currentspeed TYPE i
                                   im_cartype TYPE c.
    METHODS: getcartype EXPORTING ex_cartype TYPE c,
             displayattributes REDEFINITION,
             accelerate REDEFINITION.

  PRIVATE SECTION.
    DATA: cartype(10) TYPE c.

    METHODS: setcartype IMPORTING im_cartype TYPE c.

ENDCLASS.                    "lcl_car DEFINITION


*----------------------------------------------------------------------*
*       CLASS lcl_car IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_car IMPLEMENTATION.

  METHOD constructor.
    super->constructor( im_maxspeed = im_maxspeed
                        im_currentspeed = im_currentspeed ).
    setcartype( im_cartype ).
  ENDMETHOD.                    "constructor

  METHOD getcartype.
    ex_cartype = cartype.
  ENDMETHOD.                    "getCarType

  METHOD setcartype.
    cartype = im_cartype.
  ENDMETHOD.                    "setCarType

  METHOD displayattributes.
    super->displayattributes( ).
    WRITE: / 'The type of the car is ', 30 cartype.
  ENDMETHOD.                    "displayAttributes

  METHOD accelerate.

    DATA: lv_currentspeed TYPE i,
          lv_maxspeed TYPE i.

    lintf_vehicle~getcurrentspeed( IMPORTING ex_currentspeed = lv_currentspeed ).
    lintf_vehicle~getmaxspeed( IMPORTING ex_maxspeed = lv_maxspeed ).
    IF lv_currentspeed > 0.
      lv_currentspeed = lv_currentspeed + 5.
    ELSE.
      lv_currentspeed = 1.
    ENDIF.

    IF lv_currentspeed > lv_maxspeed.
      "maximum speed is reached, do not increase speed anymore
    ELSE.
      setcurrentspeed( lv_currentspeed ).
    ENDIF.

  ENDMETHOD.                    "accelerate


ENDCLASS.                    "lcl_car IMPLEMENTATION


*&---------------------------------------------------------------------*
*&       Class LCL_TRUCK
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_truck DEFINITION INHERITING FROM lcl_vehicle.

  PUBLIC SECTION.
    METHODS constructor IMPORTING im_maxspeed TYPE i
                                  im_currentspeed TYPE i
                                  im_maxcargo TYPE i.

    METHODS: getmaxcargo EXPORTING ex_maxcargo TYPE i,
             displayattributes REDEFINITION,
             accelerate REDEFINITION.

  PRIVATE SECTION.
    DATA: maxcargo TYPE i.

    METHODS setmaxcargo IMPORTING im_maxcargo TYPE i.

ENDCLASS.               "LCL_TRUCK

*----------------------------------------------------------------------*
*       CLASS lcl_truck IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_truck IMPLEMENTATION.

  METHOD constructor.
    super->constructor( im_maxspeed = im_maxspeed
                        im_currentspeed = im_currentspeed ).
    maxcargo = im_maxcargo.
  ENDMETHOD.                    "constructor

  METHOD getmaxcargo.
    ex_maxcargo = maxcargo.

  ENDMETHOD.                    "getMaxCargo

  METHOD setmaxcargo.
    maxcargo = im_maxcargo.
  ENDMETHOD.                    "setMaxCargo

  METHOD displayattributes.
    super->displayattributes( ).
    WRITE: / 'The maximum cargo is ', 30 maxcargo.
  ENDMETHOD.                    "displayAttributes

  METHOD accelerate.
    DATA: lv_currentspeed TYPE i,
          lv_maxspeed TYPE i.

    lintf_vehicle~getcurrentspeed( IMPORTING ex_currentspeed = lv_currentspeed ).
    lintf_vehicle~getmaxspeed( IMPORTING ex_maxspeed = lv_maxspeed ).
    IF lv_currentspeed > 0.
      lv_currentspeed = lv_currentspeed + 2.
    ELSE.
      lv_currentspeed = 1.
    ENDIF.

    IF lv_currentspeed > lv_maxspeed.
      "maximum speed is reached, do not increase speed anymore
    ELSE.
      setcurrentspeed( lv_currentspeed ).
    ENDIF.
  ENDMETHOD.                    "accelerate


ENDCLASS.                    "lcl_truck IMPLEMENTATION


*----------------------------------------------------------------------*
*       CLASS lcl_person DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_person DEFINITION.

  PUBLIC SECTION.
    METHODS: constructor IMPORTING im_firstname TYPE c
                                   im_lastname TYPE c.

    METHODS: getfirstname EXPORTING ex_firstname TYPE c,
             getlastname EXPORTING ex_lastname TYPE c,
             displayattributes.

  PRIVATE SECTION.
    DATA: firstname(50) TYPE c,
          lastname(50) TYPE c.

    METHODS: setfirstname IMPORTING im_firstname TYPE c,
             setlastname IMPORTING im_lastname TYPE c.

ENDCLASS.                    "lcl_person DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_customer DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_customer DEFINITION INHERITING FROM lcl_person.

  PUBLIC SECTION.
    METHODS: addvehicle IMPORTING im_vehicle TYPE REF TO lcl_vehicle,
             getnbofvehicles,
             displayattributes REDEFINITION.

  PRIVATE SECTION.
    DATA: lit_vehicles TYPE TABLE OF REF TO lcl_vehicle.


ENDCLASS.                    "lcl_customer DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_employer DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_employer DEFINITION INHERITING FROM lcl_person.

  PUBLIC SECTION.
    EVENTS: give_bonus.

    METHODS: addcustomer IMPORTING im_customer TYPE REF TO lcl_customer,
             getnbofcustomers,
             displayattributes REDEFINITION.

  PRIVATE SECTION.
    DATA: lit_customers TYPE TABLE OF REF TO lcl_customer.

ENDCLASS.                    "lcl_employer DEFINITION


*----------------------------------------------------------------------*
*       CLASS lcl_person IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_person IMPLEMENTATION.

  METHOD constructor.
    setfirstname( im_firstname ).
    setlastname( im_lastname ).
  ENDMETHOD.                    "constructor

  METHOD getfirstname.
    ex_firstname = firstname.
  ENDMETHOD.                    "getFirstName

  METHOD setfirstname.
    firstname = im_firstname.
  ENDMETHOD.                    "setFirstName

  METHOD getlastname.
    ex_lastname = lastname.
  ENDMETHOD.                    "getLastName

  METHOD setlastname.
    lastname = im_lastname.
  ENDMETHOD.                    "setLastName

  METHOD displayattributes.
    WRITE: / 'First Name is: ',
             firstname.
    WRITE: / 'Last Name is: ',
             lastname.
  ENDMETHOD.                    "displayAttributes

ENDCLASS.                    "lcl_person IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_customer IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_customer IMPLEMENTATION.

  METHOD addvehicle.
    APPEND im_vehicle TO lit_vehicles.
  ENDMETHOD.                    "addVehicle

  METHOD getnbofvehicles.
    DATA: lv_nbofvehicles TYPE i.

    DESCRIBE TABLE lit_vehicles LINES lv_nbofvehicles.
    WRITE: / 'This persons owns ',
             lv_nbofvehicles,
             ' vehicles'.
  ENDMETHOD.                    "getNbOfVehicles

  METHOD displayattributes.
    DATA: lv_vehicle TYPE REF TO lcl_vehicle.
    DATA: lv_nbofvehicles TYPE i.

    super->displayattributes( ).
    DESCRIBE TABLE lit_vehicles LINES lv_nbofvehicles.
    IF lv_nbofvehicles > 0.
      WRITE: /.
      WRITE: / 'List of vehicles owned by this person: '.
    ENDIF.
    LOOP AT lit_vehicles INTO lv_vehicle.
      lv_vehicle->displayattributes( ).
      WRITE: /.
    ENDLOOP.

  ENDMETHOD.                    "displayAttributes

ENDCLASS.                    "lcl_customer IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_employer IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_employer IMPLEMENTATION.

  METHOD addcustomer.
    APPEND im_customer TO lit_customers.
    RAISE EVENT give_bonus.
  ENDMETHOD.                    "addCustomer

  METHOD getnbofcustomers.
    DATA: lv_nbofcustomers TYPE i.

    DESCRIBE TABLE lit_customers LINES lv_nbofcustomers.
    WRITE: / 'The number of customers is: ',
             lv_nbofcustomers.
  ENDMETHOD.                    "getNbOfCustomers

  METHOD displayattributes.
    DATA: lv_customer TYPE REF TO lcl_customer,
          lv_nbofcustomers TYPE i.

    super->displayattributes( ).
    DESCRIBE TABLE lit_customers LINES lv_nbofcustomers.

    IF lv_nbofcustomers > 0.
      WRITE: /.
      WRITE: / 'List of customers: '.
    ENDIF.

    LOOP AT lit_customers INTO lv_customer.
      lv_customer->displayattributes( ).
      WRITE: /.
    ENDLOOP.

  ENDMETHOD.                    "displayAttributes
ENDCLASS.                    "lcl_employer IMPLEMENTATION


*----------------------------------------------------------------------*
*       CLASS lcl_paycheck DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_paycheck DEFINITION.

  PUBLIC SECTION.
    METHODS: constructor IMPORTING im_employer TYPE REF TO lcl_employer.

    METHODS: getbonus EXPORTING ex_bonus TYPE i,
             addtobonus FOR EVENT give_bonus OF lcl_employer,
             getpaycheck EXPORTING ex_paycheck TYPE i,
             displaypaycheck.

  PRIVATE SECTION.
    DATA: bonus TYPE i,
          paycheck TYPE i,
          employer TYPE REF TO lcl_employer.

    METHODS: setbonus IMPORTING im_bonus TYPE i,
             setpaycheck IMPORTING im_paycheck TYPE i,
             setemployer IMPORTING im_employer TYPE REF TO lcl_employer.

ENDCLASS.                    "lcl_paycheck DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_paycheck IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_paycheck IMPLEMENTATION.

  METHOD constructor.
    IF im_employer IS INITIAL.
      MESSAGE 'Given employer is an invalid employer, please give correct employer' TYPE 'E'.
    ELSE.
      setemployer( im_employer = im_employer ).
    ENDIF.
  ENDMETHOD.                    "constructor

  METHOD displaypaycheck.

    DATA: lv_amount TYPE i.

    getpaycheck( IMPORTING ex_paycheck = lv_amount ).
    WRITE: /,
           / 'The paycheck of this employer is ', 30 lv_amount.
    CLEAR lv_amount.
    getbonus( IMPORTING ex_bonus = lv_amount ).
    WRITE: /,
           / 'The bonus of this employer is ', 30 lv_amount.

  ENDMETHOD.                    "displayPayCheck

  METHOD setemployer.
    employer = im_employer.
  ENDMETHOD.                    "setEmployer

  METHOD getbonus.
    ex_bonus = bonus.
  ENDMETHOD.                    "getBonus

  METHOD addtobonus.
    DATA: lv_bonus TYPE i.
    getbonus( IMPORTING ex_bonus = lv_bonus ).
    lv_bonus = lv_bonus + 1.
    setbonus( lv_bonus ).
  ENDMETHOD.                    "addToBonus

  METHOD setbonus.
    bonus = im_bonus.
  ENDMETHOD.                    "setBonus

  METHOD getpaycheck.
    DATA: lv_bonus TYPE i,
          lv_totalpaycheck TYPE i.

    getbonus( IMPORTING ex_bonus = lv_bonus ).
    lv_totalpaycheck = paycheck + lv_bonus.

    ex_paycheck = lv_totalpaycheck.
  ENDMETHOD.                    "getPaycheck

  METHOD setpaycheck.
    paycheck = im_paycheck.
  ENDMETHOD.                    "setPaycheck

ENDCLASS.                    "lcl_paycheck IMPLEMENTATION


****************
* DECLARATIONS *
****************
DATA: lv_cust1 TYPE REF TO lcl_customer,
      lv_empl1 TYPE REF TO lcl_employer.

DATA: lv_paycheck TYPE REF TO lcl_paycheck.

DATA: lv_car1 TYPE REF TO lcl_car,
      lv_truck_1 TYPE REF TO lcl_truck.

**********************
* START-OF-SELECTION *
**********************
START-OF-SELECTION.

  CREATE OBJECT lv_cust1
    EXPORTING
      im_firstname = 'Tim'
      im_lastname  = 'Jones'.

  CREATE OBJECT lv_empl1
    EXPORTING
      im_firstname = 'Cleo'
      im_lastname  = 'Curtis'.

  CREATE OBJECT lv_paycheck
    EXPORTING
      im_employer = lv_empl1.

* Initialise the handle of the events...
  SET HANDLER lv_paycheck->addtobonus FOR ALL INSTANCES.

* display the initial attributes of employer 1.
  WRITE: / 'Data of employer 1: '.
  lv_empl1->displayattributes( ).
  lv_empl1->getnbofcustomers( ).

* add a car to the collection of vehicles of customer 1.
  CREATE OBJECT lv_car1
    EXPORTING
      im_maxspeed     = 200
      im_currentspeed = 0
      im_cartype      = 'BMW1'.
  lv_cust1->addvehicle( EXPORTING im_vehicle = lv_car1 ).

* add a truck to the collection of vehicles of customer 1.
  CREATE OBJECT lv_truck_1
    EXPORTING
      im_maxspeed     = 180
      im_currentspeed = 1
      im_maxcargo     = 1000.
  lv_cust1->addvehicle( EXPORTING im_vehicle = lv_truck_1 ).

* display the attributes of customer 1.
  WRITE: /.
  WRITE: / 'Data of customer 1: '.
  lv_cust1->displayattributes( ).
  lv_cust1->getnbofvehicles( ).

  WRITE: /.
  WRITE: / 'Paycheck initial status'.
  lv_paycheck->displaypaycheck( ).
  WRITE: /.
  WRITE: /.

* add a customer to the collection of customer of employer 1.
  lv_empl1->addcustomer( EXPORTING im_customer = lv_cust1 ).

* display the initial attributes of employer 1.
  WRITE: /.
  WRITE: / 'Changed data of employer 1: '.
  lv_empl1->displayattributes( ).
  lv_empl1->getnbofcustomers( ).

  WRITE: /.
  WRITE: / 'Paycheck changed status'.
  lv_paycheck->displaypaycheck( ).
  WRITE: /.
  WRITE: /.
