REPORT ZAL_ABAP message-id 26 line-size 255
no standard page heading.
* ZCP1_PMCO_V.
PARAMETER DOWNLOAD(1) DEFAULT 'S' lower case. "N-svr,Y-clnt
PARAMETER EXECMODE(1) DEFAULT 'B' lower case. "D-dlg,B-btch
PARAMETER OUT_DIR(48) DEFAULT "output file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER IN_DIR(48) DEFAULT "input file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER P_DEST TYPE RFCDES-RFCDEST DEFAULT
'NONE'.
PARAMETER P_PROGID TYPE RFCOPT-RFCEXEC DEFAULT
SPACE.
PARAMETER P_GWHOST TYPE RFCOPT-RFCGWHOST DEFAULT
SPACE.
PARAMETER P_GWSERV TYPE RFCOPT-RFCGWSERV DEFAULT
SPACE.
PARAMETER P_SRVFM(30) DEFAULT "Server Callback function
SPACE.
PARAMETER P_PKGSZ TYPE I DEFAULT "Stream package size
5000.
PARAMETER P_SNC_ON(1) DEFAULT "X-on SPACE-off
SPACE.

PARAMETER $PARAM1 TYPE D.

PARAMETER $PARAM2 TYPE D.

PARAMETER P_DF_VK(40) DEFAULT "ABAP data flow object key
'' lower case.
PARAMETER P_DI_GEN(40) DEFAULT "DI version that generated ABAP
'' lower case.

*** Machine generated ABAP. Do not modify.            ***
*** (C)Copyright Business Objects S.A.  All rights reserved. ***
*
* Date Time:
*    12/24/15 07:18:28
* SAP used for generated this ABAP:
*    Release: 701
*    Host   : 10.25.3.82
*
* ABAP Dataflow Name:
*    DF_R3_CTS_LZ_SAP_CP1_PMCO_V_D
* ABAP program name in SAP:
*  ZCP1_PMCO_V
* Generated ABAP file name:
*    //AIRSBEAP0512/D$/Data/SAPLogistics/VAL/ABAP/ZCP1_PMCO_V
TABLES PMCO.
TABLES AUFK.
TABLES PMSDO.
TABLES ZSTC_SALES_COMP.

DATA: begin of ITAB5 occurs 0,
BUKRS(4) TYPE C,
OBJNR(22) TYPE C,
COCUR(5) TYPE C,
BELTP(1) TYPE N,
WRTTP(2) TYPE C,
GJAHR(4) TYPE N,
ACPOS(14) TYPE C,
VERSN(3) TYPE C,
PERBL(3) TYPE N,
VORGA(4) TYPE C,
BEMOT(2) TYPE C,
ABKAT(2) TYPE N,
VKORG(4) TYPE C,
WRT00(16) TYPE P DECIMALS 2,
WRT01(16) TYPE P DECIMALS 2,
WRT02(16) TYPE P DECIMALS 2,
WRT03(16) TYPE P DECIMALS 2,
WRT04(16) TYPE P DECIMALS 2,
WRT05(16) TYPE P DECIMALS 2,
WRT06(16) TYPE P DECIMALS 2,
WRT07(16) TYPE P DECIMALS 2,
WRT08(16) TYPE P DECIMALS 2,
WRT09(16) TYPE P DECIMALS 2,
WRT10(16) TYPE P DECIMALS 2,
WRT11(16) TYPE P DECIMALS 2,
WRT12(16) TYPE P DECIMALS 2,
WRT13(16) TYPE P DECIMALS 2,
WRT14(16) TYPE P DECIMALS 2,
WRT15(16) TYPE P DECIMALS 2,
WRT16(16) TYPE P DECIMALS 2,
Z_BUKRS(4) TYPE C,
Z_VKORG(4) TYPE C,
Z_WERKS(4) TYPE C,
Z_EKORG(4) TYPE C,
Z_MAMUSERCMPY(4) TYPE C,
Z_REGION(40) TYPE C,
Z_COUNTRY(40) TYPE C,
Z_COUNTRYDSCR(255) TYPE C,
Z_SALESCOMPANY(40) TYPE C,
Z_SALESCMPDSCR(255) TYPE C.
DATA: end of ITAB5.

data: append_flag(1) value ' ',
      cntbuf type i,
      delimleng type i,last_batch(1) value ' '.

CONSTANTS C_DF_VK(40) VALUE '1669'.
CONSTANTS C_DI_GEN(40) VALUE '14.2.3.660'.
DATA WARN_MSG(50).


DATA: gv_directory     TYPE epsdirnam  VALUE '/var/load/xxx/UK/read/',
      gv_logsys        LIKE tbdlst-logsys.

start-of-selection.
* Logical system
  CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
    IMPORTING
      own_logical_system             = gv_logsys
    EXCEPTIONS
      own_logical_system_not_defined = 1
      OTHERS                         = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE 'E' NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    STOP.
  ENDIF.
  REPLACE 'xxx' IN out_dir WITH gv_logsys(3).
  REPLACE 'xxx' IN in_dir WITH gv_logsys(3).


  IF DOWNLOAD = 'S' OR
     DOWNLOAD = 'N' OR
     DOWNLOAD = 'Y'.
      .
  ELSE.
     DATA: m_xfer_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'data transfer method: ' DOWNLOAD
'. Regenerate the ABAP program and upload to this system.'
     INTO m_xfer_err_msg.
     MESSAGE  E240(S#) WITH m_xfer_err_msg.
  ENDIF.

  IF EXECMODE = 'B' OR
     EXECMODE = 'D'.
      .
  ELSE.
     DATA: m_exec_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'execution option: ' EXECMODE
'. Regenerate the ABAP program and upload to this system.'
     INTO m_exec_err_msg.
     MESSAGE  E240(S#) WITH m_exec_err_msg.
  ENDIF.

  IF DOWNLOAD = 'S'.
     PERFORM CONNECT_RFCDEST_TO_PROGID.
  ENDIF.



PERFORM FORM5.
last_batch = 'X'.
PERFORM FORM6.
FREE ITAB5.
  IF DOWNLOAD = 'S'.
     PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
  ENDIF.


end-of-selection.

CLEAR WARN_MSG.

IF NOT P_DF_VK IS INITIAL.
  IF P_DF_VK <> C_DF_VK.
     CONCATENATE '$$Warning$'
                 C_DF_VK
                 '$' INTO WARN_MSG.
  ENDIF.
ENDIF.
IF NOT P_DI_GEN IS INITIAL.
  IF P_DI_GEN <> C_DI_GEN.
     IF WARN_MSG IS INITIAL.
       CONCATENATE '$$Warning$$'
                   C_DI_GEN
                   INTO WARN_MSG.
     ELSE.
       CONCATENATE WARN_MSG
                   C_DI_GEN
                   INTO WARN_MSG.
     ENDIF.
  ENDIF.
ENDIF.

IF NOT WARN_MSG IS INITIAL.
  IF EXECMODE = 'D'.
    WRITE WARN_MSG.
    NEW-LINE.
  ELSE.
    MESSAGE S240(S#) with WARN_MSG.
  ENDIF.
ENDIF.


write  '* Program Complete *'.
write  '(C)Copyright Business Objects S.A.  All rights reserved.'.

FORM FORM5.
DATA ALTMP41(4) TYPE C.
DATA ALTMP42(22) TYPE C.
DATA ALTMP43(5) TYPE C.
DATA ALTMP44(1) TYPE N.
DATA ALTMP45(2) TYPE C.
DATA ALTMP46(4) TYPE N.
DATA ALTMP47(14) TYPE C.
DATA ALTMP48(3) TYPE C.
DATA ALTMP49(3) TYPE N.
DATA ALTMP50(4) TYPE C.
DATA ALTMP51(2) TYPE C.
DATA ALTMP52(2) TYPE N.
DATA ALTMP53(4) TYPE C.
DATA ALTMP54(16) TYPE P DECIMALS 2.
DATA ALTMP55(16) TYPE P DECIMALS 2.
DATA ALTMP56(16) TYPE P DECIMALS 2.
DATA ALTMP57(16) TYPE P DECIMALS 2.
DATA ALTMP58(16) TYPE P DECIMALS 2.
DATA ALTMP59(16) TYPE P DECIMALS 2.
DATA ALTMP60(16) TYPE P DECIMALS 2.
DATA ALTMP61(16) TYPE P DECIMALS 2.
DATA ALTMP62(16) TYPE P DECIMALS 2.
DATA ALTMP63(16) TYPE P DECIMALS 2.
DATA ALTMP64(16) TYPE P DECIMALS 2.
DATA ALTMP65(16) TYPE P DECIMALS 2.
DATA ALTMP66(16) TYPE P DECIMALS 2.
DATA ALTMP67(16) TYPE P DECIMALS 2.
DATA ALTMP68(16) TYPE P DECIMALS 2.
DATA ALTMP69(16) TYPE P DECIMALS 2.
DATA ALTMP70(16) TYPE P DECIMALS 2.
DATA ALTMP71(4) TYPE C.
DATA ALTMP72(4) TYPE C.
DATA ALTMP73(4) TYPE C.
DATA ALTMP74(4) TYPE C.
DATA ALTMP75(4) TYPE C.
DATA ALTMP76(40) TYPE C.
DATA ALTMP77(40) TYPE C.
DATA ALTMP78(255) TYPE C.
DATA ALTMP79(40) TYPE C.
DATA ALTMP80(255) TYPE C.

DATA AUFK9BUKRS LIKE AUFK-BUKRS.
DATA PMCO9OBJNR LIKE PMCO-OBJNR.
DATA PMCO9COCUR LIKE PMCO-COCUR.
DATA PMCO9BELTP LIKE PMCO-BELTP.
DATA PMCO9WRTTP LIKE PMCO-WRTTP.
DATA PMCO9GJAHR LIKE PMCO-GJAHR.
DATA PMCO9ACPOS LIKE PMCO-ACPOS.
DATA PMCO9VERSN LIKE PMCO-VERSN.
DATA PMCO9PERBL LIKE PMCO-PERBL.
DATA PMCO9VORGA LIKE PMCO-VORGA.
DATA PMCO9BEMOT LIKE PMCO-BEMOT.
DATA PMCO9ABKAT LIKE PMCO-ABKAT.
DATA PMSDO9VKORG LIKE PMSDO-VKORG.
DATA PMCO9WRT00 LIKE PMCO-WRT00.
DATA PMCO9WRT01 LIKE PMCO-WRT01.
DATA PMCO9WRT02 LIKE PMCO-WRT02.
DATA PMCO9WRT03 LIKE PMCO-WRT03.
DATA PMCO9WRT04 LIKE PMCO-WRT04.
DATA PMCO9WRT05 LIKE PMCO-WRT05.
DATA PMCO9WRT06 LIKE PMCO-WRT06.
DATA PMCO9WRT07 LIKE PMCO-WRT07.
DATA PMCO9WRT08 LIKE PMCO-WRT08.
DATA PMCO9WRT09 LIKE PMCO-WRT09.
DATA PMCO9WRT10 LIKE PMCO-WRT10.
DATA PMCO9WRT11 LIKE PMCO-WRT11.
DATA PMCO9WRT12 LIKE PMCO-WRT12.
DATA PMCO9WRT13 LIKE PMCO-WRT13.
DATA PMCO9WRT14 LIKE PMCO-WRT14.
DATA PMCO9WRT15 LIKE PMCO-WRT15.
DATA PMCO9WRT16 LIKE PMCO-WRT16.
DATA ZSTC_SALE_019BUKRS LIKE ZSTC_SALES_COMP-BUKRS.
DATA ZSTC_SALE_019VKORG LIKE ZSTC_SALES_COMP-VKORG.
DATA ZSTC_SALE_019WERKS LIKE ZSTC_SALES_COMP-WERKS.
DATA ZSTC_SALE_019EKORG LIKE ZSTC_SALES_COMP-EKORG.
DATA ZSTC_SALE_019MAMUSERCMPY LIKE ZSTC_SALES_COMP-MAMUSERCMPY.
DATA ZSTC_SALE_019REGION LIKE ZSTC_SALES_COMP-REGION.
DATA ZSTC_SALE_019COUNTRY LIKE ZSTC_SALES_COMP-COUNTRY.
DATA ZSTC_SALE_019COUNTRYDSCR LIKE ZSTC_SALES_COMP-COUNTRYDSCR.
DATA ZSTC_SALE_019SALESCOMPANY LIKE ZSTC_SALES_COMP-SALESCOMPANY.
DATA ZSTC_SALE_019SALESCMPDSCR LIKE ZSTC_SALES_COMP-SALESCMPDSCR.
DATA AUFK9IDAT3 LIKE AUFK-IDAT3.
DATA PMSDO9OBJNR LIKE PMSDO-OBJNR.
DATA AUFK9OBJNR LIKE AUFK-OBJNR.



SELECT
  AUFK9~BUKRS
  PMCO9~OBJNR
  PMCO9~COCUR
  PMCO9~BELTP
  PMCO9~WRTTP
  PMCO9~GJAHR
  PMCO9~ACPOS
  PMCO9~VERSN
  PMCO9~PERBL
  PMCO9~VORGA
  PMCO9~BEMOT
  PMCO9~ABKAT
  PMSDO9~VKORG
  PMCO9~WRT00
  PMCO9~WRT01
  PMCO9~WRT02
  PMCO9~WRT03
  PMCO9~WRT04
  PMCO9~WRT05
  PMCO9~WRT06
  PMCO9~WRT07
  PMCO9~WRT08
  PMCO9~WRT09
  PMCO9~WRT10
  PMCO9~WRT11
  PMCO9~WRT12
  PMCO9~WRT13
  PMCO9~WRT14
  PMCO9~WRT15
  PMCO9~WRT16
  ZSTC_SALE_019~BUKRS
  ZSTC_SALE_019~VKORG
  ZSTC_SALE_019~WERKS
  ZSTC_SALE_019~EKORG
  ZSTC_SALE_019~MAMUSERCMPY
  ZSTC_SALE_019~REGION
  ZSTC_SALE_019~COUNTRY
  ZSTC_SALE_019~COUNTRYDSCR
  ZSTC_SALE_019~SALESCOMPANY
  ZSTC_SALE_019~SALESCMPDSCR
  AUFK9~IDAT3
  PMSDO9~OBJNR
  AUFK9~OBJNR
into (AUFK9BUKRS,
  PMCO9OBJNR,
  PMCO9COCUR,
  PMCO9BELTP,
  PMCO9WRTTP,
  PMCO9GJAHR,
  PMCO9ACPOS,
  PMCO9VERSN,
  PMCO9PERBL,
  PMCO9VORGA,
  PMCO9BEMOT,
  PMCO9ABKAT,
  PMSDO9VKORG,
  PMCO9WRT00,
  PMCO9WRT01,
  PMCO9WRT02,
  PMCO9WRT03,
  PMCO9WRT04,
  PMCO9WRT05,
  PMCO9WRT06,
  PMCO9WRT07,
  PMCO9WRT08,
  PMCO9WRT09,
  PMCO9WRT10,
  PMCO9WRT11,
  PMCO9WRT12,
  PMCO9WRT13,
  PMCO9WRT14,
  PMCO9WRT15,
  PMCO9WRT16,
  ZSTC_SALE_019BUKRS,
  ZSTC_SALE_019VKORG,
  ZSTC_SALE_019WERKS,
  ZSTC_SALE_019EKORG,
  ZSTC_SALE_019MAMUSERCMPY,
  ZSTC_SALE_019REGION,
  ZSTC_SALE_019COUNTRY,
  ZSTC_SALE_019COUNTRYDSCR,
  ZSTC_SALE_019SALESCOMPANY,
  ZSTC_SALE_019SALESCMPDSCR,
  AUFK9IDAT3,
  PMSDO9OBJNR,
  AUFK9OBJNR)
FROM AUFK AS AUFK9
 INNER JOIN PMCO AS PMCO9
 ON ( AUFK9~OBJNR = PMCO9~OBJNR )
 INNER JOIN PMSDO AS PMSDO9
 ON ( PMCO9~OBJNR = PMSDO9~OBJNR )
 INNER JOIN ZSTC_SALES_COMP AS ZSTC_SALE_019
 ON ( PMSDO9~VKORG = ZSTC_SALE_019~VKORG )
WHERE ( NOT ( ( PMSDO9~VKORG like '%04' ) )
 AND ( NOT ( ( PMSDO9~VKORG like '%03' ) )
 AND ( NOT ( ( PMSDO9~VKORG like '%02' ) )
 AND ( ( AUFK9~IDAT3 <= $PARAM1 )
 OR ( AUFK9~IDAT3 >= $PARAM2 ) ) ) ) ).
ALTMP41 = AUFK9BUKRS.
ALTMP42 = PMCO9OBJNR.
ALTMP43 = PMCO9COCUR.
ALTMP44 = PMCO9BELTP.
ALTMP45 = PMCO9WRTTP.
ALTMP46 = PMCO9GJAHR.
ALTMP47 = PMCO9ACPOS.
ALTMP48 = PMCO9VERSN.
ALTMP49 = PMCO9PERBL.
ALTMP50 = PMCO9VORGA.
ALTMP51 = PMCO9BEMOT.
ALTMP52 = PMCO9ABKAT.
ALTMP53 = PMSDO9VKORG.
ALTMP54 = PMCO9WRT00.
ALTMP55 = PMCO9WRT01.
ALTMP56 = PMCO9WRT02.
ALTMP57 = PMCO9WRT03.
ALTMP58 = PMCO9WRT04.
ALTMP59 = PMCO9WRT05.
ALTMP60 = PMCO9WRT06.
ALTMP61 = PMCO9WRT07.
ALTMP62 = PMCO9WRT08.
ALTMP63 = PMCO9WRT09.
ALTMP64 = PMCO9WRT10.
ALTMP65 = PMCO9WRT11.
ALTMP66 = PMCO9WRT12.
ALTMP67 = PMCO9WRT13.
ALTMP68 = PMCO9WRT14.
ALTMP69 = PMCO9WRT15.
ALTMP70 = PMCO9WRT16.
ALTMP71 = ZSTC_SALE_019BUKRS.
ALTMP72 = ZSTC_SALE_019VKORG.
ALTMP73 = ZSTC_SALE_019WERKS.
ALTMP74 = ZSTC_SALE_019EKORG.
ALTMP75 = ZSTC_SALE_019MAMUSERCMPY.
ALTMP76 = ZSTC_SALE_019REGION.
ALTMP77 = ZSTC_SALE_019COUNTRY.
ALTMP78 = ZSTC_SALE_019COUNTRYDSCR.
ALTMP79 = ZSTC_SALE_019SALESCOMPANY.
ALTMP80 = ZSTC_SALE_019SALESCMPDSCR.
 move ALTMP41 to ITAB5-BUKRS.
 move ALTMP42 to ITAB5-OBJNR.
 move ALTMP43 to ITAB5-COCUR.
 move ALTMP44 to ITAB5-BELTP.
 move ALTMP45 to ITAB5-WRTTP.
 move ALTMP46 to ITAB5-GJAHR.
 move ALTMP47 to ITAB5-ACPOS.
 move ALTMP48 to ITAB5-VERSN.
 move ALTMP49 to ITAB5-PERBL.
 move ALTMP50 to ITAB5-VORGA.
 move ALTMP51 to ITAB5-BEMOT.
 move ALTMP52 to ITAB5-ABKAT.
 move ALTMP53 to ITAB5-VKORG.
 move ALTMP54 to ITAB5-WRT00.
 move ALTMP55 to ITAB5-WRT01.
 move ALTMP56 to ITAB5-WRT02.
 move ALTMP57 to ITAB5-WRT03.
 move ALTMP58 to ITAB5-WRT04.
 move ALTMP59 to ITAB5-WRT05.
 move ALTMP60 to ITAB5-WRT06.
 move ALTMP61 to ITAB5-WRT07.
 move ALTMP62 to ITAB5-WRT08.
 move ALTMP63 to ITAB5-WRT09.
 move ALTMP64 to ITAB5-WRT10.
 move ALTMP65 to ITAB5-WRT11.
 move ALTMP66 to ITAB5-WRT12.
 move ALTMP67 to ITAB5-WRT13.
 move ALTMP68 to ITAB5-WRT14.
 move ALTMP69 to ITAB5-WRT15.
 move ALTMP70 to ITAB5-WRT16.
 move ALTMP71 to ITAB5-Z_BUKRS.
 move ALTMP72 to ITAB5-Z_VKORG.
 move ALTMP73 to ITAB5-Z_WERKS.
 move ALTMP74 to ITAB5-Z_EKORG.
 move ALTMP75 to ITAB5-Z_MAMUSERCMPY.
 move ALTMP76 to ITAB5-Z_REGION.
 move ALTMP77 to ITAB5-Z_COUNTRY.
 move ALTMP78 to ITAB5-Z_COUNTRYDSCR.
 move ALTMP79 to ITAB5-Z_SALESCOMPANY.
 move ALTMP80 to ITAB5-Z_SALESCMPDSCR.
 append ITAB5.
 cntbuf = cntbuf + 1.
 if download = 'N'.
  if cntbuf > 5000.
    perform FORM6.
    clear cntbuf.
    refresh ITAB5.
    append_flag = 'A'.
  endif.
 endif.
 if download = 'S'.
  if cntbuf > P_PKGSZ.
    perform FORM6.
    clear cntbuf.
    refresh ITAB5.
  endif.
 endif.
ENDSELECT.
ENDFORM.

FORM FORM6.
data: outfile(512), ldfile(50).
ldfile = 'CTS_LZ_SAP_CP1_PMCO_V'.
concatenate out_dir ldfile into outfile
  separated by '/'.
  IF DOWNLOAD = 'S'.
     DATA: error_message(700),mtext(800),iEOP(1).
     CALL FUNCTION P_SRVFM
          DESTINATION P_DEST
          KEEPING LOGICAL UNIT OF WORK
          EXPORTING
            EOS = last_batch
          IMPORTING
            EOP = iEOP
          TABLES
            E_TABLE = ITAB5
          EXCEPTIONS
            READ_ERROR = 1
            SYSTEM_FAILURE = 2
            MESSAGE error_message
            COMMUNICATION_FAILURE = 3
            MESSAGE error_message
            OTHERS = 4.

     IF sy-subrc ne 0.
        Case sy-subrc.
        when 1.
        CONCATENATE
        'Data Services read error. '
        'Check Data Services error log.'
        INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 2.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 3.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 4.
        MESSAGE  E240(S#) WITH
'Other SAP System Failure while calling DS remote function.'.
        endcase.
      ENDIF.
      IF iEOP = 'X'.
         PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
         LEAVE PROGRAM.
       ENDIF.
  ELSE.
data  dlmtlen type i value '1'.
data xdlmtlen type i value '1'.
data:
  ht(1) type c,
  xht(1) type x,
  conv type ref to cl_abap_conv_in_ce.
xht = '7F'.
conv = cl_abap_conv_in_ce=>create(
  encoding = '1100'
  input = xht
).
call method conv->read(
  exporting n    = xdlmtlen
  importing data = ht
            len = dlmtlen
).
data return_code type i.
 perform write_delimited_file
           tables   ITAB5
           using    outfile
                    append_flag
                    ht
                    dlmtlen
                    download
           changing return_code.

  case return_code.
    when 1.
      IF EXECMODE = 'D'.
        WRITE: /5 'No line selected'.
      ELSE.
        MESSAGE E047(S#).
      ENDIF.
    when 2.
      IF EXECMODE = 'D'.
        WRITE: /5 'Open File Error -- ', 25 OUTFILE.
      ELSE.
        MESSAGE  E084(E0) WITH OUTFILE.
      ENDIF.
    when 3.
      IF EXECMODE = 'D'.
        WRITE: /5 'Data exceed length limit (8192) '.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Data exceed length limit (8192) '.
      ENDIF.
    when 4.
      IF EXECMODE = 'D'.
        WRITE: /5 'Call function WS_DOWNLOAD error'.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Call function WS_DOWNLOAD error'.
      ENDIF.
  endcase.
 ENDIF.
ENDFORM.

FORM SUBSTRING USING SRC BEG LEN CHANGING RET.

DATA: VA1 TYPE I.
DATA: VA2 TYPE I.
DATA: VA3 TYPE I.

VA3 = STRLEN( SRC ).

IF  BEG = 0.   VA1 = 0.
ELSE.
  IF  BEG < 0.
    VA1 = VA3 + BEG.
    IF  VA1 < 0.   VA1 = 0.
    ENDIF.
  ELSE.          VA1 = BEG - 1.
  ENDIF.
ENDIF.

IF  LEN < 0.   VA2 = 0.
ELSE.          VA2 = VA3 - VA1.
ENDIF.

IF  VA2 > LEN. VA2 = LEN.
ENDIF.

IF  VA2 < 1.   MOVE ''           TO RET.
ELSE.          MOVE SRC+VA1(VA2) TO RET.
ENDIF.

ENDFORM.

form write_delimited_file
           tables   datatab
           using    file
                    append
                    delimit
                    dlength
                    dwnload
          changing rc.

  data: type1,
        appd(1),
        temp(32),
        time1(8),
        date1(10),
        output(8192),
        rcount type i,
        offset type i,
        tablen type i,
        maxlen type i value '8192'.

  data: begin of clientab occurs 0,
             output(8192),
          end of clientab.

  field-symbols: <f>.
  field-symbols <delim1>.
  data delim2(16).
  data l_filename type string.

  appd = append.
  if appd is not initial.
     appd = 'X'.
  endif.
  move file to l_filename.
  describe table datatab lines tablen.


  if dwnload = 'Y'.
     clear clientab. refresh clientab.
     rcount = 0.
  else.
     if appd = space.
   open dataset file for output in text mode ENCODING UTF-8.
     else.
    open dataset file for appending in text mode ENCODING UTF-8.
     endif.
     if sy-subrc <> 0.
         rc = 2. exit.
     endif.
  endif.

  loop at datatab.
    clear: tablen, offset, output.
    do.
      assign component sy-index of
         structure datatab to <f>.
      if sy-subrc <> 0. exit. endif.
      if sy-index > 1.
         assign delimit(dlength) TO <delim1> CASTING TYPE C.
         delim2 = <delim1>.
         write delim2(dlength) to output+offset(dlength).
         add dlength to offset.
      endif.

      describe field <f> type type1.

      if type1 = 'I' or type1 = 'N'.
          type1 = 'P'.
      endif.

      case type1.
        when 'D'.
          if <f> = '00000000'.
             <f> = ' '.
          else.
             move <f> to time1.
             assign time1 to <f>.
          endif.
        when 'F'.
          if <f> = '0.0'.
            temp = '0.0'.
          else.
             write <f> to temp exponent 0.
          endif.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
        when 'P'.
          if <f> < 0.
             write '-' to output+offset(1).
             add 1 to offset.
             <f> = <f> * ( -1 ).
          endif.
          move <f> to temp.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
      endcase.

      sy-fdpos = strlen( <f> ).

      tablen = offset + sy-fdpos.
      if tablen > maxlen.
         rc = 3. exit.
      endif.
      write <f> to output+offset(sy-fdpos).
      add sy-fdpos to offset.
    enddo.

    if dwnload = 'Y'.
       clientab-output = output.
       append clientab.
       rcount = rcount + 1.
       if rcount >= 50.
          SY-BATCH = SPACE.
          CALL FUNCTION 'GUI_DOWNLOAD'
            EXPORTING
              FILENAME = l_filename
              FILETYPE = 'ASC'
              CODEPAGE = '4110'
              APPEND   = appd
              WRITE_FIELD_SEPARATOR = 'X'
*            IMPORTING
*              FILELENGTH =
            TABLES
              DATA_TAB = clientab
            EXCEPTIONS
              OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
          clear clientab. refresh clientab.
          rcount = 0. appd = 'A'.
       endif.
    else.
       transfer output to file.
    endif.
  endloop.

  if dwnload = 'Y'.
       SY-BATCH = SPACE.
       CALL FUNCTION 'GUI_DOWNLOAD'
         EXPORTING
           FILENAME = l_filename
           FILETYPE = 'ASC'
              CODEPAGE = '4110'
           APPEND   = appd
           WRITE_FIELD_SEPARATOR = 'X'
*         IMPORTING
*           FILELENGTH =
         TABLES
           DATA_TAB = clientab
         EXCEPTIONS
           OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
  else.
       close dataset file.
  endif.
endform.

FORM CONNECT_RFCDEST_TO_PROGID.
 INCLUDE rfctypes.

 DATA: len     type i,
       R3NAME(4),
       SYSTNR(2),
       uid     LIKE SYS_UID,
       options LIKE RFCOPT,
       isunicode  TYPE n.

 DATA: NTOTAL     LIKE GWY_STRUCT-NOREG,
       GWY_GWHOST LIKE GWY_STRUCT-GWHOST,
       GWY_GWSERV LIKE GWY_STRUCT-GWSERV,
       GWY_TPNAME LIKE GWY_SYSTEM-TPNAME.

 TABLES: RFCSI.

* Check program ID
 IF P_PROGID = SPACE.							
    RAISE INVALID_PROGRAM_ID.
 ENDIF.

* determine if the RFC destination authority
  CALL FUNCTION 'RFC_READ_TCPIP_DESTINATION'
       EXPORTING destination = P_DEST
                 authority_check = 'X'
  IMPORTING rfcunicode = isunicode.

* Use current gateway if no info exits
 IF P_GWHOST = SPACE OR P_GWSERV = SPACE.
  CALL FUNCTION 'RFC_SYSTEM_INFO'
      IMPORTING
          RFCSI_EXPORT = RFCSI.

  len = strlen( rfcsi-rfcdest ) - 2.
  systnr = rfcsi-rfcdest+len.
  len = len - 1 - 3.
  r3name = rfcsi-rfcdest+len(3).
  len = len - 1.
  options-rfcgwhost = rfcsi-rfcdest(len).
  CONCATENATE 'sapgw' SYSTNR INTO options-rfcgwserv.
 ELSE.
   options-rfcgwhost = P_GWHOST.
   options-rfcgwserv = P_GWSERV.
 ENDIF.

* Parameters for GWY function call
  GWY_GWHOST = OPTIONS-RFCGWHOST.
  GWY_GWSERV = OPTIONS-RFCGWSERV.
  GWY_TPNAME = P_PROGID.

* Check gateway and server program registered
  CALL FUNCTION 'GWY_GET_NO_REG_PROGRAMS'
     EXPORTING
        GWHOST      = GWY_GWHOST
        GWSERV      = GWY_GWSERV
        TPNAME      = GWY_TPNAME
     IMPORTING
        NOREG_TOTAL = NTOTAL
     EXCEPTIONS
        OTHERS      = 1.

  IF sy-subrc NE 0.
     raise CONNECT_TO_GATEWAY_FAILED.
  ENDIF.

  IF NTOTAL = 0.
     raise SERVER_NOT_REGISTERED.
  ENDIF.

  IF NTOTAL GT 1.
     raise DUPLICATE_REG_PROGRAMS.
  ENDIF.

* build new connection to a registered server
  options-rfcexec   = gwy_tpname.
  options-rfcgwhost = gwy_gwhost.
  options-rfcgwserv = gwy_gwserv.
  options-rfchost   = '%%RFCSERVER%%'.
  IF P_SNC_ON = 'X'.
    options-rfcsnc  = 'X'.
  ENDIF.

  CALL 'RFCControl' ID 'CODE' FIELD 'O'
                    ID 'DESTINATION' FIELD P_DEST
                    ID 'TYPE' FIELD rfctype_external_tcp
                    ID 'OPTIONS' FIELD options.

  IF sy-subrc NE 0.
     RAISE CONNECT_TO_REG_SERVER_FAILED.
   ENDIF.

* and set exclusive mode to keep server owned
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
      EXPORTING  destination = P_DEST
                 exclusiv    = 'Y'
      EXCEPTIONS connect_to_reg_server_failed = 1
                 exclusiv_not_supported       = 2.

  IF SY-SUBRC NE 0.
     CASE SY-SUBRC.
          WHEN 1.
              RAISE CONNECT_TO_REG_SERVER_FAILED.
          WHEN 2.
              RAISE EXCLUSIV_NOT_SUPPORTED.
     ENDCASE.
  ENDIF.

ENDFORM.

FORM DISCONNECT_RFCDEST_FROM_PROGID.
* set exclusive mode to E to end the session
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
     EXPORTING
         destination = P_DEST
         exclusiv    = 'E'
     EXCEPTIONS
         connect_to_reg_server_failed = 1				
         exclusiv_not_supported       = 2.
ENDFORM.
