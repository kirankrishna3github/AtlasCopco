*&---------------------------------------------------------------------*
*& Report  ZRIM08                                                      *
*&                                                                     *
*&---------------------------------------------------------------------*
*& This report is an example taken from the SDN-network. It was a result
*& of the following topic: How to create an email of a SAPscript
*& formular                                                            *
*& Some of the elements used are changed to cope with the Atlas-environ*
*&---------------------------------------------------------------------*

REPORT ZRICH_0003.


DATA: ITCPO LIKE ITCPO,
TAB_LINES LIKE SY-TABIX.


* Variables for EMAIL functionality
DATA: MAILDATA LIKE SODOCCHGI1.
DATA: MAILPACK LIKE SOPCKLSTI1 OCCURS 2 WITH HEADER LINE.
DATA: MAILHEAD LIKE SOLISTI1 OCCURS 1 WITH HEADER LINE.
DATA: MAILBIN LIKE SOLISTI1 OCCURS 10 WITH HEADER LINE.
DATA: MAILTXT LIKE SOLISTI1 OCCURS 10 WITH HEADER LINE.
DATA: MAILREC LIKE SOMLREC90 OCCURS 0 WITH HEADER LINE.
DATA: SOLISTI1 LIKE SOLISTI1 OCCURS 0 WITH HEADER LINE.


PERFORM SEND_FORM_VIA_EMAIL.


************************************************************************
* FORM SEND_FORM_VIA_EMAIL *
************************************************************************
FORM SEND_FORM_VIA_EMAIL.

  CLEAR: MAILDATA, MAILTXT, MAILBIN, MAILPACK, MAILHEAD, MAILREC.
  REFRESH: MAILTXT, MAILBIN, MAILPACK, MAILHEAD, MAILREC.

* Creation of the document to be sent File Name
  MAILDATA-OBJ_NAME = 'TEST'.
* Mail Subject
  MAILDATA-OBJ_DESCR = 'Subject'.

* Mail Contents
  MAILTXT-LINE = 'Here is your file'.
  APPEND MAILTXT.

* Prepare Packing List
  PERFORM PREPARE_PACKING_LIST.

* Set recipient - email address here!!!
  MAILREC-RECEIVER = 'rob.imans@be.atlascopco.com'.
  MAILREC-REC_TYPE = 'U'.
  APPEND MAILREC.

* Sending the document
  CALL FUNCTION 'SO_NEW_DOCUMENT_ATT_SEND_API1'
    EXPORTING
      DOCUMENT_DATA              = MAILDATA
      PUT_IN_OUTBOX              = ' '
    TABLES
      PACKING_LIST               = MAILPACK
      OBJECT_HEADER              = MAILHEAD
      CONTENTS_BIN               = MAILBIN
      CONTENTS_TXT               = MAILTXT
      RECEIVERS                  = MAILREC
    EXCEPTIONS
      TOO_MANY_RECEIVERS         = 1
      DOCUMENT_NOT_SENT          = 2
      OPERATION_NO_AUTHORIZATION = 4
      OTHERS                     = 99.

ENDFORM.                    "SEND_FORM_VIA_EMAIL

************************************************************************
* Form PREPARE_PACKING_LIST
************************************************************************
FORM PREPARE_PACKING_LIST.

  CLEAR: MAILPACK, MAILBIN, MAILHEAD.
  REFRESH: MAILPACK, MAILBIN, MAILHEAD.

  DESCRIBE TABLE MAILTXT LINES TAB_LINES.
  READ TABLE MAILTXT INDEX TAB_LINES.
  MAILDATA-DOC_SIZE = ( TAB_LINES - 1 ) * 255 + STRLEN( MAILTXT ).

* Creation of the entry for the compressed document
  CLEAR MAILPACK-TRANSF_BIN.
  MAILPACK-HEAD_START = 1.
  MAILPACK-HEAD_NUM = 0.
  MAILPACK-BODY_START = 1.
  MAILPACK-BODY_NUM = TAB_LINES.
  MAILPACK-DOC_TYPE = 'RAW'.
  APPEND MAILPACK.

* Creation of the document attachment
* This form gets the OTF code from the SAPscript form.
* If you already have your OTF code, I believe that you may
* be able to skip this form. just do the following code, looping thru
* your SOLISTI1 and updating MAILBIN.
  PERFORM GET_OTF_CODE.

  LOOP AT SOLISTI1.
    MOVE-CORRESPONDING SOLISTI1 TO MAILBIN.
    APPEND MAILBIN.
  ENDLOOP.

  DESCRIBE TABLE MAILBIN LINES TAB_LINES.
  MAILHEAD = 'TEST.OTF'.
  APPEND MAILHEAD.

** Creation of the entry for the compressed attachment
  MAILPACK-TRANSF_BIN = 'X'.
  MAILPACK-HEAD_START = 1.
  MAILPACK-HEAD_NUM = 1.
  MAILPACK-BODY_START = 1.
  MAILPACK-BODY_NUM = TAB_LINES.
  MAILPACK-DOC_TYPE = 'OTF'.
  MAILPACK-OBJ_NAME = 'TEST'.
  MAILPACK-OBJ_DESCR = 'Subject'.
  MAILPACK-DOC_SIZE = TAB_LINES * 255.
  APPEND MAILPACK.

ENDFORM.                    "PREPARE_PACKING_LIST

************************************************************************
* Form GET_OTF_CODE
************************************************************************
FORM GET_OTF_CODE.

  DATA: BEGIN OF OTF OCCURS 0.
          INCLUDE STRUCTURE ITCOO .
  DATA: END OF OTF.

  DATA: ITCPO LIKE ITCPO.
  DATA: ITCPP LIKE ITCPP.

  CLEAR ITCPO.
  ITCPO-TDGETOTF = 'X'.

* Start writing OTF code
  CALL FUNCTION 'OPEN_FORM'
    EXPORTING
      FORM     = 'ZQUOTATION_GBAA'
      LANGUAGE = SY-LANGU
      OPTIONS  = ITCPO
      DIALOG   = ' '
    EXCEPTIONS
      OTHERS   = 1.

  CALL FUNCTION 'START_FORM'
    EXCEPTIONS
      ERROR_MESSAGE = 01
      OTHERS        = 02.

  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      WINDOW        = 'MAIN'
    EXCEPTIONS
      ERROR_MESSAGE = 01
      OTHERS        = 02.

* Close up Form and get OTF code
  CALL FUNCTION 'END_FORM'
    EXCEPTIONS
      ERROR_MESSAGE = 01
      OTHERS        = 02.

  MOVE-CORRESPONDING ITCPO TO ITCPP.

  CALL FUNCTION 'CLOSE_FORM'
    IMPORTING
      RESULT  = ITCPP
    TABLES
      OTFDATA = OTF
    EXCEPTIONS
      OTHERS  = 1.

* Move OTF code to structure SOLI form email
  CLEAR SOLISTI1. REFRESH SOLISTI1.
  LOOP AT OTF.
    SOLISTI1-LINE = OTF.
    APPEND SOLISTI1.
  ENDLOOP.

ENDFORM.                    "GET_OTF_CODE
