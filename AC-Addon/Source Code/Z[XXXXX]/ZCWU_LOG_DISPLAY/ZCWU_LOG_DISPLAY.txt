*&---------------------------------------------------------------------*
*& Report  ZCWU_LOG_DISPLAY
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  ZCWU_LOG_DISPLAY.
TYPE-POOLS: SLIS.
DATA: lt_T001 TYPE STANDARD TABLE OF T001,
      GV_MSG TYPE STRING,
      gv_handle TYPE balloghndl.
PARAMETERS: p_mes TYPE char100.

START-OF-SELECTION.
*.. Initialization
  PERFORM initialization.
do 40 TIMES.
MESSAGE id 'IW'  TYPE 'E' NUMBER SY-INDEX  INTO gV_MSG.
PERFORM add_message_to_log.
ENDDO.

CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
  EXPORTING
*   I_INTERFACE_CHECK                 = ' '
*   I_BYPASSING_BUFFER                = ' '
*   I_BUFFER_ACTIVE                   = ' '
   I_CALLBACK_PROGRAM                =  sy-cprog
   I_CALLBACK_PF_STATUS_SET          = 'SET_STATUS'
   I_CALLBACK_USER_COMMAND           = 'USER_COMMAND_EQUI'
*   I_CALLBACK_TOP_OF_PAGE            = ' '
*   I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*   I_CALLBACK_HTML_END_OF_LIST       = ' '
   I_STRUCTURE_NAME                  = 'T001'
*   I_BACKGROUND_ID                   = ' '
*   I_GRID_TITLE                      =
*   I_GRID_SETTINGS                   =
*   IS_LAYOUT                         =
*   IT_FIELDCAT                       =
*   IT_EXCLUDING                      =
*   IT_SPECIAL_GROUPS                 =
*   IT_SORT                           =
*   IT_FILTER                         =
*   IS_SEL_HIDE                       =
*   I_DEFAULT                         = 'X'
*   I_SAVE                            = ' '
*   IS_VARIANT                        =
*   IT_EVENTS                         =
*   IT_EVENT_EXIT                     =
*   IS_PRINT                          =
*   IS_REPREP_ID                      =
*   I_SCREEN_START_COLUMN             = 0
*   I_SCREEN_START_LINE               = 0
*   I_SCREEN_END_COLUMN               = 0
*   I_SCREEN_END_LINE                 = 0
*   I_HTML_HEIGHT_TOP                 = 0
*   I_HTML_HEIGHT_END                 = 0
*   IT_ALV_GRAPHICS                   =
*   IT_HYPERLINK                      =
*   IT_ADD_FIELDCAT                   =
*   IT_EXCEPT_QINFO                   =
*   IR_SALV_FULLSCREEN_ADAPTER        =
* IMPORTING
*   E_EXIT_CAUSED_BY_CALLER           =
*   ES_EXIT_CAUSED_BY_USER            =
  TABLES
    t_outtab                          = lt_T001
  EXCEPTIONS
    PROGRAM_ERROR                     = 1
    OTHERS                            = 2
          .
IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.

*.. Save application log
  PERFORM save_application_log.

FORM SET_STATUS USING rt_extab TYPE slis_t_extab.
  SET PF-STATUS 'YAM_EQUI'.
ENDFORM.


FORM user_command_equi USING r_ucomm LIKE sy-ucomm
                        rs_selfield TYPE slis_selfield.

  DATA: lv_answer TYPE char1,
        lv_value_field TYPE zvalue_field.

  CASE r_ucomm.

    WHEN 'LOG'.
      PERFORM display_log.
*    WHEN 'AUTO'.
*      lv_value_field = p_tplnr(2).
*      CALL FUNCTION 'YSE_CHECK_DEV_MATRIX'
*        EXPORTING
*          object      = 'YAM_AUTO_INSTALL_EQUI'
*          checkfield  = ''
*          value_field = lv_value_field
*          counter     = 0
*        EXCEPTIONS
*          active      = 1
*          passive     = 2
*          not_found   = 3
*          OTHERS      = 4.
*
** If dev matrix check was succesfull so far, do next check
*      IF sy-subrc EQ 1.
*        CALL FUNCTION 'POPUP_TO_CONFIRM'
*          EXPORTING
*            text_question         = text-t01
*            display_cancel_button = ''
*            start_column          = 35
*            start_row             = 10
*          IMPORTING
*            answer                = lv_answer.
*        IF lv_answer EQ '1' .
*          READ TABLE gt_equi INDEX rs_selfield-tabindex.
*          IF sy-subrc = 0.
*            gt_equi-selkz = gc_charx.
*            MODIFY gt_equi INDEX rs_selfield-tabindex.
*            MOVE rs_selfield-tabindex TO equi_idx.
*          ENDIF.
*          LOOP AT gt_equi.
*            MOVE sy-tabix TO equi_idx.
*            PERFORM launch_auto_creation.
*          ENDLOOP.
*        ENDIF.
*      ELSE.
*          MESSAGE I016 with lv_value_field.
*      ENDIF.
    WHEN 'POSTAL'.
*      PERFORM maintain_postal_codes.
  ENDCASE.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DISPLAY_LOG .
*.. Local variables
  DATA: ls_prof TYPE bal_s_prof.

*.. Reset log indicator once displayed
*  CLEAR gv_log.

*.. Get a prepared profile
  CALL FUNCTION 'BAL_DSP_PROFILE_POPUP_GET'
    IMPORTING
      e_s_display_profile = ls_prof
    EXCEPTIONS
      OTHERS              = 1.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*.. Use grid for display if wanted
  ls_prof-use_grid = 'X'.
  ls_prof-start_row = 1.
  ls_prof-end_row = 25.
  CLEAR ls_prof-pop_adjst.

*.. When you use also other ALV lists in your report,
*.. please specify a handle to distinguish between the display
*.. variants of these different lists, e.g:
  ls_prof-disvariant-handle = 'LOG'.

*.. Call display function module
  CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
    EXPORTING
      i_s_display_profile = ls_prof
    EXCEPTIONS
      OTHERS              = 1.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
ENDFORM.                    " DISPLAY_LOG
*&---------------------------------------------------------------------*
*&      Form  ADD_MESSAGE_TO_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ADD_MESSAGE_TO_LOG .
*.. Local variables
  DATA: ls_msg TYPE bal_s_msg.

  MOVE-CORRESPONDING syst TO ls_msg.
  CALL FUNCTION 'BAL_LOG_MSG_ADD'
    EXPORTING
*     I_LOG_HANDLE              =
      i_s_msg                   = ls_msg
*   IMPORTING
*     E_S_MSG_HANDLE            =
*     E_MSG_WAS_LOGGED          =
*     E_MSG_WAS_DISPLAYED       =
    EXCEPTIONS
      log_not_found             = 1
      msg_inconsistent          = 2
      log_is_full               = 3
      OTHERS                    = 4
            .
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " ADD_MESSAGE_TO_LOG


FORM initialization .

*.. Local variables
  DATA: ls_log    TYPE bal_s_log.

  ls_log-object = 'YAM_AUTO_INST_EQUI'.

*.. Create application log
  CALL FUNCTION 'BAL_LOG_CREATE'
    EXPORTING
      i_s_log                 = ls_log
    IMPORTING
      e_log_handle            = gv_handle
    EXCEPTIONS
      log_header_inconsistent = 1
      OTHERS                  = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " initialization
*&---------------------------------------------------------------------*
*&      Form  SAVE_APPLICATION_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SAVE_APPLICATION_LOG .
*.. Local variables
  DATA: lt_handle TYPE bal_t_logh.

  APPEND gv_handle TO lt_handle.

  CALL FUNCTION 'BAL_DB_SAVE'
    EXPORTING
*     I_CLIENT               = SY-MANDT
      i_in_update_task       = 'X'
      i_t_log_handle         = lt_handle
*   IMPORTING
*     E_NEW_LOGNUMBERS       =
    EXCEPTIONS
      log_not_found          = 1
      save_not_allowed       = 2
      numbering_error        = 3
      OTHERS                 = 4
            .
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  COMMIT WORK.
ENDFORM.                    " SAVE_APPLICATION_LOG
