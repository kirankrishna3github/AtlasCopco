**&---------------------------------------------------------------------*
**& Report  ZSIRI_TEST
**&
**&---------------------------------------------------------------------*
**&
**&
**&---------------------------------------------------------------------*
*
REPORT  zsiri_test.
**
***--------------------------------------------------------*
*"  Data retrieval related declarations
**--------------------------------------------------------*
*TYPES:
*      BEGIN OF t_emp_dat,
*        pernr TYPE pa0001-pernr,
*        persg TYPE pa0001-persg,
*        persk TYPE pa0001-persk,
*        plans TYPE pa0001-plans,
*        stell TYPE pa0001-stell,
**      END OF t_emp_dat.
**DATA:
**      w_emp_data TYPE t_emp_dat.
**DATA:
**      i_emp_data TYPE STANDARD TABLE OF t_emp_dat.
***--------------------------------------------------------*
**"  Mail related declarations
***--------------------------------------------------------*
**"Variables
**DATA :
**    g_sent_to_all   TYPE sonv-flag,
**    g_tab_lines     TYPE i.
**"Types
**TYPES:
**    t_document_data  TYPE  sodocchgi1,
**    t_packing_list   TYPE  sopcklsti1,
**    t_attachment     TYPE  solisti1,
**    t_body_msg       TYPE  solisti1,
**    t_receivers      TYPE  somlreci1.
**"Workareas
**DATA :
**    w_document_data  TYPE  t_document_data,
**    w_packing_list   TYPE  t_packing_list,
**    w_attachment     TYPE  t_attachment,
**    w_body_msg       TYPE  t_body_msg,
**    w_receivers      TYPE  t_receivers.
**"Internal Tables
**DATA :
**    i_document_data  TYPE STANDARD TABLE OF t_document_data,
**    i_packing_list   TYPE STANDARD TABLE OF t_packing_list,
**    i_attachment     TYPE STANDARD TABLE OF t_attachment,
**    i_body_msg       TYPE STANDARD TABLE OF t_body_msg,
**    i_receivers      TYPE STANDARD TABLE OF t_receivers.
**
***--------------------------------------------------------*
**"Start-of-selection.
***--------------------------------------------------------*
**START-OF-SELECTION.
**  PERFORM get_data.
**  PERFORM build_xls_data_table.
**
***--------------------------------------------------------*
**  "End-of-selection.
***--------------------------------------------------------*
**END-OF-SELECTION.
**  PERFORM send_mail.
**
***&--------------------------------------------------------*
**  "Form  get_data from PA0001
***&--------------------------------------------------------*
**FORM get_data.
**
**  SELECT pernr
**  persg
**  persk
**  plans
**  stell
**  FROM pa0001
**  INTO CORRESPONDING FIELDS OF TABLE i_emp_data
**  UP TO 4 ROWS.
**
**ENDFORM.                    " get_data
***&---------------------------------------------------------*
**"Form  build_xls_data_table
***&---------------------------------------------------------*
**FORM build_xls_data_table.
**  "If you have Unicode check active in program attributes then
**  "you will need to declare constants as follows.
**  CLASS cl_abap_char_utilities DEFINITION LOAD.
**  CONSTANTS:
**  con_tab  TYPE c VALUE cl_abap_char_utilities=>horizontal_tab,
**  con_cret TYPE c VALUE cl_abap_char_utilities=>cr_lf.
**
**  CONCATENATE 'PERNR' 'PERSG' 'PERSK' 'PLANS' 'STELL'
**  INTO  w_attachment
**  SEPARATED BY  con_tab.
**
**  CONCATENATE con_cret
**  w_attachment
**  INTO w_attachment.
**
**  APPEND w_attachment TO i_attachment.
**  CLEAR  w_attachment.
**
**  LOOP AT i_emp_data INTO w_emp_data.
**
**    CONCATENATE w_emp_data-pernr
**    w_emp_data-persg
**    w_emp_data-persk
**    w_emp_data-plans
**    w_emp_data-stell
**    INTO w_attachment
**    SEPARATED BY con_tab.
**
**    CONCATENATE con_cret w_attachment
**    INTO w_attachment.
**
**    APPEND w_attachment TO i_attachment.
**    CLEAR  w_attachment.
**  ENDLOOP.
**
**ENDFORM.                    "build_xls_data_table
***&----------------------------------------------------------*
**"Form  send_mail
**"---------------
**"PACKING LIST
**"This table requires information about how the data in the
**"tables OBJECT_HEADER, CONTENTS_BIN and CONTENTS_TXT are to
**"be distributed to the documents and its attachments.The first
**"row is for the document, the following rows are each for one
**"attachment.
***&-----------------------------------------------------------*
**FORM send_mail .
**
**  "Subject of the mail.
**  w_document_data-obj_name  = 'MAIL_TO_HEAD'.
**  w_document_data-obj_descr = 'Regarding Mail Program by SAP ABAP'.
**
**  "Body of the mail
**  PERFORM build_body_of_mail
**  USING:space,
**  'Hi,',
**  'I am fine. How are you? How are you doing ? ',
**  'This program has been created to send simple mail',
**  'with Subject,Body with Address of the sender. ',
**  'Regards,',
**  'Blog Admin,',
**  'SAP HR Technical Consultant.'.
**
**  "Write Packing List for Body
**  DESCRIBE TABLE i_body_msg LINES g_tab_lines.
**  w_packing_list-head_start = 1.
**  w_packing_list-head_num   = 0.
**  w_packing_list-body_start = 1.
**  w_packing_list-body_num   = g_tab_lines.
**  w_packing_list-doc_type   = 'RAW'.
**  APPEND w_packing_list TO i_packing_list.
**  CLEAR  w_packing_list.
**
**  "Write Packing List for Attachment
**  w_packing_list-transf_bin = space.
**  w_packing_list-head_start = 1.
**  w_packing_list-head_num   = 1.
**  w_packing_list-body_start = g_tab_lines + 1.
**  DESCRIBE TABLE i_attachment LINES w_packing_list-body_num.
**  w_packing_list-doc_type   = 'XXL'.
**  w_packing_list-obj_descr  = 'Excell Attachment'.
**  w_packing_list-obj_name   = 'XLS_ATTACHMENT'.
**  w_packing_list-doc_size   = w_packing_list-body_num * 255.
**  APPEND w_packing_list TO i_packing_list.
**  CLEAR  w_packing_list.
**
**  APPEND LINES OF i_attachment TO i_body_msg.
**  "Fill the document data and get size of attachment
**  w_document_data-obj_langu  = sy-langu.
**  READ TABLE i_body_msg INTO w_body_msg INDEX g_tab_lines.
**  w_document_data-doc_size = ( g_tab_lines - 1 ) * 255 + strlen( w_body_msg ).
**
**  "Receivers List.
**  w_receivers-rec_type   = 'U'.  "Internet address
**  w_receivers-receiver   = 'shireesha.depala@external.atlascopco.com'.
**  w_receivers-com_type   = 'INT'.
**  w_receivers-notif_del  = 'X'.
**  w_receivers-notif_ndel = 'X'.
**  APPEND w_receivers TO i_receivers .
**  CLEAR:w_receivers.
**
**  "Function module to send mail to Recipients
**  CALL FUNCTION 'SO_NEW_DOCUMENT_ATT_SEND_API1'
**    EXPORTING
**      document_data              = w_document_data
**      put_in_outbox              = 'X'
**      commit_work                = 'X'
**    IMPORTING
**      sent_to_all                = g_sent_to_all
**    TABLES
**      packing_list               = i_packing_list
**      contents_txt               = i_body_msg
**      receivers                  = i_receivers
**    EXCEPTIONS
**      too_many_receivers         = 1
**      document_not_sent          = 2
**      document_type_not_exist    = 3
**      operation_no_authorization = 4
**      parameter_error            = 5
**      x_error                    = 6
**      enqueue_error              = 7
**      OTHERS                     = 8.
**
**  IF sy-subrc = 0 .
**    MESSAGE i303(me) WITH 'Mail has been Successfully Sent.'.
**  ELSE.
**    WAIT UP TO 2 SECONDS.
**    "This program starts the SAPconnect send process.
**    SUBMIT rsconn01 WITH mode = 'INT'
**    WITH output = 'X'
**    AND RETURN.
**  ENDIF.
**
**ENDFORM.                    " send_mail
***&-----------------------------------------------------------*
**"      Form  build_body_of_mail
***&-----------------------------------------------------------*
**FORM build_body_of_mail  USING l_message.
**
**  w_body_msg = l_message.
**  APPEND w_body_msg TO i_body_msg.
**  CLEAR  w_body_msg.
**ENDFORM.                    " build_body_of_mail
*
**DATA: objtxt like solisti1 occurs 10 with header line.
**DATA: objpack like sopcklsti1 occurs 2 with header line.
**DATA: objhead like solisti1 occurs 1 with header line.
**DATA: objbin like solisti1 occurs 0 with header line.
**DATA: reclist like somlreci1 occurs 5 with header line.
**DATA: doc_chng like sodocchgi1.
**DATA: tab_lines like sy-tabix.,
**TYPES:
**      BEGIN OF t_emp_dat,
**        pernr TYPE pa0001-pernr,
**        aka TYPE   pa0001-persg,
**        END OF t_emp_dat.
**DATA:
**      w_emp_data TYPE t_emp_dat.
**DATA:
**      intabb TYPE STANDARD TABLE OF t_emp_dat.
**
**
*** Creation of the document to be sent
**doc_chng-obj_name = 'ANGEBOT'.
**doc_chng-obj_DESCR = 'BG test description'.
**
**objtxt = 'Please see attached document containing'.
**append objtxt.
**objtxt = 'AKA Details.'.
**append objtxt.
**objtxt = ' Regards,'.
**append objtxt.
**objtxt = ' SAP.'.
**append objtxt.
**
**Describe table objtxt lines tab_lines.
**Read table objtxt index tab_lines.
**Doc_chng-doc_size = ( TAB_LINES - 1 ) * 255 + STRLEN( OBJTXT ).
**
*** Creation of the entry for the compressed document
**clear objpack-transf_bin.
**objpack-head_start = 1.
**objpack-head_num = 0.
**objpack-body_start = 1.
**objpack-body_num = tab_lines.
**objpack-doc_type = 'RAW'.
**append objpack.
**
*** Creation of the document attachment
*** Assume that the data in OBJBIN is in TXT format
**LOOP AT Intabb.
**CONCATENATE INTABB-pernr INTABB-AKA INTO OBJBIN.
**Append objBin.
**endloop.
**
**Describe table objbin lines tab_lines.
**Objhead = 'aka.txt'. Append objhead.
**
*** Creation of the entry for the compressed attachment
**clear objpack-transf_bin.
**objpack-transf_bin = 'X'.
**objpack-head_start = 1.
**objpack-head_num = 1.
**objpack-body_start = 1.
**objpack-body_num = tab_lines.
**objpack-doc_type = 'TXT'.
**objpack-obj_name = 'ANLAGE'.
**objpack-obj_descr = 'Document'.
**objpack-doc_size = tab_lines * 255.
**append objpack.
**
**reclist-receiver = p_email.
**reclist-rec_type = 'U'.
**append reclist.
**
*** Sending The Document
**call function 'SO_NEW_DOCUMENT_ATT_SEND_API1'
**exporting
**Document_data = doc_chng
**put_in_outbox = 'X'
**Tables
**Packing_list = objpack
**object_header = objhead
**contents_bin = objbin
**contents_txt = objtxt
**Receivers = reclist
**Exceptions
**too_many_receivers = 1
**Document_not_sent = 2
**Operation_no_authorization = 4
**others = 99.
**endform.
*
************************Email Functionality**************** July 25th, 2014
*************************************************************************
***                           Pattern ID : 001                           *
***                 Begin of Pattern: E M A I L   S E N D                *
*************************************************************************
**
******************** DATA DECLEARATION **********************************
**CONSTANTS: c_raw      TYPE char03 VALUE 'RAW'. " Raw of type CHAR03
**
**DATA: g_mlrec         TYPE so_obj_nam,              " Name of document, folder or distribution list
**      g_sent_to_all   TYPE os_boolean,              " Boolean
**      g_email         TYPE adr6-smtp_addr,          " E-Mail Address
**      g_subject       TYPE so_obj_des,              " Short description of contents
**      g_text          TYPE bcsy_text,
**      g_send_request  TYPE REF TO cl_bcs,           " Business Communication Service
**      g_bcs_exception TYPE REF TO cx_bcs,           " BCS: General Exceptions
**      g_recipient     TYPE REF TO if_recipient_bcs, " Interface of Recipient Object in BCS
**      g_sender        TYPE REF TO cl_sapuser_bcs,   " BCS: Represents an SAP User
**      g_document      TYPE REF TO cl_document_bcs,  " Wrapper Class for Office Documents
**      g_sap           TYPE syuname.                 " User Name
**
*******Assign Subject line
**g_subject = 'hello'(a01).
**
**TRY.
*******Create send request
**  g_send_request = cl_bcs=>create_persistent( ).
**
**
*******Sendar name population
**  g_sender = cl_sapuser_bcs=>create( sy-uname ).
**  CALL METHOD g_send_request->set_sender
**    EXPORTING
**      i_sender = g_sender.
**
*******Recipient Population
*********Recipient with Internet email address
**  g_email = 'shireesha.depala@external.atlascopco.com'.
**  g_recipient = cl_cam_address_bcs=>create_internet_address( g_email ).
**
*******Add recipient to send request
**  CALL METHOD g_send_request->add_recipient
**        EXPORTING
**  i_recipient = g_recipient
***    i_express    =
***    i_copy       =
***    i_blind_copy =
***    i_no_forward =
**  .
**
******************************************************************
**********Please repeat "Recipient population" and "Add recipient*
**********to send request" for multiple Recipient address*********
******************************************************************
**
*******Email Body
**  APPEND 'Please find the attachement' TO g_text.
**
**  g_document = cl_document_bcs=>create_document(
**  i_type    = c_raw
**  i_text    = g_text
**  i_subject = g_subject ).
**
*******Attachment addition in mail
******************************************************************
*******Please uncomment below code for sending an attachment******
******************************************************************
***    CALL METHOD g_document->add_attachment.
***    i_attachment_type =   'TXT'.  " Add extension of file name
***    i_attachment_subject =  'Accounts Payable'." Add Attachment subject
***    i_att_content_text  =   it_final." Pass attachment content through table in text format
******** END of attachment addition*******************************
**
*******Processing for document send
**  CALL METHOD g_send_request->set_document( g_document ).
**  CALL METHOD g_send_request->send(
**  EXPORTING
**    i_with_error_screen = 'X'
**  RECEIVING
**    result              = g_sent_to_all ).
**
**  IF g_sent_to_all = 'X'.
******* Commit work for sending the mail
**    COMMIT WORK.
**  ENDIF. " IF g_sent_to_all = 'X'
*** CATCH cx_bcs INTO g_bcs_exception.
**ENDTRY.
*************************************************************************
***                           Pattern ID : 001                           *
***                  End of Pattern: E M A I L   S E N D                 *
*************************************************************************
*
*
**DATA:
**    BEGIN OF IT_T100 OCCURS 0,
**      ARBGB TYPE T100-ARBGB,
**      MSGNR TYPE T100-MSGNR,
**      TEXT TYPE T100-TEXT,
**    END OF IT_T100.
**"Variables
**DATA :
**    G_SENT_TO_ALL   TYPE SONV-FLAG,
**    G_TAB_LINES     TYPE I,
**    G_ATTACHMENT_LINES TYPE I.
**"Types
**TYPES:
**    T_DOCUMENT_DATA  TYPE  SODOCCHGI1,
**    T_PACKING_LIST   TYPE  SOPCKLSTI1,
**    T_ATTACHMENT     TYPE  SOLISTI1,
**    T_BODY_MSG       TYPE  SOLISTI1,
**    T_RECEIVERS      TYPE  SOMLRECI1.
**"Workareas
**DATA :
**    W_DOCUMENT_DATA  TYPE  T_DOCUMENT_DATA,
**    W_PACKING_LIST   TYPE  T_PACKING_LIST,
**    W_ATTACHMENT     TYPE  T_ATTACHMENT,
**    W_BODY_MSG       TYPE  T_BODY_MSG,
**    W_RECEIVERS      TYPE  T_RECEIVERS.
**"Internal Tables
**DATA :
**    I_DOCUMENT_DATA  TYPE STANDARD TABLE OF T_DOCUMENT_DATA,
**    I_PACKING_LIST   TYPE STANDARD TABLE OF T_PACKING_LIST,
**    I_ATTACHMENT     TYPE STANDARD TABLE OF T_ATTACHMENT,
**    I_BODY_MSG       TYPE STANDARD TABLE OF T_BODY_MSG,
**    I_RECEIVERS      TYPE STANDARD TABLE OF T_RECEIVERS.
**PARAMETERS:P_MAIL(99) TYPE C OBLIGATORY.
**
**START-OF-SELECTION.
**  SELECT * FROM T100 INTO CORRESPONDING FIELDS OF TABLE IT_T100 UP TO 20
**ROWS WHERE SPRSL = SY-LANGU.
**  CLASS CL_ABAP_CHAR_UTILITIES DEFINITION LOAD.
**  CONSTANTS:
**            CON_TAB  TYPE C VALUE CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB,
**            CON_CRET(2)        TYPE C VALUE CL_ABAP_CHAR_UTILITIES=>CR_LF.
**  "Header data
**  CONCATENATE 'ARBGB' 'MSGNR' 'TEXT'  INTO  W_ATTACHMENT SEPARATED BY
**CON_TAB.
**  APPEND W_ATTACHMENT TO I_ATTACHMENT.
**
**  CLEAR  W_ATTACHMENT.
**  LOOP AT IT_T100.
**    CONCATENATE IT_T100-ARBGB IT_T100-MSGNR IT_T100-TEXT INTO W_ATTACHMENT
**SEPARATED BY CON_TAB.
**    CONCATENATE CON_CRET W_ATTACHMENT INTO W_ATTACHMENT.
**    APPEND W_ATTACHMENT TO I_ATTACHMENT.
**    CLEAR  W_ATTACHMENT.
**  ENDLOOP.
**
**  "Subject of the Mail.
**  W_DOCUMENT_DATA-OBJ_NAME  = 'MAI_TO_HEAD'.
**  W_DOCUMENT_DATA-OBJ_DESCR = 'Regarding MAI Program by SAP ABAP'.
**  "Body of the MAI
**  W_BODY_MSG = 'Hi,'.
**  APPEND W_BODY_MSG TO I_BODY_MSG.
**  CLEAR  W_BODY_MSG.
**
**  W_BODY_MSG = 'This is body of the mail.'.
**  APPEND W_BODY_MSG TO I_BODY_MSG.
**  CLEAR  W_BODY_MSG.
**
**  "Write Packing List for Body
**  DESCRIBE TABLE I_BODY_MSG LINES G_TAB_LINES.
**  W_PACKING_LIST-HEAD_START = 1.
**  W_PACKING_LIST-HEAD_NUM   = 1.
**  W_PACKING_LIST-BODY_START = 1.
**  W_PACKING_LIST-BODY_NUM   = G_TAB_LINES.
**  W_PACKING_LIST-DOC_TYPE   = 'RAW'.
**  APPEND W_PACKING_LIST TO I_PACKING_LIST.
**  CLEAR  W_PACKING_LIST.
**
**  APPEND LINES OF I_ATTACHMENT TO I_BODY_MSG.
**  "Write Packing List for Attachment
***   w_packing_list-transf_bin = 'X'.
**  W_PACKING_LIST-HEAD_START = 2.
**  W_PACKING_LIST-HEAD_NUM   = 1.
**  W_PACKING_LIST-BODY_START = G_TAB_LINES + 1.
**  DATA LINES TYPE I.
**  DESCRIBE TABLE I_ATTACHMENT LINES LINES.
**  W_PACKING_LIST-BODY_NUM = LINES.
**  W_PACKING_LIST-DOC_TYPE   = 'TXT'.
**  W_PACKING_LIST-OBJ_DESCR  = 'TEXT Attachment'.
**  W_PACKING_LIST-OBJ_NAME   = 'TXT_ATTACHMENT'.
**  W_PACKING_LIST-DOC_SIZE   = W_PACKING_LIST-BODY_NUM * 255.
**  APPEND W_PACKING_LIST TO I_PACKING_LIST.
**  CLEAR  W_PACKING_LIST.
**
**  "Fill the document data and get size of attachment
**  W_DOCUMENT_DATA-OBJ_LANGU  = SY-LANGU.
**  READ TABLE I_BODY_MSG INTO W_BODY_MSG INDEX G_ATTACHMENT_LINES.
**  W_DOCUMENT_DATA-DOC_SIZE = ( G_ATTACHMENT_LINES - 1 ) * 255 + STRLEN(
**W_BODY_MSG ).
**  "Receivers List.
**  W_RECEIVERS-REC_TYPE   = 'U'.  "Internet address
**  W_RECEIVERS-RECEIVER   = P_MAIL.
**  W_RECEIVERS-COM_TYPE   = 'INT'.
**  W_RECEIVERS-NOTIF_DEL  = 'X'.
**  W_RECEIVERS-NOTIF_NDEL = 'X'.
**  APPEND W_RECEIVERS TO I_RECEIVERS .
**  CLEAR:W_RECEIVERS.
**
**  "Function module to send MAI to Recipients
**  CALL FUNCTION 'SO_NEW_DOCUMENT_ATT_SEND_API1'
**    EXPORTING
**      DOCUMENT_DATA              = W_DOCUMENT_DATA
**      PUT_IN_OUTBOX              = 'X'
**      COMMIT_WORK                = 'X'
**    IMPORTING
**      SENT_TO_ALL                = G_SENT_TO_ALL
**    TABLES
**      PACKING_LIST               = I_PACKING_LIST
**      CONTENTS_TXT               = I_BODY_MSG
**      RECEIVERS                  = I_RECEIVERS
**    EXCEPTIONS
**      TOO_MANY_RECEIVERS         = 1
**      DOCUMENT_NOT_SENT          = 2
**      DOCUMENT_TYPE_NOT_EXIST    = 3
**      OPERATION_NO_AUTHORIZATION = 4
**      PARAMETER_ERROR            = 5
**      X_ERROR                    = 6
**      ENQUEUE_ERROR              = 7
**      OTHERS                     = 8.
**
**  IF SY-SUBRC = 0 .
**    MESSAGE I303(ME) WITH 'Mail has been Successfully Sent.'.
**  ELSE.
**    WAIT UP TO 2 SECONDS.
**    "This program starts the SAPconnect send process.
**    SUBMIT RSCONN01 WITH MODE = 'INT' WITH OUTPUT = 'X' AND RETURN.
**  ENDIF.
*
**&---------------------------------------------------------------------*
**& Report  YTEST_RDAS1
**&
**&---------------------------------------------------------------------*
**&
**&
**&---------------------------------------------------------------------*
***
**REPORT ZSIRI_TEST.
***
**DATA: t_eordu            LIKE eordu OCCURS 0 WITH HEADER LINE,
**DATA: t_eord             LIKE eord OCCURS 0 WITH HEADER LINE.
**
**
**t_eordu-mandt = sy-mandt.
**t_eordu-matnr = '000000004700249994'.
**t_eordu-werks = 'RU70'.
**t_eordu-lifnr = '0102000110'.
**t_eordu-notkz = 'X'.
***t_eordu-fresw = ''.
**t_eordu-FLIFN = ''.
**t_eordu-EKORG  = 'RU04'.
***t_eordu-kz = 'I'.
**t_eordu-bdatu = '99991231'.
**t_eordu-autet = '1'.
***t_eordu-erdat = sy-datum.
***t_eordu-vdatu = sy-datum.
**APPEND t_eordu.
**
**CALL FUNCTION 'ME_DIRECT_INPUT_SOURCE_LIST'
**  EXPORTING
**    i_matnr          = '000000004700249994' "gv_matnr
**    i_werks          = 'RU70' "t_eordu-werks
**    ACTIVITY         = 'V'
**    i_vorga          = 'A'
***          I_LOGSY          =
**  TABLES
**    t_eord           = t_eordu
**  EXCEPTIONS
**    plant_missing    = 1
**    material_missing = 2
**    error_message    = 4
**    OTHERS           = 3.
**IF sy-subrc = 0.
**  COMMIT WORK.
**ENDIF.
**BREAK-POINT.
**
***.... Check if source list already exists
**SELECT SINGLE * INTO t_eord
**   FROM eord WHERE matnr = '000000004700249994'
**               AND werks = 'RU70'
**               AND lifnr = '0102000110'.
*
*
*IF sy-subrc = 0.
*  t_eord-mandt = sy-mandt.
*  t_eord-ernam = sy-uname.
*  t_eord-erdat = sy-datum.
*  t_eord-werks = 'RU70'.
*  t_eord-matnr = '000000004700249994'.
*  t_eord-vdatu = sy-datum.
*  t_eord-bdatu = '99991231'.
*  t_eord-autet = 1.
*  t_eord-ekorg = 'RU04'.
*  t_eord-lifnr = '0102000110'.
*  t_eord-notkz = 'X'.
**        t_eord-meins = gv_bstme.
*  t_eord-flifn = space.
*  APPEND t_eord.
*  t_eordu[] = t_eord[].
*ENDIF.
*
**      CLEAR: t_eord.
**      REFRESH t_eordu.
**LOOP AT t_eord.
**        t_eordu = t_eord.
**        IF t_eord-logsy(1) = 'X'.
**          CLEAR t_eordu-logsy.
**          t_eordu-kz = 'U'.
**        ELSE.
**          t_eordu-kz = 'I'.
**        ENDIF.
**        APPEND t_eordu.
**      ENDLOOP.
**      SORT t_eordu BY zeord.
**
**      IF NOT t_eord[] IS INITIAL.
**CALL FUNCTION 'ME_DIRECT_INPUT_SOURCE_LIST'
**  EXPORTING
**    i_matnr          = '000000004700249994'
**    i_werks          = 'RU70'
***            i_vorga          = 'A'
**  activity   = 'V'
***          I_LOGSY          =
**  TABLES
**    t_eord           = t_eordu
**  EXCEPTIONS
**    plant_missing    = 1
**    material_missing = 2
**    error_message    = 4
**    OTHERS           = 3.
**IF sy-subrc = 0.
**  COMMIT WORK.
**ENDIF.
**BREAK-POINT.
***endif.
*
***  Begin of Insert by EXTSDA CR3255 MOD-001++
***  Logic to Get Account Group for excluding Ship-To customers
***  Data declarations
**DATA: lv_low       TYPE tvarv_val,
**      lv_accnt_grp TYPE rvari_vnam VALUE 'KTOKD',
**      lv_ktokd     TYPE tvarv_val.
***  Clear local variables
**CLEAR: lv_ktokd,
**       lv_accnt_grp.
***  Get data from TVARVC
**SELECT SINGLE low
**       FROM tvarvc
**       INTO lv_low
**       WHERE name EQ lv_accnt_grp
**  AND ktokd NE lv_ktokd.
**IF sy-subrc = 0.
**  lv_ktokd = lv_low.
**ENDIF.
***  End of Insert by EXTSDA CR3255 MOD-001++
**
***  Begin of Insert by EXTSDA CR3255 MOD-001++
**
***  End of Insert by EXTSDA CR3255 MOD-001++
*
********************************************CR3249**
********************************Mod-003 Begin***************************
** Begin of Insert MOD-003 EXTSDA CR3249
**  Declare Local variable
*  data: lv_idx type sy-tabix,
*        lv_idx1 TYPE sy-tabix.
*
**  Get data from CRHD
*  select objty
*         objid
*         arbpl
*         from crhd
*         into table gt_crhd_1
*         for all entries in object_tab
*         where arbpl = object_tab-iarbpl.
*
** Check for intial
*  if not gt_crhd[] is initial.
** Get data from CRCO
*    select objty
*           objid
*           kokrs
*           kostl
*           lstar
*           from crco
*           into table gt_crco
*           for all entries in gt_crhd_1
*           where objty = gt_crhd_1-objty
*           and   objid = gt_crhd_1-objid
*           and   lstar ne space.
*  sort gt_crco by objty objid.
*  endif.
** Check for intial
** Get data from CRCO
*  if not gt_crco[] is initial.
*    select kokrs
*           kostl
*           lstar
*           gjahr
*           objnr
*           from cssl
*           into table gt_cssl
*           for all entries in gt_crco
*           where kokrs = gt_crco-kokrs
*           and   kostl = gt_crco-kostl
*           and   lstar = gt_crco-lstar.
*      sort gt_crco by kokrs kostl lstar.
*  endif.
**  Check for initial
**  Get data from COST
*  if not gt_cssl[] is initial.
*    select objnr
*           gjahr
*           tog001
*           from cost
*           into table gt_cost
*           for all entries in gt_cssl
*           where objnr = gt_cssl-objnr
*           and   gjahr = gt_cssl-gjahr.
*  endif.
*
** Logic to Populate Fixed Price and Total Cost
*  loop at object_tab into lw_object_tab.
**  Read data from crhd_1
*    read table gt_crhd_1 into ga_crhd_1 with key arbpl = lw_object_tab-iarbpl.
*    if sy-subrc = 0.
**  Read data from crco
*      read table gt_crco into ga_crco with key objty = ga_crhd_1-objty
*                                               objid = ga_crhd_1-objid.
**   Read data from gt_cssl
*    if sy-subrc = 0.
*      READ TABLE gt_cssl into ga_cssl with key kokrs = ga_crco-kokrs
*                                               kostl = ga_crco-kostl
*                                               lstar = ga_crco-lstar.
*      if sy-subrc = 0.
*       lv_idx1 = sy-tabix.
*       loop at gt_cssl into ga_cssl from lv_idx1.
*        if ga_cssl-kokrs <> ga_crco-kokrs OR
*           ga_cssl-kostl <> ga_crco-kostl OR
*           ga_cssl-lstar <> ga_crco-lstar.
*        exit.
*         endif.
**  Read data from cost
*    read table gt_cost into ga_cost with key objnr = ga_cssl-objnr
*                                             gjahr = ga_cssl-gjahr.
*    if sy-subrc = 0.
**  Fiscal year
*            move ga_cost-gjahr to lw_object_tab-gjahr.
**  Plan Fixed Price
*            move ga_cost-tog001 to lw_object_tab-tog001.
**  Logic to get Total Actual Cost
*            gv_total_cost = lw_object_tab-ismnw * lw_object_tab-tog001.
*            move gv_total_cost to lw_object_tab-totcost.
*            append lw_object_tab to gt_temp_data.
*            clear: lw_object_tab-gjahr, lw_object_tab-tog001,
*                   lw_object_tab-totcost,ga_cost,gv_total_cost.
*          endif.
*      endloop.
**   Clear local variable
*      clear: lv_idx1.
*    endif.
*   endif.
*  endif.
**  Clear local variables
*    clear : lw_object_tab, ga_crhd_1, ga_crco, ga_cssl, ga_cost, gv_total_cost.
* endloop.
** Move temp data to final data
*  refresh: object_tab[].
*  object_tab[] =  gt_temp_data[].
** End of Insert MOD-003 EXTSDA CR3249
********************************Mod-003 End*****************************
