REPORT ZAL_ABAP message-id 26 line-size 255
no standard page heading.
* ZCP1_EQUI_FACT_M.
PARAMETER DOWNLOAD(1) DEFAULT 'S' lower case. "N-svr,Y-clnt
PARAMETER EXECMODE(1) DEFAULT 'B' lower case. "D-dlg,B-btch
PARAMETER OUT_DIR(48) DEFAULT "output file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER IN_DIR(48) DEFAULT "input file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER P_DEST TYPE RFCDES-RFCDEST DEFAULT
'NONE'.
PARAMETER P_PROGID TYPE RFCOPT-RFCEXEC DEFAULT
SPACE.
PARAMETER P_GWHOST TYPE RFCOPT-RFCGWHOST DEFAULT
SPACE.
PARAMETER P_GWSERV TYPE RFCOPT-RFCGWSERV DEFAULT
SPACE.
PARAMETER P_SRVFM(30) DEFAULT "Server Callback function
SPACE.
PARAMETER P_PKGSZ TYPE I DEFAULT "Stream package size
5000.
PARAMETER P_SNC_ON(1) DEFAULT "X-on SPACE-off
SPACE.

PARAMETER $PARAM1 TYPE D.

PARAMETER P_DF_VK(40) DEFAULT "ABAP data flow object key
'' lower case.
PARAMETER P_DI_GEN(40) DEFAULT "DI version that generated ABAP
'' lower case.

*** Machine generated ABAP. Do not modify.            ***
*** (C)Copyright Business Objects S.A.  All rights reserved. ***
*
* Date Time:
*    12/24/15 07:35:25
* SAP used for generated this ABAP:
*    Release: 701
*    Host   : 10.25.3.82
*
* ABAP Dataflow Name:
*    DF_R3_CTS_LZ_SAP_CP1_EQUI__FACT_D
* ABAP Dataflow comments:
*  SAP source: EQBS, JEST, EQUI, TJ02T, T001W
* ABAP program name in SAP:
*  ZCP1_EQUI_FACT_M
* Generated ABAP file name:
*    //AIRSBEAP0512/D$/Data/SAPLogistics/VAL/ABAP/ZCP1_EQUI_FACT_M
TABLES EQUI.
TABLES EQUZ.
TABLES ILOA.
TABLES CDHDR.
TABLES T370T.
TABLES ZSTC_SALES_COMP.

DATA: begin of ITAB7 occurs 0,
EQUNR(18) TYPE C,
EQLFN(3) TYPE N,
MATNR(18) TYPE C,
SERNR(18) TYPE C,
OBJNR(22) TYPE C,
DATAB TYPE D,
DATBI TYPE D,
IWERK(4) TYPE C,
INGRP(3) TYPE C,
GEWRK(8) TYPE N,
BUKRS(4) TYPE C,
PPSID(8) TYPE N,
VKORG(4) TYPE C,
VTWEG(2) TYPE C,
SPART(2) TYPE C,
VKBUR(4) TYPE C,
VKGRP(3) TYPE C,
TPLNR(30) TYPE C,
STSMA(8) TYPE C,
Z_BUKRS(4) TYPE C,
Z_VKORG(4) TYPE C,
Z_WERKS(4) TYPE C,
Z_EKORG(4) TYPE C,
Z_MAMUSERCMPY(4) TYPE C,
Z_REGION(40) TYPE C,
Z_COUNTRY(40) TYPE C,
Z_COUNTRYDSCR(255) TYPE C,
Z_SALESCOMPANY(40) TYPE C,
Z_SALESCMPDSCR(255) TYPE C.
DATA: end of ITAB7.

data: append_flag(1) value ' ',
      cntbuf type i,
      delimleng type i,last_batch(1) value ' '.

CONSTANTS C_DF_VK(40) VALUE '1648'.
CONSTANTS C_DI_GEN(40) VALUE '14.2.3.660'.
DATA WARN_MSG(50).


DATA: gv_directory     TYPE epsdirnam  VALUE '/var/load/xxx/UK/read/',
      gv_logsys        LIKE tbdlst-logsys.

start-of-selection.
* Logical system
  CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
    IMPORTING
      own_logical_system             = gv_logsys
    EXCEPTIONS
      own_logical_system_not_defined = 1
      OTHERS                         = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE 'E' NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    STOP.
  ENDIF.
  REPLACE 'xxx' IN out_dir WITH gv_logsys(3).
  REPLACE 'xxx' IN in_dir WITH gv_logsys(3).


  IF DOWNLOAD = 'S' OR
     DOWNLOAD = 'N' OR
     DOWNLOAD = 'Y'.
      .
  ELSE.
     DATA: m_xfer_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'data transfer method: ' DOWNLOAD
'. Regenerate the ABAP program and upload to this system.'
     INTO m_xfer_err_msg.
     MESSAGE  E240(S#) WITH m_xfer_err_msg.
  ENDIF.

  IF EXECMODE = 'B' OR
     EXECMODE = 'D'.
      .
  ELSE.
     DATA: m_exec_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'execution option: ' EXECMODE
'. Regenerate the ABAP program and upload to this system.'
     INTO m_exec_err_msg.
     MESSAGE  E240(S#) WITH m_exec_err_msg.
  ENDIF.

  IF DOWNLOAD = 'S'.
     PERFORM CONNECT_RFCDEST_TO_PROGID.
  ENDIF.



PERFORM FORM7.
last_batch = 'X'.
PERFORM FORM8.
FREE ITAB7.
  IF DOWNLOAD = 'S'.
     PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
  ENDIF.


end-of-selection.

CLEAR WARN_MSG.

IF NOT P_DF_VK IS INITIAL.
  IF P_DF_VK <> C_DF_VK.
     CONCATENATE '$$Warning$'
                 C_DF_VK
                 '$' INTO WARN_MSG.
  ENDIF.
ENDIF.
IF NOT P_DI_GEN IS INITIAL.
  IF P_DI_GEN <> C_DI_GEN.
     IF WARN_MSG IS INITIAL.
       CONCATENATE '$$Warning$$'
                   C_DI_GEN
                   INTO WARN_MSG.
     ELSE.
       CONCATENATE WARN_MSG
                   C_DI_GEN
                   INTO WARN_MSG.
     ENDIF.
  ENDIF.
ENDIF.

IF NOT WARN_MSG IS INITIAL.
  IF EXECMODE = 'D'.
    WRITE WARN_MSG.
    NEW-LINE.
  ELSE.
    MESSAGE S240(S#) with WARN_MSG.
  ENDIF.
ENDIF.


write  '* Program Complete *'.
write  '(C)Copyright Business Objects S.A.  All rights reserved.'.

FORM FORM7.
DATA ALTMP746(18) TYPE C.
DATA ALTMP747(3) TYPE N.
DATA ALTMP748(18) TYPE C.
DATA ALTMP749(18) TYPE C.
DATA ALTMP750(22) TYPE C.
DATA ALTMP751 TYPE D.
DATA ALTMP752 TYPE D.
DATA ALTMP753(4) TYPE C.
DATA ALTMP754(3) TYPE C.
DATA ALTMP755(8) TYPE N.
DATA ALTMP756(4) TYPE C.
DATA ALTMP757(8) TYPE N.
DATA ALTMP758(4) TYPE C.
DATA ALTMP759(2) TYPE C.
DATA ALTMP760(2) TYPE C.
DATA ALTMP761(4) TYPE C.
DATA ALTMP762(3) TYPE C.
DATA ALTMP763(30) TYPE C.
DATA ALTMP764(8) TYPE C.
DATA ALTMP765(4) TYPE C.
DATA ALTMP766(4) TYPE C.
DATA ALTMP767(4) TYPE C.
DATA ALTMP768(4) TYPE C.
DATA ALTMP769(4) TYPE C.
DATA ALTMP770(40) TYPE C.
DATA ALTMP771(40) TYPE C.
DATA ALTMP772(255) TYPE C.
DATA ALTMP773(40) TYPE C.
DATA ALTMP774(255) TYPE C.

DATA EQUI9EQUNR LIKE EQUI-EQUNR.
DATA EQUZ9EQLFN LIKE EQUZ-EQLFN.
DATA EQUI9MATNR LIKE EQUI-MATNR.
DATA EQUI9SERNR LIKE EQUI-SERNR.
DATA EQUI9OBJNR LIKE EQUI-OBJNR.
DATA EQUZ9DATAB LIKE EQUZ-DATAB.
DATA EQUZ9DATBI LIKE EQUZ-DATBI.
DATA EQUZ9IWERK LIKE EQUZ-IWERK.
DATA EQUZ9INGRP LIKE EQUZ-INGRP.
DATA EQUZ9GEWRK LIKE EQUZ-GEWRK.
DATA ILOA9BUKRS LIKE ILOA-BUKRS.
DATA ILOA9PPSID LIKE ILOA-PPSID.
DATA ILOA9VKORG LIKE ILOA-VKORG.
DATA ILOA9VTWEG LIKE ILOA-VTWEG.
DATA ILOA9SPART LIKE ILOA-SPART.
DATA ILOA9VKBUR LIKE ILOA-VKBUR.
DATA ILOA9VKGRP LIKE ILOA-VKGRP.
DATA ILOA9TPLNR LIKE ILOA-TPLNR.
DATA T370T9STSMA LIKE T370T-STSMA.
DATA ZSTC_SALE_019BUKRS LIKE ZSTC_SALES_COMP-BUKRS.
DATA ZSTC_SALE_019VKORG LIKE ZSTC_SALES_COMP-VKORG.
DATA ZSTC_SALE_019WERKS LIKE ZSTC_SALES_COMP-WERKS.
DATA ZSTC_SALE_019EKORG LIKE ZSTC_SALES_COMP-EKORG.
DATA ZSTC_SALE_019MAMUSERCMPY LIKE ZSTC_SALES_COMP-MAMUSERCMPY.
DATA ZSTC_SALE_019REGION LIKE ZSTC_SALES_COMP-REGION.
DATA ZSTC_SALE_019COUNTRY LIKE ZSTC_SALES_COMP-COUNTRY.
DATA ZSTC_SALE_019COUNTRYDSCR LIKE ZSTC_SALES_COMP-COUNTRYDSCR.
DATA ZSTC_SALE_019SALESCOMPANY LIKE ZSTC_SALES_COMP-SALESCOMPANY.
DATA ZSTC_SALE_019SALESCMPDSCR LIKE ZSTC_SALES_COMP-SALESCMPDSCR.
DATA EQUI9EQART LIKE EQUI-EQART.
DATA CDHDR9OBJECTCLAS LIKE CDHDR-OBJECTCLAS.
DATA CDHDR9UDATE LIKE CDHDR-UDATE.
DATA T370T9EQTYP LIKE T370T-EQTYP.
DATA EQUI9EQTYP LIKE EQUI-EQTYP.
DATA CDHDR9OBJECTID LIKE CDHDR-OBJECTID.
DATA EQUZ9ILOAN LIKE EQUZ-ILOAN.
DATA ILOA9ILOAN LIKE ILOA-ILOAN.
DATA EQUZ9EQUNR LIKE EQUZ-EQUNR.



SELECT
  EQUI9~EQUNR
  EQUZ9~EQLFN
  EQUI9~MATNR
  EQUI9~SERNR
  EQUI9~OBJNR
  EQUZ9~DATAB
  EQUZ9~DATBI
  EQUZ9~IWERK
  EQUZ9~INGRP
  EQUZ9~GEWRK
  ILOA9~BUKRS
  ILOA9~PPSID
  ILOA9~VKORG
  ILOA9~VTWEG
  ILOA9~SPART
  ILOA9~VKBUR
  ILOA9~VKGRP
  ILOA9~TPLNR
  T370T9~STSMA
  ZSTC_SALE_019~BUKRS
  ZSTC_SALE_019~VKORG
  ZSTC_SALE_019~WERKS
  ZSTC_SALE_019~EKORG
  ZSTC_SALE_019~MAMUSERCMPY
  ZSTC_SALE_019~REGION
  ZSTC_SALE_019~COUNTRY
  ZSTC_SALE_019~COUNTRYDSCR
  ZSTC_SALE_019~SALESCOMPANY
  ZSTC_SALE_019~SALESCMPDSCR
  EQUI9~EQART
  CDHDR9~OBJECTCLAS
  CDHDR9~UDATE
  T370T9~EQTYP
  EQUI9~EQTYP
  CDHDR9~OBJECTID
  EQUZ9~ILOAN
  ILOA9~ILOAN
  EQUZ9~EQUNR
into (EQUI9EQUNR,
  EQUZ9EQLFN,
  EQUI9MATNR,
  EQUI9SERNR,
  EQUI9OBJNR,
  EQUZ9DATAB,
  EQUZ9DATBI,
  EQUZ9IWERK,
  EQUZ9INGRP,
  EQUZ9GEWRK,
  ILOA9BUKRS,
  ILOA9PPSID,
  ILOA9VKORG,
  ILOA9VTWEG,
  ILOA9SPART,
  ILOA9VKBUR,
  ILOA9VKGRP,
  ILOA9TPLNR,
  T370T9STSMA,
  ZSTC_SALE_019BUKRS,
  ZSTC_SALE_019VKORG,
  ZSTC_SALE_019WERKS,
  ZSTC_SALE_019EKORG,
  ZSTC_SALE_019MAMUSERCMPY,
  ZSTC_SALE_019REGION,
  ZSTC_SALE_019COUNTRY,
  ZSTC_SALE_019COUNTRYDSCR,
  ZSTC_SALE_019SALESCOMPANY,
  ZSTC_SALE_019SALESCMPDSCR,
  EQUI9EQART,
  CDHDR9OBJECTCLAS,
  CDHDR9UDATE,
  T370T9EQTYP,
  EQUI9EQTYP,
  CDHDR9OBJECTID,
  EQUZ9ILOAN,
  ILOA9ILOAN,
  EQUZ9EQUNR)
FROM CDHDR AS CDHDR9
 INNER JOIN EQUI AS EQUI9
 ON ( CDHDR9~OBJECTID = EQUI9~EQUNR )
 INNER JOIN EQUZ AS EQUZ9
 ON ( EQUI9~EQUNR = EQUZ9~EQUNR )
 INNER JOIN T370T AS T370T9
 ON ( T370T9~EQTYP = EQUI9~EQTYP )
 INNER JOIN ILOA AS ILOA9
 ON ( EQUZ9~ILOAN = ILOA9~ILOAN )
 INNER JOIN ZSTC_SALES_COMP AS ZSTC_SALE_019
 ON ( ILOA9~VKORG = ZSTC_SALE_019~VKORG )
WHERE ( NOT ( ( ILOA9~VKORG like '%04' ) )
 AND ( NOT ( ( ILOA9~VKORG like '%03' ) )
 AND ( NOT ( ( ILOA9~VKORG like '%02' ) )
 AND ( ( CDHDR9~UDATE >= $PARAM1 )
 AND ( ( CDHDR9~OBJECTCLAS = 'EQUI' )
 AND ( EQUI9~EQART = 'EQUIPMENT' ) ) ) ) ) ).
ALTMP746 = EQUI9EQUNR.
ALTMP747 = EQUZ9EQLFN.
ALTMP748 = EQUI9MATNR.
ALTMP749 = EQUI9SERNR.
ALTMP750 = EQUI9OBJNR.
ALTMP751 = EQUZ9DATAB.
ALTMP752 = EQUZ9DATBI.
ALTMP753 = EQUZ9IWERK.
ALTMP754 = EQUZ9INGRP.
ALTMP755 = EQUZ9GEWRK.
ALTMP756 = ILOA9BUKRS.
ALTMP757 = ILOA9PPSID.
ALTMP758 = ILOA9VKORG.
ALTMP759 = ILOA9VTWEG.
ALTMP760 = ILOA9SPART.
ALTMP761 = ILOA9VKBUR.
ALTMP762 = ILOA9VKGRP.
ALTMP763 = ILOA9TPLNR.
ALTMP764 = T370T9STSMA.
ALTMP765 = ZSTC_SALE_019BUKRS.
ALTMP766 = ZSTC_SALE_019VKORG.
ALTMP767 = ZSTC_SALE_019WERKS.
ALTMP768 = ZSTC_SALE_019EKORG.
ALTMP769 = ZSTC_SALE_019MAMUSERCMPY.
ALTMP770 = ZSTC_SALE_019REGION.
ALTMP771 = ZSTC_SALE_019COUNTRY.
ALTMP772 = ZSTC_SALE_019COUNTRYDSCR.
ALTMP773 = ZSTC_SALE_019SALESCOMPANY.
ALTMP774 = ZSTC_SALE_019SALESCMPDSCR.
 move ALTMP746 to ITAB7-EQUNR.
 move ALTMP747 to ITAB7-EQLFN.
 move ALTMP748 to ITAB7-MATNR.
 move ALTMP749 to ITAB7-SERNR.
 move ALTMP750 to ITAB7-OBJNR.
 move ALTMP751 to ITAB7-DATAB.
 move ALTMP752 to ITAB7-DATBI.
 move ALTMP753 to ITAB7-IWERK.
 move ALTMP754 to ITAB7-INGRP.
 move ALTMP755 to ITAB7-GEWRK.
 move ALTMP756 to ITAB7-BUKRS.
 move ALTMP757 to ITAB7-PPSID.
 move ALTMP758 to ITAB7-VKORG.
 move ALTMP759 to ITAB7-VTWEG.
 move ALTMP760 to ITAB7-SPART.
 move ALTMP761 to ITAB7-VKBUR.
 move ALTMP762 to ITAB7-VKGRP.
 move ALTMP763 to ITAB7-TPLNR.
 move ALTMP764 to ITAB7-STSMA.
 move ALTMP765 to ITAB7-Z_BUKRS.
 move ALTMP766 to ITAB7-Z_VKORG.
 move ALTMP767 to ITAB7-Z_WERKS.
 move ALTMP768 to ITAB7-Z_EKORG.
 move ALTMP769 to ITAB7-Z_MAMUSERCMPY.
 move ALTMP770 to ITAB7-Z_REGION.
 move ALTMP771 to ITAB7-Z_COUNTRY.
 move ALTMP772 to ITAB7-Z_COUNTRYDSCR.
 move ALTMP773 to ITAB7-Z_SALESCOMPANY.
 move ALTMP774 to ITAB7-Z_SALESCMPDSCR.
 append ITAB7.
 cntbuf = cntbuf + 1.
 if download = 'N'.
  if cntbuf > 5000.
    perform FORM8.
    clear cntbuf.
    refresh ITAB7.
    append_flag = 'A'.
  endif.
 endif.
 if download = 'S'.
  if cntbuf > P_PKGSZ.
    perform FORM8.
    clear cntbuf.
    refresh ITAB7.
  endif.
 endif.
ENDSELECT.
ENDFORM.

FORM FORM8.
data: outfile(512), ldfile(50).
ldfile = 'CTS_LZ_SAP_CP1_EQUIPMENT'.
concatenate out_dir ldfile into outfile
  separated by '/'.
  IF DOWNLOAD = 'S'.
     DATA: error_message(700),mtext(800),iEOP(1).
     CALL FUNCTION P_SRVFM
          DESTINATION P_DEST
          KEEPING LOGICAL UNIT OF WORK
          EXPORTING
            EOS = last_batch
          IMPORTING
            EOP = iEOP
          TABLES
            E_TABLE = ITAB7
          EXCEPTIONS
            READ_ERROR = 1
            SYSTEM_FAILURE = 2
            MESSAGE error_message
            COMMUNICATION_FAILURE = 3
            MESSAGE error_message
            OTHERS = 4.

     IF sy-subrc ne 0.
        Case sy-subrc.
        when 1.
        CONCATENATE
        'Data Services read error. '
        'Check Data Services error log.'
        INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 2.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 3.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 4.
        MESSAGE  E240(S#) WITH
'Other SAP System Failure while calling DS remote function.'.
        endcase.
      ENDIF.
      IF iEOP = 'X'.
         PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
         LEAVE PROGRAM.
       ENDIF.
  ELSE.
data  dlmtlen type i value '1'.
data xdlmtlen type i value '1'.
data:
  ht(1) type c,
  xht(1) type x,
  conv type ref to cl_abap_conv_in_ce.
xht = '7F'.
conv = cl_abap_conv_in_ce=>create(
  encoding = '1100'
  input = xht
).
call method conv->read(
  exporting n    = xdlmtlen
  importing data = ht
            len = dlmtlen
).
data return_code type i.
 perform write_delimited_file
           tables   ITAB7
           using    outfile
                    append_flag
                    ht
                    dlmtlen
                    download
           changing return_code.

  case return_code.
    when 1.
      IF EXECMODE = 'D'.
        WRITE: /5 'No line selected'.
      ELSE.
        MESSAGE E047(S#).
      ENDIF.
    when 2.
      IF EXECMODE = 'D'.
        WRITE: /5 'Open File Error -- ', 25 OUTFILE.
      ELSE.
        MESSAGE  E084(E0) WITH OUTFILE.
      ENDIF.
    when 3.
      IF EXECMODE = 'D'.
        WRITE: /5 'Data exceed length limit (8192) '.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Data exceed length limit (8192) '.
      ENDIF.
    when 4.
      IF EXECMODE = 'D'.
        WRITE: /5 'Call function WS_DOWNLOAD error'.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Call function WS_DOWNLOAD error'.
      ENDIF.
  endcase.
 ENDIF.
ENDFORM.

FORM SUBSTRING USING SRC BEG LEN CHANGING RET.

DATA: VA1 TYPE I.
DATA: VA2 TYPE I.
DATA: VA3 TYPE I.

VA3 = STRLEN( SRC ).

IF  BEG = 0.   VA1 = 0.
ELSE.
  IF  BEG < 0.
    VA1 = VA3 + BEG.
    IF  VA1 < 0.   VA1 = 0.
    ENDIF.
  ELSE.          VA1 = BEG - 1.
  ENDIF.
ENDIF.

IF  LEN < 0.   VA2 = 0.
ELSE.          VA2 = VA3 - VA1.
ENDIF.

IF  VA2 > LEN. VA2 = LEN.
ENDIF.

IF  VA2 < 1.   MOVE ''           TO RET.
ELSE.          MOVE SRC+VA1(VA2) TO RET.
ENDIF.

ENDFORM.

form write_delimited_file
           tables   datatab
           using    file
                    append
                    delimit
                    dlength
                    dwnload
          changing rc.

  data: type1,
        appd(1),
        temp(32),
        time1(8),
        date1(10),
        output(8192),
        rcount type i,
        offset type i,
        tablen type i,
        maxlen type i value '8192'.

  data: begin of clientab occurs 0,
             output(8192),
          end of clientab.

  field-symbols: <f>.
  field-symbols <delim1>.
  data delim2(16).
  data l_filename type string.

  appd = append.
  if appd is not initial.
     appd = 'X'.
  endif.
  move file to l_filename.
  describe table datatab lines tablen.


  if dwnload = 'Y'.
     clear clientab. refresh clientab.
     rcount = 0.
  else.
     if appd = space.
   open dataset file for output in text mode ENCODING UTF-8.
     else.
    open dataset file for appending in text mode ENCODING UTF-8.
     endif.
     if sy-subrc <> 0.
         rc = 2. exit.
     endif.
  endif.

  loop at datatab.
    clear: tablen, offset, output.
    do.
      assign component sy-index of
         structure datatab to <f>.
      if sy-subrc <> 0. exit. endif.
      if sy-index > 1.
         assign delimit(dlength) TO <delim1> CASTING TYPE C.
         delim2 = <delim1>.
         write delim2(dlength) to output+offset(dlength).
         add dlength to offset.
      endif.

      describe field <f> type type1.

      if type1 = 'I' or type1 = 'N'.
          type1 = 'P'.
      endif.

      case type1.
        when 'D'.
          if <f> = '00000000'.
             <f> = ' '.
          else.
             move <f> to time1.
             assign time1 to <f>.
          endif.
        when 'F'.
          if <f> = '0.0'.
            temp = '0.0'.
          else.
             write <f> to temp exponent 0.
          endif.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
        when 'P'.
          if <f> < 0.
             write '-' to output+offset(1).
             add 1 to offset.
             <f> = <f> * ( -1 ).
          endif.
          move <f> to temp.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
      endcase.

      sy-fdpos = strlen( <f> ).

      tablen = offset + sy-fdpos.
      if tablen > maxlen.
         rc = 3. exit.
      endif.
      write <f> to output+offset(sy-fdpos).
      add sy-fdpos to offset.
    enddo.

    if dwnload = 'Y'.
       clientab-output = output.
       append clientab.
       rcount = rcount + 1.
       if rcount >= 50.
          SY-BATCH = SPACE.
          CALL FUNCTION 'GUI_DOWNLOAD'
            EXPORTING
              FILENAME = l_filename
              FILETYPE = 'ASC'
              CODEPAGE = '4110'
              APPEND   = appd
              WRITE_FIELD_SEPARATOR = 'X'
*            IMPORTING
*              FILELENGTH =
            TABLES
              DATA_TAB = clientab
            EXCEPTIONS
              OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
          clear clientab. refresh clientab.
          rcount = 0. appd = 'A'.
       endif.
    else.
       transfer output to file.
    endif.
  endloop.

  if dwnload = 'Y'.
       SY-BATCH = SPACE.
       CALL FUNCTION 'GUI_DOWNLOAD'
         EXPORTING
           FILENAME = l_filename
           FILETYPE = 'ASC'
              CODEPAGE = '4110'
           APPEND   = appd
           WRITE_FIELD_SEPARATOR = 'X'
*         IMPORTING
*           FILELENGTH =
         TABLES
           DATA_TAB = clientab
         EXCEPTIONS
           OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
  else.
       close dataset file.
  endif.
endform.

FORM CONNECT_RFCDEST_TO_PROGID.
 INCLUDE rfctypes.

 DATA: len     type i,
       R3NAME(4),
       SYSTNR(2),
       uid     LIKE SYS_UID,
       options LIKE RFCOPT,
       isunicode  TYPE n.

 DATA: NTOTAL     LIKE GWY_STRUCT-NOREG,
       GWY_GWHOST LIKE GWY_STRUCT-GWHOST,
       GWY_GWSERV LIKE GWY_STRUCT-GWSERV,
       GWY_TPNAME LIKE GWY_SYSTEM-TPNAME.

 TABLES: RFCSI.

* Check program ID
 IF P_PROGID = SPACE.							
    RAISE INVALID_PROGRAM_ID.
 ENDIF.

* determine if the RFC destination authority
  CALL FUNCTION 'RFC_READ_TCPIP_DESTINATION'
       EXPORTING destination = P_DEST
                 authority_check = 'X'
  IMPORTING rfcunicode = isunicode.

* Use current gateway if no info exits
 IF P_GWHOST = SPACE OR P_GWSERV = SPACE.
  CALL FUNCTION 'RFC_SYSTEM_INFO'
      IMPORTING
          RFCSI_EXPORT = RFCSI.

  len = strlen( rfcsi-rfcdest ) - 2.
  systnr = rfcsi-rfcdest+len.
  len = len - 1 - 3.
  r3name = rfcsi-rfcdest+len(3).
  len = len - 1.
  options-rfcgwhost = rfcsi-rfcdest(len).
  CONCATENATE 'sapgw' SYSTNR INTO options-rfcgwserv.
 ELSE.
   options-rfcgwhost = P_GWHOST.
   options-rfcgwserv = P_GWSERV.
 ENDIF.

* Parameters for GWY function call
  GWY_GWHOST = OPTIONS-RFCGWHOST.
  GWY_GWSERV = OPTIONS-RFCGWSERV.
  GWY_TPNAME = P_PROGID.

* Check gateway and server program registered
  CALL FUNCTION 'GWY_GET_NO_REG_PROGRAMS'
     EXPORTING
        GWHOST      = GWY_GWHOST
        GWSERV      = GWY_GWSERV
        TPNAME      = GWY_TPNAME
     IMPORTING
        NOREG_TOTAL = NTOTAL
     EXCEPTIONS
        OTHERS      = 1.

  IF sy-subrc NE 0.
     raise CONNECT_TO_GATEWAY_FAILED.
  ENDIF.

  IF NTOTAL = 0.
     raise SERVER_NOT_REGISTERED.
  ENDIF.

  IF NTOTAL GT 1.
     raise DUPLICATE_REG_PROGRAMS.
  ENDIF.

* build new connection to a registered server
  options-rfcexec   = gwy_tpname.
  options-rfcgwhost = gwy_gwhost.
  options-rfcgwserv = gwy_gwserv.
  options-rfchost   = '%%RFCSERVER%%'.
  IF P_SNC_ON = 'X'.
    options-rfcsnc  = 'X'.
  ENDIF.

  CALL 'RFCControl' ID 'CODE' FIELD 'O'
                    ID 'DESTINATION' FIELD P_DEST
                    ID 'TYPE' FIELD rfctype_external_tcp
                    ID 'OPTIONS' FIELD options.

  IF sy-subrc NE 0.
     RAISE CONNECT_TO_REG_SERVER_FAILED.
   ENDIF.

* and set exclusive mode to keep server owned
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
      EXPORTING  destination = P_DEST
                 exclusiv    = 'Y'
      EXCEPTIONS connect_to_reg_server_failed = 1
                 exclusiv_not_supported       = 2.

  IF SY-SUBRC NE 0.
     CASE SY-SUBRC.
          WHEN 1.
              RAISE CONNECT_TO_REG_SERVER_FAILED.
          WHEN 2.
              RAISE EXCLUSIV_NOT_SUPPORTED.
     ENDCASE.
  ENDIF.

ENDFORM.

FORM DISCONNECT_RFCDEST_FROM_PROGID.
* set exclusive mode to E to end the session
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
     EXPORTING
         destination = P_DEST
         exclusiv    = 'E'
     EXCEPTIONS
         connect_to_reg_server_failed = 1				
         exclusiv_not_supported       = 2.
ENDFORM.
