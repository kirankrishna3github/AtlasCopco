************************************************************************
* Copy of standard program: FP_CHECK_HTTP_DATA_TRANSFER
* Modified for Xandria monitoring tool
* Owner: Satyabrata Basu
* Mod-0001 - 03.04.2014  - Satya
************************************************************************
PROGRAM z_fp_check_http_data_transfer.

INCLUDE: fp_utilities,
         fp_spool_constants.

*PARAMETERS: p_wdest TYPE fpboolean,               "-Mod-0001
*            p_dest  TYPE rfcdest OBLIGATORY.      "-Mod-0001

CONSTANTS: p_wdest TYPE fpboolean VALUE 'X',       "+Mod-0001
           p_dest  TYPE rfcdest VALUE 'ADS'.       "+Mod-0001

CONSTANTS: lc_form   TYPE fpname VALUE 'FP_FORM_SECURITY_TEST',
           lc_tag1   TYPE string VALUE 'DATE',
           lc_value1 TYPE string VALUE '2008-02-29',
           lc_tag2   TYPE string VALUE 'TIME',
           lc_value2 TYPE string VALUE '13:12:11',
           lc_tag3   TYPE string VALUE 'USERNAME',
           lc_value3 TYPE string VALUE 'FP_TESTER',
           lc_fpref  TYPE string VALUE 'ADS_'.

DATA: l_writer   TYPE REF TO cl_sxml_string_writer,
      l_xdata    TYPE xstring,
      l_xftfile  TYPE string,
      l_uuid     TYPE sysuuid_c32,
      l_file     TYPE string,
      l_xfdfile  TYPE string,
      l_filename TYPE localfile,
      l_pdffile  TYPE string,
      l_fp       TYPE REF TO if_fp,
      l_pdfobj   TYPE REF TO if_fp_pdf_object,
      l_fpex     TYPE REF TO cx_fp_runtime,
      l_output   TYPE fpcontent,
      l_bytes    TYPE i.

INITIALIZATION.
*  MOVE cl_fp=>get_ads_connection( ) TO p_dest.             "-Mod-0001

*AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_dest.           "-Mod-0001
*  PERFORM value_help_for_destination USING 'P_DEST'.       "-Mod-0001

START-OF-SELECTION.
* Construct data XML.
  l_writer = cl_sxml_string_writer=>create( ).
  l_writer->if_sxml_writer~open_element(
                           name = cl_fp_xsd_schema=>data_root_element ).
  l_writer->if_sxml_writer~write_namespace_declaration(
                           nsuri  = cl_fp_xsd_schema=>ns_uri_xfadata
                           prefix = cl_fp_xsd_schema=>ns_prefix_xfa ).
  l_writer->if_sxml_writer~open_element( name = lc_tag1 ).
  l_writer->if_sxml_writer~write_value( value = lc_value1 ).
  l_writer->if_sxml_writer~close_element( ).
  l_writer->if_sxml_writer~open_element( name = lc_tag2 ).
  l_writer->if_sxml_writer~write_value( value = lc_value2 ).
  l_writer->if_sxml_writer~close_element( ).
  l_writer->if_sxml_writer~open_element( name = lc_tag3 ).
  l_writer->if_sxml_writer~write_value( value = lc_value3 ).
  l_writer->if_sxml_writer~close_element( ).
  l_writer->if_sxml_writer~close_element( ).
  l_xdata = l_writer->get_output( ).

* Get template URL.
  l_xftfile = cl_fp_wb_helper=>form_layout_url(
                                   i_name      = lc_form
                                   i_language  = 'D'
                                   i_dest_path = abap_true ).

  IF p_wdest = abap_true.
* Create data file in DIR_GLOBAL.
    PERFORM create_system_uuid IN PROGRAM saplfpcomp CHANGING l_uuid.
    CONCATENATE lc_fpref l_uuid INTO l_file.
    CONCATENATE l_file c_file_ext_xfd INTO l_xfdfile.
    MOVE l_xfdfile TO l_filename.
    PERFORM write_spool_file IN PROGRAM saplfpcomp
        USING l_filename l_xdata.
    CLEAR l_xdata.

* Get destination-service URL for the data file.
    PERFORM url_for_dir_global_file IN PROGRAM saplfpcomp
        USING    'formdata'                                 "#EC NOTEXT
                 l_xfdfile
        CHANGING l_xfdfile.

* Set the destination-service URL for the output PDF.
    CONCATENATE l_file c_file_ext_pdf INTO l_pdffile.
    PERFORM url_for_dir_global_file IN PROGRAM saplfpcomp
        USING    'output'                                   "#EC NOTEXT
                 l_pdffile
        CHANGING l_pdffile.
  ENDIF.

  TRY.
* Get FP reference.
      l_fp = cl_fp=>get_reference( ).
* Create PDF Object.
      l_pdfobj = l_fp->create_pdf_object( connection = p_dest ).
* Set template.
      l_pdfobj->set_template( xftfile = l_xftfile ).
* Set data.
      l_pdfobj->set_data( formdata     = l_xdata
                          formdatafile = l_xfdfile ).
* Tell PDF object to create PDF output.
      l_pdfobj->set_task_renderpdf( pdffile = l_pdffile ).
* Execute, call ADS.
      l_pdfobj->execute( ).
* Get result.
      l_pdfobj->get_pdf( IMPORTING pdfdata = l_output ).

    CATCH cx_fp_runtime_internal
          cx_fp_runtime_system
          cx_fp_runtime_usage INTO l_fpex.
      IF p_wdest = abap_true.
* Delete the data file written above before showing the error message.
        PERFORM delete_file_dir_global IN PROGRAM saplfpcomp
            USING l_filename.
      ENDIF.
*      PERFORM error USING l_fpex.                        "-Mod-0001
       write: 'CRITICAL'.                                 "+Mod-0001
       EXIT.                                              "+Mod-0001

  ENDTRY.

  IF p_wdest = abap_true.
* Delete the data file written above.
    PERFORM delete_file_dir_global IN PROGRAM saplfpcomp
        USING l_filename.
* Read the output PDF file.
    CONCATENATE l_file c_file_ext_pdf INTO l_pdffile.
    PERFORM read_file_dir_global USING    l_pdffile
                                 CHANGING l_output.
* Delete the output PDF file.
    PERFORM delete_file_dir_global IN PROGRAM saplfpcomp
        USING l_pdffile.
  ENDIF.

* If we come to this point, the output has been created without error.
  l_bytes = XSTRLEN( l_output ).
*  MESSAGE ID 'EU' TYPE 'I' NUMBER '606' WITH l_bytes.    "-Mod-0001
           write: 'OK'.                                   "+Mod-0001


*&---------------------------------------------------------------------*
*&      Form  read_file_dir_global
*&---------------------------------------------------------------------*
FORM read_file_dir_global USING    p_filename TYPE csequence
                          CHANGING p_data     TYPE xstring.
  DATA l_datafile TYPE string.

  PERFORM build_file_name_dir_global IN PROGRAM saplfpcomp
      USING    p_filename
      CHANGING l_datafile.

  CATCH SYSTEM-EXCEPTIONS open_dataset_no_authority = 1
                          dataset_too_many_files    = 2
                          dataset_read_error        = 3
                          dataset_cant_close        = 4
                          OTHERS                    = 99.

    OPEN DATASET l_datafile FOR INPUT IN BINARY MODE.
    READ DATASET l_datafile INTO p_data.
    CLOSE DATASET l_datafile.

  ENDCATCH.
ENDFORM.                    "read_file_dir_global

*Selection text£º
*P_DEST:        Connection
*P_WDEST:        With Destination Service
