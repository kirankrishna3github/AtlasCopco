*&---------------------------------------------------------------------*
*&  Include           ZCWU_SQL_F03
*&---------------------------------------------------------------------*
***********************************************************************
*^ Include Name    : ZCWU_SQL_F03
*^ Used in Programs: <Programs referencing this include>
*^ Purpose         : To Process SQL
*
*^ Other           :
***********************************************************************

***********************************************************************
*&      Form  Process_Comment2
***********************************************************************
FORM process_comment2   CHANGING pt_text TYPE ty_s_text .

  DATA : lv_amount TYPE i VALUE 0,
         lv_mod    TYPE i VALUE 0,
         lv_index  TYPE i        ,
         lv_length TYPE i        .

  lv_amount =  0 .

  lv_length = STRLEN( pt_text-line ) .

  DO lv_length TIMES .
    lv_index  = sy-index  - 1 .
    CASE pt_text-line+lv_index(1).
      WHEN c_element-comment2 .
        lv_mod = lv_amount MOD 2 .
        IF lv_mod = 0 .
          IF lv_index = 0 .
            pt_text = space .
          ELSE .
            pt_text = pt_text(lv_index).
          ENDIF .
          EXIT .
        ENDIF .
      WHEN c_element-quotes .
        ADD 1 TO lv_amount .
    ENDCASE .
  ENDDO .

  lv_mod = lv_amount MOD 2 .

  IF lv_mod <> 0 .
*& Exception "You maybe miss a single quoted symbol"
    PERFORM append_error_message USING 1 pt_text-line.
  ENDIF.

ENDFORM.                    "Process_Comment2


***********************************************************************
*&      Form  Move_Comments_In_SQL
***********************************************************************
FORM move_comments_in_sql  CHANGING pt_text TYPE ty_t_text .
  DATA : ls_text  TYPE ty_s_text  .
  LOOP AT pt_text INTO ls_text .

    IF ls_text-line(1) = c_element-comment1.
      DELETE pt_text .
      CONTINUE .
    ENDIF .

    IF ls_text-line CS c_element-comment2 .
      PERFORM process_comment2   CHANGING ls_text .
      MODIFY pt_text FROM ls_text .
    ENDIF .

    CONDENSE : ls_text-line .
    CHECK ls_text-line = space.
    DELETE pt_text .

  ENDLOOP .

ENDFORM .                    "Move_Comments_In_SQL

***********************************************************************
*&      Form  Separated_Quoted
***********************************************************************
FORM separated_quoted    USING ps_line   TYPE ty_s_text
                      CHANGING pt_table  TYPE ty_t_text .
  DATA : ls_text   TYPE  ty_s_text ,
         lv_flag    TYPE  i  VALUE 1 ,
         lv_length  TYPE  i          ,
         lv_index   TYPE  i          ,
         lv_start   TYPE  i  VALUE 0 ,
         lv_end     TYPE  i  VALUE 0 ,
         lv_mod     TYPE  i  VALUE 0 ,
         lv_amount  TYPE  i  VALUE 0 ,
         lv_str     TYPE  string  .

  lv_length = STRLEN( ps_line-line ) .


  DO lv_length TIMES .
    lv_index  =  sy-index - 1 .
    CASE ps_line+lv_index(1).
      WHEN c_element-quotes .
        IF lv_amount = 0 .
          IF sy-index > 1 .
            lv_end = lv_index - lv_start .
            lv_str = ps_line-line+lv_start(lv_end) .
            APPEND lv_str TO pt_table .
            lv_start = lv_index .
          ENDIF .
        ENDIF .
        ADD 1 TO lv_amount .

      WHEN space.
        IF lv_amount = 0 .
          lv_end = lv_index - lv_start .
          IF lv_end =  0 .
            lv_end  =  1 .
          ENDIF .
          lv_str = ps_line-line+lv_start(lv_end) .
          APPEND lv_str TO pt_table .
          lv_start = lv_index .
        ENDIF .

        lv_mod = lv_amount MOD 2 .

        CHECK lv_amount <> 0 AND lv_mod = 0.

        lv_end = lv_index - lv_start .
        lv_str = ps_line-line+lv_start(lv_end) .
        APPEND lv_str TO pt_table .
        lv_start = lv_index .
        lv_amount = 0 .

      WHEN OTHERS .
        lv_mod = lv_amount MOD 2 .
        CHECK lv_amount <> 0 AND lv_mod = 0.
        lv_end = lv_index - lv_start .
        lv_str = ps_line-line+lv_start(lv_end) .
        APPEND lv_str TO pt_table .
        lv_start = lv_index .
        lv_amount = 0 .
    ENDCASE .

  ENDDO .

  lv_str = ps_line-line+lv_start.
  APPEND lv_str TO pt_table .
  lv_start = lv_index .


  lv_mod = lv_amount MOD 2 .

  IF lv_mod <> 0 .
*& Exception "You maybe miss a single quoted symbol"
    PERFORM append_error_message USING 1 ps_line-line.
  ENDIF .


ENDFORM .                    "Process_Quoted

***********************************************************************
*&      Form  Separate_SQL_From_Word
***********************************************************************
FORM  separate_from_word  CHANGING pt_text TYPE ty_t_text .
  DATA : ls_text   TYPE  ty_s_text ,
         lt_temp   TYPE  ty_t_text ,
         lt_split  TYPE  ty_t_text ,
         lv_tab     TYPE  c       .

  CLEAR : lt_temp.

  LOOP AT pt_text INTO ls_text .

    IF ls_text CS c_element-quotes .
      CLEAR lt_split .
      PERFORM separated_quoted USING ls_text
                            CHANGING lt_split .
      APPEND LINES OF lt_split TO lt_temp .

    ELSE .
      CLEAR lt_split .
      SPLIT ls_text AT space INTO TABLE lt_split .
      APPEND LINES OF lt_split TO lt_temp .
    ENDIF .
  ENDLOOP .

*& Delete All Blank Line
  LOOP AT lt_temp INTO ls_text .
    CHECK NOT ls_text CS c_element-quotes .
    CONDENSE ls_text-line  .
    MODIFY lt_temp FROM ls_text .
  ENDLOOP .


  PERFORM get_asc_code    USING  c_element-hex
                       CHANGING  lv_tab.

  DELETE lt_temp WHERE LINE = space OR
                       LINE = lv_tab.

  pt_text[] = lt_temp[] .

ENDFORM.                    "Separate_SQL_From_Word

***********************************************************************
*&      Form  Case_To_Upper
***********************************************************************
FORM case_to_upper CHANGING pt_text .

  TRANSLATE pt_text TO UPPER CASE.

ENDFORM.                    "Case_To_Upper

***********************************************************************
*&      Form  Case_To_Lower
***********************************************************************
FORM case_to_lower CHANGING pt_text .

  TRANSLATE pt_text TO LOWER CASE.

ENDFORM.                    "Case_To_Upper

***********************************************************************
*&      Form  transfer_Case
***********************************************************************
FORM transfer_case    USING pv_type  TYPE  i
                   CHANGING pt_text  TYPE  ty_t_text  .
  DATA : ls_text  TYPE  ty_s_text .

  LOOP AT pt_text INTO ls_text .

    CASE pv_type .
      WHEN '1'.
        PERFORM case_to_lower CHANGING ls_text-line .
      WHEN '2'.
        PERFORM case_to_upper CHANGING ls_text-line .
    ENDCASE .

    MODIFY pt_text FROM ls_text .
  ENDLOOP .

ENDFORM .                    "transfer_Case

***********************************************************************
*&      Form  Check_SQL_Key_Word
***********************************************************************
FORM check_sql_key_word  USING pv_word
                      CHANGING pv_return TYPE i .

  DATA : lv_word       TYPE string .

  lv_word = pv_word .
  PERFORM case_to_upper CHANGING lv_word .

  CONCATENATE c_element-separ lv_word c_element-separ
         INTO lv_word .

  pv_return = 1.

  CHECK  c_keyword-k01 CS lv_word
    or   c_keyword-k02 CS lv_word
    or   c_keyword-k03 CS lv_word
    or   c_keyword-k04 CS lv_word.

  pv_return = 0.

ENDFORM .                    "Check_SQL_Key_Word

***********************************************************************
*&      Form  Upper_All_Word_SQL Exception Quotes Value
***********************************************************************
FORM upper_all_word_sql CHANGING pt_text TYPE ty_t_text .
  DATA : ls_text   TYPE  ty_s_text ,
         lv_return  TYPE  i       .

  LOOP AT pt_text INTO ls_text .

    CHECK NOT ls_text-line CS c_element-quotes .
    PERFORM check_sql_key_word USING ls_text
                            CHANGING lv_return .
    CASE lv_return.
      WHEN 0.
        PERFORM case_to_upper CHANGING ls_text-line .
      WHEN 1 .
        PERFORM case_to_lower CHANGING ls_text-line .
    ENDCASE .

    MODIFY pt_text FROM ls_text .

  ENDLOOP .

ENDFORM .                    "Upper_All_Word_SQL

***********************************************************************
*&      Form  Process_funct_word
***********************************************************************
FORM process_funct_word    CHANGING pt_text  TYPE ty_t_text.
  DATA : ls_text   TYPE  ty_s_text ,
         ls_temp   TYPE  ty_s_text ,
         lv_str_01  TYPE  string  ,
         lv_str_02  TYPE  string  ,
         lv_str_03  TYPE  string  ,
         lv_index   TYPE  i       ,
         lt_temp    TYPE  ty_s_text-line  ,
         lv_step    TYPE  i       VALUE 0.

*&           SUM  (  *  )  AS  TT
*&  lv_step    1   2  3  4  5   6

  LOOP AT pt_text INTO ls_text .

    CASE lv_step .
      WHEN 2 .
        IF ls_text-line CS c_element-left .
          CONCATENATE ls_temp-line c_element-left
                 INTO ls_temp-line.
          DELETE pt_text.
          lv_step = 3 .
        ELSE .
          PERFORM append_error_message USING 2 ls_text-line.
        ENDIF .
      WHEN 3 .
*        CHECK NOT ls_text-line CS c_element-left .
        IF ls_text-line  CS c_element-right .
          SPLIT ls_text-line AT c_element-right INTO lv_str_01 lv_str_02  .
          IF lv_str_01 IS NOT INITIAL .
            CONCATENATE ls_temp-line lv_str_01 c_element-right
                   INTO ls_temp-line
              SEPARATED BY space.
          ELSE .
            CONCATENATE ls_temp-line c_element-right
                   INTO ls_temp-line
              SEPARATED BY space.
          ENDIF .
          lv_step = 4 .
          IF lv_str_02 = c_element-as.
            CONCATENATE ls_temp-line lv_str_02
                   INTO ls_temp-line
              SEPARATED BY space.
            lv_step = 5 .
          ENDIF .
        ELSE .
          CONCATENATE ls_temp-line ls_text-line
                 INTO ls_temp-line
            SEPARATED BY space.
          lv_step = 3 .
        ENDIF .

        DELETE pt_text.

      WHEN 4 .
        CHECK NOT ls_text-line CS c_element-right.
        IF ls_text-line  CS  c_element-as .
          CONCATENATE ls_temp-line ls_text-line
                 INTO ls_temp-line
            SEPARATED BY space.
          DELETE pt_text.
          lv_step = 5 .
        ELSE .
*& Assign A Alias To The Field
          INSERT ls_temp INTO pt_text INDEX lv_index .
          lv_step = 0 .
        ENDIF .

      WHEN 5 .
        CONCATENATE c_element-separ ls_text-line c_element-separ
               INTO lv_str_01 .
        IF c_keyword-k01 CS lv_str_01  .
** Exception : Need A Field Alias
          PERFORM append_error_message USING 3 ls_text-line .
*          INSERT ls_temp INTO pt_text INDEX lv_index .
        ELSE .
          CONCATENATE ls_temp-line ls_text-line
                 INTO ls_temp-line
            SEPARATED BY space.
          MODIFY pt_text FROM ls_temp .
        ENDIF .

        lv_step = 0 .
    ENDCASE .

    lt_temp  =   ls_text-line .
    PERFORM case_to_upper CHANGING  lt_temp.

    IF lt_temp = c_element-sum   OR  lt_temp(4) = 'SUM(' OR
       lt_temp = c_element-min   OR  lt_temp(4) = 'MIN(' OR
       lt_temp = c_element-max   OR  lt_temp(4) = 'MAX(' OR
       lt_temp = c_element-avg   OR  lt_temp(4) = 'AVG(' OR
       lt_temp = c_element-count         OR  lt_temp(6) = c_element-count1 .

      ls_text-line  =  lt_temp.

      lv_index  =  sy-tabix .  lv_step   =  2 .

      IF ls_text-line CS c_element-left.
        SPLIT ls_text-line AT  c_element-left   INTO  lv_str_01  lv_str_02  .
        CONCATENATE lv_str_01   c_element-left   INTO  ls_temp-line .
        IF lv_str_02 IS INITIAL.
          lv_step = 3.
        ELSE .
          IF lv_str_02 CS c_element-right.
            SPLIT lv_str_02  AT  c_element-right  INTO  lv_str_01  lv_str_03 .
            IF lv_str_03 = c_element-as .
              CONCATENATE ls_temp-line lv_str_01 c_element-right lv_str_03
                     INTO ls_temp-line
                SEPARATED BY space.
              lv_step = 5 .
            ELSE.
              CONCATENATE ls_temp-line lv_str_01 c_element-right
                     INTO ls_temp-line
                SEPARATED BY space.
              lv_step = 4 .
            ENDIF .
          ELSE .
            CONCATENATE ls_temp-line lv_str_02
                    INTO ls_temp-line
               SEPARATED BY space.
            lv_step = 3 .
          ENDIF .
        ENDIF .
      ELSE .
        ls_temp-line  =  lv_str_01 .
        lv_step = 2.
      ENDIF .

      DELETE pt_text .
      CONTINUE .
    ENDIF .

  ENDLOOP .

ENDFORM .                    "Process_funct_word

***********************************************************************
*&      Form  get_all_Element_By_Key
***********************************************************************
FORM get_all_element_by_key    USING pt_text    TYPE ty_t_text
                                     pv_all     TYPE i
                                     pv_from    TYPE string
                            CHANGING pt_element TYPE ty_t_text .
  DATA : l_key_word  TYPE string  .

  CONCATENATE c_keyword-k01
              c_keyword-k02
              c_keyword-k03
*              c_keyword-k04
         INTO l_key_word .

  PERFORM get_all_element_by_range  USING pt_text
                                          pv_all
                                          pv_from
                                          l_key_word
                                 CHANGING pt_element.

ENDFORM .                    "Get_All_Element_By_Range




***********************************************************************
*&      Form  get_all_Element_By_range
***********************************************************************
FORM get_all_element_by_range  USING pt_text    TYPE ty_t_text
                                     pv_all     TYPE i
                                     pv_from    TYPE string
                                     pv_to      TYPE string
                            CHANGING pt_element TYPE ty_t_text .

  DATA : ls_text   TYPE ty_s_text     ,
         lv_flag    TYPE i  VALUE  1 ,
         lt_text    TYPE string      ,
         lv_to      TYPE string      .

  CLEAR : pt_element .

  CONCATENATE c_element-separ pv_to c_element-separ
         INTO lv_to .


  LOOP AT pt_text INTO ls_text .

    CASE ls_text-line .

      WHEN  pv_from.
        lv_flag = 0 .
        CONTINUE .

      WHEN  OTHERS.
        CHECK lv_flag = 0 .

        CONCATENATE c_element-separ ls_text-line  c_element-separ
               INTO lt_text .
        PERFORM case_to_upper CHANGING lt_text .
        IF lv_to CS lt_text .
          IF pv_all = 1 .
            EXIT .
          ELSE .
            lv_flag = 1 .
          ENDIF .

        ENDIF .
    ENDCASE .

    CHECK lv_flag = 0 .
    APPEND ls_text TO pt_element .

  ENDLOOP .

ENDFORM .                    "Get_All_Element_By_Range






***********************************************************************
*&      Form  Get_All_Fields_Name
***********************************************************************
FORM get_all_fields_name USING pt_text     TYPE  ty_t_text
                      CHANGING pt_element  TYPE  ty_t_element .
  DATA : lv_all   TYPE i VALUE 1 ,
         lt_temp TYPE ty_t_text   .

  CLEAR : lt_temp .
  PERFORM get_all_element_by_key   USING  pt_text    lv_all
                                          c_element-select
                                CHANGING  lt_temp .

  PERFORM get_element_alias        USING  lt_temp
                                CHANGING  pt_element .

ENDFORM .                    "Get_All_Fields_Name

***********************************************************************
*&      Form  Get_All_Tables_Name
***********************************************************************
FORM get_all_tables_name USING pt_text    TYPE  ty_t_text
                      CHANGING pt_element TYPE  ty_t_element .
  DATA : lv_all      TYPE i VALUE 1 ,
         lt_temp    TYPE ty_t_text   ,
         lt_element TYPE ty_t_element,
         ls_element TYPE ty_s_element.


  CLEAR : pt_element .

  lv_all = 1 .
  PERFORM get_all_element_by_key   USING  pt_text    lv_all
                                          c_element-from
                                CHANGING  lt_temp .

  PERFORM get_element_alias        USING  lt_temp
                                CHANGING  lt_element .

  APPEND LINES OF lt_element TO pt_element .

  lv_all = 0 .
  PERFORM get_all_element_by_key   USING  pt_text    lv_all
                                          c_element-join
                                CHANGING  lt_temp .

  PERFORM get_element_alias        USING  lt_temp
                                CHANGING  lt_element .

  APPEND LINES OF lt_element TO pt_element .

*& Process Table Alias Name
  LOOP AT pt_element INTO ls_element .

    IF ls_element-alias IS INITIAL  .
      ls_element-alias = ls_element-name .
    ENDIF .

    CONCATENATE ls_element-name c_element-as
                ls_element-alias
           INTO ls_element-display
        SEPARATED BY space .

    MODIFY pt_element FROM ls_element    .

  ENDLOOP .

ENDFORM.                    "Get_All_Tables_Name







***********************************************************************
*&      Form  Get_Element_Alias
***********************************************************************
FORM get_element_alias USING pt_text    TYPE ty_t_text
                    CHANGING pt_element TYPE ty_t_element .
  DATA : lt_temp    TYPE ty_t_text,
         ls_text    TYPE ty_s_text,
         ls_element TYPE ty_s_element,
         lv_flag     TYPE i VALUE 1 ,
         lv_text     TYPE string    .

  lt_temp = pt_text .
  CLEAR : pt_element,ls_element.

  DELETE lt_temp  WHERE LINE = c_element-single   OR
                        LINE = c_element-distinct .

  LOOP AT lt_temp INTO ls_text .
    lv_text  =  ls_text-line .
    PERFORM case_to_upper CHANGING lv_text .
    CASE lv_text .
      WHEN c_element-as.
        lv_flag = 0 .

      WHEN OTHERS .
        IF lv_flag = 0 .
          IF ls_text-line CS c_element-right AND
             ls_text-line CS c_element-left .
** Excpetion Nedd A Alias
            PERFORM append_error_message USING 3 ls_text-line .
          ELSE.
            ls_element-alias = ls_text-line .
            APPEND ls_element TO pt_element .
          ENDIF .
          CLEAR : ls_element .
          lv_flag = 1 .

        ELSE .
          IF ls_element IS NOT INITIAL .
            APPEND ls_element TO pt_element .
          ENDIF .
          CLEAR : ls_element .
          ls_element-name = ls_text-line .
        ENDIF .

    ENDCASE .

    AT LAST.
      IF lv_flag = 0.
** Excpetion Nedd A Alias
        PERFORM append_error_message USING 3 ls_text-line .
      ENDIF .

      IF ls_element IS NOT INITIAL .
        APPEND ls_element TO pt_element .
      ENDIF .
    ENDAT .
  ENDLOOP .

ENDFORM .                    "Get_Element_Alias

***********************************************************************
*&      Form  Get_All_Fields_Infor
***********************************************************************
FORM get_all_fields_infor USING pt_table  TYPE ty_t_element
                       CHANGING pt_fields TYPE ty_t_element .

*& Process Normal Fields
  PERFORM get_normal_fields_infor USING  pt_table
                               CHANGING  pt_fields .

*& Get Aggregate Function Fields
  PERFORM get_aggra_fields_infor  USING  pt_table
                               CHANGING  pt_fields .

*& Process Symbol * For All Fields
  PERFORM get_symbol_fields_infor USING  pt_table
                               CHANGING  pt_fields .

  PERFORM process_duplic_alias CHANGING  pt_fields .


ENDFORM .                    "Get_All_Fields_Infor

***********************************************************************
*&      Form  Get_Normal_Fields_Infor
***********************************************************************
FORM get_normal_fields_infor  USING pt_tables  TYPE  ty_t_element
                           CHANGING pt_fields  TYPE  ty_t_element .
  DATA : ls_table        TYPE  ty_s_element ,
         ls_field        TYPE  ty_s_element ,
         lt_fieldcat     TYPE  slis_t_fieldcat_alv WITH HEADER LINE,
         lv_table_alias   TYPE  dfies-fieldname,
         lv_field_name    TYPE  dfies-fieldname,
         lv_field_name01  TYPE  dfies-fieldname.

  LOOP AT pt_tables INTO ls_table .

    CLEAR : lt_fieldcat, lt_fieldcat[] .
    PERFORM get_table_infor USING  ls_table-name
                         CHANGING  lt_fieldcat[] .
*& Check Whether Table Exist
    IF lt_fieldcat[] IS INITIAL .
      PERFORM append_error_message USING 5 ls_table-name .
      CONTINUE.
    ENDIF .

    LOOP AT pt_fields INTO ls_field WHERE label IS INITIAL.
*& Skip Symbol *
      CHECK NOT ls_field-name CS c_element-all_fields .

      IF ls_field-name CS c_element-ss .
        SPLIT ls_field-name AT c_element-ss INTO lv_table_alias lv_field_name .
        CHECK lv_table_alias = ls_table-alias .
      ELSE .
        lv_field_name  = ls_field-name .
      ENDIF .

      lv_field_name01  = lv_field_name .
      PERFORM case_to_upper CHANGING lv_field_name01 .

      READ TABLE lt_fieldcat WITH KEY fieldname = lv_field_name01 .

      CHECK sy-subrc  = 0 .

      ls_field-name   = lv_field_name   .
      ls_field-source = ls_table-name  .
      ls_field-link   = ls_table-alias .

      ls_field-label  = lt_fieldcat-seltext_l .
      IF ls_field-alias IS INITIAL.
        ls_field-alias  = ls_field-name .
      ENDIF .

      CONCATENATE ls_field-link c_element-ss ls_field-name
             INTO ls_field-display .

      MODIFY pt_fields FROM ls_field .
    ENDLOOP .

  ENDLOOP .

ENDFORM .                    "Get_Normal_Fields_infor

***********************************************************************
*&      Form  Get_Aggra_Fields_Infor
***********************************************************************
FORM get_aggra_fields_infor  USING  pt_tables TYPE ty_t_element
                          CHANGING  pt_fields TYPE ty_t_element .
  DATA : ls_field  TYPE  ty_s_element ,
         ls_temp   TYPE  ty_s_element ,
         lt_text   TYPE  ty_t_text    ,
         ls_text   TYPE  ty_s_text    ,
         lv_step    TYPE  i VALUE 0  ,
         lv_index   TYPE  i          ,
         lv_str_01  TYPE  string     ,
         lv_str_02  TYPE  string     .

  LOOP AT pt_fields INTO ls_field WHERE label IS INITIAL.

    IF ls_field-name CS c_element-sum OR  ls_field-name CS c_element-min OR
       ls_field-name CS c_element-max OR  ls_field-name CS c_element-avg OR
       ls_field-name CS c_element-count .

      CLEAR : lt_text .

      SPLIT ls_field-name AT space INTO TABLE lt_text.
      DELETE lt_text WHERE LINE = space .

*& Get Field Name
      READ TABLE lt_text INTO ls_text WITH KEY line = c_element-right .
      lv_index  =  sy-tabix - 1 .
      CLEAR : ls_text .
      READ TABLE lt_text INTO ls_text  INDEX lv_index .
      IF ls_text = c_element-all_fields.
        ls_field-label  = c_element-funct .
      ELSE.
        PERFORM get_field_infor_by_name  USING pt_tables
                                               ls_text-line
                                      CHANGING ls_field .
        CONCATENATE ls_field-link c_element-ss ls_field-name
               INTO ls_text .
      ENDIF .
      MODIFY lt_text FROM ls_text INDEX lv_index .

*& Get Field Alias
      CLEAR : ls_text .
      READ TABLE lt_text INTO ls_text WITH KEY line = c_element-as .
      IF sy-subrc = 0 .
        lv_index  =  sy-tabix + 1 .
        CLEAR : ls_text .
        READ TABLE lt_text INTO ls_text INDEX lv_index .
        IF sy-subrc = 0 .
          ls_field-alias  =  ls_text-line .
        ELSE .
          ls_field-alias  =  c_element-funct.
        ENDIF .
      ELSE .
        ls_field-alias  =  c_element-funct.
      ENDIF .

*& Set Display
      CLEAR : ls_field-display .
      LOOP AT lt_text INTO ls_text .
        IF ls_text-line = c_element-as .
          EXIT .
        ENDIF .
        CONCATENATE ls_field-display ls_text-line
               INTO ls_field-display
          SEPARATED BY space .
      ENDLOOP .


      CONDENSE : ls_field-display .


      MODIFY pt_fields FROM ls_field .

    ENDIF .

  ENDLOOP .
ENDFORM.                    "Get_Aggra_Fields_infor

***********************************************************************
*&      Form  Get_Symbol_Fields_Infor
***********************************************************************
FORM get_symbol_fields_infor USING pt_tables TYPE ty_t_element
                          CHANGING pt_fields TYPE ty_t_element .
  DATA : ls_table        TYPE  ty_s_element ,
         ls_field        TYPE  ty_s_element ,
         lt_fieldcat     TYPE  slis_t_fieldcat_alv WITH HEADER LINE,
         lv_table_alias   TYPE  dfies-fieldname,
         lv_field_name    TYPE  dfies-fieldname,
         lt_temp         TYPE  ty_t_element     ,
         ls_temp         TYPE  ty_s_element     .

  LOOP AT pt_fields INTO ls_field WHERE label IS INITIAL.
    CLEAR : lv_table_alias, lv_field_name .

    IF ls_field-name CS c_element-ss .
      SPLIT ls_field-name AT c_element-ss INTO lv_table_alias lv_field_name .
    ELSE .
      lv_field_name = ls_field-name .
    ENDIF .

    CHECK lv_field_name  =  c_element-all_fields .

    CLEAR : lt_temp[] .

    LOOP AT pt_tables INTO ls_table .
      CLEAR : lt_fieldcat, lt_fieldcat[] .

      CHECK lv_table_alias = ls_table-alias OR
            lv_table_alias IS INITIAL .

      PERFORM get_table_infor USING  ls_table-name
                           CHANGING  lt_fieldcat[] .
      LOOP AT lt_fieldcat  .
        CLEAR : ls_temp .
        ls_temp-name    =  lt_fieldcat-fieldname .
        ls_temp-alias   =  lt_fieldcat-fieldname .
        ls_temp-source  =  ls_table-name         .
        ls_temp-link    =  ls_table-alias        .
        ls_temp-label   =  lt_fieldcat-seltext_l .

        CONCATENATE ls_temp-link c_element-ss ls_temp-name
               INTO ls_temp-display .
        APPEND ls_temp TO lt_temp .
      ENDLOOP .
    ENDLOOP .

*& Deletle The Sybmol *
    DELETE pt_fields INDEX sy-tabix .

    INSERT LINES OF lt_temp INTO pt_fields  INDEX sy-tabix .

  ENDLOOP .


ENDFORM .                    "Get_Symbol_Fields_infor







***********************************************************************
*&      Form  Process_Duplic_Alias
***********************************************************************
FORM process_duplic_alias CHANGING  pt_fields TYPE ty_t_element.
  DATA : ls_prior  TYPE  ty_s_element ,
         ls_field  TYPE  ty_s_element ,
         lv_i       TYPE  n LENGTH 2 .

  LOOP AT pt_fields INTO ls_field .

    ls_field-index =  sy-tabix .

    MODIFY pt_fields FROM ls_field .

    IF ls_field-display IS INITIAL .
      PERFORM append_error_message USING 6 ls_field-name .
    ENDIF .
  ENDLOOP .

  SORT pt_fields BY alias index .

  LOOP AT pt_fields INTO ls_field.

    IF ls_prior-alias  = ls_field-alias .
      ADD 1 TO lv_i .
      CONCATENATE ls_field-alias '_' lv_i
             INTO ls_field-alias .
    ELSE .
      lv_i = 1 .
      ls_prior = ls_field .
    ENDIF .

    CONCATENATE ls_field-display  c_element-as  ls_field-alias
           INTO ls_field-display
      SEPARATED BY space .

    MODIFY pt_fields FROM ls_field .

  ENDLOOP .

  SORT pt_fields BY index .

ENDFORM .                    "Process_Duplic_Alias







***********************************************************************
*&      Form  Get_Field_Infor_By_Name
***********************************************************************
FORM get_field_infor_by_name  USING pt_tables  TYPE ty_t_element
                                    pv_name
                           CHANGING ps_field   TYPE ty_s_element.
  DATA: ls_table      TYPE ty_s_element ,
        lv_table_alias TYPE dfies-fieldname,
        lv_field_name  TYPE dfies-fieldname.


  IF pv_name CS c_element-ss .
    SPLIT pv_name AT c_element-ss INTO lv_table_alias lv_field_name .
    READ TABLE pt_tables INTO ls_table WITH KEY alias = lv_table_alias .
    CHECK sy-subrc = 0  .
    PERFORM get_field_infor_in_table  USING ls_table-name
                                            lv_field_name
                                   CHANGING ps_field      .
    ps_field-link = ls_table-alias .
    ps_field-name = lv_field_name   .
  ELSE .

    LOOP AT pt_tables INTO ls_table .
      PERFORM get_field_infor_in_table  USING ls_table-name
                                              pv_name
                                     CHANGING ps_field      .

      IF ps_field-alias IS NOT INITIAL .
        ps_field-link = ls_table-alias .
        ps_field-name = pv_name         .
        EXIT .
      ENDIF .
    ENDLOOP .

  ENDIF .

ENDFORM .                    "Get_Field_Infor_By_Name

***********************************************************************
*&      Form  Get_Field_Infor_In_Table
***********************************************************************
FORM get_field_infor_in_table  USING pt_table_name
                                     pv_name
                            CHANGING ps_field       TYPE ty_s_element.
  DATA : lv_field_name01  TYPE  dfies-fieldname,
         lt_fieldcat     TYPE slis_t_fieldcat_alv WITH HEADER LINE .

  CLEAR : lt_fieldcat, lt_fieldcat[] .

  PERFORM get_table_infor USING  pt_table_name
                       CHANGING  lt_fieldcat[] .

  lv_field_name01  = pv_name.
  PERFORM case_to_upper CHANGING lv_field_name01 .

  READ TABLE lt_fieldcat WITH KEY fieldname = lv_field_name01 .

  CHECK sy-subrc  = 0 .
  ps_field-name   = pv_name   .
  ps_field-source = pt_table_name  .
  ps_field-label  = lt_fieldcat-seltext_l .

  IF ps_field-alias IS INITIAL.
    ps_field-alias  = ps_field-name .
  ENDIF .

ENDFORM .                    "get_field_infor_in_table

***********************************************************************
*&      Form  Get_Table_Infor
***********************************************************************
FORM get_table_infor USING  pv_table
                  CHANGING  pt_fieldcat TYPE slis_t_fieldcat_alv .
  DATA : lv_table  TYPE  dd02l-tabname .

  lv_table  =  pv_table .

  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = lv_table
      i_client_never_display = 'X'
    CHANGING
      ct_fieldcat            = pt_fieldcat
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

ENDFORM .                    "Get_Table_Infor

***********************************************************************
*&   Form Get_asc_code
***********************************************************************
FORM get_asc_code      USING  pv_hex
                    CHANGING  pv_char .
  DATA: lv_string(1024).

  CALL FUNCTION 'STPU1_HEX_TO_CHAR'
    EXPORTING
      hex_string  = pv_hex
    IMPORTING
      char_string = lv_string.

  pv_char = lv_string.

ENDFORM.                    " get_asc_code

***********************************************************************
*&      Form  Get_Fields_And_Catalog
***********************************************************************
FORM get_sql_fields          USING     pt_text     TYPE ty_t_text
                                       pt_tables   TYPE ty_t_element
                             CHANGING  pt_fields   TYPE ty_t_element.

  PERFORM get_all_fields_name      USING pt_text
                                CHANGING pt_fields.


  PERFORM get_all_fields_infor     USING pt_tables
                                CHANGING pt_fields.


ENDFORM .                    "Get_Fields_And_Catalog

***********************************************************************
*&      Form  Get_On_Tables
***********************************************************************
FORM get_on_tables           USING  pt_text    TYPE ty_t_text
                                    pt_tables  TYPE ty_t_element
                           CHANGING pt_on      TYPE ty_t_text.

  DATA : ls_text  TYPE  ty_s_text ,
         lv_str    TYPE  string  ,
         ls_table TYPE  ty_s_element,
         lv_step   TYPE  i  VALUE 0,
         lv_index  TYPE  i  VALUE 0,
         lv_join   TYPE  i  VALUE 0,
         lv_on     TYPE  i  VALUE 0,
         lv_mod    TYPE  i  VALUE 0.

  CLEAR: pt_on .


  LOOP AT pt_text INTO ls_text .

    CASE ls_text-line .
      WHEN c_element-from  .
        lv_step = 1 .  CONTINUE .

      WHEN c_element-inner .
        lv_join  = 0 .  CHECK lv_on > 0 .
        lv_on    = 0 .  APPEND lv_str TO pt_on .
        lv_step = 0 .

      WHEN c_element-left_j .
        lv_join  = 1 .  CHECK lv_on > 0 .
        lv_on    = 0 .  APPEND lv_str TO pt_on .
        lv_step = 0 .

      WHEN c_element-join.
        lv_step  = 2 .  CHECK lv_on > 0 .
        lv_on    = 0 .  APPEND lv_str TO pt_on .

      WHEN c_element-on .
        lv_step  = 3 .  CHECK lv_on > 0 .
        lv_on    = 0 . APPEND lv_str TO pt_on .

      WHEN  c_element-where OR
            c_element-order OR
            c_element-group OR
            c_element-have.
        CHECK lv_on > 0 .   lv_on    = 0 .
        APPEND lv_str TO pt_on .
        EXIT .
    ENDCASE .


    CASE lv_step .
      WHEN 1 .
        ADD 1 TO lv_index .
        READ TABLE pt_tables INTO ls_table INDEX lv_index .
        CONCATENATE c_element-from ls_table-display
               INTO lv_str
          SEPARATED BY space .
        SHIFT lv_str BY 2 PLACES RIGHT.
        APPEND lv_str TO pt_on .
        lv_step = 0 .
      WHEN 2 .
        ADD 1 TO lv_index .
        READ TABLE pt_tables INTO ls_table INDEX lv_index .
        IF lv_join = 0 .
          CONCATENATE c_element-inner c_element-join ls_table-display
                 INTO lv_str
            SEPARATED BY space .
          SHIFT lv_str BY 1 PLACES RIGHT.
          APPEND lv_str TO pt_on .
        ELSE .
          CONCATENATE c_element-left_j c_element-join ls_table-display
                 INTO lv_str
            SEPARATED BY space .
          SHIFT lv_str BY 2 PLACES RIGHT.
          APPEND lv_str TO pt_on .
        ENDIF .
        lv_step = 0 .
        lv_join = 0 .
      WHEN 3 .
        ADD 1 TO lv_on .
        IF lv_on = 1   .
          CONCATENATE c_element-on ls_text-line
                 INTO lv_str
            SEPARATED BY space .
          SHIFT lv_str BY 4 PLACES RIGHT.
        ELSE .
          lv_mod = lv_on MOD 8 .
          IF lv_mod = 0 .
            APPEND lv_str TO pt_on .
            CLEAR : lv_str .
            lv_str =  ls_text-line .
            CASE ls_text-line .
              WHEN c_element-or .
                SHIFT lv_str BY 4 PLACES RIGHT.
              WHEN c_element-and.
                SHIFT lv_str BY 3 PLACES RIGHT.
              WHEN OTHERS.
                SHIFT lv_str BY 7 PLACES RIGHT.
            ENDCASE .
          ELSE .
            CONCATENATE lv_str ls_text-line
                   INTO lv_str
              SEPARATED BY space .
          ENDIF .
        ENDIF .

      WHEN 4 .

    ENDCASE .

    AT LAST .
      IF lv_on > 0 .
        lv_on = 0 .
        APPEND lv_str TO pt_on .
        lv_step = 0 .
      ENDIF .
    ENDAT .

  ENDLOOP .
ENDFORM .                    "Get_On_Tables

***********************************************************************
*&      Form  Get_Where
***********************************************************************
FORM get_where               USING  pt_text  TYPE  ty_t_text
                          CHANGING pt_where  TYPE  ty_t_text .
  DATA : ls_text  TYPE  ty_s_text ,
         lv_where  TYPE  i  VALUE 0 ,
         lv_flag   TYPE  i  VALUE 1 ,
         lv_mod    TYPE  i  VALUE 0 ,
         lv_str    TYPE  string     .


  LOOP AT pt_text INTO ls_text .
    CASE ls_text-line .
      WHEN c_element-where .
        lv_flag  =  0 .
        lv_where =  -1 .
      WHEN c_element-group OR c_element-have OR c_element-order .
        lv_flag  =  1 .
    ENDCASE .

    IF lv_flag = 0 .
      ADD 1 TO lv_where .

      IF lv_where = 0 .
        lv_str  =  ls_text-line .
        SHIFT lv_str BY 1 PLACES RIGHT.
      ELSE .
        lv_mod  =  lv_where MOD 8 .
        IF lv_mod = 0 .
          APPEND lv_str TO pt_where .
          CLEAR : lv_str .
          lv_str =  ls_text-line .
          CASE ls_text-line .
            WHEN c_element-or .
              SHIFT lv_str BY 4 PLACES RIGHT.
            WHEN c_element-and.
              SHIFT lv_str BY 3 PLACES RIGHT.
            WHEN OTHERS.
              SHIFT lv_str BY 7 PLACES RIGHT.
          ENDCASE .
        ELSE .
          CONCATENATE lv_str ls_text-line
                 INTO lv_str
            SEPARATED BY space .
        ENDIF .
      ENDIF .
    ENDIF .

    AT LAST.
      CHECK  lv_str IS NOT INITIAL .
      APPEND lv_str TO pt_where .
    ENDAT .
  ENDLOOP .


ENDFORM .                    "Get_Where





***********************************************************************
*&      Form  Get_Group
***********************************************************************
FORM get_group               USING pt_text   TYPE  ty_t_text
                          CHANGING pt_group  TYPE  ty_t_text .
  DATA : ls_text  TYPE  ty_s_text ,
         lv_group  TYPE  i  VALUE 0 ,
         lv_flag   TYPE  i  VALUE 1 ,
         lv_mod    TYPE  i  VALUE 0 ,
         lv_str    TYPE  string     .


  LOOP AT pt_text INTO ls_text .
    CASE ls_text-line .
      WHEN c_element-group   .
        lv_flag  =  0 .
        lv_group =  0 .
      WHEN c_element-have OR c_element-order .
        lv_flag  =  1 .
    ENDCASE .

    IF lv_flag = 0 .
      ADD 1 TO lv_group .

      IF lv_group = 1 .
        lv_str  =  ls_text-line .
        SHIFT lv_str BY 1 PLACES RIGHT.
      ELSE .
        lv_mod  =  lv_group MOD 8 .
        IF lv_mod = 0 .
          APPEND lv_str TO pt_group .
          CLEAR : lv_str .
          lv_str =  ls_text-line .
          SHIFT lv_str BY 7 PLACES RIGHT.
        ELSE .
          CONCATENATE lv_str ls_text-line
                 INTO lv_str
            SEPARATED BY space .
        ENDIF .
      ENDIF .
    ENDIF .

    AT LAST.
      CHECK  lv_str IS NOT INITIAL .
      APPEND lv_str TO pt_group .
    ENDAT .
  ENDLOOP .

ENDFORM .                    "Get_Group

***********************************************************************
*&      Form  Get_Have
***********************************************************************
FORM get_have                USING pt_text   TYPE  ty_t_text
                          CHANGING pt_have   TYPE  ty_t_text .
  DATA : ls_text  TYPE  ty_s_text ,
         lv_have   TYPE  i  VALUE 0 ,
         lv_flag   TYPE  i  VALUE 1 ,
         lv_mod    TYPE  i  VALUE 0 ,
         lv_str    TYPE  string     .


  LOOP AT pt_text INTO ls_text .
    CASE ls_text-line .
      WHEN c_element-have .
        lv_flag  =  0 .
        lv_have  =  0 .
      WHEN c_element-order .
        lv_flag  =  1 .
    ENDCASE .

    IF lv_flag = 0 .
      ADD 1 TO lv_have .

      IF lv_have = 1 .
        lv_str  =  ls_text-line .
      ELSE .
        lv_mod  =  lv_have MOD 8 .
        IF lv_mod = 0 .
          APPEND lv_str TO pt_have .
          CLEAR : lv_str .
          lv_str =  ls_text-line .
          SHIFT lv_str BY 7 PLACES RIGHT.
        ELSE .
          CONCATENATE lv_str ls_text-line
                 INTO lv_str
            SEPARATED BY space .
        ENDIF .
      ENDIF .
    ENDIF .

    AT LAST.
      CHECK  lv_str IS NOT INITIAL .
      APPEND lv_str TO pt_have .
    ENDAT .
  ENDLOOP .

ENDFORM .                    "Get_Have


***********************************************************************
*&      Form  Get_Order
***********************************************************************
FORM get_order               USING pt_text   TYPE  ty_t_text
                          CHANGING pt_order  TYPE  ty_t_text .
  DATA : ls_text  TYPE  ty_s_text ,
         lv_order  TYPE  i  VALUE 0 ,
         lv_flag   TYPE  i  VALUE 1 ,
         lv_mod   TYPE  i  VALUE 0 ,
         lv_str    TYPE  string     .


  LOOP AT pt_text INTO ls_text .
    CASE ls_text-line .
      WHEN c_element-order .
        lv_flag   =  0 .
        lv_order  =  0 .
      WHEN c_element-select OR c_element-from  OR c_element-where OR
           c_element-have   OR c_element-inner OR c_element-join .
        CHECK lv_flag = 0 .
        PERFORM append_error_message USING 9 ls_text-line.
        EXIT .
    ENDCASE .

    IF lv_flag = 0 .
      ADD 1 TO lv_order .

      IF lv_order = 1 .
        lv_str  =  ls_text-line .
        SHIFT lv_str BY 1 PLACES RIGHT.
      ELSE .
        lv_mod  =  lv_order MOD 8 .
        IF lv_mod = 0 .
          APPEND lv_str TO pt_order .
          CLEAR : lv_str .
          lv_str =  ls_text-line .
          SHIFT lv_str BY 7 PLACES RIGHT.
        ELSE .
          CONCATENATE lv_str ls_text-line
                 INTO lv_str
            SEPARATED BY space .
        ENDIF .
      ENDIF .
    ENDIF .

    AT LAST.
      CHECK  lv_str IS NOT INITIAL .
      APPEND lv_str TO pt_order .
    ENDAT .
  ENDLOOP .


ENDFORM .                    "Get_Order

***********************************************************************
*&      Form  perpare_SQL_Element
***********************************************************************
FORM perpare_sql_element   CHANGING pt_text   TYPE  ty_t_text
                                    pt_fields TYPE  ty_t_element
                                    pt_tables TYPE  ty_t_element
                                    pt_on     TYPE  ty_t_text
                                    pt_where  TYPE  ty_t_text
                                    pt_group  TYPE  ty_t_text
                                    pt_have   TYPE  ty_t_text
                                    pt_order  TYPE  ty_t_text .

  PERFORM move_comments_in_sql  CHANGING pt_text .

  IF pt_text IS INITIAL .
    PERFORM append_error_message USING 8 '' .
    EXIT .
  ENDIF .

  PERFORM separate_from_word    CHANGING pt_text .
  PERFORM upper_all_word_sql    CHANGING pt_text .
  PERFORM process_funct_word    CHANGING pt_text .

  PERFORM get_all_tables_name      USING pt_text
                                CHANGING pt_tables.

  IF pt_tables IS INITIAL .
    PERFORM append_error_message USING 10 '' .
    EXIT .
  ENDIF .

  PERFORM get_sql_fields           USING pt_text
                                         pt_tables
                                CHANGING pt_fields.

  IF pt_fields IS INITIAL .
    PERFORM append_error_message USING 11 '' .
    EXIT .
  ENDIF .

  PERFORM get_on_tables            USING pt_text
                                         pt_tables
                                CHANGING pt_on .

  PERFORM get_where                USING pt_text
                                CHANGING pt_where .

  PERFORM get_group                USING pt_text
                                CHANGING pt_group .

  PERFORM get_have                 USING pt_text
                                CHANGING pt_have .

  PERFORM get_order                USING pt_text
                                CHANGING pt_order .


ENDFORM .                    "Perpare_SQL_Element





***********************************************************************
*&      Form  Get_Ref_Table
***********************************************************************
FORM get_ref_table  USING  pt_table_alias  TYPE ddobjname
                           pt_tables       TYPE ty_t_element
                 CHANGING  pt_table_name   TYPE ddobjname  .
  DATA : ls_element  TYPE  ty_s_element .

  READ TABLE pt_tables INTO ls_element
                      WITH KEY alias = pt_table_alias .

  pt_table_name  =  ls_element-name .


ENDFORM .                    "Get_Ref_Table

***********************************************************************
*&      Form  Check_SQL_With_Sub_Query
***********************************************************************
FORM check_sql_with_sub_query      USING pt_text   TYPE ty_t_text
                                CHANGING pv_return TYPE i.
  DATA : ls_text TYPE ty_s_text .

  LOOP AT pt_text INTO  ls_text .

    CHECK ls_text-line CP c_element-from .

    ADD 1 TO pv_return .

  ENDLOOP.


ENDFORM .                    "Check_SQL_With_Sub_Query

***********************************************************************
*&      Form  Execute_SQL
***********************************************************************
FORM execute_sql          USING  pt_text   TYPE ty_t_text
                       CHANGING  lv_number TYPE i       .
  DATA: lt_fields   TYPE  ty_t_element  ,
        lt_tables   TYPE  ty_t_element  ,
        lt_select   TYPE  ty_t_text     ,
        lt_on       TYPE  ty_t_text     ,
        lt_where    TYPE  ty_t_text     ,
        lt_group    TYPE  ty_t_text     ,
        lt_have     TYPE  ty_t_text     ,
        lt_order    TYPE  ty_t_text     ,
        lt_fieldcat TYPE  lvc_t_fcat  ,
        lt_temp     TYPE  ty_t_text     ,
        lv_type      TYPE  string      ,
        lv_act       TYPE  i VALUE 1   ,
        lv_return    TYPE  i   VALUE 0 .


  lt_temp[] =  pt_text[] .


  PERFORM format_sql_adapter      USING  lv_act
                               CHANGING lt_temp      lv_type
                                        lt_fields    lt_tables
                                        lt_select    lt_on
                                        lt_where     lt_group
                                        lt_have      lt_order
                                        lv_return .


*  PERFORM check_sql_with_sub_query USING lt_temp[]
*                                CHANGING lv_return .

  IF <table> IS ASSIGNED .
    CLEAR : <table> .
    UNASSIGN <table> .
  ENDIF .

  IF gt_exception[] IS INITIAL .
    CASE lv_return.
*& SQL With Error
      WHEN 0 .


*& Without Sub Query
      WHEN 1 .

        PERFORM get_data_in_dynamic_sql USING lt_temp[]    lv_type
                                              lt_fields    lt_select
                                              lt_on        lt_where
                                              lt_group     lt_have
                                              lt_order .

*& With Sub Query
      WHEN OTHERS .
        PERFORM get_data_in_dynamic_prog USING lt_temp[]
                                               lv_type
                                               lt_fields.
    ENDCASE .
  ENDIF .

  IF gt_exception IS INITIAL .
*& Show Data
    PERFORM prepare_alv_field_cat    USING lt_fields
                                  CHANGING lt_fieldcat .
    lv_number =  sy-dbcnt .
    PERFORM show_data_in_alv         USING go_grid  <table>
                                           lt_fieldcat[] .
  ELSE .
*& Show Exception
    PERFORM prepare_alv_error_field_cat CHANGING lt_fieldcat .
    PERFORM show_data_in_alv         USING go_grid   gt_exception
                                           lt_fieldcat[] .
  ENDIF .

  gv_postion = 50 .
  PERFORM set_splitter_postion     USING go_splitter1
                                         gv_postion .

ENDFORM .                    "Execute_SQL

***********************************************************************
*&      Form  Get_Stucture_Define
***********************************************************************
FORM get_stucture_define        USING pt_fields  TYPE  ty_t_element
                             CHANGING pt_text    TYPE  ty_t_text   .
  DATA : ls_text   TYPE  ty_s_text ,
         ls_field  TYPE  ty_s_element .

  CLEAR : pt_text[] .
  ls_text  =  'TYPES : BEGIN OF TY_S_DATA,'.
  APPEND ls_text TO pt_text .

  LOOP AT pt_fields INTO ls_field .
    CLEAR : ls_text .
    IF  ls_field-display(6) = c_element-count1 .
      CONCATENATE ls_field-alias 'TYPE i ,'
             INTO ls_text-line
        SEPARATED BY space .
    ELSE .
      CONCATENATE ls_field-source '-' ls_field-name
             INTO ls_text-line .
      CONCATENATE ls_field-alias 'TYPE' ls_text-line ','
             INTO ls_text-line
        SEPARATED BY space .
    ENDIF .
    SHIFT ls_text-line BY 10 PLACES RIGHT .
    APPEND ls_text TO pt_text .

  ENDLOOP .

  ls_text  =  '        END   OF TY_S_DATA.'.
  APPEND ls_text TO pt_text .

ENDFORM.                    "Get_Stucture_Define

***********************************************************************
*&      Form  format_sql_adapter
***********************************************************************
FORM format_sql_adapter      USING  pv_act     TYPE  i
                          CHANGING  pt_text    TYPE  ty_t_text
                                    pv_type    TYPE  string
                                    pt_fields  TYPE  ty_t_element
                                    pt_tables  TYPE  ty_t_element
                                    pt_select  TYPE  ty_t_text
                                    pt_on      TYPE  ty_t_text
                                    pt_where   TYPE  ty_t_text
                                    pt_group   TYPE  ty_t_text
                                    pt_have    TYPE  ty_t_text
                                    pt_order   TYPE  ty_t_text
                                    pv_return  type  i.
  Data : lt_temp     TYPE  ty_t_text .

  PERFORM perpare_sql_element  CHANGING pt_text     pt_fields
                                        pt_tables   pt_on
                                        pt_where    pt_group
                                        pt_have     pt_order.


  PERFORM check_sql_with_sub_query
                                USING pt_text
                                CHANGING pv_return .

  CASE pv_return.
*& SQL With Error
    WHEN 0 .

*& Without Sub Query
    WHEN 1 .

*& Format Select Fields
      PERFORM format_fields           USING  pt_fields
                                             pv_act
                                   CHANGING  pt_select
                                             pt_text
                                             pv_type    .

*& Format Table Name
      PERFORM format_tables           USING  pt_on
                                   CHANGING  pt_text  .

*& Format Where Condition
      PERFORM format_where            USING  pt_where
                                   CHANGING  pt_text   .

*& Format Group By
      PERFORM format_group            USING  pt_group
                                   CHANGING  pt_text   .

*& Format Having
      PERFORM format_have             USING  pt_have
                                   CHANGING  pt_text   .
*& Format Order By
      PERFORM format_order            USING  pt_order
                                   CHANGING  pt_text   .

*& Trnasfer Case
      PERFORM transfer_case           USING  gv_case
                                   CHANGING  pt_text   .

    WHEN OTHERS .
*& Format Select Fields
      lt_temp[]  =  pt_text .
      PERFORM format_fields           USING  pt_fields
                                             pv_act
                                   CHANGING  pt_select
                                             lt_temp
                                             pv_type    .

      IF pv_act <> 1 .
        PERFORM append_error_message USING 7 ''.
      ENDIF .
  ENDCASE .

ENDFORM .                    "format_sql

***********************************************************************
*&      Form  format_sql
***********************************************************************
FORM format_sql   CHANGING  pt_text    TYPE  ty_t_text .
  DATA:  lt_fields   TYPE  ty_t_element ,
         lt_tables   TYPE  ty_t_element ,
         lt_fieldcat TYPE  lvc_t_fcat ,
         lt_select   TYPE  ty_t_text    ,
         lt_on       TYPE  ty_t_text    ,
         lt_where    TYPE  ty_t_text    ,
         lt_group    TYPE  ty_t_text    ,
         lt_have     TYPE  ty_t_text    ,
         lt_order    TYPE  ty_t_text    ,
         lv_act       TYPE  i VALUE 0  ,
         lv_type      TYPE  string     ,
         lv_return    type  i          .

  PERFORM format_sql_adapter      USING  lv_act
                               CHANGING  pt_text     lv_type
                                         lt_fields  lt_tables
                                         lt_select  lt_on
                                         lt_where   lt_group
                                         lt_have    lt_order
                                         lv_return.


*& Show Exception
  IF gt_exception IS INITIAL AND pt_text[] IS NOT INITIAL.
    PERFORM load_text_from_table     USING go_editor
                                  CHANGING pt_text .
    gv_postion = 100 .

  ELSE .
    PERFORM prepare_alv_error_field_cat CHANGING lt_fieldcat .

    PERFORM show_data_in_alv         USING go_grid
                                           gt_exception
                                           lt_fieldcat[] .
    gv_postion = 50 .
  ENDIF .

  PERFORM set_splitter_postion       USING go_splitter1
                                           gv_postion .

ENDFORM .                    "format_sql

************************************************************************
*&      Form  bud_sturcture
************************************************************************
FORM bud_sturcture  USING  pt_text  TYPE  ty_t_text
                  CHANGING pt_temp  TYPE  ty_t_text  .

  DATA:  lt_fields   TYPE  ty_t_element ,
         lt_tables   TYPE  ty_t_element ,
         lt_fieldcat TYPE  lvc_t_fcat ,
         lt_select   TYPE  ty_t_text    ,
         lt_on       TYPE  ty_t_text    ,
         lt_where    TYPE  ty_t_text    ,
         lt_group    TYPE  ty_t_text    ,
         lt_have     TYPE  ty_t_text    ,
         lt_order    TYPE  ty_t_text    ,
         lv_act      TYPE  i VALUE 0  ,
         lv_type      TYPE  string     ,
         lt_temp      TYPE  ty_t_text    ,
         lv_return    type  i          .

  CLEAR : pt_temp .
  lt_temp  =  pt_text .

  PERFORM format_sql_adapter      USING  lv_act
                               CHANGING  lt_temp     lv_type
                                         lt_fields  lt_tables
                                         lt_select  lt_on
                                         lt_where   lt_group
                                         lt_have    lt_order
                                         lv_return.


*& Show Exception
  IF gt_exception IS INITIAL AND pt_text[] IS NOT INITIAL.
    PERFORM get_stucture_define        USING lt_fields
                                    CHANGING pt_temp     .
  ELSE .
    PERFORM prepare_alv_error_field_cat CHANGING lt_fieldcat .

    PERFORM show_data_in_alv           USING go_grid
                                             gt_exception
                                             lt_fieldcat[] .
    gv_postion = 50 .
    PERFORM set_splitter_postion       USING go_splitter1
                                             gv_postion .

  ENDIF .


  gv_postion = 70 .
  PERFORM set_splitter_postion       USING go_splitter
                                           gv_postion .

ENDFORM .                    "bud_sturcture
