*----------------------------------------------------------------------*
***INCLUDE ZCWU_TEST_UTILITY_F_INITF01 .
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  F_INIT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_init .
  DATA: lv_fname  TYPE char10.
  DATA: lt_tool_spec  TYPE STANDARD TABLE OF zcwu_tool_spec,
        ls_tool_spec  TYPE zcwu_tool_spec.

  FIELD-SYMBOLS: <ls_value> TYPE ANY.
  blk_09a   = 'Find Userexit'(901).
  t09a_p1   = 'Transaction Code'(902).
  t00a_p1   = 'Table Name'(002).
  cm_00a1   = 'Download Destination'(004).
  blk_00a   = 'Download table to local PC'(003).
  t02a_p1   = 'Check string'(201).
  t04a_p1   = 'Texts be shown'(401).
  t04b_p1   = 'Texts be shown'(401).
  t04a_p2   = 'Width of QR code'(404).
  t04a_p3   = 'Height of QR code'(405).
  t04b_p2   = 'Width of QR code'(404).
  t04b_p3   = 'Height of QR code'(405).
  t04c_p1   = 'HTTP websit'(416).
  blk_07Aa  = 'Simple Smartforms'(702).
  t07A_p1   = 'Smartform Name'(701).
  t07A_RB1  = 'Smartform Preview'(703).
  t07A_RB2  = 'PDF Preview'(704).
  t04b_p4   = 'Image name'(412).
  blk_02a   = 'Check nonlatin letter'(202).
  blk_04aa   = 'Text of QR code'(402).
  blk_04ab   = 'Specify the size'(403).
  blk_04ba   = 'Text of QR code'(402).
  blk_04bb   = 'Specify the size'(403).
  blk_04ca   = 'Access HTTP websit'(414).
  blk_04ac   = 'Output mode'(406).
  t04a_rb0  = 'PDF Preview'(411).
  t04a_rb1  = 'Screen'(407).
  t04a_rb2  = 'Smartform'(408).
  t04a_rb3  = 'PDF file'(409).
  blk_08ba  = 'Target Object'(801).
  blk_xxx   = 'Select the function'(xxx).
  blk_yyy   = 'Major Technical'(yyy).
  cm_yyy    = 'Major Function'(y01).
  blk_08b1  = 'Select Object'(802).
  cm_08b11  = 'Report program, Include program, Dynpro program'(803).
  cm_08b12  = 'Functin module'(804).
  cm_08b13  = 'Program ID'(805).
  cm_08b14  = 'Class'(828).
  cm_08b16  = 'User Name'(826).
  blk_08b2  = 'Process Option'(806).
  cm_08b21  = 'Not Count Blank line'(807).
  cm_08b22  = 'Not count the include which not used in main program'(808).
  cm_08b23  = 'Count the data declare part as comment'(809).
  cm_08b24  = 'Keyword search and list source program'(828).
  blk_08bb  = 'Output Separate'(810).
  blk_08b3  = 'Output option'(811).
  cm_08b31  = 'Screen Output(Object List)'(812).
  cm_08b32  = 'File Output'(813).
  cm_08b33  = 'Screen Output(Keyword occurs)'(829).
  blk_08b4  = 'File setting'(814).
  cm_08b41  = 'Download Destination'(815).
  cm_08b42  = 'File Output Option'(816).
  cm_08b43  = 'File Output Option'(817).
  cm_08b44  = 'Source Code Output(Full lines)'(818).
  cm_08b45  = 'Source Code Output(Comment lines)'(819).
  cm_08b46  = 'Source Code Output(Process lines)'(820).
  gv_defpath_08b = 'C:\Source Code\Step_count.csv'(821).
  CONCATENATE sy-uname sy-datum INTO gv_tdname_04b.
  blk_08bc  = 'Process Set'(822).
  cm_08b51  = 'Process Set'(823).
  cm_08b52  = 'Process Set'(823).
  cm_08b53  = 'Process count (1~999)¡ù < 100 recommend'(824).
  cm_08b54  = 'File Output Method(Unicode Check Before version 46C)'(825).

  08b4_pb1  = '-'.
  08b4_pb2  = '+'.
  08b5_pb1  = '-'.
  08b5_pb2  = '+'.

  SELECT *
    FROM zcwu_tool_spec
    INTO TABLE lt_tool_spec
    WHERE major <> '  '
      AND minor <> ' '.

  LOOP AT lt_tool_spec INTO ls_tool_spec.
    CONCATENATE   'cm_'                  "means comments
                  ls_tool_spec-major
                  ls_tool_spec-minor
          INTO lv_fname.
    ASSIGN (lv_fname) TO <ls_value>.
    IF <ls_value> IS ASSIGNED.
      <ls_value> = ls_tool_spec-des.
    ENDIF.
    UNASSIGN <ls_value>.
  ENDLOOP.

ENDFORM.                    " F_INIT

*&---------------------------------------------------------------------*
*&      Form  F_CHECK_SCREEN
*&---------------------------------------------------------------------*
*       SCREEN CHECK
*----------------------------------------------------------------------*
FORM f_check_screen .

ENDFORM.                    " F_CHECK_SCREEN
*&---------------------------------------------------------------------*
*&      Form  F_SCREEN_OUTPUT
*&---------------------------------------------------------------------*
*       SELECTION-SCREEN SET
*----------------------------------------------------------------------*
FORM f_screen_output .

  PERFORM frm_set_listbox.

  PERFORM frm_com_screen.

  PERFORM frm_04a1_screen.

  CHECK gv_flag IS NOT INITIAL.
  CASE gv_ucomm.
*    WHEN space.
*      CLEAR: gv_det1 , gv_det3.
*      PERFORM frm_08b4_screen.
*    WHEN 'UXXX'.
*      CLEAR: gv_det1 , gv_det3.
*      PERFORM frm_08b4_screen.
*   Detail selected
    WHEN '08B41'.
      CLEAR: gv_det1.
      PERFORM frm_08b4_screen.
      gv_det1 = gc_x.

*   Detail selected
    WHEN '08B42'.
      gv_det1 = gc_x.
      PERFORM frm_08b4_screen.
      gv_det1 = space.

    WHEN '08B51'.
      CLEAR: gv_det3.
      PERFORM frm_08b4_screen.
      gv_det3 = gc_x.

    WHEN '08B52'.
      gv_det3 = gc_x.
      PERFORM frm_08b4_screen.
      CLEAR: gv_det3.

*    WHEN '08B3'.
*      CLEAR: gv_det1 , gv_det3.
*      PERFORM frm_08b4_screen.
    WHEN 'U8B1'.
      PERFORM frm_08b4_screen.
      PERFORM append_08b1_p1.
    WHEN '04AC'.
      PERFORM frm_04a1_screen.
    WHEN OTHERS.
      CLEAR: gv_det1 , gv_det3.
      PERFORM frm_08b4_screen.
  ENDCASE.

ENDFORM.                    " F_SCREEN_OUTPUT
*&---------------------------------------------------------------------*
*&      Form  F_SCREEN_SELECT
*&---------------------------------------------------------------------*
*       SELECTION-SCREEN CHECK
*----------------------------------------------------------------------*
FORM f_screen_select .

  gv_ucomm = sy-ucomm.

ENDFORM.                    " F_SCREEN_SELECT
*&---------------------------------------------------------------------*
*&      Form  frm_com_screen
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM frm_com_screen .
  DATA: lflag_rb TYPE char1.
  FIELD-SYMBOLS: <ls_value> TYPE ANY.
  CLEAR: gv_flag, lflag_rb.

  LOOP AT SCREEN.
    IF    screen-group1 = 'XXX'
      AND screen-name(2) = 'RB'.
      ASSIGN (screen-name) TO <ls_value>.
      IF <ls_value> = gc_x AND screen-name+3(2) = p_major.
        lflag_rb = gc_x.
      ELSE.
        <ls_value> = space.
      ENDIF.
    ENDIF.
  ENDLOOP.

  LOOP AT SCREEN.
    IF    screen-group1 = 'XXX'
      AND ( screen-name(2) = 'RB' OR screen-name(2) = 'CM' ).
      IF  screen-name+3(2) = p_major.
        IF screen-name(2) = 'RB' AND gv_flag IS INITIAL.
*          do 20 TIMES.
*            ASSIGN (screen-name) TO <ls_value>.
*          ENDDO.
          ASSIGN (screen-name) TO <ls_value>.
          IF <ls_value> IS ASSIGNED.
            IF lflag_rb IS  INITIAL.
              <ls_value> = gc_x.
              lflag_rb = gc_x.
            ENDIF.
          ENDIF.
          gv_flag = gc_x.
        ENDIF.
      ELSE.
        screen-input = '0'.
        screen-invisible = '1'.
        MODIFY SCREEN.
      ENDIF.
    ENDIF.
  ENDLOOP.

  IF gv_flag IS INITIAL.
    MESSAGE s001(00) WITH 'The major'(x02) p_major 'has no implementation!'(x03)
      DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
    p_major = '00'.
    rb_000  = 'X'.
  ENDIF.

  CASE gc_x.
    WHEN rb_000.
      LOOP AT SCREEN.
        IF ( (      NOT screen-name CS '000')
              AND ( screen-group1 <> 'XXX')
              AND ( NOT screen-name CS 'XXX')
              AND ( NOT screen-name CS 'YYY')
              AND ( screen-group1 <> 'YYY') ).
          screen-active = '0'.
          screen-invisible = '1'.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    WHEN rb_00a.
      LOOP AT SCREEN.
        IF ( (      NOT screen-name CS '00A')
              AND ( screen-group1 <> 'XXX')
              AND ( NOT screen-name CS 'XXX')
              AND ( NOT screen-name CS 'YYY')
              AND ( screen-group1 <> 'YYY') ).
          screen-active = '0'.
          screen-invisible = '1'.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    WHEN rb_01a.
      LOOP AT SCREEN.
        IF ( (      NOT screen-name CS '01A')
              AND ( screen-group1 <> 'XXX')
              AND ( NOT screen-name CS 'XXX')
              AND ( NOT screen-name CS 'YYY')
              AND ( screen-group1 <> 'YYY')  ).
          screen-active = '0'.
          screen-invisible = '1'.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    WHEN rb_02a.
      LOOP AT SCREEN.
        IF ( (      NOT screen-name CS '02A')
              AND ( screen-group1 <> 'XXX')
              AND ( NOT screen-name CS 'XXX')
              AND ( NOT screen-name CS 'YYY')
              AND ( screen-group1 <> 'YYY') ).
          screen-active = '0'.
          screen-invisible = '1'.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    WHEN rb_03a.
      LOOP AT SCREEN.
        IF ( (      NOT screen-name CS '03A')
              AND ( screen-group1 <> 'XXX')
              AND ( NOT screen-name CS 'XXX')
              AND ( NOT screen-name CS 'YYY')
              AND ( screen-group1 <> 'YYY')  ).
          screen-active = '0'.
          screen-invisible = '1'.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    WHEN rb_04a.
      LOOP AT SCREEN.
        IF ( (      NOT screen-name CS '04A')
              AND ( screen-group1 <> 'XXX')
              AND ( NOT screen-name CS 'XXX')
              AND ( NOT screen-name CS 'YYY')
              AND ( screen-group1 <> 'YYY')  ).
          screen-active = '0'.
          screen-invisible = '1'.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    WHEN rb_04b.
      LOOP AT SCREEN.
        IF ( (      NOT screen-name CS '04B')
              AND ( screen-group1 <> 'XXX')
              AND ( NOT screen-name CS 'XXX')
              AND ( NOT screen-name CS 'YYY')
              AND ( screen-group1 <> 'YYY')  ).
          screen-active = '0'.
          screen-invisible = '1'.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
      04b_p4 = gv_tdname_04b.
    WHEN rb_04c.
      LOOP AT SCREEN.
        IF ( (      NOT screen-name CS '04C')
              AND ( screen-group1 <> 'XXX')
              AND ( NOT screen-name CS 'XXX')
              AND ( NOT screen-name CS 'YYY')
              AND ( screen-group1 <> 'YYY')  ).
          screen-active = '0'.
          screen-invisible = '1'.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    WHEN rb_06a.
      LOOP AT SCREEN.
        IF ( (      NOT screen-name CS '06A')
              AND ( screen-group1 <> 'XXX')
              AND ( NOT screen-name CS 'XXX')
              AND ( NOT screen-name CS 'YYY')
              AND ( screen-group1 <> 'YYY')  ).
          screen-active = '0'.
          screen-invisible = '1'.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    WHEN rb_06b.
      LOOP AT SCREEN.
        IF ( (      NOT screen-name CS '06B')
              AND ( screen-group1 <> 'XXX')
              AND ( NOT screen-name CS 'XXX')
              AND ( NOT screen-name CS 'YYY')
              AND ( screen-group1 <> 'YYY')  ).
          screen-active = '0'.
          screen-invisible = '1'.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    WHEN rb_06c.
      LOOP AT SCREEN.
        IF ( (      NOT screen-name CS '06C')
              AND ( screen-group1 <> 'XXX')
              AND ( NOT screen-name CS 'XXX')
              AND ( NOT screen-name CS 'YYY')
              AND ( screen-group1 <> 'YYY')  ).
          screen-active = '0'.
          screen-invisible = '1'.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    WHEN rb_06d.
      LOOP AT SCREEN.
        IF ( (      NOT screen-name CS '06D')
              AND ( screen-group1 <> 'XXX')
              AND ( NOT screen-name CS 'XXX')
              AND ( NOT screen-name CS 'YYY')
              AND ( screen-group1 <> 'YYY')  ).
          screen-active = '0'.
          screen-invisible = '1'.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    WHEN rb_06e.
      LOOP AT SCREEN.
        IF ( (      NOT screen-name CS '06E')
              AND ( screen-group1 <> 'XXX')
              AND ( NOT screen-name CS 'XXX')
              AND ( NOT screen-name CS 'YYY')
              AND ( screen-group1 <> 'YYY')  ).
          screen-active = '0'.
          screen-invisible = '1'.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.

    WHEN rb_07a.
      LOOP AT SCREEN.
        IF ( (      NOT screen-name CS '07A')
              AND ( screen-group1 <> 'XXX')
              AND ( NOT screen-name CS 'XXX')
              AND ( NOT screen-name CS 'YYY')
              AND ( screen-group1 <> 'YYY')  ).
          screen-active = '0'.
          screen-invisible = '1'.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    WHEN rb_07b.
      LOOP AT SCREEN.
        IF ( (      NOT screen-name CS '07B')
              AND ( screen-group1 <> 'XXX')
              AND ( NOT screen-name CS 'XXX')
              AND ( NOT screen-name CS 'YYY')
              AND ( screen-group1 <> 'YYY')  ).
          screen-active = '0'.
          screen-invisible = '1'.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    WHEN rb_08b.
      LOOP AT SCREEN.
        IF ( (      NOT screen-name CS '08B')
              AND ( screen-group1 <> 'XXX')
              AND ( NOT screen-name CS 'XXX')
              AND ( NOT screen-name CS 'YYY')
              AND ( screen-group1 <> 'YYY') ).
          screen-active = '0'.
          screen-invisible = '1'.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    WHEN rb_08c.
      LOOP AT SCREEN.
        IF ( (      NOT screen-name CS '08C')
              AND ( screen-group1 <> 'XXX')
              AND ( NOT screen-name CS 'XXX')
              AND ( NOT screen-name CS 'YYY')
              AND ( screen-group1 <> 'YYY')  ).
          screen-active = '0'.
          screen-invisible = '1'.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    WHEN rb_08d.
      LOOP AT SCREEN.
        IF ( (      NOT screen-name CS '08D')
              AND ( screen-group1 <> 'XXX')
              AND ( NOT screen-name CS 'XXX')
              AND ( NOT screen-name CS 'YYY')
              AND ( screen-group1 <> 'YYY')  ).
          screen-active = '0'.
          screen-invisible = '1'.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    WHEN rb_09a.
      LOOP AT SCREEN.
        IF ( (      NOT screen-name CS '09A')
              AND ( screen-group1 <> 'XXX')
              AND ( NOT screen-name CS 'XXX')
              AND ( NOT screen-name CS 'YYY')
              AND ( screen-group1 <> 'YYY') ).
          screen-active = '0'.
          screen-invisible = '1'.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    WHEN OTHERS.

  ENDCASE.
ENDFORM.                    " frm_com_screen
*&---------------------------------------------------------------------*
*&      Form  frm_08b4_screen
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM frm_08b4_screen .
  PERFORM f_screen_edit_1.  "Set default value
  PERFORM f_screen_edit_2.
  PERFORM f_screen_edit_3.
ENDFORM.                    " frm_08b4_screen
*&---------------------------------------------------------------------*
*&      Form  F_SCREEN_EDIT_1
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_screen_edit_1 .
  IF 08b3_rb1 = gc_x.
    CLEAR 08b4_p1.       " download target
    08b4_cb1 = space.      "program source output(Full lines)
    08b4_cb2 = space.      "program source output(Comment lines)
    08b4_cb3 = space.      "program source output(Process lines)

    LOOP AT SCREEN.
      IF screen-group1 = '8BA' OR
         screen-group1  = '8BC' OR
         screen-group1  = '8BB' .
        screen-input = 0.
        screen-value_help = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ELSE.
    IF 08b4_p1 IS INITIAL.
      08b4_p1 = gv_defpath_08b.
    ENDIF.
  ENDIF.

ENDFORM.                    " F_SCREEN_EDIT_1
*&---------------------------------------------------------------------*
*&      Form  F_SCREEN_EDIT_2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_screen_edit_2 .
  IF gv_det1 IS NOT INITIAL.
    LOOP AT SCREEN.
*     Detail item set
      IF screen-group1 = '8BB'.
        screen-active = '0'.
        MODIFY SCREEN.
      ENDIF.

*     Option item set
      IF screen-group1 = '8BC'.
        screen-active = '1'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ELSE.
    LOOP AT SCREEN.
*     Detail item set
      IF screen-group1 = '8BC'.
        screen-active = '0'.
        MODIFY SCREEN.
      ENDIF.

*     Option item set
      IF screen-group1 = '8BB'.
        screen-active = '1'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.                    " F_SCREEN_EDIT_2
*&---------------------------------------------------------------------*
*&      Form  F_SCREEN_EDIT_3
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_screen_edit_3 .
  IF gv_det3 IS  INITIAL.
    LOOP AT SCREEN.
*     Detail item set
      IF screen-group1 = '8B6'.
        screen-active = '0'.
        MODIFY SCREEN.
      ENDIF.

*     Option item set
      IF screen-group1 = '8B5'.
        screen-active = '1'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ELSE.
    LOOP AT SCREEN.
*     Detail item set
      IF screen-group1 = '8B5'.
        screen-active = '0'.
        MODIFY SCREEN.
      ENDIF.

*     Option item set
      IF screen-group1 = '8B6'.
        screen-active = '1'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.                    " F_SCREEN_EDIT_3
*&---------------------------------------------------------------------*
*&      Form  FRM_SET_LISTBOX
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM frm_set_listbox .
  DATA:  name  TYPE vrm_id,
         list  TYPE vrm_values,
         value LIKE LINE OF list.
  DATA: lt_tool_spect TYPE STANDARD TABLE OF zcwu_tool_spect,
        ls_tool_spect TYPE  zcwu_tool_spect.
  name = 'P_MAJOR'.

  SELECT  zcwu_tool_spect~MAJOR
          zcwu_tool_spect~SPRAS
          zcwu_tool_spect~TEXT
    FROM zcwu_tool_spect
    INNER JOIN zcwu_tool_spec
    on zcwu_tool_spect~major = zcwu_tool_spec~major
    INTO CORRESPONDING FIELDS OF TABLE lt_tool_spect
    WHERE spras = sy-langu
      AND zcwu_tool_spec~erdat > '20110101'.
  IF sy-subrc = 0.
    LOOP AT lt_tool_spect INTO ls_tool_spect.
      value-key = ls_tool_spect-major.
      value-text = ls_tool_spect-text.
      COLLECT value inTO list.
    ENDLOOP.
  ENDIF.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = name
      values = list.

ENDFORM.                    " FRM_SET_LISTBOX

*&---------------------------------------------------------------------*
*&      Form  APPEND_08b1_p1
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM append_08b1_p1 .
  TYPES: BEGIN OF l_typ_tfdir,
           funcname TYPE tfdir-funcname,
           pname    TYPE tfdir-pname,
         END OF l_typ_tfdir.

  DATA: l_rec_tfdir TYPE l_typ_tfdir,
        lv_line     TYPE i,
        l_tab_tfdir TYPE TABLE OF l_typ_tfdir.

  TYPES: BEGIN OF l_typ_trdir,
           name     TYPE trdir-name,
           funcname TYPE tfdir-funcname,
         END OF l_typ_trdir.

  DATA: l_rec_trdir TYPE l_typ_trdir,
        l_tab_trdir TYPE TABLE OF l_typ_trdir.

  CHECK sy-uname = 'TEST'.
  IF 08b1_cb1 IS NOT INITIAL.
    CASE gc_x.
      WHEN 08b1_rb1.
        SELECT name
          INTO CORRESPONDING FIELDS OF TABLE l_tab_trdir
          FROM trdir
         WHERE ( cnam = 08b1_p0 OR unam = 08b1_p0 )
           AND subc = '1'.    "Executable
        IF sy-subrc = 0.
          LOOP AT l_tab_trdir INTO l_rec_trdir.
            IF l_rec_trdir-name(1) = '/'.
              CONTINUE.
            ENDIF.
            IF  NOT ( ( l_rec_trdir-name(1) = 'Y' )
                OR ( l_rec_trdir-name(1) = 'Z' ) ).
              CONTINUE.
            ENDIF.
            08b1_p1-sign = 'I'.
            08b1_p1-option = 'EQ'.
            08b1_p1-low =  l_rec_trdir-name.
            APPEND 08b1_p1.
          ENDLOOP.
        ENDIF.
      WHEN 08b1_rb2.
        SELECT funcname
               pname
          INTO CORRESPONDING FIELDS OF TABLE l_tab_tfdir
          FROM tfdir
          INNER JOIN trdir
            ON tfdir~pname = trdir~name
          WHERE (   trdir~cnam = 08b1_p0
                  OR trdir~unam = 08b1_p0 )
          AND   subc = '1'.    "Executable
        IF sy-subrc = 0.
          LOOP AT l_tab_tfdir INTO l_rec_tfdir.
            08b1_p1-sign = 'I'.
            08b1_p1-option = 'EQ'.
            08b1_p1-low =  l_rec_tfdir-funcname.
            APPEND 08b1_p1.
          ENDLOOP.
        ELSE.
          MESSAGE ID '00' TYPE 'E' NUMBER '001'
             WITH 'Program ID is invalid'(x03).
          EXIT.
        ENDIF.
      WHEN 08b1_rb3.
        "check vseoclass, refer to YCL_CWU_UTILITY=>SET_OBJECTLIST_SUB1_08B

      WHEN OTHERS.
    ENDCASE.

    DELETE ADJACENT DUPLICATES FROM 08b1_p1.

  ENDIF.
ENDFORM.                    " APPEND_08b1_p1
*&---------------------------------------------------------------------*
*&      Form  F_F4_HELP_08B1_P1
*&---------------------------------------------------------------------*
*       F4 help on object select
*----------------------------------------------------------------------*
FORM f_f4_help_08b1_p1.
  TYPES BEGIN OF ltyp_dynpfields.
          INCLUDE TYPE dynpread.
  TYPES END OF ltyp_dynpfields.

  DATA: ls_dynpfields TYPE ltyp_dynpfields,
        lt_dynpfields TYPE TABLE OF ltyp_dynpfields.

  DATA ls_object_type TYPE seu_obj.
*-----------------------------------------------------------------------
  CASE  gc_x.
    WHEN 08b1_rb1.
      ls_object_type = 'PROG'.
    WHEN 08b1_rb2.
      ls_object_type = 'FF'.
    WHEN 08b1_rb3.
      ls_object_type = 'CLAS'.
    WHEN OTHERS.
  ENDCASE.
  IF gv_option_ind = 'L'.
    ls_dynpfields-fieldname = '08B1_P1-LOW'.
  ELSE.
    ls_dynpfields-fieldname = '08B1_P1-HIGH'.
  ENDIF.
  APPEND ls_dynpfields TO lt_dynpfields.

  CALL FUNCTION 'DYNP_VALUES_READ'
    EXPORTING
        dyname               = sy-repid
        dynumb               = sy-dynnr
    TABLES
        dynpfields           = lt_dynpfields
    EXCEPTIONS
        OTHERS.

  READ TABLE lt_dynpfields INDEX 1 INTO ls_dynpfields.

  IF gv_option_ind = 'L'.
    CALL FUNCTION 'REPOSITORY_INFO_SYSTEM_F4'
      EXPORTING
        object_type          = ls_object_type
        object_name          = ls_dynpfields-fieldvalue
      IMPORTING
        object_name_selected = 08b1_p1-low
      EXCEPTIONS
        cancel               = 1
        wrong_type           = 2
        OTHERS               = 3.
  ELSE.
    CALL FUNCTION 'REPOSITORY_INFO_SYSTEM_F4'
      EXPORTING
        object_type          = ls_object_type
        object_name          = ls_dynpfields-fieldvalue
      IMPORTING
        object_name_selected = 08b1_p1-high
      EXCEPTIONS
        cancel               = 1
        wrong_type           = 2
        OTHERS               = 3.
  ENDIF.

ENDFORM.                    " F_F4_HELP_08B1_P1
*&---------------------------------------------------------------------*
*&      Form  f_f4_help_filepath
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_f4_help_filepath .
  FIELD-SYMBOLS: <lfs_scrname> TYPE ANY.
  DATA: lt_filetable TYPE filetable,
        lv_rc         TYPE i,
        lv_title      TYPE string,
        lv_extend     TYPE string,
        lv_folder     TYPE string,
        lv_dir        TYPE string,
        lv_def_file   TYPE string .

  CASE gv_f4_ind.

    WHEN 'F'.
      lv_dir = gv_defpath_08b.
      lv_title = 'Select Download File'(t71).
      lv_extend = 'All Files (*.*)'(t70).
      CASE gv_screenname.
        WHEN '08B4_P1'.
          lv_def_file = 'Step_count.csv'(t58).
        WHEN '00A_P1'.
        WHEN OTHERS.
      ENDCASE.
      CALL METHOD cl_gui_frontend_services=>file_open_dialog
        EXPORTING
          window_title            = lv_title
          default_extension       = lv_extend
          default_filename        = lv_def_file
          initial_directory       = lv_dir
        CHANGING
          file_table              = lt_filetable
          rc                      = lv_rc
        EXCEPTIONS
          file_open_dialog_failed = 1
          cntl_error              = 2
          error_no_gui            = 3
          not_supported_by_gui    = 4
          OTHERS                  = 5.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ELSE.
        ASSIGN (gv_screenname) TO <lfs_scrname>.
        READ TABLE lt_filetable INTO <lfs_scrname> INDEX 1.
      ENDIF.
    WHEN 'D'.

      ASSIGN (gv_screenname) TO <lfs_scrname>.
      CALL METHOD cl_gui_frontend_services=>directory_get_current
        CHANGING
          current_directory            = lv_dir
        EXCEPTIONS
          directory_get_current_failed = 1
          cntl_error                   = 2
          error_no_gui                 = 3
          not_supported_by_gui         = 4
          OTHERS                       = 5.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
      lv_title = 'Select a directory'(t79).
      CALL METHOD cl_gui_frontend_services=>directory_browse
        EXPORTING
          window_title         = lv_title
          initial_folder       = lv_dir
        CHANGING
          selected_folder      = lv_folder
        EXCEPTIONS
          cntl_error           = 1
          error_no_gui         = 2
          not_supported_by_gui = 3
          OTHERS               = 4.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
      <lfs_scrname> = lv_folder.
    WHEN OTHERS.
  ENDCASE.


ENDFORM.                    " f_f4_help_filepath
*&---------------------------------------------------------------------*
*&      Form  FRM_04A1_SCREEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM frm_04a1_screen .
  IF 04a_rb3 = gc_x.
    LOOP AT SCREEN.
      IF screen-name = '04A_P4'.
        screen-active = '1'.
        screen-invisible = '0'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ELSE.
    LOOP AT SCREEN.
      IF screen-name = '04A_P4'.
        screen-active = '0'.
        screen-invisible = '1'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.                    " FRM_04A1_SCREEN
*&---------------------------------------------------------------------*
*&      Form  EXECUTE_FUNCTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM execute_function .
  CASE gc_x.
    WHEN rb_000.
*&---------------------------------------------------------------------*
      CALL METHOD ycl_cwu_utility=>specification_000.
    WHEN rb_00a.
*&---------------------------------------------------------------------*
      DATA: lv_dir    TYPE string.
      lv_dir = 00a_p1.
      CALL METHOD ycl_cwu_utility=>download_tables_00a
        EXPORTING
          iv_directory = lv_dir
          lt_tables    = 00a_s1[].

*&---------------------------------------------------------------------*
    WHEN rb_02a.
*&---------------------------------------------------------------------*
      DATA: check_string TYPE text256 VALUE 'abcd ¸ü¶àÌÖÂÛÇë²ÎÔÄ',
            lv_check     TYPE i.
      CALL METHOD ycl_cwu_utility=>check_latin_02a
        EXPORTING
          iv_field_in = 02a_p1
        IMPORTING
          ev_check    = lv_check. " lv_check = 7, Non-latin position
      IF lv_check <> 0.
        WRITE: 'Check string:', 02a_p1.
        ULINE.
        WRITE: / 'This string contain nonlatin characters',
                 'on the position',
                 lv_check.
      ELSE.
        WRITE: 'No nonlatin character exist!'.
      ENDIF.
*&---------------------------------------------------------------------*
    WHEN rb_03a.
*&---------------------------------------------------------------------*
      CALL METHOD ycl_cwu_utility=>record_transaction_03a.
*&---------------------------------------------------------------------*
    WHEN rb_04a.
*&---------------------------------------------------------------------*
      DATA: lv_fname TYPE rs38l_fnam,
            lv_mode  TYPE char1,
            lv_tdname TYPE tdobname.
      lv_tdname = 'zcwu_bd'.
      CASE gc_x.
        WHEN 04a_rb0.
          lv_mode = 'V'.    "PDF Preview
        WHEN 04a_rb1.
          lv_mode = 'D'.    "Dynpro display
        WHEN 04a_rb2.
          lv_mode = 'S'.    "Smartform display
        WHEN 04a_rb3.
          lv_mode = 'P'.    "Download PDF to local pc
        WHEN OTHERS.
      ENDCASE.

      CALL METHOD ycl_cwu_utility=>show_qr_04a
        EXPORTING
          iv_formname = 'ZCWU_QRCODE'
          iv_tdname   = lv_tdname
          iv_qrtext   = 04a_p1
          iv_mode     = lv_mode
          iv_path     = 04a_p4
          iv_width    = 04a_p2
          iv_height   = 04a_p3
        IMPORTING
          ov_fname    = lv_fname.
*&---------------------------------------------------------------------*
    WHEN rb_04b.
*&---------------------------------------------------------------------*
      DATA: lv_url  TYPE w3url.
      CALL METHOD ycl_cwu_utility=>generate_qrcode_04b
        EXPORTING
          iv_tdname = 04b_p4
          iv_qrtext = 04b_p1
          iv_width  = 04b_p2
          iv_height = 04b_p3
        IMPORTING
          ev_url    = lv_url.
      WRITE: 'QR code', 04b_p4, '  is stored, you can check view SE78'.
*&---------------------------------------------------------------------*
    WHEN rb_04c.
*&---------------------------------------------------------------------*
      TYPES: BEGIN OF TY_s_LINE255,
              line(255) TYPE c,
            END OF ty_s_line255 .
      DATA: ls_head TYPE TY_s_LINE255,
            ls_body TYPE TY_s_LINE255,
            lt_head TYPE STANDARD TABLE OF TY_s_LINE255,
            lt_body TYPE STANDARD TABLE OF TY_s_LINE255.

      CALL METHOD ycl_cwu_utility=>http_access_04c
        EXPORTING
          iv_url           =  04c_p1
        IMPORTING
          et_response_head =  lt_head
          et_response_body =  lt_body.

      LOOP AT lt_head INTO ls_head.
        WRITE: / ls_head-line.
      ENDLOOP.
      SKIP 2.

      LOOP AT lt_body INTO ls_body.
        REPLACE ALL OCCURRENCES OF
                  cl_abap_char_utilities=>horizontal_tab
                  IN ls_body-line WITH ' '.
        WRITE: ls_body-line.
      ENDLOOP.

      CALL FUNCTION 'RFC_CONNECTION_CLOSE'
        EXPORTING
          DESTINATION                =  'SAPHTTP'
*          TASKNAME                   =
        EXCEPTIONS
          DESTINATION_NOT_OPEN       = 1
          OTHERS                     = 2
                .
      IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

*&---------------------------------------------------------------------*
    WHEN rb_06a.
*&---------------------------------------------------------------------*
      "N/A
*&---------------------------------------------------------------------*
    WHEN rb_06b.
*&---------------------------------------------------------------------*
      "N/A
*&---------------------------------------------------------------------*
    WHEN rb_06c.
*&---------------------------------------------------------------------*
      "N/A
*&---------------------------------------------------------------------*
    WHEN rb_06d.
*&---------------------------------------------------------------------*
      "N/A
*&---------------------------------------------------------------------*
    WHEN rb_06e.
*&---------------------------------------------------------------------*
      DATA: lt_mara TYPE STANDARD TABLE OF mara.

      SELECT *
        FROM mara
        INTO TABLE lt_mara
        UP TO 100 ROWS
        WHERE matnr <> ' '.

      CALL METHOD ycl_cwu_utility=>show_itab_06e
        EXPORTING
          it_table     =  lt_mara
          iv_structrue =  'ZCWU_MARA'.

*&---------------------------------------------------------------------*
    WHEN rb_07a.
*&---------------------------------------------------------------------*
      DATA: lv_fmname TYPE rs38l_fnam,
            lv_view   TYPE char1.

      CASE gc_x.
        WHEN 07A_RB1.
          lv_view = 'S'.
        WHEN 07A_RB2.
          lv_view = 'P'.
        WHEN OTHERS.
      ENDCASE.

      CALL METHOD ycl_cwu_utility=>smartforms_display_07a
        EXPORTING
          iv_formname  =  07A_P1
          iv_view_mode =  lv_view
        IMPORTING
          ev_fname     =  lv_fmname.

*&---------------------------------------------------------------------*
    WHEN rb_08b.
*&---------------------------------------------------------------------*
      DATA: lv_objtype TYPE char1,
            lt_steps   TYPE STANDARD TABLE OF char600,
            lt_keysour TYPE STANDARD TABLE OF char600,
            ls_list    TYPE char600.


      CASE gc_x.
        WHEN 08b1_rb1.
          lv_objtype = 'P'.
        WHEN 08b1_rb2.
          lv_objtype = 'F'.
        WHEN 08b1_rb3.
          lv_objtype = 'C'.
        WHEN OTHERS.
      ENDCASE.
      IF 08b1_cb1 IS INITIAL.
        CLEAR: 08b1_p0.
      ENDIF.

      CALL METHOD ycl_cwu_utility=>count_step_08b
        EXPORTING
          iv_object_type     = lv_objtype
          iv_username        = 08b1_p0
          it_objectid        = 08b1_p1[]
          iv_fileout         = 08b3_rb2
          iv_filename        = 08b4_p1
          iv_onlyyz          = gc_x
          iv_max_objects     = 08b5_p1
          iv_nocount_blank   = 08b2_cb1
          iv_nocount_include = 08b2_cb2
          iv_nocount_declare = 08b2_cb3
          iv_fullline        = 08b4_cb1
          iv_comtline        = 08b4_cb2
          iv_procline        = 08b4_cb3
          iv_dosearch        = 08b2_cb4
          iv_keyword         = 08b2_p1
          iv_codepage        = '8400'
        IMPORTING
          et_steps           = lt_steps
          et_keysource       = lt_keysour.
      IF lt_steps IS INITIAL.
        MESSAGE i001(00) WITH 'No objects found.'.
      ENDIF.

      IF 08b3_rb3 IS NOT INITIAL.
        IF    08b2_cb4 IS NOT INITIAL
          AND lt_keysour IS NOT INITIAL.
          LOOP AT lt_keysour  INTO ls_list.
            IF sy-tabix = 1.
              WRITE ls_list.
              ULINE.
            ELSE.
              CLEAR: lv_str1 , lv_str2.
              SPLIT ls_list at CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
                INTO lv_str1 lv_str2.
              CONDENSE: lv_str1, lv_str2.
              WRITE: /(120) sy-uline.
              WRITE: / sy-vline, 3 lv_str1, 37 sy-vline,
                     40 lv_str2, 120 sy-vline.
            ENDIF.
          ENDLOOP.
          WRITE: /(120) sy-uline.
        ENDIF.
      ELSEif 08b3_rb1 IS NOT INITIAL.
        LOOP AT lt_steps INTO ls_list.
          CLEAR: lv_str1, lv_str2,lv_str3,lv_str4,
                 lv_str5, lv_str6,lv_str7.
          SPLIT ls_list at  '","'
            INTO lv_str1 lv_str2 lv_str3 lv_str4
                 lv_str5  lv_str6 lv_str7.
          REPLACE ALL OCCURRENCES OF '"' in: lv_str1 WITH '',
          lv_str2 WITH space,lv_str3 WITH space,lv_str4 WITH space,
          lv_str5 WITH space,lv_str6 WITH space,lv_str7 WITH space.
          REPLACE ALL OCCURRENCES OF ',' in lv_str7 WITH space.
          CONDENSE: lv_str1,lv_str2,lv_str3,lv_str4,
                    lv_str5,lv_str6,lv_str7.
          IF lv_str1 IS INITIAL.
            CONTINUE.
          ENDIF.
          IF sy-tabix = 1.
            WRITE: /(150) sy-uline.
          ENDIF.
          WRITE: / sy-vline, lv_str1 NO-GAP, 30 sy-vline,
                 lv_str2 NO-GAP,45 sy-vline , lv_str3 NO-GAP,
                 60 sy-vline, lv_str4 NO-GAP,
                 78 sy-vline, lv_str5 NO-GAP, 96 sy-vline,
                 lv_str6 NO-GAP,110 sy-vline, 112(150) lv_str7 NO-GAP,
                 150 sy-vline.
          WRITE: /(150) sy-uline.
        ENDLOOP.

      ENDIF.
*&---------------------------------------------------------------------*
    WHEN rb_08d.
*&---------------------------------------------------------------------*
      call SCREEN 100.
*&---------------------------------------------------------------------*
    WHEN rb_09a.
*&---------------------------------------------------------------------*

      CALL METHOD ycl_cwu_utility=>find_uerrexit_09a
        EXPORTING
          iv_tcode    = 09a_p1
          iv_listout  = gv_listout
        IMPORTING
          ot_userexit = gt_userexit.

      IF gt_userexit IS NOT INITIAL AND gv_listout IS INITIAL.
        FORMAT COLOR COL_HEADING INTENSIFIED ON.
        WRITE:/(95) sy-uline.
        WRITE:/1 sy-vline,
        2 'Exit Name',
        21 sy-vline ,
        25 'Description',
        95 sy-vline.
        WRITE:/(95) sy-uline.
        FORMAT COLOR COL_NORMAL INTENSIFIED ON.

        LOOP AT gt_userexit INTO gs_userexit.
          WRITE: /1 sy-vline, 2 gs_userexit-obj_name , 21 sy-vline,
                25 gs_userexit-modtext, 95 sy-vline.
        ENDLOOP.
        WRITE:/(95) sy-uline.
      ENDIF.
*&---------------------------------------------------------------------*
    WHEN OTHERS.
  ENDCASE.
ENDFORM.                    " EXECUTE_FUNCTION
