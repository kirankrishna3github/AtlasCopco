*&---------------------------------------------------------------------*
*& Report  ZTEST_ZIP
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  ZTEST_ZIP.
TYPES: BEGIN OF text,
       line(120),
       END OF text.
DATA: gt_raw_data      TYPE tab_raw512,
      wa LIKE LINE OF gt_raw_data,
     gv_fil_len        TYPE i,
     gv_zip_xstring    TYPE xstring,
     go_zip            TYPE REF TO cl_abap_zip,
     gwa_zipped_files  TYPE cl_abap_zip=>t_file.
*DATA  dest    TYPE rfcdes-rfcdest.
DATA: xuri(250) TYPE c,
      status(3) TYPE c,
      statustext(128) TYPE c,
      rlength TYPE i,
      key TYPE i VALUE 1303621,
      slen TYPE i,
      t1 TYPE i,
      t2 TYPE i,
      ti TYPE i.
DATA: response TYPE TABLE OF text WITH HEADER LINE,
      response_headers TYPE TABLE OF text WITH HEADER LINE.
* Upload the ZIP file
parameters: uri(264) type c lower case,
            uri2(132) type c lower case,
            dest like rfcdes-rfcdest,
            btocrlf type c default 'Y'.
selection-screen skip 1.
parameters: user(30) type c lower case,
            pwd(30) type c lower case.

*types: begin of text,
*       line(120),
*       end of text.





set blank lines on.
concatenate uri uri2 into uri.
set parameter id 'HTTP01' field dest.
xuri = uri(250).
set parameter id 'HTTP02' field xuri.

slen = strlen( user ).

call function 'HTTP_SCRAMBLE'
  EXPORTING
    source      = user
    sourcelen   = slen
    key         = key
  IMPORTING
    destination = user.

slen = strlen( pwd ).

call function 'HTTP_SCRAMBLE'
  EXPORTING
    source      = pwd
    sourcelen   = slen
    key         = key
  IMPORTING
    destination = pwd.

get run time field t1.

call function 'HTTP_GET'
  EXPORTING
    absolute_uri                = uri
    rfc_destination             = dest
    user                        = user
    password                    = pwd
    blankstocrlf                = btocrlf
  IMPORTING
    status_code                 = status
    status_text                 = statustext
    response_entity_body_length = rlength
  TABLES
    response_entity_body        = response
    response_headers            = response_headers.
IF sy-subrc = 0.
* Convert the RAW data from the zip file to a binary stream
  data:lv_xstring type XSTRING,
       l_addr type REF TO CL_ABAP_CONV_IN_CE,
       l_string type string.
*  Loop at response.
*    move response-line to lv_xstring.
**    append wa to gt_raw_data.
**  ENDLOOP.
*    CALL METHOD cl_abap_gzip=>decompress_text
*      EXPORTING
*        gzip_in      = lv_xstring
**    gzip_in_len  = -1
**    conversion   = 'DEFAULT'
*      IMPORTING
*        text_out     = l_string.
**    text_out_len =
**    CALL TRANSFORMATION id
**     SOURCE XML lw_xml_in
**     RESULT output = t_out.
*    IF sy-subrc NE 0.
*      RAISE compress_error.
*    ENDIF.
*    ENDLOOP.
 DATA conv TYPE REF TO cl_abap_conv_in_ce.
  DATA buffer(240) TYPE x.
  DATA text(100) TYPE c.
  buffer = '41424332'. "bytes represent ABC2 in UTF-8
  conv = cl_abap_conv_in_ce=>create(
        encoding = 'UTF-8' ).
  conv->convert(
        EXPORTING input = buffer
        IMPORTING data = text ).
  ASSERT text = `ABC2`.
  Endif.
