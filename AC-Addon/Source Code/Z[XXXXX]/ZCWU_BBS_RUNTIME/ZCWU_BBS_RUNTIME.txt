*&---------------------------------------------------------------------*
*& Report  ZCWU_BBS_RUNTIME
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  zcwu_bbs_runtime.

TABLES: kna1.
DATA: lt_dd02l TYPE STANDARD TABLE OF reposrc,
      lt_ref_dd02l TYPE REF TO data,
      time  TYPE sy-uzeit,
      LV_FNAME  TYPE CHAR30,
      LV_STRING TYPE STRING,
      ls_dd02l TYPE reposrc.

field-SYMBOLS: <fs> TYPE any.

CREATE DATA lt_ref_dd02l TYPE STANDARD TABLE OF reposrc.

FIELD-SYMBOLS: <lfs_dd02l> TYPE ANY TABLE.

ASSIGN lt_ref_dd02l->* TO <lfs_dd02l>.

PARAMETERS: p_input(20) TYPE c LOWER CASE.
SELECT-OPTIONS: s_matnr     for kna1-kunnr,
                s_name1     FOR kna1-name1.

LV_FNAME =  'text-t01'.

ASSIGN (LV_FNAME) to <fs>.

lv_string = <fs>.

*CONCATENATE sy-repid '(' LV_FNAME ')' INTO LV_FNAME.
*
*
*lv_string = ( LV_FNAME  ).

WRITE: 'TEXT-T01:', LV_STRING.

DATA:  i_par TYPE TABLE OF rsparams.


CALL FUNCTION 'RS_REFRESH_FROM_SELECTOPTIONS'
  EXPORTING
    curr_report           = sy-repid
* IMPORTING
*   SP                    =
  tables
    selection_table       = i_par[]
* EXCEPTIONS
*   NOT_FOUND             = 1
*   NO_REPORT             = 2
*   OTHERS                = 3
          .
IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.


IF p_input CP '+#S#A#P*123*'.
  WRITE:'YES', /.
ELSE.
  WRITE: 'NO', /.
ENDIF.

GET TIME FIELD time.

WRITE: 'Begin of the approach: Referrence - Time:', time,/.

SELECT *
  FROM reposrc
  UP TO 10 ROWS
  INTO  TABLE <lfs_dd02l>.
GET TIME FIELD time.
WRITE: 'End of the approach: Referrence - Time:', time,/.

GET TIME FIELD time.
WRITE: 'Begin of the approach: Innner Table - Time:', time,/.
SELECT *
  FROM reposrc
  UP TO 10 ROWS
  INTO TABLE lt_dd02l.
GET TIME FIELD time.
WRITE: 'End of the approach: Innner Table - Time:', time.

DATA: lv_strlen TYPE sy-tabix.

lv_strlen = strlen( P_INPUT ).
lv_strlen = lv_strlen - 4.
IF p_input+lv_strlen(1) = '.'.
  TRANSLATE p_input USING ', '.
  CONDENSE p_input NO-GAPS.
ELSEIF p_input+lv_strlen(1) = ','.
  TRANSLATE p_input USING '. '.
  CONDENSE p_input NO-GAPS.
  TRANSLATE p_input USING ',.'.
ENDIF.

WRITE:/ , p_input.

DATA: ls_hu2_log TYPE YSE_HU2_LOG.



ls_hu2_log-UNAME  = sy-UNAME.
ls_hu2_log-ERDAT  = sy-datum.
ls_hu2_log-ERZET  = sy-uzeit.
ls_hu2_log-VENUM  = '12'.
ls_hu2_log-EXIDV2 = '34'.
INSERT YSE_HU2_LOG FROM ls_hu2_log.
*BREAK-POINT.
CLEAR ls_hu2_log.
SELECT SINGLE *
  FROM YSE_HU2_LOG
  INTO ls_hu2_log
  WHERE uname = sy-UNAME.
IF sy-subrc = 0.
  WRITE: 'sucess'.
ELSE.
  WRITE: 'failed'.
ENDIF.

*Text symbol text£º
*T01:This is a test
