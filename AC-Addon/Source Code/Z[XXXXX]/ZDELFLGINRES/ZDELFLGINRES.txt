*&---------------------------------------------------------------------*
*& Report  ZDELFLGINRES                                                *
*&                                                                     *
*&---------------------------------------------------------------------*
*&                                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*

report ZDELFLGINRES                            .

* this report sets the deletion flag in reservations of PM-orders, if
* the reservation has status 'deleted' or when the order is tech. closed

DATA: BEGIN OF ls_order,
        aufnr LIKE viaufks-aufnr,
        rsnum LIKE viaufks-rsnum,
        iphas LIKE viaufks-iphas,
      END OF ls_order.
DATA: lt_order LIKE SORTED TABLE OF ls_order WITH UNIQUE KEY aufnr.

DATA: BEGIN OF ls_rsnum,
        rsnum LIKE resb-rsnum,
        rspos LIKE resb-rspos,
        rsart LIKE resb-rsart,
        xloek LIKE resb-xloek,
        aufnr LIKE resb-aufnr,
        objnr LIKE resb-objnr,
      END OF ls_rsnum.
DATA: lt_rsnum LIKE TABLE OF ls_rsnum.

DATA: lc_tabix LIKE sy-tabix.

CONSTANTS: yx(1) TYPE c VALUE 'X'.

SELECT-OPTIONS: order FOR ls_order-aufnr.

PARAMETERS: test(1) TYPE c DEFAULT 'X'.

IF order-low IS INITIAL.
  WRITE:/ 'Please enter order number or range of order numbers.'.
  EXIT.
ENDIF.

* select orders and reservation numbers
SELECT aufnr rsnum iphas FROM viaufks
                         INTO CORRESPONDING FIELDS OF TABLE lt_order
                         WHERE aufnr IN ORDER.

* select reservation items for reservation numbers
IF NOT lt_order[] IS INITIAL.
  SELECT rsnum rspos rsart xloek aufnr objnr
                           FROM resb
                           INTO CORRESPONDING FIELDS OF TABLE lt_rsnum
                           FOR ALL ENTRIES IN lt_order
                           WHERE rsnum = lt_order-rsnum
                           AND   xloek <> yx.
ELSE.
  WRITE:/'No records found.'.
  EXIT.
ENDIF.
IF lt_rsnum[] IS INITIAL.
  WRITE:/'No records found.'.
  EXIT.
ENDIF.
LOOP AT lt_rsnum INTO ls_rsnum.
  lc_tabix = sy-tabix.
  IF ls_rsnum-aufnr <> ls_order-aufnr.
*   read order
    READ TABLE lt_order INTO ls_order
                        WITH KEY aufnr = ls_rsnum-aufnr BINARY SEARCH.
  ENDIF.
  IF sy-subrc IS INITIAL.
*   if order is tech.completed (or higher), reservations have to be
*   deleted
    IF ls_order-iphas >= 3.
      ls_rsnum-xloek = yx.
      MODIFY lt_rsnum FROM ls_rsnum.
      CONTINUE.
    ENDIF.
  ENDIF.
* check for status deleted
  CALL FUNCTION 'STATUS_CHECK'
       EXPORTING
            objnr             = ls_rsnum-objnr
            status            = 'I0013'  "status 'deleted'
       EXCEPTIONS
            object_not_found  = 1
            status_not_active = 2
            OTHERS            = 3.
* status 'deleted' not set -> no changes
  IF sy-subrc <> 0.
    DELETE lt_rsnum INDEX lc_tabix.
    CONTINUE.
  ELSE.
* set deletion flag
    ls_rsnum-xloek = yx.
    MODIFY lt_rsnum FROM ls_rsnum.
  ENDIF.
ENDLOOP.

CLEAR ls_rsnum.
IF lt_rsnum[] IS INITIAL.
  WRITE:/'There are no records to be corrected'.
  EXIT.
ENDIF.
IF test IS INITIAL.
* update table resb
  LOOP AT lt_rsnum INTO ls_rsnum.
    UPDATE resb SET xloek = ls_rsnum-xloek
           WHERE rsnum = ls_rsnum-rsnum
           AND   rspos = ls_rsnum-rspos
           AND   rsart = ls_rsnum-rsart.
  ENDLOOP.
ENDIF.
* log
IF test IS INITIAL.
  WRITE:/ 'The deletion flags for the following reservations were set:'.
ELSE.
  WRITE:/'The del. flags for the following reservations are missing:'.
ENDIF.
WRITE:/ 'Reservation number'.
WRITE AT 20 'Item number'.
WRITE AT 33 'Record type'.
WRITE AT 47 'Order'.
CLEAR ls_rsnum.
LOOP AT lt_rsnum INTO ls_rsnum.
  WRITE:/ ls_rsnum-rsnum.
  WRITE AT 20 ls_rsnum-rspos.
  WRITE AT 33 ls_rsnum-rsart.
  WRITE AT 47 ls_rsnum-aufnr.
ENDLOOP.
