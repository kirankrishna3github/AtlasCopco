**&---------------------------------------------------------------------*
Report  ZTEST12243.
**&
**&---------------------------------------------------------------------*
**&
**&
**&---------------------------------------------------------------------*
*
*REPORT  ZTEST12243.
*
*DATA: l_obknr LIKE ser01-obknr,
*      teller(3) TYPE n.
*DATA: l_tabix TYPE sy-tabix,
*      l_posnv TYPE posnr.
*DATA: l_ettyp LIKE vbep-ettyp,
*      l_sobkz LIKE resb-sobkz,
*      gv_ebeln1 type ebeln.
*data: v_AESKD type lips-AESKD.
*data:t_vbelv type vbak-vbeln,
*     t_POSNV type vbap-posnr,
*     t_banfn type eban-banfn,
*     t_bnfpo type eban-bnfpo.
*
*  DATA: wa_ekkn TYPE ekkn,
*        it_ekes TYPE TABLE OF ekes,
*        wa_ekpo TYPE ekpo,
*        it_ekpo TYPE TABLE OF ekpo,
*        wa_ekes TYPE ekes,
*        v_traid TYPE likp-traid,
*        V_LGPBE type lips-LGPBE,
*        v_count TYPE i.
*
*  DATA: it_outtab2 TYPE TABLE OF t_lips,
*        wa_vbfa TYPE vbfa.
*data:vt_vbeln type vbeln.
** Mod air23411
*DATA:   it_po TYPE TABLE OF str_serial,
*        wa_po TYPE str_serial.
*CLEAR: it_po, wa_po.
** End Mod air23411
*
*READ TABLE tvblkp INTO gs_vblkp INDEX 1.
*
*SELECT * FROM lips
*INTO CORRESPONDING FIELDS OF TABLE it_lips
*WHERE vbeln = gs_vblkp-vbeln.
*
*SORT tvblkp BY lgpbe.
*
*
*LOOP AT it_lips INTO wa_lips WHERE NOT vgbel IS INITIAL.
*  EXIT.
*ENDLOOP.
*
*
*LOOP AT it_lips INTO wa_lips.
**Do not show GMACH lines when VBAP-PSTYV for LIPS-MATNR = ZP1, ZP2, ZP3
**or ZP4 or ZOFM
*  l_tabix = sy-tabix.
*
*  IF wa_lips-pstyv = 'ZP1'
*  OR wa_lips-pstyv = 'ZP2'
*  OR wa_lips-pstyv = 'ZP3'
*  OR wa_lips-pstyv = 'ZP4'
*  OR wa_lips-pstyv = 'ZOFM'.
*    DELETE it_lips INDEX l_tabix.
*    CONTINUE.
*  ENDIF.
*
*  SELECT SINGLE obknr INTO l_obknr
*  FROM ser01
*  WHERE lief_nr = wa_lips-vbeln
*      AND posnr = wa_lips-posnr.
*  IF sy-subrc EQ 0.
*    REFRESH: i_sernr.
*    SELECT *
*    FROM objk
*    INTO TABLE i_sernr
*    WHERE obknr EQ l_obknr.
*  ENDIF.
*
*  CLEAR wa_outtab.
*  wa_outtab = wa_lips.
*
**for the qty open:
*  CLEAR gs_vblkp.
*  READ TABLE tvblkp
*    INTO gs_vblkp
*    WITH KEY posnr = wa_lips-posnr.
*
** If entry does not exit, there is nothing left to pick
*  IF sy-subrc <> 0.
*    wa_outtab-lfimg = 0.
*  ELSE.
*    wa_outtab-lfimg = gs_vblkp-komng.
*  ENDIF.
*
*  IF NOT wa_outtab IS INITIAL.
*    APPEND wa_outtab TO it_outtab.
*  ENDIF.
*ENDLOOP.
*
*
*READ TABLE it_outtab INTO wa_outtab INDEX 1.
*
*SELECT SINGLE *
*  INTO wa_likp
*  FROM likp
*  WHERE vbeln EQ wa_outtab-vbeln.
*
*
** check if there is more then 1 salesorder/serviceorder
*clear : salesorders,
*        serviceorders,
*        gv_count_salo.
*sort it_outtab by vgbel vgpos.
*loop at it_outtab into wa_outtab.
*if wa_outtab-vgbel <> sv_vgbel.
*gv_count_salo = gv_count_salo + 1.
*sv_vgbel = wa_outtab-vgbel.
*endif.
*endloop.
*
*if gv_count_salo = 1.
* if WA_LIPS-VTWEG = '01'.
* salesorders = wa_lips-vgbel.
* SHIFT salesorders LEFT DELETING LEADING '0'.
* else.
*select single aufnr into serviceorders from vbak
*    where vbeln = wa_lips-vgbel
*      and aufnr <> ' '.
* SHIFT serviceorders LEFT DELETING LEADING '0'.
* endif.
*endif.
*if gv_count_salo > 1.
*if wa_lips-vtweg = '01'.
*clear: sv_vgbel,
*       gv_count.
*loop at it_outtab into wa_outtab.
*  if wa_outtab-vgbel <> sv_vgbel.
*  move wa_outtab-vgbel to gv_vgbel.
*  SHIFT gv_vgbel LEFT DELETING LEADING '0'.
*  add 1 to gv_count.
*  if gv_count = 1.
*    move gv_vgbel to salesorders.
*  else.
*    concatenate salesorders gv_vgbel into
*    salesorders separated by space.
*  endif.
*  sv_vgbel = wa_outtab-vgbel.
*  endif.
** not more then 4 ordernumbers
*  if gv_count = 4.
*  exit.
*  endif.
*endloop.
*endif.
** for service orders
*if wa_lips-vtweg = '11'.
*clear: sv_vgbel,
*       gv_count.
*sort it_outtab by vgbel posnr.
*loop at it_outtab into wa_outtab.
*  if wa_outtab-vgbel <> sv_vgbel.
*    select single aufnr into gv_aufnr
*      from vbak where vbeln = wa_outtab-vgbel.
*  SHIFT gv_aufnr LEFT DELETING LEADING '0'.
*  add 1 to gv_count.
*  if gv_count = 1.
*    move gv_aufnr to serviceorders.
*  else.
*    concatenate serviceorders gv_aufnr into
*    serviceorders separated by space.
*  endif.
*  sv_vgbel = wa_outtab-vgbel.
*  endif.
** not more then 3 salesordernumbers
*  if gv_count = 3.
*  exit.
*  endif.
*endloop.
*endif.
*endif.
*
** determine flow per detailline
*loop at it_outtab into wa_outtab.
*
*clear gv_lfart.
*select single lfart into gv_lfart from likp
*   where vbeln = wa_outtab-vbeln.
*CASE gv_lfart.
*  WHEN 'NLCC' OR 'ZNLC'.
*    wa_outtab-flow = 'ST TRF'.
*  WHEN 'NL'.
*    wa_outtab-flow = 'ST TRF'.
*  WHEN 'ZRL'.
*    wa_outtab-flow = 'RET'.
*  WHEN 'ZKT'.
*    wa_outtab-flow = 'KIT'.
*  WHEN OTHERS.
*    CLEAR l_ettyp.
*    SELECT SINGLE ettyp INTO l_ettyp FROM vbep
*    WHERE vbeln = wa_outtab-vgbel
*      AND posnr = wa_outtab-vgpos.
*
*    CASE wa_outtab-vtweg.
*      WHEN '01'.
*        IF l_ettyp = 'ZB'.
*          wa_outtab-flow = 'SDTC SA'.
*        ELSE.
*          wa_outtab-flow = 'SFS SA'.
*        ENDIF.
*      WHEN '11'.
***in this case we don't have a po:
***ZAS1 items on an ASO are delivered from normal stock, which is
**mormaly purchased via replenishment PO that is not relanted to any
**service.
***ZAS2 items on an ASO are delivered from normal advance shipment sales
**order stock, which is mormaly purchased via PO linked to a service
**sales order.
*
**           IF l_ettyp = 'Z2'.
*            READ TABLE it_lips INTO wa_lips
*            WITH KEY vbeln = wa_outtab-vbeln
*                     posnr = wa_outtab-posnr
*                     pstyv = 'ZAS2'.
*            IF sy-subrc = 0.
*              wa_outtab-flow = 'SDTC SE'.
*            ELSE.
*              wa_outtab-flow = 'SFS SE'.
*            ENDIF.
**            ENDIF.
*      WHEN '21'.
*        wa_outtab-flow = wa_lips-vgbel.
*    ENDCASE.
*ENDCASE.
*
*modify it_outtab from wa_outtab.
*endloop.
*
**break extmcs.
** fill field caseorbin in it_outtab
*loop at it_outtab into wa_outtab2.
*
*    gv_dtc = wa_outtab2-flow+0(4).
*    CLEAR wa_vbfa.
*
**    clear: gv_aeskd.
**    select single aeskd into gv_aeskd from lips
**      where vbeln = wa_outtab2-vbeln
**        and posnr = wa_outtab2-posnr.
*
*    IF  wa_outtab2-flow NE 'SDTC SA' AND wa_outtab2-flow NE 'SDTC SE'.
*
*"1371 ENDIF
*
*      wa_outtab2-caseorbin = wa_outtab2-lgpbe.
*      APPEND wa_outtab2 to it_outtab3.
*
*    ELSE." SDTC**************************************
*
*      IF wa_outtab2-flow = 'SDTC SE'.
****************** CHECK SERVICE ORDER
**        SELECT * FROM vbfa INTO wa_vbfa
**          WHERE vbeln = wa_outtab2-vgbel " or vbelv
**          AND posnn = wa_outtab2-posnr.
*        DATA: gv_ebeln   TYPE ebeln,
*        gv_ebelp   TYPE ebelp,
*        gv_vbeln   TYPE vbeln_vl,
*        gv_vbelp   TYPE posnr_vl,
*        gv_zz_aso_rsnum TYPE rsnum,
*        gv_zz_aso_rspos TYPE rspos.
*
*        CLEAR: gv_ebeln,
*               gv_ebelp,
*               gv_vbeln,
*               gv_vbelp,
*               gv_zz_aso_rsnum,
*               gv_zz_aso_rspos.
*
** get vbap
*        SELECT SINGLE zz_aso_rsnum zz_aso_rspos INTO
*          (gv_zz_aso_rsnum, gv_zz_aso_rspos) FROM vbap
*          WHERE vbeln = wa_outtab2-vbelv
*            AND posnr = wa_outtab2-vgpos
*            AND vbelv = wa_outtab2-vbelv
*            AND posnv = wa_outtab2-vgpos.
** get rsdbs
*        IF NOT gv_zz_aso_rsnum IS INITIAL.
*          SELECT SINGLE ebeln ebelp INTO (gv_ebeln, gv_ebelp) FROM rsdbs
*            WHERE rsnum = gv_zz_aso_rsnum
*              AND rspos = gv_zz_aso_rspos
*              and ebeln <> ' '.
** get ekkn
*        ELSE.
*          SELECT SINGLE ebeln ebelp INTO (gv_ebeln, gv_ebelp) FROM ekkn
*" get PO
*            WHERE vbeln = wa_outtab2-vbelv
*              AND vbelp = wa_outtab2-VGPOS.
*        ENDIF.
*** get ekes
**        SELECT SINGLE vbeln vbelp INTO (gv_vbeln, gv_vbelp) FROM ekes
**           WHERE ebeln = gv_ebeln
**             AND ebelp = gv_ebelp
**             AND ebtyp = 'LA'.
*** get likp
**        SELECT SINGLE traid INTO wa_outtab2-caseorbin FROM likp
**           WHERE vbeln = gv_vbeln.
**************************************************
*      ELSE.
*        clear wa_ekkn.
** 20091110 EXTUVE
** Join included with EKPO table to check for deletion indicator
**        SELECT SINGLE * FROM ekkn inner join ekpo
**                 on ekkn~ebeln = ekpo~ebeln
**                INTO corresponding fields of wa_ekkn
**          WHERE ekkn~vbeln = wa_outtab2-vgbel " SO or SEO
**          AND   ekkn~vbelp = wa_outtab2-vgpos
**          and   ekpo~loekz ne 'L'.
* SELECT SINGLE ebeln ebelp INTO (gv_ebeln, gv_ebelp) FROM ekkn
*" get PO
*            WHERE vbeln = wa_outtab2-vgbel
*              AND vbelp = wa_outtab2-VGPOS.
*
** 20091110 EXTUVE
*        IF sy-subrc NE 0.
*          SELECT * FROM vbfa INTO wa_vbfa
*            WHERE vbeln = wa_outtab2-vgbel " SEO
*            AND posnn = wa_outtab2-vgpos.
*          ENDSELECT.
*          IF sy-subrc NE 0.
*            SELECT SINGLE * FROM ekkn INTO wa_ekkn
*              WHERE vbeln = wa_vbfa-vbelv " SO
*              AND vbelp = wa_vbfa-posnv.
*          ENDIF.
*        ENDIF.
**        gv_ebeln = wa_ekkn-ebeln. " PO
**        gv_ebelp = wa_ekkn-ebelp.
*
*        gv_ebeln = gv_ebeln. " PO
*        gv_ebelp = gv_ebelp.
*      ENDIF.
** Mod AIR23411
*      CLEAR wa_po.
*      READ TABLE it_po INTO wa_po
*        WITH KEY vbeln = gv_ebeln.
*        IF sy-subrc NE 0.
*          CONCATENATE v_po gv_ebeln INTO v_po SEPARATED BY space.
*          wa_po-vbeln = gv_ebeln.
*          APPEND wa_po TO it_po.
*        ENDIF.
** End mod AIR23411
*       SELECT * FROM ekes INTO TABLE it_ekes
*          WHERE ebeln = gv_ebeln     " PO
*          AND ebelp = gv_ebelp       "EXTUVE Incident 7210
*          AND ebtyp = 'LA'.
*
*          if it_ekes[] is initial.
*           select single vbelv
*                    posnv
*                    into (t_vbelv, t_posnv)
*                    from vbfa  where VBELN = wa_outtab2-vbeln
*                                 and POSNN = wa_outtab2-posnr
*                                and VBTYP_N = 'J'
*                                and VBTYP_V = 'C'.
*
*                      if sy-subrc = 0.
*
*      select single BANFN
*                    BNFPO
*                    into (t_Banfn, t_BNFPO)
*                    from vbep  where vbeln = t_vbelv
*                               and   posnr = t_posnv
*                               and   BMENG ne space.
*                          if sy-subrc  = 0.
*      select single ebeln
*                    ebelp
*                    INTO (gv_ebeln, gv_ebelp)
*                    from eban where BANFN = t_banfn
*                              and   bnfpo = t_bnfpo.
*                      if sy-subrc = 0.
*
*       SELECT * FROM ekes INTO TABLE it_ekes
*          WHERE ebeln = gv_ebeln     " PO
*          AND ebelp = gv_ebelp       "EXTUVE Incident 7210
*          AND ebtyp = 'LA'.
*
*endif.
*endif.
*endif.
*          endif.
*
*   SORT it_ekes BY vbeln .  "DESCENDING.
*
*      CLEAR v_count.
*      if it_ekes[] is initial.
*      IF wa_outtab2-flow = 'SDTC SE' AND gv_ebeln IS INITIAL.
*
*      select single vbelv
*                    posnv
*                    into (t_vbelv, t_posnv)
*                    from vbfa  where VBELN = wa_outtab2-vbeln
*                                 and POSNN = wa_outtab2-posnr
*                                and VBTYP_N = 'J'
*                                and VBTYP_V = 'C'.
*
*                      if sy-subrc = 0.
*
*      select single BANFN
*                    BNFPO
*                    into (t_Banfn, t_BNFPO)
*                    from vbep  where vbeln = t_vbelv
*                               and   posnr = t_posnv
*                               and   BMENG ne space.
*                          if sy-subrc  = 0.
*      select single ebeln
*                    ebelp
*                    INTO (gv_ebeln, gv_ebelp)
*                    from eban where BANFN = t_banfn
*                              and   bnfpo = t_bnfpo.
*                      if sy-subrc = 0.
*
*
**select single ebeln ebelp INTO (gv_ebeln, gv_ebelp) from ekpo
**                          where matnr = wa_outtab2-matnr
**                          and   STATU = 'V'.
*
*
*         select single vbeln
*                       into vt_vbeln
*                       from ekes  where  ebeln = gv_ebeln
*                                   and   ebelp = gv_ebelp
*                                   and   EBTYP = 'LA'
*                                   and   KZDIS = 'X'.
*
*           if sy-subrc = 0.
*          select single traid into v_traid
*
*                   from likp where vbeln = vt_vbeln.
*
*     wa_outtab2-caseorbin = v_traid.
*
*      APPEND wa_outtab2 to it_outtab3.
*      endif.
*      endif.
*      endif.
*endif.
*
*      elseIF wa_outtab2-flow = 'SDTC SA' AND not gv_ebeln IS INITIAL.
*.
*       select single vbeln into vt_vbeln from ekes
*         where                     ebeln = gv_ebeln
*                                   and   ebelp = gv_ebelp
*                                   and   EBTYP = 'LA'
*                                   and   KZDIS = 'X'.
*
*           if sy-subrc = 0.
*          select single traid into v_traid
*
*                   from likp where vbeln = vt_vbeln.
*
*     wa_outtab2-caseorbin = v_traid.
*
*
*      APPEND wa_outtab2 to it_outtab3.
*      endif.
*
*
*    endif.
*
*
*      else.
*    LOOP AT it_ekes INTO wa_ekes. " IBDLV
*
** Check if the inbounddelivery is registered in warehouse, otherwise it
**couldn't be picked
*        SELECT SINGLE * FROM vbfa INTO wa_vbfa
*          WHERE vbelv = wa_ekes-vbeln
*            AND posnv = wa_ekes-vbelp.
*
*        IF sy-subrc EQ 0        " IBDLV is registered in warehouse
*          AND ( wa_ekes-menge NE '0.00' OR wa_ekes-menge NE '' ).
*
*        v_count = v_count + wa_ekes-menge.
*        MOVE-CORRESPONDING wa_outtab2 TO wa_outtab.
*        IF v_count <= wa_outtab2-lfimg.
*
*
*        IF wa_outtab2-flow = 'SDTC SE' or
*           wa_outtab2-flow = 'SDTC SA'.
*
*
* SELECT SINGLE AESKD
*               FROM lips INTO V_AESKD
*               WHERE vbeln = wa_outtab2-vbeln
*               and   posnr = wa_outtab2-posnr
*               and   matnr = wa_outtab2-matnr.
*               if sy-subrc = 0.
*               if V_aeskd ne 'multi'.
*           wa_outtab-caseorbin = V_AESKD.
*
*           if  wa_outtab-caseorbin is initial.
*          SELECT SINGLE traid FROM likp INTO v_traid
*                        WHERE vbeln = wa_ekes-vbeln.
*          wa_outtab-caseorbin = v_traid.
*
*           endif.
*           else.
*           SELECT SINGLE traid FROM likp INTO v_traid
*                        WHERE vbeln = wa_ekes-vbeln.
*          wa_outtab-caseorbin = v_traid.
*
*           endif.
*
*endif.
*
*else.
*
*          SELECT SINGLE traid FROM likp INTO v_traid
*          WHERE vbeln = wa_ekes-vbeln.
*       wa_outtab-caseorbin = v_traid.
*endif.
*
*          wa_outtab-lfimg = wa_ekes-menge.
*
**          wa_outtab-posnr = wa_ekes-vbelp.
*
*
** Mod 081113 ****
*
*            APPEND wa_outtab to it_outtab3.
** Mod EXTUVE incident 6786
*            IF v_count = wa_outtab2-lfimg.
*               v_count = 0.
**              EXIT.
*            ENDIF.
** Mod EXTUVE incident 6786
*          ELSE.
*
** Add only 1 line without case numbers
*            DELETE it_outtab3 WHERE posnr = wa_outtab-posnr.
*
** End Mod 081113 ****
*  IF wa_outtab2-flow = 'SDTC SE' or
*           wa_outtab2-flow = 'SDTC SA'.
*
*
* SELECT SINGLE AESKD
*               FROM lips INTO V_AESKD
*               WHERE vbeln = wa_outtab2-vbeln
*               and   posnr = wa_outtab2-posnr
*               and   matnr = wa_outtab2-matnr.
*   if V_aeskd ne 'multi'.
*
*           wa_outtab-caseorbin = V_AESKD.
*           else.
*           SELECT SINGLE traid FROM likp INTO v_traid
*                        WHERE vbeln = wa_ekes-vbeln.
*          wa_outtab-caseorbin = v_traid.
*           endif.
*endif.
*          APPEND wa_outtab to it_outtab3.
*
*        ENDIF.
*
*        ENDIF.
**
*      ENDLOOP.
*      endif.
*    ENDIF.
**    if gv_dtc = 'SDTC'.
**      wa_outtab2-caseorbin = gv_aeskd.
**    else.
**      wa_outtab2-caseorbin = wa_outtab2-lgpbe.
**    endif.
**    modify it_outtab2 from wa_outtab2.
*
*
*  endloop.
** new sorting by flow , caseorbin , posnr
*  Sort it_outtab3 BY FLOW caseorbin.
*  Delete adjacent duplicates from it_outtab3 comparing
*                              posnr matnr flow Caseorbin LFIMG.
*  SORT it_outtab3 BY FLOW CASEORBIN.

DATA: gt_t006a TYPE TABLE OF t006a,
      gt_iso   TYPE TABLE OF yse_isocodes.

data: wa_iso    TYPE yse_isocodeS,
      WA_T006A  TYPE T006A.

select *
  from t006a
  INTO table gt_t006a
  where spras eq 'RU'.

LOOP AT GT_T006A INTO WA_T006A.

  WA_ISO-SPRAS = WA_T006A-SPRAS.
  WA_ISO-MSEHI = WA_T006A-MSEHI.
  APPEND WA_ISO TO GT_ISO.
  CLEAR WA_ISO.

ENDLOOP.

IF GT_ISO[] IS NOT INITIAL.
  INSERT YSE_ISOCODES FROM TABLE GT_ISO.
ENDIF.
