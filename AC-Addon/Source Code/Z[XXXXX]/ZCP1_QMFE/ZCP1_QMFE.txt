REPORT ZAL_ABAP message-id 26 line-size 255
no standard page heading.
* ZCP1_QMFE.
PARAMETER DOWNLOAD(1) DEFAULT 'S' lower case. "N-svr,Y-clnt
PARAMETER EXECMODE(1) DEFAULT 'B' lower case. "D-dlg,B-btch
PARAMETER OUT_DIR(48) DEFAULT "output file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER IN_DIR(48) DEFAULT "input file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER P_DEST TYPE RFCDES-RFCDEST DEFAULT
'NONE'.
PARAMETER P_PROGID TYPE RFCOPT-RFCEXEC DEFAULT
SPACE.
PARAMETER P_GWHOST TYPE RFCOPT-RFCGWHOST DEFAULT
SPACE.
PARAMETER P_GWSERV TYPE RFCOPT-RFCGWSERV DEFAULT
SPACE.
PARAMETER P_SRVFM(30) DEFAULT "Server Callback function
SPACE.
PARAMETER P_PKGSZ TYPE I DEFAULT "Stream package size
5000.
PARAMETER P_SNC_ON(1) DEFAULT "X-on SPACE-off
SPACE.

PARAMETER $PARAM1 TYPE D.

PARAMETER $PARAM2 TYPE D.

PARAMETER P_DF_VK(40) DEFAULT "ABAP data flow object key
'' lower case.
PARAMETER P_DI_GEN(40) DEFAULT "DI version that generated ABAP
'' lower case.

*** Machine generated ABAP. Do not modify.            ***
*** (C)Copyright Business Objects S.A.  All rights reserved. ***
*
* Date Time:
*    03/03/16 07:50:53
* SAP used for generated this ABAP:
*    Release: 701
*    Host   : 10.25.3.82
*
* ABAP Dataflow Name:
*    DF_R3_CTS_LZ_SAP_CP1_QMFE_D
* ABAP program name in SAP:
*  ZCP1_QMFE
* Generated ABAP file name:
*    //AIRSBEAP0512/D$/Data/SAPLogistics/VAL/ABAP/ZCP1_QMFE
TABLES QMFE.
TABLES AUFK.
TABLES QMEL.
TABLES QMIH.
TABLES ILOA.
TABLES ZSTC_SALES_COMP.

DATA: begin of ITAB7 occurs 0,
MANDT(3) TYPE C,
QMNUM(12) TYPE C,
FENUM(4) TYPE N,
ERNAM(12) TYPE C,
ERDAT TYPE D,
AENAM(12) TYPE C,
AEDAT TYPE D,
FETXT(40) TYPE C,
FEKAT(1) TYPE C,
FEGRP(8) TYPE C,
FECOD(4) TYPE C,
FEVER(6) TYPE C,
OTKAT(1) TYPE C,
OTGRP(8) TYPE C,
OTEIL(4) TYPE C,
OTVER(6) TYPE C,
BAUTL(18) TYPE C,
EBORT(20) TYPE C,
INDTX(1) TYPE C,
KZMLA(1) TYPE C,
ERZEIT(24) TYPE C,
AEZEIT(24) TYPE C,
KZORG(1) TYPE C,
WDFEH(1) TYPE C,
FEQKLAS(2) TYPE C,
FCOAUFNR(12) TYPE C,
FMGFRD(16) TYPE P DECIMALS 3,
FMGEIG(16) TYPE P DECIMALS 3,
FMGEIN(3) TYPE C,
ANZFEHLER TYPE I,
FEHLBEW TYPE F,
UNITFLBEW(3) TYPE C,
FEART(8) TYPE C,
PNLKN(8) TYPE N,
MERKNR(4) TYPE N,
PROBENR(6) TYPE N,
PHYNR(12) TYPE C,
PRUEFLINR(18) TYPE C,
CROBJTY(2) TYPE C,
ARBPL(8) TYPE N,
ARBPLWERK(4) TYPE C,
FENUMORG(4) TYPE N,
KZSYSFE(1) TYPE C,
KZLOESCH(1) TYPE C,
POSNR(4) TYPE N,
HERPOS(1) TYPE C,
AUTKZ(1) TYPE C,
MATNR(18) TYPE C,
WERKS(4) TYPE C,
EKORG(4) TYPE C,
INFNR(10) TYPE C,
KOSTL(10) TYPE C,
LSTAR(6) TYPE C,
PRZNR(12) TYPE C,
MENGE(16) TYPE P DECIMALS 3,
Z_BUKRS(4) TYPE C,
Z_VKORG(4) TYPE C,
Z_WERKS(4) TYPE C,
Z_EKORG(4) TYPE C,
Z_MAMUSERCMPY(4) TYPE C,
Z_REGION(40) TYPE C,
Z_COUNTRY(40) TYPE C,
Z_COUNTRYDSCR(255) TYPE C,
Z_SALESCOMPANY(40) TYPE C,
Z_SALESCMPDSCR(255) TYPE C.
DATA: end of ITAB7.

data: append_flag(1) value ' ',
      cntbuf type i,
      delimleng type i,last_batch(1) value ' '.

CONSTANTS C_DF_VK(40) VALUE '1674'.
CONSTANTS C_DI_GEN(40) VALUE '14.2.3.660'.
DATA WARN_MSG(50).


DATA: gv_directory     TYPE epsdirnam  VALUE '/var/load/xxx/UK/read/',
      gv_logsys        LIKE tbdlst-logsys.

start-of-selection.
* Logical system
  CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
    IMPORTING
      own_logical_system             = gv_logsys
    EXCEPTIONS
      own_logical_system_not_defined = 1
      OTHERS                         = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE 'E' NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    STOP.
  ENDIF.
  REPLACE 'xxx' IN out_dir WITH gv_logsys(3).
  REPLACE 'xxx' IN in_dir WITH gv_logsys(3).


  IF DOWNLOAD = 'S' OR
     DOWNLOAD = 'N' OR
     DOWNLOAD = 'Y'.
      .
  ELSE.
     DATA: m_xfer_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'data transfer method: ' DOWNLOAD
'. Regenerate the ABAP program and upload to this system.'
     INTO m_xfer_err_msg.
     MESSAGE  E240(S#) WITH m_xfer_err_msg.
  ENDIF.

  IF EXECMODE = 'B' OR
     EXECMODE = 'D'.
      .
  ELSE.
     DATA: m_exec_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'execution option: ' EXECMODE
'. Regenerate the ABAP program and upload to this system.'
     INTO m_exec_err_msg.
     MESSAGE  E240(S#) WITH m_exec_err_msg.
  ENDIF.

  IF DOWNLOAD = 'S'.
     PERFORM CONNECT_RFCDEST_TO_PROGID.
  ENDIF.



PERFORM FORM7.
last_batch = 'X'.
PERFORM FORM8.
FREE ITAB7.
  IF DOWNLOAD = 'S'.
     PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
  ENDIF.


end-of-selection.

CLEAR WARN_MSG.

IF NOT P_DF_VK IS INITIAL.
  IF P_DF_VK <> C_DF_VK.
     CONCATENATE '$$Warning$'
                 C_DF_VK
                 '$' INTO WARN_MSG.
  ENDIF.
ENDIF.
IF NOT P_DI_GEN IS INITIAL.
  IF P_DI_GEN <> C_DI_GEN.
     IF WARN_MSG IS INITIAL.
       CONCATENATE '$$Warning$$'
                   C_DI_GEN
                   INTO WARN_MSG.
     ELSE.
       CONCATENATE WARN_MSG
                   C_DI_GEN
                   INTO WARN_MSG.
     ENDIF.
  ENDIF.
ENDIF.

IF NOT WARN_MSG IS INITIAL.
  IF EXECMODE = 'D'.
    WRITE WARN_MSG.
    NEW-LINE.
  ELSE.
    MESSAGE S240(S#) with WARN_MSG.
  ENDIF.
ENDIF.


write  '* Program Complete *'.
write  '(C)Copyright Business Objects S.A.  All rights reserved.'.

FORM FORM7.
DATA ALTMP369(3) TYPE C.
DATA ALTMP370(12) TYPE C.
DATA ALTMP371(4) TYPE N.
DATA ALTMP372(12) TYPE C.
DATA ALTMP373 TYPE D.
DATA ALTMP374(12) TYPE C.
DATA ALTMP375 TYPE D.
DATA ALTMP376(40) TYPE C.
DATA ALTMP377(1) TYPE C.
DATA ALTMP378(8) TYPE C.
DATA ALTMP379(4) TYPE C.
DATA ALTMP380(6) TYPE C.
DATA ALTMP381(1) TYPE C.
DATA ALTMP382(8) TYPE C.
DATA ALTMP383(4) TYPE C.
DATA ALTMP384(6) TYPE C.
DATA ALTMP385(18) TYPE C.
DATA ALTMP386(20) TYPE C.
DATA ALTMP387(1) TYPE C.
DATA ALTMP388(1) TYPE C.
DATA ALTMP389 TYPE T.
DATA ALTMP390 TYPE T.
DATA ALTMP391(1) TYPE C.
DATA ALTMP392(1) TYPE C.
DATA ALTMP393(2) TYPE C.
DATA ALTMP394(12) TYPE C.
DATA ALTMP395(16) TYPE P DECIMALS 3.
DATA ALTMP396(16) TYPE P DECIMALS 3.
DATA ALTMP397(3) TYPE C.
DATA ALTMP398 TYPE I.
DATA ALTMP399 TYPE F.
DATA ALTMP400(3) TYPE C.
DATA ALTMP401(8) TYPE C.
DATA ALTMP402(8) TYPE N.
DATA ALTMP403(4) TYPE N.
DATA ALTMP404(6) TYPE N.
DATA ALTMP405(12) TYPE C.
DATA ALTMP406(18) TYPE C.
DATA ALTMP407(2) TYPE C.
DATA ALTMP408(8) TYPE N.
DATA ALTMP409(4) TYPE C.
DATA ALTMP410(4) TYPE N.
DATA ALTMP411(1) TYPE C.
DATA ALTMP412(1) TYPE C.
DATA ALTMP413(4) TYPE N.
DATA ALTMP414(1) TYPE C.
DATA ALTMP415(1) TYPE C.
DATA ALTMP416(18) TYPE C.
DATA ALTMP417(4) TYPE C.
DATA ALTMP418(4) TYPE C.
DATA ALTMP419(10) TYPE C.
DATA ALTMP420(10) TYPE C.
DATA ALTMP421(6) TYPE C.
DATA ALTMP422(12) TYPE C.
DATA ALTMP423(16) TYPE P DECIMALS 3.
DATA ALTMP424(4) TYPE C.
DATA ALTMP425(4) TYPE C.
DATA ALTMP426(4) TYPE C.
DATA ALTMP427(4) TYPE C.
DATA ALTMP428(4) TYPE C.
DATA ALTMP429(40) TYPE C.
DATA ALTMP430(40) TYPE C.
DATA ALTMP431(255) TYPE C.
DATA ALTMP432(40) TYPE C.
DATA ALTMP433(255) TYPE C.

DATA QMFE9MANDT LIKE QMFE-MANDT.
DATA QMFE9QMNUM LIKE QMFE-QMNUM.
DATA QMFE9FENUM LIKE QMFE-FENUM.
DATA QMFE9ERNAM LIKE QMFE-ERNAM.
DATA QMFE9ERDAT LIKE QMFE-ERDAT.
DATA QMFE9AENAM LIKE QMFE-AENAM.
DATA QMFE9AEDAT LIKE QMFE-AEDAT.
DATA QMFE9FETXT LIKE QMFE-FETXT.
DATA QMFE9FEKAT LIKE QMFE-FEKAT.
DATA QMFE9FEGRP LIKE QMFE-FEGRP.
DATA QMFE9FECOD LIKE QMFE-FECOD.
DATA QMFE9FEVER LIKE QMFE-FEVER.
DATA QMFE9OTKAT LIKE QMFE-OTKAT.
DATA QMFE9OTGRP LIKE QMFE-OTGRP.
DATA QMFE9OTEIL LIKE QMFE-OTEIL.
DATA QMFE9OTVER LIKE QMFE-OTVER.
DATA QMFE9BAUTL LIKE QMFE-BAUTL.
DATA QMFE9EBORT LIKE QMFE-EBORT.
DATA QMFE9INDTX LIKE QMFE-INDTX.
DATA QMFE9KZMLA LIKE QMFE-KZMLA.
DATA QMFE9ERZEIT LIKE QMFE-ERZEIT.
DATA QMFE9AEZEIT LIKE QMFE-AEZEIT.
DATA QMFE9KZORG LIKE QMFE-KZORG.
DATA QMFE9WDFEH LIKE QMFE-WDFEH.
DATA QMFE9FEQKLAS LIKE QMFE-FEQKLAS.
DATA QMFE9FCOAUFNR LIKE QMFE-FCOAUFNR.
DATA QMFE9FMGFRD LIKE QMFE-FMGFRD.
DATA QMFE9FMGEIG LIKE QMFE-FMGEIG.
DATA QMFE9FMGEIN LIKE QMFE-FMGEIN.
DATA QMFE9ANZFEHLER LIKE QMFE-ANZFEHLER.
DATA QMFE9FEHLBEW LIKE QMFE-FEHLBEW.
DATA QMFE9UNITFLBEW LIKE QMFE-UNITFLBEW.
DATA QMFE9FEART LIKE QMFE-FEART.
DATA QMFE9PNLKN LIKE QMFE-PNLKN.
DATA QMFE9MERKNR LIKE QMFE-MERKNR.
DATA QMFE9PROBENR LIKE QMFE-PROBENR.
DATA QMFE9PHYNR LIKE QMFE-PHYNR.
DATA QMFE9PRUEFLINR LIKE QMFE-PRUEFLINR.
DATA QMFE9CROBJTY LIKE QMFE-CROBJTY.
DATA QMFE9ARBPL LIKE QMFE-ARBPL.
DATA QMFE9ARBPLWERK LIKE QMFE-ARBPLWERK.
DATA QMFE9FENUMORG LIKE QMFE-FENUMORG.
DATA QMFE9KZSYSFE LIKE QMFE-KZSYSFE.
DATA QMFE9KZLOESCH LIKE QMFE-KZLOESCH.
DATA QMFE9POSNR LIKE QMFE-POSNR.
DATA QMFE9HERPOS LIKE QMFE-HERPOS.
DATA QMFE9AUTKZ LIKE QMFE-AUTKZ.
DATA QMFE9MATNR LIKE QMFE-MATNR.
DATA QMFE9WERKS LIKE QMFE-WERKS.
DATA QMFE9EKORG LIKE QMFE-EKORG.
DATA QMFE9INFNR LIKE QMFE-INFNR.
DATA QMFE9KOSTL LIKE QMFE-KOSTL.
DATA QMFE9LSTAR LIKE QMFE-LSTAR.
DATA QMFE9PRZNR LIKE QMFE-PRZNR.
DATA QMFE9MENGE LIKE QMFE-MENGE.
DATA ZSTC_SALE_019BUKRS LIKE ZSTC_SALES_COMP-BUKRS.
DATA ZSTC_SALE_019VKORG LIKE ZSTC_SALES_COMP-VKORG.
DATA ZSTC_SALE_019WERKS LIKE ZSTC_SALES_COMP-WERKS.
DATA ZSTC_SALE_019EKORG LIKE ZSTC_SALES_COMP-EKORG.
DATA ZSTC_SALE_019MAMUSERCMPY LIKE ZSTC_SALES_COMP-MAMUSERCMPY.
DATA ZSTC_SALE_019REGION LIKE ZSTC_SALES_COMP-REGION.
DATA ZSTC_SALE_019COUNTRY LIKE ZSTC_SALES_COMP-COUNTRY.
DATA ZSTC_SALE_019COUNTRYDSCR LIKE ZSTC_SALES_COMP-COUNTRYDSCR.
DATA ZSTC_SALE_019SALESCOMPANY LIKE ZSTC_SALES_COMP-SALESCOMPANY.
DATA ZSTC_SALE_019SALESCMPDSCR LIKE ZSTC_SALES_COMP-SALESCMPDSCR.
DATA AUFK9IDAT3 LIKE AUFK-IDAT3.
DATA QMEL9VKORG LIKE QMEL-VKORG.
DATA QMIH9ILOAN LIKE QMIH-ILOAN.
DATA ILOA9ILOAN LIKE ILOA-ILOAN.
DATA QMEL9QMNUM LIKE QMEL-QMNUM.
DATA QMIH9QMNUM LIKE QMIH-QMNUM.
DATA QMEL9AUFNR LIKE QMEL-AUFNR.
DATA AUFK9AUFNR LIKE AUFK-AUFNR.



SELECT
  QMFE9~MANDT
  QMFE9~QMNUM
  QMFE9~FENUM
  QMFE9~ERNAM
  QMFE9~ERDAT
  QMFE9~AENAM
  QMFE9~AEDAT
  QMFE9~FETXT
  QMFE9~FEKAT
  QMFE9~FEGRP
  QMFE9~FECOD
  QMFE9~FEVER
  QMFE9~OTKAT
  QMFE9~OTGRP
  QMFE9~OTEIL
  QMFE9~OTVER
  QMFE9~BAUTL
  QMFE9~EBORT
  QMFE9~INDTX
  QMFE9~KZMLA
  QMFE9~ERZEIT
  QMFE9~AEZEIT
  QMFE9~KZORG
  QMFE9~WDFEH
  QMFE9~FEQKLAS
  QMFE9~FCOAUFNR
  QMFE9~FMGFRD
  QMFE9~FMGEIG
  QMFE9~FMGEIN
  QMFE9~ANZFEHLER
  QMFE9~FEHLBEW
  QMFE9~UNITFLBEW
  QMFE9~FEART
  QMFE9~PNLKN
  QMFE9~MERKNR
  QMFE9~PROBENR
  QMFE9~PHYNR
  QMFE9~PRUEFLINR
  QMFE9~CROBJTY
  QMFE9~ARBPL
  QMFE9~ARBPLWERK
  QMFE9~FENUMORG
  QMFE9~KZSYSFE
  QMFE9~KZLOESCH
  QMFE9~POSNR
  QMFE9~HERPOS
  QMFE9~AUTKZ
  QMFE9~MATNR
  QMFE9~WERKS
  QMFE9~EKORG
  QMFE9~INFNR
  QMFE9~KOSTL
  QMFE9~LSTAR
  QMFE9~PRZNR
  QMFE9~MENGE
  ZSTC_SALE_019~BUKRS
  ZSTC_SALE_019~VKORG
  ZSTC_SALE_019~WERKS
  ZSTC_SALE_019~EKORG
  ZSTC_SALE_019~MAMUSERCMPY
  ZSTC_SALE_019~REGION
  ZSTC_SALE_019~COUNTRY
  ZSTC_SALE_019~COUNTRYDSCR
  ZSTC_SALE_019~SALESCOMPANY
  ZSTC_SALE_019~SALESCMPDSCR
  AUFK9~IDAT3
  QMEL9~VKORG
  QMIH9~ILOAN
  ILOA9~ILOAN
  QMEL9~QMNUM
  QMIH9~QMNUM
  QMEL9~AUFNR
  AUFK9~AUFNR
into (QMFE9MANDT,
  QMFE9QMNUM,
  QMFE9FENUM,
  QMFE9ERNAM,
  QMFE9ERDAT,
  QMFE9AENAM,
  QMFE9AEDAT,
  QMFE9FETXT,
  QMFE9FEKAT,
  QMFE9FEGRP,
  QMFE9FECOD,
  QMFE9FEVER,
  QMFE9OTKAT,
  QMFE9OTGRP,
  QMFE9OTEIL,
  QMFE9OTVER,
  QMFE9BAUTL,
  QMFE9EBORT,
  QMFE9INDTX,
  QMFE9KZMLA,
  QMFE9ERZEIT,
  QMFE9AEZEIT,
  QMFE9KZORG,
  QMFE9WDFEH,
  QMFE9FEQKLAS,
  QMFE9FCOAUFNR,
  QMFE9FMGFRD,
  QMFE9FMGEIG,
  QMFE9FMGEIN,
  QMFE9ANZFEHLER,
  QMFE9FEHLBEW,
  QMFE9UNITFLBEW,
  QMFE9FEART,
  QMFE9PNLKN,
  QMFE9MERKNR,
  QMFE9PROBENR,
  QMFE9PHYNR,
  QMFE9PRUEFLINR,
  QMFE9CROBJTY,
  QMFE9ARBPL,
  QMFE9ARBPLWERK,
  QMFE9FENUMORG,
  QMFE9KZSYSFE,
  QMFE9KZLOESCH,
  QMFE9POSNR,
  QMFE9HERPOS,
  QMFE9AUTKZ,
  QMFE9MATNR,
  QMFE9WERKS,
  QMFE9EKORG,
  QMFE9INFNR,
  QMFE9KOSTL,
  QMFE9LSTAR,
  QMFE9PRZNR,
  QMFE9MENGE,
  ZSTC_SALE_019BUKRS,
  ZSTC_SALE_019VKORG,
  ZSTC_SALE_019WERKS,
  ZSTC_SALE_019EKORG,
  ZSTC_SALE_019MAMUSERCMPY,
  ZSTC_SALE_019REGION,
  ZSTC_SALE_019COUNTRY,
  ZSTC_SALE_019COUNTRYDSCR,
  ZSTC_SALE_019SALESCOMPANY,
  ZSTC_SALE_019SALESCMPDSCR,
  AUFK9IDAT3,
  QMEL9VKORG,
  QMIH9ILOAN,
  ILOA9ILOAN,
  QMEL9QMNUM,
  QMIH9QMNUM,
  QMEL9AUFNR,
  AUFK9AUFNR)
FROM QMFE AS QMFE9
 INNER JOIN QMEL AS QMEL9
 ON ( QMFE9~QMNUM = QMEL9~QMNUM )
 INNER JOIN QMIH AS QMIH9
 ON ( QMEL9~QMNUM = QMIH9~QMNUM )
 INNER JOIN AUFK AS AUFK9
 ON ( QMEL9~AUFNR = AUFK9~AUFNR )
 INNER JOIN ZSTC_SALES_COMP AS ZSTC_SALE_019
 ON ( QMEL9~VKORG = ZSTC_SALE_019~VKORG )
 INNER JOIN ILOA AS ILOA9
 ON ( QMIH9~ILOAN = ILOA9~ILOAN )
WHERE ( ( AUFK9~IDAT3 <= $PARAM1 )
 OR ( AUFK9~IDAT3 >= $PARAM2 ) ).
ALTMP369 = QMFE9MANDT.
ALTMP370 = QMFE9QMNUM.
ALTMP371 = QMFE9FENUM.
ALTMP372 = QMFE9ERNAM.
ALTMP373 = QMFE9ERDAT.
ALTMP374 = QMFE9AENAM.
ALTMP375 = QMFE9AEDAT.
ALTMP376 = QMFE9FETXT.
ALTMP377 = QMFE9FEKAT.
ALTMP378 = QMFE9FEGRP.
ALTMP379 = QMFE9FECOD.
ALTMP380 = QMFE9FEVER.
ALTMP381 = QMFE9OTKAT.
ALTMP382 = QMFE9OTGRP.
ALTMP383 = QMFE9OTEIL.
ALTMP384 = QMFE9OTVER.
ALTMP385 = QMFE9BAUTL.
ALTMP386 = QMFE9EBORT.
ALTMP387 = QMFE9INDTX.
ALTMP388 = QMFE9KZMLA.
ALTMP389 = QMFE9ERZEIT.
ALTMP390 = QMFE9AEZEIT.
ALTMP391 = QMFE9KZORG.
ALTMP392 = QMFE9WDFEH.
ALTMP393 = QMFE9FEQKLAS.
ALTMP394 = QMFE9FCOAUFNR.
ALTMP395 = QMFE9FMGFRD.
ALTMP396 = QMFE9FMGEIG.
ALTMP397 = QMFE9FMGEIN.
ALTMP398 = QMFE9ANZFEHLER.
ALTMP399 = QMFE9FEHLBEW.
ALTMP400 = QMFE9UNITFLBEW.
ALTMP401 = QMFE9FEART.
ALTMP402 = QMFE9PNLKN.
ALTMP403 = QMFE9MERKNR.
ALTMP404 = QMFE9PROBENR.
ALTMP405 = QMFE9PHYNR.
ALTMP406 = QMFE9PRUEFLINR.
ALTMP407 = QMFE9CROBJTY.
ALTMP408 = QMFE9ARBPL.
ALTMP409 = QMFE9ARBPLWERK.
ALTMP410 = QMFE9FENUMORG.
ALTMP411 = QMFE9KZSYSFE.
ALTMP412 = QMFE9KZLOESCH.
ALTMP413 = QMFE9POSNR.
ALTMP414 = QMFE9HERPOS.
ALTMP415 = QMFE9AUTKZ.
ALTMP416 = QMFE9MATNR.
ALTMP417 = QMFE9WERKS.
ALTMP418 = QMFE9EKORG.
ALTMP419 = QMFE9INFNR.
ALTMP420 = QMFE9KOSTL.
ALTMP421 = QMFE9LSTAR.
ALTMP422 = QMFE9PRZNR.
ALTMP423 = QMFE9MENGE.
ALTMP424 = ZSTC_SALE_019BUKRS.
ALTMP425 = ZSTC_SALE_019VKORG.
ALTMP426 = ZSTC_SALE_019WERKS.
ALTMP427 = ZSTC_SALE_019EKORG.
ALTMP428 = ZSTC_SALE_019MAMUSERCMPY.
ALTMP429 = ZSTC_SALE_019REGION.
ALTMP430 = ZSTC_SALE_019COUNTRY.
ALTMP431 = ZSTC_SALE_019COUNTRYDSCR.
ALTMP432 = ZSTC_SALE_019SALESCOMPANY.
ALTMP433 = ZSTC_SALE_019SALESCMPDSCR.
 move ALTMP369 to ITAB7-MANDT.
 move ALTMP370 to ITAB7-QMNUM.
 move ALTMP371 to ITAB7-FENUM.
 move ALTMP372 to ITAB7-ERNAM.
 move ALTMP373 to ITAB7-ERDAT.
 move ALTMP374 to ITAB7-AENAM.
 move ALTMP375 to ITAB7-AEDAT.
 move ALTMP376 to ITAB7-FETXT.
 move ALTMP377 to ITAB7-FEKAT.
 move ALTMP378 to ITAB7-FEGRP.
 move ALTMP379 to ITAB7-FECOD.
 move ALTMP380 to ITAB7-FEVER.
 move ALTMP381 to ITAB7-OTKAT.
 move ALTMP382 to ITAB7-OTGRP.
 move ALTMP383 to ITAB7-OTEIL.
 move ALTMP384 to ITAB7-OTVER.
 move ALTMP385 to ITAB7-BAUTL.
 move ALTMP386 to ITAB7-EBORT.
 move ALTMP387 to ITAB7-INDTX.
 move ALTMP388 to ITAB7-KZMLA.
 move ALTMP389 to ITAB7-ERZEIT.
 move ALTMP390 to ITAB7-AEZEIT.
 move ALTMP391 to ITAB7-KZORG.
 move ALTMP392 to ITAB7-WDFEH.
 move ALTMP393 to ITAB7-FEQKLAS.
 move ALTMP394 to ITAB7-FCOAUFNR.
 move ALTMP395 to ITAB7-FMGFRD.
 move ALTMP396 to ITAB7-FMGEIG.
 move ALTMP397 to ITAB7-FMGEIN.
 move ALTMP398 to ITAB7-ANZFEHLER.
 move ALTMP399 to ITAB7-FEHLBEW.
 move ALTMP400 to ITAB7-UNITFLBEW.
 move ALTMP401 to ITAB7-FEART.
 move ALTMP402 to ITAB7-PNLKN.
 move ALTMP403 to ITAB7-MERKNR.
 move ALTMP404 to ITAB7-PROBENR.
 move ALTMP405 to ITAB7-PHYNR.
 move ALTMP406 to ITAB7-PRUEFLINR.
 move ALTMP407 to ITAB7-CROBJTY.
 move ALTMP408 to ITAB7-ARBPL.
 move ALTMP409 to ITAB7-ARBPLWERK.
 move ALTMP410 to ITAB7-FENUMORG.
 move ALTMP411 to ITAB7-KZSYSFE.
 move ALTMP412 to ITAB7-KZLOESCH.
 move ALTMP413 to ITAB7-POSNR.
 move ALTMP414 to ITAB7-HERPOS.
 move ALTMP415 to ITAB7-AUTKZ.
 move ALTMP416 to ITAB7-MATNR.
 move ALTMP417 to ITAB7-WERKS.
 move ALTMP418 to ITAB7-EKORG.
 move ALTMP419 to ITAB7-INFNR.
 move ALTMP420 to ITAB7-KOSTL.
 move ALTMP421 to ITAB7-LSTAR.
 move ALTMP422 to ITAB7-PRZNR.
 move ALTMP423 to ITAB7-MENGE.
 move ALTMP424 to ITAB7-Z_BUKRS.
 move ALTMP425 to ITAB7-Z_VKORG.
 move ALTMP426 to ITAB7-Z_WERKS.
 move ALTMP427 to ITAB7-Z_EKORG.
 move ALTMP428 to ITAB7-Z_MAMUSERCMPY.
 move ALTMP429 to ITAB7-Z_REGION.
 move ALTMP430 to ITAB7-Z_COUNTRY.
 move ALTMP431 to ITAB7-Z_COUNTRYDSCR.
 move ALTMP432 to ITAB7-Z_SALESCOMPANY.
 move ALTMP433 to ITAB7-Z_SALESCMPDSCR.
 append ITAB7.
 cntbuf = cntbuf + 1.
 if download = 'N'.
  if cntbuf > 5000.
    perform FORM8.
    clear cntbuf.
    refresh ITAB7.
    append_flag = 'A'.
  endif.
 endif.
 if download = 'S'.
  if cntbuf > P_PKGSZ.
    perform FORM8.
    clear cntbuf.
    refresh ITAB7.
  endif.
 endif.
ENDSELECT.
ENDFORM.

FORM FORM8.
data: outfile(512), ldfile(50).
ldfile = 'CTS_LZ_SAP_CP1_QMFE'.
concatenate out_dir ldfile into outfile
  separated by '/'.
  IF DOWNLOAD = 'S'.
     DATA: error_message(700),mtext(800),iEOP(1).
     CALL FUNCTION P_SRVFM
          DESTINATION P_DEST
          KEEPING LOGICAL UNIT OF WORK
          EXPORTING
            EOS = last_batch
          IMPORTING
            EOP = iEOP
          TABLES
            E_TABLE = ITAB7
          EXCEPTIONS
            READ_ERROR = 1
            SYSTEM_FAILURE = 2
            MESSAGE error_message
            COMMUNICATION_FAILURE = 3
            MESSAGE error_message
            OTHERS = 4.

     IF sy-subrc ne 0.
        Case sy-subrc.
        when 1.
        CONCATENATE
        'Data Services read error. '
        'Check Data Services error log.'
        INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 2.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 3.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 4.
        MESSAGE  E240(S#) WITH
'Other SAP System Failure while calling DS remote function.'.
        endcase.
      ENDIF.
      IF iEOP = 'X'.
         PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
         LEAVE PROGRAM.
       ENDIF.
  ELSE.
data  dlmtlen type i value '1'.
data xdlmtlen type i value '1'.
data:
  ht(1) type c,
  xht(1) type x,
  conv type ref to cl_abap_conv_in_ce.
xht = '7F'.
conv = cl_abap_conv_in_ce=>create(
  encoding = '1100'
  input = xht
).
call method conv->read(
  exporting n    = xdlmtlen
  importing data = ht
            len = dlmtlen
).
data return_code type i.
 perform write_delimited_file
           tables   ITAB7
           using    outfile
                    append_flag
                    ht
                    dlmtlen
                    download
           changing return_code.

  case return_code.
    when 1.
      IF EXECMODE = 'D'.
        WRITE: /5 'No line selected'.
      ELSE.
        MESSAGE E047(S#).
      ENDIF.
    when 2.
      IF EXECMODE = 'D'.
        WRITE: /5 'Open File Error -- ', 25 OUTFILE.
      ELSE.
        MESSAGE  E084(E0) WITH OUTFILE.
      ENDIF.
    when 3.
      IF EXECMODE = 'D'.
        WRITE: /5 'Data exceed length limit (8192) '.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Data exceed length limit (8192) '.
      ENDIF.
    when 4.
      IF EXECMODE = 'D'.
        WRITE: /5 'Call function WS_DOWNLOAD error'.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Call function WS_DOWNLOAD error'.
      ENDIF.
  endcase.
 ENDIF.
ENDFORM.

FORM SUBSTRING USING SRC BEG LEN CHANGING RET.

DATA: VA1 TYPE I.
DATA: VA2 TYPE I.
DATA: VA3 TYPE I.

VA3 = STRLEN( SRC ).

IF  BEG = 0.   VA1 = 0.
ELSE.
  IF  BEG < 0.
    VA1 = VA3 + BEG.
    IF  VA1 < 0.   VA1 = 0.
    ENDIF.
  ELSE.          VA1 = BEG - 1.
  ENDIF.
ENDIF.

IF  LEN < 0.   VA2 = 0.
ELSE.          VA2 = VA3 - VA1.
ENDIF.

IF  VA2 > LEN. VA2 = LEN.
ENDIF.

IF  VA2 < 1.   MOVE ''           TO RET.
ELSE.          MOVE SRC+VA1(VA2) TO RET.
ENDIF.

ENDFORM.

form write_delimited_file
           tables   datatab
           using    file
                    append
                    delimit
                    dlength
                    dwnload
          changing rc.

  data: type1,
        appd(1),
        temp(32),
        time1(8),
        date1(10),
        output(8192),
        rcount type i,
        offset type i,
        tablen type i,
        maxlen type i value '8192'.

  data: begin of clientab occurs 0,
             output(8192),
          end of clientab.

  field-symbols: <f>.
  field-symbols <delim1>.
  data delim2(16).
  data l_filename type string.

  appd = append.
  if appd is not initial.
     appd = 'X'.
  endif.
  move file to l_filename.
  describe table datatab lines tablen.


  if dwnload = 'Y'.
     clear clientab. refresh clientab.
     rcount = 0.
  else.
     if appd = space.
   open dataset file for output in text mode ENCODING UTF-8.
     else.
    open dataset file for appending in text mode ENCODING UTF-8.
     endif.
     if sy-subrc <> 0.
         rc = 2. exit.
     endif.
  endif.

  loop at datatab.
    clear: tablen, offset, output.
    do.
      assign component sy-index of
         structure datatab to <f>.
      if sy-subrc <> 0. exit. endif.
      if sy-index > 1.
         assign delimit(dlength) TO <delim1> CASTING TYPE C.
         delim2 = <delim1>.
         write delim2(dlength) to output+offset(dlength).
         add dlength to offset.
      endif.

      describe field <f> type type1.

      if type1 = 'I' or type1 = 'N'.
          type1 = 'P'.
      endif.

      case type1.
        when 'D'.
          if <f> = '00000000'.
             <f> = ' '.
          else.
             move <f> to time1.
             assign time1 to <f>.
          endif.
        when 'F'.
          if <f> = '0.0'.
            temp = '0.0'.
          else.
             write <f> to temp exponent 0.
          endif.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
        when 'P'.
          if <f> < 0.
             write '-' to output+offset(1).
             add 1 to offset.
             <f> = <f> * ( -1 ).
          endif.
          move <f> to temp.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
      endcase.

      sy-fdpos = strlen( <f> ).

      tablen = offset + sy-fdpos.
      if tablen > maxlen.
         rc = 3. exit.
      endif.
      write <f> to output+offset(sy-fdpos).
      add sy-fdpos to offset.
    enddo.

    if dwnload = 'Y'.
       clientab-output = output.
       append clientab.
       rcount = rcount + 1.
       if rcount >= 50.
          SY-BATCH = SPACE.
          CALL FUNCTION 'GUI_DOWNLOAD'
            EXPORTING
              FILENAME = l_filename
              FILETYPE = 'ASC'
              CODEPAGE = '4110'
              APPEND   = appd
              WRITE_FIELD_SEPARATOR = 'X'
*            IMPORTING
*              FILELENGTH =
            TABLES
              DATA_TAB = clientab
            EXCEPTIONS
              OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
          clear clientab. refresh clientab.
          rcount = 0. appd = 'A'.
       endif.
    else.
       transfer output to file.
    endif.
  endloop.

  if dwnload = 'Y'.
       SY-BATCH = SPACE.
       CALL FUNCTION 'GUI_DOWNLOAD'
         EXPORTING
           FILENAME = l_filename
           FILETYPE = 'ASC'
              CODEPAGE = '4110'
           APPEND   = appd
           WRITE_FIELD_SEPARATOR = 'X'
*         IMPORTING
*           FILELENGTH =
         TABLES
           DATA_TAB = clientab
         EXCEPTIONS
           OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
  else.
       close dataset file.
  endif.
endform.

FORM CONNECT_RFCDEST_TO_PROGID.
 INCLUDE rfctypes.

 DATA: len     type i,
       R3NAME(4),
       SYSTNR(2),
       uid     LIKE SYS_UID,
       options LIKE RFCOPT,
       isunicode  TYPE n.

 DATA: NTOTAL     LIKE GWY_STRUCT-NOREG,
       GWY_GWHOST LIKE GWY_STRUCT-GWHOST,
       GWY_GWSERV LIKE GWY_STRUCT-GWSERV,
       GWY_TPNAME LIKE GWY_SYSTEM-TPNAME.

 TABLES: RFCSI.

* Check program ID
 IF P_PROGID = SPACE.							
    RAISE INVALID_PROGRAM_ID.
 ENDIF.

* determine if the RFC destination authority
  CALL FUNCTION 'RFC_READ_TCPIP_DESTINATION'
       EXPORTING destination = P_DEST
                 authority_check = 'X'
  IMPORTING rfcunicode = isunicode.

* Use current gateway if no info exits
 IF P_GWHOST = SPACE OR P_GWSERV = SPACE.
  CALL FUNCTION 'RFC_SYSTEM_INFO'
      IMPORTING
          RFCSI_EXPORT = RFCSI.

  len = strlen( rfcsi-rfcdest ) - 2.
  systnr = rfcsi-rfcdest+len.
  len = len - 1 - 3.
  r3name = rfcsi-rfcdest+len(3).
  len = len - 1.
  options-rfcgwhost = rfcsi-rfcdest(len).
  CONCATENATE 'sapgw' SYSTNR INTO options-rfcgwserv.
 ELSE.
   options-rfcgwhost = P_GWHOST.
   options-rfcgwserv = P_GWSERV.
 ENDIF.

* Parameters for GWY function call
  GWY_GWHOST = OPTIONS-RFCGWHOST.
  GWY_GWSERV = OPTIONS-RFCGWSERV.
  GWY_TPNAME = P_PROGID.

* Check gateway and server program registered
  CALL FUNCTION 'GWY_GET_NO_REG_PROGRAMS'
     EXPORTING
        GWHOST      = GWY_GWHOST
        GWSERV      = GWY_GWSERV
        TPNAME      = GWY_TPNAME
     IMPORTING
        NOREG_TOTAL = NTOTAL
     EXCEPTIONS
        OTHERS      = 1.

  IF sy-subrc NE 0.
     raise CONNECT_TO_GATEWAY_FAILED.
  ENDIF.

  IF NTOTAL = 0.
     raise SERVER_NOT_REGISTERED.
  ENDIF.

  IF NTOTAL GT 1.
     raise DUPLICATE_REG_PROGRAMS.
  ENDIF.

* build new connection to a registered server
  options-rfcexec   = gwy_tpname.
  options-rfcgwhost = gwy_gwhost.
  options-rfcgwserv = gwy_gwserv.
  options-rfchost   = '%%RFCSERVER%%'.
  IF P_SNC_ON = 'X'.
    options-rfcsnc  = 'X'.
  ENDIF.

  CALL 'RFCControl' ID 'CODE' FIELD 'O'
                    ID 'DESTINATION' FIELD P_DEST
                    ID 'TYPE' FIELD rfctype_external_tcp
                    ID 'OPTIONS' FIELD options.

  IF sy-subrc NE 0.
     RAISE CONNECT_TO_REG_SERVER_FAILED.
   ENDIF.

* and set exclusive mode to keep server owned
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
      EXPORTING  destination = P_DEST
                 exclusiv    = 'Y'
      EXCEPTIONS connect_to_reg_server_failed = 1
                 exclusiv_not_supported       = 2.

  IF SY-SUBRC NE 0.
     CASE SY-SUBRC.
          WHEN 1.
              RAISE CONNECT_TO_REG_SERVER_FAILED.
          WHEN 2.
              RAISE EXCLUSIV_NOT_SUPPORTED.
     ENDCASE.
  ENDIF.

ENDFORM.

FORM DISCONNECT_RFCDEST_FROM_PROGID.
* set exclusive mode to E to end the session
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
     EXPORTING
         destination = P_DEST
         exclusiv    = 'E'
     EXCEPTIONS
         connect_to_reg_server_failed = 1				
         exclusiv_not_supported       = 2.
ENDFORM.
