REPORT ZAL_ABAP message-id 26 line-size 255
no standard page heading.
* ZCP1_MSEG3.
PARAMETER DOWNLOAD(1) DEFAULT 'S' lower case. "N-svr,Y-clnt
PARAMETER EXECMODE(1) DEFAULT 'B' lower case. "D-dlg,B-btch
PARAMETER OUT_DIR(48) DEFAULT "output file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER IN_DIR(48) DEFAULT "input file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER P_DEST TYPE RFCDES-RFCDEST DEFAULT
'NONE'.
PARAMETER P_PROGID TYPE RFCOPT-RFCEXEC DEFAULT
SPACE.
PARAMETER P_GWHOST TYPE RFCOPT-RFCGWHOST DEFAULT
SPACE.
PARAMETER P_GWSERV TYPE RFCOPT-RFCGWSERV DEFAULT
SPACE.
PARAMETER P_SRVFM(30) DEFAULT "Server Callback function
SPACE.
PARAMETER P_PKGSZ TYPE I DEFAULT "Stream package size
5000.
PARAMETER P_SNC_ON(1) DEFAULT "X-on SPACE-off
SPACE.

PARAMETER $PARAM1 TYPE D.

PARAMETER $PARAM2 TYPE D.

PARAMETER P_DF_VK(40) DEFAULT "ABAP data flow object key
'' lower case.
PARAMETER P_DI_GEN(40) DEFAULT "DI version that generated ABAP
'' lower case.

*** Machine generated ABAP. Do not modify.            ***
*** (C)Copyright Business Objects S.A.  All rights reserved. ***
*
* Date Time:
*    04/25/16 06:40:42
* SAP used for generated this ABAP:
*    Release: 701
*    Host   : 10.25.3.82
*
* ABAP Dataflow Name:
*    DF_R3_CTS_LZ_SAP_CP1_MSEGSER03_D
* ABAP Dataflow comments:
*  SAP Source : MSEG / AUFK / PMSDO /SER03 / OBJK / MKPF
*  (initial load)
* ABAP program name in SAP:
*  ZCP1_MSEG3
* Generated ABAP file name:
*    //AIRSBEAP0512/D$/Data/SAPLogistics/VAL/ABAP/ZCP1_MSEG3
TABLES PMSDO.
TABLES AUFK.
TABLES MSEG.
TABLES MKPF.
TABLES ZSTC_SALES_COMP.
TABLES SER03.
TABLES OBJK.

DATA: begin of ITAB6 occurs 0,
OBJNR(22) TYPE C,
MANDT(3) TYPE C,
VKORG(4) TYPE C,
AUFNR(12) TYPE C,
BEMOT(2) TYPE C,
WAERS(5) TYPE C,
BEMOT_1(2) TYPE C,
SHKZG(1) TYPE C,
BUDAT TYPE D,
BUKRS(4) TYPE C,
LIFNR(10) TYPE C,
PRCTR(10) TYPE C,
AUFNR_1(12) TYPE C,
MATNR(18) TYPE C,
MBLNR(10) TYPE C,
MJAHR(4) TYPE N,
ZEILE(4) TYPE N,
BWART(3) TYPE C,
WERKS(4) TYPE C,
LGORT(4) TYPE C,
MENGE(16) TYPE P DECIMALS 3,
MEINS(3) TYPE C,
SGTXT(50) TYPE C,
BLDAT TYPE D,
Z_BUKRS(4) TYPE C,
Z_VKORG(4) TYPE C,
Z_WERKS(4) TYPE C,
Z_EKORG(4) TYPE C,
Z_MAMUSERCMPY(4) TYPE C,
Z_REGION(40) TYPE C,
Z_COUNTRY(40) TYPE C,
Z_COUNTRYDSCR(255) TYPE C,
Z_SALESCOMPANY(40) TYPE C,
Z_SALESCMPDSCR(255) TYPE C,
CPUDT TYPE D,
CPUTM TYPE T.
DATA: end of ITAB6.

DATA: begin of ITAB8 occurs 0,
OBKNR TYPE I,
OBJNR(22) TYPE C,
MANDT(3) TYPE C,
VKORG(4) TYPE C,
AUFNR(12) TYPE C,
BEMOT(2) TYPE C,
WAERS(5) TYPE C,
BEMOT_1(2) TYPE C,
SHKZG(1) TYPE C,
BUDAT TYPE D,
BUKRS(4) TYPE C,
LIFNR(10) TYPE C,
PRCTR(10) TYPE C,
AUFNR_1(12) TYPE C,
MATNR(18) TYPE C,
MBLNR(10) TYPE C,
MJAHR(4) TYPE N,
ZEILE(4) TYPE N,
BWART(3) TYPE C,
WERKS(4) TYPE C,
LGORT(4) TYPE C,
MENGE(16) TYPE P DECIMALS 3,
MEINS(3) TYPE C,
SGTXT(50) TYPE C,
BLDAT TYPE D,
Z_BUKRS(4) TYPE C,
Z_VKORG(4) TYPE C,
Z_WERKS(4) TYPE C,
Z_EKORG(4) TYPE C,
Z_MAMUSERCMPY(4) TYPE C,
Z_REGION(40) TYPE C,
Z_COUNTRY(40) TYPE C,
Z_COUNTRYDSCR(255) TYPE C,
Z_SALESCOMPANY(40) TYPE C,
Z_SALESCMPDSCR(255) TYPE C,
CPUDT TYPE D,
CPUTM TYPE T.
DATA: end of ITAB8.

DATA: begin of ITAB10 occurs 0,
OBKNR TYPE I,
SERNR(18) TYPE C,
EQUNR(18) TYPE C,
OBJNR(22) TYPE C,
MANDT(3) TYPE C,
VKORG(4) TYPE C,
AUFNR(12) TYPE C,
BEMOT(2) TYPE C,
WAERS(5) TYPE C,
BEMOT_1(2) TYPE C,
SHKZG(1) TYPE C,
BUDAT TYPE D,
BUKRS(4) TYPE C,
LIFNR(10) TYPE C,
PRCTR(10) TYPE C,
AUFNR_1(12) TYPE C,
MATNR(18) TYPE C,
MBLNR(10) TYPE C,
MJAHR(4) TYPE N,
ZEILE(4) TYPE N,
BWART(3) TYPE C,
WERKS(4) TYPE C,
LGORT(4) TYPE C,
MENGE(16) TYPE P DECIMALS 3,
MEINS(3) TYPE C,
SGTXT(50) TYPE C,
BLDAT TYPE D,
Z_BUKRS(4) TYPE C,
Z_VKORG(4) TYPE C,
Z_WERKS(4) TYPE C,
Z_EKORG(4) TYPE C,
Z_MAMUSERCMPY(4) TYPE C,
Z_REGION(40) TYPE C,
Z_COUNTRY(40) TYPE C,
Z_COUNTRYDSCR(255) TYPE C,
Z_SALESCOMPANY(40) TYPE C,
Z_SALESCMPDSCR(255) TYPE C,
CPUDT TYPE D,
CPUTM TYPE T.
DATA: end of ITAB10.

DATA: begin of ITAB11 occurs 0,
OBKNR TYPE I,
SERNR(18) TYPE C,
EQUNR(18) TYPE C,
OBJNR(22) TYPE C,
MANDT(3) TYPE C,
VKORG(4) TYPE C,
AUFNR(12) TYPE C,
BEMOT(2) TYPE C,
WAERS(5) TYPE C,
BEMOT_1(2) TYPE C,
SHKZG(1) TYPE C,
BUDAT TYPE D,
BUKRS(4) TYPE C,
LIFNR(10) TYPE C,
PRCTR(10) TYPE C,
AUFNR_1(12) TYPE C,
MATNR(18) TYPE C,
MBLNR(10) TYPE C,
MJAHR(4) TYPE N,
ZEILE(4) TYPE N,
BWART(3) TYPE C,
WERKS(4) TYPE C,
LGORT(4) TYPE C,
MENGE(16) TYPE P DECIMALS 3,
MEINS(3) TYPE C,
SGTXT(50) TYPE C,
BLDAT TYPE D,
Z_BUKRS(4) TYPE C,
Z_VKORG(4) TYPE C,
Z_WERKS(4) TYPE C,
Z_EKORG(4) TYPE C,
Z_MAMUSERCMPY(4) TYPE C,
Z_REGION(40) TYPE C,
Z_COUNTRY(40) TYPE C,
Z_COUNTRYDSCR(255) TYPE C,
Z_SALESCOMPANY(40) TYPE C,
Z_SALESCMPDSCR(255) TYPE C,
CPUDT TYPE D,
CPUTM TYPE T.
DATA: end of ITAB11.

data: append_flag(1) value ' ',
      cntbuf type i,
      delimleng type i,last_batch(1) value ' '.

CONSTANTS C_DF_VK(40) VALUE '1663'.
CONSTANTS C_DI_GEN(40) VALUE '14.2.3.660'.
DATA WARN_MSG(50).


DATA: gv_directory     TYPE epsdirnam  VALUE '/var/load/xxx/UK/read/',
      gv_logsys        LIKE tbdlst-logsys.

start-of-selection.
* Logical system
  CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
    IMPORTING
      own_logical_system             = gv_logsys
    EXCEPTIONS
      own_logical_system_not_defined = 1
      OTHERS                         = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE 'E' NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    STOP.
  ENDIF.
  REPLACE 'xxx' IN out_dir WITH gv_logsys(3).
  REPLACE 'xxx' IN in_dir WITH gv_logsys(3).


  IF DOWNLOAD = 'S' OR
     DOWNLOAD = 'N' OR
     DOWNLOAD = 'Y'.
      .
  ELSE.
     DATA: m_xfer_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'data transfer method: ' DOWNLOAD
'. Regenerate the ABAP program and upload to this system.'
     INTO m_xfer_err_msg.
     MESSAGE  E240(S#) WITH m_xfer_err_msg.
  ENDIF.

  IF EXECMODE = 'B' OR
     EXECMODE = 'D'.
      .
  ELSE.
     DATA: m_exec_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'execution option: ' EXECMODE
'. Regenerate the ABAP program and upload to this system.'
     INTO m_exec_err_msg.
     MESSAGE  E240(S#) WITH m_exec_err_msg.
  ENDIF.

  IF DOWNLOAD = 'S'.
     PERFORM CONNECT_RFCDEST_TO_PROGID.
  ENDIF.



PERFORM FORM6.
PERFORM FORM8.
FREE ITAB6.
PERFORM FORM10.
FREE ITAB8.
PERFORM FORM11.
FREE ITAB10.
last_batch = 'X'.
PERFORM FORM12.
FREE ITAB11.
  IF DOWNLOAD = 'S'.
     PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
  ENDIF.


end-of-selection.

CLEAR WARN_MSG.

IF NOT P_DF_VK IS INITIAL.
  IF P_DF_VK <> C_DF_VK.
     CONCATENATE '$$Warning$'
                 C_DF_VK
                 '$' INTO WARN_MSG.
  ENDIF.
ENDIF.
IF NOT P_DI_GEN IS INITIAL.
  IF P_DI_GEN <> C_DI_GEN.
     IF WARN_MSG IS INITIAL.
       CONCATENATE '$$Warning$$'
                   C_DI_GEN
                   INTO WARN_MSG.
     ELSE.
       CONCATENATE WARN_MSG
                   C_DI_GEN
                   INTO WARN_MSG.
     ENDIF.
  ENDIF.
ENDIF.

IF NOT WARN_MSG IS INITIAL.
  IF EXECMODE = 'D'.
    WRITE WARN_MSG.
    NEW-LINE.
  ELSE.
    MESSAGE S240(S#) with WARN_MSG.
  ENDIF.
ENDIF.


write  '* Program Complete *'.
write  '(C)Copyright Business Objects S.A.  All rights reserved.'.

FORM FORM6.
STATICS rowCount TYPE i VALUE 0.
DATA ALTMP613(12) TYPE C.
DATA ALTMP614(12) TYPE C.
DATA ALTMP615(22) TYPE C.
DATA ALTMP616(3) TYPE C.
DATA ALTMP617(4) TYPE C.
DATA ALTMP618(12) TYPE C.
DATA ALTMP619(2) TYPE C.
DATA ALTMP620(5) TYPE C.
DATA ALTMP621(2) TYPE C.
DATA ALTMP622(1) TYPE C.
DATA ALTMP623 TYPE D.
DATA ALTMP624(4) TYPE C.
DATA ALTMP625(10) TYPE C.
DATA ALTMP626(10) TYPE C.
DATA ALTMP627(12) TYPE C.
DATA ALTMP628(18) TYPE C.
DATA ALTMP629(10) TYPE C.
DATA ALTMP630(4) TYPE N.
DATA ALTMP631(4) TYPE N.
DATA ALTMP632(3) TYPE C.
DATA ALTMP633(4) TYPE C.
DATA ALTMP634(4) TYPE C.
DATA ALTMP635(16) TYPE P DECIMALS 3.
DATA ALTMP636(3) TYPE C.
DATA ALTMP637(50) TYPE C.
DATA ALTMP638 TYPE D.
DATA ALTMP639(4) TYPE C.
DATA ALTMP640(4) TYPE C.
DATA ALTMP641(4) TYPE C.
DATA ALTMP642(4) TYPE C.
DATA ALTMP643(4) TYPE C.
DATA ALTMP644(40) TYPE C.
DATA ALTMP645(40) TYPE C.
DATA ALTMP646(255) TYPE C.
DATA ALTMP647(40) TYPE C.
DATA ALTMP648(255) TYPE C.
DATA ALTMP649 TYPE D.
DATA ALTMP650 TYPE T.

DATA PMSDO9OBJNR LIKE PMSDO-OBJNR.
DATA MSEG9MANDT LIKE MSEG-MANDT.
DATA PMSDO9VKORG LIKE PMSDO-VKORG.
DATA AUFK9AUFNR LIKE AUFK-AUFNR.
DATA AUFK9BEMOT LIKE AUFK-BEMOT.
DATA AUFK9WAERS LIKE AUFK-WAERS.
DATA MSEG9BEMOT LIKE MSEG-BEMOT.
DATA MSEG9SHKZG LIKE MSEG-SHKZG.
DATA MKPF9BUDAT LIKE MKPF-BUDAT.
DATA MSEG9BUKRS LIKE MSEG-BUKRS.
DATA MSEG9LIFNR LIKE MSEG-LIFNR.
DATA MSEG9PRCTR LIKE MSEG-PRCTR.
DATA MSEG9AUFNR LIKE MSEG-AUFNR.
DATA MSEG9MATNR LIKE MSEG-MATNR.
DATA MSEG9MBLNR LIKE MSEG-MBLNR.
DATA MSEG9MJAHR LIKE MSEG-MJAHR.
DATA MSEG9ZEILE LIKE MSEG-ZEILE.
DATA MSEG9BWART LIKE MSEG-BWART.
DATA MSEG9WERKS LIKE MSEG-WERKS.
DATA MSEG9LGORT LIKE MSEG-LGORT.
DATA MSEG9MENGE LIKE MSEG-MENGE.
DATA MSEG9MEINS LIKE MSEG-MEINS.
DATA MSEG9SGTXT LIKE MSEG-SGTXT.
DATA MKPF9BLDAT LIKE MKPF-BLDAT.
DATA ZSTC_SALE_019BUKRS LIKE ZSTC_SALES_COMP-BUKRS.
DATA ZSTC_SALE_019VKORG LIKE ZSTC_SALES_COMP-VKORG.
DATA ZSTC_SALE_019WERKS LIKE ZSTC_SALES_COMP-WERKS.
DATA ZSTC_SALE_019EKORG LIKE ZSTC_SALES_COMP-EKORG.
DATA ZSTC_SALE_019MAMUSERCMPY LIKE ZSTC_SALES_COMP-MAMUSERCMPY.
DATA ZSTC_SALE_019REGION LIKE ZSTC_SALES_COMP-REGION.
DATA ZSTC_SALE_019COUNTRY LIKE ZSTC_SALES_COMP-COUNTRY.
DATA ZSTC_SALE_019COUNTRYDSCR LIKE ZSTC_SALES_COMP-COUNTRYDSCR.
DATA ZSTC_SALE_019SALESCOMPANY LIKE ZSTC_SALES_COMP-SALESCOMPANY.
DATA ZSTC_SALE_019SALESCMPDSCR LIKE ZSTC_SALES_COMP-SALESCMPDSCR.
DATA MKPF9CPUDT LIKE MKPF-CPUDT.
DATA MKPF9CPUTM LIKE MKPF-CPUTM.
DATA AUFK9IDAT3 LIKE AUFK-IDAT3.
DATA MKPF9MBLNR LIKE MKPF-MBLNR.
DATA MKPF9MJAHR LIKE MKPF-MJAHR.
DATA AUFK9OBJNR LIKE AUFK-OBJNR.



SELECT
  PMSDO9~OBJNR
  MSEG9~MANDT
  PMSDO9~VKORG
  AUFK9~AUFNR
  AUFK9~BEMOT
  AUFK9~WAERS
  MSEG9~BEMOT
  MSEG9~SHKZG
  MKPF9~BUDAT
  MSEG9~BUKRS
  MSEG9~LIFNR
  MSEG9~PRCTR
  MSEG9~AUFNR
  MSEG9~MATNR
  MSEG9~MBLNR
  MSEG9~MJAHR
  MSEG9~ZEILE
  MSEG9~BWART
  MSEG9~WERKS
  MSEG9~LGORT
  MSEG9~MENGE
  MSEG9~MEINS
  MSEG9~SGTXT
  MKPF9~BLDAT
  ZSTC_SALE_019~BUKRS
  ZSTC_SALE_019~VKORG
  ZSTC_SALE_019~WERKS
  ZSTC_SALE_019~EKORG
  ZSTC_SALE_019~MAMUSERCMPY
  ZSTC_SALE_019~REGION
  ZSTC_SALE_019~COUNTRY
  ZSTC_SALE_019~COUNTRYDSCR
  ZSTC_SALE_019~SALESCOMPANY
  ZSTC_SALE_019~SALESCMPDSCR
  MKPF9~CPUDT
  MKPF9~CPUTM
  AUFK9~IDAT3
  MKPF9~MBLNR
  MKPF9~MJAHR
  AUFK9~OBJNR
into (PMSDO9OBJNR,
  MSEG9MANDT,
  PMSDO9VKORG,
  AUFK9AUFNR,
  AUFK9BEMOT,
  AUFK9WAERS,
  MSEG9BEMOT,
  MSEG9SHKZG,
  MKPF9BUDAT,
  MSEG9BUKRS,
  MSEG9LIFNR,
  MSEG9PRCTR,
  MSEG9AUFNR,
  MSEG9MATNR,
  MSEG9MBLNR,
  MSEG9MJAHR,
  MSEG9ZEILE,
  MSEG9BWART,
  MSEG9WERKS,
  MSEG9LGORT,
  MSEG9MENGE,
  MSEG9MEINS,
  MSEG9SGTXT,
  MKPF9BLDAT,
  ZSTC_SALE_019BUKRS,
  ZSTC_SALE_019VKORG,
  ZSTC_SALE_019WERKS,
  ZSTC_SALE_019EKORG,
  ZSTC_SALE_019MAMUSERCMPY,
  ZSTC_SALE_019REGION,
  ZSTC_SALE_019COUNTRY,
  ZSTC_SALE_019COUNTRYDSCR,
  ZSTC_SALE_019SALESCOMPANY,
  ZSTC_SALE_019SALESCMPDSCR,
  MKPF9CPUDT,
  MKPF9CPUTM,
  AUFK9IDAT3,
  MKPF9MBLNR,
  MKPF9MJAHR,
  AUFK9OBJNR)
FROM PMSDO AS PMSDO9
 INNER JOIN AUFK AS AUFK9
 ON ( PMSDO9~OBJNR = AUFK9~OBJNR )
 INNER JOIN ZSTC_SALES_COMP AS ZSTC_SALE_019
 ON ( PMSDO9~VKORG = ZSTC_SALE_019~VKORG )
 INNER JOIN MSEG AS MSEG9
 ON ( AUFK9~AUFNR = MSEG9~AUFNR )
 INNER JOIN MKPF AS MKPF9
 ON ( ( MKPF9~MJAHR = MSEG9~MJAHR )
 AND ( MKPF9~MBLNR = MSEG9~MBLNR ) )
WHERE ( NOT ( ( PMSDO9~VKORG like '%09' ) )
 AND ( NOT ( ( PMSDO9~VKORG like '%05' ) )
 AND ( NOT ( ( PMSDO9~VKORG like '%04' ) )
 AND ( NOT ( ( PMSDO9~VKORG like '%03' ) )
 AND ( NOT ( ( PMSDO9~VKORG like '%02' ) )
 AND ( ( ( AUFK9~IDAT3 <= $PARAM1 )
 OR ( AUFK9~IDAT3 >= $PARAM2 ) )
 AND MSEG9~BWART IN (101,
102,
261,
262,
961,
962) ) ) ) ) ) ).
if MSEG9AUFNR = ''.
move 0 to ALTMP613.
else.
move MSEG9AUFNR to ALTMP613.
endif.
if MSEG9AUFNR = ''.
move 'X~X' to ALTMP614.
else.
move MSEG9AUFNR to ALTMP614.
endif.
IF ( ( ALTMP614 <> 'X~X' )
 AND ( ALTMP613 <> 0 ) ).
ALTMP615 = PMSDO9OBJNR.
ALTMP616 = MSEG9MANDT.
ALTMP617 = PMSDO9VKORG.
ALTMP618 = AUFK9AUFNR.
ALTMP619 = AUFK9BEMOT.
ALTMP620 = AUFK9WAERS.
ALTMP621 = MSEG9BEMOT.
ALTMP622 = MSEG9SHKZG.
ALTMP623 = MKPF9BUDAT.
ALTMP624 = MSEG9BUKRS.
ALTMP625 = MSEG9LIFNR.
ALTMP626 = MSEG9PRCTR.
ALTMP627 = MSEG9AUFNR.
ALTMP628 = MSEG9MATNR.
ALTMP629 = MSEG9MBLNR.
ALTMP630 = MSEG9MJAHR.
ALTMP631 = MSEG9ZEILE.
ALTMP632 = MSEG9BWART.
ALTMP633 = MSEG9WERKS.
ALTMP634 = MSEG9LGORT.
ALTMP635 = MSEG9MENGE.
ALTMP636 = MSEG9MEINS.
ALTMP637 = MSEG9SGTXT.
ALTMP638 = MKPF9BLDAT.
ALTMP639 = ZSTC_SALE_019BUKRS.
ALTMP640 = ZSTC_SALE_019VKORG.
ALTMP641 = ZSTC_SALE_019WERKS.
ALTMP642 = ZSTC_SALE_019EKORG.
ALTMP643 = ZSTC_SALE_019MAMUSERCMPY.
ALTMP644 = ZSTC_SALE_019REGION.
ALTMP645 = ZSTC_SALE_019COUNTRY.
ALTMP646 = ZSTC_SALE_019COUNTRYDSCR.
ALTMP647 = ZSTC_SALE_019SALESCOMPANY.
ALTMP648 = ZSTC_SALE_019SALESCMPDSCR.
ALTMP649 = MKPF9CPUDT.
ALTMP650 = MKPF9CPUTM.
 move ALTMP615 to ITAB6-OBJNR.
 move ALTMP616 to ITAB6-MANDT.
 move ALTMP617 to ITAB6-VKORG.
 move ALTMP618 to ITAB6-AUFNR.
 move ALTMP619 to ITAB6-BEMOT.
 move ALTMP620 to ITAB6-WAERS.
 move ALTMP621 to ITAB6-BEMOT_1.
 move ALTMP622 to ITAB6-SHKZG.
 move ALTMP623 to ITAB6-BUDAT.
 move ALTMP624 to ITAB6-BUKRS.
 move ALTMP625 to ITAB6-LIFNR.
 move ALTMP626 to ITAB6-PRCTR.
 move ALTMP627 to ITAB6-AUFNR_1.
 move ALTMP628 to ITAB6-MATNR.
 move ALTMP629 to ITAB6-MBLNR.
 move ALTMP630 to ITAB6-MJAHR.
 move ALTMP631 to ITAB6-ZEILE.
 move ALTMP632 to ITAB6-BWART.
 move ALTMP633 to ITAB6-WERKS.
 move ALTMP634 to ITAB6-LGORT.
 move ALTMP635 to ITAB6-MENGE.
 move ALTMP636 to ITAB6-MEINS.
 move ALTMP637 to ITAB6-SGTXT.
 move ALTMP638 to ITAB6-BLDAT.
 move ALTMP639 to ITAB6-Z_BUKRS.
 move ALTMP640 to ITAB6-Z_VKORG.
 move ALTMP641 to ITAB6-Z_WERKS.
 move ALTMP642 to ITAB6-Z_EKORG.
 move ALTMP643 to ITAB6-Z_MAMUSERCMPY.
 move ALTMP644 to ITAB6-Z_REGION.
 move ALTMP645 to ITAB6-Z_COUNTRY.
 move ALTMP646 to ITAB6-Z_COUNTRYDSCR.
 move ALTMP647 to ITAB6-Z_SALESCOMPANY.
 move ALTMP648 to ITAB6-Z_SALESCMPDSCR.
 move ALTMP649 to ITAB6-CPUDT.
 move ALTMP650 to ITAB6-CPUTM.
 append ITAB6.
rowCount = rowCount + 1.
IF ( download = 'S' ).
 IF ( rowCount = P_PKGSZ ).
   PERFORM FORM8.
   REFRESH ITAB6.
   rowCount = 0.
 ENDIF.
ELSE.
 IF ( rowCount = 5000 ).
   PERFORM FORM8.
   REFRESH ITAB6.
   rowCount = 0.
 ENDIF.
ENDIF.
ENDIF.
ENDSELECT.
ENDFORM.

FORM FORM8.
STATICS rowCount TYPE i VALUE 0.
STATICS firstRun(1) TYPE C VALUE 'Y'.
DATA ALTMP651 TYPE I.
DATA ALTMP652(22) TYPE C.
DATA ALTMP653(3) TYPE C.
DATA ALTMP654(4) TYPE C.
DATA ALTMP655(12) TYPE C.
DATA ALTMP656(2) TYPE C.
DATA ALTMP657(5) TYPE C.
DATA ALTMP658(2) TYPE C.
DATA ALTMP659(1) TYPE C.
DATA ALTMP660 TYPE D.
DATA ALTMP661(4) TYPE C.
DATA ALTMP662(10) TYPE C.
DATA ALTMP663(10) TYPE C.
DATA ALTMP664(12) TYPE C.
DATA ALTMP665(18) TYPE C.
DATA ALTMP666(10) TYPE C.
DATA ALTMP667(4) TYPE N.
DATA ALTMP668(4) TYPE N.
DATA ALTMP669(3) TYPE C.
DATA ALTMP670(4) TYPE C.
DATA ALTMP671(4) TYPE C.
DATA ALTMP672(16) TYPE P DECIMALS 3.
DATA ALTMP673(3) TYPE C.
DATA ALTMP674(50) TYPE C.
DATA ALTMP675 TYPE D.
DATA ALTMP676(4) TYPE C.
DATA ALTMP677(4) TYPE C.
DATA ALTMP678(4) TYPE C.
DATA ALTMP679(4) TYPE C.
DATA ALTMP680(4) TYPE C.
DATA ALTMP681(40) TYPE C.
DATA ALTMP682(40) TYPE C.
DATA ALTMP683(255) TYPE C.
DATA ALTMP684(40) TYPE C.
DATA ALTMP685(255) TYPE C.
DATA ALTMP686 TYPE D.
DATA ALTMP687 TYPE T.
DATA ALOJF0 TYPE C.
DATA ALOJF1 TYPE C.



LOOP AT ITAB6.
ALTMP652 = ITAB6-OBJNR.
ALTMP653 = ITAB6-MANDT.
ALTMP654 = ITAB6-VKORG.
ALTMP655 = ITAB6-AUFNR.
ALTMP656 = ITAB6-BEMOT.
ALTMP657 = ITAB6-WAERS.
ALTMP658 = ITAB6-BEMOT_1.
ALTMP659 = ITAB6-SHKZG.
ALTMP660 = ITAB6-BUDAT.
ALTMP661 = ITAB6-BUKRS.
ALTMP662 = ITAB6-LIFNR.
ALTMP663 = ITAB6-PRCTR.
ALTMP664 = ITAB6-AUFNR_1.
ALTMP665 = ITAB6-MATNR.
ALTMP666 = ITAB6-MBLNR.
ALTMP667 = ITAB6-MJAHR.
ALTMP668 = ITAB6-ZEILE.
ALTMP669 = ITAB6-BWART.
ALTMP670 = ITAB6-WERKS.
ALTMP671 = ITAB6-LGORT.
ALTMP672 = ITAB6-MENGE.
ALTMP673 = ITAB6-MEINS.
ALTMP674 = ITAB6-SGTXT.
ALTMP675 = ITAB6-BLDAT.
ALTMP676 = ITAB6-Z_BUKRS.
ALTMP677 = ITAB6-Z_VKORG.
ALTMP678 = ITAB6-Z_WERKS.
ALTMP679 = ITAB6-Z_EKORG.
ALTMP680 = ITAB6-Z_MAMUSERCMPY.
ALTMP681 = ITAB6-Z_REGION.
ALTMP682 = ITAB6-Z_COUNTRY.
ALTMP683 = ITAB6-Z_COUNTRYDSCR.
ALTMP684 = ITAB6-Z_SALESCOMPANY.
ALTMP685 = ITAB6-Z_SALESCMPDSCR.
ALTMP686 = ITAB6-CPUDT.
ALTMP687 = ITAB6-CPUTM.
ALOJF0 = 'Y'.
ALOJF1 = 'N'.
IF ( ALOJF0 = 'Y' ).

SELECT
  OBKNR
  MBLNR
  MJAHR
  ZEILE
INTO CORRESPONDING FIELDS OF SER03
FROM SER03
WHERE ( ( ZEILE = ITAB6-ZEILE )
 AND ( ( MJAHR = ITAB6-MJAHR )
 AND ( MBLNR = ITAB6-MBLNR ) ) ).
ALTMP651 = SER03-OBKNR.
ALOJF1 = 'Y'.
 move ALTMP651 to ITAB8-OBKNR.
 move ALTMP652 to ITAB8-OBJNR.
 move ALTMP653 to ITAB8-MANDT.
 move ALTMP654 to ITAB8-VKORG.
 move ALTMP655 to ITAB8-AUFNR.
 move ALTMP656 to ITAB8-BEMOT.
 move ALTMP657 to ITAB8-WAERS.
 move ALTMP658 to ITAB8-BEMOT_1.
 move ALTMP659 to ITAB8-SHKZG.
 move ALTMP660 to ITAB8-BUDAT.
 move ALTMP661 to ITAB8-BUKRS.
 move ALTMP662 to ITAB8-LIFNR.
 move ALTMP663 to ITAB8-PRCTR.
 move ALTMP664 to ITAB8-AUFNR_1.
 move ALTMP665 to ITAB8-MATNR.
 move ALTMP666 to ITAB8-MBLNR.
 move ALTMP667 to ITAB8-MJAHR.
 move ALTMP668 to ITAB8-ZEILE.
 move ALTMP669 to ITAB8-BWART.
 move ALTMP670 to ITAB8-WERKS.
 move ALTMP671 to ITAB8-LGORT.
 move ALTMP672 to ITAB8-MENGE.
 move ALTMP673 to ITAB8-MEINS.
 move ALTMP674 to ITAB8-SGTXT.
 move ALTMP675 to ITAB8-BLDAT.
 move ALTMP676 to ITAB8-Z_BUKRS.
 move ALTMP677 to ITAB8-Z_VKORG.
 move ALTMP678 to ITAB8-Z_WERKS.
 move ALTMP679 to ITAB8-Z_EKORG.
 move ALTMP680 to ITAB8-Z_MAMUSERCMPY.
 move ALTMP681 to ITAB8-Z_REGION.
 move ALTMP682 to ITAB8-Z_COUNTRY.
 move ALTMP683 to ITAB8-Z_COUNTRYDSCR.
 move ALTMP684 to ITAB8-Z_SALESCOMPANY.
 move ALTMP685 to ITAB8-Z_SALESCMPDSCR.
 move ALTMP686 to ITAB8-CPUDT.
 move ALTMP687 to ITAB8-CPUTM.
 append ITAB8.
firstRun = 'N' .
rowCount = rowCount + 1.
IF ( download = 'S' ).
 IF ( rowCount = P_PKGSZ ).
   PERFORM FORM10.
   REFRESH ITAB8.
   rowCount = 0.
 ENDIF.
ELSE.
 IF ( rowCount = 5000 ).
   PERFORM FORM10.
   REFRESH ITAB8.
   rowCount = 0.
 ENDIF.
ENDIF.
ENDSELECT.
ENDIF.
IF ( ALOJF1 = 'N' ).
clear SER03-OBKNR.
clear SER03-MBLNR.
clear SER03-MJAHR.
clear SER03-ZEILE.
clear ALTMP651.
 move ALTMP651 to ITAB8-OBKNR.
 move ALTMP652 to ITAB8-OBJNR.
 move ALTMP653 to ITAB8-MANDT.
 move ALTMP654 to ITAB8-VKORG.
 move ALTMP655 to ITAB8-AUFNR.
 move ALTMP656 to ITAB8-BEMOT.
 move ALTMP657 to ITAB8-WAERS.
 move ALTMP658 to ITAB8-BEMOT_1.
 move ALTMP659 to ITAB8-SHKZG.
 move ALTMP660 to ITAB8-BUDAT.
 move ALTMP661 to ITAB8-BUKRS.
 move ALTMP662 to ITAB8-LIFNR.
 move ALTMP663 to ITAB8-PRCTR.
 move ALTMP664 to ITAB8-AUFNR_1.
 move ALTMP665 to ITAB8-MATNR.
 move ALTMP666 to ITAB8-MBLNR.
 move ALTMP667 to ITAB8-MJAHR.
 move ALTMP668 to ITAB8-ZEILE.
 move ALTMP669 to ITAB8-BWART.
 move ALTMP670 to ITAB8-WERKS.
 move ALTMP671 to ITAB8-LGORT.
 move ALTMP672 to ITAB8-MENGE.
 move ALTMP673 to ITAB8-MEINS.
 move ALTMP674 to ITAB8-SGTXT.
 move ALTMP675 to ITAB8-BLDAT.
 move ALTMP676 to ITAB8-Z_BUKRS.
 move ALTMP677 to ITAB8-Z_VKORG.
 move ALTMP678 to ITAB8-Z_WERKS.
 move ALTMP679 to ITAB8-Z_EKORG.
 move ALTMP680 to ITAB8-Z_MAMUSERCMPY.
 move ALTMP681 to ITAB8-Z_REGION.
 move ALTMP682 to ITAB8-Z_COUNTRY.
 move ALTMP683 to ITAB8-Z_COUNTRYDSCR.
 move ALTMP684 to ITAB8-Z_SALESCOMPANY.
 move ALTMP685 to ITAB8-Z_SALESCMPDSCR.
 move ALTMP686 to ITAB8-CPUDT.
 move ALTMP687 to ITAB8-CPUTM.
 append ITAB8.
firstRun = 'N' .
rowCount = rowCount + 1.
IF ( download = 'S' ).
 IF ( rowCount = P_PKGSZ ).
   PERFORM FORM10.
   REFRESH ITAB8.
   rowCount = 0.
 ENDIF.
ELSE.
 IF ( rowCount = 5000 ).
   PERFORM FORM10.
   REFRESH ITAB8.
   rowCount = 0.
 ENDIF.
ENDIF.
ENDIF.
ENDLOOP.
ENDFORM.

FORM FORM10.
STATICS rowCount TYPE i VALUE 0.
STATICS firstRun(1) TYPE C VALUE 'Y'.
DATA ALTMP688 TYPE I.
DATA ALTMP689(18) TYPE C.
DATA ALTMP690(18) TYPE C.
DATA ALTMP691(22) TYPE C.
DATA ALTMP692(3) TYPE C.
DATA ALTMP693(4) TYPE C.
DATA ALTMP694(12) TYPE C.
DATA ALTMP695(2) TYPE C.
DATA ALTMP696(5) TYPE C.
DATA ALTMP697(2) TYPE C.
DATA ALTMP698(1) TYPE C.
DATA ALTMP699 TYPE D.
DATA ALTMP700(4) TYPE C.
DATA ALTMP701(10) TYPE C.
DATA ALTMP702(10) TYPE C.
DATA ALTMP703(12) TYPE C.
DATA ALTMP704(18) TYPE C.
DATA ALTMP705(10) TYPE C.
DATA ALTMP706(4) TYPE N.
DATA ALTMP707(4) TYPE N.
DATA ALTMP708(3) TYPE C.
DATA ALTMP709(4) TYPE C.
DATA ALTMP710(4) TYPE C.
DATA ALTMP711(16) TYPE P DECIMALS 3.
DATA ALTMP712(3) TYPE C.
DATA ALTMP713(50) TYPE C.
DATA ALTMP714 TYPE D.
DATA ALTMP715(4) TYPE C.
DATA ALTMP716(4) TYPE C.
DATA ALTMP717(4) TYPE C.
DATA ALTMP718(4) TYPE C.
DATA ALTMP719(4) TYPE C.
DATA ALTMP720(40) TYPE C.
DATA ALTMP721(40) TYPE C.
DATA ALTMP722(255) TYPE C.
DATA ALTMP723(40) TYPE C.
DATA ALTMP724(255) TYPE C.
DATA ALTMP725 TYPE D.
DATA ALTMP726 TYPE T.
DATA ALOJF0 TYPE C.
DATA ALOJF1 TYPE C.



LOOP AT ITAB8.
ALTMP688 = ITAB8-OBKNR.
ALTMP691 = ITAB8-OBJNR.
ALTMP692 = ITAB8-MANDT.
ALTMP693 = ITAB8-VKORG.
ALTMP694 = ITAB8-AUFNR.
ALTMP695 = ITAB8-BEMOT.
ALTMP696 = ITAB8-WAERS.
ALTMP697 = ITAB8-BEMOT_1.
ALTMP698 = ITAB8-SHKZG.
ALTMP699 = ITAB8-BUDAT.
ALTMP700 = ITAB8-BUKRS.
ALTMP701 = ITAB8-LIFNR.
ALTMP702 = ITAB8-PRCTR.
ALTMP703 = ITAB8-AUFNR_1.
ALTMP704 = ITAB8-MATNR.
ALTMP705 = ITAB8-MBLNR.
ALTMP706 = ITAB8-MJAHR.
ALTMP707 = ITAB8-ZEILE.
ALTMP708 = ITAB8-BWART.
ALTMP709 = ITAB8-WERKS.
ALTMP710 = ITAB8-LGORT.
ALTMP711 = ITAB8-MENGE.
ALTMP712 = ITAB8-MEINS.
ALTMP713 = ITAB8-SGTXT.
ALTMP714 = ITAB8-BLDAT.
ALTMP715 = ITAB8-Z_BUKRS.
ALTMP716 = ITAB8-Z_VKORG.
ALTMP717 = ITAB8-Z_WERKS.
ALTMP718 = ITAB8-Z_EKORG.
ALTMP719 = ITAB8-Z_MAMUSERCMPY.
ALTMP720 = ITAB8-Z_REGION.
ALTMP721 = ITAB8-Z_COUNTRY.
ALTMP722 = ITAB8-Z_COUNTRYDSCR.
ALTMP723 = ITAB8-Z_SALESCOMPANY.
ALTMP724 = ITAB8-Z_SALESCMPDSCR.
ALTMP725 = ITAB8-CPUDT.
ALTMP726 = ITAB8-CPUTM.
ALOJF0 = 'Y'.
ALOJF1 = 'N'.
IF ( ALOJF0 = 'Y' ).

SELECT
  SERNR
  EQUNR
  OBKNR
INTO CORRESPONDING FIELDS OF OBJK
FROM OBJK
WHERE ( OBKNR = ITAB8-OBKNR ).
ALTMP689 = OBJK-SERNR.
ALTMP690 = OBJK-EQUNR.
ALOJF1 = 'Y'.
 move ALTMP688 to ITAB10-OBKNR.
 move ALTMP689 to ITAB10-SERNR.
 move ALTMP690 to ITAB10-EQUNR.
 move ALTMP691 to ITAB10-OBJNR.
 move ALTMP692 to ITAB10-MANDT.
 move ALTMP693 to ITAB10-VKORG.
 move ALTMP694 to ITAB10-AUFNR.
 move ALTMP695 to ITAB10-BEMOT.
 move ALTMP696 to ITAB10-WAERS.
 move ALTMP697 to ITAB10-BEMOT_1.
 move ALTMP698 to ITAB10-SHKZG.
 move ALTMP699 to ITAB10-BUDAT.
 move ALTMP700 to ITAB10-BUKRS.
 move ALTMP701 to ITAB10-LIFNR.
 move ALTMP702 to ITAB10-PRCTR.
 move ALTMP703 to ITAB10-AUFNR_1.
 move ALTMP704 to ITAB10-MATNR.
 move ALTMP705 to ITAB10-MBLNR.
 move ALTMP706 to ITAB10-MJAHR.
 move ALTMP707 to ITAB10-ZEILE.
 move ALTMP708 to ITAB10-BWART.
 move ALTMP709 to ITAB10-WERKS.
 move ALTMP710 to ITAB10-LGORT.
 move ALTMP711 to ITAB10-MENGE.
 move ALTMP712 to ITAB10-MEINS.
 move ALTMP713 to ITAB10-SGTXT.
 move ALTMP714 to ITAB10-BLDAT.
 move ALTMP715 to ITAB10-Z_BUKRS.
 move ALTMP716 to ITAB10-Z_VKORG.
 move ALTMP717 to ITAB10-Z_WERKS.
 move ALTMP718 to ITAB10-Z_EKORG.
 move ALTMP719 to ITAB10-Z_MAMUSERCMPY.
 move ALTMP720 to ITAB10-Z_REGION.
 move ALTMP721 to ITAB10-Z_COUNTRY.
 move ALTMP722 to ITAB10-Z_COUNTRYDSCR.
 move ALTMP723 to ITAB10-Z_SALESCOMPANY.
 move ALTMP724 to ITAB10-Z_SALESCMPDSCR.
 move ALTMP725 to ITAB10-CPUDT.
 move ALTMP726 to ITAB10-CPUTM.
 append ITAB10.
firstRun = 'N' .
rowCount = rowCount + 1.
IF ( download = 'S' ).
 IF ( rowCount = P_PKGSZ ).
   PERFORM FORM11.
   REFRESH ITAB10.
   rowCount = 0.
 ENDIF.
ELSE.
 IF ( rowCount = 5000 ).
   PERFORM FORM11.
   REFRESH ITAB10.
   rowCount = 0.
 ENDIF.
ENDIF.
ENDSELECT.
ENDIF.
IF ( ALOJF1 = 'N' ).
clear OBJK-SERNR.
clear OBJK-EQUNR.
clear OBJK-OBKNR.
clear ALTMP689.
clear ALTMP690.
 move ALTMP688 to ITAB10-OBKNR.
 move ALTMP689 to ITAB10-SERNR.
 move ALTMP690 to ITAB10-EQUNR.
 move ALTMP691 to ITAB10-OBJNR.
 move ALTMP692 to ITAB10-MANDT.
 move ALTMP693 to ITAB10-VKORG.
 move ALTMP694 to ITAB10-AUFNR.
 move ALTMP695 to ITAB10-BEMOT.
 move ALTMP696 to ITAB10-WAERS.
 move ALTMP697 to ITAB10-BEMOT_1.
 move ALTMP698 to ITAB10-SHKZG.
 move ALTMP699 to ITAB10-BUDAT.
 move ALTMP700 to ITAB10-BUKRS.
 move ALTMP701 to ITAB10-LIFNR.
 move ALTMP702 to ITAB10-PRCTR.
 move ALTMP703 to ITAB10-AUFNR_1.
 move ALTMP704 to ITAB10-MATNR.
 move ALTMP705 to ITAB10-MBLNR.
 move ALTMP706 to ITAB10-MJAHR.
 move ALTMP707 to ITAB10-ZEILE.
 move ALTMP708 to ITAB10-BWART.
 move ALTMP709 to ITAB10-WERKS.
 move ALTMP710 to ITAB10-LGORT.
 move ALTMP711 to ITAB10-MENGE.
 move ALTMP712 to ITAB10-MEINS.
 move ALTMP713 to ITAB10-SGTXT.
 move ALTMP714 to ITAB10-BLDAT.
 move ALTMP715 to ITAB10-Z_BUKRS.
 move ALTMP716 to ITAB10-Z_VKORG.
 move ALTMP717 to ITAB10-Z_WERKS.
 move ALTMP718 to ITAB10-Z_EKORG.
 move ALTMP719 to ITAB10-Z_MAMUSERCMPY.
 move ALTMP720 to ITAB10-Z_REGION.
 move ALTMP721 to ITAB10-Z_COUNTRY.
 move ALTMP722 to ITAB10-Z_COUNTRYDSCR.
 move ALTMP723 to ITAB10-Z_SALESCOMPANY.
 move ALTMP724 to ITAB10-Z_SALESCMPDSCR.
 move ALTMP725 to ITAB10-CPUDT.
 move ALTMP726 to ITAB10-CPUTM.
 append ITAB10.
firstRun = 'N' .
rowCount = rowCount + 1.
IF ( download = 'S' ).
 IF ( rowCount = P_PKGSZ ).
   PERFORM FORM11.
   REFRESH ITAB10.
   rowCount = 0.
 ENDIF.
ELSE.
 IF ( rowCount = 5000 ).
   PERFORM FORM11.
   REFRESH ITAB10.
   rowCount = 0.
 ENDIF.
ENDIF.
ENDIF.
ENDLOOP.
ENDFORM.

FORM FORM11.
STATICS firstRun(1) TYPE C VALUE 'Y'.
DATA ALTMP727 TYPE I.
DATA ALTMP728(18) TYPE C.
DATA ALTMP729(18) TYPE C.
DATA ALTMP730(22) TYPE C.
DATA ALTMP731(3) TYPE C.
DATA ALTMP732(4) TYPE C.
DATA ALTMP733(12) TYPE C.
DATA ALTMP734(2) TYPE C.
DATA ALTMP735(5) TYPE C.
DATA ALTMP736(2) TYPE C.
DATA ALTMP737(1) TYPE C.
DATA ALTMP738 TYPE D.
DATA ALTMP739(4) TYPE C.
DATA ALTMP740(10) TYPE C.
DATA ALTMP741(10) TYPE C.
DATA ALTMP742(12) TYPE C.
DATA ALTMP743(18) TYPE C.
DATA ALTMP744(10) TYPE C.
DATA ALTMP745(4) TYPE N.
DATA ALTMP746(4) TYPE N.
DATA ALTMP747(3) TYPE C.
DATA ALTMP748(4) TYPE C.
DATA ALTMP749(4) TYPE C.
DATA ALTMP750(16) TYPE P DECIMALS 3.
DATA ALTMP751(3) TYPE C.
DATA ALTMP752(50) TYPE C.
DATA ALTMP753 TYPE D.
DATA ALTMP754(4) TYPE C.
DATA ALTMP755(4) TYPE C.
DATA ALTMP756(4) TYPE C.
DATA ALTMP757(4) TYPE C.
DATA ALTMP758(4) TYPE C.
DATA ALTMP759(40) TYPE C.
DATA ALTMP760(40) TYPE C.
DATA ALTMP761(255) TYPE C.
DATA ALTMP762(40) TYPE C.
DATA ALTMP763(255) TYPE C.
DATA ALTMP764 TYPE D.
DATA ALTMP765 TYPE T.



LOOP AT ITAB10.
ALTMP727 = ITAB10-OBKNR.
ALTMP728 = ITAB10-SERNR.
ALTMP729 = ITAB10-EQUNR.
ALTMP730 = ITAB10-OBJNR.
ALTMP731 = ITAB10-MANDT.
ALTMP732 = ITAB10-VKORG.
ALTMP733 = ITAB10-AUFNR.
ALTMP734 = ITAB10-BEMOT.
ALTMP735 = ITAB10-WAERS.
ALTMP736 = ITAB10-BEMOT_1.
ALTMP737 = ITAB10-SHKZG.
ALTMP738 = ITAB10-BUDAT.
ALTMP739 = ITAB10-BUKRS.
ALTMP740 = ITAB10-LIFNR.
ALTMP741 = ITAB10-PRCTR.
ALTMP742 = ITAB10-AUFNR_1.
ALTMP743 = ITAB10-MATNR.
ALTMP744 = ITAB10-MBLNR.
ALTMP745 = ITAB10-MJAHR.
ALTMP746 = ITAB10-ZEILE.
ALTMP747 = ITAB10-BWART.
ALTMP748 = ITAB10-WERKS.
ALTMP749 = ITAB10-LGORT.
ALTMP750 = ITAB10-MENGE.
ALTMP751 = ITAB10-MEINS.
ALTMP752 = ITAB10-SGTXT.
ALTMP753 = ITAB10-BLDAT.
ALTMP754 = ITAB10-Z_BUKRS.
ALTMP755 = ITAB10-Z_VKORG.
ALTMP756 = ITAB10-Z_WERKS.
ALTMP757 = ITAB10-Z_EKORG.
ALTMP758 = ITAB10-Z_MAMUSERCMPY.
ALTMP759 = ITAB10-Z_REGION.
ALTMP760 = ITAB10-Z_COUNTRY.
ALTMP761 = ITAB10-Z_COUNTRYDSCR.
ALTMP762 = ITAB10-Z_SALESCOMPANY.
ALTMP763 = ITAB10-Z_SALESCMPDSCR.
ALTMP764 = ITAB10-CPUDT.
ALTMP765 = ITAB10-CPUTM.
 move ALTMP727 to ITAB11-OBKNR.
 move ALTMP728 to ITAB11-SERNR.
 move ALTMP729 to ITAB11-EQUNR.
 move ALTMP730 to ITAB11-OBJNR.
 move ALTMP731 to ITAB11-MANDT.
 move ALTMP732 to ITAB11-VKORG.
 move ALTMP733 to ITAB11-AUFNR.
 move ALTMP734 to ITAB11-BEMOT.
 move ALTMP735 to ITAB11-WAERS.
 move ALTMP736 to ITAB11-BEMOT_1.
 move ALTMP737 to ITAB11-SHKZG.
 move ALTMP738 to ITAB11-BUDAT.
 move ALTMP739 to ITAB11-BUKRS.
 move ALTMP740 to ITAB11-LIFNR.
 move ALTMP741 to ITAB11-PRCTR.
 move ALTMP742 to ITAB11-AUFNR_1.
 move ALTMP743 to ITAB11-MATNR.
 move ALTMP744 to ITAB11-MBLNR.
 move ALTMP745 to ITAB11-MJAHR.
 move ALTMP746 to ITAB11-ZEILE.
 move ALTMP747 to ITAB11-BWART.
 move ALTMP748 to ITAB11-WERKS.
 move ALTMP749 to ITAB11-LGORT.
 move ALTMP750 to ITAB11-MENGE.
 move ALTMP751 to ITAB11-MEINS.
 move ALTMP752 to ITAB11-SGTXT.
 move ALTMP753 to ITAB11-BLDAT.
 move ALTMP754 to ITAB11-Z_BUKRS.
 move ALTMP755 to ITAB11-Z_VKORG.
 move ALTMP756 to ITAB11-Z_WERKS.
 move ALTMP757 to ITAB11-Z_EKORG.
 move ALTMP758 to ITAB11-Z_MAMUSERCMPY.
 move ALTMP759 to ITAB11-Z_REGION.
 move ALTMP760 to ITAB11-Z_COUNTRY.
 move ALTMP761 to ITAB11-Z_COUNTRYDSCR.
 move ALTMP762 to ITAB11-Z_SALESCOMPANY.
 move ALTMP763 to ITAB11-Z_SALESCMPDSCR.
 move ALTMP764 to ITAB11-CPUDT.
 move ALTMP765 to ITAB11-CPUTM.
 append ITAB11.
firstRun = 'N' .
 cntbuf = cntbuf + 1.
 if download = 'N'.
  if cntbuf > 5000.
    perform FORM12.
    clear cntbuf.
    refresh ITAB11.
    append_flag = 'A'.
  endif.
 endif.
 if download = 'S'.
  if cntbuf > P_PKGSZ.
    perform FORM12.
    clear cntbuf.
    refresh ITAB11.
  endif.
 endif.
ENDLOOP.
ENDFORM.

FORM FORM12.
data: outfile(512), ldfile(50).
ldfile = 'CTS_LZ_SAP_CP1_MSEGSER03_D'.
concatenate out_dir ldfile into outfile
  separated by '/'.
  IF DOWNLOAD = 'S'.
     DATA: error_message(700),mtext(800),iEOP(1).
     CALL FUNCTION P_SRVFM
          DESTINATION P_DEST
          KEEPING LOGICAL UNIT OF WORK
          EXPORTING
            EOS = last_batch
          IMPORTING
            EOP = iEOP
          TABLES
            E_TABLE = ITAB11
          EXCEPTIONS
            READ_ERROR = 1
            SYSTEM_FAILURE = 2
            MESSAGE error_message
            COMMUNICATION_FAILURE = 3
            MESSAGE error_message
            OTHERS = 4.

     IF sy-subrc ne 0.
        Case sy-subrc.
        when 1.
        CONCATENATE
        'Data Services read error. '
        'Check Data Services error log.'
        INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 2.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 3.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 4.
        MESSAGE  E240(S#) WITH
'Other SAP System Failure while calling DS remote function.'.
        endcase.
      ENDIF.
      IF iEOP = 'X'.
         PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
         LEAVE PROGRAM.
       ENDIF.
  ELSE.
data  dlmtlen type i value '1'.
data xdlmtlen type i value '1'.
data:
  ht(1) type c,
  xht(1) type x,
  conv type ref to cl_abap_conv_in_ce.
xht = '7F'.
conv = cl_abap_conv_in_ce=>create(
  encoding = '1100'
  input = xht
).
call method conv->read(
  exporting n    = xdlmtlen
  importing data = ht
            len = dlmtlen
).
data return_code type i.
 perform write_delimited_file
           tables   ITAB11
           using    outfile
                    append_flag
                    ht
                    dlmtlen
                    download
           changing return_code.

  case return_code.
    when 1.
      IF EXECMODE = 'D'.
        WRITE: /5 'No line selected'.
      ELSE.
        MESSAGE E047(S#).
      ENDIF.
    when 2.
      IF EXECMODE = 'D'.
        WRITE: /5 'Open File Error -- ', 25 OUTFILE.
      ELSE.
        MESSAGE  E084(E0) WITH OUTFILE.
      ENDIF.
    when 3.
      IF EXECMODE = 'D'.
        WRITE: /5 'Data exceed length limit (8192) '.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Data exceed length limit (8192) '.
      ENDIF.
    when 4.
      IF EXECMODE = 'D'.
        WRITE: /5 'Call function WS_DOWNLOAD error'.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Call function WS_DOWNLOAD error'.
      ENDIF.
  endcase.
 ENDIF.
ENDFORM.

FORM SUBSTRING USING SRC BEG LEN CHANGING RET.

DATA: VA1 TYPE I.
DATA: VA2 TYPE I.
DATA: VA3 TYPE I.

VA3 = STRLEN( SRC ).

IF  BEG = 0.   VA1 = 0.
ELSE.
  IF  BEG < 0.
    VA1 = VA3 + BEG.
    IF  VA1 < 0.   VA1 = 0.
    ENDIF.
  ELSE.          VA1 = BEG - 1.
  ENDIF.
ENDIF.

IF  LEN < 0.   VA2 = 0.
ELSE.          VA2 = VA3 - VA1.
ENDIF.

IF  VA2 > LEN. VA2 = LEN.
ENDIF.

IF  VA2 < 1.   MOVE ''           TO RET.
ELSE.          MOVE SRC+VA1(VA2) TO RET.
ENDIF.

ENDFORM.

form write_delimited_file
           tables   datatab
           using    file
                    append
                    delimit
                    dlength
                    dwnload
          changing rc.

  data: type1,
        appd(1),
        temp(32),
        time1(8),
        date1(10),
        output(8192),
        rcount type i,
        offset type i,
        tablen type i,
        maxlen type i value '8192'.

  data: begin of clientab occurs 0,
             output(8192),
          end of clientab.

  field-symbols: <f>.
  field-symbols <delim1>.
  data delim2(16).
  data l_filename type string.

  appd = append.
  if appd is not initial.
     appd = 'X'.
  endif.
  move file to l_filename.
  describe table datatab lines tablen.


  if dwnload = 'Y'.
     clear clientab. refresh clientab.
     rcount = 0.
  else.
     if appd = space.
   open dataset file for output in text mode ENCODING UTF-8.
     else.
    open dataset file for appending in text mode ENCODING UTF-8.
     endif.
     if sy-subrc <> 0.
         rc = 2. exit.
     endif.
  endif.

  loop at datatab.
    clear: tablen, offset, output.
    do.
      assign component sy-index of
         structure datatab to <f>.
      if sy-subrc <> 0. exit. endif.
      if sy-index > 1.
         assign delimit(dlength) TO <delim1> CASTING TYPE C.
         delim2 = <delim1>.
         write delim2(dlength) to output+offset(dlength).
         add dlength to offset.
      endif.

      describe field <f> type type1.

      if type1 = 'I' or type1 = 'N'.
          type1 = 'P'.
      endif.

      case type1.
        when 'D'.
          if <f> = '00000000'.
             <f> = ' '.
          else.
             move <f> to time1.
             assign time1 to <f>.
          endif.
        when 'F'.
          if <f> = '0.0'.
            temp = '0.0'.
          else.
             write <f> to temp exponent 0.
          endif.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
        when 'P'.
          if <f> < 0.
             write '-' to output+offset(1).
             add 1 to offset.
             <f> = <f> * ( -1 ).
          endif.
          move <f> to temp.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
      endcase.

      sy-fdpos = strlen( <f> ).

      tablen = offset + sy-fdpos.
      if tablen > maxlen.
         rc = 3. exit.
      endif.
      write <f> to output+offset(sy-fdpos).
      add sy-fdpos to offset.
    enddo.

    if dwnload = 'Y'.
       clientab-output = output.
       append clientab.
       rcount = rcount + 1.
       if rcount >= 50.
          SY-BATCH = SPACE.
          CALL FUNCTION 'GUI_DOWNLOAD'
            EXPORTING
              FILENAME = l_filename
              FILETYPE = 'ASC'
              CODEPAGE = '4110'
              APPEND   = appd
              WRITE_FIELD_SEPARATOR = 'X'
*            IMPORTING
*              FILELENGTH =
            TABLES
              DATA_TAB = clientab
            EXCEPTIONS
              OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
          clear clientab. refresh clientab.
          rcount = 0. appd = 'A'.
       endif.
    else.
       transfer output to file.
    endif.
  endloop.

  if dwnload = 'Y'.
       SY-BATCH = SPACE.
       CALL FUNCTION 'GUI_DOWNLOAD'
         EXPORTING
           FILENAME = l_filename
           FILETYPE = 'ASC'
              CODEPAGE = '4110'
           APPEND   = appd
           WRITE_FIELD_SEPARATOR = 'X'
*         IMPORTING
*           FILELENGTH =
         TABLES
           DATA_TAB = clientab
         EXCEPTIONS
           OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
  else.
       close dataset file.
  endif.
endform.

FORM CONNECT_RFCDEST_TO_PROGID.
 INCLUDE rfctypes.

 DATA: len     type i,
       R3NAME(4),
       SYSTNR(2),
       uid     LIKE SYS_UID,
       options LIKE RFCOPT,
       isunicode  TYPE n.

 DATA: NTOTAL     LIKE GWY_STRUCT-NOREG,
       GWY_GWHOST LIKE GWY_STRUCT-GWHOST,
       GWY_GWSERV LIKE GWY_STRUCT-GWSERV,
       GWY_TPNAME LIKE GWY_SYSTEM-TPNAME.

 TABLES: RFCSI.

* Check program ID
 IF P_PROGID = SPACE.							
    RAISE INVALID_PROGRAM_ID.
 ENDIF.

* determine if the RFC destination authority
  CALL FUNCTION 'RFC_READ_TCPIP_DESTINATION'
       EXPORTING destination = P_DEST
                 authority_check = 'X'
  IMPORTING rfcunicode = isunicode.

* Use current gateway if no info exits
 IF P_GWHOST = SPACE OR P_GWSERV = SPACE.
  CALL FUNCTION 'RFC_SYSTEM_INFO'
      IMPORTING
          RFCSI_EXPORT = RFCSI.

  len = strlen( rfcsi-rfcdest ) - 2.
  systnr = rfcsi-rfcdest+len.
  len = len - 1 - 3.
  r3name = rfcsi-rfcdest+len(3).
  len = len - 1.
  options-rfcgwhost = rfcsi-rfcdest(len).
  CONCATENATE 'sapgw' SYSTNR INTO options-rfcgwserv.
 ELSE.
   options-rfcgwhost = P_GWHOST.
   options-rfcgwserv = P_GWSERV.
 ENDIF.

* Parameters for GWY function call
  GWY_GWHOST = OPTIONS-RFCGWHOST.
  GWY_GWSERV = OPTIONS-RFCGWSERV.
  GWY_TPNAME = P_PROGID.

* Check gateway and server program registered
  CALL FUNCTION 'GWY_GET_NO_REG_PROGRAMS'
     EXPORTING
        GWHOST      = GWY_GWHOST
        GWSERV      = GWY_GWSERV
        TPNAME      = GWY_TPNAME
     IMPORTING
        NOREG_TOTAL = NTOTAL
     EXCEPTIONS
        OTHERS      = 1.

  IF sy-subrc NE 0.
     raise CONNECT_TO_GATEWAY_FAILED.
  ENDIF.

  IF NTOTAL = 0.
     raise SERVER_NOT_REGISTERED.
  ENDIF.

  IF NTOTAL GT 1.
     raise DUPLICATE_REG_PROGRAMS.
  ENDIF.

* build new connection to a registered server
  options-rfcexec   = gwy_tpname.
  options-rfcgwhost = gwy_gwhost.
  options-rfcgwserv = gwy_gwserv.
  options-rfchost   = '%%RFCSERVER%%'.
  IF P_SNC_ON = 'X'.
    options-rfcsnc  = 'X'.
  ENDIF.

  CALL 'RFCControl' ID 'CODE' FIELD 'O'
                    ID 'DESTINATION' FIELD P_DEST
                    ID 'TYPE' FIELD rfctype_external_tcp
                    ID 'OPTIONS' FIELD options.

  IF sy-subrc NE 0.
     RAISE CONNECT_TO_REG_SERVER_FAILED.
   ENDIF.

* and set exclusive mode to keep server owned
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
      EXPORTING  destination = P_DEST
                 exclusiv    = 'Y'
      EXCEPTIONS connect_to_reg_server_failed = 1
                 exclusiv_not_supported       = 2.

  IF SY-SUBRC NE 0.
     CASE SY-SUBRC.
          WHEN 1.
              RAISE CONNECT_TO_REG_SERVER_FAILED.
          WHEN 2.
              RAISE EXCLUSIV_NOT_SUPPORTED.
     ENDCASE.
  ENDIF.

ENDFORM.

FORM DISCONNECT_RFCDEST_FROM_PROGID.
* set exclusive mode to E to end the session
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
     EXPORTING
         destination = P_DEST
         exclusiv    = 'E'
     EXCEPTIONS
         connect_to_reg_server_failed = 1				
         exclusiv_not_supported       = 2.
ENDFORM.
