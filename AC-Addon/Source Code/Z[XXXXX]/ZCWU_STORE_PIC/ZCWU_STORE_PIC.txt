*&---------------------------------------------------------------------*
*& Report  ZCWU_STORE_PIC
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  ZCWU_STORE_PIC.

DATA : IT_PHOTO TYPE  STANDARD TABLE OF ZCWU_PHOTO1,
       WA_PHOTO TYPE   ZCWU_PHOTO1.
DATA: OK_CODE TYPE SY-UCOMM.
DATA   : WA_ZTEST_PHOTO TYPE ZCWU_PHOTO1,
         IT_ZTEST_PHOTO TYPE TABLE OF ZCWU_PHOTO1.
DATA: LV_CONTENT  TYPE XSTRING.
DATA: G_CUSTOM_CONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER.

  DATA: lo_docking TYPE REF TO cl_gui_docking_container.
  DATA: lo_picture TYPE REF TO cl_gui_picture.
  DATA: lv_url TYPE char255.
  DATA: it_data TYPE  STANDARD TABLE OF x255.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
SELECT-OPTIONS : S_PNAME FOR WA_PHOTO-PNAME NO INTERVALS .
PARAMETERS     : P_PRINT TYPE CHAR1 RADIOBUTTON GROUP RDA1 DEFAULT 'X' USER-COMMAND COM,
                 P_UPLOAD TYPE CHAR1 RADIOBUTTON GROUP RDA1.
SELECTION-SCREEN end OF BLOCK b1.

IF P_PRINT IS NOT INITIAL.
* selecting the data from the table..
  SELECT * FROM  ZCWU_PHOTO1 INTO WA_PHOTO
    UP TO 1 ROWS
    WHERE PNAME IN  S_PNAME .
  ENDSELECT.
  LV_CONTENT = WA_PHOTO-PHOTO.

 CALL SCREEN 100.

  CALL FUNCTION 'FP_JOB_CLOSE'
*   IMPORTING
*     E_RESULT             =
      EXCEPTIONS
        USAGE_ERROR           = 1
        SYSTEM_ERROR          = 2
        INTERNAL_ERROR        = 3
        OTHERS                = 4.
  IF SY-SUBRC <> 0.

  ENDIF.
ELSE.
  DATA: LR_MIME_REP TYPE REF TO IF_MR_API.

  DATA: LV_FILENAME TYPE STRING.
  DATA: LV_PATH     TYPE STRING.
  DATA: LV_FULLPATH TYPE STRING.
  DATA: LV_LENGTH   TYPE  I.
  DATA: LV_RC TYPE SY-SUBRC.

  DATA: LT_FILE TYPE FILETABLE.
  DATA: LS_FILE LIKE LINE OF LT_FILE.


  DATA: LT_DATA TYPE STANDARD TABLE OF X255.

  CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG(
    CHANGING
      FILE_TABLE              =  LT_FILE  " Table Holding Selected Files
      RC                      =  LV_RC  ). " Return Code, Number of Files or -1 If Error Occurred
  READ TABLE LT_FILE INTO LS_FILE INDEX 1.
  IF SY-SUBRC = 0.
    LV_FILENAME = LS_FILE-FILENAME.
  ENDIF.

  CL_GUI_FRONTEND_SERVICES=>GUI_UPLOAD(
    EXPORTING
      FILENAME                = LV_FILENAME    " Name of file
      FILETYPE                = 'BIN'
    IMPORTING
      FILELENGTH              =  LV_LENGTH   " File length
    CHANGING
      DATA_TAB                = LT_DATA    " Transfer table for file contents
    EXCEPTIONS
      OTHERS                  = 19 ).


  CALL FUNCTION 'SCMS_BINARY_TO_XSTRING'
    EXPORTING
      INPUT_LENGTH = LV_LENGTH
*    first_line   = 0
*    last_line    = 0
    IMPORTING
      BUFFER       = LV_CONTENT
    TABLES
      BINARY_TAB   = LT_DATA
    EXCEPTIONS
      FAILED       = 1
      OTHERS       = 2.

  WA_ZTEST_PHOTO-PNAME = S_PNAME-low.
  WA_ZTEST_PHOTO-PHOTO =  LV_CONTENT.

  MODIFY ZCWU_PHOTO1 FROM WA_ZTEST_PHOTO .

  if sy-subrc = 0.
   MESSAGE 'Successfully Uploaded' TYPE 'I' DISPLAY LIKE 'S'.
   ENDIF.
ENDIF.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
module STATUS_0100 output.
  SET PF-STATUS 'STA100'.
*  SET TITLEBAR 'xxx'.
  IF lo_docking IS INITIAL.

    CREATE OBJECT G_CUSTOM_CONTAINER
           EXPORTING CONTAINER_NAME = 'GR_CONTAINER'.

*   Create an ALV control
    CREATE OBJECT lo_picture
      EXPORTING
        parent = G_CUSTOM_CONTAINER.

    CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
      EXPORTING
        buffer     = lv_content
      TABLES
        binary_tab = it_data.

    CALL FUNCTION 'DP_CREATE_URL'
      EXPORTING
        type    = 'IMAGE'
        subtype = 'PNG'
      TABLES
        data    = it_data
      CHANGING
        url     = lv_url.

    lo_picture->load_picture_from_url_async( lv_url ).

  ENDIF.
*

endmodule.                 " STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
module USER_COMMAND_0100 input.
  CASE OK_CODE.
    WHEN 'EXIT'.
      LEAVE PROGRAM.
    WHEN 'RET'.
      LEAVE TO SCREEN 0.
    WHEN 'BACK'.
      LEAVE TO SCREEN 0.
    WHEN OTHERS.
*     do nothing
  ENDCASE.
  CLEAR OK_CODE.
endmodule.                 " USER_COMMAND_0100  INPUT
