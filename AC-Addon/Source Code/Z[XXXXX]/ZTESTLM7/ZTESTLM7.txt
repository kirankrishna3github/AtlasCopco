*&---------------------------------------------------------------------*
*& Report  ZTESTLM2                                                    *
*&                                                                     *
*&---------------------------------------------------------------------*
*&                                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*

REPORT  ZTESTLM7.

data: gv_char(1) type c,
      gv_off(5)     type c,
      gv_num(4)     type n,
      d_stprs2(15)  type c,
      lv_stprs(15)  type c,
      lv_stprs_p    type stprs,
      lv_check,
      lv_qty type bmeng,
      gv_len(2)       type n.

data: g_marg%(5) type p decimals 2,
      gv_answer  type c.

DATA: BEGIN OF T OCCURS 200,
        TEXT1(60),TEXT2(12),
      END OF T.

constants: c_blank type matnr value space.

data: g_plifz type plifz,
      sxml type string.

data: begin of lt_iqq occurs 0.
        include structure yam_iqq.
data: end of lt_iqq.

data:   lt_tline TYPE STANDARD TABLE OF tline INITIAL SIZE 0
                                              WITH HEADER LINE,
        lt_text like popuptext occurs 0 with header line.

data: lv_prctr(10) type n,
      gv_prctr     type prctr.

*parameter: d_stprs(15) type c.
*parameters: p_pr_eq type prctr,
*            p_pr_sp type prctr,
*            p_vkorg type vkorg.
parameter: p_get type DAUNOR,
           p_dat type sy-datum.
*data: it_bseg type FAGL_T_BSEG.
*FIELD-SYMBOLS: <fs_bseg> TYPE bseg.
CONSTANTS: c_prctr TYPE prctr VALUE '43Q'.

start-of-selection.

*  select * from bseg into table it_bseg.
*
*  LOOP AT it_bseg ASSIGNING <fs_bseg>.
*    IF NOT <fs_bseg>-prctr IS INITIAL.
*      <fs_bseg>-segment = <fs_bseg>-prctr.
*    ELSE.
*      <fs_bseg>-prctr = c_prctr.
**     ASSIGN c_prctr TO <fs_bseg>-prctr.
*      <fs_bseg>-segment = <fs_bseg>-prctr.
*    ENDIF.
*  ENDLOOP.

*write: / c_prctr.
*if c_prctr co '1234567890 '.
*  lv_prctr = c_prctr.
*  gv_prctr = lv_prctr.
*  write: / gv_prctr.
*else.
*  write: / 'alfanumeric'.
*endif.

*gv_off = 'A0001'.
*move gv_off+1(4) to gv_num.
*add 1 to gv_num.
*move gv_num to gv_off+1(4).
*write / gv_off.

*      refresh lt_text.
*      LOOP AT lt_tline.
*        move lt_tline-tdline to lt_text-text.
*        format color col_negative intensified off.
*        write 'in ''t rood' to lt_text-text.
*        append lt_text.
*        clear lt_text.
*      endloop.
*
*      CALL FUNCTION 'DD_POPUP_WITH_INFOTEXT'
*        EXPORTING
*          TITEL        = 'Internal Comments/Work Comments'
*          START_COLUMN = 10
*          START_ROW    = 10
*          END_COLUMN   = 100
*          END_ROW      = 25
*          INFOFLAG     = ' '
*        IMPORTING
*          ANSWER       = gv_answer
*        TABLES
*          LINES        = lt_text.


*DATA:
*  BEGIN OF itab occurs 0,
*    equnr TYPE equnr,
*    sernr type gernr,
*  END OF itab.
*
*data:
*  begin of lt_equi occurs 0,
*    equnr TYPE equnr,
*    sernr type gernr,
*  END OF lt_equi.
*
*itab-equnr = 'equnr1'.
*itab-sernr = 'sernr1'.
*APPEND itab.
*
*itab-equnr = 'equnr2'.
*itab-sernr = 'sernr2'.
*APPEND itab.
*
*EXPORT itab TO MEMORY ID 'TESTLM'.
*
*import itab to lt_equi from memory id 'TESTLM'.
*
*loop at lt_equi.
*  write: / lt_equi-equnr, lt_equi-sernr.
*endloop.

*data: lv_getal_in(3) type p decimals 1,
*      lv_getal_out(2) type p.
*
*move p_get to lv_getal_in.
*
*CALL FUNCTION 'UNIT_CONVERSION_SIMPLE'
*  EXPORTING
*    INPUT                      = lv_getal_in
*    NO_TYPE_CHECK              = 'X'
*    ROUND_SIGN                 = ' '
*    UNIT_IN                    = 'STD'
*    UNIT_OUT                   = 'MIN'
*  IMPORTING
**   ADD_CONST                  =
**   DECIMALS                   =
**   DENOMINATOR                =
**   NUMERATOR                  =
*    OUTPUT                     = lv_getal_out
*  EXCEPTIONS
*    CONVERSION_NOT_FOUND       = 1
*    DIVISION_BY_ZERO           = 2
*    INPUT_INVALID              = 3
*    OUTPUT_INVALID             = 4
*    OVERFLOW                   = 5
*    TYPE_INVALID               = 6
*    UNITS_MISSING              = 7
*    UNIT_IN_NOT_FOUND          = 8
*    UNIT_OUT_NOT_FOUND         = 9
*    OTHERS                     = 10
*          .
*IF SY-SUBRC <> 0.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*else.
*  write: lv_getal_in, lv_getal_out.
*ENDIF.

data: i_bkpf type standard table of bkpf with header line,
      i_bkp1 type standard table of bkp1 with header line,
      i_bsec type standard table of bsec with header line,
      i_bsed type standard table of bsed with header line,
      i_bseg type standard table of bseg with header line,
      i_bset type standard table of bset with header line,
      i_bseu type standard table of bseu with header line.

i_bkpf-bukrs = 'POLA'.
i_bkpf-belnr = '0090003308'.
i_bkpf-gjahr = '2014'.
i_bkpf-xblnr = '0090003308'.
append i_bkpf.

CALL FUNCTION 'Y_GDS_INVOICE_POST'
* EXPORTING
*   I_XVBUP       = 'X'
  TABLES
    T_BKP1        = i_bkp1
    T_BKPF        = i_bkpf
    T_BSEC        = i_bsec
    T_BSED        = i_bsed
    T_BSEG        = i_bseg
    T_BSET        = i_bset
    T_BSEU        = i_bseu
          .

commit work.
