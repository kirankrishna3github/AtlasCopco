*&---------------------------------------------------------------------*
*& Report  ZCWU_TEST_028
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  zcwu_test_028.

*SET EXTENDED CHECK OFF.
*INCLUDE sbal_constants.
*SET EXTENDED CHECK ON.
*
*DATA:
*  g_s_log            TYPE bal_s_log,
*  g_log_handle       TYPE balloghndl,
*  g_dummy            TYPE c.                                "#EC NEEDED
*
*DATA:
*  l_s_msg       TYPE bal_s_msg,
*  lognumber     TYPE bal_t_lgnm,
*  wa_lognumber  LIKE bal_s_lgnm,
*  lt_balloghndl TYPE bal_t_logh.     "Log handle internal table
*
*END-OF-SELECTION

**Define header data of this log
**  g_s_log-extnumber = 'Application Log Demo'.               "#EC NOTEXT
*g_s_log-object    = 'YSE_FORW_UPDT'.
*g_s_log-subobject = ''.
*  g_s_log-aldate    = sy-datum.
*  g_s_log-altime    = sy-uzeit.
*  g_s_log-aluser    = sy-uname.
*  g_s_log-alprog    = sy-repid.
*
**Create a log
*  CALL FUNCTION 'BAL_LOG_CREATE'
*    EXPORTING
*      i_s_log      = g_s_log
*    IMPORTING
*      e_log_handle = g_log_handle
*    EXCEPTIONS
*      OTHERS       = 1.
*  IF sy-subrc NE 0.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF.
*
**Store log handle in global internal table for DB save later & flush
*  APPEND g_log_handle TO lt_balloghndl.
*
*  MESSAGE e000(yse_sales_log)
*    WITH 'TESTsfsssss' INTO g_dummy.
*
*  l_s_msg-msgty     = sy-msgty.
*  l_s_msg-msgid     = sy-msgid.
*  l_s_msg-msgno     = sy-msgno.
*  l_s_msg-msgv1     = sy-msgv1.
*  l_s_msg-msgv2     = sy-msgv2.
*  l_s_msg-msgv3     = sy-msgv3.
*  l_s_msg-msgv4     = sy-msgv4.
*  l_s_msg-probclass = probclass_very_high.
*
*  CALL FUNCTION 'BAL_LOG_MSG_ADD'
*    EXPORTING
*      i_s_msg       = l_s_msg
*      i_log_handle  = g_log_handle
*    EXCEPTIONS
*      log_not_found = 0
*      OTHERS        = 1.
*  IF sy-subrc NE 0.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ELSE.
*    CALL FUNCTION 'BAL_DB_SAVE'
*      EXPORTING
*        i_t_log_handle   = lt_balloghndl
*      IMPORTING
*        e_new_lognumbers = lognumber
*      EXCEPTIONS
*        log_not_found    = 1
*        save_not_allowed = 2
*        numbering_error  = 3
*        OTHERS           = 4.
*    IF sy-subrc EQ 0.
*      READ TABLE lognumber INTO wa_lognumber INDEX 1.
*      MESSAGE i000(vz) WITH wa_lognumber-lognumber.
*    ENDIF.
*  ENDIF.

DATA: phy_avail(13) TYPE c.

phy_avail = '11-'.
WRITE: phy_avail.
CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
  CHANGING
    value = phy_avail.
WRITE: phy_avail.


DATA: caufvd   TYPE caufvd.
IF sy-tcode = 'IW31' OR
   sy-tcode = 'IW32' OR
   sy-tcode = 'IW51' OR
   sy-tcode = 'IW52' OR
   sy-tcode(8) = 'YAM_LOOK'..

  DATA: gv_zzdet             TYPE char1,
        gv_trtyp_srm(1)      TYPE c,
        lv_ordnr_srm         TYPE aufnr,
        lv_objnr_oper_srm    TYPE jest-objnr,
        lv_extid_srm(30)     TYPE c,
        lv_servtype_srm      TYPE yservtype,
        lt_afvc_srm          TYPE STANDARD TABLE OF afvc INITIAL SIZE 0,
        ls_afvc_srm          TYPE afvc.

  DATA: lv_garg2_srm         TYPE eqegraarg,
        lv_gname2_srm        TYPE eqegraname VALUE 'AUFK',
        lt_enq2_srm          TYPE STANDARD TABLE OF seqg3,
        lv_count2_srm        TYPE sytabix.

  TYPES:  BEGIN OF ty_aufk_srm,
            aufnr TYPE aufnr,
            bemot TYPE bemot,
            objnr TYPE j_objnr,
          END OF ty_aufk_srm.
  TYPES:  BEGIN OF ty_jest_srm,
            objnr TYPE j_objnr,
            stat  TYPE j_status,
            inact TYPE j_inact,
          END OF ty_jest_srm.
  TYPES:  BEGIN OF ty_afvu_srm,
            aufpl TYPE co_aufpl,
            aplzl TYPE co_aplzl,
            usr03 TYPE usrchar10,
          END OF ty_afvu_srm.

  DATA: gt_aufk_srm TYPE STANDARD TABLE OF ty_aufk_srm,
        wa_aufk1_srm TYPE ty_aufk_srm.
  DATA: gt_jest_srm  TYPE STANDARD TABLE OF ty_jest_srm,
        wa_jest1_srm TYPE ty_jest_srm.
  DATA: lv_donotsend_srm TYPE char1.

  CLEAR: gv_zzdet.
  SELECT SINGLE zzdet INTO gv_zzdet
    FROM yse_srm_sel WHERE iwerk = caufvd-iwerk
                      AND  ingpr = caufvd-ingpr.

  IF NOT gv_zzdet IS INITIAL.
*.. First check if service order is still locked due to previous update
    CONCATENATE sy-mandt caufvd-aufnr INTO lv_garg2_srm.

*  Unlock
    DO 10 TIMES.
      CALL FUNCTION 'ENQUEUE_READ'
        EXPORTING
          gclient = sy-mandt
          gname   = lv_gname2_srm
          garg    = lv_garg2_srm
        IMPORTING
          number  = lv_count2_srm
        TABLES
          enq     = lt_enq2_srm.

      IF lv_count2_srm = 0.
        WAIT UP TO 2 SECONDS.
        EXIT.
      ELSE.
        WAIT UP TO 5 SECONDS.
      ENDIF.
    ENDDO.

*.. Get all operations for this order
    REFRESH lt_afvc_srm.
    SELECT * INTO TABLE lt_afvc_srm
        FROM afvc WHERE aufpl = caufvd-aufpl.

* . Get document header
    REFRESH: gt_aufk_srm.
    SELECT aufnr
           bemot
           objnr
    FROM   aufk
    INTO   TABLE gt_aufk_srm
    WHERE  aufnr EQ caufvd-aufnr.

*   Get document status
    REFRESH: gt_jest_srm.
    IF NOT gt_aufk_srm IS INITIAL.
      SELECT objnr
             stat
             inact
      FROM   jest
      INTO   TABLE gt_jest_srm
      FOR    ALL ENTRIES IN gt_aufk_srm
      WHERE  objnr EQ gt_aufk_srm-objnr
      AND    ( stat EQ 'I0413' OR
               stat EQ 'I0396' OR
               stat EQ 'I0002')
      AND    inact EQ ' '.
    ENDIF.

    CLEAR: wa_jest1_srm,
           wa_aufk1_srm,
           lv_donotsend_srm.
    READ TABLE gt_aufk_srm INTO wa_aufk1_srm WITH KEY aufnr = caufvd-aufnr.
    IF sy-subrc EQ 0.

*     Check if order is released
      READ TABLE gt_jest_srm INTO wa_jest1_srm WITH KEY objnr = wa_aufk1_srm-objnr
                                                stat  = 'I0002'
                                                inact = ' '.
*     Orders NOT having REL status should not be sent to VisiTour
      IF sy-subrc <> 0.
        lv_donotsend_srm = 'X'.
      ENDIF.

*     Check if the order has status CNOK
      READ TABLE gt_jest_srm INTO wa_jest1_srm WITH KEY objnr = wa_aufk1_srm-objnr
                                                        stat  = 'I0413'
                                                        inact = ' '.
*     Orders having CNOK status should not be sent to VisiTour
      IF sy-subrc EQ 0.
        lv_donotsend_srm = 'X'.
      ENDIF.
    ENDIF.

* Check if the order is Fixed Price
    CLEAR: wa_aufk1_srm.
    READ TABLE gt_aufk_srm INTO wa_aufk1_srm WITH KEY aufnr = caufvd-aufnr
                                             bemot = 'FP'.
    IF sy-subrc EQ 0.
      CLEAR: wa_aufk1_srm.
      READ TABLE gt_aufk_srm INTO wa_aufk1_srm WITH KEY aufnr = caufvd-aufnr.
      IF sy-subrc EQ 0.
*     Check if the order has status QUAC
        READ TABLE gt_jest_srm INTO wa_jest1_srm WITH KEY objnr = wa_aufk1_srm-objnr
                                                  stat  = 'I0396'
                                                  inact = ' '.
*     A fixed price order should not be sent to VisiTour before the quotation is accepted
        IF sy-subrc NE 0.
          lv_donotsend_srm = 'X'.
        ENDIF.
      ENDIF.
    ENDIF.

    WRITE caufvd-aufnr TO lv_ordnr_srm NO-ZERO.

    IF sy-tcode = 'IW31'.
      gv_trtyp_srm = 'H'.                           " Creations
      IF lv_donotsend_srm IS INITIAL.
        LOOP AT lt_afvc_srm INTO ls_afvc_srm WHERE steus = 'ZCO3'.
          CALL FUNCTION 'YSE_SRM_OUT_CALL'
            EXPORTING
              im_trtyp = gv_trtyp_srm
              im_aufnr = caufvd-aufnr
              im_vornr = ls_afvc_srm-vornr
              im_plant = caufvd-iwerk.
        ENDLOOP.
      ENDIF.
    ELSE.
      LOOP AT lt_afvc_srm INTO ls_afvc_srm WHERE steus = 'ZCO3'.
        CONCATENATE 'OV' ls_afvc_srm-aufpl ls_afvc_srm-aplzl
          INTO lv_objnr_oper_srm.
*       Check if DLT(Deletion indicator) exist
        CALL FUNCTION 'STATUS_CHECK'
          EXPORTING
            objnr             = lv_objnr_oper_srm
            status            = 'I0013'
          EXCEPTIONS
            object_not_found  = 1
            status_not_active = 2
            OTHERS            = 3.

        IF sy-subrc <> 0.
          CONCATENATE lv_ordnr_srm '/' ls_afvc_srm-vornr INTO lv_extid_srm.

          SELECT SINGLE servtype INTO lv_servtype_srm
            FROM yse_srm_call_fld
            WHERE extid = lv_extid_srm.

          IF sy-subrc = 0.
            IF lv_donotsend_srm IS INITIAL.
              CALL FUNCTION 'YSE_SRM_OUT_CALL'
                EXPORTING
                  im_trtyp = 'V'
                  im_aufnr = caufvd-aufnr
                  im_vornr = ls_afvc_srm-vornr
                  im_plant = caufvd-iwerk.
            ENDIF.
          ELSE.
            IF lv_donotsend_srm IS INITIAL.
              CALL FUNCTION 'YSE_SRM_OUT_CALL'
                EXPORTING
                  im_trtyp = 'H'
                  im_aufnr = caufvd-aufnr
                  im_vornr = ls_afvc_srm-vornr
                  im_plant = caufvd-iwerk.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDIF.
ENDIF.
