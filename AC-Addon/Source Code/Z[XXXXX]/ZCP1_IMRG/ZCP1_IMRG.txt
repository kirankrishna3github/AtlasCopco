REPORT ZAL_ABAP message-id 26 line-size 255
no standard page heading.
* ZCP1_IMRG.
PARAMETER DOWNLOAD(1) DEFAULT 'S' lower case. "N-svr,Y-clnt
PARAMETER EXECMODE(1) DEFAULT 'B' lower case. "D-dlg,B-btch
PARAMETER OUT_DIR(48) DEFAULT "output file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER IN_DIR(48) DEFAULT "input file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER P_DEST TYPE RFCDES-RFCDEST DEFAULT
'NONE'.
PARAMETER P_PROGID TYPE RFCOPT-RFCEXEC DEFAULT
SPACE.
PARAMETER P_GWHOST TYPE RFCOPT-RFCGWHOST DEFAULT
SPACE.
PARAMETER P_GWSERV TYPE RFCOPT-RFCGWSERV DEFAULT
SPACE.
PARAMETER P_SRVFM(30) DEFAULT "Server Callback function
SPACE.
PARAMETER P_PKGSZ TYPE I DEFAULT "Stream package size
5000.
PARAMETER P_SNC_ON(1) DEFAULT "X-on SPACE-off
SPACE.

PARAMETER $PARAM1 TYPE D.

PARAMETER P_DF_VK(40) DEFAULT "ABAP data flow object key
'' lower case.
PARAMETER P_DI_GEN(40) DEFAULT "DI version that generated ABAP
'' lower case.

*** Machine generated ABAP. Do not modify.            ***
*** (C)Copyright Business Objects S.A.  All rights reserved. ***
*
* Date Time:
*    09/11/15 13:36:15
* SAP used for generated this ABAP:
*    Release: 701
*    Host   : 10.25.3.80
*
* ABAP Dataflow Name:
*    DF_R3_CTS_LZ_SAP_CP1_IMRG_EquipMeasurements_D
* ABAP program name in SAP:
*  ZCP1_IMRG
* Generated ABAP file name:
*    //Airsbeap0512/d$/Data/SAPLogistics/VAL/ABAP/SEED_RFC/ZCP1_I
*MRG
TABLES IMRG.
TABLES IMPTT.

DATA: begin of ITAB3 occurs 0,
MPOBJ(22) TYPE C,
VKORG(4) TYPE C,
POINT(12) TYPE C,
ATINN(10) TYPE N,
MANDT(3) TYPE C,
MDOCM(20) TYPE C,
POINT_IMRG(12) TYPE C,
IDATE TYPE D,
ITIME(24) TYPE C,
INVTS(11) TYPE N,
CNTRG(1) TYPE C,
MDTXT(40) TYPE C,
MLANG(1) TYPE C,
KZLTX(1) TYPE C,
READR(12) TYPE C,
ERDAT TYPE D,
ERUHR(24) TYPE C,
ERNAM(12) TYPE C,
AEDAT TYPE D,
AENAM(12) TYPE C,
LVORM(1) TYPE C,
GENER(1) TYPE C,
PRUEFLOS(12) TYPE N,
VORGLFNR(8) TYPE N,
MERKNR(4) TYPE N,
DETAILERG(8) TYPE N,
ROOTD(20) TYPE C,
TOLTY(2) TYPE C,
TOLID(8) TYPE N,
WOOBJ(22) TYPE C,
DOCAF(1) TYPE C,
READG TYPE F,
READGI(1) TYPE C,
RECDV TYPE F,
RECDVI(1) TYPE C,
RECDU(3) TYPE C,
CNTRR TYPE F,
CNTRRI(1) TYPE C,
CDIFF TYPE F,
CDIFFI(1) TYPE C,
IDIFF(1) TYPE C,
EXCHG(1) TYPE C,
TOTEX(1) TYPE C,
CODCT(1) TYPE C,
CODGR(8) TYPE C,
VLCOD(4) TYPE C,
CVERS(6) TYPE C,
PREST(1) TYPE C,
CANCL(1) TYPE C,
WOOB1(22) TYPE C,
PROBENR(6) TYPE N,
MBEWERTG(1) TYPE C,
INTVL(1) TYPE C,
IDAT1 TYPE D,
ITIM1(24) TYPE C,
TMSTP_BW(16) TYPE P DECIMALS 0,
LOGSYSTEM(10) TYPE C.
DATA: end of ITAB3.

data: append_flag(1) value ' ',
      cntbuf type i,
      delimleng type i,last_batch(1) value ' '.

CONSTANTS C_DF_VK(40) VALUE '820'.
CONSTANTS C_DI_GEN(40) VALUE '14.2.3.660'.
DATA WARN_MSG(50).


DATA: gv_directory     TYPE epsdirnam  VALUE '/var/load/xxx/UK/read/',
      gv_logsys        LIKE tbdlst-logsys.

start-of-selection.
* Logical system
  CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
    IMPORTING
      own_logical_system             = gv_logsys
    EXCEPTIONS
      own_logical_system_not_defined = 1
      OTHERS                         = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE 'E' NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    STOP.
  ENDIF.
  REPLACE 'xxx' IN out_dir WITH gv_logsys(3).
  REPLACE 'xxx' IN in_dir WITH gv_logsys(3).


  IF DOWNLOAD = 'S' OR
     DOWNLOAD = 'N' OR
     DOWNLOAD = 'Y'.
      .
  ELSE.
     DATA: m_xfer_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'data transfer method: ' DOWNLOAD
'. Regenerate the ABAP program and upload to this system.'
     INTO m_xfer_err_msg.
     MESSAGE  E240(S#) WITH m_xfer_err_msg.
  ENDIF.

  IF EXECMODE = 'B' OR
     EXECMODE = 'D'.
      .
  ELSE.
     DATA: m_exec_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'execution option: ' EXECMODE
'. Regenerate the ABAP program and upload to this system.'
     INTO m_exec_err_msg.
     MESSAGE  E240(S#) WITH m_exec_err_msg.
  ENDIF.

  IF DOWNLOAD = 'S'.
     PERFORM CONNECT_RFCDEST_TO_PROGID.
  ENDIF.



PERFORM FORM3.
last_batch = 'X'.
PERFORM FORM4.
FREE ITAB3.
  IF DOWNLOAD = 'S'.
     PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
  ENDIF.


end-of-selection.

CLEAR WARN_MSG.

IF NOT P_DF_VK IS INITIAL.
  IF P_DF_VK <> C_DF_VK.
     CONCATENATE '$$Warning$'
                 C_DF_VK
                 '$' INTO WARN_MSG.
  ENDIF.
ENDIF.
IF NOT P_DI_GEN IS INITIAL.
  IF P_DI_GEN <> C_DI_GEN.
     IF WARN_MSG IS INITIAL.
       CONCATENATE '$$Warning$$'
                   C_DI_GEN
                   INTO WARN_MSG.
     ELSE.
       CONCATENATE WARN_MSG
                   C_DI_GEN
                   INTO WARN_MSG.
     ENDIF.
  ENDIF.
ENDIF.

IF NOT WARN_MSG IS INITIAL.
  IF EXECMODE = 'D'.
    WRITE WARN_MSG.
    NEW-LINE.
  ELSE.
    MESSAGE S240(S#) with WARN_MSG.
  ENDIF.
ENDIF.


write  '* Program Complete *'.
write
 '(C)Copyright Business Objects S.A.  All rights reserved.'.

FORM FORM3.
DATA ALTMP1(22) TYPE C.
DATA ALTMP2 TYPE F.
DATA ALTMP3(12) TYPE C.
DATA ALTMP4(10) TYPE N.
DATA ALTMP5(3) TYPE C.
DATA ALTMP6(20) TYPE C.
DATA ALTMP7(12) TYPE C.
DATA ALTMP8 TYPE D.
DATA ALTMP9 TYPE T.
DATA ALTMP10(11) TYPE N.
DATA ALTMP11(1) TYPE C.
DATA ALTMP12(40) TYPE C.
DATA ALTMP13(1) TYPE C.
DATA ALTMP14(1) TYPE C.
DATA ALTMP15(12) TYPE C.
DATA ALTMP16 TYPE D.
DATA ALTMP17 TYPE T.
DATA ALTMP18(12) TYPE C.
DATA ALTMP19 TYPE D.
DATA ALTMP20(12) TYPE C.
DATA ALTMP21(1) TYPE C.
DATA ALTMP22(1) TYPE C.
DATA ALTMP23(12) TYPE N.
DATA ALTMP24(8) TYPE N.
DATA ALTMP25(4) TYPE N.
DATA ALTMP26(8) TYPE N.
DATA ALTMP27(20) TYPE C.
DATA ALTMP28(2) TYPE C.
DATA ALTMP29(8) TYPE N.
DATA ALTMP30(22) TYPE C.
DATA ALTMP31(1) TYPE C.
DATA ALTMP32 TYPE F.
DATA ALTMP33(1) TYPE C.
DATA ALTMP34 TYPE F.
DATA ALTMP35(1) TYPE C.
DATA ALTMP36(3) TYPE C.
DATA ALTMP37 TYPE F.
DATA ALTMP38(1) TYPE C.
DATA ALTMP39 TYPE F.
DATA ALTMP40(1) TYPE C.
DATA ALTMP41(1) TYPE C.
DATA ALTMP42(1) TYPE C.
DATA ALTMP43(1) TYPE C.
DATA ALTMP44(1) TYPE C.
DATA ALTMP45(8) TYPE C.
DATA ALTMP46(4) TYPE C.
DATA ALTMP47(6) TYPE C.
DATA ALTMP48(1) TYPE C.
DATA ALTMP49(1) TYPE C.
DATA ALTMP50(22) TYPE C.
DATA ALTMP51(6) TYPE N.
DATA ALTMP52(1) TYPE C.
DATA ALTMP53(1) TYPE C.
DATA ALTMP54 TYPE D.
DATA ALTMP55 TYPE T.
DATA ALTMP56(16) TYPE P DECIMALS 0.
DATA ALTMP57(10) TYPE C.

DATA IMPTT9MPOBJ LIKE IMPTT-MPOBJ.
DATA IMPTT9POINT LIKE IMPTT-POINT.
DATA IMPTT9ATINN LIKE IMPTT-ATINN.
DATA IMRG9MANDT LIKE IMRG-MANDT.
DATA IMRG9MDOCM LIKE IMRG-MDOCM.
DATA IMRG9POINT LIKE IMRG-POINT.
DATA IMRG9IDATE LIKE IMRG-IDATE.
DATA IMRG9ITIME LIKE IMRG-ITIME.
DATA IMRG9INVTS LIKE IMRG-INVTS.
DATA IMRG9CNTRG LIKE IMRG-CNTRG.
DATA IMRG9MDTXT LIKE IMRG-MDTXT.
DATA IMRG9MLANG LIKE IMRG-MLANG.
DATA IMRG9KZLTX LIKE IMRG-KZLTX.
DATA IMRG9READR LIKE IMRG-READR.
DATA IMRG9ERDAT LIKE IMRG-ERDAT.
DATA IMRG9ERUHR LIKE IMRG-ERUHR.
DATA IMRG9ERNAM LIKE IMRG-ERNAM.
DATA IMRG9AEDAT LIKE IMRG-AEDAT.
DATA IMRG9AENAM LIKE IMRG-AENAM.
DATA IMRG9LVORM LIKE IMRG-LVORM.
DATA IMRG9GENER LIKE IMRG-GENER.
DATA IMRG9PRUEFLOS LIKE IMRG-PRUEFLOS.
DATA IMRG9VORGLFNR LIKE IMRG-VORGLFNR.
DATA IMRG9MERKNR LIKE IMRG-MERKNR.
DATA IMRG9DETAILERG LIKE IMRG-DETAILERG.
DATA IMRG9ROOTD LIKE IMRG-ROOTD.
DATA IMRG9TOLTY LIKE IMRG-TOLTY.
DATA IMRG9TOLID LIKE IMRG-TOLID.
DATA IMRG9WOOBJ LIKE IMRG-WOOBJ.
DATA IMRG9DOCAF LIKE IMRG-DOCAF.
DATA IMRG9READG LIKE IMRG-READG.
DATA IMRG9READGI LIKE IMRG-READGI.
DATA IMRG9RECDV LIKE IMRG-RECDV.
DATA IMRG9RECDVI LIKE IMRG-RECDVI.
DATA IMRG9RECDU LIKE IMRG-RECDU.
DATA IMRG9CNTRR LIKE IMRG-CNTRR.
DATA IMRG9CNTRRI LIKE IMRG-CNTRRI.
DATA IMRG9CDIFF LIKE IMRG-CDIFF.
DATA IMRG9CDIFFI LIKE IMRG-CDIFFI.
DATA IMRG9IDIFF LIKE IMRG-IDIFF.
DATA IMRG9EXCHG LIKE IMRG-EXCHG.
DATA IMRG9TOTEX LIKE IMRG-TOTEX.
DATA IMRG9CODCT LIKE IMRG-CODCT.
DATA IMRG9CODGR LIKE IMRG-CODGR.
DATA IMRG9VLCOD LIKE IMRG-VLCOD.
DATA IMRG9CVERS LIKE IMRG-CVERS.
DATA IMRG9PREST LIKE IMRG-PREST.
DATA IMRG9CANCL LIKE IMRG-CANCL.
DATA IMRG9WOOB1 LIKE IMRG-WOOB1.
DATA IMRG9PROBENR LIKE IMRG-PROBENR.
DATA IMRG9MBEWERTG LIKE IMRG-MBEWERTG.
DATA IMRG9INTVL LIKE IMRG-INTVL.
DATA IMRG9IDAT1 LIKE IMRG-IDAT1.
DATA IMRG9ITIM1 LIKE IMRG-ITIM1.
DATA IMRG9TMSTP_BW LIKE IMRG-TMSTP_BW.
DATA IMRG9LOGSYSTEM LIKE IMRG-LOGSYSTEM.

ALTMP2 = ''.


SELECT
  IMPTT9~MPOBJ
  IMPTT9~POINT
  IMPTT9~ATINN
  IMRG9~MANDT
  IMRG9~MDOCM
  IMRG9~POINT
  IMRG9~IDATE
  IMRG9~ITIME
  IMRG9~INVTS
  IMRG9~CNTRG
  IMRG9~MDTXT
  IMRG9~MLANG
  IMRG9~KZLTX
  IMRG9~READR
  IMRG9~ERDAT
  IMRG9~ERUHR
  IMRG9~ERNAM
  IMRG9~AEDAT
  IMRG9~AENAM
  IMRG9~LVORM
  IMRG9~GENER
  IMRG9~PRUEFLOS
  IMRG9~VORGLFNR
  IMRG9~MERKNR
  IMRG9~DETAILERG
  IMRG9~ROOTD
  IMRG9~TOLTY
  IMRG9~TOLID
  IMRG9~WOOBJ
  IMRG9~DOCAF
  IMRG9~READG
  IMRG9~READGI
  IMRG9~RECDV
  IMRG9~RECDVI
  IMRG9~RECDU
  IMRG9~CNTRR
  IMRG9~CNTRRI
  IMRG9~CDIFF
  IMRG9~CDIFFI
  IMRG9~IDIFF
  IMRG9~EXCHG
  IMRG9~TOTEX
  IMRG9~CODCT
  IMRG9~CODGR
  IMRG9~VLCOD
  IMRG9~CVERS
  IMRG9~PREST
  IMRG9~CANCL
  IMRG9~WOOB1
  IMRG9~PROBENR
  IMRG9~MBEWERTG
  IMRG9~INTVL
  IMRG9~IDAT1
  IMRG9~ITIM1
  IMRG9~TMSTP_BW
  IMRG9~LOGSYSTEM
into (IMPTT9MPOBJ,
  IMPTT9POINT,
  IMPTT9ATINN,
  IMRG9MANDT,
  IMRG9MDOCM,
  IMRG9POINT,
  IMRG9IDATE,
  IMRG9ITIME,
  IMRG9INVTS,
  IMRG9CNTRG,
  IMRG9MDTXT,
  IMRG9MLANG,
  IMRG9KZLTX,
  IMRG9READR,
  IMRG9ERDAT,
  IMRG9ERUHR,
  IMRG9ERNAM,
  IMRG9AEDAT,
  IMRG9AENAM,
  IMRG9LVORM,
  IMRG9GENER,
  IMRG9PRUEFLOS,
  IMRG9VORGLFNR,
  IMRG9MERKNR,
  IMRG9DETAILERG,
  IMRG9ROOTD,
  IMRG9TOLTY,
  IMRG9TOLID,
  IMRG9WOOBJ,
  IMRG9DOCAF,
  IMRG9READG,
  IMRG9READGI,
  IMRG9RECDV,
  IMRG9RECDVI,
  IMRG9RECDU,
  IMRG9CNTRR,
  IMRG9CNTRRI,
  IMRG9CDIFF,
  IMRG9CDIFFI,
  IMRG9IDIFF,
  IMRG9EXCHG,
  IMRG9TOTEX,
  IMRG9CODCT,
  IMRG9CODGR,
  IMRG9VLCOD,
  IMRG9CVERS,
  IMRG9PREST,
  IMRG9CANCL,
  IMRG9WOOB1,
  IMRG9PROBENR,
  IMRG9MBEWERTG,
  IMRG9INTVL,
  IMRG9IDAT1,
  IMRG9ITIM1,
  IMRG9TMSTP_BW,
  IMRG9LOGSYSTEM)
FROM IMRG AS IMRG9
 INNER JOIN IMPTT AS IMPTT9
 ON ( IMRG9~POINT = IMPTT9~POINT )
WHERE ( ( IMRG9~CANCL <> 'X' )
 AND ( ( IMRG9~ERDAT >= $PARAM1 )
 OR ( IMRG9~AEDAT >= $PARAM1 ) ) ).
ALTMP1 = IMPTT9MPOBJ.
ALTMP3 = IMPTT9POINT.
ALTMP4 = IMPTT9ATINN.
ALTMP5 = IMRG9MANDT.
ALTMP6 = IMRG9MDOCM.
ALTMP7 = IMRG9POINT.
ALTMP8 = IMRG9IDATE.
ALTMP9 = IMRG9ITIME.
ALTMP10 = IMRG9INVTS.
ALTMP11 = IMRG9CNTRG.
ALTMP12 = IMRG9MDTXT.
ALTMP13 = IMRG9MLANG.
ALTMP14 = IMRG9KZLTX.
ALTMP15 = IMRG9READR.
ALTMP16 = IMRG9ERDAT.
ALTMP17 = IMRG9ERUHR.
ALTMP18 = IMRG9ERNAM.
ALTMP19 = IMRG9AEDAT.
ALTMP20 = IMRG9AENAM.
ALTMP21 = IMRG9LVORM.
ALTMP22 = IMRG9GENER.
ALTMP23 = IMRG9PRUEFLOS.
ALTMP24 = IMRG9VORGLFNR.
ALTMP25 = IMRG9MERKNR.
ALTMP26 = IMRG9DETAILERG.
ALTMP27 = IMRG9ROOTD.
ALTMP28 = IMRG9TOLTY.
ALTMP29 = IMRG9TOLID.
ALTMP30 = IMRG9WOOBJ.
ALTMP31 = IMRG9DOCAF.
ALTMP32 = IMRG9READG.
ALTMP33 = IMRG9READGI.
ALTMP34 = IMRG9RECDV.
ALTMP35 = IMRG9RECDVI.
ALTMP36 = IMRG9RECDU.
ALTMP37 = IMRG9CNTRR.
ALTMP38 = IMRG9CNTRRI.
ALTMP39 = IMRG9CDIFF.
ALTMP40 = IMRG9CDIFFI.
ALTMP41 = IMRG9IDIFF.
ALTMP42 = IMRG9EXCHG.
ALTMP43 = IMRG9TOTEX.
ALTMP44 = IMRG9CODCT.
ALTMP45 = IMRG9CODGR.
ALTMP46 = IMRG9VLCOD.
ALTMP47 = IMRG9CVERS.
ALTMP48 = IMRG9PREST.
ALTMP49 = IMRG9CANCL.
ALTMP50 = IMRG9WOOB1.
ALTMP51 = IMRG9PROBENR.
ALTMP52 = IMRG9MBEWERTG.
ALTMP53 = IMRG9INTVL.
ALTMP54 = IMRG9IDAT1.
ALTMP55 = IMRG9ITIM1.
ALTMP56 = IMRG9TMSTP_BW.
ALTMP57 = IMRG9LOGSYSTEM.
 move ALTMP1 to ITAB3-MPOBJ.
 move ALTMP2 to ITAB3-VKORG.
 move ALTMP3 to ITAB3-POINT.
 move ALTMP4 to ITAB3-ATINN.
 move ALTMP5 to ITAB3-MANDT.
 move ALTMP6 to ITAB3-MDOCM.
 move ALTMP7 to ITAB3-POINT_IMRG.
 move ALTMP8 to ITAB3-IDATE.
 move ALTMP9 to ITAB3-ITIME.
 move ALTMP10 to ITAB3-INVTS.
 move ALTMP11 to ITAB3-CNTRG.
 move ALTMP12 to ITAB3-MDTXT.
 move ALTMP13 to ITAB3-MLANG.
 move ALTMP14 to ITAB3-KZLTX.
 move ALTMP15 to ITAB3-READR.
 move ALTMP16 to ITAB3-ERDAT.
 move ALTMP17 to ITAB3-ERUHR.
 move ALTMP18 to ITAB3-ERNAM.
 move ALTMP19 to ITAB3-AEDAT.
 move ALTMP20 to ITAB3-AENAM.
 move ALTMP21 to ITAB3-LVORM.
 move ALTMP22 to ITAB3-GENER.
 move ALTMP23 to ITAB3-PRUEFLOS.
 move ALTMP24 to ITAB3-VORGLFNR.
 move ALTMP25 to ITAB3-MERKNR.
 move ALTMP26 to ITAB3-DETAILERG.
 move ALTMP27 to ITAB3-ROOTD.
 move ALTMP28 to ITAB3-TOLTY.
 move ALTMP29 to ITAB3-TOLID.
 move ALTMP30 to ITAB3-WOOBJ.
 move ALTMP31 to ITAB3-DOCAF.
 move ALTMP32 to ITAB3-READG.
 move ALTMP33 to ITAB3-READGI.
 move ALTMP34 to ITAB3-RECDV.
 move ALTMP35 to ITAB3-RECDVI.
 move ALTMP36 to ITAB3-RECDU.
 move ALTMP37 to ITAB3-CNTRR.
 move ALTMP38 to ITAB3-CNTRRI.
 move ALTMP39 to ITAB3-CDIFF.
 move ALTMP40 to ITAB3-CDIFFI.
 move ALTMP41 to ITAB3-IDIFF.
 move ALTMP42 to ITAB3-EXCHG.
 move ALTMP43 to ITAB3-TOTEX.
 move ALTMP44 to ITAB3-CODCT.
 move ALTMP45 to ITAB3-CODGR.
 move ALTMP46 to ITAB3-VLCOD.
 move ALTMP47 to ITAB3-CVERS.
 move ALTMP48 to ITAB3-PREST.
 move ALTMP49 to ITAB3-CANCL.
 move ALTMP50 to ITAB3-WOOB1.
 move ALTMP51 to ITAB3-PROBENR.
 move ALTMP52 to ITAB3-MBEWERTG.
 move ALTMP53 to ITAB3-INTVL.
 move ALTMP54 to ITAB3-IDAT1.
 move ALTMP55 to ITAB3-ITIM1.
 move ALTMP56 to ITAB3-TMSTP_BW.
 move ALTMP57 to ITAB3-LOGSYSTEM.
 append ITAB3.
 cntbuf = cntbuf + 1.
 if download = 'N'.
  if cntbuf > 5000.
    perform FORM4.
    clear cntbuf.
    refresh ITAB3.
    append_flag = 'A'.
  endif.
 endif.
 if download = 'S'.
  if cntbuf > P_PKGSZ.
    perform FORM4.
    clear cntbuf.
    refresh ITAB3.
  endif.
 endif.
ENDSELECT.
ENDFORM.

FORM FORM4.
data: outfile(512), ldfile(50).
ldfile = 'CTS_LZ_SAP_CP1_IMPTT_D'.
concatenate out_dir ldfile into outfile
  separated by '/'.
  IF DOWNLOAD = 'S'.
     DATA: error_message(700),mtext(800),iEOP(1).
     CALL FUNCTION P_SRVFM
          DESTINATION P_DEST
          KEEPING LOGICAL UNIT OF WORK
          EXPORTING
            EOS = last_batch
          IMPORTING
            EOP = iEOP
          TABLES
            E_TABLE = ITAB3
          EXCEPTIONS
            READ_ERROR = 1
            SYSTEM_FAILURE = 2
            MESSAGE error_message
            COMMUNICATION_FAILURE = 3
            MESSAGE error_message
            OTHERS = 4.

     IF sy-subrc ne 0.
        Case sy-subrc.
        when 1.
        CONCATENATE
        'Data Services read error. '
        'Check Data Services error log.'
        INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 2.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 3.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 4.
        MESSAGE  E240(S#) WITH
'Other SAP System Failure while calling DS remote function.'.
        endcase.
      ENDIF.
      IF iEOP = 'X'.
         PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
         LEAVE PROGRAM.
       ENDIF.
  ELSE.
data  dlmtlen type i value '1'.
data xdlmtlen type i value '1'.
data:
  ht(1) type c,
  xht(1) type x,
  conv type ref to cl_abap_conv_in_ce.
xht = '7F'.
conv = cl_abap_conv_in_ce=>create(
  encoding = '1100'
  input = xht
).
call method conv->read(
  exporting n    = xdlmtlen
  importing data = ht
            len = dlmtlen
).
data return_code type i.
 perform write_delimited_file
           tables   ITAB3
           using    outfile
                    append_flag
                    ht
                    dlmtlen
                    download
           changing return_code.

  case return_code.
    when 1.
      IF EXECMODE = 'D'.
        WRITE: /5 'No line selected'.
      ELSE.
        MESSAGE E047(S#).
      ENDIF.
    when 2.
      IF EXECMODE = 'D'.
        WRITE: /5 'Open File Error -- ', 25 OUTFILE.
      ELSE.
        MESSAGE  E084(E0) WITH OUTFILE.
      ENDIF.
    when 3.
      IF EXECMODE = 'D'.
        WRITE: /5 'Data exceed length limit (8192) '.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Data exceed length limit (8192) '.
      ENDIF.
    when 4.
      IF EXECMODE = 'D'.
        WRITE: /5 'Call function WS_DOWNLOAD error'.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Call function WS_DOWNLOAD error'.
      ENDIF.
  endcase.
 ENDIF.
ENDFORM.

FORM SUBSTRING USING SRC BEG LEN CHANGING RET.

DATA: VA1 TYPE I.
DATA: VA2 TYPE I.
DATA: VA3 TYPE I.

VA3 = STRLEN( SRC ).

IF  BEG = 0.   VA1 = 0.
ELSE.
  IF  BEG < 0.
    VA1 = VA3 + BEG.
    IF  VA1 < 0.   VA1 = 0.
    ENDIF.
  ELSE.          VA1 = BEG - 1.
  ENDIF.
ENDIF.

IF  LEN < 0.   VA2 = 0.
ELSE.          VA2 = VA3 - VA1.
ENDIF.

IF  VA2 > LEN. VA2 = LEN.
ENDIF.

IF  VA2 < 1.   MOVE ''           TO RET.
ELSE.          MOVE SRC+VA1(VA2) TO RET.
ENDIF.

ENDFORM.

form write_delimited_file
           tables   datatab
           using    file
                    append
                    delimit
                    dlength
                    dwnload
          changing rc.

  data: type1,
        appd(1),
        temp(32),
        time1(8),
        date1(10),
        output(8192),
        rcount type i,
        offset type i,
        tablen type i,
        maxlen type i value '8192'.

  data: begin of clientab occurs 0,
             output(8192),
          end of clientab.

  field-symbols: <f>.
  field-symbols <delim1>.
  data delim2(16).
  data l_filename type string.

  appd = append.
  if appd is not initial.
     appd = 'X'.
  endif.
  move file to l_filename.
  describe table datatab lines tablen.


  if dwnload = 'Y'.
     clear clientab. refresh clientab.
     rcount = 0.
  else.
     if appd = space.
   open dataset file for output in text mode ENCODING UTF-8.
     else.
    open dataset file for appending in text mode ENCODING UTF-8.

     endif.
     if sy-subrc <> 0.
         rc = 2. exit.
     endif.
  endif.

  loop at datatab.
    clear: tablen, offset, output.
    do.
      assign component sy-index of
         structure datatab to <f>.
      if sy-subrc <> 0. exit. endif.
      if sy-index > 1.
         assign delimit(dlength) TO <delim1> CASTING TYPE C.
         delim2 = <delim1>.
         write delim2(dlength) to output+offset(dlength).
         add dlength to offset.
      endif.

      describe field <f> type type1.

      if type1 = 'I' or type1 = 'N'.
          type1 = 'P'.
      endif.

      case type1.
        when 'D'.
          if <f> = '00000000'.
             <f> = ' '.
          else.
             move <f> to time1.
             assign time1 to <f>.
          endif.
        when 'F'.
          if <f> = '0.0'.
            temp = '0.0'.
          else.
             write <f> to temp exponent 0.
          endif.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
        when 'P'.
          if <f> < 0.
             write '-' to output+offset(1).
             add 1 to offset.
             <f> = <f> * ( -1 ).
          endif.
          move <f> to temp.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
      endcase.

      sy-fdpos = strlen( <f> ).

      tablen = offset + sy-fdpos.
      if tablen > maxlen.
         rc = 3. exit.
      endif.
      write <f> to output+offset(sy-fdpos).
      add sy-fdpos to offset.
    enddo.

    if dwnload = 'Y'.
       clientab-output = output.
       append clientab.
       rcount = rcount + 1.
       if rcount >= 50.
          SY-BATCH = SPACE.
          CALL FUNCTION 'GUI_DOWNLOAD'
            EXPORTING
              FILENAME = l_filename
              FILETYPE = 'ASC'
              CODEPAGE = '4110'
              APPEND   = appd
              WRITE_FIELD_SEPARATOR = 'X'
*            IMPORTING
*              FILELENGTH =
            TABLES
              DATA_TAB = clientab
            EXCEPTIONS
              OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
          clear clientab. refresh clientab.
          rcount = 0. appd = 'A'.
       endif.
    else.
       transfer output to file.
    endif.
  endloop.

  if dwnload = 'Y'.
       SY-BATCH = SPACE.
       CALL FUNCTION 'GUI_DOWNLOAD'
         EXPORTING
           FILENAME = l_filename
           FILETYPE = 'ASC'
              CODEPAGE = '4110'
           APPEND   = appd
           WRITE_FIELD_SEPARATOR = 'X'
*         IMPORTING
*           FILELENGTH =
         TABLES
           DATA_TAB = clientab
         EXCEPTIONS
           OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
  else.
       close dataset file.
  endif.
endform.

FORM CONNECT_RFCDEST_TO_PROGID.
 INCLUDE rfctypes.

 DATA: len     type i,
       R3NAME(4),
       SYSTNR(2),
       uid     LIKE SYS_UID,
       options LIKE RFCOPT,
       isunicode  TYPE n.

 DATA: NTOTAL     LIKE GWY_STRUCT-NOREG,
       GWY_GWHOST LIKE GWY_STRUCT-GWHOST,
       GWY_GWSERV LIKE GWY_STRUCT-GWSERV,
       GWY_TPNAME LIKE GWY_SYSTEM-TPNAME.

 TABLES: RFCSI.

* Check program ID
 IF P_PROGID = SPACE.							
    RAISE INVALID_PROGRAM_ID.
 ENDIF.

* determine if the RFC destination authority
  CALL FUNCTION 'RFC_READ_TCPIP_DESTINATION'
       EXPORTING destination = P_DEST
                 authority_check = 'X'
  IMPORTING rfcunicode = isunicode.

* Use current gateway if no info exits
 IF P_GWHOST = SPACE OR P_GWSERV = SPACE.
  CALL FUNCTION 'RFC_SYSTEM_INFO'
      IMPORTING
          RFCSI_EXPORT = RFCSI.

  len = strlen( rfcsi-rfcdest ) - 2.
  systnr = rfcsi-rfcdest+len.
  len = len - 1 - 3.
  r3name = rfcsi-rfcdest+len(3).
  len = len - 1.
  options-rfcgwhost = rfcsi-rfcdest(len).
  CONCATENATE 'sapgw' SYSTNR INTO options-rfcgwserv.
 ELSE.
   options-rfcgwhost = P_GWHOST.
   options-rfcgwserv = P_GWSERV.
 ENDIF.

* Parameters for GWY function call
  GWY_GWHOST = OPTIONS-RFCGWHOST.
  GWY_GWSERV = OPTIONS-RFCGWSERV.
  GWY_TPNAME = P_PROGID.

* Check gateway and server program registered
  CALL FUNCTION 'GWY_GET_NO_REG_PROGRAMS'
     EXPORTING
        GWHOST      = GWY_GWHOST
        GWSERV      = GWY_GWSERV
        TPNAME      = GWY_TPNAME
     IMPORTING
        NOREG_TOTAL = NTOTAL
     EXCEPTIONS
        OTHERS      = 1.

  IF sy-subrc NE 0.
     raise CONNECT_TO_GATEWAY_FAILED.
  ENDIF.

  IF NTOTAL = 0.
     raise SERVER_NOT_REGISTERED.
  ENDIF.

  IF NTOTAL GT 1.
     raise DUPLICATE_REG_PROGRAMS.
  ENDIF.

* build new connection to a registered server
  options-rfcexec   = gwy_tpname.
  options-rfcgwhost = gwy_gwhost.
  options-rfcgwserv = gwy_gwserv.
  options-rfchost   = '%%RFCSERVER%%'.
  IF P_SNC_ON = 'X'.
    options-rfcsnc  = 'X'.
  ENDIF.

  CALL 'RFCControl' ID 'CODE' FIELD 'O'
                    ID 'DESTINATION' FIELD P_DEST
                    ID 'TYPE' FIELD rfctype_external_tcp
                    ID 'OPTIONS' FIELD options.

  IF sy-subrc NE 0.
     RAISE CONNECT_TO_REG_SERVER_FAILED.
   ENDIF.

* and set exclusive mode to keep server owned
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
      EXPORTING  destination = P_DEST
                 exclusiv    = 'Y'
      EXCEPTIONS connect_to_reg_server_failed = 1
                 exclusiv_not_supported       = 2.

  IF SY-SUBRC NE 0.
     CASE SY-SUBRC.
          WHEN 1.
              RAISE CONNECT_TO_REG_SERVER_FAILED.
          WHEN 2.
              RAISE EXCLUSIV_NOT_SUPPORTED.
     ENDCASE.
  ENDIF.

ENDFORM.

FORM DISCONNECT_RFCDEST_FROM_PROGID.
* set exclusive mode to E to end the session
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
     EXPORTING
         destination = P_DEST
         exclusiv    = 'E'
     EXCEPTIONS
         connect_to_reg_server_failed = 1				
         exclusiv_not_supported       = 2.
ENDFORM.
