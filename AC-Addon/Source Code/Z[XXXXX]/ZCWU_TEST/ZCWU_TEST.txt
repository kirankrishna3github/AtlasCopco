*----------------------------------------------------------------------*
* PROGRAM ID    : ZCWU_TEST                                           *
* PROGRAM TITLE : Upload local file to DB                              *
* AUTHOR        : Johnny Wu                                            *
* DATE          : 29/01/2013                                           *
* DEVELOPMENT ID:                                                      *
*                                                                      *
* CHANGE REQUEST NUMBER:                                               *
*                                                                      *
* Program Description: Upload local file to DB                         *
*                                                                      *
*----------------------------------------------------------------------*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
*  DATE    | NAME     |TRANSPORT  | CR# and short Description          *
*----------------------------------------------------------------------*
*
*29/01/2013|Johnny Wu |CD1K974955 |CR2814: Initial version             *
*----------------------------------------------------------------------*

REPORT  zcwu_test NO STANDARD PAGE HEADING LINE-SIZE 255.
DATA: gt_lfile TYPE yse_t_lfile,                      "Local file name
      gt_message TYPE scr_strings.                    "Message table
CONSTANTS: c_on TYPE c VALUE 'X'.                     "Switch On

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-t01.
PARAMETERS: cb_upld TYPE c AS CHECKBOX DEFAULT c_on,  "Do upload
            cb_updt TYPE c AS CHECKBOX DEFAULT c_on.  "Do update
SELECTION-SCREEN END OF BLOCK b1.

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE text-t02.
PARAMETERS:
          p_appl TYPE yse_up_appl-appl OBLIGATORY,    "Application Type
          p_file(1024) TYPE c LOWER CASE.             "Local File Path
SELECTION-SCREEN END OF BLOCK b2.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.
* Get local file path
  PERFORM select_file.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_appl.
* F4-help Function Implementation
  PERFORM f4_appl.

AT SELECTION-SCREEN ON p_appl.
* Applicatin Type Check
  PERFORM check_appl.

START-OF-SELECTION.
  DATA: da(4) TYPE n,
        WA_NUMB TYPE YSE_SD_NUMB.

  DATA: lv_char18 TYPE char18.

  DATA: lv_kwmeng TYPE vbap-kwmeng.

  set COUNTRY 'CN'.
  lv_char18 = '1002.12'.
  lv_kwmeng = lv_char18.
  WRITE: lv_kwmeng to lv_char18.
  WRITE: 'first',lv_char18.
*  TRANSLATE lv_char18 USING ', '.
*  CONDENSE lv_char18 NO-GAPS.
*  CLEAR: lv_kwmeng.
*  lv_kwmeng = lv_char18 + lv_kwmeng.
*  WRITE: lv_char18,lv_kwmeng.

  WA_NUMB-MANDT = SY-MANDT.
  WA_NUMB-BSARK = 'GDS'.
  WA_NUMB-ZEXTNUM = 'A0000'.
  da = '9999'.
  DATA: lv_string TYPE char10,
        lv_lock_bsark TYPE vbkd-bsark.
  get PARAMETER ID 'YSE_BSARK_IND' FIELD lv_lock_bsark.
  IF lv_lock_bsark = 'GDS'.
    WAIT UP TO 10 SECONDS.
  ENDIF.
  set PARAMETER ID 'YSE_BSARK_IND' FIELD 'GDS'.
  INSERT YSE_SD_NUMB FROM WA_NUMB.
  WA_NUMB-ZEXTNUM = 'A0001'.
  UPDATE YSE_SD_NUMB FROM WA_NUMB.
  BREAK-POINT.
    WA_NUMB-ZEXTNUM = 'A0002'.
  UPDATE YSE_SD_NUMB FROM WA_NUMB.
  BREAK-POINT.
  set PARAMETER ID 'YSE_BSARK_IND' FIELD space.
  get PARAMETER ID 'YSE_BSARK_IND' FIELD lv_lock_bsark.
  BREAK-POINT.
** If the function of  'UPLOAD' is choosed
*  IF cb_upld = c_on.
**   Read local file into a internal table
*    PERFORM read_file.
**   Write entry to datebase table
*    PERFORM write_db.
*  ENDIF.
*
** If the function of  'UPDATE' is choosed
*  IF cb_updt = c_on.
**   Mass data updata according to upload data
*    PERFORM mass_update.
*  ENDIF.


END-OF-SELECTION.
* WRITE process result message
  PERFORM write_message.
  DATA: LDATA TYPE C.
  import p1 = ldata from MEMORY id 'yse_forward'.
*&---------------------------------------------------------------------*
*&      Form  select_file
*&---------------------------------------------------------------------*
*       Get local file path
*----------------------------------------------------------------------*
FORM select_file .
  DATA: lv_title  TYPE string,     "Referrence title
        lt_file   TYPE filetable,  "Internal table of dialog filenames
        ls_file   TYPE file_table, "Working area for IT_FILE,
        lv_rc     TYPE i.          "Return Code

  lv_title = text-001.
  CLEAR: lt_file[],
         ls_file.

  CALL METHOD cl_gui_frontend_services=>file_open_dialog
    EXPORTING
      window_title            = lv_title
    CHANGING
      file_table              = lt_file
      rc                      = lv_rc
    EXCEPTIONS
      file_open_dialog_failed = 1
      cntl_error              = 2
      error_no_gui            = 3
      not_supported_by_gui    = 4
      OTHERS                  = 5.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
  IF lv_rc = 1.
    READ TABLE lt_file INDEX 1 INTO ls_file.
    IF sy-subrc EQ 0.
      p_file = ls_file-filename.
    ENDIF.
  ENDIF.
ENDFORM.                    " select_file
*&---------------------------------------------------------------------*
*&      Form  READ_FILE
*&---------------------------------------------------------------------*
*       Read local file into a internal table
*----------------------------------------------------------------------*
FORM read_file .
  DATA: lv_filename TYPE string.

  lv_filename = p_file.
  PERFORM get_from_pres IN PROGRAM yam_common_routines
                                    TABLES  gt_lfile
                                    USING   lv_filename
                                            ycl_se_utility=>c_ft_asc
                                            ' '.
  IF gt_lfile IS NOT INITIAL.
    DELETE gt_lfile INDEX 1.
  ENDIF.

ENDFORM.                    " READ_FILE
*&---------------------------------------------------------------------*
*&      Form  WRITE_DB
*&---------------------------------------------------------------------*
*       Write entry to datebase table
*----------------------------------------------------------------------*
FORM write_db .

  DATA: lv_xml TYPE string,
        ls_up_file TYPE yse_up_file.

  IF gt_lfile IS INITIAL.
    MESSAGE w000(yse_sales_log) WITH 'No Input Data'(002).
  ELSE.
    CALL TRANSFORMATION yse_trans_file SOURCE lfile = gt_lfile RESULT XML lv_xml.
  ENDIF.

  CLEAR: gt_lfile[].
  CALL TRANSFORMATION yse_trans_file SOURCE XML lv_xml RESULT lfile = gt_lfile.
  CALL FUNCTION 'SYSTEM_UUID_CREATE'
    IMPORTING
      uuid = ls_up_file-guid.
* Prepare entry for insert
  ls_up_file-appl = p_appl.
  ls_up_file-create_date = sy-datum.
  ls_up_file-create_time = sy-uzeit.
  ls_up_file-create_by   = sy-uname.
  ls_up_file-xml = lv_xml.
  INSERT yse_up_file FROM ls_up_file.

  IF sy-subrc = 0.
    MESSAGE s000(yse_sales_log) WITH 'File uploaded successfully'(003)
                                     'for applicaiton'(004)
                                     p_appl.
  ENDIF.

ENDFORM.                    " WRITE_DB

*&---------------------------------------------------------------------*
*&      Form  f4_appl
*&---------------------------------------------------------------------*
*       F4-help Function Implementation
*----------------------------------------------------------------------*
FORM f4_appl .

  DATA: lt_appl TYPE TABLE OF yse_up_appl.
  DATA: lt_return TYPE TABLE OF ddshretval,
        ls_return TYPE ddshretval.

  SELECT * FROM yse_up_appl INTO TABLE lt_appl.       "#EC CI_SGLSELECT

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'APPL'
      dynpprog        = sy-repid
      dynprofield     = 'P_APPL'
      value_org       = 'S'
    TABLES
      value_tab       = lt_appl
      return_tab      = lt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3.
  IF sy-subrc = 0.
    READ TABLE lt_return INTO ls_return INDEX 1.
    p_appl = ls_return-fieldval.
  ENDIF.
ENDFORM.                    "f4_appl

*&---------------------------------------------------------------------*
*&      Form  CHECK_APPL
*&---------------------------------------------------------------------*
*       Applicatin Type Check
*----------------------------------------------------------------------*
FORM check_appl .
  DATA: lt_up_appl TYPE TABLE OF yse_up_appl.

  SELECT * FROM yse_up_appl INTO TABLE lt_up_appl
    WHERE appl = p_appl.                              "#EC CI_SGLSELECT

  IF sy-subrc <> 0 .
    MESSAGE e000(yse_sales_log) WITH 'for applicaiton'(004) p_appl
                                     ' does not exist!'(005).
  ENDIF.
ENDFORM.                    " CHECK_APPL
*&---------------------------------------------------------------------*
*&      Form  MASS_UPDATE
*&---------------------------------------------------------------------*
*       Mass data updata according to upload data
*----------------------------------------------------------------------*
FORM mass_update .
  DATA: lo_mass_update TYPE REF TO yse_cl_mass_update.

  CREATE OBJECT lo_mass_update
    EXPORTING
      iv_appl = p_appl.

  CALL METHOD lo_mass_update->update
    IMPORTING
      et_message = gt_message.
ENDFORM.                    " MASS_UPDATE
*&---------------------------------------------------------------------*
*&      Form  WRITE_MESSAGE
*&---------------------------------------------------------------------*
*       WRITE process result message
*----------------------------------------------------------------------*
FORM write_message .
  DATA: lv_text TYPE string.
  WRITE: 'Application:'(006), p_appl.
  LOOP AT gt_message INTO lv_text.
    WRITE: / lv_text.
  ENDLOOP.
ENDFORM.                    " WRITE_MESSAGE

*Text symbol text£º
*001:Select a file for upload
*002:No Input Data
*003:File uploaded successfully
*004:for applicaiton
*005: does not exist!
*006:Application:
*T01:Functions

*T02:Select Criterial
*Selection text£º
*CB_UPDT:        Update
*CB_UPLD:        Upload
*P_APPL:D       .
*P_FILE:        Local File
