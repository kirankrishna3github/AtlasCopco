report zal_abap message-id 26 line-size 255
no standard page heading.
* ZCP1_AFRU.
parameter download(1) default 'S' lower case. "N-svr,Y-clnt
parameter execmode(1) default 'B' lower case. "D-dlg,B-btch
parameter out_dir(48) default "output file dir
'/var/load/CP1/UK/read' lower case.
parameter in_dir(48) default "input file dir
'/var/load/CP1/UK/read' lower case.
parameter p_dest type rfcdes-rfcdest default
'NONE'.
parameter p_progid type rfcopt-rfcexec default
space.
parameter p_gwhost type rfcopt-rfcgwhost default
space.
parameter p_gwserv type rfcopt-rfcgwserv default
space.
parameter p_srvfm(30) default "Server Callback function
space.
parameter p_pkgsz type i default "Stream package size
5000.
parameter p_snc_on(1) default "X-on SPACE-off
space.

parameter $param1 type d.

parameter $param2 type d.

parameter p_df_vk(40) default "ABAP data flow object key
'' lower case.
parameter p_di_gen(40) default "DI version that generated ABAP
'' lower case.

*** Machine generated ABAP. Do not modify.            ***
*** (C)Copyright Business Objects S.A.  All rights reserved. ***
*
* Date Time:
*    07/18/17 17:30:16
* SAP used for generated this ABAP:
*    Release: 701
*    Host   : 10.25.3.26
*
* ABAP Dataflow Name:
*    DF_R3_CTS_LZ_SAP_CP1_AFRU_D
* ABAP Dataflow comments:
*  SAP Source : AFRU / AUFK / PMSDO
*  Delta load
* ABAP program name in SAP:
*  ZCP1_AFRU
* Generated ABAP file name:
*    //AIRSBEAP0512/D$/Data/SAPLogistics/VAL/ABAP/ZCP1_AFRU
tables pmsdo.
tables aufk.
tables afru.
tables zstc_sales_comp.

data: begin of itab5 occurs 0,
objnr(22) type c,
budat type d,
mandt(3) type c,
rueck(10) type n,
rmzhl(8) type n,
meinh(3) type c,
vkorg(4) type c,
aufnr(12) type c,
bemot(2) type c,
waers(5) type c,
arbid(8) type n,
ismne(3) type c,
ismnu(3) type c,
ismnw(16) type p decimals 1,
learr(6) type c,
isdd type d,
isdz type t,
stzhl(8) type n,
bemot_1(2) type c,
ersda type d,
laeda type d,
aueru(1) type c,
ltxa1(40) type c,
werks(4) type c,
grund(4) type c,
z_bukrs(4) type c,
z_vkorg(4) type c,
z_werks(4) type c,
z_ekorg(4) type c,
z_mamusercmpy(4) type c,
z_region(40) type c,
z_country(40) type c,
z_countrydscr(255) type c,
z_salescompany(40) type c,
z_salescmpdscr(255) type c.
data: end of itab5.

data: append_flag(1) value ' ',
      cntbuf type i,
      delimleng type i,last_batch(1) value ' '.

constants c_df_vk(40) value '796'.
constants c_di_gen(40) value '14.2.3.660'.
data warn_msg(50).


start-of-selection.


  if download = 'S' or
     download = 'N' or
     download = 'Y'.
    .
  else.
    data: m_xfer_err_msg(700).
    concatenate
'ABAP program does not recognize this new '
'data transfer method: ' download
'. Regenerate the ABAP program and upload to this system.'
    into m_xfer_err_msg.
    message  e240(s#) with m_xfer_err_msg.
  endif.

  if execmode = 'B' or
     execmode = 'D'.
    .
  else.
    data: m_exec_err_msg(700).
    concatenate
'ABAP program does not recognize this new '
'execution option: ' execmode
'. Regenerate the ABAP program and upload to this system.'
    into m_exec_err_msg.
    message  e240(s#) with m_exec_err_msg.
  endif.

  if download = 'S'.
    perform connect_rfcdest_to_progid.
  endif.



  perform form5.
  last_batch = 'X'.
  perform form6.
  free itab5.
  if download = 'S'.
    perform disconnect_rfcdest_from_progid.
  endif.


end-of-selection.

  clear warn_msg.

  if not p_df_vk is initial.
    if p_df_vk <> c_df_vk.
      concatenate '$$Warning$'
                  c_df_vk
                  '$' into warn_msg.
    endif.
  endif.
  if not p_di_gen is initial.
    if p_di_gen <> c_di_gen.
      if warn_msg is initial.
        concatenate '$$Warning$$'
                    c_di_gen
                    into warn_msg.
      else.
        concatenate warn_msg
                    c_di_gen
                    into warn_msg.
      endif.
    endif.
  endif.

  if not warn_msg is initial.
    if execmode = 'D'.
      write warn_msg.
      new-line.
    else.
      message s240(s#) with warn_msg.
    endif.
  endif.


  write  '* Program Complete *'.
  write  '(C)Copyright Business Objects S.A.  All rights reserved.'.

*&---------------------------------------------------------------------*
*&      Form  FORM5
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form form5.
  data altmp141(22) type c.
  data altmp142 type d.
  data altmp143(3) type c.
  data altmp144(10) type n.
  data altmp145(8) type n.
  data altmp146(3) type c.
  data altmp147(4) type c.
  data altmp148(12) type c.
  data altmp149(2) type c.
  data altmp150(5) type c.
  data altmp151(8) type n.
  data altmp152(3) type c.
  data altmp153(3) type c.
  data altmp154(16) type p decimals 1.
  data altmp155(6) type c.
  data altmp156 type d.
  data altmp157 type t.
  data altmp158(8) type n.
  data altmp159(2) type c.
  data altmp160 type d.
  data altmp161 type d.
  data altmp162(1) type c.
  data altmp163(40) type c.
  data altmp164(4) type c.
  data altmp165(4) type c.
  data altmp166(4) type c.
  data altmp167(4) type c.
  data altmp168(4) type c.
  data altmp169(4) type c.
  data altmp170(4) type c.
  data altmp171(40) type c.
  data altmp172(40) type c.
  data altmp173(255) type c.
  data altmp174(40) type c.
  data altmp175(255) type c.

  data pmsdo9objnr like pmsdo-objnr.
  data afru9budat like afru-budat.
  data afru9mandt like afru-mandt.
  data afru9rueck like afru-rueck.
  data afru9rmzhl like afru-rmzhl.
  data afru9meinh like afru-meinh.
  data pmsdo9vkorg like pmsdo-vkorg.
  data aufk9aufnr like aufk-aufnr.
  data aufk9bemot like aufk-bemot.
  data aufk9waers like aufk-waers.
  data afru9arbid like afru-arbid.
  data afru9ismne like afru-ismne.
  data afru9ismnu like afru-ismnu.
  data afru9ismnw like afru-ismnw.
  data afru9learr like afru-learr.
  data afru9isdd like afru-isdd.
  data afru9isdz like afru-isdz.
  data afru9stzhl like afru-stzhl.
  data afru9bemot like afru-bemot.
  data afru9ersda like afru-ersda.
  data afru9laeda like afru-laeda.
  data afru9aueru like afru-aueru.
  data afru9ltxa1 like afru-ltxa1.
  data afru9werks like afru-werks.
  data afru9grund like afru-grund.
  data zstc_sale_019bukrs like zstc_sales_comp-bukrs.
  data zstc_sale_019vkorg like zstc_sales_comp-vkorg.
  data zstc_sale_019werks like zstc_sales_comp-werks.
  data zstc_sale_019ekorg like zstc_sales_comp-ekorg.
  data zstc_sale_019mamusercmpy like zstc_sales_comp-mamusercmpy.
  data zstc_sale_019region like zstc_sales_comp-region.
  data zstc_sale_019country like zstc_sales_comp-country.
  data zstc_sale_019countrydscr like zstc_sales_comp-countrydscr.
  data zstc_sale_019salescompany like zstc_sales_comp-salescompany.
  data zstc_sale_019salescmpdscr like zstc_sales_comp-salescmpdscr.
  data aufk9idat3 like aufk-idat3.
  data afru9aufnr like afru-aufnr.
  data aufk9objnr like aufk-objnr.



  select
    pmsdo9~objnr
    afru9~budat
    afru9~mandt
    afru9~rueck
    afru9~rmzhl
    afru9~meinh
    pmsdo9~vkorg
    aufk9~aufnr
    aufk9~bemot
    aufk9~waers
    afru9~arbid
    afru9~ismne
    afru9~ismnu
    afru9~ismnw
    afru9~learr
    afru9~isdd
    afru9~isdz
    afru9~stzhl
    afru9~bemot
    afru9~ersda
    afru9~laeda
    afru9~aueru
    afru9~ltxa1
    afru9~werks
    afru9~grund
    zstc_sale_019~bukrs
    zstc_sale_019~vkorg
    zstc_sale_019~werks
    zstc_sale_019~ekorg
    zstc_sale_019~mamusercmpy
    zstc_sale_019~region
    zstc_sale_019~country
    zstc_sale_019~countrydscr
    zstc_sale_019~salescompany
    zstc_sale_019~salescmpdscr
    aufk9~idat3
    afru9~aufnr
    aufk9~objnr
  into (pmsdo9objnr,
    afru9budat,
    afru9mandt,
    afru9rueck,
    afru9rmzhl,
    afru9meinh,
    pmsdo9vkorg,
    aufk9aufnr,
    aufk9bemot,
    aufk9waers,
    afru9arbid,
    afru9ismne,
    afru9ismnu,
    afru9ismnw,
    afru9learr,
    afru9isdd,
    afru9isdz,
    afru9stzhl,
    afru9bemot,
    afru9ersda,
    afru9laeda,
    afru9aueru,
    afru9ltxa1,
    afru9werks,
    afru9grund,
    zstc_sale_019bukrs,
    zstc_sale_019vkorg,
    zstc_sale_019werks,
    zstc_sale_019ekorg,
    zstc_sale_019mamusercmpy,
    zstc_sale_019region,
    zstc_sale_019country,
    zstc_sale_019countrydscr,
    zstc_sale_019salescompany,
    zstc_sale_019salescmpdscr,
    aufk9idat3,
    afru9aufnr,
    aufk9objnr)
  from pmsdo as pmsdo9
   inner join aufk as aufk9
   on ( pmsdo9~objnr = aufk9~objnr )
   inner join zstc_sales_comp as zstc_sale_019
   on ( pmsdo9~vkorg = zstc_sale_019~vkorg )
   inner join afru as afru9
   on ( aufk9~aufnr = afru9~aufnr )
  where ( not ( ( pmsdo9~vkorg like '%04' ) )
   and ( not ( ( pmsdo9~vkorg like '%03' ) )
   and ( not ( ( pmsdo9~vkorg like '%02' ) )
   and ( ( aufk9~idat3 <= $param1 )
   or ( aufk9~idat3 >= $param2 ) ) ) ) ).
    altmp141 = pmsdo9objnr.
    altmp142 = afru9budat.
    altmp143 = afru9mandt.
    altmp144 = afru9rueck.
    altmp145 = afru9rmzhl.
    altmp146 = afru9meinh.
    altmp147 = pmsdo9vkorg.
    altmp148 = aufk9aufnr.
    altmp149 = aufk9bemot.
    altmp150 = aufk9waers.
    altmp151 = afru9arbid.
    altmp152 = afru9ismne.
    altmp153 = afru9ismnu.
    altmp154 = afru9ismnw.
    altmp155 = afru9learr.
    altmp156 = afru9isdd.
    altmp157 = afru9isdz.
    altmp158 = afru9stzhl.
    altmp159 = afru9bemot.
    altmp160 = afru9ersda.
    altmp161 = afru9laeda.
    altmp162 = afru9aueru.
    altmp163 = afru9ltxa1.
    altmp164 = afru9werks.
    altmp165 = afru9grund.
    altmp166 = zstc_sale_019bukrs.
    altmp167 = zstc_sale_019vkorg.
    altmp168 = zstc_sale_019werks.
    altmp169 = zstc_sale_019ekorg.
    altmp170 = zstc_sale_019mamusercmpy.
    altmp171 = zstc_sale_019region.
    altmp172 = zstc_sale_019country.
    altmp173 = zstc_sale_019countrydscr.
    altmp174 = zstc_sale_019salescompany.
    altmp175 = zstc_sale_019salescmpdscr.
    move altmp141 to itab5-objnr.
    move altmp142 to itab5-budat.
    move altmp143 to itab5-mandt.
    move altmp144 to itab5-rueck.
    move altmp145 to itab5-rmzhl.
    move altmp146 to itab5-meinh.
    move altmp147 to itab5-vkorg.
    move altmp148 to itab5-aufnr.
    move altmp149 to itab5-bemot.
    move altmp150 to itab5-waers.
    move altmp151 to itab5-arbid.
    move altmp152 to itab5-ismne.
    move altmp153 to itab5-ismnu.
    move altmp154 to itab5-ismnw.
    move altmp155 to itab5-learr.
    move altmp156 to itab5-isdd.
    move altmp157 to itab5-isdz.
    move altmp158 to itab5-stzhl.
    move altmp159 to itab5-bemot_1.
    move altmp160 to itab5-ersda.
    move altmp161 to itab5-laeda.
    move altmp162 to itab5-aueru.
    move altmp163 to itab5-ltxa1.
    move altmp164 to itab5-werks.
    move altmp165 to itab5-grund.
    move altmp166 to itab5-z_bukrs.
    move altmp167 to itab5-z_vkorg.
    move altmp168 to itab5-z_werks.
    move altmp169 to itab5-z_ekorg.
    move altmp170 to itab5-z_mamusercmpy.
    move altmp171 to itab5-z_region.
    move altmp172 to itab5-z_country.
    move altmp173 to itab5-z_countrydscr.
    move altmp174 to itab5-z_salescompany.
    move altmp175 to itab5-z_salescmpdscr.
    append itab5.
    cntbuf = cntbuf + 1.
    if download = 'N'.
      if cntbuf > 5000.
        perform form6.
        clear cntbuf.
        refresh itab5.
        append_flag = 'A'.
      endif.
    endif.
    if download = 'S'.
      if cntbuf > p_pkgsz.
        perform form6.
        clear cntbuf.
        refresh itab5.
      endif.
    endif.
  endselect.
endform.                    "FORM5

*&---------------------------------------------------------------------*
*&      Form  FORM6
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form form6.
  data: outfile(512), ldfile(50).
  ldfile = 'CTS_LZ_SAP_CP1_AFRU'.
  concatenate out_dir ldfile into outfile
    separated by '/'.
  if download = 'S'.
    data: error_message(700),mtext(800),ieop(1).
    call function p_srvfm
      destination p_dest
      keeping logical unit of work
      exporting
        eos                   = last_batch
      importing
        eop                   = ieop
      tables
        e_table               = itab5
      exceptions
        read_error            = 1
        system_failure        = 2  message error_message
        communication_failure = 3  message error_message
        others                = 4.

    if sy-subrc ne 0.
      case sy-subrc.
        when 1.
          concatenate
          'Data Services read error. '
          'Check Data Services error log.'
          into mtext.
          message  e240(s#) with mtext.
        when 2.
          concatenate
  'SAP System Failure while calling DS remote function: '
        error_message into mtext.
          message  e240(s#) with mtext.
        when 3.
          concatenate
  'SAP System Failure while calling DS remote function: '
        error_message into mtext.
          message  e240(s#) with mtext.
        when 4.
          message  e240(s#) with
  'Other SAP System Failure while calling DS remote function.'.
      endcase.
    endif.
    if ieop = 'X'.
      perform disconnect_rfcdest_from_progid.
      leave program.
    endif.
  else.
    data  dlmtlen type i value '1'.
    data xdlmtlen type i value '1'.
    data:
      ht(1) type c,
      xht(1) type x,
      conv type ref to cl_abap_conv_in_ce.
    xht = '7F'.
    conv = cl_abap_conv_in_ce=>create(
      encoding = '1100'
      input = xht
    ).
    call method conv->read(
      exporting n    = xdlmtlen
      importing data = ht
                len = dlmtlen
    ).
    data return_code type i.
    perform write_delimited_file
              tables   itab5
              using    outfile
                       append_flag
                       ht
                       dlmtlen
                       download
              changing return_code.

    case return_code.
      when 1.
        if execmode = 'D'.
          write: /5 'No line selected'.
        else.
          message e047(s#).
        endif.
      when 2.
        if execmode = 'D'.
          write: /5 'Open File Error -- ', 25 outfile.
        else.
          message  e084(e0) with outfile.
        endif.
      when 3.
        if execmode = 'D'.
          write: /5 'Data exceed length limit (8192) '.
        else.
          message  e240(s#) with
               'Data exceed length limit (8192) '.
        endif.
      when 4.
        if execmode = 'D'.
          write: /5 'Call function WS_DOWNLOAD error'.
        else.
          message  e240(s#) with
               'Call function WS_DOWNLOAD error'.
        endif.
    endcase.
  endif.
endform.                    "FORM6

*&---------------------------------------------------------------------*
*&      Form  SUBSTRING
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->SRC        text
*      -->BEG        text
*      -->LEN        text
*      <--RET        text
*----------------------------------------------------------------------*
form substring using src beg len changing ret.

  data: va1 type i.
  data: va2 type i.
  data: va3 type i.

  va3 = strlen( src ).

  if  beg = 0.
    va1 = 0.
  else.
    if  beg < 0.
      va1 = va3 + beg.
      if  va1 < 0.
        va1 = 0.
      endif.
    else.
      va1 = beg - 1.
    endif.
  endif.

  if  len < 0.
    va2 = 0.
  else.
    va2 = va3 - va1.
  endif.

  if  va2 > len.
    va2 = len.
  endif.

  if  va2 < 1.
    move ''           to ret.
  else.
    move src+va1(va2) to ret.
  endif.

endform.                    "SUBSTRING

*&---------------------------------------------------------------------*
*&      Form  write_delimited_file
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->DATATAB    text
*      -->FILE       text
*      -->APPEND     text
*      -->DELIMIT    text
*      -->DLENGTH    text
*      -->DWNLOAD    text
*      <--RC         text
*----------------------------------------------------------------------*
form write_delimited_file
           tables   datatab
           using    file
                    append
                    delimit
                    dlength
                    dwnload
          changing rc.

  data: type1,
        appd(1),
        temp(32),
        time1(8),
        date1(10),
        output(8192),
        rcount type i,
        offset type i,
        tablen type i,
        maxlen type i value '8192'.

  data: begin of clientab occurs 0,
             output(8192),
          end of clientab.

  field-symbols: <f>.
  field-symbols <delim1>.
  data delim2(16).
  data l_filename type string.

  appd = append.
  if appd is not initial.
    appd = 'X'.
  endif.
  move file to l_filename.
  describe table datatab lines tablen.


  if dwnload = 'Y'.
    clear clientab. refresh clientab.
    rcount = 0.
  else.
    if appd = space.
      open dataset file for output in text mode encoding utf-8.
    else.
      open dataset file for appending in text mode encoding utf-8.
    endif.
    if sy-subrc <> 0.
      rc = 2. exit.
    endif.
  endif.

  loop at datatab.
    clear: tablen, offset, output.
    do.
      assign component sy-index of
         structure datatab to <f>.
      if sy-subrc <> 0. exit. endif.
      if sy-index > 1.
        assign delimit(dlength) to <delim1> casting type c.
        delim2 = <delim1>.
        write delim2(dlength) to output+offset(dlength).
        add dlength to offset.
      endif.

      describe field <f> type type1.

      if type1 = 'I' or type1 = 'N'.
        type1 = 'P'.
      endif.

      case type1.
        when 'D'.
          if <f> = '00000000'.
            <f> = ' '.
          else.
            move <f> to time1.
            assign time1 to <f>.
          endif.
        when 'F'.
          if <f> = '0.0'.
            temp = '0.0'.
          else.
            write <f> to temp exponent 0.
          endif.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
        when 'P'.
          if <f> < 0.
            write '-' to output+offset(1).
            add 1 to offset.
            <f> = <f> * ( -1 ).
          endif.
          move <f> to temp.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
      endcase.

      sy-fdpos = strlen( <f> ).

      tablen = offset + sy-fdpos.
      if tablen > maxlen.
        rc = 3. exit.
      endif.
      write <f> to output+offset(sy-fdpos).
      add sy-fdpos to offset.
    enddo.

    if dwnload = 'Y'.
      clientab-output = output.
      append clientab.
      rcount = rcount + 1.
      if rcount >= 50.
        sy-batch = space.
        call function 'GUI_DOWNLOAD'
          exporting
            filename = l_filename
            filetype = 'ASC'
            codepage = '4110'
            append   = appd
            write_field_separator = 'X'
*            IMPORTING
*              FILELENGTH =
          tables
            data_tab = clientab
          exceptions
            others = 1.
        if sy-subrc <> 0.
          rc = 4.
        endif.
        clear clientab. refresh clientab.
        rcount = 0. appd = 'A'.
      endif.
    else.
      transfer output to file.
    endif.
  endloop.

  if dwnload = 'Y'.
    sy-batch = space.
    call function 'GUI_DOWNLOAD'
      exporting
        filename = l_filename
        filetype = 'ASC'
           codepage = '4110'
        append   = appd
        write_field_separator = 'X'
*         IMPORTING
*           FILELENGTH =
      tables
        data_tab = clientab
      exceptions
        others = 1.
    if sy-subrc <> 0.
      rc = 4.
    endif.
  else.
    close dataset file.
  endif.
endform.                    "write_delimited_file

*&---------------------------------------------------------------------*
*&      Form  CONNECT_RFCDEST_TO_PROGID
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form connect_rfcdest_to_progid.
  include rfctypes.

  data: len     type i,
        r3name(4),
        systnr(2),
        uid     like sys_uid,
        options like rfcopt,
        isunicode  type n.

  data: ntotal     like gwy_struct-noreg,
        gwy_gwhost like gwy_struct-gwhost,
        gwy_gwserv like gwy_struct-gwserv,
        gwy_tpname like gwy_system-tpname.

  tables: rfcsi.

* Check program ID
  if p_progid = space.
    raise invalid_program_id.
  endif.

* determine if the RFC destination authority
  call function 'RFC_READ_TCPIP_DESTINATION'
    exporting
      destination     = p_dest
      authority_check = 'X'
    importing
      rfcunicode      = isunicode.

* Use current gateway if no info exits
  if p_gwhost = space or p_gwserv = space.
    call function 'RFC_SYSTEM_INFO'
      importing
        rfcsi_export = rfcsi.

    len = strlen( rfcsi-rfcdest ) - 2.
    systnr = rfcsi-rfcdest+len.
    len = len - 1 - 3.
    r3name = rfcsi-rfcdest+len(3).
    len = len - 1.
    options-rfcgwhost = rfcsi-rfcdest(len).
    concatenate 'sapgw' systnr into options-rfcgwserv.
  else.
    options-rfcgwhost = p_gwhost.
    options-rfcgwserv = p_gwserv.
  endif.

* Parameters for GWY function call
  gwy_gwhost = options-rfcgwhost.
  gwy_gwserv = options-rfcgwserv.
  gwy_tpname = p_progid.

* Check gateway and server program registered
  call function 'GWY_GET_NO_REG_PROGRAMS'
    exporting
      gwhost      = gwy_gwhost
      gwserv      = gwy_gwserv
      tpname      = gwy_tpname
    importing
      noreg_total = ntotal
    exceptions
      others      = 1.

  if sy-subrc ne 0.
    raise connect_to_gateway_failed.
  endif.

  if ntotal = 0.
    raise server_not_registered.
  endif.

  if ntotal gt 1.
    raise duplicate_reg_programs.
  endif.

* build new connection to a registered server
  options-rfcexec   = gwy_tpname.
  options-rfcgwhost = gwy_gwhost.
  options-rfcgwserv = gwy_gwserv.
  options-rfchost   = '%%RFCSERVER%%'.
  if p_snc_on = 'X'.
    options-rfcsnc  = 'X'.
  endif.

  call 'RFCControl' id 'CODE' field 'O'
                    id 'DESTINATION' field p_dest
                    id 'TYPE' field rfctype_external_tcp
                    id 'OPTIONS' field options.

  if sy-subrc ne 0.
    raise connect_to_reg_server_failed.
  endif.

* and set exclusive mode to keep server owned
  call function 'SYSTEM_SET_REG_SERVER_PROPERTY'
    exporting
      destination                  = p_dest
      exclusiv                     = 'Y'
    exceptions
      connect_to_reg_server_failed = 1
      exclusiv_not_supported       = 2.

  if sy-subrc ne 0.
    case sy-subrc.
      when 1.
        raise connect_to_reg_server_failed.
      when 2.
        raise exclusiv_not_supported.
    endcase.
  endif.

endform.                    "CONNECT_RFCDEST_TO_PROGID

*&---------------------------------------------------------------------*
*&      Form  DISCONNECT_RFCDEST_FROM_PROGID
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form disconnect_rfcdest_from_progid.
* set exclusive mode to E to end the session
  call function 'SYSTEM_SET_REG_SERVER_PROPERTY'
    exporting
      destination                  = p_dest
      exclusiv                     = 'E'
    exceptions
      connect_to_reg_server_failed = 1
      exclusiv_not_supported       = 2.
endform.                    "DISCONNECT_RFCDEST_FROM_PROGID
