REPORT ZAL_ABAP message-id 26 line-size 255
no standard page heading.
* ZCP1_MSEG3_IM.
PARAMETER DOWNLOAD(1) DEFAULT 'S' lower case. "N-svr,Y-clnt
PARAMETER EXECMODE(1) DEFAULT 'B' lower case. "D-dlg,B-btch
PARAMETER OUT_DIR(48) DEFAULT "output file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER IN_DIR(48) DEFAULT "input file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER P_DEST TYPE RFCDES-RFCDEST DEFAULT
'NONE'.
PARAMETER P_PROGID TYPE RFCOPT-RFCEXEC DEFAULT
SPACE.
PARAMETER P_GWHOST TYPE RFCOPT-RFCGWHOST DEFAULT
SPACE.
PARAMETER P_GWSERV TYPE RFCOPT-RFCGWSERV DEFAULT
SPACE.
PARAMETER P_SRVFM(30) DEFAULT "Server Callback function
SPACE.
PARAMETER P_PKGSZ TYPE I DEFAULT "Stream package size
5000.
PARAMETER P_SNC_ON(1) DEFAULT "X-on SPACE-off
SPACE.

PARAMETER P_DF_VK(40) DEFAULT "ABAP data flow object key
'' lower case.
PARAMETER P_DI_GEN(40) DEFAULT "DI version that generated ABAP
'' lower case.

*** Machine generated ABAP. Do not modify.            ***
*** (C)Copyright Business Objects S.A.  All rights reserved. ***
*
* Date Time:
*    04/25/16 06:41:38
* SAP used for generated this ABAP:
*    Release: 701
*    Host   : 10.25.3.82
*
* ABAP Dataflow Name:
*    DF_R3_CTS_LZ_SAP_CP1_MSEGSER03_D_IM23351
* ABAP Dataflow comments:
*  SAP Source : MSEG / AUFK / PMSDO /SER03 / OBJK / MKPF
*  (initial load)
* ABAP program name in SAP:
*  ZCP1_MSEG3_IM
* Generated ABAP file name:
*    //AIRSBEAP0512/D$/Data/SAPLogistics/VAL/ABAP/ZCP1_MSEG3_IM
TABLES PMSDO.
TABLES AUFK.
TABLES MSEG.
TABLES MKPF.
TABLES ZSTC_SALES_COMP.
TABLES SER03.
TABLES OBJK.

DATA: begin of ITAB6 occurs 0,
OBJNR(22) TYPE C,
MANDT(3) TYPE C,
VKORG(4) TYPE C,
AUFNR(12) TYPE C,
BEMOT(2) TYPE C,
WAERS(5) TYPE C,
BEMOT_1(2) TYPE C,
SHKZG(1) TYPE C,
BUDAT TYPE D,
BUKRS(4) TYPE C,
LIFNR(10) TYPE C,
PRCTR(10) TYPE C,
AUFNR_1(12) TYPE C,
MATNR(18) TYPE C,
MBLNR(10) TYPE C,
MJAHR(4) TYPE N,
ZEILE(4) TYPE N,
BWART(3) TYPE C,
WERKS(4) TYPE C,
LGORT(4) TYPE C,
MENGE(16) TYPE P DECIMALS 3,
MEINS(3) TYPE C,
SGTXT(50) TYPE C,
BLDAT TYPE D,
Z_BUKRS(4) TYPE C,
Z_VKORG(4) TYPE C,
Z_WERKS(4) TYPE C,
Z_EKORG(4) TYPE C,
Z_MAMUSERCMPY(4) TYPE C,
Z_REGION(40) TYPE C,
Z_COUNTRY(40) TYPE C,
Z_COUNTRYDSCR(255) TYPE C,
Z_SALESCOMPANY(40) TYPE C,
Z_SALESCMPDSCR(255) TYPE C,
CPUDT TYPE D,
CPUTM TYPE T.
DATA: end of ITAB6.

DATA: begin of ITAB8 occurs 0,
OBKNR TYPE I,
OBJNR(22) TYPE C,
MANDT(3) TYPE C,
VKORG(4) TYPE C,
AUFNR(12) TYPE C,
BEMOT(2) TYPE C,
WAERS(5) TYPE C,
BEMOT_1(2) TYPE C,
SHKZG(1) TYPE C,
BUDAT TYPE D,
BUKRS(4) TYPE C,
LIFNR(10) TYPE C,
PRCTR(10) TYPE C,
AUFNR_1(12) TYPE C,
MATNR(18) TYPE C,
MBLNR(10) TYPE C,
MJAHR(4) TYPE N,
ZEILE(4) TYPE N,
BWART(3) TYPE C,
WERKS(4) TYPE C,
LGORT(4) TYPE C,
MENGE(16) TYPE P DECIMALS 3,
MEINS(3) TYPE C,
SGTXT(50) TYPE C,
BLDAT TYPE D,
Z_BUKRS(4) TYPE C,
Z_VKORG(4) TYPE C,
Z_WERKS(4) TYPE C,
Z_EKORG(4) TYPE C,
Z_MAMUSERCMPY(4) TYPE C,
Z_REGION(40) TYPE C,
Z_COUNTRY(40) TYPE C,
Z_COUNTRYDSCR(255) TYPE C,
Z_SALESCOMPANY(40) TYPE C,
Z_SALESCMPDSCR(255) TYPE C,
CPUDT TYPE D,
CPUTM TYPE T.
DATA: end of ITAB8.

DATA: begin of ITAB10 occurs 0,
OBKNR TYPE I,
SERNR(18) TYPE C,
EQUNR(18) TYPE C,
OBJNR(22) TYPE C,
MANDT(3) TYPE C,
VKORG(4) TYPE C,
AUFNR(12) TYPE C,
BEMOT(2) TYPE C,
WAERS(5) TYPE C,
BEMOT_1(2) TYPE C,
SHKZG(1) TYPE C,
BUDAT TYPE D,
BUKRS(4) TYPE C,
LIFNR(10) TYPE C,
PRCTR(10) TYPE C,
AUFNR_1(12) TYPE C,
MATNR(18) TYPE C,
MBLNR(10) TYPE C,
MJAHR(4) TYPE N,
ZEILE(4) TYPE N,
BWART(3) TYPE C,
WERKS(4) TYPE C,
LGORT(4) TYPE C,
MENGE(16) TYPE P DECIMALS 3,
MEINS(3) TYPE C,
SGTXT(50) TYPE C,
BLDAT TYPE D,
Z_BUKRS(4) TYPE C,
Z_VKORG(4) TYPE C,
Z_WERKS(4) TYPE C,
Z_EKORG(4) TYPE C,
Z_MAMUSERCMPY(4) TYPE C,
Z_REGION(40) TYPE C,
Z_COUNTRY(40) TYPE C,
Z_COUNTRYDSCR(255) TYPE C,
Z_SALESCOMPANY(40) TYPE C,
Z_SALESCMPDSCR(255) TYPE C,
CPUDT TYPE D,
CPUTM TYPE T.
DATA: end of ITAB10.

DATA: begin of ITAB11 occurs 0,
OBKNR TYPE I,
SERNR(18) TYPE C,
EQUNR(18) TYPE C,
OBJNR(22) TYPE C,
MANDT(3) TYPE C,
VKORG(4) TYPE C,
AUFNR(12) TYPE C,
BEMOT(2) TYPE C,
WAERS(5) TYPE C,
BEMOT_1(2) TYPE C,
SHKZG(1) TYPE C,
BUDAT TYPE D,
BUKRS(4) TYPE C,
LIFNR(10) TYPE C,
PRCTR(10) TYPE C,
AUFNR_1(12) TYPE C,
MATNR(18) TYPE C,
MBLNR(10) TYPE C,
MJAHR(4) TYPE N,
ZEILE(4) TYPE N,
BWART(3) TYPE C,
WERKS(4) TYPE C,
LGORT(4) TYPE C,
MENGE(16) TYPE P DECIMALS 3,
MEINS(3) TYPE C,
SGTXT(50) TYPE C,
BLDAT TYPE D,
Z_BUKRS(4) TYPE C,
Z_VKORG(4) TYPE C,
Z_WERKS(4) TYPE C,
Z_EKORG(4) TYPE C,
Z_MAMUSERCMPY(4) TYPE C,
Z_REGION(40) TYPE C,
Z_COUNTRY(40) TYPE C,
Z_COUNTRYDSCR(255) TYPE C,
Z_SALESCOMPANY(40) TYPE C,
Z_SALESCMPDSCR(255) TYPE C,
CPUDT TYPE D,
CPUTM TYPE T.
DATA: end of ITAB11.

data: append_flag(1) value ' ',
      cntbuf type i,
      delimleng type i,last_batch(1) value ' '.

CONSTANTS C_DF_VK(40) VALUE '2516'.
CONSTANTS C_DI_GEN(40) VALUE '14.2.3.660'.
DATA WARN_MSG(50).


DATA: gv_directory     TYPE epsdirnam  VALUE '/var/load/xxx/UK/read/',
      gv_logsys        LIKE tbdlst-logsys.

start-of-selection.
* Logical system
  CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
    IMPORTING
      own_logical_system             = gv_logsys
    EXCEPTIONS
      own_logical_system_not_defined = 1
      OTHERS                         = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE 'E' NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    STOP.
  ENDIF.
  REPLACE 'xxx' IN out_dir WITH gv_logsys(3).
  REPLACE 'xxx' IN in_dir WITH gv_logsys(3).


  IF DOWNLOAD = 'S' OR
     DOWNLOAD = 'N' OR
     DOWNLOAD = 'Y'.
      .
  ELSE.
     DATA: m_xfer_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'data transfer method: ' DOWNLOAD
'. Regenerate the ABAP program and upload to this system.'
     INTO m_xfer_err_msg.
     MESSAGE  E240(S#) WITH m_xfer_err_msg.
  ENDIF.

  IF EXECMODE = 'B' OR
     EXECMODE = 'D'.
      .
  ELSE.
     DATA: m_exec_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'execution option: ' EXECMODE
'. Regenerate the ABAP program and upload to this system.'
     INTO m_exec_err_msg.
     MESSAGE  E240(S#) WITH m_exec_err_msg.
  ENDIF.

  IF DOWNLOAD = 'S'.
     PERFORM CONNECT_RFCDEST_TO_PROGID.
  ENDIF.



PERFORM FORM6.
PERFORM FORM8.
FREE ITAB6.
PERFORM FORM10.
FREE ITAB8.
PERFORM FORM11.
FREE ITAB10.
last_batch = 'X'.
PERFORM FORM12.
FREE ITAB11.
  IF DOWNLOAD = 'S'.
     PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
  ENDIF.


end-of-selection.

CLEAR WARN_MSG.

IF NOT P_DF_VK IS INITIAL.
  IF P_DF_VK <> C_DF_VK.
     CONCATENATE '$$Warning$'
                 C_DF_VK
                 '$' INTO WARN_MSG.
  ENDIF.
ENDIF.
IF NOT P_DI_GEN IS INITIAL.
  IF P_DI_GEN <> C_DI_GEN.
     IF WARN_MSG IS INITIAL.
       CONCATENATE '$$Warning$$'
                   C_DI_GEN
                   INTO WARN_MSG.
     ELSE.
       CONCATENATE WARN_MSG
                   C_DI_GEN
                   INTO WARN_MSG.
     ENDIF.
  ENDIF.
ENDIF.

IF NOT WARN_MSG IS INITIAL.
  IF EXECMODE = 'D'.
    WRITE WARN_MSG.
    NEW-LINE.
  ELSE.
    MESSAGE S240(S#) with WARN_MSG.
  ENDIF.
ENDIF.


write  '* Program Complete *'.
write  '(C)Copyright Business Objects S.A.  All rights reserved.'.

FORM FORM6.
STATICS rowCount TYPE i VALUE 0.
DATA ALTMP766(12) TYPE C.
DATA ALTMP767(12) TYPE C.
DATA ALTMP768(22) TYPE C.
DATA ALTMP769(3) TYPE C.
DATA ALTMP770(4) TYPE C.
DATA ALTMP771(12) TYPE C.
DATA ALTMP772(2) TYPE C.
DATA ALTMP773(5) TYPE C.
DATA ALTMP774(2) TYPE C.
DATA ALTMP775(1) TYPE C.
DATA ALTMP776 TYPE D.
DATA ALTMP777(4) TYPE C.
DATA ALTMP778(10) TYPE C.
DATA ALTMP779(10) TYPE C.
DATA ALTMP780(12) TYPE C.
DATA ALTMP781(18) TYPE C.
DATA ALTMP782(10) TYPE C.
DATA ALTMP783(4) TYPE N.
DATA ALTMP784(4) TYPE N.
DATA ALTMP785(3) TYPE C.
DATA ALTMP786(4) TYPE C.
DATA ALTMP787(4) TYPE C.
DATA ALTMP788(16) TYPE P DECIMALS 3.
DATA ALTMP789(3) TYPE C.
DATA ALTMP790(50) TYPE C.
DATA ALTMP791 TYPE D.
DATA ALTMP792(4) TYPE C.
DATA ALTMP793(4) TYPE C.
DATA ALTMP794(4) TYPE C.
DATA ALTMP795(4) TYPE C.
DATA ALTMP796(4) TYPE C.
DATA ALTMP797(40) TYPE C.
DATA ALTMP798(40) TYPE C.
DATA ALTMP799(255) TYPE C.
DATA ALTMP800(40) TYPE C.
DATA ALTMP801(255) TYPE C.
DATA ALTMP802 TYPE D.
DATA ALTMP803 TYPE T.

DATA PMSDO9OBJNR LIKE PMSDO-OBJNR.
DATA MSEG9MANDT LIKE MSEG-MANDT.
DATA PMSDO9VKORG LIKE PMSDO-VKORG.
DATA AUFK9AUFNR LIKE AUFK-AUFNR.
DATA AUFK9BEMOT LIKE AUFK-BEMOT.
DATA AUFK9WAERS LIKE AUFK-WAERS.
DATA MSEG9BEMOT LIKE MSEG-BEMOT.
DATA MSEG9SHKZG LIKE MSEG-SHKZG.
DATA MKPF9BUDAT LIKE MKPF-BUDAT.
DATA MSEG9BUKRS LIKE MSEG-BUKRS.
DATA MSEG9LIFNR LIKE MSEG-LIFNR.
DATA MSEG9PRCTR LIKE MSEG-PRCTR.
DATA MSEG9AUFNR LIKE MSEG-AUFNR.
DATA MSEG9MATNR LIKE MSEG-MATNR.
DATA MSEG9MBLNR LIKE MSEG-MBLNR.
DATA MSEG9MJAHR LIKE MSEG-MJAHR.
DATA MSEG9ZEILE LIKE MSEG-ZEILE.
DATA MSEG9BWART LIKE MSEG-BWART.
DATA MSEG9WERKS LIKE MSEG-WERKS.
DATA MSEG9LGORT LIKE MSEG-LGORT.
DATA MSEG9MENGE LIKE MSEG-MENGE.
DATA MSEG9MEINS LIKE MSEG-MEINS.
DATA MSEG9SGTXT LIKE MSEG-SGTXT.
DATA MKPF9BLDAT LIKE MKPF-BLDAT.
DATA ZSTC_SALE_019BUKRS LIKE ZSTC_SALES_COMP-BUKRS.
DATA ZSTC_SALE_019VKORG LIKE ZSTC_SALES_COMP-VKORG.
DATA ZSTC_SALE_019WERKS LIKE ZSTC_SALES_COMP-WERKS.
DATA ZSTC_SALE_019EKORG LIKE ZSTC_SALES_COMP-EKORG.
DATA ZSTC_SALE_019MAMUSERCMPY LIKE ZSTC_SALES_COMP-MAMUSERCMPY.
DATA ZSTC_SALE_019REGION LIKE ZSTC_SALES_COMP-REGION.
DATA ZSTC_SALE_019COUNTRY LIKE ZSTC_SALES_COMP-COUNTRY.
DATA ZSTC_SALE_019COUNTRYDSCR LIKE ZSTC_SALES_COMP-COUNTRYDSCR.
DATA ZSTC_SALE_019SALESCOMPANY LIKE ZSTC_SALES_COMP-SALESCOMPANY.
DATA ZSTC_SALE_019SALESCMPDSCR LIKE ZSTC_SALES_COMP-SALESCMPDSCR.
DATA MKPF9CPUDT LIKE MKPF-CPUDT.
DATA MKPF9CPUTM LIKE MKPF-CPUTM.
DATA MKPF9MBLNR LIKE MKPF-MBLNR.
DATA MKPF9MJAHR LIKE MKPF-MJAHR.
DATA AUFK9OBJNR LIKE AUFK-OBJNR.



SELECT
  PMSDO9~OBJNR
  MSEG9~MANDT
  PMSDO9~VKORG
  AUFK9~AUFNR
  AUFK9~BEMOT
  AUFK9~WAERS
  MSEG9~BEMOT
  MSEG9~SHKZG
  MKPF9~BUDAT
  MSEG9~BUKRS
  MSEG9~LIFNR
  MSEG9~PRCTR
  MSEG9~AUFNR
  MSEG9~MATNR
  MSEG9~MBLNR
  MSEG9~MJAHR
  MSEG9~ZEILE
  MSEG9~BWART
  MSEG9~WERKS
  MSEG9~LGORT
  MSEG9~MENGE
  MSEG9~MEINS
  MSEG9~SGTXT
  MKPF9~BLDAT
  ZSTC_SALE_019~BUKRS
  ZSTC_SALE_019~VKORG
  ZSTC_SALE_019~WERKS
  ZSTC_SALE_019~EKORG
  ZSTC_SALE_019~MAMUSERCMPY
  ZSTC_SALE_019~REGION
  ZSTC_SALE_019~COUNTRY
  ZSTC_SALE_019~COUNTRYDSCR
  ZSTC_SALE_019~SALESCOMPANY
  ZSTC_SALE_019~SALESCMPDSCR
  MKPF9~CPUDT
  MKPF9~CPUTM
  MKPF9~MBLNR
  MKPF9~MJAHR
  AUFK9~OBJNR
into (PMSDO9OBJNR,
  MSEG9MANDT,
  PMSDO9VKORG,
  AUFK9AUFNR,
  AUFK9BEMOT,
  AUFK9WAERS,
  MSEG9BEMOT,
  MSEG9SHKZG,
  MKPF9BUDAT,
  MSEG9BUKRS,
  MSEG9LIFNR,
  MSEG9PRCTR,
  MSEG9AUFNR,
  MSEG9MATNR,
  MSEG9MBLNR,
  MSEG9MJAHR,
  MSEG9ZEILE,
  MSEG9BWART,
  MSEG9WERKS,
  MSEG9LGORT,
  MSEG9MENGE,
  MSEG9MEINS,
  MSEG9SGTXT,
  MKPF9BLDAT,
  ZSTC_SALE_019BUKRS,
  ZSTC_SALE_019VKORG,
  ZSTC_SALE_019WERKS,
  ZSTC_SALE_019EKORG,
  ZSTC_SALE_019MAMUSERCMPY,
  ZSTC_SALE_019REGION,
  ZSTC_SALE_019COUNTRY,
  ZSTC_SALE_019COUNTRYDSCR,
  ZSTC_SALE_019SALESCOMPANY,
  ZSTC_SALE_019SALESCMPDSCR,
  MKPF9CPUDT,
  MKPF9CPUTM,
  MKPF9MBLNR,
  MKPF9MJAHR,
  AUFK9OBJNR)
FROM PMSDO AS PMSDO9
 INNER JOIN AUFK AS AUFK9
 ON ( PMSDO9~OBJNR = AUFK9~OBJNR )
 INNER JOIN ZSTC_SALES_COMP AS ZSTC_SALE_019
 ON ( PMSDO9~VKORG = ZSTC_SALE_019~VKORG )
 INNER JOIN MSEG AS MSEG9
 ON ( AUFK9~AUFNR = MSEG9~AUFNR )
 INNER JOIN MKPF AS MKPF9
 ON ( ( MKPF9~MJAHR = MSEG9~MJAHR )
 AND ( MKPF9~MBLNR = MSEG9~MBLNR ) )
WHERE ( NOT ( ( PMSDO9~VKORG like '%09' ) )
 AND ( NOT ( ( PMSDO9~VKORG like '%05' ) )
 AND ( NOT ( ( PMSDO9~VKORG like '%04' ) )
 AND ( NOT ( ( PMSDO9~VKORG like '%03' ) )
 AND ( NOT ( ( PMSDO9~VKORG like '%02' ) )
 AND MSEG9~BWART IN (101,
102,
261,
262,
961,
962) ) ) ) ) ).
if MSEG9AUFNR = ''.
move 0 to ALTMP766.
else.
move MSEG9AUFNR to ALTMP766.
endif.
if MSEG9AUFNR = ''.
move 'X~X' to ALTMP767.
else.
move MSEG9AUFNR to ALTMP767.
endif.
IF ( ( ALTMP767 <> 'X~X' )
 AND ( ALTMP766 <> 0 ) ).
ALTMP768 = PMSDO9OBJNR.
ALTMP769 = MSEG9MANDT.
ALTMP770 = PMSDO9VKORG.
ALTMP771 = AUFK9AUFNR.
ALTMP772 = AUFK9BEMOT.
ALTMP773 = AUFK9WAERS.
ALTMP774 = MSEG9BEMOT.
ALTMP775 = MSEG9SHKZG.
ALTMP776 = MKPF9BUDAT.
ALTMP777 = MSEG9BUKRS.
ALTMP778 = MSEG9LIFNR.
ALTMP779 = MSEG9PRCTR.
ALTMP780 = MSEG9AUFNR.
ALTMP781 = MSEG9MATNR.
ALTMP782 = MSEG9MBLNR.
ALTMP783 = MSEG9MJAHR.
ALTMP784 = MSEG9ZEILE.
ALTMP785 = MSEG9BWART.
ALTMP786 = MSEG9WERKS.
ALTMP787 = MSEG9LGORT.
ALTMP788 = MSEG9MENGE.
ALTMP789 = MSEG9MEINS.
ALTMP790 = MSEG9SGTXT.
ALTMP791 = MKPF9BLDAT.
ALTMP792 = ZSTC_SALE_019BUKRS.
ALTMP793 = ZSTC_SALE_019VKORG.
ALTMP794 = ZSTC_SALE_019WERKS.
ALTMP795 = ZSTC_SALE_019EKORG.
ALTMP796 = ZSTC_SALE_019MAMUSERCMPY.
ALTMP797 = ZSTC_SALE_019REGION.
ALTMP798 = ZSTC_SALE_019COUNTRY.
ALTMP799 = ZSTC_SALE_019COUNTRYDSCR.
ALTMP800 = ZSTC_SALE_019SALESCOMPANY.
ALTMP801 = ZSTC_SALE_019SALESCMPDSCR.
ALTMP802 = MKPF9CPUDT.
ALTMP803 = MKPF9CPUTM.
 move ALTMP768 to ITAB6-OBJNR.
 move ALTMP769 to ITAB6-MANDT.
 move ALTMP770 to ITAB6-VKORG.
 move ALTMP771 to ITAB6-AUFNR.
 move ALTMP772 to ITAB6-BEMOT.
 move ALTMP773 to ITAB6-WAERS.
 move ALTMP774 to ITAB6-BEMOT_1.
 move ALTMP775 to ITAB6-SHKZG.
 move ALTMP776 to ITAB6-BUDAT.
 move ALTMP777 to ITAB6-BUKRS.
 move ALTMP778 to ITAB6-LIFNR.
 move ALTMP779 to ITAB6-PRCTR.
 move ALTMP780 to ITAB6-AUFNR_1.
 move ALTMP781 to ITAB6-MATNR.
 move ALTMP782 to ITAB6-MBLNR.
 move ALTMP783 to ITAB6-MJAHR.
 move ALTMP784 to ITAB6-ZEILE.
 move ALTMP785 to ITAB6-BWART.
 move ALTMP786 to ITAB6-WERKS.
 move ALTMP787 to ITAB6-LGORT.
 move ALTMP788 to ITAB6-MENGE.
 move ALTMP789 to ITAB6-MEINS.
 move ALTMP790 to ITAB6-SGTXT.
 move ALTMP791 to ITAB6-BLDAT.
 move ALTMP792 to ITAB6-Z_BUKRS.
 move ALTMP793 to ITAB6-Z_VKORG.
 move ALTMP794 to ITAB6-Z_WERKS.
 move ALTMP795 to ITAB6-Z_EKORG.
 move ALTMP796 to ITAB6-Z_MAMUSERCMPY.
 move ALTMP797 to ITAB6-Z_REGION.
 move ALTMP798 to ITAB6-Z_COUNTRY.
 move ALTMP799 to ITAB6-Z_COUNTRYDSCR.
 move ALTMP800 to ITAB6-Z_SALESCOMPANY.
 move ALTMP801 to ITAB6-Z_SALESCMPDSCR.
 move ALTMP802 to ITAB6-CPUDT.
 move ALTMP803 to ITAB6-CPUTM.
 append ITAB6.
rowCount = rowCount + 1.
IF ( download = 'S' ).
 IF ( rowCount = P_PKGSZ ).
   PERFORM FORM8.
   REFRESH ITAB6.
   rowCount = 0.
 ENDIF.
ELSE.
 IF ( rowCount = 5000 ).
   PERFORM FORM8.
   REFRESH ITAB6.
   rowCount = 0.
 ENDIF.
ENDIF.
ENDIF.
ENDSELECT.
ENDFORM.

FORM FORM8.
STATICS rowCount TYPE i VALUE 0.
STATICS firstRun(1) TYPE C VALUE 'Y'.
DATA ALTMP804 TYPE I.
DATA ALTMP805(22) TYPE C.
DATA ALTMP806(3) TYPE C.
DATA ALTMP807(4) TYPE C.
DATA ALTMP808(12) TYPE C.
DATA ALTMP809(2) TYPE C.
DATA ALTMP810(5) TYPE C.
DATA ALTMP811(2) TYPE C.
DATA ALTMP812(1) TYPE C.
DATA ALTMP813 TYPE D.
DATA ALTMP814(4) TYPE C.
DATA ALTMP815(10) TYPE C.
DATA ALTMP816(10) TYPE C.
DATA ALTMP817(12) TYPE C.
DATA ALTMP818(18) TYPE C.
DATA ALTMP819(10) TYPE C.
DATA ALTMP820(4) TYPE N.
DATA ALTMP821(4) TYPE N.
DATA ALTMP822(3) TYPE C.
DATA ALTMP823(4) TYPE C.
DATA ALTMP824(4) TYPE C.
DATA ALTMP825(16) TYPE P DECIMALS 3.
DATA ALTMP826(3) TYPE C.
DATA ALTMP827(50) TYPE C.
DATA ALTMP828 TYPE D.
DATA ALTMP829(4) TYPE C.
DATA ALTMP830(4) TYPE C.
DATA ALTMP831(4) TYPE C.
DATA ALTMP832(4) TYPE C.
DATA ALTMP833(4) TYPE C.
DATA ALTMP834(40) TYPE C.
DATA ALTMP835(40) TYPE C.
DATA ALTMP836(255) TYPE C.
DATA ALTMP837(40) TYPE C.
DATA ALTMP838(255) TYPE C.
DATA ALTMP839 TYPE D.
DATA ALTMP840 TYPE T.
DATA ALOJF0 TYPE C.
DATA ALOJF1 TYPE C.



LOOP AT ITAB6.
ALTMP805 = ITAB6-OBJNR.
ALTMP806 = ITAB6-MANDT.
ALTMP807 = ITAB6-VKORG.
ALTMP808 = ITAB6-AUFNR.
ALTMP809 = ITAB6-BEMOT.
ALTMP810 = ITAB6-WAERS.
ALTMP811 = ITAB6-BEMOT_1.
ALTMP812 = ITAB6-SHKZG.
ALTMP813 = ITAB6-BUDAT.
ALTMP814 = ITAB6-BUKRS.
ALTMP815 = ITAB6-LIFNR.
ALTMP816 = ITAB6-PRCTR.
ALTMP817 = ITAB6-AUFNR_1.
ALTMP818 = ITAB6-MATNR.
ALTMP819 = ITAB6-MBLNR.
ALTMP820 = ITAB6-MJAHR.
ALTMP821 = ITAB6-ZEILE.
ALTMP822 = ITAB6-BWART.
ALTMP823 = ITAB6-WERKS.
ALTMP824 = ITAB6-LGORT.
ALTMP825 = ITAB6-MENGE.
ALTMP826 = ITAB6-MEINS.
ALTMP827 = ITAB6-SGTXT.
ALTMP828 = ITAB6-BLDAT.
ALTMP829 = ITAB6-Z_BUKRS.
ALTMP830 = ITAB6-Z_VKORG.
ALTMP831 = ITAB6-Z_WERKS.
ALTMP832 = ITAB6-Z_EKORG.
ALTMP833 = ITAB6-Z_MAMUSERCMPY.
ALTMP834 = ITAB6-Z_REGION.
ALTMP835 = ITAB6-Z_COUNTRY.
ALTMP836 = ITAB6-Z_COUNTRYDSCR.
ALTMP837 = ITAB6-Z_SALESCOMPANY.
ALTMP838 = ITAB6-Z_SALESCMPDSCR.
ALTMP839 = ITAB6-CPUDT.
ALTMP840 = ITAB6-CPUTM.
ALOJF0 = 'Y'.
ALOJF1 = 'N'.
IF ( ALOJF0 = 'Y' ).

SELECT
  OBKNR
  MBLNR
  MJAHR
  ZEILE
INTO CORRESPONDING FIELDS OF SER03
FROM SER03
WHERE ( ( ZEILE = ITAB6-ZEILE )
 AND ( ( MJAHR = ITAB6-MJAHR )
 AND ( MBLNR = ITAB6-MBLNR ) ) ).
ALTMP804 = SER03-OBKNR.
ALOJF1 = 'Y'.
 move ALTMP804 to ITAB8-OBKNR.
 move ALTMP805 to ITAB8-OBJNR.
 move ALTMP806 to ITAB8-MANDT.
 move ALTMP807 to ITAB8-VKORG.
 move ALTMP808 to ITAB8-AUFNR.
 move ALTMP809 to ITAB8-BEMOT.
 move ALTMP810 to ITAB8-WAERS.
 move ALTMP811 to ITAB8-BEMOT_1.
 move ALTMP812 to ITAB8-SHKZG.
 move ALTMP813 to ITAB8-BUDAT.
 move ALTMP814 to ITAB8-BUKRS.
 move ALTMP815 to ITAB8-LIFNR.
 move ALTMP816 to ITAB8-PRCTR.
 move ALTMP817 to ITAB8-AUFNR_1.
 move ALTMP818 to ITAB8-MATNR.
 move ALTMP819 to ITAB8-MBLNR.
 move ALTMP820 to ITAB8-MJAHR.
 move ALTMP821 to ITAB8-ZEILE.
 move ALTMP822 to ITAB8-BWART.
 move ALTMP823 to ITAB8-WERKS.
 move ALTMP824 to ITAB8-LGORT.
 move ALTMP825 to ITAB8-MENGE.
 move ALTMP826 to ITAB8-MEINS.
 move ALTMP827 to ITAB8-SGTXT.
 move ALTMP828 to ITAB8-BLDAT.
 move ALTMP829 to ITAB8-Z_BUKRS.
 move ALTMP830 to ITAB8-Z_VKORG.
 move ALTMP831 to ITAB8-Z_WERKS.
 move ALTMP832 to ITAB8-Z_EKORG.
 move ALTMP833 to ITAB8-Z_MAMUSERCMPY.
 move ALTMP834 to ITAB8-Z_REGION.
 move ALTMP835 to ITAB8-Z_COUNTRY.
 move ALTMP836 to ITAB8-Z_COUNTRYDSCR.
 move ALTMP837 to ITAB8-Z_SALESCOMPANY.
 move ALTMP838 to ITAB8-Z_SALESCMPDSCR.
 move ALTMP839 to ITAB8-CPUDT.
 move ALTMP840 to ITAB8-CPUTM.
 append ITAB8.
firstRun = 'N' .
rowCount = rowCount + 1.
IF ( download = 'S' ).
 IF ( rowCount = P_PKGSZ ).
   PERFORM FORM10.
   REFRESH ITAB8.
   rowCount = 0.
 ENDIF.
ELSE.
 IF ( rowCount = 5000 ).
   PERFORM FORM10.
   REFRESH ITAB8.
   rowCount = 0.
 ENDIF.
ENDIF.
ENDSELECT.
ENDIF.
IF ( ALOJF1 = 'N' ).
clear SER03-OBKNR.
clear SER03-MBLNR.
clear SER03-MJAHR.
clear SER03-ZEILE.
clear ALTMP804.
 move ALTMP804 to ITAB8-OBKNR.
 move ALTMP805 to ITAB8-OBJNR.
 move ALTMP806 to ITAB8-MANDT.
 move ALTMP807 to ITAB8-VKORG.
 move ALTMP808 to ITAB8-AUFNR.
 move ALTMP809 to ITAB8-BEMOT.
 move ALTMP810 to ITAB8-WAERS.
 move ALTMP811 to ITAB8-BEMOT_1.
 move ALTMP812 to ITAB8-SHKZG.
 move ALTMP813 to ITAB8-BUDAT.
 move ALTMP814 to ITAB8-BUKRS.
 move ALTMP815 to ITAB8-LIFNR.
 move ALTMP816 to ITAB8-PRCTR.
 move ALTMP817 to ITAB8-AUFNR_1.
 move ALTMP818 to ITAB8-MATNR.
 move ALTMP819 to ITAB8-MBLNR.
 move ALTMP820 to ITAB8-MJAHR.
 move ALTMP821 to ITAB8-ZEILE.
 move ALTMP822 to ITAB8-BWART.
 move ALTMP823 to ITAB8-WERKS.
 move ALTMP824 to ITAB8-LGORT.
 move ALTMP825 to ITAB8-MENGE.
 move ALTMP826 to ITAB8-MEINS.
 move ALTMP827 to ITAB8-SGTXT.
 move ALTMP828 to ITAB8-BLDAT.
 move ALTMP829 to ITAB8-Z_BUKRS.
 move ALTMP830 to ITAB8-Z_VKORG.
 move ALTMP831 to ITAB8-Z_WERKS.
 move ALTMP832 to ITAB8-Z_EKORG.
 move ALTMP833 to ITAB8-Z_MAMUSERCMPY.
 move ALTMP834 to ITAB8-Z_REGION.
 move ALTMP835 to ITAB8-Z_COUNTRY.
 move ALTMP836 to ITAB8-Z_COUNTRYDSCR.
 move ALTMP837 to ITAB8-Z_SALESCOMPANY.
 move ALTMP838 to ITAB8-Z_SALESCMPDSCR.
 move ALTMP839 to ITAB8-CPUDT.
 move ALTMP840 to ITAB8-CPUTM.
 append ITAB8.
firstRun = 'N' .
rowCount = rowCount + 1.
IF ( download = 'S' ).
 IF ( rowCount = P_PKGSZ ).
   PERFORM FORM10.
   REFRESH ITAB8.
   rowCount = 0.
 ENDIF.
ELSE.
 IF ( rowCount = 5000 ).
   PERFORM FORM10.
   REFRESH ITAB8.
   rowCount = 0.
 ENDIF.
ENDIF.
ENDIF.
ENDLOOP.
ENDFORM.

FORM FORM10.
STATICS rowCount TYPE i VALUE 0.
STATICS firstRun(1) TYPE C VALUE 'Y'.
DATA ALTMP841 TYPE I.
DATA ALTMP842(18) TYPE C.
DATA ALTMP843(18) TYPE C.
DATA ALTMP844(22) TYPE C.
DATA ALTMP845(3) TYPE C.
DATA ALTMP846(4) TYPE C.
DATA ALTMP847(12) TYPE C.
DATA ALTMP848(2) TYPE C.
DATA ALTMP849(5) TYPE C.
DATA ALTMP850(2) TYPE C.
DATA ALTMP851(1) TYPE C.
DATA ALTMP852 TYPE D.
DATA ALTMP853(4) TYPE C.
DATA ALTMP854(10) TYPE C.
DATA ALTMP855(10) TYPE C.
DATA ALTMP856(12) TYPE C.
DATA ALTMP857(18) TYPE C.
DATA ALTMP858(10) TYPE C.
DATA ALTMP859(4) TYPE N.
DATA ALTMP860(4) TYPE N.
DATA ALTMP861(3) TYPE C.
DATA ALTMP862(4) TYPE C.
DATA ALTMP863(4) TYPE C.
DATA ALTMP864(16) TYPE P DECIMALS 3.
DATA ALTMP865(3) TYPE C.
DATA ALTMP866(50) TYPE C.
DATA ALTMP867 TYPE D.
DATA ALTMP868(4) TYPE C.
DATA ALTMP869(4) TYPE C.
DATA ALTMP870(4) TYPE C.
DATA ALTMP871(4) TYPE C.
DATA ALTMP872(4) TYPE C.
DATA ALTMP873(40) TYPE C.
DATA ALTMP874(40) TYPE C.
DATA ALTMP875(255) TYPE C.
DATA ALTMP876(40) TYPE C.
DATA ALTMP877(255) TYPE C.
DATA ALTMP878 TYPE D.
DATA ALTMP879 TYPE T.
DATA ALOJF0 TYPE C.
DATA ALOJF1 TYPE C.



LOOP AT ITAB8.
ALTMP841 = ITAB8-OBKNR.
ALTMP844 = ITAB8-OBJNR.
ALTMP845 = ITAB8-MANDT.
ALTMP846 = ITAB8-VKORG.
ALTMP847 = ITAB8-AUFNR.
ALTMP848 = ITAB8-BEMOT.
ALTMP849 = ITAB8-WAERS.
ALTMP850 = ITAB8-BEMOT_1.
ALTMP851 = ITAB8-SHKZG.
ALTMP852 = ITAB8-BUDAT.
ALTMP853 = ITAB8-BUKRS.
ALTMP854 = ITAB8-LIFNR.
ALTMP855 = ITAB8-PRCTR.
ALTMP856 = ITAB8-AUFNR_1.
ALTMP857 = ITAB8-MATNR.
ALTMP858 = ITAB8-MBLNR.
ALTMP859 = ITAB8-MJAHR.
ALTMP860 = ITAB8-ZEILE.
ALTMP861 = ITAB8-BWART.
ALTMP862 = ITAB8-WERKS.
ALTMP863 = ITAB8-LGORT.
ALTMP864 = ITAB8-MENGE.
ALTMP865 = ITAB8-MEINS.
ALTMP866 = ITAB8-SGTXT.
ALTMP867 = ITAB8-BLDAT.
ALTMP868 = ITAB8-Z_BUKRS.
ALTMP869 = ITAB8-Z_VKORG.
ALTMP870 = ITAB8-Z_WERKS.
ALTMP871 = ITAB8-Z_EKORG.
ALTMP872 = ITAB8-Z_MAMUSERCMPY.
ALTMP873 = ITAB8-Z_REGION.
ALTMP874 = ITAB8-Z_COUNTRY.
ALTMP875 = ITAB8-Z_COUNTRYDSCR.
ALTMP876 = ITAB8-Z_SALESCOMPANY.
ALTMP877 = ITAB8-Z_SALESCMPDSCR.
ALTMP878 = ITAB8-CPUDT.
ALTMP879 = ITAB8-CPUTM.
ALOJF0 = 'Y'.
ALOJF1 = 'N'.
IF ( ALOJF0 = 'Y' ).

SELECT
  SERNR
  EQUNR
  OBKNR
INTO CORRESPONDING FIELDS OF OBJK
FROM OBJK
WHERE ( OBKNR = ITAB8-OBKNR ).
ALTMP842 = OBJK-SERNR.
ALTMP843 = OBJK-EQUNR.
ALOJF1 = 'Y'.
 move ALTMP841 to ITAB10-OBKNR.
 move ALTMP842 to ITAB10-SERNR.
 move ALTMP843 to ITAB10-EQUNR.
 move ALTMP844 to ITAB10-OBJNR.
 move ALTMP845 to ITAB10-MANDT.
 move ALTMP846 to ITAB10-VKORG.
 move ALTMP847 to ITAB10-AUFNR.
 move ALTMP848 to ITAB10-BEMOT.
 move ALTMP849 to ITAB10-WAERS.
 move ALTMP850 to ITAB10-BEMOT_1.
 move ALTMP851 to ITAB10-SHKZG.
 move ALTMP852 to ITAB10-BUDAT.
 move ALTMP853 to ITAB10-BUKRS.
 move ALTMP854 to ITAB10-LIFNR.
 move ALTMP855 to ITAB10-PRCTR.
 move ALTMP856 to ITAB10-AUFNR_1.
 move ALTMP857 to ITAB10-MATNR.
 move ALTMP858 to ITAB10-MBLNR.
 move ALTMP859 to ITAB10-MJAHR.
 move ALTMP860 to ITAB10-ZEILE.
 move ALTMP861 to ITAB10-BWART.
 move ALTMP862 to ITAB10-WERKS.
 move ALTMP863 to ITAB10-LGORT.
 move ALTMP864 to ITAB10-MENGE.
 move ALTMP865 to ITAB10-MEINS.
 move ALTMP866 to ITAB10-SGTXT.
 move ALTMP867 to ITAB10-BLDAT.
 move ALTMP868 to ITAB10-Z_BUKRS.
 move ALTMP869 to ITAB10-Z_VKORG.
 move ALTMP870 to ITAB10-Z_WERKS.
 move ALTMP871 to ITAB10-Z_EKORG.
 move ALTMP872 to ITAB10-Z_MAMUSERCMPY.
 move ALTMP873 to ITAB10-Z_REGION.
 move ALTMP874 to ITAB10-Z_COUNTRY.
 move ALTMP875 to ITAB10-Z_COUNTRYDSCR.
 move ALTMP876 to ITAB10-Z_SALESCOMPANY.
 move ALTMP877 to ITAB10-Z_SALESCMPDSCR.
 move ALTMP878 to ITAB10-CPUDT.
 move ALTMP879 to ITAB10-CPUTM.
 append ITAB10.
firstRun = 'N' .
rowCount = rowCount + 1.
IF ( download = 'S' ).
 IF ( rowCount = P_PKGSZ ).
   PERFORM FORM11.
   REFRESH ITAB10.
   rowCount = 0.
 ENDIF.
ELSE.
 IF ( rowCount = 5000 ).
   PERFORM FORM11.
   REFRESH ITAB10.
   rowCount = 0.
 ENDIF.
ENDIF.
ENDSELECT.
ENDIF.
IF ( ALOJF1 = 'N' ).
clear OBJK-SERNR.
clear OBJK-EQUNR.
clear OBJK-OBKNR.
clear ALTMP842.
clear ALTMP843.
 move ALTMP841 to ITAB10-OBKNR.
 move ALTMP842 to ITAB10-SERNR.
 move ALTMP843 to ITAB10-EQUNR.
 move ALTMP844 to ITAB10-OBJNR.
 move ALTMP845 to ITAB10-MANDT.
 move ALTMP846 to ITAB10-VKORG.
 move ALTMP847 to ITAB10-AUFNR.
 move ALTMP848 to ITAB10-BEMOT.
 move ALTMP849 to ITAB10-WAERS.
 move ALTMP850 to ITAB10-BEMOT_1.
 move ALTMP851 to ITAB10-SHKZG.
 move ALTMP852 to ITAB10-BUDAT.
 move ALTMP853 to ITAB10-BUKRS.
 move ALTMP854 to ITAB10-LIFNR.
 move ALTMP855 to ITAB10-PRCTR.
 move ALTMP856 to ITAB10-AUFNR_1.
 move ALTMP857 to ITAB10-MATNR.
 move ALTMP858 to ITAB10-MBLNR.
 move ALTMP859 to ITAB10-MJAHR.
 move ALTMP860 to ITAB10-ZEILE.
 move ALTMP861 to ITAB10-BWART.
 move ALTMP862 to ITAB10-WERKS.
 move ALTMP863 to ITAB10-LGORT.
 move ALTMP864 to ITAB10-MENGE.
 move ALTMP865 to ITAB10-MEINS.
 move ALTMP866 to ITAB10-SGTXT.
 move ALTMP867 to ITAB10-BLDAT.
 move ALTMP868 to ITAB10-Z_BUKRS.
 move ALTMP869 to ITAB10-Z_VKORG.
 move ALTMP870 to ITAB10-Z_WERKS.
 move ALTMP871 to ITAB10-Z_EKORG.
 move ALTMP872 to ITAB10-Z_MAMUSERCMPY.
 move ALTMP873 to ITAB10-Z_REGION.
 move ALTMP874 to ITAB10-Z_COUNTRY.
 move ALTMP875 to ITAB10-Z_COUNTRYDSCR.
 move ALTMP876 to ITAB10-Z_SALESCOMPANY.
 move ALTMP877 to ITAB10-Z_SALESCMPDSCR.
 move ALTMP878 to ITAB10-CPUDT.
 move ALTMP879 to ITAB10-CPUTM.
 append ITAB10.
firstRun = 'N' .
rowCount = rowCount + 1.
IF ( download = 'S' ).
 IF ( rowCount = P_PKGSZ ).
   PERFORM FORM11.
   REFRESH ITAB10.
   rowCount = 0.
 ENDIF.
ELSE.
 IF ( rowCount = 5000 ).
   PERFORM FORM11.
   REFRESH ITAB10.
   rowCount = 0.
 ENDIF.
ENDIF.
ENDIF.
ENDLOOP.
ENDFORM.

FORM FORM11.
STATICS firstRun(1) TYPE C VALUE 'Y'.
DATA ALTMP880 TYPE I.
DATA ALTMP881(18) TYPE C.
DATA ALTMP882(18) TYPE C.
DATA ALTMP883(22) TYPE C.
DATA ALTMP884(3) TYPE C.
DATA ALTMP885(4) TYPE C.
DATA ALTMP886(12) TYPE C.
DATA ALTMP887(2) TYPE C.
DATA ALTMP888(5) TYPE C.
DATA ALTMP889(2) TYPE C.
DATA ALTMP890(1) TYPE C.
DATA ALTMP891 TYPE D.
DATA ALTMP892(4) TYPE C.
DATA ALTMP893(10) TYPE C.
DATA ALTMP894(10) TYPE C.
DATA ALTMP895(12) TYPE C.
DATA ALTMP896(18) TYPE C.
DATA ALTMP897(10) TYPE C.
DATA ALTMP898(4) TYPE N.
DATA ALTMP899(4) TYPE N.
DATA ALTMP900(3) TYPE C.
DATA ALTMP901(4) TYPE C.
DATA ALTMP902(4) TYPE C.
DATA ALTMP903(16) TYPE P DECIMALS 3.
DATA ALTMP904(3) TYPE C.
DATA ALTMP905(50) TYPE C.
DATA ALTMP906 TYPE D.
DATA ALTMP907(4) TYPE C.
DATA ALTMP908(4) TYPE C.
DATA ALTMP909(4) TYPE C.
DATA ALTMP910(4) TYPE C.
DATA ALTMP911(4) TYPE C.
DATA ALTMP912(40) TYPE C.
DATA ALTMP913(40) TYPE C.
DATA ALTMP914(255) TYPE C.
DATA ALTMP915(40) TYPE C.
DATA ALTMP916(255) TYPE C.
DATA ALTMP917 TYPE D.
DATA ALTMP918 TYPE T.



LOOP AT ITAB10.
ALTMP880 = ITAB10-OBKNR.
ALTMP881 = ITAB10-SERNR.
ALTMP882 = ITAB10-EQUNR.
ALTMP883 = ITAB10-OBJNR.
ALTMP884 = ITAB10-MANDT.
ALTMP885 = ITAB10-VKORG.
ALTMP886 = ITAB10-AUFNR.
ALTMP887 = ITAB10-BEMOT.
ALTMP888 = ITAB10-WAERS.
ALTMP889 = ITAB10-BEMOT_1.
ALTMP890 = ITAB10-SHKZG.
ALTMP891 = ITAB10-BUDAT.
ALTMP892 = ITAB10-BUKRS.
ALTMP893 = ITAB10-LIFNR.
ALTMP894 = ITAB10-PRCTR.
ALTMP895 = ITAB10-AUFNR_1.
ALTMP896 = ITAB10-MATNR.
ALTMP897 = ITAB10-MBLNR.
ALTMP898 = ITAB10-MJAHR.
ALTMP899 = ITAB10-ZEILE.
ALTMP900 = ITAB10-BWART.
ALTMP901 = ITAB10-WERKS.
ALTMP902 = ITAB10-LGORT.
ALTMP903 = ITAB10-MENGE.
ALTMP904 = ITAB10-MEINS.
ALTMP905 = ITAB10-SGTXT.
ALTMP906 = ITAB10-BLDAT.
ALTMP907 = ITAB10-Z_BUKRS.
ALTMP908 = ITAB10-Z_VKORG.
ALTMP909 = ITAB10-Z_WERKS.
ALTMP910 = ITAB10-Z_EKORG.
ALTMP911 = ITAB10-Z_MAMUSERCMPY.
ALTMP912 = ITAB10-Z_REGION.
ALTMP913 = ITAB10-Z_COUNTRY.
ALTMP914 = ITAB10-Z_COUNTRYDSCR.
ALTMP915 = ITAB10-Z_SALESCOMPANY.
ALTMP916 = ITAB10-Z_SALESCMPDSCR.
ALTMP917 = ITAB10-CPUDT.
ALTMP918 = ITAB10-CPUTM.
 move ALTMP880 to ITAB11-OBKNR.
 move ALTMP881 to ITAB11-SERNR.
 move ALTMP882 to ITAB11-EQUNR.
 move ALTMP883 to ITAB11-OBJNR.
 move ALTMP884 to ITAB11-MANDT.
 move ALTMP885 to ITAB11-VKORG.
 move ALTMP886 to ITAB11-AUFNR.
 move ALTMP887 to ITAB11-BEMOT.
 move ALTMP888 to ITAB11-WAERS.
 move ALTMP889 to ITAB11-BEMOT_1.
 move ALTMP890 to ITAB11-SHKZG.
 move ALTMP891 to ITAB11-BUDAT.
 move ALTMP892 to ITAB11-BUKRS.
 move ALTMP893 to ITAB11-LIFNR.
 move ALTMP894 to ITAB11-PRCTR.
 move ALTMP895 to ITAB11-AUFNR_1.
 move ALTMP896 to ITAB11-MATNR.
 move ALTMP897 to ITAB11-MBLNR.
 move ALTMP898 to ITAB11-MJAHR.
 move ALTMP899 to ITAB11-ZEILE.
 move ALTMP900 to ITAB11-BWART.
 move ALTMP901 to ITAB11-WERKS.
 move ALTMP902 to ITAB11-LGORT.
 move ALTMP903 to ITAB11-MENGE.
 move ALTMP904 to ITAB11-MEINS.
 move ALTMP905 to ITAB11-SGTXT.
 move ALTMP906 to ITAB11-BLDAT.
 move ALTMP907 to ITAB11-Z_BUKRS.
 move ALTMP908 to ITAB11-Z_VKORG.
 move ALTMP909 to ITAB11-Z_WERKS.
 move ALTMP910 to ITAB11-Z_EKORG.
 move ALTMP911 to ITAB11-Z_MAMUSERCMPY.
 move ALTMP912 to ITAB11-Z_REGION.
 move ALTMP913 to ITAB11-Z_COUNTRY.
 move ALTMP914 to ITAB11-Z_COUNTRYDSCR.
 move ALTMP915 to ITAB11-Z_SALESCOMPANY.
 move ALTMP916 to ITAB11-Z_SALESCMPDSCR.
 move ALTMP917 to ITAB11-CPUDT.
 move ALTMP918 to ITAB11-CPUTM.
 append ITAB11.
firstRun = 'N' .
 cntbuf = cntbuf + 1.
 if download = 'N'.
  if cntbuf > 5000.
    perform FORM12.
    clear cntbuf.
    refresh ITAB11.
    append_flag = 'A'.
  endif.
 endif.
 if download = 'S'.
  if cntbuf > P_PKGSZ.
    perform FORM12.
    clear cntbuf.
    refresh ITAB11.
  endif.
 endif.
ENDLOOP.
ENDFORM.

FORM FORM12.
data: outfile(512), ldfile(50).
ldfile = 'CTS_LZ_SAP_CP1_MSEGSER03_D_IM'.
concatenate out_dir ldfile into outfile
  separated by '/'.
  IF DOWNLOAD = 'S'.
     DATA: error_message(700),mtext(800),iEOP(1).
     CALL FUNCTION P_SRVFM
          DESTINATION P_DEST
          KEEPING LOGICAL UNIT OF WORK
          EXPORTING
            EOS = last_batch
          IMPORTING
            EOP = iEOP
          TABLES
            E_TABLE = ITAB11
          EXCEPTIONS
            READ_ERROR = 1
            SYSTEM_FAILURE = 2
            MESSAGE error_message
            COMMUNICATION_FAILURE = 3
            MESSAGE error_message
            OTHERS = 4.

     IF sy-subrc ne 0.
        Case sy-subrc.
        when 1.
        CONCATENATE
        'Data Services read error. '
        'Check Data Services error log.'
        INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 2.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 3.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 4.
        MESSAGE  E240(S#) WITH
'Other SAP System Failure while calling DS remote function.'.
        endcase.
      ENDIF.
      IF iEOP = 'X'.
         PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
         LEAVE PROGRAM.
       ENDIF.
  ELSE.
data  dlmtlen type i value '1'.
data xdlmtlen type i value '1'.
data:
  ht(1) type c,
  xht(1) type x,
  conv type ref to cl_abap_conv_in_ce.
xht = '7F'.
conv = cl_abap_conv_in_ce=>create(
  encoding = '1100'
  input = xht
).
call method conv->read(
  exporting n    = xdlmtlen
  importing data = ht
            len = dlmtlen
).
data return_code type i.
 perform write_delimited_file
           tables   ITAB11
           using    outfile
                    append_flag
                    ht
                    dlmtlen
                    download
           changing return_code.

  case return_code.
    when 1.
      IF EXECMODE = 'D'.
        WRITE: /5 'No line selected'.
      ELSE.
        MESSAGE E047(S#).
      ENDIF.
    when 2.
      IF EXECMODE = 'D'.
        WRITE: /5 'Open File Error -- ', 25 OUTFILE.
      ELSE.
        MESSAGE  E084(E0) WITH OUTFILE.
      ENDIF.
    when 3.
      IF EXECMODE = 'D'.
        WRITE: /5 'Data exceed length limit (8192) '.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Data exceed length limit (8192) '.
      ENDIF.
    when 4.
      IF EXECMODE = 'D'.
        WRITE: /5 'Call function WS_DOWNLOAD error'.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Call function WS_DOWNLOAD error'.
      ENDIF.
  endcase.
 ENDIF.
ENDFORM.

FORM SUBSTRING USING SRC BEG LEN CHANGING RET.

DATA: VA1 TYPE I.
DATA: VA2 TYPE I.
DATA: VA3 TYPE I.

VA3 = STRLEN( SRC ).

IF  BEG = 0.   VA1 = 0.
ELSE.
  IF  BEG < 0.
    VA1 = VA3 + BEG.
    IF  VA1 < 0.   VA1 = 0.
    ENDIF.
  ELSE.          VA1 = BEG - 1.
  ENDIF.
ENDIF.

IF  LEN < 0.   VA2 = 0.
ELSE.          VA2 = VA3 - VA1.
ENDIF.

IF  VA2 > LEN. VA2 = LEN.
ENDIF.

IF  VA2 < 1.   MOVE ''           TO RET.
ELSE.          MOVE SRC+VA1(VA2) TO RET.
ENDIF.

ENDFORM.

form write_delimited_file
           tables   datatab
           using    file
                    append
                    delimit
                    dlength
                    dwnload
          changing rc.

  data: type1,
        appd(1),
        temp(32),
        time1(8),
        date1(10),
        output(8192),
        rcount type i,
        offset type i,
        tablen type i,
        maxlen type i value '8192'.

  data: begin of clientab occurs 0,
             output(8192),
          end of clientab.

  field-symbols: <f>.
  field-symbols <delim1>.
  data delim2(16).
  data l_filename type string.

  appd = append.
  if appd is not initial.
     appd = 'X'.
  endif.
  move file to l_filename.
  describe table datatab lines tablen.


  if dwnload = 'Y'.
     clear clientab. refresh clientab.
     rcount = 0.
  else.
     if appd = space.
   open dataset file for output in text mode ENCODING UTF-8.
     else.
    open dataset file for appending in text mode ENCODING UTF-8.
     endif.
     if sy-subrc <> 0.
         rc = 2. exit.
     endif.
  endif.

  loop at datatab.
    clear: tablen, offset, output.
    do.
      assign component sy-index of
         structure datatab to <f>.
      if sy-subrc <> 0. exit. endif.
      if sy-index > 1.
         assign delimit(dlength) TO <delim1> CASTING TYPE C.
         delim2 = <delim1>.
         write delim2(dlength) to output+offset(dlength).
         add dlength to offset.
      endif.

      describe field <f> type type1.

      if type1 = 'I' or type1 = 'N'.
          type1 = 'P'.
      endif.

      case type1.
        when 'D'.
          if <f> = '00000000'.
             <f> = ' '.
          else.
             move <f> to time1.
             assign time1 to <f>.
          endif.
        when 'F'.
          if <f> = '0.0'.
            temp = '0.0'.
          else.
             write <f> to temp exponent 0.
          endif.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
        when 'P'.
          if <f> < 0.
             write '-' to output+offset(1).
             add 1 to offset.
             <f> = <f> * ( -1 ).
          endif.
          move <f> to temp.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
      endcase.

      sy-fdpos = strlen( <f> ).

      tablen = offset + sy-fdpos.
      if tablen > maxlen.
         rc = 3. exit.
      endif.
      write <f> to output+offset(sy-fdpos).
      add sy-fdpos to offset.
    enddo.

    if dwnload = 'Y'.
       clientab-output = output.
       append clientab.
       rcount = rcount + 1.
       if rcount >= 50.
          SY-BATCH = SPACE.
          CALL FUNCTION 'GUI_DOWNLOAD'
            EXPORTING
              FILENAME = l_filename
              FILETYPE = 'ASC'
              CODEPAGE = '4110'
              APPEND   = appd
              WRITE_FIELD_SEPARATOR = 'X'
*            IMPORTING
*              FILELENGTH =
            TABLES
              DATA_TAB = clientab
            EXCEPTIONS
              OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
          clear clientab. refresh clientab.
          rcount = 0. appd = 'A'.
       endif.
    else.
       transfer output to file.
    endif.
  endloop.

  if dwnload = 'Y'.
       SY-BATCH = SPACE.
       CALL FUNCTION 'GUI_DOWNLOAD'
         EXPORTING
           FILENAME = l_filename
           FILETYPE = 'ASC'
              CODEPAGE = '4110'
           APPEND   = appd
           WRITE_FIELD_SEPARATOR = 'X'
*         IMPORTING
*           FILELENGTH =
         TABLES
           DATA_TAB = clientab
         EXCEPTIONS
           OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
  else.
       close dataset file.
  endif.
endform.

FORM CONNECT_RFCDEST_TO_PROGID.
 INCLUDE rfctypes.

 DATA: len     type i,
       R3NAME(4),
       SYSTNR(2),
       uid     LIKE SYS_UID,
       options LIKE RFCOPT,
       isunicode  TYPE n.

 DATA: NTOTAL     LIKE GWY_STRUCT-NOREG,
       GWY_GWHOST LIKE GWY_STRUCT-GWHOST,
       GWY_GWSERV LIKE GWY_STRUCT-GWSERV,
       GWY_TPNAME LIKE GWY_SYSTEM-TPNAME.

 TABLES: RFCSI.

* Check program ID
 IF P_PROGID = SPACE.							
    RAISE INVALID_PROGRAM_ID.
 ENDIF.

* determine if the RFC destination authority
  CALL FUNCTION 'RFC_READ_TCPIP_DESTINATION'
       EXPORTING destination = P_DEST
                 authority_check = 'X'
  IMPORTING rfcunicode = isunicode.

* Use current gateway if no info exits
 IF P_GWHOST = SPACE OR P_GWSERV = SPACE.
  CALL FUNCTION 'RFC_SYSTEM_INFO'
      IMPORTING
          RFCSI_EXPORT = RFCSI.

  len = strlen( rfcsi-rfcdest ) - 2.
  systnr = rfcsi-rfcdest+len.
  len = len - 1 - 3.
  r3name = rfcsi-rfcdest+len(3).
  len = len - 1.
  options-rfcgwhost = rfcsi-rfcdest(len).
  CONCATENATE 'sapgw' SYSTNR INTO options-rfcgwserv.
 ELSE.
   options-rfcgwhost = P_GWHOST.
   options-rfcgwserv = P_GWSERV.
 ENDIF.

* Parameters for GWY function call
  GWY_GWHOST = OPTIONS-RFCGWHOST.
  GWY_GWSERV = OPTIONS-RFCGWSERV.
  GWY_TPNAME = P_PROGID.

* Check gateway and server program registered
  CALL FUNCTION 'GWY_GET_NO_REG_PROGRAMS'
     EXPORTING
        GWHOST      = GWY_GWHOST
        GWSERV      = GWY_GWSERV
        TPNAME      = GWY_TPNAME
     IMPORTING
        NOREG_TOTAL = NTOTAL
     EXCEPTIONS
        OTHERS      = 1.

  IF sy-subrc NE 0.
     raise CONNECT_TO_GATEWAY_FAILED.
  ENDIF.

  IF NTOTAL = 0.
     raise SERVER_NOT_REGISTERED.
  ENDIF.

  IF NTOTAL GT 1.
     raise DUPLICATE_REG_PROGRAMS.
  ENDIF.

* build new connection to a registered server
  options-rfcexec   = gwy_tpname.
  options-rfcgwhost = gwy_gwhost.
  options-rfcgwserv = gwy_gwserv.
  options-rfchost   = '%%RFCSERVER%%'.
  IF P_SNC_ON = 'X'.
    options-rfcsnc  = 'X'.
  ENDIF.

  CALL 'RFCControl' ID 'CODE' FIELD 'O'
                    ID 'DESTINATION' FIELD P_DEST
                    ID 'TYPE' FIELD rfctype_external_tcp
                    ID 'OPTIONS' FIELD options.

  IF sy-subrc NE 0.
     RAISE CONNECT_TO_REG_SERVER_FAILED.
   ENDIF.

* and set exclusive mode to keep server owned
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
      EXPORTING  destination = P_DEST
                 exclusiv    = 'Y'
      EXCEPTIONS connect_to_reg_server_failed = 1
                 exclusiv_not_supported       = 2.

  IF SY-SUBRC NE 0.
     CASE SY-SUBRC.
          WHEN 1.
              RAISE CONNECT_TO_REG_SERVER_FAILED.
          WHEN 2.
              RAISE EXCLUSIV_NOT_SUPPORTED.
     ENDCASE.
  ENDIF.

ENDFORM.

FORM DISCONNECT_RFCDEST_FROM_PROGID.
* set exclusive mode to E to end the session
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
     EXPORTING
         destination = P_DEST
         exclusiv    = 'E'
     EXCEPTIONS
         connect_to_reg_server_failed = 1				
         exclusiv_not_supported       = 2.
ENDFORM.
