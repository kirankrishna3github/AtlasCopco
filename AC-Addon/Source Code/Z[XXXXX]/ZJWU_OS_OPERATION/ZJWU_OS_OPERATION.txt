*&---------------------------------------------------------------------*
*& Report  ZJWU_OS_OPERATION
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

report  zjwu_os_operation.

data:
  lv_parameter like  sxpgcolist-parameters,
  lv_sid type c length 3,
  lv_other type c length 7,
  lv_status like  extcmdexex-status,
  lt_return type table of btcxpm,
  ls_return type btcxpm.

parameters:
  p_req type c length 10.

constants:
  c_read like  sxpgcolist-name value 'LIST_DB2DUMP',
  c_copy like  sxpgcolist-name value 'ZCOPYTEST',
  c_trans71_dat type c length 21 value '/usr/sap/trans71/data',
  c_trans71_cof type c length 24 value '/usr/sap/trans71/cofiles',
  c_trans_dat   type c length 19 value '/usr/sap/trans/data',
  c_trans_cof   type c length 22 value '/usr/sap/trans/cofiles'.


end-of-selection.
  translate p_req to upper case.
  split p_req at 'K' into lv_sid lv_other.
  concatenate c_trans71_dat lv_other into lv_parameter separated by '/R'.
  concatenate lv_parameter lv_sid into lv_parameter separated by '.'.

*check if the request is existed.
  call function 'SXPG_CALL_SYSTEM'
    exporting
      commandname                      = c_read
      additional_parameters            = lv_parameter
*   TRACE                            =
   importing
     status                            = lv_status
*   EXITCODE                         =
    tables
      exec_protocol                    = lt_return
   exceptions
     no_permission                    = 1
     command_not_found                = 2
     parameters_too_long              = 3
     security_risk                    = 4
     wrong_check_call_interface       = 5
     program_start_error              = 6
     program_termination_error        = 7
     x_error                          = 8
     parameter_expected               = 9
     too_many_parameters              = 10
     illegal_command                  = 11
     others                           = 12.
  if sy-subrc <> 0.
    message id sy-msgid type sy-msgty number sy-msgno
            with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    return.
  elseif  lv_status = 'E'.
    loop at lt_return into ls_return.
      write ls_return-message.
    endloop.
    return.
  endif.

* copy data-->data
  refresh lt_return.
  clear lv_status.
  concatenate lv_parameter c_trans_dat into lv_parameter separated by space.
  call function 'SXPG_CALL_SYSTEM'
    exporting
      commandname                      = c_copy
      additional_parameters            = lv_parameter
*   TRACE                            =
   importing
     status                            = lv_status
*   EXITCODE                         =
    tables
      exec_protocol                    = lt_return
   exceptions
     no_permission                    = 1
     command_not_found                = 2
     parameters_too_long              = 3
     security_risk                    = 4
     wrong_check_call_interface       = 5
     program_start_error              = 6
     program_termination_error        = 7
     x_error                          = 8
     parameter_expected               = 9
     too_many_parameters              = 10
     illegal_command                  = 11
     others                           = 12.
  if sy-subrc <> 0.
    message id sy-msgid type sy-msgty number sy-msgno
            with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    return.
  elseif  lv_status = 'E'.
    loop at lt_return into ls_return.
      write ls_return-message.
    endloop.
    return.
  endif.
*copy cofiles-->cofiles
  refresh lt_return.
  clear lv_status.
  concatenate c_trans71_cof lv_other into lv_parameter separated by '/K'.
  concatenate lv_parameter lv_sid into lv_parameter separated by '.'.
  concatenate lv_parameter c_trans_cof into lv_parameter separated by space.

  call function 'SXPG_CALL_SYSTEM'
    exporting
      commandname                      = c_copy
      additional_parameters            = lv_parameter
*   TRACE                            =
   importing
     status                            = lv_status
*   EXITCODE                         =
    tables
      exec_protocol                    = lt_return
   exceptions
     no_permission                    = 1
     command_not_found                = 2
     parameters_too_long              = 3
     security_risk                    = 4
     wrong_check_call_interface       = 5
     program_start_error              = 6
     program_termination_error        = 7
     x_error                          = 8
     parameter_expected               = 9
     too_many_parameters              = 10
     illegal_command                  = 11
     others                           = 12.
  if sy-subrc <> 0.
    message id sy-msgid type sy-msgty number sy-msgno
            with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    return.
  elseif  lv_status = 'E'.
    loop at lt_return into ls_return.
      write ls_return-message.
    endloop.
    return.
  endif.

  write: 'Successful!'.
