*&---------------------------------------------------------------------*
*& Report  Z_UPDATE_BOM                                                *
*&                                                                     *
*&---------------------------------------------------------------------*
*&                                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*

PROGRAM z_update_bom.

TABLES: stas,  "BOMs - Item Selection
        stpo,  "BOm item
        stko,  "BOM header
        stzu,  "Permanent BOM data
        mast.  "Material to BOM link


CONSTANTS: co_usage    TYPE stlan VALUE '4',
           co_category TYPE stlty VALUE 'M'.

DATA: i        TYPE c VALUE 0,
      lv_temp  TYPE string,
      lv_lines TYPE i.

DATA: ls_mara TYPE mara,
      ls_marc TYPE marc,
      ls_mast TYPE mast,
      ls_stpo TYPE stpo,
      lt_stpo TYPE TABLE OF stpo,
      ls_stko TYPE stko,
      lt_stko TYPE TABLE OF stko.

FIELD-SYMBOLS: <fs1> TYPE ANY.

SELECTION-SCREEN: BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
PARAMETERS: p_matnr1 TYPE matnr OBLIGATORY,
            p_matnr2 TYPE matnr OBLIGATORY,
            p_matnr3 TYPE matnr OBLIGATORY,
            p_date   TYPE equz-datab DEFAULT sy-datum OBLIGATORY,
            p_plant  TYPE werks_d OBLIGATORY,
            p_upd    TYPE checkbox.
SELECTION-SCREEN: END OF BLOCK b1.

START-OF-SELECTION.
*/ STEP 1: Check whether the entered data exists ...
  CLEAR i.
  DO 3 TIMES.
    i = i + 1.
    CONCATENATE 'P_MATNR'
                 i
                 INTO lv_temp.
    ASSIGN (lv_temp) TO <fs1>.
    CLEAR ls_mara.
    SELECT SINGLE * FROM mara INTO ls_mara WHERE matnr = <fs1>.
    IF sy-subrc = 0.
      CLEAR ls_marc.
      SELECT SINGLE * FROM marc INTO ls_marc WHERE matnr = <fs1> AND
                                                   werks = p_plant.
      IF sy-subrc = 0.
      ELSE.
        WRITE: / 'Material', <fs1>, 'does not exist', 'in plant', p_plant.

      ENDIF.
    ELSE.
      WRITE: / 'Material', <fs1>, 'does not exist'.
      EXIT.
    ENDIF.
  ENDDO.

*/ STEP 2: Now do the update in the STPO table
  CLEAR ls_mast.
  SELECT SINGLE * FROM mast INTO ls_mast WHERE matnr = p_matnr1
                                           AND werks = p_plant
                                           AND stlan = co_usage.
  IF sy-subrc = 0.
    CLEAR ls_stko.
    REFRESH lt_stko.
    SELECT * FROM stko INTO TABLE lt_stko WHERE stlty = co_category
                                            AND stlnr = ls_mast-stlnr.
*/ For the moment block the program when more then 1 alternative is found
    lv_lines = LINES( lt_stko ).
    CHECK lv_lines = 1.
    LOOP AT lt_stko INTO ls_stko.
*/ For the moment only allow to update the alternative '01'
      CHECK ls_stko-stlal = '01'.
      PERFORM update_stpo.
    ENDLOOP.
  ELSEIF sy-subrc <> 0.
    WRITE: / 'Material BOM', p_matnr1, 'does not exist in plant', p_plant.
  ENDIF.



*&---------------------------------------------------------------------*
*&      Form  update_stpo
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM update_stpo.

  DATA: lv_guid_16 TYPE guid_16,
        lv_guid_22 TYPE guid_22,
        lv_guid_32 TYPE guid_32.

  SELECT * FROM stpo INTO TABLE lt_stpo WHERE

*  CALL FUNCTION 'GUID_CREATE'
*   IMPORTING
*     EV_GUID_16       = lv_guid_16
*     EV_GUID_22       =
*     EV_GUID_32       =
            .

ENDFORM.                    " update_stpo

*Text symbol text£º

*001:Select options for  table update
*Selection text£º
*P_DATE:        New FROM/TO Date
*P_MATNR1:        BOM material
*P_MATNR2:        old item material
*P_MATNR3:        new item material
*P_PLANT:        BOM plant

*P_UPD:        Update in table?
*List Title: Titlebar£º
*:Result
