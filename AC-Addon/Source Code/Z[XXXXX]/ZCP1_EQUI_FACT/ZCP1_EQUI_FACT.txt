REPORT ZAL_ABAP message-id 26 line-size 255
no standard page heading.
* ZCP1_EQUI_FACT.
PARAMETER DOWNLOAD(1) DEFAULT 'N' lower case. "N-svr,Y-clnt
PARAMETER EXECMODE(1) DEFAULT 'B' lower case. "D-dlg,B-btch
PARAMETER OUT_DIR(48) DEFAULT "output file dir
*'/var/load/CP1/UK/read' LOWER CASE.
'/var/load/xxx/UK/read' lower case.
PARAMETER IN_DIR(48) DEFAULT "input file dir
*'/var/load/CP1/UK/read' LOWER CASE.
'/var/load/xxx/UK/read' lower case.

PARAMETER $PARAM1 TYPE D.

PARAMETER P_DF_VK(40) DEFAULT "ABAP data flow object key
'' lower case.
PARAMETER P_DI_GEN(40) DEFAULT "DI version that generated ABAP
'' lower case.

*** Machine generated ABAP. Do not modify.            ***
*** # Copyright Business Objects S.A.  All rights reserved. ***
*
* Date Time:
*    07/13/15 15:00:02
* SAP used for generated this ABAP:
*    Release: 701
*    Host   : 10.25.3.26
*
* ABAP Dataflow Name:
*    DF_R3_CTS_LZ_SAP_CP1_EQUI__FACT_D
* ABAP Dataflow comments:
*    SAP source: EQBS, JEST, EQUI, TJ02T, T001W
* ABAP program name in SAP:
*    ZCP1_EQUI_FACT
* Generated ABAP file name:
*    //AIRSBEAP0142/D$/Data/SAPLogistics/VAL/ABAP/NEW/ZCP1_EQUI_F
*ACT
TABLES EQUI.
TABLES EQUZ.
TABLES ILOA.
TABLES CDHDR.
TABLES T370T.

DATA: begin of ITAB6 occurs 0,
EQUNR(18) TYPE C,
EQART(10) TYPE C,
EQLFN(3) TYPE N,
LVORM(1) TYPE C,
INBDT TYPE D,
ANSWT(16) TYPE P DECIMALS 2,
ANSDT TYPE D,
HERST(30) TYPE C,
HERLD(3) TYPE C,
SERGE(30) TYPE C,
TYPBZ(20) TYPE C,
BAUJJ(4) TYPE C,
BAUMM(2) TYPE C,
MATNR(18) TYPE C,
SERNR(18) TYPE C,
OBJNR(22) TYPE C,
ELIEF(10) TYPE C,
DATAB TYPE D,
DATBI TYPE D,
IWERK(4) TYPE C,
MAPAR(30) TYPE C,
HEQUI(18) TYPE C,
HEQNR(4) TYPE C,
INGRP(3) TYPE C,
PM_OBJTY(2) TYPE C,
GEWRK(8) TYPE N,
TIDNR(25) TYPE C,
BUKRS(4) TYPE C,
CR_OBJTY(2) TYPE C,
PPSID(8) TYPE N,
KOKRS(4) TYPE C,
KOSTL(10) TYPE C,
SWERK(4) TYPE C,
STORT(10) TYPE C,
VKORG(4) TYPE C,
VTWEG(2) TYPE C,
SPART(2) TYPE C,
VKBUR(4) TYPE C,
VKGRP(3) TYPE C,
ADRNR(10) TYPE C,
TPLNR(30) TYPE C,
STSMA(8) TYPE C.
DATA: end of ITAB6.

data: append_flag(1) value ' ',
      cntbuf type i,
      delimleng type i.

CONSTANTS C_DF_VK(40) VALUE '43720'.
CONSTANTS C_DI_GEN(40) VALUE '12.2.2.3'.
DATA WARN_MSG(50).
data: gv_directory     type epsdirnam  value '/var/load/xxx/UK/read/',
      gv_logsys        like tbdlst-logsys.

start-of-selection.
* Logical system
  call function 'OWN_LOGICAL_SYSTEM_GET'
    importing
      own_logical_system             = gv_logsys
    exceptions
      own_logical_system_not_defined = 1
      others                         = 2.
  if sy-subrc <> 0.
    message id sy-msgid type 'E' number sy-msgno
         with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    stop.
  endif.
  replace 'xxx' in out_dir with gv_logsys(3).
  replace 'xxx' in in_dir with gv_logsys(3).



PERFORM FORM6.
PERFORM FORM7.
FREE ITAB6.

end-of-selection.

CLEAR WARN_MSG.

IF NOT P_DF_VK IS INITIAL.
  IF P_DF_VK <> C_DF_VK.
     CONCATENATE '$$Warning$'
                 C_DF_VK
                 '$' INTO WARN_MSG.
  ENDIF.
ENDIF.
IF NOT P_DI_GEN IS INITIAL.
  IF P_DI_GEN <> C_DI_GEN.
     IF WARN_MSG IS INITIAL.
       CONCATENATE '$$Warning$$'
                   C_DI_GEN
                   INTO WARN_MSG.
     ELSE.
       CONCATENATE WARN_MSG
                   C_DI_GEN
                   INTO WARN_MSG.
     ENDIF.
  ENDIF.
ENDIF.

IF NOT WARN_MSG IS INITIAL.
  IF EXECMODE = 'D'.
    WRITE WARN_MSG.
    NEW-LINE.
  ELSE.
    MESSAGE S000 with WARN_MSG.
  ENDIF.
ENDIF.


write  '* Program Complete *'.
write  '# Copyright Business Objects S.A.  All rights reserved.'
.

FORM FORM6.
DATA ALTMP1(18) TYPE C.
DATA ALTMP2(10) TYPE C.
DATA ALTMP3(3) TYPE N.
DATA ALTMP4(1) TYPE C.
DATA ALTMP5 TYPE D.
DATA ALTMP6(16) TYPE P DECIMALS 2.
DATA ALTMP7 TYPE D.
DATA ALTMP8(30) TYPE C.
DATA ALTMP9(3) TYPE C.
DATA ALTMP10(30) TYPE C.
DATA ALTMP11(20) TYPE C.
DATA ALTMP12(4) TYPE C.
DATA ALTMP13(2) TYPE C.
DATA ALTMP14(18) TYPE C.
DATA ALTMP15(18) TYPE C.
DATA ALTMP16(22) TYPE C.
DATA ALTMP17(10) TYPE C.
DATA ALTMP18 TYPE D.
DATA ALTMP19 TYPE D.
DATA ALTMP20(4) TYPE C.
DATA ALTMP21(30) TYPE C.
DATA ALTMP22(18) TYPE C.
DATA ALTMP23(4) TYPE C.
DATA ALTMP24(3) TYPE C.
DATA ALTMP25(2) TYPE C.
DATA ALTMP26(8) TYPE N.
DATA ALTMP27(25) TYPE C.
DATA ALTMP28(4) TYPE C.
DATA ALTMP29(2) TYPE C.
DATA ALTMP30(8) TYPE N.
DATA ALTMP31(4) TYPE C.
DATA ALTMP32(10) TYPE C.
DATA ALTMP33(4) TYPE C.
DATA ALTMP34(10) TYPE C.
DATA ALTMP35(4) TYPE C.
DATA ALTMP36(2) TYPE C.
DATA ALTMP37(2) TYPE C.
DATA ALTMP38(4) TYPE C.
DATA ALTMP39(3) TYPE C.
DATA ALTMP40(10) TYPE C.
DATA ALTMP41(30) TYPE C.
DATA ALTMP42(8) TYPE C.

DATA EQUI9EQUNR LIKE EQUI-EQUNR.
DATA EQUI9EQART LIKE EQUI-EQART.
DATA EQUZ9EQLFN LIKE EQUZ-EQLFN.
DATA EQUI9LVORM LIKE EQUI-LVORM.
DATA EQUI9INBDT LIKE EQUI-INBDT.
DATA EQUI9ANSWT LIKE EQUI-ANSWT.
DATA EQUI9ANSDT LIKE EQUI-ANSDT.
DATA EQUI9HERST LIKE EQUI-HERST.
DATA EQUI9HERLD LIKE EQUI-HERLD.
DATA EQUI9SERGE LIKE EQUI-SERGE.
DATA EQUI9TYPBZ LIKE EQUI-TYPBZ.
DATA EQUI9BAUJJ LIKE EQUI-BAUJJ.
DATA EQUI9BAUMM LIKE EQUI-BAUMM.
DATA EQUI9MATNR LIKE EQUI-MATNR.
DATA EQUI9SERNR LIKE EQUI-SERNR.
DATA EQUI9OBJNR LIKE EQUI-OBJNR.
DATA EQUI9ELIEF LIKE EQUI-ELIEF.
DATA EQUZ9DATAB LIKE EQUZ-DATAB.
DATA EQUZ9DATBI LIKE EQUZ-DATBI.
DATA EQUZ9IWERK LIKE EQUZ-IWERK.
DATA EQUZ9MAPAR LIKE EQUZ-MAPAR.
DATA EQUZ9HEQUI LIKE EQUZ-HEQUI.
DATA EQUZ9HEQNR LIKE EQUZ-HEQNR.
DATA EQUZ9INGRP LIKE EQUZ-INGRP.
DATA EQUZ9PM_OBJTY LIKE EQUZ-PM_OBJTY.
DATA EQUZ9GEWRK LIKE EQUZ-GEWRK.
DATA EQUZ9TIDNR LIKE EQUZ-TIDNR.
DATA ILOA9BUKRS LIKE ILOA-BUKRS.
DATA ILOA9CR_OBJTY LIKE ILOA-CR_OBJTY.
DATA ILOA9PPSID LIKE ILOA-PPSID.
DATA ILOA9KOKRS LIKE ILOA-KOKRS.
DATA ILOA9KOSTL LIKE ILOA-KOSTL.
DATA ILOA9SWERK LIKE ILOA-SWERK.
DATA ILOA9STORT LIKE ILOA-STORT.
DATA ILOA9VKORG LIKE ILOA-VKORG.
DATA ILOA9VTWEG LIKE ILOA-VTWEG.
DATA ILOA9SPART LIKE ILOA-SPART.
DATA ILOA9VKBUR LIKE ILOA-VKBUR.
DATA ILOA9VKGRP LIKE ILOA-VKGRP.
DATA ILOA9ADRNR LIKE ILOA-ADRNR.
DATA ILOA9TPLNR LIKE ILOA-TPLNR.
DATA T370T9STSMA LIKE T370T-STSMA.
DATA EQUZ9EQUNR LIKE EQUZ-EQUNR.
DATA EQUZ9ILOAN LIKE EQUZ-ILOAN.
DATA ILOA9ILOAN LIKE ILOA-ILOAN.
DATA CDHDR9OBJECTCLAS LIKE CDHDR-OBJECTCLAS.
DATA CDHDR9UDATE LIKE CDHDR-UDATE.
DATA CDHDR9OBJECTID LIKE CDHDR-OBJECTID.
DATA T370T9EQTYP LIKE T370T-EQTYP.
DATA EQUI9EQTYP LIKE EQUI-EQTYP.



SELECT
  EQUI9~EQUNR
  EQUI9~EQART
  EQUZ9~EQLFN
  EQUI9~LVORM
  EQUI9~INBDT
  EQUI9~ANSWT
  EQUI9~ANSDT
  EQUI9~HERST
  EQUI9~HERLD
  EQUI9~SERGE
  EQUI9~TYPBZ
  EQUI9~BAUJJ
  EQUI9~BAUMM
  EQUI9~MATNR
  EQUI9~SERNR
  EQUI9~OBJNR
  EQUI9~ELIEF
  EQUZ9~DATAB
  EQUZ9~DATBI
  EQUZ9~IWERK
  EQUZ9~MAPAR
  EQUZ9~HEQUI
  EQUZ9~HEQNR
  EQUZ9~INGRP
  EQUZ9~PM_OBJTY
  EQUZ9~GEWRK
  EQUZ9~TIDNR
  ILOA9~BUKRS
  ILOA9~CR_OBJTY
  ILOA9~PPSID
  ILOA9~KOKRS
  ILOA9~KOSTL
  ILOA9~SWERK
  ILOA9~STORT
  ILOA9~VKORG
  ILOA9~VTWEG
  ILOA9~SPART
  ILOA9~VKBUR
  ILOA9~VKGRP
  ILOA9~ADRNR
  ILOA9~TPLNR
  T370T9~STSMA
  EQUZ9~EQUNR
  EQUZ9~ILOAN
  ILOA9~ILOAN
  CDHDR9~OBJECTCLAS
  CDHDR9~UDATE
  CDHDR9~OBJECTID
  T370T9~EQTYP
  EQUI9~EQTYP
into (EQUI9EQUNR,
  EQUI9EQART,
  EQUZ9EQLFN,
  EQUI9LVORM,
  EQUI9INBDT,
  EQUI9ANSWT,
  EQUI9ANSDT,
  EQUI9HERST,
  EQUI9HERLD,
  EQUI9SERGE,
  EQUI9TYPBZ,
  EQUI9BAUJJ,
  EQUI9BAUMM,
  EQUI9MATNR,
  EQUI9SERNR,
  EQUI9OBJNR,
  EQUI9ELIEF,
  EQUZ9DATAB,
  EQUZ9DATBI,
  EQUZ9IWERK,
  EQUZ9MAPAR,
  EQUZ9HEQUI,
  EQUZ9HEQNR,
  EQUZ9INGRP,
  EQUZ9PM_OBJTY,
  EQUZ9GEWRK,
  EQUZ9TIDNR,
  ILOA9BUKRS,
  ILOA9CR_OBJTY,
  ILOA9PPSID,
  ILOA9KOKRS,
  ILOA9KOSTL,
  ILOA9SWERK,
  ILOA9STORT,
  ILOA9VKORG,
  ILOA9VTWEG,
  ILOA9SPART,
  ILOA9VKBUR,
  ILOA9VKGRP,
  ILOA9ADRNR,
  ILOA9TPLNR,
  T370T9STSMA,
  EQUZ9EQUNR,
  EQUZ9ILOAN,
  ILOA9ILOAN,
  CDHDR9OBJECTCLAS,
  CDHDR9UDATE,
  CDHDR9OBJECTID,
  T370T9EQTYP,
  EQUI9EQTYP)
FROM T370T AS T370T9
 INNER JOIN EQUI AS EQUI9
 ON ( T370T9~EQTYP = EQUI9~EQTYP )
 INNER JOIN EQUZ AS EQUZ9
 ON ( EQUI9~EQUNR = EQUZ9~EQUNR )
 INNER JOIN CDHDR AS CDHDR9
 ON ( CDHDR9~OBJECTID = EQUI9~EQUNR )
 INNER JOIN ILOA AS ILOA9
 ON ( EQUZ9~ILOAN = ILOA9~ILOAN )
WHERE ( NOT ( ( ILOA9~VKORG like '%04' ) )
 AND ( NOT ( ( ILOA9~VKORG like '%03' ) )
 AND ( NOT ( ( ILOA9~VKORG like '%02' ) )
 AND ( ILOA9~VKORG IN ('AFRA',
'CN01',
'CPRA',
'ESAA',
'HK01',
'NNAA',
'IYAA',
'PL01',
'RU01')
 AND ( ( CDHDR9~UDATE >= $PARAM1 )
 AND ( ( CDHDR9~OBJECTCLAS = 'EQUI' )
 AND ( EQUI9~EQART = 'EQUIPMENT' ) ) ) ) ) ) ).
ALTMP1 = EQUI9EQUNR.
ALTMP2 = EQUI9EQART.
ALTMP3 = EQUZ9EQLFN.
ALTMP4 = EQUI9LVORM.
ALTMP5 = EQUI9INBDT.
ALTMP6 = EQUI9ANSWT.
ALTMP7 = EQUI9ANSDT.
ALTMP8 = EQUI9HERST.
ALTMP9 = EQUI9HERLD.
ALTMP10 = EQUI9SERGE.
ALTMP11 = EQUI9TYPBZ.
ALTMP12 = EQUI9BAUJJ.
ALTMP13 = EQUI9BAUMM.
ALTMP14 = EQUI9MATNR.
ALTMP15 = EQUI9SERNR.
ALTMP16 = EQUI9OBJNR.
ALTMP17 = EQUI9ELIEF.
ALTMP18 = EQUZ9DATAB.
ALTMP19 = EQUZ9DATBI.
ALTMP20 = EQUZ9IWERK.
ALTMP21 = EQUZ9MAPAR.
ALTMP22 = EQUZ9HEQUI.
ALTMP23 = EQUZ9HEQNR.
ALTMP24 = EQUZ9INGRP.
ALTMP25 = EQUZ9PM_OBJTY.
ALTMP26 = EQUZ9GEWRK.
ALTMP27 = EQUZ9TIDNR.
ALTMP28 = ILOA9BUKRS.
ALTMP29 = ILOA9CR_OBJTY.
ALTMP30 = ILOA9PPSID.
ALTMP31 = ILOA9KOKRS.
ALTMP32 = ILOA9KOSTL.
ALTMP33 = ILOA9SWERK.
ALTMP34 = ILOA9STORT.
ALTMP35 = ILOA9VKORG.
ALTMP36 = ILOA9VTWEG.
ALTMP37 = ILOA9SPART.
ALTMP38 = ILOA9VKBUR.
ALTMP39 = ILOA9VKGRP.
ALTMP40 = ILOA9ADRNR.
ALTMP41 = ILOA9TPLNR.
ALTMP42 = T370T9STSMA.
 move ALTMP1 to ITAB6-EQUNR.
 move ALTMP2 to ITAB6-EQART.
 move ALTMP3 to ITAB6-EQLFN.
 move ALTMP4 to ITAB6-LVORM.
 move ALTMP5 to ITAB6-INBDT.
 move ALTMP6 to ITAB6-ANSWT.
 move ALTMP7 to ITAB6-ANSDT.
 move ALTMP8 to ITAB6-HERST.
 move ALTMP9 to ITAB6-HERLD.
 move ALTMP10 to ITAB6-SERGE.
 move ALTMP11 to ITAB6-TYPBZ.
 move ALTMP12 to ITAB6-BAUJJ.
 move ALTMP13 to ITAB6-BAUMM.
 move ALTMP14 to ITAB6-MATNR.
 move ALTMP15 to ITAB6-SERNR.
 move ALTMP16 to ITAB6-OBJNR.
 move ALTMP17 to ITAB6-ELIEF.
 move ALTMP18 to ITAB6-DATAB.
 move ALTMP19 to ITAB6-DATBI.
 move ALTMP20 to ITAB6-IWERK.
 move ALTMP21 to ITAB6-MAPAR.
 move ALTMP22 to ITAB6-HEQUI.
 move ALTMP23 to ITAB6-HEQNR.
 move ALTMP24 to ITAB6-INGRP.
 move ALTMP25 to ITAB6-PM_OBJTY.
 move ALTMP26 to ITAB6-GEWRK.
 move ALTMP27 to ITAB6-TIDNR.
 move ALTMP28 to ITAB6-BUKRS.
 move ALTMP29 to ITAB6-CR_OBJTY.
 move ALTMP30 to ITAB6-PPSID.
 move ALTMP31 to ITAB6-KOKRS.
 move ALTMP32 to ITAB6-KOSTL.
 move ALTMP33 to ITAB6-SWERK.
 move ALTMP34 to ITAB6-STORT.
 move ALTMP35 to ITAB6-VKORG.
 move ALTMP36 to ITAB6-VTWEG.
 move ALTMP37 to ITAB6-SPART.
 move ALTMP38 to ITAB6-VKBUR.
 move ALTMP39 to ITAB6-VKGRP.
 move ALTMP40 to ITAB6-ADRNR.
 move ALTMP41 to ITAB6-TPLNR.
 move ALTMP42 to ITAB6-STSMA.
 append ITAB6.
 cntbuf = cntbuf + 1.
 if download = 'N'.
  if cntbuf > 5000.
    perform FORM7.
    clear cntbuf.
    refresh ITAB6.
    append_flag = 'A'.
  endif.
 endif.
ENDSELECT.
ENDFORM.

FORM FORM7.
data: outfile(128), ldfile(50).
ldfile = 'CTS_LZ_SAP_CP1_EQUIPMENTS'.
concatenate out_dir ldfile into outfile
  separated by '/'.
data  dlmtlen type i value '1'.
data xdlmtlen type i value '1'.
data:
  ht(1) type c,
  xht(1) type x,
  conv type ref to cl_abap_conv_in_ce.
xht = '7F'.
conv = cl_abap_conv_in_ce=>create(
  encoding = '4110'
  input = xht
).
call method conv->read(
  exporting n    = xdlmtlen
  importing data = ht
            len = dlmtlen
).
data return_code type i.
 perform write_delimited_file
           tables   ITAB6
           using    outfile
                    append_flag
                    ht
                    dlmtlen
                    download
           changing return_code.

  case return_code.
    when 1.
      IF EXECMODE = 'D'.
        WRITE: /5 'No line selected'.
      ELSE.
        MESSAGE E098.
      ENDIF.
    when 2.
      IF EXECMODE = 'D'.
        WRITE: /5 'Open File Error -- ', 25 OUTFILE.
      ELSE.
        MESSAGE  E107 WITH OUTFILE.
      ENDIF.
    when 3.
      IF EXECMODE = 'D'.
        WRITE: /5 'Data exceed length limit (8192) '.
      ELSE.
        MESSAGE  E000 WITH
             'Data exceed length limit (8192) '.
      ENDIF.
    when 4.
      IF EXECMODE = 'D'.
        WRITE: /5 'Call function WS_DOWNLOAD error'.
      ELSE.
        MESSAGE  E000 WITH
             'Call function WS_DOWNLOAD error'.
      ENDIF.
  endcase.
ENDFORM.

FORM SUBSTRING USING SRC BEG LEN CHANGING RET.

DATA: VA1 TYPE I.
DATA: VA2 TYPE I.
DATA: VA3 TYPE I.

VA3 = STRLEN( SRC ).

IF  BEG = 0.   VA1 = 0.
ELSE.
  IF  BEG < 0.
    VA1 = VA3 + BEG.
    IF  VA1 < 0.   VA1 = 0.
    ENDIF.
  ELSE.          VA1 = BEG - 1.
  ENDIF.
ENDIF.

IF  LEN < 0.   VA2 = 0.
ELSE.          VA2 = VA3 - VA1.
ENDIF.

IF  VA2 > LEN. VA2 = LEN.
ENDIF.

IF  VA2 < 1.   MOVE ''           TO RET.
ELSE.          MOVE SRC+VA1(VA2) TO RET.
ENDIF.

ENDFORM.

form write_delimited_file
           tables   datatab
           using    file
                    append
                    delimit
                    dlength
                    dwnload
          changing rc.

  data: type1,
        appd(1),
        temp(32),
        time1(8),
        date1(10),
        output(8192),
        rcount type i,
        offset type i,
        tablen type i,
        maxlen type i value '8192'.

  data: begin of clientab occurs 0,
             output(8192),
          end of clientab.

  field-symbols: <f>.
  field-symbols <delim1>.
  data delim2(16).
  data l_filename type string.

  appd = append.
  if appd is not initial.
     appd = 'X'.
  endif.
  move file to l_filename.
  describe table datatab lines tablen.


  if dwnload = 'Y'.
     clear clientab. refresh clientab.
     rcount = 0.
  else.
     if appd = space.
         open dataset file for output in text mode ENCODING
UTF-8.
     else.
         open dataset file for appending in text mode ENCODING
UTF-8.
     endif.
     if sy-subrc <> 0.
         rc = 2. exit.
     endif.
  endif.

  loop at datatab.
    clear: tablen, offset, output.
    do.
      assign component sy-index of
         structure datatab to <f>.
      if sy-subrc <> 0. exit. endif.
      if sy-index > 1.
         assign delimit(dlength) TO <delim1> CASTING TYPE C.
         delim2 = <delim1>.
         write delim2(dlength) to output+offset(dlength).
         add dlength to offset.
      endif.

      describe field <f> type type1.

      if type1 = 'I' or type1 = 'N'.
          type1 = 'P'.
      endif.

      case type1.
        when 'D'.
          if <f> = '00000000'.
             <f> = ' '.
          else.
             move <f> to time1.
             assign time1 to <f>.
          endif.
        when 'F'.
          if <f> = '0.0'.
            temp = '0.0'.
          else.
             write <f> to temp exponent 0.
          endif.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
        when 'P'.
          if <f> < 0.
             write '-' to output+offset(1).
             add 1 to offset.
             <f> = <f> * ( -1 ).
          endif.
          move <f> to temp.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
      endcase.

      sy-fdpos = strlen( <f> ).

      tablen = offset + sy-fdpos.
      if tablen > maxlen.
         rc = 3. exit.
      endif.
      write <f> to output+offset(sy-fdpos).
      add sy-fdpos to offset.
    enddo.

    if dwnload = 'Y'.
       clientab-output = output.
       append clientab.
       rcount = rcount + 1.
       if rcount >= 50.
          SY-BATCH = SPACE.
          CALL FUNCTION 'GUI_DOWNLOAD'
            EXPORTING
              FILENAME = l_filename
              FILETYPE = 'ASC'
              CODEPAGE = '4110'
              APPEND   = appd
              WRITE_FIELD_SEPARATOR = 'X'
*            IMPORTING
*              FILELENGTH =
            TABLES
              DATA_TAB = clientab
            EXCEPTIONS
              OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
          clear clientab. refresh clientab.
          rcount = 0. appd = 'A'.
       endif.
    else.
       transfer output to file.
    endif.
  endloop.

  if dwnload = 'Y'.
       SY-BATCH = SPACE.
       CALL FUNCTION 'GUI_DOWNLOAD'
         EXPORTING
           FILENAME = l_filename
           FILETYPE = 'ASC'
              CODEPAGE = '4110'
           APPEND   = appd
           WRITE_FIELD_SEPARATOR = 'X'
*         IMPORTING
*           FILELENGTH =
         TABLES
           DATA_TAB = clientab
         EXCEPTIONS
           OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
  else.
       close dataset file.
  endif.
endform.
