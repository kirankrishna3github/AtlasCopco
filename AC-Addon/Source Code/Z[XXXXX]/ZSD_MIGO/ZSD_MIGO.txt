report ZSD_MIGO
       no standard page heading line-size 255.

  DATA: COUNT TYPE I, P TYPE I.
    TYPES: BEGIN OF ERROR,
          L1 TYPE I,
          MSG TYPE STRING,
        END OF ERROR.

  DATA: GV_INDEX TYPE SY-TABIX.
  DATA: GV_SUBRC LIKE SY-SUBRC.
  DATA: MESSTAB1 TYPE TABLE OF ERROR with HEADER LINE.
  DATA: WA_MESSTAB TYPE BDCMSGCOLL,
        WA_OUTPUT TYPE ERROR,
        W_MSG1 TYPE STRING.

include zbdcrecx1.

*parameters: dataset(132) lower case.
***    DO NOT CHANGE - the generated data section - DO NOT CHANGE    ***
*
*   If it is nessesary to change the data section use the rules:
*   1.) Each definition of a field exists of two lines
*   2.) The first line shows exactly the comment
*       '* data element: ' followed with the data element
*       which describes the field.
*       If you don't have a data element use the
*       comment without a data element name
*   3.) The second line shows the fieldname of the
*       structure, the fieldname must consist of
*       a fieldname and optional the character '_' and
*       three numbers and the field length in brackets
*   4.) Each field must be type C.
*
*** Generated data section with specific formatting - DO NOT CHANGE  ***
data: begin of record OCCURS 0,
** data element: GOACTION
*        ACTION_001(003),
** data element: REFDOC
*        REFDOC_002(003),
* data element: MBLNR
        MAT_DOC_003(010),
* data element: BUDAT
        BUDAT_004(010),
* data element: BLDAT
        BLDAT_005(010),
** data element: BUDAT
*        BUDAT_006(010),
** data element: BKTXT
*        BKTXT_007(025),
** data element: WEVER
*        WEVER_008(018),
** data element: MBLPO
*        DETAIL_ZEILE_009(004),
** data element: MB_TAKE_IT
*        DETAIL_TAKE_010(001),
      end of record.

*** End generated data section ***
PARAMETERS : P_FILE TYPE RLGRAP-FILENAME.

TYPE-POOLS: TRUXS.

DATA: IT_RAW TYPE TRUXS_T_TEXT_DATA.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.


  CALL FUNCTION 'F4_FILENAME'
    EXPORTING
      PROGRAM_NAME  = SYST-CPROG
*     DYNPRO_NUMBER = SYST-DYNNR
      FIELD_NAME    = 'P_FILE'
    IMPORTING
      FILE_NAME     = P_FILE.

START-OF-SELECTION.

  CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
    EXPORTING
*     I_FIELD_SEPERATOR    =
      I_LINE_HEADER        = 'X'
      I_TAB_RAW_DATA       = IT_RAW
      I_FILENAME           = P_FILE
    TABLES
      I_TAB_CONVERTED_DATA = RECORD[]
    EXCEPTIONS
      CONVERSION_FAILED    = 1
      OTHERS               = 2.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.
perform open_group.
  count = 0.
LOOP AT RECORD.
GV_INDEX = SY-TABIX.
perform bdc_dynpro      using 'SAPLMIGO' '0001'.
perform bdc_field       using 'BDC_OKCODE'
                              '=OK_GO'.
*perform bdc_field       using 'GODYNPRO-ACTION'
*                              record-ACTION_001.
*perform bdc_field       using 'GODYNPRO-REFDOC'
*                              record-REFDOC_002.
perform bdc_field       using 'BDC_CURSOR'
                              'GODYNPRO-MAT_DOC'.
perform bdc_field       using 'GODYNPRO-MAT_DOC'
                              record-MAT_DOC_003.
perform bdc_field       using 'GOHEAD-BUDAT'
                              record-BUDAT_004.
perform bdc_dynpro      using 'SAPLMIGO' '0001'.
perform bdc_field       using 'BDC_OKCODE'
                              '=OK_POST1'.
perform bdc_field       using 'GOHEAD-BLDAT'
                              record-BLDAT_005.
perform bdc_field       using 'GOHEAD-BUDAT'
                              record-BUDAT_004.
*perform bdc_field       using 'GOHEAD-BKTXT'
*                              record-BKTXT_007.
*perform bdc_field       using 'GOHEAD-WEVER'
*                              record-WEVER_008.
*perform bdc_field       using 'GODYNPRO-DETAIL_ZEILE'
*                              record-DETAIL_ZEILE_009.
**perform bdc_field       using 'BDC_CURSOR'
**                              'GODYNPRO-DETAIL_TAKE'.
perform bdc_field       using 'GODYNPRO-DETAIL_TAKE'
                              'X'. "record-DETAIL_TAKE_010.
if sy-subrc = 0 and MESSTAB-msgtyp NE 'E'.
COUNT = COUNT + 1.
ENDIF.

perform bdc_transaction using 'MIGO'.

CLEAR RECORD.

ENDLOOP.

P = COUNT.
MESSAGE I000(ZSD) WITH P.

  DATA: LV_FILE TYPE STRING.
  CONCATENATE 'C:\ERRROR' SY-DATUM SY-UZEIT '.XLS' INTO LV_FILE.
  CONDENSE LV_FILE.
  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
*     BIN_FILESIZE            =
      FILENAME                = LV_FILE
*     FILETYPE                = 'ASC'
*     APPEND                  = ' '
      WRITE_FIELD_SEPARATOR   = 'X'
    TABLES
      DATA_TAB                = MESSTAB1
*     FIELDNAMES              =
    EXCEPTIONS
      FILE_WRITE_ERROR        = 1
      NO_BATCH                = 2
      GUI_REFUSE_FILETRANSFER = 3
      INVALID_TYPE            = 4
      NO_AUTHORITY            = 5
      UNKNOWN_ERROR           = 6
      HEADER_NOT_ALLOWED      = 7
      SEPARATOR_NOT_ALLOWED   = 8
      FILESIZE_NOT_ALLOWED    = 9
      HEADER_TOO_LONG         = 10
      DP_ERROR_CREATE         = 11
      DP_ERROR_SEND           = 12
      DP_ERROR_WRITE          = 13
      UNKNOWN_DP_ERROR        = 14
      ACCESS_DENIED           = 15
      DP_OUT_OF_MEMORY        = 16
      DISK_FULL               = 17
      DP_TIMEOUT              = 18
      FILE_NOT_FOUND          = 19
      DATAPROVIDER_EXCEPTION  = 20
      CONTROL_FLUSH_ERROR     = 21
      OTHERS                  = 22.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                   WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

perform close_group.

*perform close_dataset using dataset.
*Text symbol text£º
*E00:Error opening dataset, return code:
*I01:Session name
*I02:Open session
*I03:Insert transaction
*I04:Close Session
*I05:Return code =
*I06:Error session created
*S01:Session name
*S02:User
*S03:Keep session
*S04:Lock date
*S05:Processing Mode
*S06:Update Mode
*S07:Generate session
*S08:Call transaction
*S09:Error sessn
*S10:Nodata indicator
*S11:Short log
