*-----------------------------------------------------------------------
*-----------------------*
*                        Include       Z_FSAU_FORMS
*                       *
*-----------------------------------------------------------------------
*-----------------------*
*-----------------------------------------------------------------------
*-----------------------*
*                              Form  unique_Records
*                       *
*-----------------------------------------------------------------------
*-----------------------*
*Subroutine to identify unique records, scenario numbers and frequencies
* within each scenario  *
*-----------------------------------------------------------------------
*-----------------------*
FORM unique_records.
  DATA l_sort(600) TYPE c.

  IF flagb2 <> 1.
    PERFORM blank_or_not.
* Replace all the non-blank values with a common string
    LOOP AT <fs_1> ASSIGNING <fs_6>.
      LOOP AT tb_blank.
        ASSIGN COMPONENT tb_blank-fieldname OF STRUCTURE <fs_6> TO
        <fs_blank>.
        IF <fs_blank> IS INITIAL.
* Blank Field
          SELECT * INTO TABLE tb_dd03l FROM dd03l WHERE fieldname =
tb_blank-fieldname AND tabname = tb_blank-tabname AND
as4local = 'A'.
          READ TABLE tb_dd03l INDEX 1.
          IF tb_dd03l-inttype <> 'P'.
*            REPLACE SECTION OFFSET 0 OF <fs_blank> WITH 'No'.
            <fs_blank> = 'N'.
          ELSE.
            MOVE 0 TO <fs_blank>.
          ENDIF.
        ELSE.
* Non Blank Field
          SELECT * INTO TABLE tb_dd03l FROM dd03l WHERE fieldname =
tb_blank-fieldname AND tabname = tb_blank-tabname.
          READ TABLE tb_dd03l INDEX 1.
          IF tb_dd03l-inttype <> 'P'.
*            REPLACE SECTION OFFSET 0 OF <fs_blank> WITH 'Yes'.
            <fs_blank> = 'Y'.
          ELSE.
            MOVE 1 TO <fs_blank>.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDLOOP.
  ENDIF.

  SORT <fs_1>.
  i = 2.
  freq = 1.
  scen = 1.
  tb_index-index = 1.
  APPEND tb_index.
  CONCATENATE lista1 lista2 lista3 INTO list.

  DATA: wa_crit TYPE crit_field_list.

  REFRESH tb_crit_field_list[].

  LOOP AT tb1_critical INTO wa_critical WHERE
                      ( blank = space OR
                        blank = 'X' ).
    wa_crit-field = wa_critical-fields.
    APPEND wa_crit TO tb_crit_field_list.
  ENDLOOP.
  IF flagb2 = 1.
    REFRESH tb_crit_field_list[].

    LOOP AT tb1_critical INTO wa_critical WHERE
                        blank = 'M'.
      wa_crit-field = wa_critical-fields.
      APPEND wa_crit TO tb_crit_field_list.
    ENDLOOP.

  ENDIF.

  LOOP AT <fs_1> ASSIGNING <fs_2>.
    IF flagb2 <> 1.
      ASSIGN COMPONENT 'SCENARIO' OF STRUCTURE <fs_2> TO <fs_scenario>.
    ELSE.
      ASSIGN COMPONENT 'SCENARIOB' OF STRUCTURE <fs_2> TO <fs_scenario>.
    ENDIF.
    IF flagb2 <> 1.
      ASSIGN COMPONENT 'FREQ' OF STRUCTURE <fs_2> TO <fs_freq>.
    ELSE.
      ASSIGN COMPONENT 'FREQB' OF STRUCTURE <fs_2> TO <fs_freq>.
    ENDIF.
    <fs_scenario> = scen.
    CREATE DATA temp_line LIKE LINE OF <fs_1>.
    ASSIGN temp_line->* TO <fs_temp>.

* Move the work area into a temp work area
    MOVE <fs_2> TO <fs_temp>.
    READ TABLE <fs_1> INDEX i ASSIGNING <fs_3>.
    IF sy-subrc = 0.
      flag = 0.
      LOOP AT tb_crit_field_list INTO wa_crit_field_list.

        ASSIGN COMPONENT wa_crit_field_list-field OF STRUCTURE <fs_3> TO
 <field>.
        ASSIGN COMPONENT wa_crit_field_list-field OF STRUCTURE <fs_temp>
 TO <tempfield>.

        IF <field> <> <tempfield>.
          flag = 1.
          EXIT.
        ENDIF.
      ENDLOOP.

*If yes increment the frequency counter, assign the scenario number and
*save the index number
      IF flag <> 1.
        freq = freq + 1.
        IF flagb2 <> 1.
          ASSIGN COMPONENT 'SCENARIO' OF STRUCTURE <fs_3> TO
<fs_scenario>.
        ELSE.
          ASSIGN COMPONENT 'SCENARIOB' OF STRUCTURE <fs_3> TO
<fs_scenario>.
        ENDIF.
        <fs_scenario> = scen.
        tb_index-index = i.
        APPEND tb_index.
      ELSE.
        PERFORM update_prev_records.
      ENDIF.
    ELSE.

* When the last record is reached, value of 'i' will be greater than the
* total number of records. hence decrement 'i'.
      LOOP AT tb_index.
        i = i - 1.
        READ TABLE <fs_1> ASSIGNING <fs_5> INDEX i.
        IF flagb2 <> 1.
          ASSIGN COMPONENT 'SCENARIO' OF STRUCTURE <fs_5> TO
<fs_scenario>.
        ELSE.
          ASSIGN COMPONENT 'SCENARIOB' OF STRUCTURE <fs_5> TO
<fs_scenario>.
        ENDIF.
        IF <fs_scenario> = scen.
          IF flagb2 <> 1.
            ASSIGN COMPONENT 'FREQ' OF STRUCTURE <fs_5> TO <fs_freq>.
          ELSE.
            ASSIGN COMPONENT 'FREQB' OF STRUCTURE <fs_5> TO <fs_freq>.
          ENDIF.
          <fs_freq> = freq.
        ENDIF.
      ENDLOOP.
    ENDIF.
    i = i + 1.
  ENDLOOP.
* Create an internal tables to transfer the final records
  CALL METHOD cl_alv_table_create=>create_dynamic_table
    EXPORTING
      it_fieldcatalog           = lt_fieldcatalog
    IMPORTING
      ep_table                  = <fs_data>
    EXCEPTIONS
      generate_subpool_dir_full = 1
      OTHERS                    = 2.
  IF sy-subrc <> 0.
  ENDIF.
  ASSIGN <fs_data>->* TO <fs_final> .
  CREATE DATA new_line LIKE LINE OF <fs_final>.
  ASSIGN new_line->* TO <fs_final_wa>.

* Obtain the max number of scenarios
  DESCRIBE TABLE <fs_1> LINES no_of_lines.
  READ TABLE <fs_1> INTO <fs_2> INDEX no_of_lines.
  IF flagb2 <> 1.
    ASSIGN COMPONENT 'SCENARIO' OF STRUCTURE <fs_2> TO <field8>.
  ELSE.
    ASSIGN COMPONENT 'SCENARIOB' OF STRUCTURE <fs_2> TO <field8>.
  ENDIF.
  MOVE <field8> TO max_scenario.

  s = 1.
  DO max_scenario TIMES.
    LOOP AT <fs_1> ASSIGNING <fs_2>.
      ASSIGN COMPONENT 'SCENARIO' OF STRUCTURE <fs_2> TO <field8>.
      IF <field8> = s.
        APPEND <fs_2> TO <fs_final>.
        EXIT.
      ENDIF.
    ENDLOOP.
    s = s + 1.
  ENDDO.
ENDFORM.                    "unique_Records
*--------------------------------------------------------------------*
*                        Form  table_name                            *
*--------------------------------------------------------------------*
*       To select the tables belonging to a particular submodule     *
*--------------------------------------------------------------------*
FORM table_name.
  SELECT tabname sequence
  FROM zinf_fsau_tables
  INTO TABLE tb_tables
  WHERE zmodule = module
  AND   submod = submod.

ENDFORM.                    "table_name
*-----------------------------------------------------------------------
*--------------*
*      Form  update_prev_records
*-----------------------------------------------------------------------
*--------------*
* Subroutine to update the records of a particular scenario with the
*correct frequency
* Since the frequency can calculated only after traversing through all
*the records of a
* particular Scen, we keep track of all the records belonging to thats
*scen and then
* update all these records with the right frequency
*-----------------------------------------------------------------------
*--------------*
FORM update_prev_records.
  LOOP AT tb_index.
    READ TABLE <fs_1> ASSIGNING <fs_4> INDEX tb_index-index.
    IF flagb2 <> 1.
      ASSIGN COMPONENT 'SCENARIO' OF STRUCTURE <fs_4> TO <fs_scenario>.
    ELSE.
      ASSIGN COMPONENT 'SCENARIOB' OF STRUCTURE <fs_4> TO <fs_scenario>.
    ENDIF.
    IF <fs_scenario> = scen.
      IF flagb2 <> 1.
        ASSIGN COMPONENT 'FREQ' OF STRUCTURE <fs_4> TO <fs_freq>.
      ELSE.
        ASSIGN COMPONENT 'FREQB' OF STRUCTURE <fs_4> TO <fs_freq>.
      ENDIF.
      <fs_freq> = freq.
    ENDIF.
  ENDLOOP.
  tb_index-index = i.
  APPEND tb_index.
  freq = 1.
  scen = scen + 1.
ENDFORM.                    " update_prev_records
*-----------------------------------------------------------------------
*------------------*
*                              Form  display_output_a
*                  *
*-----------------------------------------------------------------------
*------------------*
* This form prints the report title and the fieldnames dynamically. The
*field labels of   *
* each of the data element is obtained from the table dd04t and used as
*the column headers*
* while displayin the output. The display sequence can vary dynamically
*                  *
*-----------------------------------------------------------------------
*------------------*
FORM display_output_a .

  FIELD-SYMBOLS: <fs> TYPE ANY.
  DATA: c_sep(1) TYPE c,
        f_value(50) TYPE c,
        mod_desc(40).

  LOOP AT tb1_critical INTO wa_critical
                    WHERE ( blank = ' ' OR blank = 'X' )
                    AND     nodisp = space.
    MOVE wa_critical-sequence TO wa_display-sequence.
    SELECT fieldname rollname FROM dd03l
    INTO CORRESPONDING FIELDS OF wa_display
    WHERE ( tabname = wa_critical-tabname AND
    fieldname = wa_critical-fields AND as4local = 'A' ).
      SELECT scrtext_m FROM dd04t
      INTO CORRESPONDING FIELDS OF wa_display
      WHERE ( rollname = wa_display-rollname
             AND ddlanguage = sy-langu AND as4local = 'A' ).
        IF wa_display-scrtext_m = ' '.
          SELECT ddtext FROM dd04t INTO wa_display-scrtext_m
          WHERE ( rollname = wa_display-rollname
          AND ddlanguage = sy-langu AND as4local = 'A' ).
          ENDSELECT.
        ENDIF.
        APPEND wa_display TO tb_display.
      ENDSELECT.
    ENDSELECT.
  ENDLOOP.
  SORT tb_display BY sequence.
* Obtain the number of fields to calculate the length of underline and
*colour
  DESCRIBE TABLE tb_display LINES underline_length.
  underline_length = 20 * ( underline_length + 4 ).
  ULINE AT 1(underline_length).
  WRITE:/55 'FUNCTIONAL SCENARIO ANALYSIS UTILITY'.
  ULINE AT /1(underline_length).
  SELECT SINGLE description FROM zinf_fsau_module
  INTO mod_desc WHERE zmodule = module.
  SELECT description FROM zinf_fsau_submod INTO TABLE tb_desc
  WHERE zmodule = module
  AND   submod = submod.
  READ TABLE tb_desc INDEX 1.
  WRITE:/65 mod_desc, ' ', tb_desc-desc.
  ULINE AT /1(underline_length).
  FORMAT COLOR 1 ON.
  WRITE AT :/61 'SCENARIO ANALYSIS', underline_length ' '.
  FORMAT COLOR OFF.
  ULINE AT /1(underline_length).
  FORMAT COLOR 2 ON.

  ASSIGN c_sep TO <fs> TYPE 'X'.
  <fs> = '09'.   "tab delimiter
  REFRESH tb_out[].
  DESCRIBE TABLE tb_display LINES max_fields.
  LOOP AT <fs_final> ASSIGNING <fs_final_wa>.
    AT FIRST.
      WRITE:/ text-200,sy-vline.
      CONCATENATE wa_out text-200 INTO
      wa_out SEPARATED BY c_sep.
      LOOP AT tb_display INTO wa_display.
        WRITE: wa_display-scrtext_m, sy-vline.
        CONCATENATE wa_out wa_display-scrtext_m INTO
        wa_out SEPARATED BY c_sep.
      ENDLOOP.
      WRITE:text-213,sy-vline.
      CONCATENATE wa_out text-213 INTO
      wa_out SEPARATED BY c_sep.
      APPEND wa_out TO tb_out.
      CLEAR wa_out.
      FORMAT COLOR OFF.
      ULINE AT /1(underline_length).
    ENDAT.
    ASSIGN COMPONENT 'SCENARIO' OF STRUCTURE
    <fs_final_wa> TO <fs_scenario>.
    ASSIGN COMPONENT 'FREQ' OF STRUCTURE <fs_final_wa> TO <fs_freq>.
    WRITE: / <fs_scenario> UNDER text-200 CENTERED.
    f_value = <fs_scenario>.
    CONCATENATE wa_out f_value INTO
    wa_out SEPARATED BY c_sep.
    LOOP AT tb_display INTO wa_display.
      ASSIGN COMPONENT wa_display-fieldname OF STRUCTURE
      <fs_final_wa> TO <fieldd>.
      CONCATENATE '''' wa_display-scrtext_m '''' INTO heading.
      WRITE:(22)  <fieldd> UNDER heading CENTERED .
      f_value = <fieldd>.
      CONCATENATE wa_out f_value INTO
      wa_out SEPARATED BY c_sep.
    ENDLOOP.
    WRITE: <fs_freq> UNDER text-213 CENTERED.
    f_value = <fs_freq>.
    CONCATENATE wa_out f_value INTO
    wa_out SEPARATED BY c_sep.
    APPEND wa_out TO tb_out.
    CLEAR wa_out.
  ENDLOOP.
  ULINE AT /1(underline_length).

ENDFORM.                    " DISPLAY_OUTPUT
*-----------------------------------------------------------------------
*--*
*      Form  critical_fields
*  *
*-----------------------------------------------------------------------
*--*
* Subroutine to obtain a list of all critical fields from the table
*  *
* ZINF_FSAU_CRITIC
*  *
*-----------------------------------------------------------------------
*--*
FORM critical_fields.

  LOOP AT tb_tables.
    SELECT tabname fieldname blank value sequence nodisp
    FROM zinf_fsau_critic
    INTO wa_critical
    WHERE zinf_fsau_critic~tabname = tb_tables-tabname
      AND zinf_fsau_critic~zmodule = module
      AND zinf_fsau_critic~submod = submod.
      APPEND wa_critical TO tb_critical.
      CLEAR wa_critical.
    ENDSELECT.
  ENDLOOP.

  IF flagb = 1.
    LOOP AT tb_tables.
      SELECT tabname fieldname
      FROM zinf_fsau_master
      INTO wa_critical
      WHERE zinf_fsau_master~tabname = tb_tables-tabname
       AND  zinf_fsau_master~zmodule = module
       AND  zinf_fsau_master~submod = submod. "NK
        wa_critical-blank = 'M'.
        APPEND wa_critical TO tb_critical.
        CLEAR wa_critical.
      ENDSELECT.
    ENDLOOP.
  ENDIF.

ENDFORM.                    "critical_fields
*---------------------------------------------------------------------*
*                         Form  submod_name                           *
*---------------------------------------------------------------------*
*    Subroutine to obtain a list of all submodules for which data has *
*    been maintained from the table ZINF_FSAU_SUBMOD                  *
*---------------------------------------------------------------------*
FORM submod_name USING module.
  SELECT submod seltable selfield
  INTO TABLE tb_submod
  FROM zinf_fsau_submod
  WHERE zmodule = module.
  IF sy-subrc NE 0.
    MESSAGE e011(z_fsau).
  ENDIF.
ENDFORM.                    " submod_name
*--------------------------------------------------------------------*
*                          Form  join_tables                         *
*--------------------------------------------------------------------*
*  Subroutine to join two tables based on the join condition         *
*--------------------------------------------------------------------*
FORM join_tables.

"  PERFORM filter_data USING tab1 CHANGING where_clause.

"  IF tab2 <> ' '.
"    SELECT (lista1) FROM (tab1) INTO CORRESPONDING FIELDS OF <fs_2>
"WHERE (where_clause).
"      ASSIGN COMPONENT wa_tabrel-lfield OF STRUCTURE <fs_2> TO <fs_join>
" .
"      CONCATENATE '''' <fs_join> '''' INTO where_clause1.
"      CONCATENATE wa_tabrel-rfield 'EQ' where_clause1 INTO where_clause1
" SEPARATED BY space.

"      PERFORM filter_data USING tab2 CHANGING where_clause1.

"      SELECT (lista2) FROM (tab2) INTO CORRESPONDING FIELDS OF <fs_2>
"WHERE (where_clause1).
"        APPEND <fs_2> TO <fs_1>.
"      ENDSELECT.
"    ENDSELECT.
"  ELSE.
"    SELECT (lista1) FROM (tab1) INTO CORRESPONDING FIELDS OF <fs_2>
"WHERE (where_clause).
"      APPEND <fs_2> TO <fs_1>.
"    ENDSELECT.
"  ENDIF.

ENDFORM.                                                    "sel_1
*--------------------------------------------------------------------*
*                            Form  tab_rel                           *
*--------------------------------------------------------------------*
*  Subroutine to obtain the join condition from the database table   *
*  ZINF_FSAU_TABREL                                                  *
*--------------------------------------------------------------------*
FORM tab_rel.
  SELECT * FROM zinf_fsau_tabrel
  INTO TABLE tb_tabrel
  WHERE zmodule = module
  AND   submod = submod.

ENDFORM.                    "table_join
*-----------------------------------------------------------------------
*
*                            Form  blank_or_not
*
*-----------------------------------------------------------------------
*
*  Subroutine to extract the 'blank or not' fields i.e. Fields for
*
*  which we dont need the actual value rather just 'YES' if it contains
*
*  a value and 'NO' if not.
*
*-----------------------------------------------------------------------
*
FORM blank_or_not.
  SELECT fieldname tabname
  INTO TABLE tb_blank
  FROM zinf_fsau_critic
  WHERE zmodule = module
  AND   submod  = submod
  AND   blank = 'X'.
*  AND ( tabname = tab1 OR tabname = tab2 OR tabname =
*tab3 ) .
ENDFORM.                    "blank_or_not
*----------------------------------------------------------------------*
*                            Form  download                            *
*----------------------------------------------------------------------*
*   Subroutine called when 'DOWNLOAD' option is chosen                 *
*----------------------------------------------------------------------*
FORM download .

  IF sy-batch IS INITIAL.

    CALL FUNCTION 'GUI_DOWNLOAD'
      EXPORTING
        filename                = gd_downfile
*      append                  = 'X'
        write_field_separator   = 'X'
      TABLES
*      data_tab                = <fs_final>
        data_tab                = tb_out
      EXCEPTIONS
        file_write_error        = 1
        no_batch                = 2
        gui_refuse_filetransfer = 3
        invalid_type            = 4
        no_authority            = 5
        unknown_error           = 6
        header_not_allowed      = 7
        separator_not_allowed   = 8
        filesize_not_allowed    = 9
        header_too_long         = 10
        dp_error_create         = 11
        dp_error_send           = 12
        dp_error_write          = 13
        unknown_dp_error        = 14
        access_denied           = 15
        dp_out_of_memory        = 16
        disk_full               = 17
        dp_timeout              = 18
        file_not_found          = 19
        dataprovider_exception  = 20
        control_flush_error     = 21
        OTHERS                  = 22.

    IF sy-subrc = 0.
      MESSAGE s000(z_fsau).
    ELSE.
      MESSAGE s010(z_fsau).
    ENDIF.

  ELSE.

*** Creating the file on the server.
    OPEN DATASET f_app FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.
    IF sy-subrc NE 0.
      RAISE file_open_error.
    ENDIF.

*** Writing the entires into the file.
    LOOP AT tb_out INTO wa_out.
      TRANSFER wa_out TO f_app.
    ENDLOOP.

*** closing the file.
    CLOSE DATASET f_app.
    IF sy-subrc NE 0.
      RAISE file_close_error.
    ENDIF.

  ENDIF.
ENDFORM.                    " download
*----------------------------------------------------------------------*
*                         Form  display_output_b                       *
*----------------------------------------------------------------------*
* This form prints the field names of the master data dynamically. The *
* field labels of each of the data element is obtained from the table  *
* dd04t and used as the column headers while displaying the output     *
*----------------------------------------------------------------------*
FORM display_heading_b .
  FORMAT COLOR 1 ON.
  WRITE AT :/60 'MASTER DATA ANALYSIS', underline_length ' '.
  FORMAT COLOR OFF.
  ULINE AT /1(underline_length).
  FORMAT COLOR 2 ON.

  REFRESH tb_display.
  LOOP AT tb1_critical INTO wa_critical WHERE blank = 'M'.
    SELECT fieldname rollname FROM dd03l INTO CORRESPONDING FIELDS OF
    wa_display WHERE ( tabname = wa_critical-tabname AND
                       fieldname = wa_critical-fields AND
                       as4local = 'A' ).
      SELECT scrtext_m FROM dd04t INTO CORRESPONDING FIELDS OF
      wa_display WHERE ( rollname = wa_display-rollname AND
                   ddlanguage = sy-langu AND as4local = 'A' ).
        IF wa_display-scrtext_m = ' '.
          SELECT ddtext FROM dd04t INTO wa_display-scrtext_m
          WHERE ( rollname = wa_display-rollname
          AND ddlanguage = sy-langu AND as4local = 'A' ).
          ENDSELECT.
        ENDIF.
        APPEND wa_display TO tb_display.
      ENDSELECT.
    ENDSELECT.
  ENDLOOP.

  WRITE:/ text-200,sy-vline.
  LOOP AT tb_display INTO wa_display.
    WRITE: wa_display-scrtext_m, sy-vline.
  ENDLOOP.
  WRITE:text-213,sy-vline.
  FORMAT COLOR OFF.
  ULINE AT /1(underline_length).

ENDFORM.                    " display_output_b
*-----------------------------------------------------------------------
*
*                       Form  display_output_b
*
*-----------------------------------------------------------------------
*
* This Subroutine displays the output under the corresponding field
*
* labels dynamically
*
*-----------------------------------------------------------------------
*
FORM display_output_b .
  n = 1.
  ASSIGN COMPONENT 'FREQB' OF STRUCTURE <fs_master_final_wa> TO
<fs_freq>.
  DESCRIBE TABLE tb_display LINES max_fields_b.
  CONCATENATE 'Record' k INTO record SEPARATED BY space.
  WRITE:/ record.
  WHILE n <= max_fields_b.
    READ TABLE tb_display INDEX n INTO wa_display.
    ASSIGN COMPONENT wa_display-fieldname OF STRUCTURE
<fs_master_final_wa> TO <fieldd>.
    CONCATENATE '''' wa_display-scrtext_m '''' INTO heading.
    WRITE:(22) <fieldd> UNDER heading CENTERED .
    n = n + 1.
  ENDWHILE.
  WRITE: <fs_freq> UNDER text-213 CENTERED.
  k = k + 1.
ENDFORM.                    " display_output_b
*-----------------------------------------------------------------------
*------*
*                           Form  unique_list
*      *
*-----------------------------------------------------------------------
*------*
*  This subroutine groups the display fields based on table names and
*utility *
*  lista1 - Utility A fields from table 1
*      *
*  listb1 - Utility B fields from table 1 and so on upto table 3
*      *
*-----------------------------------------------------------------------
*------*
FORM unique_list .
  MOVE ' ' TO lista1.
  MOVE ' ' TO lista2.
  LOOP AT tb1_critical INTO wa_critical.
    IF wa_critical-tabname = tab1 AND wa_critical-blank = 'M'.
      CONCATENATE listb1 wa_critical-fields INTO listb1 SEPARATED BY
space.
    ELSEIF wa_critical-tabname = tab1 AND ( wa_critical-blank = ' ' OR
wa_critical-blank = 'X').
      CONCATENATE lista1 wa_critical-fields INTO lista1 SEPARATED BY
space.
    ELSEIF wa_critical-tabname = tab2 AND wa_critical-blank = 'M'.
      CONCATENATE listb2 wa_critical-fields INTO listb2 SEPARATED BY
space.
    ELSEIF wa_critical-tabname = tab2 AND ( wa_critical-blank = ' ' OR
wa_critical-blank = 'X').
      CONCATENATE lista2 wa_critical-fields INTO lista2 SEPARATED BY
space.
    ELSEIF wa_critical-tabname = tab3 AND wa_critical-blank = 'M'.
      CONCATENATE listb3 wa_critical-fields INTO listb3 SEPARATED BY
space.
    ELSEIF wa_critical-tabname = tab3 AND ( wa_critical-blank = ' ' OR
wa_critical-blank = 'X').
      CONCATENATE lista3 wa_critical-fields INTO lista3 SEPARATED BY
space.
    ENDIF.
  ENDLOOP.
ENDFORM.                    " unique_list
*-----------------------------------------------------------------------
*----*
*                        Form  form_list
*    *
*-----------------------------------------------------------------------
*----*
* This subroutine firms the selection fields used in the select
*statements  *
* according to the tables to which they belong
*    *
*-----------------------------------------------------------------------
*----*
FORM form_list.
  CASE wa_critical-tabname.
    WHEN tab1.
      CONCATENATE lista1 wa_critical-fields INTO lista1 SEPARATED BY
      space.
    WHEN tab2.
      CONCATENATE lista2 wa_critical-fields INTO lista2 SEPARATED BY
      space.
    WHEN tab3.
      CONCATENATE lista3 wa_critical-fields INTO lista3 SEPARATED BY
     space.
  ENDCASE.
ENDFORM.                    "form_list
*-----------------------------------------------------------------------
*------*
*                             Form  filter_data
*      *
*-----------------------------------------------------------------------
*------*
* This subroutine modifies the where clause by adding the filter
*conditions   *
* based on the specific values the user wishes view
*      *
*-----------------------------------------------------------------------
*------*
*  -->  p_tab                 Table name
*      *
*  <--  p_where_Clause        Extended where clause
*      *
*-----------------------------------------------------------------------
*------*
FORM filter_data  USING    p_tab
                  CHANGING p_where_clause.
* To Filter values - Append the condition to the existing where clause
  LOOP AT tb_critical INTO wa_critical WHERE value <> ' ' AND tabname =
p_tab.
    MOVE '' TO multiple_values.
    ASSIGN COMPONENT 'FIELDS' OF STRUCTURE wa_critical TO <field7>.
    ASSIGN COMPONENT 'VALUE' OF STRUCTURE wa_critical TO <field8>.
    TRANSLATE <field8> TO UPPER CASE.
    SPLIT <field8> AT ',' INTO TABLE tb_values.
    LOOP AT tb_values.
      SHIFT tb_values-value LEFT DELETING LEADING ' '.
      CONCATENATE '''' tb_values-value '''' INTO tb_values-value.
      CONCATENATE multiple_values <field7> 'EQ' tb_values-value 'OR'
INTO multiple_values SEPARATED BY space.
    ENDLOOP.
    len = STRLEN( multiple_values ) - 3.
*    REPLACE SECTION OFFSET len LENGTH 3 OF multiple_values WITH ''.
    multiple_values+len(3) = '   '.
    CONCATENATE '(' multiple_values ')' INTO multiple_values SEPARATED
BY space.
    CONCATENATE p_where_clause 'AND' multiple_values INTO p_where_clause
 SEPARATED BY space.
  ENDLOOP.
ENDFORM.                    " filter_data
*-----------------------------------------------------------------------
*-----*
*                              Form  browse_file
*     *
*-----------------------------------------------------------------------
*-----*
*  This subroutine brings up the dialog box used to select the download
*file *
*  path and name
*     *
*-----------------------------------------------------------------------
*-----*
FORM browse_file .
  CLEAR: gd_downfile, filename.
  REFRESH tb_downfile.
  CALL METHOD cl_gui_frontend_services=>file_open_dialog
    EXPORTING
      window_title      = 'Select File for Download'
      default_filename  = '*.xls'
      initial_directory = 'C:\'
      multiselection    = ' '  "No multiple selection
    CHANGING
      file_table        = tb_downfile
      rc                = gd_subrcemp
    EXCEPTIONS
      OTHERS            = 1.
  READ TABLE tb_downfile INDEX gd_subrcemp INTO filename.
  IF NOT filename IS INITIAL.
    gd_downfile = filename.
  ENDIF.
ENDFORM.                    " browse_file
