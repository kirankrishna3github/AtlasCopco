REPORT ZAL_ABAP message-id 26 line-size 255
no standard page heading.
* ZCP1_IFLOT_D.
PARAMETER DOWNLOAD(1) DEFAULT 'S' lower case. "N-svr,Y-clnt
PARAMETER EXECMODE(1) DEFAULT 'B' lower case. "D-dlg,B-btch
PARAMETER OUT_DIR(48) DEFAULT "output file dir
*'/var/load/CP1/UK/read' lower case.
'/var/load/xxx/UK/read' LOWER CASE.
PARAMETER IN_DIR(48) DEFAULT "input file dir
*'/var/load/CP1/UK/read' lower case.
'/var/load/xxx/UK/read' LOWER CASE.
PARAMETER P_DEST TYPE RFCDES-RFCDEST DEFAULT
'NONE'.
PARAMETER P_PROGID TYPE RFCOPT-RFCEXEC DEFAULT
SPACE.
PARAMETER P_GWHOST TYPE RFCOPT-RFCGWHOST DEFAULT
SPACE.
PARAMETER P_GWSERV TYPE RFCOPT-RFCGWSERV DEFAULT
SPACE.
PARAMETER P_SRVFM(30) DEFAULT "Server Callback function
SPACE.
PARAMETER P_PKGSZ TYPE I DEFAULT "Stream package size
5000.
PARAMETER P_SNC_ON(1) DEFAULT "X-on SPACE-off
SPACE.

PARAMETER $PARAM1 TYPE D.

PARAMETER P_DF_VK(40) DEFAULT "ABAP data flow object key
'' lower case.
PARAMETER P_DI_GEN(40) DEFAULT "DI version that generated ABAP
'' lower case.

*** Machine generated ABAP. Do not modify.            ***
*** (C)Copyright Business Objects S.A.  All rights reserved. ***
*
* Date Time:
*    06/28/17 22:22:26
* SAP used for generated this ABAP:
*    Release: 701
*    Host   : 10.25.3.26
*
* ABAP Dataflow Name:
*    DF_R3_CTS_LZ_SAP_CP1_IFLOT_D
* ABAP program name in SAP:
*  ZCP1_IFLOT_D
* Generated ABAP file name:
*    //AIRSBEAP0512/D$/Data/SAPLogistics/VAL/ABAP/ZCP1_IFLOT_D
TABLES IFLOT.
TABLES IFLOTX.
TABLES ILOA.
TABLES ADRC.
TABLES ADR6.

DATA: begin of ITAB5 occurs 0,
TPLNR(30) TYPE C,
OBJNR(22) TYPE C,
PLTXT(40) TYPE C,
PLTXU(40) TYPE C,
VKBUR(4) TYPE C,
VKGRP(3) TYPE C,
NAME1(40) TYPE C,
NAME2(40) TYPE C,
NAME3(40) TYPE C,
NAME4(40) TYPE C,
CITY1(40) TYPE C,
POST_CODE1(10) TYPE C,
STREET(60) TYPE C,
COUNTRY(3) TYPE C,
TEL_NUMBER(30) TYPE C,
ADRNR(10) TYPE C,
REGIOGROUP(8) TYPE C,
REGION(3) TYPE C.
DATA: end of ITAB5.

DATA: begin of ITAB7 occurs 0,
TPLNR(30) TYPE C,
OBJNR(22) TYPE C,
PLTXT(40) TYPE C,
PLTXU(40) TYPE C,
VKBUR(4) TYPE C,
VKGRP(3) TYPE C,
NAME1(40) TYPE C,
NAME2(40) TYPE C,
NAME3(40) TYPE C,
NAME4(40) TYPE C,
CITY1(40) TYPE C,
POST_CODE1(10) TYPE C,
STREET(60) TYPE C,
COUNTRY(3) TYPE C,
TEL_NUMBER(30) TYPE C,
SMTP_ADDR(241) TYPE C,
REGIOGROUP(8) TYPE C,
REGION(3) TYPE C.
DATA: end of ITAB7.

data: append_flag(1) value ' ',
      cntbuf type i,
      delimleng type i,last_batch(1) value ' '.

CONSTANTS C_DF_VK(40) VALUE '816'.
CONSTANTS C_DI_GEN(40) VALUE '14.2.3.660'.
DATA WARN_MSG(50).


DATA: gv_directory     TYPE epsdirnam  VALUE '/var/load/xxx/UK/read/',
      gv_logsys        LIKE tbdlst-logsys.

start-of-selection.
* Logical system
  CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
    IMPORTING
      own_logical_system             = gv_logsys
    EXCEPTIONS
      own_logical_system_not_defined = 1
      OTHERS                         = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE 'E' NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    STOP.
  ENDIF.
  REPLACE 'xxx' IN out_dir WITH gv_logsys(3).
  REPLACE 'xxx' IN in_dir WITH gv_logsys(3).


  IF DOWNLOAD = 'S' OR
     DOWNLOAD = 'N' OR
     DOWNLOAD = 'Y'.
      .
  ELSE.
     DATA: m_xfer_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'data transfer method: ' DOWNLOAD
'. Regenerate the ABAP program and upload to this system.'
     INTO m_xfer_err_msg.
     MESSAGE  E240(S#) WITH m_xfer_err_msg.
  ENDIF.

  IF EXECMODE = 'B' OR
     EXECMODE = 'D'.
      .
  ELSE.
     DATA: m_exec_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'execution option: ' EXECMODE
'. Regenerate the ABAP program and upload to this system.'
     INTO m_exec_err_msg.
     MESSAGE  E240(S#) WITH m_exec_err_msg.
  ENDIF.

  IF DOWNLOAD = 'S'.
     PERFORM CONNECT_RFCDEST_TO_PROGID.
  ENDIF.



PERFORM FORM5.
PERFORM FORM7.
FREE ITAB5.
last_batch = 'X'.
PERFORM FORM8.
FREE ITAB7.
  IF DOWNLOAD = 'S'.
     PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
  ENDIF.


end-of-selection.

CLEAR WARN_MSG.

IF NOT P_DF_VK IS INITIAL.
  IF P_DF_VK <> C_DF_VK.
     CONCATENATE '$$Warning$'
                 C_DF_VK
                 '$' INTO WARN_MSG.
  ENDIF.
ENDIF.
IF NOT P_DI_GEN IS INITIAL.
  IF P_DI_GEN <> C_DI_GEN.
     IF WARN_MSG IS INITIAL.
       CONCATENATE '$$Warning$$'
                   C_DI_GEN
                   INTO WARN_MSG.
     ELSE.
       CONCATENATE WARN_MSG
                   C_DI_GEN
                   INTO WARN_MSG.
     ENDIF.
  ENDIF.
ENDIF.

IF NOT WARN_MSG IS INITIAL.
  IF EXECMODE = 'D'.
    WRITE WARN_MSG.
    NEW-LINE.
  ELSE.
    MESSAGE S240(S#) with WARN_MSG.
  ENDIF.
ENDIF.


write  '* Program Complete *'.
write  '(C)Copyright Business Objects S.A.  All rights reserved.'.

FORM FORM5.
STATICS rowCount TYPE i VALUE 0.
DATA ALTMP73(30) TYPE C.
DATA ALTMP74(22) TYPE C.
DATA ALTMP75(40) TYPE C.
DATA ALTMP76(40) TYPE C.
DATA ALTMP77(4) TYPE C.
DATA ALTMP78(3) TYPE C.
DATA ALTMP79(40) TYPE C.
DATA ALTMP80(40) TYPE C.
DATA ALTMP81(40) TYPE C.
DATA ALTMP82(40) TYPE C.
DATA ALTMP83(40) TYPE C.
DATA ALTMP84(10) TYPE C.
DATA ALTMP85(60) TYPE C.
DATA ALTMP86(3) TYPE C.
DATA ALTMP87(30) TYPE C.
DATA ALTMP88(10) TYPE C.
DATA ALTMP89(8) TYPE C.
DATA ALTMP90(3) TYPE C.

DATA IFLOT9TPLNR LIKE IFLOT-TPLNR.
DATA IFLOT9OBJNR LIKE IFLOT-OBJNR.
DATA IFLOTX9PLTXT LIKE IFLOTX-PLTXT.
DATA IFLOTX9PLTXU LIKE IFLOTX-PLTXU.
DATA ILOA9VKBUR LIKE ILOA-VKBUR.
DATA ILOA9VKGRP LIKE ILOA-VKGRP.
DATA ADRC9NAME1 LIKE ADRC-NAME1.
DATA ADRC9NAME2 LIKE ADRC-NAME2.
DATA ADRC9NAME3 LIKE ADRC-NAME3.
DATA ADRC9NAME4 LIKE ADRC-NAME4.
DATA ADRC9CITY1 LIKE ADRC-CITY1.
DATA ADRC9POST_CODE1 LIKE ADRC-POST_CODE1.
DATA ADRC9STREET LIKE ADRC-STREET.
DATA ADRC9COUNTRY LIKE ADRC-COUNTRY.
DATA ADRC9TEL_NUMBER LIKE ADRC-TEL_NUMBER.
DATA ILOA9ADRNR LIKE ILOA-ADRNR.
DATA ADRC9REGIOGROUP LIKE ADRC-REGIOGROUP.
DATA ADRC9REGION LIKE ADRC-REGION.
DATA IFLOTX9SPRAS LIKE IFLOTX-SPRAS.
DATA ADRC9DATE_TO LIKE ADRC-DATE_TO.
DATA IFLOT9AEDAT LIKE IFLOT-AEDAT.
DATA IFLOT9ERDAT LIKE IFLOT-ERDAT.
DATA ADRC9ADDRNUMBER LIKE ADRC-ADDRNUMBER.
DATA IFLOT9ILOAN LIKE IFLOT-ILOAN.
DATA ILOA9ILOAN LIKE ILOA-ILOAN.
DATA IFLOTX9TPLNR LIKE IFLOTX-TPLNR.



SELECT
  IFLOT9~TPLNR
  IFLOT9~OBJNR
  IFLOTX9~PLTXT
  IFLOTX9~PLTXU
  ILOA9~VKBUR
  ILOA9~VKGRP
  ADRC9~NAME1
  ADRC9~NAME2
  ADRC9~NAME3
  ADRC9~NAME4
  ADRC9~CITY1
  ADRC9~POST_CODE1
  ADRC9~STREET
  ADRC9~COUNTRY
  ADRC9~TEL_NUMBER
  ILOA9~ADRNR
  ADRC9~REGIOGROUP
  ADRC9~REGION
  IFLOTX9~SPRAS
  ADRC9~DATE_TO
  IFLOT9~AEDAT
  IFLOT9~ERDAT
  ADRC9~ADDRNUMBER
  IFLOT9~ILOAN
  ILOA9~ILOAN
  IFLOTX9~TPLNR
into (IFLOT9TPLNR,
  IFLOT9OBJNR,
  IFLOTX9PLTXT,
  IFLOTX9PLTXU,
  ILOA9VKBUR,
  ILOA9VKGRP,
  ADRC9NAME1,
  ADRC9NAME2,
  ADRC9NAME3,
  ADRC9NAME4,
  ADRC9CITY1,
  ADRC9POST_CODE1,
  ADRC9STREET,
  ADRC9COUNTRY,
  ADRC9TEL_NUMBER,
  ILOA9ADRNR,
  ADRC9REGIOGROUP,
  ADRC9REGION,
  IFLOTX9SPRAS,
  ADRC9DATE_TO,
  IFLOT9AEDAT,
  IFLOT9ERDAT,
  ADRC9ADDRNUMBER,
  IFLOT9ILOAN,
  ILOA9ILOAN,
  IFLOTX9TPLNR)
FROM IFLOT AS IFLOT9
 INNER JOIN IFLOTX AS IFLOTX9
 ON ( IFLOT9~TPLNR = IFLOTX9~TPLNR )
 INNER JOIN ILOA AS ILOA9
 ON ( IFLOT9~ILOAN = ILOA9~ILOAN )
 INNER JOIN ADRC AS ADRC9
 ON ( ILOA9~ADRNR = ADRC9~ADDRNUMBER )
WHERE ( ( ( IFLOT9~AEDAT > $PARAM1 )
 OR ( IFLOT9~ERDAT > $PARAM1 ) )
 AND ( ( ADRC9~DATE_TO = '99991231' )
 AND ( IFLOTX9~SPRAS = 'E' ) ) ).
ALTMP73 = IFLOT9TPLNR.
ALTMP74 = IFLOT9OBJNR.
ALTMP75 = IFLOTX9PLTXT.
ALTMP76 = IFLOTX9PLTXU.
ALTMP77 = ILOA9VKBUR.
ALTMP78 = ILOA9VKGRP.
ALTMP79 = ADRC9NAME1.
ALTMP80 = ADRC9NAME2.
ALTMP81 = ADRC9NAME3.
ALTMP82 = ADRC9NAME4.
ALTMP83 = ADRC9CITY1.
ALTMP84 = ADRC9POST_CODE1.
ALTMP85 = ADRC9STREET.
ALTMP86 = ADRC9COUNTRY.
ALTMP87 = ADRC9TEL_NUMBER.
ALTMP88 = ILOA9ADRNR.
ALTMP89 = ADRC9REGIOGROUP.
ALTMP90 = ADRC9REGION.
 move ALTMP73 to ITAB5-TPLNR.
 move ALTMP74 to ITAB5-OBJNR.
 move ALTMP75 to ITAB5-PLTXT.
 move ALTMP76 to ITAB5-PLTXU.
 move ALTMP77 to ITAB5-VKBUR.
 move ALTMP78 to ITAB5-VKGRP.
 move ALTMP79 to ITAB5-NAME1.
 move ALTMP80 to ITAB5-NAME2.
 move ALTMP81 to ITAB5-NAME3.
 move ALTMP82 to ITAB5-NAME4.
 move ALTMP83 to ITAB5-CITY1.
 move ALTMP84 to ITAB5-POST_CODE1.
 move ALTMP85 to ITAB5-STREET.
 move ALTMP86 to ITAB5-COUNTRY.
 move ALTMP87 to ITAB5-TEL_NUMBER.
 move ALTMP88 to ITAB5-ADRNR.
 move ALTMP89 to ITAB5-REGIOGROUP.
 move ALTMP90 to ITAB5-REGION.
 append ITAB5.
rowCount = rowCount + 1.
IF ( download = 'S' ).
 IF ( rowCount = P_PKGSZ ).
   PERFORM FORM7.
   REFRESH ITAB5.
   rowCount = 0.
 ENDIF.
ELSE.
 IF ( rowCount = 5000 ).
   PERFORM FORM7.
   REFRESH ITAB5.
   rowCount = 0.
 ENDIF.
ENDIF.
ENDSELECT.
ENDFORM.

FORM FORM7.
STATICS firstRun(1) TYPE C VALUE 'Y'.
DATA ALTMP91(30) TYPE C.
DATA ALTMP92(22) TYPE C.
DATA ALTMP93(40) TYPE C.
DATA ALTMP94(40) TYPE C.
DATA ALTMP95(4) TYPE C.
DATA ALTMP96(3) TYPE C.
DATA ALTMP97(40) TYPE C.
DATA ALTMP98(40) TYPE C.
DATA ALTMP99(40) TYPE C.
DATA ALTMP100(40) TYPE C.
DATA ALTMP101(40) TYPE C.
DATA ALTMP102(10) TYPE C.
DATA ALTMP103(60) TYPE C.
DATA ALTMP104(3) TYPE C.
DATA ALTMP105(30) TYPE C.
DATA ALTMP106(241) TYPE C.
DATA ALTMP107(8) TYPE C.
DATA ALTMP108(3) TYPE C.
DATA ALOJF0 TYPE C.
DATA ALOJF1 TYPE C.



LOOP AT ITAB5.
ALTMP91 = ITAB5-TPLNR.
ALTMP92 = ITAB5-OBJNR.
ALTMP93 = ITAB5-PLTXT.
ALTMP94 = ITAB5-PLTXU.
ALTMP95 = ITAB5-VKBUR.
ALTMP96 = ITAB5-VKGRP.
ALTMP97 = ITAB5-NAME1.
ALTMP98 = ITAB5-NAME2.
ALTMP99 = ITAB5-NAME3.
ALTMP100 = ITAB5-NAME4.
ALTMP101 = ITAB5-CITY1.
ALTMP102 = ITAB5-POST_CODE1.
ALTMP103 = ITAB5-STREET.
ALTMP104 = ITAB5-COUNTRY.
ALTMP105 = ITAB5-TEL_NUMBER.
ALTMP107 = ITAB5-REGIOGROUP.
ALTMP108 = ITAB5-REGION.
ALOJF0 = 'Y'.
ALOJF1 = 'N'.
IF ( ALOJF0 = 'Y' ).

SELECT
  SMTP_ADDR
  ADDRNUMBER
  FLGDEFAULT
INTO CORRESPONDING FIELDS OF ADR6
FROM ADR6
WHERE ( ( FLGDEFAULT = 'X' )
 AND ( ADDRNUMBER = ITAB5-ADRNR ) ).
if ADR6-SMTP_ADDR = ''.
move 'N/A' to ALTMP106.
else.
move ADR6-SMTP_ADDR to ALTMP106.
endif.
ALOJF1 = 'Y'.
 move ALTMP91 to ITAB7-TPLNR.
 move ALTMP92 to ITAB7-OBJNR.
 move ALTMP93 to ITAB7-PLTXT.
 move ALTMP94 to ITAB7-PLTXU.
 move ALTMP95 to ITAB7-VKBUR.
 move ALTMP96 to ITAB7-VKGRP.
 move ALTMP97 to ITAB7-NAME1.
 move ALTMP98 to ITAB7-NAME2.
 move ALTMP99 to ITAB7-NAME3.
 move ALTMP100 to ITAB7-NAME4.
 move ALTMP101 to ITAB7-CITY1.
 move ALTMP102 to ITAB7-POST_CODE1.
 move ALTMP103 to ITAB7-STREET.
 move ALTMP104 to ITAB7-COUNTRY.
 move ALTMP105 to ITAB7-TEL_NUMBER.
 move ALTMP106 to ITAB7-SMTP_ADDR.
 move ALTMP107 to ITAB7-REGIOGROUP.
 move ALTMP108 to ITAB7-REGION.
 append ITAB7.
firstRun = 'N' .
 cntbuf = cntbuf + 1.
 if download = 'N'.
  if cntbuf > 5000.
    perform FORM8.
    clear cntbuf.
    refresh ITAB7.
    append_flag = 'A'.
  endif.
 endif.
 if download = 'S'.
  if cntbuf > P_PKGSZ.
    perform FORM8.
    clear cntbuf.
    refresh ITAB7.
  endif.
 endif.
ENDSELECT.
ENDIF.
IF ( ALOJF1 = 'N' ).
clear ADR6-SMTP_ADDR.
clear ADR6-ADDRNUMBER.
clear ADR6-FLGDEFAULT.
if ADR6-SMTP_ADDR = ''.
move 'N/A' to ALTMP106.
else.
move ADR6-SMTP_ADDR to ALTMP106.
endif.
 move ALTMP91 to ITAB7-TPLNR.
 move ALTMP92 to ITAB7-OBJNR.
 move ALTMP93 to ITAB7-PLTXT.
 move ALTMP94 to ITAB7-PLTXU.
 move ALTMP95 to ITAB7-VKBUR.
 move ALTMP96 to ITAB7-VKGRP.
 move ALTMP97 to ITAB7-NAME1.
 move ALTMP98 to ITAB7-NAME2.
 move ALTMP99 to ITAB7-NAME3.
 move ALTMP100 to ITAB7-NAME4.
 move ALTMP101 to ITAB7-CITY1.
 move ALTMP102 to ITAB7-POST_CODE1.
 move ALTMP103 to ITAB7-STREET.
 move ALTMP104 to ITAB7-COUNTRY.
 move ALTMP105 to ITAB7-TEL_NUMBER.
 move ALTMP106 to ITAB7-SMTP_ADDR.
 move ALTMP107 to ITAB7-REGIOGROUP.
 move ALTMP108 to ITAB7-REGION.
 append ITAB7.
firstRun = 'N' .
 cntbuf = cntbuf + 1.
 if download = 'N'.
  if cntbuf > 5000.
    perform FORM8.
    clear cntbuf.
    refresh ITAB7.
    append_flag = 'A'.
  endif.
 endif.
 if download = 'S'.
  if cntbuf > P_PKGSZ.
    perform FORM8.
    clear cntbuf.
    refresh ITAB7.
  endif.
 endif.
ENDIF.
ENDLOOP.
ENDFORM.

FORM FORM8.
data: outfile(512), ldfile(50).
ldfile = 'CTS_IFLOT_D.dat'.
concatenate out_dir ldfile into outfile
  separated by '/'.
  IF DOWNLOAD = 'S'.
     DATA: error_message(700),mtext(800),iEOP(1).
     CALL FUNCTION P_SRVFM
          DESTINATION P_DEST
          KEEPING LOGICAL UNIT OF WORK
          EXPORTING
            EOS = last_batch
          IMPORTING
            EOP = iEOP
          TABLES
            E_TABLE = ITAB7
          EXCEPTIONS
            READ_ERROR = 1
            SYSTEM_FAILURE = 2
            MESSAGE error_message
            COMMUNICATION_FAILURE = 3
            MESSAGE error_message
            OTHERS = 4.

     IF sy-subrc ne 0.
        Case sy-subrc.
        when 1.
        CONCATENATE
        'Data Services read error. '
        'Check Data Services error log.'
        INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 2.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 3.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 4.
        MESSAGE  E240(S#) WITH
'Other SAP System Failure while calling DS remote function.'.
        endcase.
      ENDIF.
      IF iEOP = 'X'.
         PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
         LEAVE PROGRAM.
       ENDIF.
  ELSE.
data  dlmtlen type i value '1'.
data xdlmtlen type i value '1'.
data:
  ht(1) type c,
  xht(1) type x,
  conv type ref to cl_abap_conv_in_ce.
xht = '7F'.
conv = cl_abap_conv_in_ce=>create(
  encoding = '1100'
  input = xht
).
call method conv->read(
  exporting n    = xdlmtlen
  importing data = ht
            len = dlmtlen
).
data return_code type i.
 perform write_delimited_file
           tables   ITAB7
           using    outfile
                    append_flag
                    ht
                    dlmtlen
                    download
           changing return_code.

  case return_code.
    when 1.
      IF EXECMODE = 'D'.
        WRITE: /5 'No line selected'.
      ELSE.
        MESSAGE E047(S#).
      ENDIF.
    when 2.
      IF EXECMODE = 'D'.
        WRITE: /5 'Open File Error -- ', 25 OUTFILE.
      ELSE.
        MESSAGE  E084(E0) WITH OUTFILE.
      ENDIF.
    when 3.
      IF EXECMODE = 'D'.
        WRITE: /5 'Data exceed length limit (8192) '.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Data exceed length limit (8192) '.
      ENDIF.
    when 4.
      IF EXECMODE = 'D'.
        WRITE: /5 'Call function WS_DOWNLOAD error'.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Call function WS_DOWNLOAD error'.
      ENDIF.
  endcase.
 ENDIF.
ENDFORM.

FORM SUBSTRING USING SRC BEG LEN CHANGING RET.

DATA: VA1 TYPE I.
DATA: VA2 TYPE I.
DATA: VA3 TYPE I.

VA3 = STRLEN( SRC ).

IF  BEG = 0.   VA1 = 0.
ELSE.
  IF  BEG < 0.
    VA1 = VA3 + BEG.
    IF  VA1 < 0.   VA1 = 0.
    ENDIF.
  ELSE.          VA1 = BEG - 1.
  ENDIF.
ENDIF.

IF  LEN < 0.   VA2 = 0.
ELSE.          VA2 = VA3 - VA1.
ENDIF.

IF  VA2 > LEN. VA2 = LEN.
ENDIF.

IF  VA2 < 1.   MOVE ''           TO RET.
ELSE.          MOVE SRC+VA1(VA2) TO RET.
ENDIF.

ENDFORM.

form write_delimited_file
           tables   datatab
           using    file
                    append
                    delimit
                    dlength
                    dwnload
          changing rc.

  data: type1,
        appd(1),
        temp(32),
        time1(8),
        date1(10),
        output(8192),
        rcount type i,
        offset type i,
        tablen type i,
        maxlen type i value '8192'.

  data: begin of clientab occurs 0,
             output(8192),
          end of clientab.

  field-symbols: <f>.
  field-symbols <delim1>.
  data delim2(16).
  data l_filename type string.

  appd = append.
  if appd is not initial.
     appd = 'X'.
  endif.
  move file to l_filename.
  describe table datatab lines tablen.


  if dwnload = 'Y'.
     clear clientab. refresh clientab.
     rcount = 0.
  else.
     if appd = space.
   open dataset file for output in text mode ENCODING UTF-8.
     else.
    open dataset file for appending in text mode ENCODING UTF-8.
     endif.
     if sy-subrc <> 0.
         rc = 2. exit.
     endif.
  endif.

  loop at datatab.
    clear: tablen, offset, output.
    do.
      assign component sy-index of
         structure datatab to <f>.
      if sy-subrc <> 0. exit. endif.
      if sy-index > 1.
         assign delimit(dlength) TO <delim1> CASTING TYPE C.
         delim2 = <delim1>.
         write delim2(dlength) to output+offset(dlength).
         add dlength to offset.
      endif.

      describe field <f> type type1.

      if type1 = 'I' or type1 = 'N'.
          type1 = 'P'.
      endif.

      case type1.
        when 'D'.
          if <f> = '00000000'.
             <f> = ' '.
          else.
             move <f> to time1.
             assign time1 to <f>.
          endif.
        when 'F'.
          if <f> = '0.0'.
            temp = '0.0'.
          else.
             write <f> to temp exponent 0.
          endif.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
        when 'P'.
          if <f> < 0.
             write '-' to output+offset(1).
             add 1 to offset.
             <f> = <f> * ( -1 ).
          endif.
          move <f> to temp.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
      endcase.

      sy-fdpos = strlen( <f> ).

      tablen = offset + sy-fdpos.
      if tablen > maxlen.
         rc = 3. exit.
      endif.
      write <f> to output+offset(sy-fdpos).
      add sy-fdpos to offset.
    enddo.

    if dwnload = 'Y'.
       clientab-output = output.
       append clientab.
       rcount = rcount + 1.
       if rcount >= 50.
          SY-BATCH = SPACE.
          CALL FUNCTION 'GUI_DOWNLOAD'
            EXPORTING
              FILENAME = l_filename
              FILETYPE = 'ASC'
              CODEPAGE = '4110'
              APPEND   = appd
              WRITE_FIELD_SEPARATOR = 'X'
*            IMPORTING
*              FILELENGTH =
            TABLES
              DATA_TAB = clientab
            EXCEPTIONS
              OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
          clear clientab. refresh clientab.
          rcount = 0. appd = 'A'.
       endif.
    else.
       transfer output to file.
    endif.
  endloop.

  if dwnload = 'Y'.
       SY-BATCH = SPACE.
       CALL FUNCTION 'GUI_DOWNLOAD'
         EXPORTING
           FILENAME = l_filename
           FILETYPE = 'ASC'
              CODEPAGE = '4110'
           APPEND   = appd
           WRITE_FIELD_SEPARATOR = 'X'
*         IMPORTING
*           FILELENGTH =
         TABLES
           DATA_TAB = clientab
         EXCEPTIONS
           OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
  else.
       close dataset file.
  endif.
endform.

FORM CONNECT_RFCDEST_TO_PROGID.
 INCLUDE rfctypes.

 DATA: len     type i,
       R3NAME(4),
       SYSTNR(2),
       uid     LIKE SYS_UID,
       options LIKE RFCOPT,
       isunicode  TYPE n.

 DATA: NTOTAL     LIKE GWY_STRUCT-NOREG,
       GWY_GWHOST LIKE GWY_STRUCT-GWHOST,
       GWY_GWSERV LIKE GWY_STRUCT-GWSERV,
       GWY_TPNAME LIKE GWY_SYSTEM-TPNAME.

 TABLES: RFCSI.

* Check program ID
 IF P_PROGID = SPACE.							
    RAISE INVALID_PROGRAM_ID.
 ENDIF.

* determine if the RFC destination authority
  CALL FUNCTION 'RFC_READ_TCPIP_DESTINATION'
       EXPORTING destination = P_DEST
                 authority_check = 'X'
  IMPORTING rfcunicode = isunicode.

* Use current gateway if no info exits
 IF P_GWHOST = SPACE OR P_GWSERV = SPACE.
  CALL FUNCTION 'RFC_SYSTEM_INFO'
      IMPORTING
          RFCSI_EXPORT = RFCSI.

  len = strlen( rfcsi-rfcdest ) - 2.
  systnr = rfcsi-rfcdest+len.
  len = len - 1 - 3.
  r3name = rfcsi-rfcdest+len(3).
  len = len - 1.
  options-rfcgwhost = rfcsi-rfcdest(len).
  CONCATENATE 'sapgw' SYSTNR INTO options-rfcgwserv.
 ELSE.
   options-rfcgwhost = P_GWHOST.
   options-rfcgwserv = P_GWSERV.
 ENDIF.

* Parameters for GWY function call
  GWY_GWHOST = OPTIONS-RFCGWHOST.
  GWY_GWSERV = OPTIONS-RFCGWSERV.
  GWY_TPNAME = P_PROGID.

* Check gateway and server program registered
  CALL FUNCTION 'GWY_GET_NO_REG_PROGRAMS'
     EXPORTING
        GWHOST      = GWY_GWHOST
        GWSERV      = GWY_GWSERV
        TPNAME      = GWY_TPNAME
     IMPORTING
        NOREG_TOTAL = NTOTAL
     EXCEPTIONS
        OTHERS      = 1.

  IF sy-subrc NE 0.
     raise CONNECT_TO_GATEWAY_FAILED.
  ENDIF.

  IF NTOTAL = 0.
     raise SERVER_NOT_REGISTERED.
  ENDIF.

  IF NTOTAL GT 1.
     raise DUPLICATE_REG_PROGRAMS.
  ENDIF.

* build new connection to a registered server
  options-rfcexec   = gwy_tpname.
  options-rfcgwhost = gwy_gwhost.
  options-rfcgwserv = gwy_gwserv.
  options-rfchost   = '%%RFCSERVER%%'.
  IF P_SNC_ON = 'X'.
    options-rfcsnc  = 'X'.
  ENDIF.

  CALL 'RFCControl' ID 'CODE' FIELD 'O'
                    ID 'DESTINATION' FIELD P_DEST
                    ID 'TYPE' FIELD rfctype_external_tcp
                    ID 'OPTIONS' FIELD options.

  IF sy-subrc NE 0.
     RAISE CONNECT_TO_REG_SERVER_FAILED.
   ENDIF.

* and set exclusive mode to keep server owned
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
      EXPORTING  destination = P_DEST
                 exclusiv    = 'Y'
      EXCEPTIONS connect_to_reg_server_failed = 1
                 exclusiv_not_supported       = 2.

  IF SY-SUBRC NE 0.
     CASE SY-SUBRC.
          WHEN 1.
              RAISE CONNECT_TO_REG_SERVER_FAILED.
          WHEN 2.
              RAISE EXCLUSIV_NOT_SUPPORTED.
     ENDCASE.
  ENDIF.

ENDFORM.

FORM DISCONNECT_RFCDEST_FROM_PROGID.
* set exclusive mode to E to end the session
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
     EXPORTING
         destination = P_DEST
         exclusiv    = 'E'
     EXCEPTIONS
         connect_to_reg_server_failed = 1				
         exclusiv_not_supported       = 2.
ENDFORM.
