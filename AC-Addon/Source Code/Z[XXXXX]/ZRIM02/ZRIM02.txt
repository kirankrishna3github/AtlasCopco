REPORT ZRIM02 MESSAGE-ID FB.
************************************************************************
*        Erzeugen von Testdaten f¨¹r Batch-Input:
*                     DEBITORstammdaten
*        Verschiedene Testsituationen unterst¨¹tzt.
************************************************************************
*        Erweiterung der Strukturen:
*        1.1H
*           BKNA1-STCEG(20)       Umsatzst.-Id.Nr.
*        1.2A
*           BKNA1-STKZN(1)        Nat¨¹rliche Person
*           BKNB1-ALTKN(10)       Alte Kontonummer
*        1.3A
*           BKNKK                 --> 9 neue Felder
*           BKNB1-ZGRUP(2)        Zahlungsgruppierung
*           BKNBK-BNKLZ(15        Bankleitzahl im Funktionsteil
*        2.0A
*           BKNA1-TXJCD(15)       Steuerstandort
************************************************************************


PARAMETERS: MANDT        LIKE SY-MANDT DEFAULT SY-MANDT,
            DS_NAME(40)  TYPE C
*              DEFAULT '/tmp/RFBIDE00' LOWER CASE
               DEFAULT '/sapmnt/hs0017/a/FI/customer' LOWER CASE
                         OBLIGATORY,
            USNAM        LIKE SY-UNAME DEFAULT SY-UNAME,
            TCODE        LIKE SY-TCODE DEFAULT 'XD02',
            GR_COUNT(2)  TYPE C DEFAULT 1,
            GR_NAME1(12) TYPE C DEFAULT 'debitor1',
            GR_NAME2(12) TYPE C DEFAULT 'debitor',
            TR_COUNT(8)  TYPE C DEFAULT '1',
            BV_COUNT(8)  TYPE C DEFAULT '0',
            AS_COUNT(8)  TYPE C DEFAULT '0',
            AH_COUNT(8)  TYPE C DEFAULT '0',
            AP_COUNT(8)  TYPE C DEFAULT '0',
            ST_COUNT(8)  TYPE C DEFAULT '0',
            LI_COUNT(8)  TYPE C DEFAULT '0',
            NA_COUNT(8)  TYPE C DEFAULT '0',
            PR_COUNT(8)  TYPE C DEFAULT '0'.

*-----------------------------------------------------------------------
*        Tabellen
*-----------------------------------------------------------------------
TABLES:  BGR00,                        " Batch-Input Mappendaten
         BKN00,                        " Batch-Input Kopfsatz
         BKNA1,                        " Batch-Input DEBI. Allg.Teil
         BKNB1,                        " Batch-Input DEBI. Bukrs-Daten
         BKNB5,                        " Batch-Input DEBI. Mahndaten
         BKNBK,                        " Batch-Input DEBI. Bankverbind.
         BKNEX,                        " Batch-Input Au#enhandel
         BKNKA,                        " Batch-Input Kreditlimit zentr.
         BKNKK,                        " Batch-Input Kreditlimit KKBER
         BKNVV,                        " Batch-Input DEBI. Vertriebsdat
         BKNVA,                        " Batch-Input DEBI. Abladestelle
         BKNVD,                        " Batch-Input DEBI. Nachrichten
         BKNVI,                        " Batch-Input DEBI. Steuern
         BKNVK,                        " Batch-Input DEBI. AnsprPartner
         BKNVL,                        " Batch-Input DEBI. Lizenzen
         BKNVP.                        " Batch-Input DEBI. Partnerrolle

*------- Einzelfelder --------------------------------------------------
DATA:    CHAR(50)        TYPE C.          " Hilfsfeld
DATA:    BANKV(3)        TYPE N.          " Bankverbindung
DATA:    GROUP(3)        TYPE N.          " Mappe
DATA:    TRANS(3)        TYPE N.          " Transaktion
DATA:    INDEX(3)        TYPE N.          " Index f¨¹r Step-Loop-Bilder

*------- Konstanten ----------------------------------------------------
DATA:    C_NODATA(1)  TYPE C VALUE '/'.   " Default NODATA

*eject
************************************************************************
*        Hauptablauf  Anfang
************************************************************************

************************************************************************
*STOP.         " Nach Kopieren des Reports diese Zeile l#schen
************************************************************************



*------- Dataset #ffnen ------------------------------------------------
OPEN DATASET DS_NAME FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.

*------- Strukturen einmal mit NODATA initialisieren -------------------
PERFORM INIT_STRUKTUREN_ERZEUGEN(RFBIDEI0) USING C_NODATA.

*-----------------------------------------------------------------------
*        Mappen erstellen
*-----------------------------------------------------------------------
CLEAR GROUP.
DO GR_COUNT TIMES.
  GROUP = GROUP + 1.
  PERFORM BGR00_DATEN.


*-----------------------------------------------------------------------
*        Transaktionen (Stamms#tze) erstellen
*-----------------------------------------------------------------------
  CLEAR TRANS.
  DO TR_COUNT TIMES.
    TRANS = TRANS + 1.
    CASE TCODE.
      WHEN 'XD01'.
        PERFORM TRANS_ANLEGEN.
      WHEN 'XD02'.
        PERFORM TRANS_AENDERN.
      WHEN 'XD05'.
        PERFORM TRANS_SPERREN.
      WHEN 'XD06'.
        PERFORM TRANS_LOEVM.
      WHEN 'FD32'.
        PERFORM TRANS_FD32.
      WHEN 'FD20'.                          " ab 1.3A durch FD32
        PERFORM TRANS_FD20.                 " ersetzt
      WHEN 'FD22'.                          "         "
        PERFORM TRANS_FD22.                 "         "

*------- einmal alles durchtesten ... ----------------------------------
      WHEN '*'.
        PERFORM TRANS_ANLEGEN.
        PERFORM TRANS_AENDERN.
        PERFORM TRANS_SPERREN.
        PERFORM TRANS_LOEVM.
        PERFORM TRANS_FD32.
        PERFORM TRANS_FD20.
        PERFORM TRANS_FD22.
      WHEN OTHERS.
        MESSAGE A899
          WITH 'Transaction ' TCODE ' nicht unterstuetzt'.   "#EC NOTEXT
    ENDCASE.
  ENDDO.
ENDDO.

*------- Dataset schliessen --------------------------------------------
CLOSE DATASET DS_NAME.

*------- Bearbeitungsmeldung -------------------------------------------
SKIP 3.
WRITE: / '      ******************************************************'.
WRITE: / '      Batch-Input-Test: DEBITOR-Stammdaten '.      "#EC NOTEXT
WRITE: / '      ----------------------------------------'.
WRITE: / '      Testdaten fuer Batch-Input wurden erzeugt.'. "#EC NOTEXT
WRITE: / '      Name des sequentiellen Files: ', DS_NAME.    "#EC NOTEXT
WRITE:
     / '      Es wurde(n) ', GR_COUNT, ' Mappe(n) erzeugt '. "#EC NOTEXT
WRITE: / '      ******************************************************'.

************************************************************************
*        Hauptablauf  Ende
************************************************************************
*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BGR00_DATEN                                       *
*---------------------------------------------------------------------*
*        Mappenvorsatz                                                *
*---------------------------------------------------------------------*
FORM BGR00_DATEN.
  PERFORM INIT_BGR00(RFBIDEI0) USING BGR00.
  BGR00-MANDT = MANDT.
  CASE GROUP.
    WHEN '1'.
      BGR00-GROUP     = GR_NAME1.
    WHEN '2'.
      BGR00-GROUP     = GR_NAME2.
    WHEN OTHERS.
      BGR00-GROUP     = GR_NAME2.
  ENDCASE.
  BGR00-USNAM  = USNAM.
* BGR00-START  = '19920522'.
* BGR00-XKEEP  = space.
  BGR00-NODATA = C_NODATA.
  TRANSFER BGR00 TO DS_NAME.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE TRANS_ANLEGEN
*---------------------------------------------------------------------*
FORM TRANS_ANLEGEN.
  PERFORM BKN00_ANLEGEN.
  PERFORM BKNA1_DATEN.
  CLEAR BANKV.
  DO BV_COUNT TIMES.
    BANKV = BANKV + 1.
    PERFORM BKNBK_DATEN.
  ENDDO.
  CLEAR INDEX.
  DO AS_COUNT TIMES.
    INDEX = INDEX + 1.
    PERFORM BKNVA_DATEN.
  ENDDO.
  CLEAR INDEX.
  DO AH_COUNT TIMES.
    INDEX = INDEX + 1.
    PERFORM BKNEX_DATEN.
  ENDDO.
  CLEAR INDEX.
  DO AP_COUNT TIMES.
    INDEX = INDEX + 1.
    PERFORM BKNVK_DATEN.
  ENDDO.
  PERFORM BKNB1_DATEN.
  PERFORM BKNB5_DATEN.
  PERFORM BKNVV_DATEN.
  CLEAR INDEX.
  DO ST_COUNT TIMES.
    INDEX = INDEX + 1.
    PERFORM BKNVI_DATEN.
  ENDDO.
  CLEAR INDEX.
  DO LI_COUNT TIMES.
    INDEX = INDEX + 1.
    PERFORM BKNVL_DATEN.
  ENDDO.
  CLEAR INDEX.
  DO NA_COUNT TIMES.
    INDEX = INDEX + 1.
    PERFORM BKNVD_DATEN.
  ENDDO.
  CLEAR INDEX.
  DO PR_COUNT TIMES.
    INDEX = INDEX + 1.
    PERFORM BKNVP_DATEN.
  ENDDO.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE TRANS_AENDERN
*---------------------------------------------------------------------*
FORM TRANS_AENDERN.
  PERFORM BKN00_AENDERN.
* PERFORM BKNA1_DATEN.
  CLEAR BANKV.
  DO BV_COUNT TIMES.
    BANKV = BANKV + 1.
    PERFORM BKNBK_DATEN.
  ENDDO.
  CLEAR INDEX.
  DO AS_COUNT TIMES.
    INDEX = INDEX + 1.
    PERFORM BKNVA_DATEN.
  ENDDO.
  CLEAR INDEX.
  DO AH_COUNT TIMES.
    INDEX = INDEX + 1.
    PERFORM BKNEX_DATEN.
  ENDDO.
  CLEAR INDEX.
  DO AP_COUNT TIMES.
    INDEX = INDEX + 1.
    PERFORM BKNVK_DATEN.
  ENDDO.
* PERFORM BKNB1_DATEN.
* PERFORM BKNB5_DATEN.
* PERFORM BKNVV_DATEN.
  CLEAR INDEX.
  DO ST_COUNT TIMES.
    INDEX = INDEX + 1.
    PERFORM BKNVI_DATEN.
  ENDDO.
  CLEAR INDEX.
  DO LI_COUNT TIMES.
    INDEX = INDEX + 1.
    PERFORM BKNVL_DATEN.
  ENDDO.
  CLEAR INDEX.
  DO NA_COUNT TIMES.
    INDEX = INDEX + 1.
    PERFORM BKNVD_DATEN.
  ENDDO.
  CLEAR INDEX.
  DO PR_COUNT TIMES.
    INDEX = INDEX + 1.
    PERFORM BKNVP_DATEN.
  ENDDO.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE TRANS_SPERREN
*---------------------------------------------------------------------*
FORM TRANS_SPERREN.
  PERFORM BKN00_XD05.
  PERFORM BKNA1_DATEN_XD05.
  PERFORM BKNB1_DATEN_XD05.
  PERFORM BKNVV_DATEN_XD05.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE TRANS_LOEVM
*---------------------------------------------------------------------*
FORM TRANS_LOEVM.
  PERFORM BKN00_XD06.
  PERFORM BKNA1_DATEN_XD06.
  PERFORM BKNB1_DATEN_XD06.
  PERFORM BKNVV_DATEN_XD06.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE TRANS_FD32
*---------------------------------------------------------------------*
FORM TRANS_FD32.
  PERFORM BKN00_FD32.
* PERFORM BKNKA_DATEN.
  PERFORM BKNKK_DATEN.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE TRANS_FD20
*---------------------------------------------------------------------*
FORM TRANS_FD20.
  PERFORM BKN00_FD20.
  PERFORM BKNKA_DATEN.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE TRANS_FD22
*---------------------------------------------------------------------*
FORM TRANS_FD22.
  PERFORM BKN00_FD22.
  PERFORM BKNKK_DATEN.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKN00_ANLEGEN                                     *
*---------------------------------------------------------------------*
*        Kopfsatz mit Testdaten f¨¹llen  (Einstiegsbild) XD01          *
*---------------------------------------------------------------------*
FORM BKN00_ANLEGEN.
  PERFORM INIT_BKN00(RFBIDEI0) USING BKN00.
  BKN00-TCODE   = 'XD01'.
  BKN00-KTOKD   = 'KUNA'.
  CASE TRANS.
    WHEN 1.
      BKN00-KUNNR     = 'BI-4712'.
      BKN00-BUKRS     = '0001'.
      BKN00-VKORG     = '0001'.
      BKN00-VTWEG     = '01'.
      BKN00-SPART     = '01'.
    WHEN 2.
      BKN00-KUNNR     = '0000012300'.
      BKN00-BUKRS     = '0001'.
      BKN00-VKORG     = '0001'.
      BKN00-VTWEG     = '01'.
      BKN00-SPART     = '01'.
    WHEN OTHERS.
      BKN00-KUNNR     = '12300'.
      BKN00-BUKRS     = '0001'.
      BKN00-VKORG     = '0001'.
      BKN00-VTWEG     = '01'.
      BKN00-SPART     = '01'.
  ENDCASE.
  TRANSFER BKN00 TO DS_NAME.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKN00_AENDERN                                     *
*---------------------------------------------------------------------*
*        Kopfsatz mit Testdaten f¨¹llen  (Einstiegsbild)               *
*---------------------------------------------------------------------*
FORM BKN00_AENDERN.
  PERFORM INIT_BKN00(RFBIDEI0) USING BKN00.
  BKN00-TCODE = 'XD02'.
  CASE TRANS.
    WHEN 1.
      BKN00-KUNNR     = '90085'.
      BKN00-BUKRS     = '0001'.
      BKN00-VKORG     = '0001'.
      BKN00-VTWEG     = '01'.
      BKN00-SPART     = '01'.
    WHEN 2.
      BKN00-KUNNR     = 'BI-4711'.
      BKN00-BUKRS     = '0001'.
      BKN00-VKORG     = '0001'.
      BKN00-VTWEG     = '01'.
      BKN00-SPART     = '01'.
    WHEN OTHERS.
      BKN00-KUNNR     = '0815'.
      BKN00-BUKRS     = '0001'.
      BKN00-VKORG     = '0001'.
      BKN00-VTWEG     = '01'.
      BKN00-SPART     = '01'.
  ENDCASE.
  TRANSFER BKN00 TO DS_NAME.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKN00_FD32                                        *
*---------------------------------------------------------------------*
*        Einstiegsbild FD32
*---------------------------------------------------------------------*
FORM BKN00_FD32.
  PERFORM INIT_BKN00(RFBIDEI0) USING BKN00.
  BKN00-TCODE   = 'FD32'.
  CASE TRANS.
    WHEN 1.
      BKN00-KUNNR     = 'BI-4711'.
      BKN00-KKBER     = 'D1  '.
    WHEN OTHERS.
      BKN00-KUNNR     = 'BI-4711'.
*     BKN00-KKBER     = 'D2  '.
  ENDCASE.
  TRANSFER BKN00 TO DS_NAME.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKN00_FD20                                        *
*---------------------------------------------------------------------*
*        Einstiegsbild FD20
*---------------------------------------------------------------------*
FORM BKN00_FD20.
  PERFORM INIT_BKN00(RFBIDEI0) USING BKN00.
  BKN00-TCODE   = 'FD20'.
  CASE TRANS.
    WHEN 1.
      BKN00-KUNNR     = 'BI-4711'.
    WHEN OTHERS.
      BKN00-KUNNR     = 'IHRIG'.
  ENDCASE.
  TRANSFER BKN00 TO DS_NAME.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKN00_FD22                                        *
*---------------------------------------------------------------------*
*        Einstiegsbild FD22
*---------------------------------------------------------------------*
FORM BKN00_FD22.
  PERFORM INIT_BKN00(RFBIDEI0) USING BKN00.
  BKN00-TCODE   = 'FD22'.
  CASE TRANS.
    WHEN 1.
      BKN00-KUNNR     = 'BI-4711'.
      BKN00-KKBER     = 'D1'.
    WHEN OTHERS.
      BKN00-KUNNR     = 'IHRIG'.
      BKN00-KKBER     = 'D1'.
  ENDCASE.
  TRANSFER BKN00 TO DS_NAME.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKN00_XD05                                        *
*---------------------------------------------------------------------*
*        Einstiegsbild XD05 Sperren
*---------------------------------------------------------------------*
FORM BKN00_XD05.
  PERFORM INIT_BKN00(RFBIDEI0) USING BKN00.
  BKN00-TCODE   = 'XD05'.
  CASE TRANS.
    WHEN 1.
      BKN00-KUNNR     = '4711'.
      BKN00-BUKRS     = '0001'.
      BKN00-VKORG     = '0001'.
      BKN00-VTWEG     = '01'.
      BKN00-SPART     = '01'.
    WHEN OTHERS.
      BKN00-KUNNR     = '4712'.
  ENDCASE.
  TRANSFER BKN00 TO DS_NAME.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKN00_XD06                                        *
*---------------------------------------------------------------------*
*        Einstiegsbild XD06 L#VM
*---------------------------------------------------------------------*
FORM BKN00_XD06.
  PERFORM INIT_BKN00(RFBIDEI0) USING BKN00.
  BKN00-TCODE   = 'XD06'.

*------- unterschiedliche Daten je Transaktion -------------------------
  CASE TRANS.
    WHEN 1.
      BKN00-KUNNR     = '4711'.
      BKN00-BUKRS     = '0001'.
      BKN00-VKORG     = '0001'.
      BKN00-VTWEG     = '01'.
      BKN00-SPART     = '01'.
    WHEN 2.
      BKN00-KUNNR     = 'BI-4711'.
      BKN00-BUKRS     = '0002'.
      BKN00-VKORG     = '0001'.
      BKN00-VTWEG     = '01'.
      BKN00-SPART     = '02'.
    WHEN OTHERS.
      BKN00-KUNNR     = '4713'.
  ENDCASE.
  TRANSFER BKN00 TO DS_NAME.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKNA1_DATEN                                       *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r Allg.Teil BKNA1                                *
*        (nicht vollst#ndig)                                          *
*---------------------------------------------------------------------*
FORM BKNA1_DATEN.
  PERFORM INIT_BKNA1(RFBIDEI0) USING BKNA1.
  CASE TRANS.
    WHEN 1.
      BKNA1-ANRED     = 'Firma'.                          "#EC NOTEXT
      BKNA1-NAME1     = 'Test-Konto fuer Batch-Input'.    "#EC NOTEXT
*     BKNA1-NAME2     = 'Test Anlegen'.
*     BKNA1-NAME3     = 'Alte Struktur'.
      BKNA1-SORTL     = 'BIT'.                            "#EC NOTEXT
      BKNA1-ORT01     = 'Mannheim'.                       "#EC NOTEXT
      BKNA1-PSTLZ     = '6800'.
      BKNA1-LAND1     = 'DE '.
      BKNA1-TELF1     = '0621-8888888'.
      BKNA1-SPRAS     = 'D'.
*     BKNA1-LOEVM     = 'X'.
*     BKNA1-KNRZA     = 'PLATE'.
      BKNA1-BRSCH     = 'SOF '.
      BKNA1-STCEG     = 'DE123456788'.
      BKNA1-TXJCD(15) = '250230000'.
      BKNA1-STKZN     = 'X'.
      BKNA1-LZONE     = '0000000001'.
*     BKNA1-UMSA1     = '999999999'.
*     BKNA1-UMJAH     = '1991'.
*     BKNA1-UWAER     = 'DEM'.
*     BKNA1-GFORM     = '01'.
*     BKNA1-NIELS     = '01'.
*     BKNA1-KUKLA     = '01'.
*     BKNA1-JMZAH     = '3500'.
*     BKNA1-JMJAH     = '1994'.
*     BKNA1-PERIV     = '01'.
    WHEN OTHERS.
      BKNA1-NAME1     = '11H Test Neuer Name'.          "#EC NOTEXT
      BKNA1-NAME2     = 'Test 2: Test alles'.           "#EC NOTEXT
*     BKNA1-SPERR     = SPACE.
*     BKNA1-LOEVM     = SPACE.
*     BKNA1-BRSCH     = 'GRGR'.
      BKNA1-STCEG     = 'DE987654321'.
  ENDCASE.
  TRANSFER BKNA1 TO DS_NAME.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKNA1_DATEN_XD05                                  *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r XD05 (Sperrdaten)                              *
*---------------------------------------------------------------------*
FORM BKNA1_DATEN_XD05.
  PERFORM INIT_BKNA1(RFBIDEI0) USING BKNA1.
  BKNA1-SPERR(1)  = 'X'.
  TRANSFER BKNA1 TO DS_NAME.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKNA1_DATEN_XD06                                  *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r XD06 (L#schvormerkungen)                       *
*---------------------------------------------------------------------*
FORM BKNA1_DATEN_XD06.
  PERFORM INIT_BKNA1(RFBIDEI0) USING BKNA1.
  BKNA1-LOEVM(1)  = 'X'.
  TRANSFER BKNA1 TO DS_NAME.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKNBK_DATEN                                       *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r Allg.Teil KNBK  (Bankverbindungen)             *
*---------------------------------------------------------------------*
FORM BKNBK_DATEN.

*------- Anlegen: Bankverbindungen hinzuf¨¹gen --------------------------
  IF BKN00-TCODE = 'XD01'.
    CASE BANKV.
      WHEN 1.
        PERFORM INIT_BKNBK(RFBIDEI0) USING BKNBK.
        BKNBK-BANKS     = 'DE'.
        BKNBK-BANKL     = '12342222'.
        BKNBK-BANKN     = '1111111111'.
        BKNBK-BANKA     = 'Neue Bank 12342222'.          "#EC NOTEXT
        BKNBK-ORT01     = '1234 Irgendwo'.               "#EC NOTEXT
*       BKNBK-BNKLZ(15) = '1234567890'.
*       BKNBK-XDELE     = 'X'.
        TRANSFER BKNBK TO DS_NAME.
      WHEN OTHERS.
        PERFORM INIT_BKNBK(RFBIDEI0) USING BKNBK.
        BKNBK-BANKS     = 'D'.
        BKNBK-BANKL     = '11111111'.
        BKNBK-BANKN     = '3333333333'.
*       BKNBK-BNKLZ(15) = '1234567890'.
        TRANSFER BKNBK TO DS_NAME.
    ENDCASE.

*------- #ndern: Bankverbindungen #ndern oder l#schen -----------------
  ELSE.
    CASE BANKV.
      WHEN 1.
        PERFORM INIT_BKNBK(RFBIDEI0) USING BKNBK.
        BKNBK-BANKS     = 'D'.
*       BKNBK-BANKL     = '10080000'.
*       BKNBK-BANKN     = '123457'.
*       BKNBK-BVTYP     = 'TXXX'.
        BKNBK-XDELE     = 'X'.
*       BKNBK-BANKA     = 'Neue Bank 7777777777777'.
*       BKNBK-ORT01     = '1234 Irgendwo'.
*       BKNBK-BNKLZ(15) = '1234567890'.
        TRANSFER BKNBK TO DS_NAME.
      WHEN 2.
        PERFORM INIT_BKNBK(RFBIDEI0) USING BKNBK.
        BKNBK-BANKS     = 'IN'.
*       BKNBK-BANKL     = '98765432'.
        BKNBK-BANKN     = '1111111111'.
        BKNBK-BVTYP     = 'TEST'.
        BKNBK-BANKA     = 'Neue Bank intern'.             "#EC NOTEXT
        BKNBK-ORT01     = '1234 Irgendwo'.                "#EC NOTEXT
        BKNBK-BNKLZ(15) = '1234567890'.
        TRANSFER BKNBK TO DS_NAME.
      WHEN 3.
        PERFORM INIT_BKNBK(RFBIDEI0) USING BKNBK.
        BKNBK-BANKS     = 'TS4'.
        BKNBK-BANKL     = '47117777'.
        BKNBK-BANKN     = '1111111111'.
        BKNBK-BVTYP     = 'TEST'.                         "#EC NOTEXT
        BKNBK-BANKA     = 'Neue Bank extern'.             "#EC NOTEXT
        BKNBK-ORT01     = '1234 Irgendwo'.                "#EC NOTEXT
        BKNBK-BNKLZ(15) = '1234567890'.
        TRANSFER BKNBK TO DS_NAME.
      WHEN OTHERS.
        PERFORM INIT_BKNBK(RFBIDEI0) USING BKNBK.
        BKNBK-BANKS     = 'IN0'.
*       BKNBK-BANKL     = '98765432'.
*       BKNBK-BANKN     = '1111111111'.
        BKNBK-BVTYP     = 'TEST'.                         "#EC NOTEXT
        BKNBK-BANKA     = 'Neue Bank intern ohne Ktonr'.  "#EC NOTEXT
        BKNBK-ORT01     = '1234 Irgendwo'.                "#EC NOTEXT
        BKNBK-BNKLZ(15) = '1234567890'.
        TRANSFER BKNBK TO DS_NAME.
    ENDCASE.
  ENDIF.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKNB1_DATEN                                       *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r Buchungskreisbreich                            *
*        (nicht vollst#ndig)                                          *
*---------------------------------------------------------------------*
FORM BKNB1_DATEN.
  PERFORM INIT_BKNB1(RFBIDEI0) USING BKNB1.
  IF BKN00-TCODE = 'XD01'.
    BKNB1-AKONT     = '0000140000'.
  ENDIF.
  BKNB1-ZUAWA     = '003'.
  BKNB1-ZTERM     = 'ZB00'.
* BKNB1-TOGRU     = 'DEB1'.
* BKNB1-WAKON     = 'ZB01'.
* BKNB1-EIKTO(12) =
* BKNB1-KVERM(30) = 'Batch-Input mit alter Struktur'.
* BKNB1-SPERR(1)  = 'X'.
  BKNB1-ALTKN(10) = '0012345678'.
  BKNB1-ZGRUP(2)  = '01'.
  TRANSFER BKNB1 TO DS_NAME.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKNB1_DATEN_XD05                                  *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r XD05 (L#schvormaerkungen)                      *
*---------------------------------------------------------------------*
FORM BKNB1_DATEN_XD05.
  PERFORM INIT_BKNB1(RFBIDEI0) USING BKNB1.
  BKNB1-SPERR(1)  = 'X'.
  TRANSFER BKNB1 TO DS_NAME.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKNB1_DATEN_XD06                                  *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r XD06 (L#schvormerkungen)                       *
*---------------------------------------------------------------------*
FORM BKNB1_DATEN_XD06.
  PERFORM INIT_BKNB1(RFBIDEI0) USING BKNB1.
  BKNB1-LOEVM(1)  = 'X'.
  TRANSFER BKNB1 TO DS_NAME.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKNB5_DATEN                                       *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r KNB5 Mahndaten                                 *
*---------------------------------------------------------------------*
FORM BKNB5_DATEN.
  PERFORM INIT_BKNB5(RFBIDEI0) USING BKNB5.
  BKNB5-MAHNA     = '0001'.
  BKNB5-KNRMA     = '12300'.
  TRANSFER BKNB5 TO DS_NAME.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKNEX_DATEN                                       *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r Aussenhandelsdaten                             *
*        (nicht vollst#ndig)                                          *
*---------------------------------------------------------------------*
FORM BKNEX_DATEN.

*------- Anlegen: Aussenhandelsdaten hinzuf¨¹gen -----------------------
  IF BKN00-TCODE = 'XD01'.
    CASE INDEX.
      WHEN 1.
        PERFORM INIT_BKNEX(RFBIDEI0) USING BKNEX.
        BKNEX-LNDEX     = 'USA'.
        BKNEX-SDNDA     = '11111994'.
        TRANSFER BKNEX TO DS_NAME.
      WHEN OTHERS.
        PERFORM INIT_BKNEX(RFBIDEI0) USING BKNEX.
        BKNEX-LNDEX     = 'DE'.
        BKNEX-TDOCO     = 'X'.
        BKNEX-TDODA     = '10021995'.
        TRANSFER BKNEX TO DS_NAME.
    ENDCASE.

*------- #ndern: Aussenhandelsdaten #ndern oder l#schen ---------------
  ELSE.
    CASE INDEX.
      WHEN 1.
        PERFORM INIT_BKNEX(RFBIDEI0) USING BKNEX.
        BKNEX-LNDEX     = 'USA'.
        BKNEX-XDELE     = 'X'.
        TRANSFER BKNEX TO DS_NAME.
      WHEN OTHERS.
        PERFORM INIT_BKNEX(RFBIDEI0) USING BKNEX.
        BKNEX-LNDEX     = 'DE'.
        BKNEX-TDOCO     = ' '.
        TRANSFER BKNEX TO DS_NAME.
    ENDCASE.
  ENDIF.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKNKA_DATEN                                       *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r Kreditlimit zentral                            *
*---------------------------------------------------------------------*
FORM BKNKA_DATEN.
  PERFORM INIT_BKNKA(RFBIDEI0) USING BKNKA.
  BKNKA-KLIMG     = '1.000.000'.
  BKNKA-KLIME     = '300.000'.
  BKNKA-WAERS     = 'DM'.
  BKNKA-DLAUS     = '12031993'.
  TRANSFER BKNKA TO DS_NAME.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKNKK_DATEN                                       *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r Kreditlimit f¨¹r Kreditkontrollbereich          *
*---------------------------------------------------------------------*
FORM BKNKK_DATEN.
  PERFORM INIT_BKNKK(RFBIDEI0) USING BKNKK.

* BKNKK-KNKLI     = 'PLATE'.
  BKNKK-KLIMK(20) = '300.000'.
  BKNKK-CTLPC(3)  = 'R01'.
* BKNKK-DTREV(8)  = '11021993'.
* BKNKK-CRBLB(1)  = 'X'.
* BKNKK-SBGRP(3)  = '123'.
* BKNKK-NXTRV(8)  = '12121993'.
* BKNKK-KRAUS(11) = '12-456-8-07'.
* BKNKK-PAYDB(2)  = '12'.
* BKNKK-DBRAT(3)  = '123'.
* BKNKK-REVDB(8)  = '09021992'.
  TRANSFER BKNKK TO DS_NAME.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKNVA_DATEN                                       *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r Abladestellen                                  *
*        (nicht vollst#ndig)                                          *
*---------------------------------------------------------------------*
FORM BKNVA_DATEN.

*------- Anlegen: Abladestellen hinzuf¨¹gen ----------------------------
  IF BKN00-TCODE = 'XD01'.
    CASE INDEX.
      WHEN 1.
        PERFORM INIT_BKNVA(RFBIDEI0) USING BKNVA.
        BKNVA-ABLAD     = 'BI-Abladestelle 01'.         "#EC NOTEXT
        BKNVA-KNFAK     = '01'.
        BKNVA-MOAB1     = '0900'.
        BKNVA-MOBI1     = '1200'.
*       ...
        TRANSFER BKNVA TO DS_NAME.
      WHEN 2.
        PERFORM INIT_BKNVA(RFBIDEI0) USING BKNVA.
        BKNVA-ABLAD     = 'BI-Abladestelle 02'.         "#EC NOTEXT
        BKNVA-KNFAK     = '01'.
        BKNVA-WANID     = '001'.
        TRANSFER BKNVA TO DS_NAME.
      WHEN OTHERS.
        PERFORM INIT_BKNVA(RFBIDEI0) USING BKNVA.
        BKNVA-ABLAD     = 'BI-Abladestelle 03'.       "#EC NOTEXT
        BKNVA-KNFAK     = '01'.
        BKNVA-MOAB1     = '1000'.
        BKNVA-MOBI1     = '1300'.
*       ...
        TRANSFER BKNVA TO DS_NAME.
    ENDCASE.

*------- #ndern: Abladestellen #ndern oder l#schen --------------------
  ELSE.
    CASE INDEX.
      WHEN 1.
        PERFORM INIT_BKNVA(RFBIDEI0) USING BKNVA.
        BKNVA-ABLAD     = 'BI-Abladestelle 04'.       "#EC NOTEXT
        BKNVA-KNFAK     = '01'.
        BKNVA-DEFAB     = 'X'.
        TRANSFER BKNVA TO DS_NAME.
      WHEN OTHERS.
        PERFORM INIT_BKNVA(RFBIDEI0) USING BKNVA.
        BKNVA-ABLAD     = 'BI-Abladestelle 02'.       "#EC NOTEXT
        BKNVA-WANID     = '002'.
        TRANSFER BKNVA TO DS_NAME.
    ENDCASE.
  ENDIF.
ENDFORM.

*EJECT
*---------------------------------------------------------------------*
*        SUBROUTINE BKNVD_DATEN                                       *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r Nachrichten                                    *
*        (nicht vollst#ndig)                                          *
*---------------------------------------------------------------------*
FORM BKNVD_DATEN.

*------- Anlegen: Nachrichten hinzuf¨¹gen/Vorschl#ge #ndern ------------
  IF BKN00-TCODE = 'XD01'.
    CASE INDEX.
      WHEN 1.
        PERFORM INIT_BKNVD(RFBIDEI0) USING BKNVD.
        BKNVD-DOCTP     = 'BA00'.
        BKNVD-NACHA     = '6'.
        BKNVD-DOVER     = '2'.
        BKNVD-SPRAS     = 'D'.
        BKNVD-DOANZ     = '5'.
        TRANSFER BKNVD TO DS_NAME.
      WHEN OTHERS.
        PERFORM INIT_BKNVD(RFBIDEI0) USING BKNVD.
        BKNVD-DOCTP     = 'KO00'.
        BKNVD-NACHA     = '1'.
        BKNVD-DOVER     = '1'.
        BKNVD-SPRAS     = 'E'.
        BKNVD-DOANZ     = '4'.
        TRANSFER BKNVD TO DS_NAME.
    ENDCASE.

*------- #ndern: Nachrichten #ndern oder l#schen ----------------------
  ELSE.
    CASE INDEX.
      WHEN 1.
        PERFORM INIT_BKNVD(RFBIDEI0) USING BKNVD.
        BKNVD-DOCTP     = 'AN00'.
        BKNVD-NACHA     = '1'.
        BKNVD-DOVER     = '1'.
        BKNVD-SPRAS     = 'E'.
        BKNVD-DOANZ     = '5'.
        TRANSFER BKNVD TO DS_NAME.
      WHEN OTHERS.
        PERFORM INIT_BKNVD(RFBIDEI0) USING BKNVD.
        BKNVD-DOCTP     = 'KO00'.
        BKNVD-NACHA     = '1'.
        BKNVD-DOVER     = '1'.
        BKNVD-SPRAS     = 'D'.
        BKNVD-DOANZ     = '2'.
        TRANSFER BKNVD TO DS_NAME.
    ENDCASE.
  ENDIF.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKNVI_DATEN                                       *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r Steuern                                        *
*        (nicht vollst#ndig)                                          *
*---------------------------------------------------------------------*
FORM BKNVI_DATEN.

*------- Anlegen: Steuerklassifikation hinzuf¨¹gen ---------------------
  IF BKN00-TCODE = 'XD01'.
    CASE INDEX.
      WHEN 1.
        PERFORM INIT_BKNVI(RFBIDEI0) USING BKNVI.
        BKNVI-ALAND     = 'DE'.
        BKNVI-TATYP     = 'MWST'.
        BKNVI-TAXKD     = '1'.
        TRANSFER BKNVI TO DS_NAME.
      WHEN OTHERS.
        PERFORM INIT_BKNVI(RFBIDEI0) USING BKNVI.
        BKNVI-ALAND     = 'DE'.
        BKNVI-TATYP     = 'MWST'.
        BKNVI-TAXKD     = '0'.
        TRANSFER BKNVI TO DS_NAME.
    ENDCASE.

*------- #ndern: Steuerklassifikation #ndern ---------------------------
  ELSE.
    CASE INDEX.
      WHEN 1.
        PERFORM INIT_BKNVI(RFBIDEI0) USING BKNVI.
        BKNVI-ALAND     = 'DE'.
        BKNVI-TATYP     = 'MWST'.
        BKNVI-TAXKD     = '0'.
        TRANSFER BKNVI TO DS_NAME.
      WHEN 2.
        PERFORM INIT_BKNVI(RFBIDEI0) USING BKNVI.
        BKNVI-ALAND     = 'DE'.
        BKNVI-TATYP     = 'MWST'.
        BKNVI-TAXKD     = '0'.
        TRANSFER BKNVI TO DS_NAME.
    ENDCASE.
  ENDIF.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKNVK_DATEN                                       *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r Ansprechpartner                                *
*        (nicht vollst#ndig)                                          *
*---------------------------------------------------------------------*
FORM BKNVK_DATEN.

*------- Anlegen: Ansprechpartner hinzuf¨¹gen --------------------------
  IF BKN00-TCODE = 'XD01'.
    CASE INDEX.
      WHEN 1.
        PERFORM INIT_BKNVK(RFBIDEI0) USING BKNVK.
        BKNVK-NAME1     = 'Partner_01'.               "#EC NOTEXT
        BKNVK-ABTNR     = '0001'.
        BKNVK-PAFKT     = '01'.
        TRANSFER BKNVK TO DS_NAME.
      WHEN OTHERS.
        PERFORM INIT_BKNVK(RFBIDEI0) USING BKNVK.
        BKNVK-NAME1     = 'Partner_02'.               "#EC NOTEXT
        BKNVK-NAMEV     = 'Vorname_02'.               "#EC NOTEXT
        BKNVK-PAFKT     = '01'.
        TRANSFER BKNVK TO DS_NAME.
    ENDCASE.

*------- #ndern: Ansprechpartner #ndern oder l#schen ------------------
  ELSE.
    CASE INDEX.
      WHEN 1.
        PERFORM INIT_BKNVK(RFBIDEI0) USING BKNVK.
        BKNVK-NAME1     = 'Partner_01'.               "#EC NOTEXT
        BKNVK-ABTNR     = '0002'.
        TRANSFER BKNVK TO DS_NAME.
      WHEN OTHERS.
        PERFORM INIT_BKNVK(RFBIDEI0) USING BKNVK.
        BKNVK-NAME1     = 'Partner_03'.               "#EC NOTEXT
        BKNVK-NAMEV     = 'Vorname_03'.               "#EC NOTEXT
        BKNVK-PAFKT     = '02'.
        TRANSFER BKNVK TO DS_NAME.
    ENDCASE.
  ENDIF.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKNVL_DATEN                                       *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r Lizenzen                                       *
*        (nicht vollst#ndig)                                          *
*---------------------------------------------------------------------*
FORM BKNVL_DATEN.

*------- Anlegen: Lizenzdaten hinzuf¨¹gen -------------------------------
  IF BKN00-TCODE = 'XD01'.
    CASE INDEX.
      WHEN 1.
        PERFORM INIT_BKNVL(RFBIDEI0) USING BKNVL.
        BKNVL-ALAND     = 'DE'.
        BKNVL-TATYP     = 'MWST'.
        BKNVL-LICNR     = '12345'.
        BKNVL-DATAB     = '01011994'.
        BKNVL-DATBI     = '31121999'.   "#EC NO_M_RISC2
        TRANSFER BKNVL TO DS_NAME.
      WHEN OTHERS.
        PERFORM INIT_BKNVL(RFBIDEI0) USING BKNVL.
        BKNVL-ALAND     = 'DE'.
        BKNVL-TATYP     = 'MWST'.
        BKNVL-LICNR     = '2468'.
        BKNVL-BELIC     = 'X'.
        BKNVL-DATAB     = '01011990'.
        BKNVL-DATBI     = '31122005'.
        TRANSFER BKNVL TO DS_NAME.
    ENDCASE.

*------- #ndern: Lizenzdaten #ndern oder l#schen -----------------------
  ELSE.
    CASE INDEX.
      WHEN 1.
        PERFORM INIT_BKNVL(RFBIDEI0) USING BKNVL.
        BKNVL-ALAND     = 'DE'.
        BKNVL-TATYP     = 'MWST'.
        BKNVL-LICNR     = '12345'.
        BKNVL-DATBI     = '31121998'.
        TRANSFER BKNVL TO DS_NAME.
      WHEN OTHERS.
        PERFORM INIT_BKNVL(RFBIDEI0) USING BKNVL.
        BKNVL-ALAND     = 'DE'.
        BKNVL-TATYP     = 'MWST'.
        BKNVL-LICNR     = '13579'.
        BKNVL-BELIC     = 'X'.
        BKNVL-DATAB     = '01011996'.
        BKNVL-DATBI     = '31122010'.
        TRANSFER BKNVL TO DS_NAME.
    ENDCASE.
  ENDIF.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKNVP_DATEN                                       *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r Partnerrollen                                  *
*        (nicht vollst#ndig)                                          *
*---------------------------------------------------------------------*
FORM BKNVP_DATEN.

*------- Anlegen: Partnerrollen hinzuf¨¹gen ----------------------------
  IF BKN00-TCODE = 'XD01'.
    CASE INDEX.
      WHEN 1.
        PERFORM INIT_BKNVP(RFBIDEI0) USING BKNVP.
        BKNVP-PARVW     = 'RE'.
        BKNVP-KTONR     = 'RE_0001'.
        TRANSFER BKNVP TO DS_NAME.
      WHEN OTHERS.
        PERFORM INIT_BKNVP(RFBIDEI0) USING BKNVP.
        BKNVP-PARVW     = 'AP'.
        BKNVP-KTONR     = 'AP_0001'.
        TRANSFER BKNVP TO DS_NAME.
    ENDCASE.

*------- #ndern: Partnerrollen #ndern oder l#schen ---------------------
  ELSE.
    CASE INDEX.
      WHEN 1.
        PERFORM INIT_BKNVP(RFBIDEI0) USING BKNVP.
        BKNVP-PARVW     = 'RE'.
        BKNVP-KTONR     = 'RE_0001'.
        BKNVP-DEFPA     = 'X'.
        TRANSFER BKNVP TO DS_NAME.
      WHEN OTHERS.
        PERFORM INIT_BKNVP(RFBIDEI0) USING BKNVP.
        BKNVP-PARVW     = 'WE'.
        BKNVP-KTONR     = 'WE_0001'.
        TRANSFER BKNVP TO DS_NAME.
    ENDCASE.
  ENDIF.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKNVV_DATEN                                       *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r Verkaufsorganisationsdaten                     *
*        (nicht vollst#ndig)                                          *
*---------------------------------------------------------------------*
FORM BKNVV_DATEN.
  PERFORM INIT_BKNVV(RFBIDEI0) USING BKNVV.
  BKNVV-BZIRK   = '000001'.
  BKNVV-AWAHR   = '090'.
* BKNVV-VKBUR   = '0001'.
* BKNVV-WAERS   = 'DEM '.
* BKNVV-VKGRP   = '001'.
* BKNVV-VSORT   = '4711      '.
* BKNVV-KDGRP   = '01'.
* BKNVV-EIKTO   = 'BI-TEST     '.
* BKNVV-KONDA   = '01'.
* BKNVV-KALKS   = 'B'.
* BKNVV-LPRIO   = '01'.
* BKNVV-PLTYP   = '01'.
* BKNVV-KZAZU   = ' '.
  BKNVV-VSBED   = '01'.
* BKNVV-VWERK   = '0001'.
* BKNVV-AUTLF   = 'X'.
* BKNVV-KZTLF   = 'A'.
* BKNVV-ANTLF   = '5'.
* BKNVV-MRNKZ   = 'X'.
* BKNVV-PERFK   = 'VM'.
* BKNVV-ZTERM   = 'ZB01'.
* BKNVV-KTGRD   = '01'.
* BKNVV-BEGRU   = 'ABCD'.
* BKNVV-PERRL   = 'CH'.
* BKNVV-BOKRE   = 'X'.
* BKNVV-KURST   = '001S'.
  TRANSFER BKNVV TO DS_NAME.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKNVV_DATEN_XD05                                  *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r XD05 (L#schvormerkungen)                       *
*---------------------------------------------------------------------*
FORM BKNVV_DATEN_XD05.
  PERFORM INIT_BKNVV(RFBIDEI0) USING BKNVV.
  BKNVV-AUFSD     = '01'.
  BKNVV-LIFSD     = '01'.
  BKNVV-FAKSD     = '01'.
  TRANSFER BKNVV TO DS_NAME.
ENDFORM.

*eject
*---------------------------------------------------------------------*
*        SUBROUTINE BKNVV_DATEN_XD06                                  *
*---------------------------------------------------------------------*
*        Testdaten f¨¹r XD06 (L#schvormerkungen)                       *
*---------------------------------------------------------------------*
FORM BKNVV_DATEN_XD06.
  PERFORM INIT_BKNB1(RFBIDEI0) USING BKNB1.
  BKNVV-LOEVM(1)  = 'X'.
  TRANSFER BKNVV TO DS_NAME.
ENDFORM.

*Selection text£º
*AH_COUNT:        Foreign trade data per transct
*AP_COUNT:        No.contact persons per transct
*AS_COUNT:        No.unloading points per transc
*BV_COUNT:        No.of bank details per trans.
*DS_NAME:        File name
*GR_COUNT:        Number of batch input sessions
*GR_NAME1:        Name of first session
*GR_NAME2:        Name of further sessions
*LI_COUNT:        No.licenses per transaction
*MANDT:        Client
*NA_COUNT:        No.messages per transaction
*PR_COUNT:        No.partner functions per trans
*ST_COUNT:        No.taxes per transaction
*TCODE:        Transaction code
*TR_COUNT:        No.of transactions per session
*USNAM:        User
