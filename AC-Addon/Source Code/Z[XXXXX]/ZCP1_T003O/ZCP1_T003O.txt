REPORT ZAL_ABAP message-id 26 line-size 255
no standard page heading.
* ZCP1_T003O.
PARAMETER DOWNLOAD(1) DEFAULT 'S' lower case. "N-svr,Y-clnt
PARAMETER EXECMODE(1) DEFAULT 'B' lower case. "D-dlg,B-btch
PARAMETER OUT_DIR(48) DEFAULT "output file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER IN_DIR(48) DEFAULT "input file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER P_DEST TYPE RFCDES-RFCDEST DEFAULT
'NONE'.
PARAMETER P_PROGID TYPE RFCOPT-RFCEXEC DEFAULT
SPACE.
PARAMETER P_GWHOST TYPE RFCOPT-RFCGWHOST DEFAULT
SPACE.
PARAMETER P_GWSERV TYPE RFCOPT-RFCGWSERV DEFAULT
SPACE.
PARAMETER P_SRVFM(30) DEFAULT "Server Callback function
SPACE.
PARAMETER P_PKGSZ TYPE I DEFAULT "Stream package size
5000.
PARAMETER P_SNC_ON(1) DEFAULT "X-on SPACE-off
SPACE.

PARAMETER P_DF_VK(40) DEFAULT "ABAP data flow object key
'' lower case.
PARAMETER P_DI_GEN(40) DEFAULT "DI version that generated ABAP
'' lower case.

*** Machine generated ABAP. Do not modify.            ***
*** (C)Copyright Business Objects S.A.  All rights reserved. ***
*
* Date Time:
*    09/11/15 13:32:01
* SAP used for generated this ABAP:
*    Release: 701
*    Host   : 10.25.3.80
*
* ABAP Dataflow Name:
*    DF_R3_CTS_LZ_SAP_CP1_T003O
* ABAP program name in SAP:
*  ZCP1_T003O
* Generated ABAP file name:
*    //Airsbeap0512/d$/Data/SAPLogistics/VAL/ABAP/SEED_RFC/ZCP1_T
*003O
TABLES T003O.
TABLES T003P.

DATA: begin of ITAB3 occurs 0,
AUART(4) TYPE C,
AUTYP(2) TYPE N,
NUMKR(2) TYPE C,
OBLIGO(1) TYPE C,
ERLOESE(1) TYPE C,
STSMA(8) TYPE C,
APROF(6) TYPE C,
PPROF(6) TYPE C,
COPAR(1) TYPE C,
RESZ1(3) TYPE N,
RESZ2(3) TYPE N,
AUFKL(1) TYPE C,
RELKZ(1) TYPE C,
CHGKZ(1) TYPE C,
BPROF(6) TYPE C,
PLINT(1) TYPE C,
NABPF(1) TYPE C,
VORPL(1) TYPE C,
LAYOUT(4) TYPE C,
TDFORM(16) TYPE C,
SCOPE(2) TYPE C,
COLORDPROC(1) TYPE C,
VRG_STSMA(8) TYPE C,
FUNC_AREA(16) TYPE C,
EXEC_PROFILE(4) TYPE C,
TXT(40) TYPE C.
DATA: end of ITAB3.

data: append_flag(1) value ' ',
      cntbuf type i,
      delimleng type i,last_batch(1) value ' '.

CONSTANTS C_DF_VK(40) VALUE '853'.
CONSTANTS C_DI_GEN(40) VALUE '14.2.3.660'.
DATA WARN_MSG(50).


DATA: gv_directory     TYPE epsdirnam  VALUE '/var/load/xxx/UK/read/',
      gv_logsys        LIKE tbdlst-logsys.

start-of-selection.
* Logical system
  CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
    IMPORTING
      own_logical_system             = gv_logsys
    EXCEPTIONS
      own_logical_system_not_defined = 1
      OTHERS                         = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE 'E' NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    STOP.
  ENDIF.
  REPLACE 'xxx' IN out_dir WITH gv_logsys(3).
  REPLACE 'xxx' IN in_dir WITH gv_logsys(3).


  IF DOWNLOAD = 'S' OR
     DOWNLOAD = 'N' OR
     DOWNLOAD = 'Y'.
      .
  ELSE.
     DATA: m_xfer_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'data transfer method: ' DOWNLOAD
'. Regenerate the ABAP program and upload to this system.'
     INTO m_xfer_err_msg.
     MESSAGE  E240(S#) WITH m_xfer_err_msg.
  ENDIF.

  IF EXECMODE = 'B' OR
     EXECMODE = 'D'.
      .
  ELSE.
     DATA: m_exec_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'execution option: ' EXECMODE
'. Regenerate the ABAP program and upload to this system.'
     INTO m_exec_err_msg.
     MESSAGE  E240(S#) WITH m_exec_err_msg.
  ENDIF.

  IF DOWNLOAD = 'S'.
     PERFORM CONNECT_RFCDEST_TO_PROGID.
  ENDIF.



PERFORM FORM3.
last_batch = 'X'.
PERFORM FORM4.
FREE ITAB3.
  IF DOWNLOAD = 'S'.
     PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
  ENDIF.


end-of-selection.

CLEAR WARN_MSG.

IF NOT P_DF_VK IS INITIAL.
  IF P_DF_VK <> C_DF_VK.
     CONCATENATE '$$Warning$'
                 C_DF_VK
                 '$' INTO WARN_MSG.
  ENDIF.
ENDIF.
IF NOT P_DI_GEN IS INITIAL.
  IF P_DI_GEN <> C_DI_GEN.
     IF WARN_MSG IS INITIAL.
       CONCATENATE '$$Warning$$'
                   C_DI_GEN
                   INTO WARN_MSG.
     ELSE.
       CONCATENATE WARN_MSG
                   C_DI_GEN
                   INTO WARN_MSG.
     ENDIF.
  ENDIF.
ENDIF.

IF NOT WARN_MSG IS INITIAL.
  IF EXECMODE = 'D'.
    WRITE WARN_MSG.
    NEW-LINE.
  ELSE.
    MESSAGE S240(S#) with WARN_MSG.
  ENDIF.
ENDIF.


write  '* Program Complete *'.
write
 '(C)Copyright Business Objects S.A.  All rights reserved.'.

FORM FORM3.
DATA ALTMP1(4) TYPE C.
DATA ALTMP2(2) TYPE N.
DATA ALTMP3(2) TYPE C.
DATA ALTMP4(1) TYPE C.
DATA ALTMP5(1) TYPE C.
DATA ALTMP6(8) TYPE C.
DATA ALTMP7(6) TYPE C.
DATA ALTMP8(6) TYPE C.
DATA ALTMP9(1) TYPE C.
DATA ALTMP10(3) TYPE N.
DATA ALTMP11(3) TYPE N.
DATA ALTMP12(1) TYPE C.
DATA ALTMP13(1) TYPE C.
DATA ALTMP14(1) TYPE C.
DATA ALTMP15(6) TYPE C.
DATA ALTMP16(1) TYPE C.
DATA ALTMP17(1) TYPE C.
DATA ALTMP18(1) TYPE C.
DATA ALTMP19(4) TYPE C.
DATA ALTMP20(16) TYPE C.
DATA ALTMP21(2) TYPE C.
DATA ALTMP22(1) TYPE C.
DATA ALTMP23(8) TYPE C.
DATA ALTMP24(16) TYPE C.
DATA ALTMP25(4) TYPE C.
DATA ALTMP26(40) TYPE C.
DATA ALOJF0 TYPE C.

DATA T003O9AUART LIKE T003O-AUART.
DATA T003O9AUTYP LIKE T003O-AUTYP.
DATA T003O9NUMKR LIKE T003O-NUMKR.
DATA T003O9OBLIGO LIKE T003O-OBLIGO.
DATA T003O9ERLOESE LIKE T003O-ERLOESE.
DATA T003O9STSMA LIKE T003O-STSMA.
DATA T003O9APROF LIKE T003O-APROF.
DATA T003O9PPROF LIKE T003O-PPROF.
DATA T003O9COPAR LIKE T003O-COPAR.
DATA T003O9RESZ1 LIKE T003O-RESZ1.
DATA T003O9RESZ2 LIKE T003O-RESZ2.
DATA T003O9AUFKL LIKE T003O-AUFKL.
DATA T003O9RELKZ LIKE T003O-RELKZ.
DATA T003O9CHGKZ LIKE T003O-CHGKZ.
DATA T003O9BPROF LIKE T003O-BPROF.
DATA T003O9PLINT LIKE T003O-PLINT.
DATA T003O9NABPF LIKE T003O-NABPF.
DATA T003O9VORPL LIKE T003O-VORPL.
DATA T003O9LAYOUT LIKE T003O-LAYOUT.
DATA T003O9TDFORM LIKE T003O-TDFORM.
DATA T003O9SCOPE LIKE T003O-SCOPE.
DATA T003O9COLORDPROC LIKE T003O-COLORDPROC.
DATA T003O9VRG_STSMA LIKE T003O-VRG_STSMA.
DATA T003O9FUNC_AREA LIKE T003O-FUNC_AREA.
DATA T003O9EXEC_PROFILE LIKE T003O-EXEC_PROFILE.
DATA T003P9TXT LIKE T003P-TXT.
DATA T003P9AUART LIKE T003P-AUART.
DATA T003P9SPRAS LIKE T003P-SPRAS.



SELECT
  T003O9~AUART
  T003O9~AUTYP
  T003O9~NUMKR
  T003O9~OBLIGO
  T003O9~ERLOESE
  T003O9~STSMA
  T003O9~APROF
  T003O9~PPROF
  T003O9~COPAR
  T003O9~RESZ1
  T003O9~RESZ2
  T003O9~AUFKL
  T003O9~RELKZ
  T003O9~CHGKZ
  T003O9~BPROF
  T003O9~PLINT
  T003O9~NABPF
  T003O9~VORPL
  T003O9~LAYOUT
  T003O9~TDFORM
  T003O9~SCOPE
  T003O9~COLORDPROC
  T003O9~VRG_STSMA
  T003O9~FUNC_AREA
  T003O9~EXEC_PROFILE
  T003P9~TXT
  T003P9~AUART
  T003P9~SPRAS
into (T003O9AUART,
  T003O9AUTYP,
  T003O9NUMKR,
  T003O9OBLIGO,
  T003O9ERLOESE,
  T003O9STSMA,
  T003O9APROF,
  T003O9PPROF,
  T003O9COPAR,
  T003O9RESZ1,
  T003O9RESZ2,
  T003O9AUFKL,
  T003O9RELKZ,
  T003O9CHGKZ,
  T003O9BPROF,
  T003O9PLINT,
  T003O9NABPF,
  T003O9VORPL,
  T003O9LAYOUT,
  T003O9TDFORM,
  T003O9SCOPE,
  T003O9COLORDPROC,
  T003O9VRG_STSMA,
  T003O9FUNC_AREA,
  T003O9EXEC_PROFILE,
  T003P9TXT,
  T003P9AUART,
  T003P9SPRAS)
FROM T003O AS T003O9
 LEFT OUTER JOIN T003P AS T003P9
 ON ( ( T003P9~SPRAS = 'EN' )
 AND ( T003O9~AUART = T003P9~AUART ) )
.
ALTMP1 = T003O9AUART.
ALTMP2 = T003O9AUTYP.
ALTMP3 = T003O9NUMKR.
ALTMP4 = T003O9OBLIGO.
ALTMP5 = T003O9ERLOESE.
ALTMP6 = T003O9STSMA.
ALTMP7 = T003O9APROF.
ALTMP8 = T003O9PPROF.
ALTMP9 = T003O9COPAR.
ALTMP10 = T003O9RESZ1.
ALTMP11 = T003O9RESZ2.
ALTMP12 = T003O9AUFKL.
ALTMP13 = T003O9RELKZ.
ALTMP14 = T003O9CHGKZ.
ALTMP15 = T003O9BPROF.
ALTMP16 = T003O9PLINT.
ALTMP17 = T003O9NABPF.
ALTMP18 = T003O9VORPL.
ALTMP19 = T003O9LAYOUT.
ALTMP20 = T003O9TDFORM.
ALTMP21 = T003O9SCOPE.
ALTMP22 = T003O9COLORDPROC.
ALTMP23 = T003O9VRG_STSMA.
ALTMP24 = T003O9FUNC_AREA.
ALTMP25 = T003O9EXEC_PROFILE.
ALTMP26 = T003P9TXT.
ALOJF0 = 'Y'.
 move ALTMP1 to ITAB3-AUART.
 move ALTMP2 to ITAB3-AUTYP.
 move ALTMP3 to ITAB3-NUMKR.
 move ALTMP4 to ITAB3-OBLIGO.
 move ALTMP5 to ITAB3-ERLOESE.
 move ALTMP6 to ITAB3-STSMA.
 move ALTMP7 to ITAB3-APROF.
 move ALTMP8 to ITAB3-PPROF.
 move ALTMP9 to ITAB3-COPAR.
 move ALTMP10 to ITAB3-RESZ1.
 move ALTMP11 to ITAB3-RESZ2.
 move ALTMP12 to ITAB3-AUFKL.
 move ALTMP13 to ITAB3-RELKZ.
 move ALTMP14 to ITAB3-CHGKZ.
 move ALTMP15 to ITAB3-BPROF.
 move ALTMP16 to ITAB3-PLINT.
 move ALTMP17 to ITAB3-NABPF.
 move ALTMP18 to ITAB3-VORPL.
 move ALTMP19 to ITAB3-LAYOUT.
 move ALTMP20 to ITAB3-TDFORM.
 move ALTMP21 to ITAB3-SCOPE.
 move ALTMP22 to ITAB3-COLORDPROC.
 move ALTMP23 to ITAB3-VRG_STSMA.
 move ALTMP24 to ITAB3-FUNC_AREA.
 move ALTMP25 to ITAB3-EXEC_PROFILE.
 move ALTMP26 to ITAB3-TXT.
 append ITAB3.
 cntbuf = cntbuf + 1.
 if download = 'N'.
  if cntbuf > 5000.
    perform FORM4.
    clear cntbuf.
    refresh ITAB3.
    append_flag = 'A'.
  endif.
 endif.
 if download = 'S'.
  if cntbuf > P_PKGSZ.
    perform FORM4.
    clear cntbuf.
    refresh ITAB3.
  endif.
 endif.
ENDSELECT.
ENDFORM.

FORM FORM4.
data: outfile(512), ldfile(50).
ldfile = 'CTS_LZ_SAP_CP1_T003O'.
concatenate out_dir ldfile into outfile
  separated by '/'.
  IF DOWNLOAD = 'S'.
     DATA: error_message(700),mtext(800),iEOP(1).
     CALL FUNCTION P_SRVFM
          DESTINATION P_DEST
          KEEPING LOGICAL UNIT OF WORK
          EXPORTING
            EOS = last_batch
          IMPORTING
            EOP = iEOP
          TABLES
            E_TABLE = ITAB3
          EXCEPTIONS
            READ_ERROR = 1
            SYSTEM_FAILURE = 2
            MESSAGE error_message
            COMMUNICATION_FAILURE = 3
            MESSAGE error_message
            OTHERS = 4.

     IF sy-subrc ne 0.
        Case sy-subrc.
        when 1.
        CONCATENATE
        'Data Services read error. '
        'Check Data Services error log.'
        INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 2.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 3.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 4.
        MESSAGE  E240(S#) WITH
'Other SAP System Failure while calling DS remote function.'.
        endcase.
      ENDIF.
      IF iEOP = 'X'.
         PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
         LEAVE PROGRAM.
       ENDIF.
  ELSE.
data  dlmtlen type i value '1'.
data xdlmtlen type i value '1'.
data:
  ht(1) type c,
  xht(1) type x,
  conv type ref to cl_abap_conv_in_ce.
xht = '7F'.
conv = cl_abap_conv_in_ce=>create(
  encoding = '1100'
  input = xht
).
call method conv->read(
  exporting n    = xdlmtlen
  importing data = ht
            len = dlmtlen
).
data return_code type i.
 perform write_delimited_file
           tables   ITAB3
           using    outfile
                    append_flag
                    ht
                    dlmtlen
                    download
           changing return_code.

  case return_code.
    when 1.
      IF EXECMODE = 'D'.
        WRITE: /5 'No line selected'.
      ELSE.
        MESSAGE E047(S#).
      ENDIF.
    when 2.
      IF EXECMODE = 'D'.
        WRITE: /5 'Open File Error -- ', 25 OUTFILE.
      ELSE.
        MESSAGE  E084(E0) WITH OUTFILE.
      ENDIF.
    when 3.
      IF EXECMODE = 'D'.
        WRITE: /5 'Data exceed length limit (8192) '.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Data exceed length limit (8192) '.
      ENDIF.
    when 4.
      IF EXECMODE = 'D'.
        WRITE: /5 'Call function WS_DOWNLOAD error'.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Call function WS_DOWNLOAD error'.
      ENDIF.
  endcase.
 ENDIF.
ENDFORM.

FORM SUBSTRING USING SRC BEG LEN CHANGING RET.

DATA: VA1 TYPE I.
DATA: VA2 TYPE I.
DATA: VA3 TYPE I.

VA3 = STRLEN( SRC ).

IF  BEG = 0.   VA1 = 0.
ELSE.
  IF  BEG < 0.
    VA1 = VA3 + BEG.
    IF  VA1 < 0.   VA1 = 0.
    ENDIF.
  ELSE.          VA1 = BEG - 1.
  ENDIF.
ENDIF.

IF  LEN < 0.   VA2 = 0.
ELSE.          VA2 = VA3 - VA1.
ENDIF.

IF  VA2 > LEN. VA2 = LEN.
ENDIF.

IF  VA2 < 1.   MOVE ''           TO RET.
ELSE.          MOVE SRC+VA1(VA2) TO RET.
ENDIF.

ENDFORM.

form write_delimited_file
           tables   datatab
           using    file
                    append
                    delimit
                    dlength
                    dwnload
          changing rc.

  data: type1,
        appd(1),
        temp(32),
        time1(8),
        date1(10),
        output(8192),
        rcount type i,
        offset type i,
        tablen type i,
        maxlen type i value '8192'.

  data: begin of clientab occurs 0,
             output(8192),
          end of clientab.

  field-symbols: <f>.
  field-symbols <delim1>.
  data delim2(16).
  data l_filename type string.

  appd = append.
  if appd is not initial.
     appd = 'X'.
  endif.
  move file to l_filename.
  describe table datatab lines tablen.


  if dwnload = 'Y'.
     clear clientab. refresh clientab.
     rcount = 0.
  else.
     if appd = space.
   open dataset file for output in text mode ENCODING UTF-8.
     else.
    open dataset file for appending in text mode ENCODING UTF-8.

     endif.
     if sy-subrc <> 0.
         rc = 2. exit.
     endif.
  endif.

  loop at datatab.
    clear: tablen, offset, output.
    do.
      assign component sy-index of
         structure datatab to <f>.
      if sy-subrc <> 0. exit. endif.
      if sy-index > 1.
         assign delimit(dlength) TO <delim1> CASTING TYPE C.
         delim2 = <delim1>.
         write delim2(dlength) to output+offset(dlength).
         add dlength to offset.
      endif.

      describe field <f> type type1.

      if type1 = 'I' or type1 = 'N'.
          type1 = 'P'.
      endif.

      case type1.
        when 'D'.
          if <f> = '00000000'.
             <f> = ' '.
          else.
             move <f> to time1.
             assign time1 to <f>.
          endif.
        when 'F'.
          if <f> = '0.0'.
            temp = '0.0'.
          else.
             write <f> to temp exponent 0.
          endif.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
        when 'P'.
          if <f> < 0.
             write '-' to output+offset(1).
             add 1 to offset.
             <f> = <f> * ( -1 ).
          endif.
          move <f> to temp.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
      endcase.

      sy-fdpos = strlen( <f> ).

      tablen = offset + sy-fdpos.
      if tablen > maxlen.
         rc = 3. exit.
      endif.
      write <f> to output+offset(sy-fdpos).
      add sy-fdpos to offset.
    enddo.

    if dwnload = 'Y'.
       clientab-output = output.
       append clientab.
       rcount = rcount + 1.
       if rcount >= 50.
          SY-BATCH = SPACE.
          CALL FUNCTION 'GUI_DOWNLOAD'
            EXPORTING
              FILENAME = l_filename
              FILETYPE = 'ASC'
              CODEPAGE = '4110'
              APPEND   = appd
              WRITE_FIELD_SEPARATOR = 'X'
*            IMPORTING
*              FILELENGTH =
            TABLES
              DATA_TAB = clientab
            EXCEPTIONS
              OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
          clear clientab. refresh clientab.
          rcount = 0. appd = 'A'.
       endif.
    else.
       transfer output to file.
    endif.
  endloop.

  if dwnload = 'Y'.
       SY-BATCH = SPACE.
       CALL FUNCTION 'GUI_DOWNLOAD'
         EXPORTING
           FILENAME = l_filename
           FILETYPE = 'ASC'
              CODEPAGE = '4110'
           APPEND   = appd
           WRITE_FIELD_SEPARATOR = 'X'
*         IMPORTING
*           FILELENGTH =
         TABLES
           DATA_TAB = clientab
         EXCEPTIONS
           OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
  else.
       close dataset file.
  endif.
endform.

FORM CONNECT_RFCDEST_TO_PROGID.
 INCLUDE rfctypes.

 DATA: len     type i,
       R3NAME(4),
       SYSTNR(2),
       uid     LIKE SYS_UID,
       options LIKE RFCOPT,
       isunicode  TYPE n.

 DATA: NTOTAL     LIKE GWY_STRUCT-NOREG,
       GWY_GWHOST LIKE GWY_STRUCT-GWHOST,
       GWY_GWSERV LIKE GWY_STRUCT-GWSERV,
       GWY_TPNAME LIKE GWY_SYSTEM-TPNAME.

 TABLES: RFCSI.

* Check program ID
 IF P_PROGID = SPACE.							
    RAISE INVALID_PROGRAM_ID.
 ENDIF.

* determine if the RFC destination authority
  CALL FUNCTION 'RFC_READ_TCPIP_DESTINATION'
       EXPORTING destination = P_DEST
                 authority_check = 'X'
  IMPORTING rfcunicode = isunicode.

* Use current gateway if no info exits
 IF P_GWHOST = SPACE OR P_GWSERV = SPACE.
  CALL FUNCTION 'RFC_SYSTEM_INFO'
      IMPORTING
          RFCSI_EXPORT = RFCSI.

  len = strlen( rfcsi-rfcdest ) - 2.
  systnr = rfcsi-rfcdest+len.
  len = len - 1 - 3.
  r3name = rfcsi-rfcdest+len(3).
  len = len - 1.
  options-rfcgwhost = rfcsi-rfcdest(len).
  CONCATENATE 'sapgw' SYSTNR INTO options-rfcgwserv.
 ELSE.
   options-rfcgwhost = P_GWHOST.
   options-rfcgwserv = P_GWSERV.
 ENDIF.

* Parameters for GWY function call
  GWY_GWHOST = OPTIONS-RFCGWHOST.
  GWY_GWSERV = OPTIONS-RFCGWSERV.
  GWY_TPNAME = P_PROGID.

* Check gateway and server program registered
  CALL FUNCTION 'GWY_GET_NO_REG_PROGRAMS'
     EXPORTING
        GWHOST      = GWY_GWHOST
        GWSERV      = GWY_GWSERV
        TPNAME      = GWY_TPNAME
     IMPORTING
        NOREG_TOTAL = NTOTAL
     EXCEPTIONS
        OTHERS      = 1.

  IF sy-subrc NE 0.
     raise CONNECT_TO_GATEWAY_FAILED.
  ENDIF.

  IF NTOTAL = 0.
     raise SERVER_NOT_REGISTERED.
  ENDIF.

  IF NTOTAL GT 1.
     raise DUPLICATE_REG_PROGRAMS.
  ENDIF.

* build new connection to a registered server
  options-rfcexec   = gwy_tpname.
  options-rfcgwhost = gwy_gwhost.
  options-rfcgwserv = gwy_gwserv.
  options-rfchost   = '%%RFCSERVER%%'.
  IF P_SNC_ON = 'X'.
    options-rfcsnc  = 'X'.
  ENDIF.

  CALL 'RFCControl' ID 'CODE' FIELD 'O'
                    ID 'DESTINATION' FIELD P_DEST
                    ID 'TYPE' FIELD rfctype_external_tcp
                    ID 'OPTIONS' FIELD options.

  IF sy-subrc NE 0.
     RAISE CONNECT_TO_REG_SERVER_FAILED.
   ENDIF.

* and set exclusive mode to keep server owned
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
      EXPORTING  destination = P_DEST
                 exclusiv    = 'Y'
      EXCEPTIONS connect_to_reg_server_failed = 1
                 exclusiv_not_supported       = 2.

  IF SY-SUBRC NE 0.
     CASE SY-SUBRC.
          WHEN 1.
              RAISE CONNECT_TO_REG_SERVER_FAILED.
          WHEN 2.
              RAISE EXCLUSIV_NOT_SUPPORTED.
     ENDCASE.
  ENDIF.

ENDFORM.

FORM DISCONNECT_RFCDEST_FROM_PROGID.
* set exclusive mode to E to end the session
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
     EXPORTING
         destination = P_DEST
         exclusiv    = 'E'
     EXCEPTIONS
         connect_to_reg_server_failed = 1				
         exclusiv_not_supported       = 2.
ENDFORM.
