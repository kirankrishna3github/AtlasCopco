*&---------------------------------------------------------------------*
*&  Include           ZSQLEXPLORERF06
*&---------------------------------------------------------------------*
************************************************************************
*^ Written By      : Anda Wu
*^ Date Written    : 2017/05/26
*^ Include Name    : ZSQLEXPLORERF06
*^ Used in Programs: <Programs referencing this include>
*^ Purpose         : To Create A Dynamic SQL
*
*^ Other           :
************************************************************************

************************************************************************
*&      Form  Get_Data_In_Dynamic_SQL
************************************************************************
FORM get_data_in_dynamic_sql USING pt_text   TYPE  ty_t_text
                                   pv_type    TYPE  string
                                   pt_fields TYPE  ty_t_element
                                   pt_select TYPE  ty_t_text
                                   pt_on     TYPE  ty_t_text
                                   pt_where  TYPE  ty_t_text
                                   pt_group  TYPE  ty_t_text
                                   pt_have    TYPE  ty_t_text
                                   pt_order   TYPE  ty_t_text .

  DATA : ls_text   TYPE  ty_s_text,
         lr_table  TYPE  REF TO data,
         lr_line   TYPE  REF TO data,
         lv_length TYPE  i          .

*& Get Field Statement
  lv_length = 6 .
  PERFORM set_blank USING lv_length
                 CHANGING pt_select .

*& Get Table Statement
  lv_length = 6 .
  PERFORM set_blank USING lv_length
                 CHANGING pt_on .


*& Get Where Statement
  lv_length = 6 .
  PERFORM set_blank USING lv_length
                 CHANGING pt_where .

*& Get Group Statement
  lv_length = 9 .
  PERFORM set_blank USING lv_length
                 CHANGING pt_group.

*& Get Have  Statement
  lv_length = 6 .
  PERFORM set_blank USING lv_length
                 CHANGING pt_have.


*& Get Order Statement
  lv_length = 9 .
  PERFORM set_blank USING lv_length
                 CHANGING pt_order.


*& Get Dynamic Structure
  PERFORM get_structure USING pt_fields
                     CHANGING lr_table .

  CHECK gt_exception[] IS INITIAL .

  ASSIGN lr_table->* TO <table> .

  CREATE DATA lr_line LIKE LINE OF <table>.
  ASSIGN lr_line->* TO <line> .

*& Check SQL Type
  PERFORM get_data USING  pt_select  pt_on
                          pt_where   pt_group
                          pt_have    pt_order
                          pv_type
                CHANGING  <table>   <line>.

ENDFORM .                    "Get_Data_in_dynamic_SQL


************************************************************************
*&      Form  Get_Structure
************************************************************************
FORM get_structure USING  pt_fields  TYPE ty_t_element
                CHANGING  pr_ref     TYPE REF TO data .
  DATA: ls_component  TYPE  abap_componentdescr,
        lt_component  TYPE  abap_component_tab,
        ls_strucdescr TYPE  REF TO cl_abap_structdescr,
        lt_tabledescr TYPE  REF TO cl_abap_tabledescr,
        ls_field      TYPE  TY_S_element,
        lr_oref       TYPE  REF TO cx_root ,
        lv_str         TYPE  string,
        lv_msg         TYPE  string.

  LOOP AT pt_fields INTO ls_field .
    CLEAR :  ls_component .
    ls_component-name  =  ls_field-alias .

    IF  ls_field-display(6) = c_element-count1 .
      CONCATENATE 'LVC_S_FCAT' '-'  'ROW_POS'
         INTO lv_str .
    ELSE .
      CONCATENATE ls_field-source '-' ls_field-name
             INTO lv_str .
    ENDIF .

    PERFORM case_to_upper CHANGING lv_str .
    PERFORM case_to_upper CHANGING ls_component-name .

    TRY.

        ls_component-type ?= cl_abap_typedescr=>describe_by_name( lv_str ).
        INSERT ls_component INTO TABLE lt_component.

      CATCH cx_root INTO lr_oref.
        lv_msg  = lr_oref->get_text( ).
        PERFORM append_error_message USING 4 lv_msg .
      CLEANUP.
        CLEAR lr_oref.
    ENDTRY .

  ENDLOOP .

  CHECK gt_exception[] IS INITIAL .

  TRY.
      IF lt_component IS NOT INITIAL.
        ls_strucdescr = cl_abap_structdescr=>create( lt_component ).
        lt_tabledescr = cl_abap_tabledescr=>create( p_line_type = ls_strucdescr ).
      ENDIF.
      CREATE DATA pr_ref TYPE HANDLE lt_tabledescr.
    CATCH cx_root INTO lr_oref.
      lv_msg  = lr_oref->get_text( ).
      PERFORM append_error_message USING 4 lv_msg .
    CLEANUP.
      CLEAR lr_oref.
  ENDTRY .


ENDFORM .                    "get_structure


************************************************************************
*&      Form  Get_Data
************************************************************************
FORM get_data USING  pt_field   TYPE  ty_t_text
                     pt_table   TYPE  ty_t_text
                     pt_where   TYPE  ty_t_text
                     pt_group   TYPE  ty_t_text
                     pt_have    TYPE  ty_t_text
                     pt_order   TYPE  ty_t_text
                     pv_type    TYPE  string
           CHANGING  pt_data   TYPE  STANDARD TABLE
                     ps_line   TYPE  any  .
  DATA : lr_oref   TYPE REF TO cx_root ,
         ls_text    TYPE ty_s_text        ,
         lv_msg    TYPE string         .

  TRY.
      CASE pv_type  .
        WHEN c_element-single  .
          SELECT SINGLE (pt_field)
            INTO ps_line
            FROM (pt_table)
           WHERE (pt_where)
           GROUP BY (pt_group)
          HAVING (pt_have).
          APPEND ps_line TO pt_data .

        WHEN c_element-distinct  .
          SELECT DISTINCT (pt_field)
            INTO TABLE pt_data
            FROM (pt_table)
            UP TO GV_MAXLINE ROWS
           WHERE (pt_where)
           GROUP BY (pt_group)
          HAVING (pt_have)
           ORDER BY (pt_order) .

        WHEN OTHERS .
          SELECT (pt_field)
            INTO TABLE pt_data
            FROM (pt_table)
            UP TO GV_MAXLINE ROWS
           WHERE (pt_where)
           GROUP BY (pt_group)
          HAVING (pt_have)
           ORDER BY (pt_order) .


      ENDCASE .

    CATCH cx_root INTO lr_oref.
      lv_msg  = lr_oref->get_text( ).
      PERFORM append_error_message USING 4 lv_msg .

    CLEANUP.
      CLEAR lr_oref.

  ENDTRY .

ENDFORM .                    "Get_Data


************************************************************************
*&      Form  Get_Field_Statement
************************************************************************
FORM get_field_statement     USING pt_element  TYPE ty_t_element
                          CHANGING pt_field    TYPE ty_t_text   .
  DATA : ls_element TYPE  TY_S_element ,
         ls_field   TYPE  ty_s_text    ,
         l_temp     TYPE  string     .


  LOOP AT pt_element INTO ls_element .

    ls_field-line  = ls_element-display .

    APPEND ls_field TO pt_field  .

  ENDLOOP .


ENDFORM .                    "Get_Field_Statement

************************************************************************
*&      Form  Set_Blank
************************************************************************
FORM set_blank      USING pv_length  TYPE  i
                 CHANGING pt_text    TYPE  ty_t_text.
  DATA : ls_text  TYPE  ty_s_text .

  CHECK pt_text IS NOT INITIAL .

  READ TABLE pt_text INTO ls_text INDEX 1 .
  ls_text-line(pv_length) = '' .
  SHIFT ls_text-line BY pv_length PLACES RIGHT .
  MODIFY pt_text FROM ls_text INDEX 1 .

ENDFORM .                    "Set_Blank
