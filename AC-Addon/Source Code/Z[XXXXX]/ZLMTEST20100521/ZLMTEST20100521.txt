REPORT  ZLMTEST20100521.

TYPE-POOLS: ibco2.

data: gv_cuobj         TYPE CUIB_CUOBJ,
      lt_values        TYPE ibco2_value_tab,
      lt_configuration TYPE IBCO2_INSTANCE_TAB2,
      gv_float         TYPE f,
      lv_char(19)      TYPE c,
      lv_atinn         TYPE atinn,
      lv_labour(1)     TYPE c,
*      lv_labour(15)    TYPE c,
      wa_conf          like LINE OF lt_configuration,
      wa_values        TYPE ibco2_value_rec.

FIELD-SYMBOLS: <ls_value>  TYPE ibco2_value_rec,
               <ls_conf>   TYPE ibco2_instance_rec2.

DATA: BEGIN OF t_rec OCCURS 0.
        INCLUDE STRUCTURE yam_iqq.
DATA: END OF t_rec.
*-------------------------------------------------------------------

* internal objectnr. from equipment
MOVE '000000000000002887' TO gv_cuobj.

* get values
  CALL FUNCTION 'CUCB_GET_VALUES_FROM_INSTANCE'
    EXPORTING
      iv_instance      = gv_cuobj
    IMPORTING
      et_values        = lt_values
    EXCEPTIONS
      invalid_instance = 1
      OTHERS           = 2.

DO 7 TIMES varying lv_LABOUR FROM t_rec-I_LABOUR NEXT t_rec-A_LABOUR.

  IF lv_labour = '0'.               " ? '0              '.
    CONTINUE.
  ENDIF.

* determine characteristic
  CASE sy-index.
    WHEN 1.
      lv_char = 'CH_TL_EXTRA_LABOURI'.
    WHEN 2.
      lv_char = 'CH_TL_EXTRA_LABOURA'.
    WHEN 3.
      lv_char = 'CH_TL_EXTRA_LABOURB'.
    WHEN 4.
      lv_char = 'CH_TL_EXTRA_LABOURC'.
    WHEN 5.
      lv_char = 'CH_TL_EXTRA_LABOURD'.
    WHEN 6.
      lv_char = 'CH_TL_EXTRA_LABOURE'.
    WHEN 7.
      lv_char = 'CH_TL_EXTRA_LABOURF'.
    WHEN OTHERS.
  ENDCASE.

* get internal characteristic
  CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
    EXPORTING
      input  = lv_char
    IMPORTING
      output = lv_atinn.

* change values
  LOOP AT lt_values ASSIGNING <ls_value>
    WHERE atinn = lv_atinn.
* !!!! floating-point value !!!!!
    gv_float = lv_labour.
    <ls_value>-atflv =  gv_float.
  ENDLOOP.

  IF sy-subrc <> 0.
* value still to be created
    wa_values-atinn = lv_atinn.
*    gv_float = lv_labour.
    gv_float = 8.
    wa_values-atflv = gv_float.
    wa_values-atcod = '1'.
    APPEND wa_values to lt_values.
  ENDIF.

* get configuration
  CALL FUNCTION 'CUCB_GET_CONFIGURATION'
    EXPORTING
      instance                     = gv_cuobj
    IMPORTING
      configuration                = lt_configuration
    EXCEPTIONS
      invalid_instance             = 1
      instance_is_a_classification = 2
      OTHERS                       = 3.


  IF sy-subrc IS INITIAL AND
     NOT lt_configuration IS INITIAL.

    READ TABLE lt_configuration ASSIGNING <ls_conf>
                       WITH KEY instance = gv_cuobj.

    <ls_conf>-values = lt_values.

*.. set changed configuration to CBase
    CALL FUNCTION 'CUCB_SET_CONFIGURATION'
      EXPORTING
        root_instance                = gv_cuobj
      CHANGING
        configuration                = lt_configuration
      EXCEPTIONS
        invalid_instance             = 1
        instance_is_a_classification = 2
        OTHERS                       = 3.

    READ TABLE lt_configuration into wa_conf INDEX 1.

    CALL FUNCTION 'CUCB_CONFIGURATION_TO_DB'
      EXPORTING
        root_instance                 = gv_cuobj
        root_object                   = wa_conf-owner
      IMPORTING
        new_instance                  = gv_cuobj
      EXCEPTIONS
        invalid_instance              = 1
        invalid_root_instance         = 2
        no_changes                    = 3
        already_registered_for_update = 4
        instance_is_a_classification  = 5
        OTHERS                        = 6.

    IF sy-subrc = 0.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          WAIT          = 'X' .
    ENDIF.
  ENDIF.

enddo.
