*&---------------------------------------------------------------------*
*&  Report  ZVWZAFVC5                                                  *
*&                                                                     *
*&  Dieser Report sollte alle bekannten Error_building_itab Fehler     *
*&  die aufgrund demolierter Folgen bzw. Vorg#ngen auftreten           *
*&                                                                     *
*&---------------------------------------------------------------------*

REPORT  ZVWZAFVC5                               .

PARAMETERS: xaufnr LIKE afih-aufnr OBLIGATORY.
PARAMETERS: test   LIKE sy-datar DEFAULT 'X'.

TABLES: caufv.
TABLES: afvc.
TABLES: affl.

DATA: BEGIN OF afvc_tab OCCURS 10.
        INCLUDE STRUCTURE afvc.
DATA: END OF afvc_tab.

CONSTANTS: stammfolge LIKE afvc-aplfl VALUE '000000'.
CONSTANTS: vornr0 LIKE afvc-vornr VALUE '0000'.

DATA: rc LIKE sy-subrc.
DATA: nvornr(4) TYPE n.
DATA: maxnumber LIKE afvc-vornr VALUE '0001'.
DATA: i TYPE i.
DATA: changeindicator.

IF test = space.
  WRITE: / 'Update Mode'.
ELSE.
  WRITE: / 'Test Mode'.
ENDIF.


PERFORM read_order.
PERFORM read_check_seq.
PERFORM check_seq.
PERFORM read_opr.
PERFORM check_opr_1.
PERFORM check_opr_2.

*&---------------------------------------------------------------------*
*&      Form  READ_ORDER
*&---------------------------------------------------------------------*
FORM read_order.

  SELECT SINGLE * FROM caufv WHERE aufnr = xaufnr.
  IF sy-subrc <>  0.
    WRITE: / 'Not found'.
    EXIT. "================>>>>
  ELSE.
    IF caufv-autyp <> '30'.
      WRITE / 'No PM-Order'.
      EXIT. "================>>>>
    ENDIF.
  ENDIF.
ENDFORM.                    " READ_ORDER


*&---------------------------------------------------------------------*
*&      Form  READ_SEQ                                                 *
*&---------------------------------------------------------------------*
FORM read_check_seq.

  SELECT * FROM affl WHERE aufpl = caufv-aufpl.
    EXIT.
  ENDSELECT.
  IF sy-subrc <> 0.
    affl-aufpl = caufv-aufpl.
    affl-aplzl = '00000001'.
    affl-plnfl = stammfolge.
    affl-flgat = '0'.
    IF test = space.
      INSERT affl.
    ENDIF.
    WRITE : 'Insert SEQUENCE:' , affl-aufpl, affl-aplzl, affl-plnfl,
            affl-flgat.
  ENDIF.
ENDFORM.                    " READ_SEQ

*&---------------------------------------------------------------------*
*&      Form  CHECK_SEQ
*&---------------------------------------------------------------------*
FORM check_seq.

  IF affl-plnfl <> stammfolge OR affl-flgat <> '0'.
    WRITE: / 'Sequence changed: ' , caufv-aufnr, affl-aplzl.
    affl-plnfl = stammfolge.
    affl-flgat = '0'.
    IF test = space.
      UPDATE affl.
    ENDIF.
  ENDIF.

ENDFORM.                    " CHECK_SEQ
*&---------------------------------------------------------------------*
*&      Form  READ_OPR
*&---------------------------------------------------------------------*
FORM read_opr.

  SELECT * FROM afvc INTO TABLE afvc_tab WHERE aufpl = caufv-aufpl.

ENDFORM.                    " READ_OPR

*&---------------------------------------------------------------------*
*&      Form  CHECK_OPR
*&---------------------------------------------------------------------*
FORM check_opr_1.

  LOOP AT afvc_tab.
    IF afvc_tab-aplfl <> stammfolge.
      afvc_tab-aplfl = stammfolge.
      WRITE: / 'Update Operation: ' , afvc_tab-aufpl, afvc_tab-aplzl.
      afvc = afvc_tab.
      MODIFY afvc_tab.
      IF test = space.
        UPDATE afvc.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " CHECK_OPR

*&---------------------------------------------------------------------*
*&      Form  CHECK_OPR_2
*&---------------------------------------------------------------------*
FORM check_opr_2.

  PERFORM get_maxnumber.
  PERFORM check_number.
  PERFORM afvc_to_db.

ENDFORM.                    " CHECK_OPR_2

*&---------------------------------------------------------------------*
*&      FORM  get_maxnumber
*&---------------------------------------------------------------------*
FORM get_maxnumber.

  LOOP AT afvc_tab.
    IF afvc_tab-vornr CO '0123456789'.
      IF maxnumber  < afvc_tab-vornr.
        maxnumber = afvc_tab-vornr.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.                    "GET_MAXNUMBER

*&---------------------------------------------------------------------*
*&      Form  CHECK_NUMER
*&---------------------------------------------------------------------*
FORM check_number.

  DATA: hvornr LIKE afvc-vornr.
  DATA: BEGIN OF a.
          INCLUDE STRUCTURE afvc.
  DATA: END OF a.

* auff¨¹llen Vornr.
  LOOP AT afvc_tab.
    IF afvc_tab-vornr CA space.
      hvornr = afvc_tab-vornr.
      OVERLAY afvc_tab-vornr WITH vornr0.
      MODIFY afvc_tab.
      WRITE: / 'Step 1: Operation OLD:' , hvornr ,
               'Operation NEW:' , afvc_tab-vornr,
               'AFVC-APLZL: ', afvc_tab-aplzl.
      changeindicator = 'X'.
    ENDIF.
  ENDLOOP.

  LOOP AT afvc_tab.
    a = afvc_tab.
    PERFORM check_duprec TABLES afvc_tab
                         USING  a-vornr
                                a-sumnr
                                a-aplzl
                                rc.
*  RC = 0 ===> same Number
    IF rc = 0.
      hvornr = a-vornr.
*    letters in operationnumber ?
      IF a-vornr CN ' 0123456789'.
*      clear number
        CLEAR a-vornr.
      ENDIF.
*     set new number
      a-vornr = maxnumber = nvornr = maxnumber + 1.
      afvc_tab = a.
      MODIFY afvc_tab.
      WRITE: / 'Step 2: Operation OLD:' , hvornr ,
               'Operation NEW: ', afvc_tab-vornr ,
               'AFVC-APLZL: ', afvc_tab-aplzl.
      changeindicator = 'X'.
    ENDIF.
  ENDLOOP.

* mindestens eine richtige Nummer herstellen
  LOOP AT afvc_tab WHERE vornr > '0000' AND vornr < '9999'.
  ENDLOOP.
  IF sy-subrc <> 0.
    READ TABLE afvc_tab INDEX 1.
    hvornr = afvc_tab-vornr.
    afvc_tab-vornr = '0010'.
    IF test = space.
      MODIFY afvc_tab INDEX 1.
    ENDIF.
    WRITE: / 'Step 3: Operation OLD:' , hvornr ,
    'Operation NEW:' , afvc_tab-vornr ,
    'AFVC-APLZL: ', afvc_tab-aplzl.
    changeindicator = 'X'.
  ENDIF.

ENDFORM.                               " CHECK_NUMER


*&---------------------------------------------------------------------*
*&      Form  AFVC_TO_DB
*&---------------------------------------------------------------------*
FORM afvc_to_db.

* Simulation ?
  IF test = space.
    CHECK changeindicator = 'X'.   "=======>>>>>>>>>
    UPDATE afvc FROM TABLE afvc_tab.
  ENDIF.

ENDFORM.                               " AFVC_TO_DB

*&---------------------------------------------------------------------*
*&      FORM  CHECK_DUPREC
*&---------------------------------------------------------------------*
FORM check_duprec TABLES afvc_t STRUCTURE afvc
                         USING xvornr
                               xsumnr
                               xaplzl
                               xrc.
  LOOP AT afvc_t WHERE vornr = xvornr
                 AND   sumnr = xsumnr
                 AND   aplzl <> xaplzl.
  ENDLOOP.
  xrc =  sy-subrc.

ENDFORM.                    "CHECK_DUPREC
