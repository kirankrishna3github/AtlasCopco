REPORT ZAL_ABAP message-id 26 line-size 255
no standard page heading.
* YBO_MaterialMvts.
PARAMETER DOWNLOAD(1) DEFAULT 'N' lower case. "N-svr,Y-clnt
PARAMETER EXECMODE(1) DEFAULT 'B' lower case. "D-dlg,B-btch
PARAMETER OUT_DIR(48) DEFAULT "output file dir
*'/var/load/CP1/UK/read' LOWER CASE.
'/var/load/xxx/UK/read' LOWER CASE.
PARAMETER IN_DIR(48) DEFAULT "input file dir
*'/var/load/CP1/UK/read' LOWER CASE.
'/var/load/xxx/UK/read' LOWER CASE.

PARAMETER $PARAM1(8) TYPE C.

PARAMETER $PARAM2(8) TYPE C.

PARAMETER P_DF_VK(40) DEFAULT "ABAP data flow object key
'' lower case.
PARAMETER P_DI_GEN(40) DEFAULT "DI version that generated ABAP
'' lower case.

*** Machine generated ABAP. Do not modify.            ***
*** # Copyright Business Objects S.A.  All rights reserved. ***
*
* Date Time:
*    06/09/15 03:23:54
* SAP used for generated this ABAP:
*    Release: 701
*    Host   : 10.25.3.26
*
* ABAP Dataflow Name:
*    DF_SDMM_R3_MaterialMvtsMaterial
* ABAP Dataflow comments:
*    SAP source: MSEG, MKPF, T001W
* ABAP program name in SAP:
*    YBO_MATERIALMVTS
* Generated ABAP file name:
*    D:/Data/SAPLogistics/PRD/ABAP/YBO_MaterialMvts
TABLES MSEG.
TABLES MKPF.
TABLES T001W.

DATA: begin of ITAB3 occurs 0,
MANDT(3) TYPE C,
MBLNR(10) TYPE C,
MJAHR(4) TYPE N,
BUDAT TYPE D,
ZEILE(4) TYPE N,
MATNR(18) TYPE C,
WERKS(4) TYPE C,
LGORT(4) TYPE C,
BWART(3) TYPE C,
MENGE(16) TYPE P DECIMALS 3,
DMBTR(16) TYPE P DECIMALS 2,
WAERS(5) TYPE C,
EBELN(10) TYPE C,
EBELP(5) TYPE N,
KDAUF(10) TYPE C,
KDPOS(6) TYPE N.
DATA: end of ITAB3.

DATA: begin of ITAB5 occurs 0,
MANDT(3) TYPE C,
MBLNR(10) TYPE C,
MJAHR(4) TYPE N,
BUDAT TYPE D,
ZEILE(4) TYPE N,
MATNR(18) TYPE C,
WERKS(4) TYPE C,
LGORT(4) TYPE C,
BWART(3) TYPE C,
MENGE(16) TYPE P DECIMALS 3,
DMBTR(16) TYPE P DECIMALS 2,
WAERS(5) TYPE C,
EBELN(10) TYPE C,
EBELP(5) TYPE N,
KDAUF(10) TYPE C,
KDPOS(6) TYPE N.
DATA: end of ITAB5.

data: append_flag(1) value ' ',
      cntbuf type i,
      delimleng type i.

CONSTANTS C_DF_VK(40) VALUE '7982'.
CONSTANTS C_DI_GEN(40) VALUE '12.2.2.3'.
DATA WARN_MSG(50).
DATA: gv_directory     TYPE epsdirnam  VALUE '/var/load/xxx/UK/read/',
      gv_logsys        like tbdlst-logsys.

start-of-selection.
* Logical system
  CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
    IMPORTING
      own_logical_system             = gv_logsys
    EXCEPTIONS
      own_logical_system_not_defined = 1
      OTHERS                         = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE 'E' NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    STOP.
  ENDIF.
  REPLACE 'xxx' IN out_dir WITH gv_logsys(3).
  REPLACE 'xxx' IN in_dir WITH gv_logsys(3).



PERFORM FORM3.
PERFORM FORM5.
FREE ITAB3.
PERFORM FORM6.
FREE ITAB5.

end-of-selection.

CLEAR WARN_MSG.

IF NOT P_DF_VK IS INITIAL.
  IF P_DF_VK <> C_DF_VK.
     CONCATENATE '$$Warning$'
                 C_DF_VK
                 '$' INTO WARN_MSG.
  ENDIF.
ENDIF.
IF NOT P_DI_GEN IS INITIAL.
  IF P_DI_GEN <> C_DI_GEN.
     IF WARN_MSG IS INITIAL.
       CONCATENATE '$$Warning$$'
                   C_DI_GEN
                   INTO WARN_MSG.
     ELSE.
       CONCATENATE WARN_MSG
                   C_DI_GEN
                   INTO WARN_MSG.
     ENDIF.
  ENDIF.
ENDIF.

IF NOT WARN_MSG IS INITIAL.
  IF EXECMODE = 'D'.
    WRITE WARN_MSG.
    NEW-LINE.
  ELSE.
    MESSAGE S000 with WARN_MSG.
  ENDIF.
ENDIF.


write  '* Program Complete *'.
write  '# Copyright Business Objects S.A.  All rights reserved.'
.

FORM FORM3.
DATA ALTMP1(3) TYPE C.
DATA ALTMP2(10) TYPE C.
DATA ALTMP3(4) TYPE N.
DATA ALTMP4 TYPE D.
DATA ALTMP5(4) TYPE N.
DATA ALTMP6(18) TYPE C.
DATA ALTMP7(4) TYPE C.
DATA ALTMP8(4) TYPE C.
DATA ALTMP9(3) TYPE C.
DATA ALTMP10(16) TYPE P DECIMALS 3.
DATA ALTMP11(16) TYPE P DECIMALS 2.
DATA ALTMP12(5) TYPE C.
DATA ALTMP13(10) TYPE C.
DATA ALTMP14(5) TYPE N.
DATA ALTMP15(10) TYPE C.
DATA ALTMP16(6) TYPE N.

DATA MKPF9MANDT LIKE MKPF-MANDT.
DATA MKPF9MBLNR LIKE MKPF-MBLNR.
DATA MKPF9MJAHR LIKE MKPF-MJAHR.
DATA MKPF9BUDAT LIKE MKPF-BUDAT.
DATA MSEG9ZEILE LIKE MSEG-ZEILE.
DATA MSEG9MATNR LIKE MSEG-MATNR.
DATA MSEG9WERKS LIKE MSEG-WERKS.
DATA MSEG9LGORT LIKE MSEG-LGORT.
DATA MSEG9BWART LIKE MSEG-BWART.
DATA MSEG9WAERS LIKE MSEG-WAERS.
DATA MSEG9EBELN LIKE MSEG-EBELN.
DATA MSEG9EBELP LIKE MSEG-EBELP.
DATA MSEG9KDAUF LIKE MSEG-KDAUF.
DATA MSEG9KDPOS LIKE MSEG-KDPOS.
DATA MSEG9MENGEsum LIKE MSEG-MENGE.
DATA MSEG9DMBTRsum LIKE MSEG-DMBTR.



SELECT
  MKPF9~MANDT
  MKPF9~MBLNR
  MKPF9~MJAHR
  MKPF9~BUDAT
  MSEG9~ZEILE
  MSEG9~MATNR
  MSEG9~WERKS
  MSEG9~LGORT
  MSEG9~BWART
  MSEG9~WAERS
  MSEG9~EBELN
  MSEG9~EBELP
  MSEG9~KDAUF
  MSEG9~KDPOS
  sum( MSEG9~MENGE )
  sum( MSEG9~DMBTR )
into (MKPF9MANDT,
  MKPF9MBLNR,
  MKPF9MJAHR,
  MKPF9BUDAT,
  MSEG9ZEILE,
  MSEG9MATNR,
  MSEG9WERKS,
  MSEG9LGORT,
  MSEG9BWART,
  MSEG9WAERS,
  MSEG9EBELN,
  MSEG9EBELP,
  MSEG9KDAUF,
  MSEG9KDPOS,
  MSEG9MENGEsum,
  MSEG9DMBTRsum)
FROM MSEG AS MSEG9
 INNER JOIN MKPF AS MKPF9
 ON ( ( MSEG9~MJAHR = MKPF9~MJAHR )
 AND ( MSEG9~MBLNR = MKPF9~MBLNR ) )
WHERE ( ( MKPF9~BUDAT <= $PARAM2 )
 AND ( MKPF9~BUDAT >= $PARAM1 ) )
GROUP BY MKPF9~MANDT
MKPF9~BUDAT
MSEG9~BWART
MSEG9~MATNR
MSEG9~WERKS
MSEG9~LGORT
MSEG9~KDAUF
MSEG9~KDPOS
MSEG9~WAERS
MSEG9~EBELN
MSEG9~EBELP
MSEG9~MJAHR
MKPF9~MJAHR
MSEG9~ZEILE
MSEG9~MBLNR
MKPF9~MBLNR
.
ALTMP1 = MKPF9MANDT.
ALTMP2 = MKPF9MBLNR.
ALTMP3 = MKPF9MJAHR.
ALTMP4 = MKPF9BUDAT.
ALTMP5 = MSEG9ZEILE.
ALTMP6 = MSEG9MATNR.
ALTMP7 = MSEG9WERKS.
ALTMP8 = MSEG9LGORT.
ALTMP9 = MSEG9BWART.
ALTMP10 = MSEG9MENGEsum.
ALTMP11 = MSEG9DMBTRsum.
ALTMP12 = MSEG9WAERS.
ALTMP13 = MSEG9EBELN.
ALTMP14 = MSEG9EBELP.
ALTMP15 = MSEG9KDAUF.
ALTMP16 = MSEG9KDPOS.
 move ALTMP1 to ITAB3-MANDT.
 move ALTMP2 to ITAB3-MBLNR.
 move ALTMP3 to ITAB3-MJAHR.
 move ALTMP4 to ITAB3-BUDAT.
 move ALTMP5 to ITAB3-ZEILE.
 move ALTMP6 to ITAB3-MATNR.
 move ALTMP7 to ITAB3-WERKS.
 move ALTMP8 to ITAB3-LGORT.
 move ALTMP9 to ITAB3-BWART.
 move ALTMP10 to ITAB3-MENGE.
 move ALTMP11 to ITAB3-DMBTR.
 move ALTMP12 to ITAB3-WAERS.
 move ALTMP13 to ITAB3-EBELN.
 move ALTMP14 to ITAB3-EBELP.
 move ALTMP15 to ITAB3-KDAUF.
 move ALTMP16 to ITAB3-KDPOS.
 append ITAB3.
ENDSELECT.
ENDFORM.

FORM FORM5.
DATA ALTMP17(3) TYPE C.
DATA ALTMP18(10) TYPE C.
DATA ALTMP19(4) TYPE N.
DATA ALTMP20 TYPE D.
DATA ALTMP21(4) TYPE N.
DATA ALTMP22(18) TYPE C.
DATA ALTMP23(4) TYPE C.
DATA ALTMP24(4) TYPE C.
DATA ALTMP25(3) TYPE C.
DATA ALTMP26(16) TYPE P DECIMALS 3.
DATA ALTMP27(16) TYPE P DECIMALS 2.
DATA ALTMP28(5) TYPE C.
DATA ALTMP29(10) TYPE C.
DATA ALTMP30(5) TYPE N.
DATA ALTMP31(10) TYPE C.
DATA ALTMP32(6) TYPE N.



SORT ITAB3 BY WERKS .

SELECT
  WERKS
  EKORG
INTO CORRESPONDING FIELDS OF T001W
FROM T001W
WHERE EKORG IN ('CN01',
'CN04',
'HK01',
'RU01').
READ TABLE ITAB3
WITH KEY WERKS = T001W-WERKS
 BINARY SEARCH.
IF sy-subrc = 0.
LOOP AT ITAB3 FROM sy-tabix.
IF ITAB3-WERKS = T001W-WERKS.
ALTMP17 = ITAB3-MANDT.
ALTMP18 = ITAB3-MBLNR.
ALTMP19 = ITAB3-MJAHR.
ALTMP20 = ITAB3-BUDAT.
ALTMP21 = ITAB3-ZEILE.
ALTMP22 = ITAB3-MATNR.
ALTMP23 = ITAB3-WERKS.
ALTMP24 = ITAB3-LGORT.
ALTMP25 = ITAB3-BWART.
ALTMP26 = ITAB3-MENGE.
ALTMP27 = ITAB3-DMBTR.
ALTMP28 = ITAB3-WAERS.
ALTMP29 = ITAB3-EBELN.
ALTMP30 = ITAB3-EBELP.
ALTMP31 = ITAB3-KDAUF.
ALTMP32 = ITAB3-KDPOS.
 move ALTMP17 to ITAB5-MANDT.
 move ALTMP18 to ITAB5-MBLNR.
 move ALTMP19 to ITAB5-MJAHR.
 move ALTMP20 to ITAB5-BUDAT.
 move ALTMP21 to ITAB5-ZEILE.
 move ALTMP22 to ITAB5-MATNR.
 move ALTMP23 to ITAB5-WERKS.
 move ALTMP24 to ITAB5-LGORT.
 move ALTMP25 to ITAB5-BWART.
 move ALTMP26 to ITAB5-MENGE.
 move ALTMP27 to ITAB5-DMBTR.
 move ALTMP28 to ITAB5-WAERS.
 move ALTMP29 to ITAB5-EBELN.
 move ALTMP30 to ITAB5-EBELP.
 move ALTMP31 to ITAB5-KDAUF.
 move ALTMP32 to ITAB5-KDPOS.
 append ITAB5.
 cntbuf = cntbuf + 1.
 if download = 'N'.
  if cntbuf > 5000.
    perform FORM6.
    clear cntbuf.
    refresh ITAB5.
    append_flag = 'A'.
  endif.
 endif.
ELSE.
EXIT.
ENDIF.
ENDLOOP.
ENDIF.
ENDSELECT.
ENDFORM.

FORM FORM6.
data: outfile(128), ldfile(50).
ldfile = 'MSEG_MKPF_MATERIALMVT'.
concatenate out_dir ldfile into outfile
  separated by '/'.
data  dlmtlen type i value '1'.
data xdlmtlen type i value '1'.
data:
  ht(1) type c,
  xht(1) type x,
  conv type ref to cl_abap_conv_in_ce.
xht = '7F'.
conv = cl_abap_conv_in_ce=>create(
  encoding = '4110'
  input = xht
).
call method conv->read(
  exporting n    = xdlmtlen
  importing data = ht
            len = dlmtlen
).
data return_code type i.
 perform write_delimited_file
           tables   ITAB5
           using    outfile
                    append_flag
                    ht
                    dlmtlen
                    download
           changing return_code.

  case return_code.
    when 1.
      IF EXECMODE = 'D'.
        WRITE: /5 'No line selected'.
      ELSE.
        MESSAGE E098.
      ENDIF.
    when 2.
      IF EXECMODE = 'D'.
        WRITE: /5 'Open File Error -- ', 25 OUTFILE.
      ELSE.
        MESSAGE  E107 WITH OUTFILE.
      ENDIF.
    when 3.
      IF EXECMODE = 'D'.
        WRITE: /5 'Data exceed length limit (8192) '.
      ELSE.
        MESSAGE  E000 WITH
             'Data exceed length limit (8192) '.
      ENDIF.
    when 4.
      IF EXECMODE = 'D'.
        WRITE: /5 'Call function WS_DOWNLOAD error'.
      ELSE.
        MESSAGE  E000 WITH
             'Call function WS_DOWNLOAD error'.
      ENDIF.
  endcase.
ENDFORM.

FORM SUBSTRING USING SRC BEG LEN CHANGING RET.

DATA: VA1 TYPE I.
DATA: VA2 TYPE I.
DATA: VA3 TYPE I.

VA3 = STRLEN( SRC ).

IF  BEG = 0.   VA1 = 0.
ELSE.
  IF  BEG < 0.
    VA1 = VA3 + BEG.
    IF  VA1 < 0.   VA1 = 0.
    ENDIF.
  ELSE.          VA1 = BEG - 1.
  ENDIF.
ENDIF.

IF  LEN < 0.   VA2 = 0.
ELSE.          VA2 = VA3 - VA1.
ENDIF.

IF  VA2 > LEN. VA2 = LEN.
ENDIF.

IF  VA2 < 1.   MOVE ''           TO RET.
ELSE.          MOVE SRC+VA1(VA2) TO RET.
ENDIF.

ENDFORM.

form write_delimited_file
           tables   datatab
           using    file
                    append
                    delimit
                    dlength
                    dwnload
          changing rc.

  data: type1,
        appd(1),
        temp(32),
        time1(8),
        date1(10),
        output(8192),
        rcount type i,
        offset type i,
        tablen type i,
        maxlen type i value '8192'.

  data: begin of clientab occurs 0,
             output(8192),
          end of clientab.

  field-symbols: <f>.
  field-symbols <delim1>.
  data delim2(16).
  data l_filename type string.

  appd = append.
  if appd is not initial.
     appd = 'X'.
  endif.
  move file to l_filename.
  describe table datatab lines tablen.


  if dwnload = 'Y'.
     clear clientab. refresh clientab.
     rcount = 0.
  else.
     if appd = space.
         open dataset file for output in text mode ENCODING
UTF-8.
     else.
         open dataset file for appending in text mode ENCODING
UTF-8.
     endif.
     if sy-subrc <> 0.
         rc = 2. exit.
     endif.
  endif.

  loop at datatab.
    clear: tablen, offset, output.
    do.
      assign component sy-index of
         structure datatab to <f>.
      if sy-subrc <> 0. exit. endif.
      if sy-index > 1.
         assign delimit(dlength) TO <delim1> CASTING TYPE C.
         delim2 = <delim1>.
         write delim2(dlength) to output+offset(dlength).
         add dlength to offset.
      endif.

      describe field <f> type type1.

      if type1 = 'I' or type1 = 'N'.
          type1 = 'P'.
      endif.

      case type1.
        when 'D'.
          if <f> = '00000000'.
             <f> = ' '.
          else.
             move <f> to time1.
             assign time1 to <f>.
          endif.
        when 'F'.
          if <f> = '0.0'.
            temp = '0.0'.
          else.
             write <f> to temp exponent 0.
          endif.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
        when 'P'.
          if <f> < 0.
             write '-' to output+offset(1).
             add 1 to offset.
             <f> = <f> * ( -1 ).
          endif.
          move <f> to temp.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
      endcase.

      sy-fdpos = strlen( <f> ).

      tablen = offset + sy-fdpos.
      if tablen > maxlen.
         rc = 3. exit.
      endif.
      write <f> to output+offset(sy-fdpos).
      add sy-fdpos to offset.
    enddo.

    if dwnload = 'Y'.
       clientab-output = output.
       append clientab.
       rcount = rcount + 1.
       if rcount >= 50.
          SY-BATCH = SPACE.
          CALL FUNCTION 'GUI_DOWNLOAD'
            EXPORTING
              FILENAME = l_filename
              FILETYPE = 'ASC'
              CODEPAGE = '4110'
              APPEND   = appd
              WRITE_FIELD_SEPARATOR = 'X'
*            IMPORTING
*              FILELENGTH =
            TABLES
              DATA_TAB = clientab
            EXCEPTIONS
              OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
          clear clientab. refresh clientab.
          rcount = 0. appd = 'A'.
       endif.
    else.
       transfer output to file.
    endif.
  endloop.

  if dwnload = 'Y'.
       SY-BATCH = SPACE.
       CALL FUNCTION 'GUI_DOWNLOAD'
         EXPORTING
           FILENAME = l_filename
           FILETYPE = 'ASC'
              CODEPAGE = '4110'
           APPEND   = appd
           WRITE_FIELD_SEPARATOR = 'X'
*         IMPORTING
*           FILELENGTH =
         TABLES
           DATA_TAB = clientab
         EXCEPTIONS
           OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
  else.
       close dataset file.
  endif.
endform.
