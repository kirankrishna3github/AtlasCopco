*&---------------------------------------------------------------------*
*& Report  ZJWU_PDF_VIEWER
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

report  zjwu_pdf_viewer.

data : g_html_container type ref to cl_gui_custom_container,
       g_html_control   type ref to cl_gui_html_viewer.


* Variable declarations
data:
w_form_name type tdsfname value 'YSE_SD_PO',
w_fmodule type rs38l_fnam,
w_cparam type ssfctrlop,
w_outoptions type ssfcompop,
w_bin_filesize type i, " Binary File Size
w_file_name type string,
w_file_path type string,
w_full_path type string,
w_nast type nast,
w_ekko type ekko,
w_pekko type pekko,
l_xekpo type table of  ekpo,
l_xekpa type table of  ekpa,
l_xpekpo type table of  pekpo,
l_xeket type table of  eket,
l_xtkomv type table of   komv,
l_xekkn type table of  ekkn,
l_xekek type table of  ekek,
l_xkomk type table of  komk.

* Internal tables declaration

* Internal table to hold the OTF data
data:
t_otf type itcoo occurs 0 with header line,

* Internal table to hold OTF data recd from the SMARTFORM
t_otf_from_fm type ssfcrescl,

* Internal table to hold the data from the FM CONVERT_OTF
lt_pdf type table of tline,
ls_pdf like line of lt_pdf,
lv_content  type xstring,
LV_URL TYPE CHAR255,
LT_DATA TYPE STANDARD TABLE OF X255.

field-symbols <fs_x> type x.


* This function module call is used to retrieve the name of the Function
* module generated when the SMARTFORM is activated

call function 'SSF_FUNCTION_MODULE_NAME'
exporting
formname = w_form_name
* VARIANT = ' '
* DIRECT_CALL = ' '
importing
fm_name = w_fmodule
exceptions
no_form = 1
no_function_module = 2
others = 3
.
if sy-subrc <> 0.
  message id sy-msgid type sy-msgty number sy-msgno
  with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
endif.

* Calling the SMARTFORM using the function module retrieved above
* GET_OTF parameter in the CONTROL_PARAMETERS is set to get the OTF
* format of the output


w_cparam-device = 'PRINTER'.
w_cparam-no_dialog = 'X'.
w_cparam-preview = space. " Suppressing the dialog box
" for print preview
w_cparam-getotf = 'X'.

* Printer name to be used is provided in the export parameter
* OUTPUT_OPTIONS
w_outoptions-tddest = 'LP01'.

call function w_fmodule
exporting
* ARCHIVE_INDEX =
* ARCHIVE_INDEX_TAB =
* ARCHIVE_PARAMETERS =
control_parameters = w_cparam
* MAIL_APPL_OBJ =
* MAIL_RECIPIENT =
* MAIL_SENDER =
output_options = w_outoptions
zxekko = w_ekko
zxpekko = w_pekko
is_nast = w_nast
* USER_SETTINGS = 'X'
importing
* DOCUMENT_OUTPUT_INFO =
job_output_info = t_otf_from_fm
* JOB_OUTPUT_OPTIONS =
tables
l_xekpo = l_xekpo
l_xekpa = l_xekpa
l_xpekpo = l_xpekpo
l_xeket = l_xeket
l_xtkomv = l_xtkomv
l_xekkn = l_xekkn
l_xekek = l_xekek
l_xkomk = l_xkomk
exceptions
formatting_error = 1
internal_error = 2
send_error = 3
user_canceled = 4
others = 5
.
if sy-subrc <> 0.
  message id sy-msgid type sy-msgty number sy-msgno
  with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
endif.

t_otf[] = t_otf_from_fm-otfdata[].

* Function Module CONVERT_OTF is used to convert the OTF format to PDF

call function 'CONVERT_OTF'
exporting
format = 'PDF'
max_linewidth = 132
* ARCHIVE_INDEX = ' '
* COPYNUMBER = 0
* ASCII_BIDI_VIS2LOG = ' '
* PDF_DELETE_OTFTAB = ' '
importing
bin_filesize = w_bin_filesize
* BIN_FILE =
tables
otf = t_otf
lines = lt_pdf
exceptions
err_max_linewidth = 1
err_format = 2
err_conv_not_possible = 3
err_bad_otf = 4
others = 5
.
if sy-subrc <> 0.
  message id sy-msgid type sy-msgty number sy-msgno
  with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
endif.

* convert pdf to xstring string
loop at lt_pdf into ls_pdf.
  assign ls_pdf to <fs_x> casting.
  concatenate lv_content <fs_x> into lv_content in byte mode.
endloop.

call screen 100.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
module status_0100 output.
*  SET PF-STATUS 'xxxxxxxx'.
*  SET TITLEBAR 'xxx'.

  create object g_html_container
    exporting
      container_name = 'PDF'.

  create object g_html_control
    exporting
      parent = g_html_container.

* Convert xstring to binary table to pass to the LOAD_DATA method
  call function 'SCMS_XSTRING_TO_BINARY'
    exporting
      buffer     = lv_content
    tables
      binary_tab = lt_data.

* Load the HTML
  call method g_html_control->load_data(
     exporting
       type         = 'application'
       subtype      = 'pdf'
     importing
       assigned_url         = lv_url
     changing
       data_table           = lt_data
     exceptions
       dp_invalid_parameter = 1
       dp_error_general     = 2
       cntl_error           = 3
       others               = 4 ).

* Show it
  call method g_html_control->show_url( url = lv_url
    in_place = 'X' ).

endmodule.                 " STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
module user_command_0100 input.

endmodule.                 " USER_COMMAND_0100  INPUT
