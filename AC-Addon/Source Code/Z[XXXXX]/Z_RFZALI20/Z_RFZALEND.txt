*----------------------------------------------------------------------*
*   INCLUDE RFZALEND                                                   *
*----------------------------------------------------------------------*

END-OF-SELECTION.

  PERFORM berechtigung.
* append last entries
  PERFORM check_for_entries USING    gt_output_main
                            CHANGING gx_entries.

  IF gx_entries EQ 'X'.
    SORT   gt_output_main-poken BY poken.
    APPEND gt_output_main.
    CLEAR  gt_output_main.
  ENDIF.

  DESCRIBE TABLE gt_output_main LINES sy-tabix.

  IF sy-tabix EQ 0.
    MESSAGE s073(f0) WITH syst-repid.
    STOP.
  ENDIF.

*---------------------- Pokentabelle aufbauen ------------------------
*---------------------- create item indicator table -------------------

  IF gx_showpoken EQ 'X'.

    CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
         EXPORTING
              i_program_name         = g_repid
              i_internal_tabname     = 'GT_POKENTAB'
              i_client_never_display = 'X'
              i_inclname             = g_inclname
         CHANGING
              ct_fieldcat            = gt_fieldcat_poken.

  ENDIF.

  gx_firstround = 'X'.

  IF p_edit IS INITIAL.                "list output modus
    gs_layout_main-list_append   = space.
    gs_layout_append-list_append = 'X'.
    PERFORM write_lists_for_company USING 1.

  ELSE.                                "list maintaining modus
    CLEAR: gs_layout_main-list_append,
           gs_layout_append-list_append.
    PERFORM write_lists_for_company USING 1.
    IF sy-batch IS INITIAL.
      IF NOT ( p_asum IS INITIAL AND p_csum IS INITIAL AND
               p_wsum IS INITIAL AND p_msum IS INITIAL AND
               p_bsum IS INITIAL ) .
*       only show popup, when at least one sumlist is required
        CALL FUNCTION 'POPUP_TO_CONFIRM'
             EXPORTING
                  text_question         = text-048
                  display_cancel_button = space
             IMPORTING
                  answer                = gc_answer.
      ELSE.
        CLEAR gc_answer.
      ENDIF.
    ELSE.
      gc_answer = '1'.
    ENDIF.
    IF gc_answer EQ '1'.
      PERFORM write_sum_lists.
    ENDIF.
    IF sy-batch IS INITIAL.
      IF NOT ( p_asum IS INITIAL AND p_csum IS INITIAL AND
               p_wsum IS INITIAL AND p_msum IS INITIAL AND
               p_bsum IS INITIAL ) .
*       only show popup, when at least one sumlist is required
        CALL FUNCTION 'POPUP_TO_CONFIRM'
             EXPORTING
                  text_question         = text-049
                  display_cancel_button = space
             IMPORTING
                  answer                = gc_answer.
      ELSE.
        CLEAR gc_answer.
      ENDIF.
    ELSE.
      gc_answer = '1'.
    ENDIF.
    IF gc_answer EQ '1'.
      PERFORM write_sum_lists2.
    ENDIF.
  ENDIF.
