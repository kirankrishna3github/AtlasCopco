REPORT  ZPSFC055.
************************************************************************
* This report corrects the order that has been created for AUFPL '0'   *
* It is only valid if the order has operations, reservations and       *
* sequences for this AUFPL                                             *
************************************************************************
tables: afvc,              "operations
        afvu,
        afvv,
        caufv,             "header
        affl,              "sequences
        affh,              "tools
        resb,              "reservations
        afko,
        jest,
        jsto,
        jcds,
        onr00,
        onrov,
        onros,
        onrof.

parameters:     testmode as checkbox default 'X'.
data : l_aufpl like afvc-aufpl,
       l_aufnr like afko-aufnr,
       l_rsnum like resb-rsnum,
       l_objnr_old like afvc-objnr.
data: subrc like sy-subrc.
data: l_caufv like caufv.
data: l_caufvd like caufvd.
data: l_afko like afko.
data: begin of lt_afvc occurs 0.
       include structure afvc.
data: end of lt_afvc.
data: begin of lt_afvv occurs 0.
       include structure afvv.
data: end of lt_afvv.
data: begin of lt_afvu occurs 0.
       include structure afvu.
data: end of lt_afvu.
data: begin of lt_affl occurs 0.
       include structure affl.
data: end of lt_affl.
data: begin of lt_affh occurs 0.
       include structure affh.
data: end of lt_affh.
data: begin of lt_resb occurs 0.
       include structure resb.
data: end of lt_resb.
data: begin of lt_objnr occurs 0,
        objnr like afvc-objnr.
data: end of lt_objnr.
data: begin of lt_jest occurs 0.
       include structure jest.
data: end of lt_jest.
data: begin of lt_jsto occurs 0.
       include structure jsto.
data: end of lt_jsto.
data: begin of lt_jcds occurs 0.
       include structure jcds.
data: end of lt_jcds.
data: begin of lt_onr00 occurs 0.
       include structure onr00.
data: end of lt_onr00.
data: begin of lt_onrov occurs 0.
       include structure onrov.
data: end of lt_onrov.
data: begin of lt_onros occurs 0.
       include structure onros.
data: end of lt_onros.
data: begin of lt_onrof occurs 0.
       include structure onrof.
data: end of lt_onrof.


select single aufpl into l_aufpl
              from afvc
              where aufpl eq '0000000000'.

if sy-subrc is initial.
  select single * into l_caufv
                from caufv
                where aufpl eq '0000000000'
                and autyp eq '10'.
  if sy-subrc is initial.
    write:/ 'Order', l_caufv-aufnr, ' has to be corrected'.
  else.
    write:/ 'No order found'.
    exit.
  endif.
* Read Header
  select single * into l_afko
               from afko
               where aufnr eq l_caufv-aufnr.
* Read operations
  select * into table lt_afvc
           from afvc
           where aufpl eq '0000000000'.
  select * into table lt_afvv
           from afvv
           where aufpl eq '0000000000'.
  select * into table lt_afvu
           from afvu
           where aufpl eq '0000000000'.
* Read sequences
  select * into table lt_affl
           from affl
           where aufpl eq '0000000000'.
* Read tools
  select * into table lt_affh
           from affh
           where aufpl eq '0000000000'.
* Read reservations
  select * into table lt_resb
           from resb
           where rsnum eq l_caufv-rsnum.
* Get Objnr from afvc
  loop at lt_afvc.
    if not lt_afvc-objnr is initial.
      lt_objnr-objnr = lt_afvc-objnr.
      append lt_objnr.
    endif.
  endloop.
* Get Objnr from affl
  loop at lt_affl.
    if not lt_affl-objnr is initial.
      lt_objnr-objnr = lt_affl-objnr.
      append lt_objnr.
    endif.
  endloop.
* Get Objnr from affh
  loop at lt_affh.
    if not lt_affh-objnr is initial.
      lt_objnr-objnr = lt_affh-objnr.
      append lt_objnr.
    endif.
  endloop.

  if lt_objnr[] is initial.
    write:/ 'Order could not be repaired.'.
    exit.
  endif.
* Read Status
  select * into table lt_jest
           from jest
           for all entries in lt_objnr
           where objnr eq lt_objnr-objnr.
  select * into table lt_jsto
           from jsto
           for all entries in lt_objnr
           where objnr eq lt_objnr-objnr.
  select * into table lt_jcds
           from jcds
           for all entries in lt_objnr
           where objnr eq lt_objnr-objnr.
  select * into table lt_onr00
           from onr00
           for all entries in lt_objnr
           where objnr eq lt_objnr-objnr.
  select * into table lt_onrov
           from onrov
           for all entries in lt_objnr
           where objnr eq lt_objnr-objnr.
  select * into table lt_onros
           from onros
           for all entries in lt_objnr
           where objnr eq lt_objnr-objnr.
  select * into table lt_onrof
           from onrof
           for all entries in lt_objnr
           where objnr eq lt_objnr-objnr.


  if lt_afvc[] is initial or
     lt_afvv[] is initial or
     lt_afvu[] is initial or
     lt_affl[] is initial or
     lt_onrov[] is initial or
     lt_onros[] is initial or
     lt_onr00[] is initial or
     l_caufv is initial.
     write:/ 'Order could not be repaired.'.
     exit.
   endif.
   move-corresponding l_caufv to l_caufvd.
    CALL FUNCTION 'CO_ZF_NUMBER_GET'
        EXPORTING
             CAUFVD_IMP = l_caufvd
             NKRANGE    = '01'
             OBJECT     = 'AUF_PLAN'
        IMPORTING
             CAUFVD_EXP = l_caufvd
             RETCODE    = SUBRC.
   move-corresponding l_caufvd to l_caufv.
   write:/ 'Order will be repaired with AUFPL', l_caufv-aufpl.
   if testmode is initial.
*    Correct header
     move l_caufv-aufpl to l_afko-aufpl.
*    Correct operations
     loop at lt_afvc.
       l_objnr_old = lt_afvc-objnr.
       lt_afvc-aufpl = l_caufv-aufpl.
       CALL FUNCTION 'OBJECT_NUMBER_GET_OV'
               EXPORTING
                    APLZL = lt_afvc-aplzl
                    AUFPL = lt_afvc-AUFPL
               IMPORTING
                    OBJNR = lt_afvc-objnr.
       modify lt_afvc.
       loop at lt_jest where objnr = l_objnr_old.
         lt_jest-objnr = lt_afvc-objnr.
         modify lt_jest.
       endloop.
       loop at lt_jsto where objnr = l_objnr_old.
         lt_jsto-objnr = lt_afvc-objnr.
         modify lt_jsto.
       endloop.
       loop at lt_jcds where objnr = l_objnr_old.
         lt_jcds-objnr = lt_afvc-objnr.
         modify lt_jcds.
       endloop.
       loop at lt_onr00 where objnr = l_objnr_old.
         lt_onr00-objnr = lt_afvc-objnr.
         modify lt_onr00.
       endloop.
       loop at lt_onrov where objnr = l_objnr_old.
         lt_onrov-objnr = lt_afvc-objnr.
         modify lt_onrov.
       endloop.
     endloop.
     loop at lt_afvu.
       lt_afvu-aufpl = l_caufv-aufpl.
       modify lt_afvu.
     endloop.
     loop at lt_afvv.
       lt_afvv-aufpl = l_caufv-aufpl.
       modify lt_afvv.
     endloop.
*    Correct sequences
     loop at lt_affl.
       l_objnr_old = lt_affl-objnr.
       lt_affl-aufpl = l_caufv-aufpl.
       CALL FUNCTION 'OBJECT_NUMBER_GET_OS'
               EXPORTING
                    APLZL = lt_affl-aplzl
                    AUFPL = lt_affl-AUFPL
               IMPORTING
                    OBJNR = lt_affl-objnr.
       modify lt_affl.
       loop at lt_jest where objnr = l_objnr_old.
         lt_jest-objnr = lt_affl-objnr.
         modify lt_jest.
       endloop.
       loop at lt_jsto where objnr = l_objnr_old.
         lt_jsto-objnr = lt_affl-objnr.
         modify lt_jsto.
       endloop.
       loop at lt_jcds where objnr = l_objnr_old.
         lt_jcds-objnr = lt_affl-objnr.
         modify lt_jcds.
       endloop.
       loop at lt_onr00 where objnr = l_objnr_old.
         lt_onr00-objnr = lt_affl-objnr.
         modify lt_onr00.
       endloop.
       loop at lt_onros where objnr = l_objnr_old.
         lt_onros-objnr = lt_affl-objnr.
         modify lt_onros.
       endloop.
     endloop.
*    Correct tools
     loop at lt_affh.
       l_objnr_old = lt_affh-objnr.
       lt_affh-aufpl = l_caufv-aufpl.
       CALL FUNCTION 'OBJECT_NUMBER_GET_OF'
               EXPORTING
                    PZLFH = lT_affh-PZLFH
                    AUFPL = lT_affh-AUFPL
               IMPORTING
                    OBJNR = lT_affh-objnr.
       modify lt_affh.
       loop at lt_jest where objnr = l_objnr_old.
         lt_jest-objnr = lt_affh-objnr.
         modify lt_jest.
       endloop.
       loop at lt_jsto where objnr = l_objnr_old.
         lt_jsto-objnr = lt_affh-objnr.
         modify lt_jsto.
       endloop.
       loop at lt_jcds where objnr = l_objnr_old.
         lt_jcds-objnr = lt_affh-objnr.
         modify lt_jcds.
       endloop.
       loop at lt_onr00 where objnr = l_objnr_old.
         lt_onr00-objnr = lt_affh-objnr.
         modify lt_onr00.
       endloop.
       loop at lt_onrof where objnr = l_objnr_old.
         lt_onrof-objnr = lt_affh-objnr.
         modify lt_onrof.
       endloop.
     endloop.
*    Correct reservations
     loop at lt_resb.
        lt_resb-aufpl = l_caufv-aufpl.
        modify lt_resb.
     endloop.
* Update database
     insert afvc from table lt_afvc.
     insert afvu from table lt_afvu.
     insert afvv from table lt_afvv.
     insert affl from table lt_affl.
     insert affh from table lt_affh.
     insert jest from table lt_jest.
     insert jsto from table lt_jsto.
     insert jcds from table lt_jcds.
     insert onr00 from table lt_onr00.
     insert onrov from table lt_onrov.
     insert onros from table lt_onros.
     insert onrof from table lt_onrof.
     update afko from l_afko.
     update resb from table lt_resb.
     commit work.
   ENDIF.
 endif.

*Selection text£º
*TESTMODE:        Testmode
