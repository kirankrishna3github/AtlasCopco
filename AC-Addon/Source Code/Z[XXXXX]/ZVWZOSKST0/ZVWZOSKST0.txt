*&---------------------------------------------------------------------*
*& Report  ZVWZOSKST0
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  ZVWZOSKST0.

* program checks if the Status for Resb are consistent
* ( for one or all active PM-Orders  )

PARAMETERS: ORDER LIKE CAUFVD-AUFNR.
PARAMETERS: TEST DEFAULT 'X'.
TABLES: VIAUFKST.
TABLES: JSTO.
TABLES: ONR00.
TABLES: ONROK.
TABLES: JEST.
TABLES: RESB.

DATA: BEGIN OF ORDER_TAB OCCURS 0,
  AUFNR LIKE CAUFV-AUFNR,
  RSNUM LIKE CAUFV-RSNUM,
END OF ORDER_TAB.

DATA: BEGIN OF RESB_TAB OCCURS 0.
  INCLUDE STRUCTURE RESB.
DATA: END OF RESB_TAB.

WRITE: / 'Begin of Program'.
IF TEST IS INITIAL.
  WRITE: / '  ** Delete-Mode ** ' .
ELSE.
  WRITE: / '  ** Test-Mode ** ' .
ENDIF.

ULINE.

PERFORM ORDER_READ.

PERFORM RESB_READ.

PERFORM RESB_STATUS.

ULINE.

WRITE: / '*** END OF PROGRAM ***'.

*&---------------------------------------------------------------------*
*&      Form  ORDER_READ
*&---------------------------------------------------------------------*
FORM ORDER_READ.

  IF NOT ORDER IS INITIAL.
    SELECT AUFNR RSNUM FROM VIAUFKST
              APPENDING CORRESPONDING FIELDS OF TABLE ORDER_TAB
              WHERE AUFNR = ORDER.
  ELSE.
    SELECT AUFNR RSNUM FROM VIAUFKST
              APPENDING CORRESPONDING FIELDS OF TABLE ORDER_TAB
              WHERE IPHAS < 3.
  ENDIF.


ENDFORM.                               " ORDER_READ
*&---------------------------------------------------------------------*
*&      Form  RESB_READ
*&---------------------------------------------------------------------*
FORM RESB_READ.

  LOOP AT ORDER_TAB.
    SELECT * FROM RESB WHERE RSNUM = ORDER_TAB-RSNUM.
      APPEND RESB TO RESB_TAB.
    ENDSELECT.
  ENDLOOP.

ENDFORM.                             " RESB_READ
*&---------------------------------------------------------------------*
*&      Form  RESB_STATUS
*&---------------------------------------------------------------------*
FORM RESB_STATUS.

 LOOP AT RESB_TAB.
*  JSTO
   SELECT SINGLE * FROM JSTO WHERE OBJNR = RESB_TAB-OBJNR.
   IF NOT SY-SUBRC IS INITIAL.
     WRITE: / 'Order: ' , RESB_TAB-AUFNR.
     WRITE: / 'missing JSTO-Entry: ', RESB_TAB-OBJNR.
     IF TEST IS INITIAL.
       CLEAR JSTO.
       JSTO-OBJNR = RESB_TAB-OBJNR.
       JSTO-OBTYP = 'OKP'.
       INSERT JSTO.
       WRITE: ' inserted ! '.
     ENDIF.
   ENDIF.
*  JEST
   SELECT * FROM JEST WHERE OBJNR = RESB_TAB-OBJNR.
   ENDSELECT.
   IF NOT SY-SUBRC IS INITIAL.
     WRITE: / 'Order: ' , RESB_TAB-AUFNR.
     WRITE: / 'missing JEST-Entry: ', RESB_TAB-OBJNR.
     IF TEST IS INITIAL.
       CLEAR JEST.
       JEST-OBJNR = RESB_TAB-OBJNR.
       JEST-STAT  = 'I0001'.
       INSERT JEST.
       WRITE: ' inserted ! '.
     ENDIF.
   ENDIF.
*  ONR00
   SELECT SINGLE * FROM ONR00 WHERE OBJNR = RESB_TAB-OBJNR.
   IF NOT SY-SUBRC IS INITIAL.
     WRITE: / 'Order: ' , RESB_TAB-AUFNR.
     WRITE: / 'missing ONR00-Entry: ', RESB_TAB-OBJNR.
     IF TEST IS INITIAL.
       CLEAR ONR00.
       ONR00-OBJNR = RESB_TAB-OBJNR.
       INSERT ONR00.
       WRITE: ' inserted ! '.
     ENDIF.
   ENDIF.
*  ONR00
   SELECT SINGLE * FROM ONROK WHERE OBJNR = RESB_TAB-OBJNR.
   IF NOT SY-SUBRC IS INITIAL.
     WRITE: / 'Order: ' , RESB_TAB-AUFNR.
     WRITE: / 'missing ONROK-Entry: ', RESB_TAB-OBJNR.
     IF TEST IS INITIAL.
       CLEAR ONROK.
       ONROK-OBJNR = RESB_TAB-OBJNR.
       ONROK-RSNUM = RESB_TAB-RSNUM.
       ONROK-RSPOS = RESB_TAB-RSPOS.
       INSERT ONROK.
       WRITE: ' inserted ! '.
     ENDIF.
   ENDIF.



 ENDLOOP.

ENDFORM.                    " RESB_STATUS

*Selection text£º
*ORDER:D       .
*TEST:        Test
