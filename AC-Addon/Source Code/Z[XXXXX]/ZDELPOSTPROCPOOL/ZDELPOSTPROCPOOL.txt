*&---------------------------------------------------------------------*
*& Report  ZDELPOSTPROCPOOL
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT zdelpostprocpool .

DATA: lt_ord_pre     TYPE TABLE OF ord_pre.
DATA: lt_f_costs     TYPE TABLE OF afrcb.  "incorrect cost calcualtion
DATA: ls_f_costs     TYPE afrcb.
DATA: lt_receipts    TYPE TABLE OF afrp1b. "unprocessed goods receipts
DATA: ls_receipts    TYPE afrp1b.
DATA: lt_issues      TYPE TABLE OF afrp2b. "unprocessed goods issues
DATA: ls_issues      TYPE afrp2b.
DATA: lt_act_costs   TYPE TABLE OF afrp3b. "unprocessed actual costs
DATA: ls_act_costs   TYPE afrp3b.
DATA: lt_hr_transfer TYPE TABLE OF afrp4b. "unprocessed HR data transfer
DATA: ls_hr_transfer TYPE afrp4b.
DATA: lt_f_goodsmove TYPE TABLE OF affwb.  "incorrect goods movements
DATA: ls_f_goodsmove TYPE affwb.

SELECT-OPTIONS: order FOR ls_f_costs-aufnr MATCHCODE OBJECT orde.

PARAMETER: test(1) TYPE c DEFAULT 'X'.
PARAMETER: sjoemel(1) TYPE c DEFAULT '3'. " = TECO
"MOD to allow clean-up of
* very old confirmations that never made it into the correct object

* select closed pm orders
SELECT aufnr FROM afih INTO CORRESPONDING FIELDS OF TABLE lt_ord_pre
*                       WHERE iphas = '6'
                       WHERE iphas = sjoemel(1)
                       AND   aufnr IN ORDER.
IF lt_ord_pre[] IS INITIAL.
  WRITE: 'No closed orders in selection range.'.
  EXIT.
ENDIF.

* check for unprocessed future records of selected orders
CALL FUNCTION 'CO_RU_PLANNED_DATA_PRE_READ'
  EXPORTING
    goods_receipts   = 'X'
    goods_issues     = 'X'
    failed_goodsmove = 'X'
    actual_costs     = 'X'
    failed_costs     = 'X'
    hr_data_transfer = 'X'
  TABLES
    ord_pre_tab      = lt_ord_pre
    f_costs_tab      = lt_f_costs
    p_receipts_tab   = lt_receipts
    p_issues_tab     = lt_issues
    p_costs_tab      = lt_act_costs
    p_hr_data_tab    = lt_hr_transfer
    f_goodsmove_tab  = lt_f_goodsmove
  EXCEPTIONS
    not_found        = 1.

IF sy-subrc <> 0.
  WRITE: 'No unprocessed future records of closed orders were found.'.
  EXIT.
ENDIF.


IF test IS INITIAL.
* delete found records from database
  IF NOT lt_receipts[] IS INITIAL.
    DELETE afrp1 FROM TABLE lt_receipts.
  ENDIF.

  IF NOT lt_issues[] IS INITIAL.
    DELETE afrp2 FROM TABLE lt_issues.
  ENDIF.

  IF NOT lt_f_goodsmove[] IS INITIAL.
    DELETE affw FROM TABLE lt_f_goodsmove.
  ENDIF.

  IF NOT lt_act_costs[] IS INITIAL.
    DELETE afrp3 FROM TABLE lt_act_costs.
  ENDIF.

  IF NOT lt_f_costs[] IS INITIAL.
    DELETE afrc FROM TABLE lt_f_costs.
  ENDIF.

  IF NOT lt_hr_transfer[] IS INITIAL.
    DELETE afrp4 FROM TABLE lt_hr_transfer.
  ENDIF.

ENDIF.

*create log
IF NOT lt_receipts[] IS INITIAL.
  SORT lt_receipts BY aufnr.
  DELETE ADJACENT DUPLICATES FROM lt_receipts COMPARING aufnr.
  WRITE:/'Following closed orders were found',
         'with unprocessed goods receipts:'.
  LOOP AT lt_receipts INTO ls_receipts.
    WRITE AT /5 ls_receipts-aufnr.
  ENDLOOP.
ENDIF.

IF NOT lt_issues[] IS INITIAL.
  SORT lt_issues BY aufnr.
  DELETE ADJACENT DUPLICATES FROM lt_issues COMPARING aufnr.
  WRITE:/'Following closed orders were found',
         'with unprocessed goods issues:'.
  LOOP AT lt_issues INTO ls_issues.
    WRITE AT /5 ls_issues-aufnr.
  ENDLOOP.
ENDIF.

IF NOT lt_f_goodsmove[] IS INITIAL.
  SORT lt_f_goodsmove BY aufnr.
  DELETE ADJACENT DUPLICATES FROM lt_f_goodsmove COMPARING aufnr.
  WRITE:/'Following closed orders were found',
         'with unprocessed incorrect goods movements:'.
  LOOP AT lt_f_goodsmove INTO ls_f_goodsmove.
    WRITE AT /5 ls_f_goodsmove-aufnr.
  ENDLOOP.
ENDIF.

IF NOT lt_act_costs[] IS INITIAL.
  SORT lt_act_costs BY aufnr.
  DELETE ADJACENT DUPLICATES FROM lt_act_costs COMPARING aufnr.
  WRITE:/'Following closed orders were found',
         'with unprocessed actual cost calculation:'.
  LOOP AT lt_act_costs INTO ls_act_costs.
    WRITE AT /5 ls_act_costs-aufnr.
  ENDLOOP.
ENDIF.

IF NOT lt_f_costs[] IS INITIAL.
  SORT lt_f_costs BY aufnr.
  DELETE ADJACENT DUPLICATES FROM lt_f_costs COMPARING aufnr.
  WRITE:/'Following closed orders were found',
         'with unprocessed incorrect cost calculation:'.
  LOOP AT lt_f_costs INTO ls_f_costs.
    WRITE AT /5 ls_f_costs-aufnr.
  ENDLOOP.
ENDIF.

IF NOT lt_hr_transfer[] IS INITIAL.
  SORT lt_hr_transfer BY aufnr.
  DELETE ADJACENT DUPLICATES FROM lt_hr_transfer COMPARING aufnr.
  WRITE:/'Following closed orders were found',
         'with unprocessed HR data transfer:'.
  LOOP AT lt_hr_transfer INTO ls_hr_transfer.
    WRITE AT /5 ls_hr_transfer-aufnr.
  ENDLOOP.
ENDIF.

IF test IS INITIAL.
  WRITE:/ 'Records were deleted.'.
ENDIF.
