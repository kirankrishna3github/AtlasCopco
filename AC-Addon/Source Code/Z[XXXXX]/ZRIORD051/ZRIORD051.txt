*&---------------------------------------------------------------------*
*& Report  ZRIORD051
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  ZRIORD051.
*DATA DEFINITION********************************************************
TABLES: caufv.
TABLES: afvc.

DATA: BEGIN OF afvc_tab OCCURS 20.
        INCLUDE STRUCTURE afvc.
DATA: END OF afvc_tab.

DATA: BEGIN OF a.
        INCLUDE STRUCTURE afvc.
DATA: END OF a.

DATA: stammfolge       LIKE afvc-aplfl VALUE '000000'.
DATA: auftragstyp_inst LIKE caufv-autyp VALUE '30'.
DATA: vornr0    LIKE afvc-vornr.
DATA: nvornr(4) TYPE n.
DATA: maxnumber LIKE afvc-vornr.
DATA: order     LIKE caufv-aufnr.
DATA: l_subrc   LIKE sy-subrc.

*SELECTION SCREEN*******************************************************

PARAMETERS: update TYPE c DEFAULT ' '.
SELECT-OPTIONS: orders FOR caufv-aufnr.

*MAIN PROGRAM***********************************************************

* read Header
SELECT * FROM caufv WHERE aufnr IN orders.
  order     = caufv-aufnr.
  vornr0    = '0000'.
  maxnumber = '0001'.
  l_subrc   = 0.
  IF caufv-autyp <> auftragstyp_inst.
    CONTINUE.
  ENDIF.

* Lock Order
  PERFORM lock_order CHANGING l_subrc.
  IF l_subrc <> 0.
    CONTINUE.
  ENDIF.

* read Operations
  CLEAR afvc_tab. REFRESH afvc_tab.
  SELECT * FROM afvc INTO TABLE afvc_tab
         WHERE aufpl = caufv-aufpl.

  PERFORM get_maxnumber.

  PERFORM check_number.

  PERFORM afvc_to_db.
ENDSELECT.
IF sy-subrc <> 0.
  WRITE: / 'No Orders found'.
ENDIF.
WRITE: /.
WRITE: / '---------- END OF PROGRAM * Press F3 to go back ------------'.

***********************************************************************+
*SUBROUTINES

*&----------------------------------------------------------------------
*&      Form  CHECK_NUMER
*&----------------------------------------------------------------------
FORM check_number.

  DATA: rc LIKE sy-subrc.
  DATA: hvornr LIKE afvc-vornr.
  DATA: h_folge LIKE afvc-aplfl.                            "!

  LOOP AT afvc_tab.
    IF afvc_tab-vornr CA space.
      hvornr = afvc_tab-vornr.
      OVERLAY afvc_tab-vornr WITH vornr0.
      MODIFY afvc_tab.
      WRITE: / 'Changed: Order:',order,
               'Operationnumber OLD:',hvornr,
               'Operationnumber NEW:',afvc_tab-vornr.
    ENDIF.
  ENDLOOP.

  LOOP AT afvc_tab.
    a = afvc_tab.
    PERFORM check_duprec TABLES afvc_tab
                         USING  a-vornr
                                a-sumnr
                                a-aplzl
                                rc.
*  RC = 0 ===> same Number
    IF rc = 0.
      hvornr = a-vornr.
*    letters in operationnumber ?
      IF a-vornr CN ' 0123456789'.
*      clear number
        CLEAR a-vornr.
      ENDIF.
*     set new number
      a-vornr = maxnumber = nvornr = maxnumber + 1.
      h_folge = a-aplfl.                                     "!
      a-aplfl = stammfolge.
      afvc_tab = a.
      MODIFY afvc_tab.
      WRITE: / 'Changed: Order:' , order,
               'Operationnumber OLD:' , hvornr , h_folge,    "!
               'Operationnumber NEW:' , afvc_tab-vornr.
    ENDIF.
  ENDLOOP.

ENDFORM.

*&----------------------------------------------------------------------
*&      Form  CHECK_DUPREC
*&----------------------------------------------------------------------
FORM check_duprec TABLES afvc_t STRUCTURE afvc
                         USING xvornr
                               xsumnr
                               xaplzl
                               xrc.

  LOOP AT afvc_t WHERE vornr = xvornr
                 AND   sumnr = xsumnr
                 AND   aplzl <> xaplzl.
  ENDLOOP.
  xrc =  sy-subrc.

ENDFORM.

*&---------------------------------------------------------------------
*&      Form  GET_MAXNUMBER
*&---------------------------------------------------------------------
FORM get_maxnumber.

  LOOP AT afvc_tab.
    IF afvc_tab-vornr CO '0123456789'.
      IF maxnumber  < afvc_tab-vornr.
        maxnumber = afvc_tab-vornr.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.

*&----------------------------------------------------------------------
*&      Form  LOCK_ORDER
*&----------------------------------------------------------------------
FORM lock_order CHANGING l_subrc LIKE sy-subrc.

  IF NOT update IS INITIAL.

    CALL FUNCTION 'CO_ZF_ORDER_LOCK'
         EXPORTING
              aufnr                = order
              autyp                = auftragstyp_inst
         EXCEPTIONS
              order_already_locked = 1
              system_failure       = 2
              OTHERS               = 3.

    IF sy-subrc = 1.
      WRITE: / 'Locked: Order:' , order.
    ELSEIF sy-subrc <> 0.
      WRITE: / 'Lock-Error: Order:' , order.
    ENDIF.
    l_subrc = sy-subrc.

  ENDIF.

ENDFORM.

*&----------------------------------------------------------------------
*&      Form  AFVC_TO_DB
*&----------------------------------------------------------------------
FORM afvc_to_db.

* Simulation ?
  IF NOT update IS INITIAL.
    UPDATE afvc FROM TABLE afvc_tab.
  ENDIF.

ENDFORM.


**************************** END ***************************************
*Selection text£º
*ORDERS:D       .
*UPDATE:        Update
