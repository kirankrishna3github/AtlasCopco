REPORT ZAL_ABAP message-id 26 line-size 255
no standard page heading.
* ZCP1_TQ80.
PARAMETER DOWNLOAD(1) DEFAULT 'S' lower case. "N-svr,Y-clnt
PARAMETER EXECMODE(1) DEFAULT 'B' lower case. "D-dlg,B-btch
PARAMETER OUT_DIR(48) DEFAULT "output file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER IN_DIR(48) DEFAULT "input file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER P_DEST TYPE RFCDES-RFCDEST DEFAULT
'NONE'.
PARAMETER P_PROGID TYPE RFCOPT-RFCEXEC DEFAULT
SPACE.
PARAMETER P_GWHOST TYPE RFCOPT-RFCGWHOST DEFAULT
SPACE.
PARAMETER P_GWSERV TYPE RFCOPT-RFCGWSERV DEFAULT
SPACE.
PARAMETER P_SRVFM(30) DEFAULT "Server Callback function
SPACE.
PARAMETER P_PKGSZ TYPE I DEFAULT "Stream package size
5000.
PARAMETER P_SNC_ON(1) DEFAULT "X-on SPACE-off
SPACE.

PARAMETER P_DF_VK(40) DEFAULT "ABAP data flow object key
'' lower case.
PARAMETER P_DI_GEN(40) DEFAULT "DI version that generated ABAP
'' lower case.

*** Machine generated ABAP. Do not modify.            ***
*** (C)Copyright Business Objects S.A.  All rights reserved. ***
*
* Date Time:
*    09/11/15 13:25:11
* SAP used for generated this ABAP:
*    Release: 701
*    Host   : 10.25.3.80
*
* ABAP Dataflow Name:
*    DF_R3_CTS_LZ_SAP_CP1_TQ80
* ABAP program name in SAP:
*  ZCP1_TQ80
* Generated ABAP file name:
*    //Airsbeap0512/d$/Data/SAPLogistics/VAL/ABAP/SEED_RFC/ZCP1_T
*Q80
TABLES TQ80.
TABLES TQ80_T.

DATA: begin of ITAB3 occurs 0,
MANDT(3) TYPE C,
QMART(2) TYPE C,
QMTYP(2) TYPE C,
RBNR(9) TYPE C,
HERKZ(2) TYPE C,
BEZZT(1) TYPE C,
QMNUK(2) TYPE C,
AUART(4) TYPE C,
HSCRTP(4) TYPE C,
OSCRTP(4) TYPE C,
PSCRTP(4) TYPE C,
PARGR(4) TYPE C,
STSMA(8) TYPE C,
SMSTSMA(8) TYPE C,
ARTPR(2) TYPE C,
SDAUART(4) TYPE C,
COAUART(4) TYPE C,
PARVW_KUND(2) TYPE C,
PARVW_AP(2) TYPE C,
PARVW_INT(2) TYPE C,
PARVW_LIEF(2) TYPE C,
PARVW_HER(2) TYPE C,
PARVW_VERA(2) TYPE C,
PARVW_AUTO(2) TYPE C,
PARVW_QMSM(2) TYPE C,
KLAKT(1) TYPE C,
INFO_WIND(10) TYPE C,
SERWI(10) TYPE C,
ESCAL(10) TYPE C,
FEKAT(1) TYPE C,
URKAT(1) TYPE C,
MAKAT(1) TYPE C,
MFKAT(1) TYPE C,
OTKAT(1) TYPE C,
SAKAT(1) TYPE C,
STAFO(6) TYPE C,
QMWAERS(5) TYPE C,
QMWERT(16) TYPE P DECIMALS 2,
FBS_CREATE(30) TYPE C,
FBS_DYNNR(4) TYPE C,
TDFORMAT(2) TYPE C,
KZEILE(1) TYPE C,
USERSCR1(4) TYPE C,
USERSCR2(4) TYPE C,
USERSCR3(4) TYPE C,
USERSCR4(4) TYPE C,
USERSCR5(4) TYPE C,
QMLTXT01(1) TYPE C,
QMLTXT02(1) TYPE C,
AUART2(4) TYPE C,
EARLY_NUM(1) TYPE C,
AUTOM_CONT(1) TYPE C,
MATKZ(1) TYPE C,
KUKZ(1) TYPE C,
MATKUKZ(1) TYPE C,
LIKZ(1) TYPE C,
MATLIKZ(1) TYPE C,
MOD(1) TYPE C,
ICON1(30) TYPE C,
ICON2(30) TYPE C,
VERS(1) TYPE C,
ZEITRAUM(4) TYPE N,
TDOBJECT(10) TYPE C,
TDNAME(70) TYPE C,
TDID(4) TYPE C,
CMCHECK_SM(1) TYPE C,
CMGRA(2) TYPE C,
PARVW_PAGE(2) TYPE C,
CUA_FBS(30) TYPE C,
ROLE_VERA(12) TYPE C,
PERMIT(1) TYPE C,
PARVW_GEH(2) TYPE C,
ROLE_GEH(12) TYPE C,
ROLE_QMSM(12) TYPE C,
ZZPRIOK(1) TYPE C,
QMARTX(20) TYPE C.
DATA: end of ITAB3.

data: append_flag(1) value ' ',
      cntbuf type i,
      delimleng type i,last_batch(1) value ' '.

CONSTANTS C_DF_VK(40) VALUE '869'.
CONSTANTS C_DI_GEN(40) VALUE '14.2.3.660'.
DATA WARN_MSG(50).


DATA: gv_directory     TYPE epsdirnam  VALUE '/var/load/xxx/UK/read/',
      gv_logsys        LIKE tbdlst-logsys.

start-of-selection.
* Logical system
  CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
    IMPORTING
      own_logical_system             = gv_logsys
    EXCEPTIONS
      own_logical_system_not_defined = 1
      OTHERS                         = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE 'E' NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    STOP.
  ENDIF.
  REPLACE 'xxx' IN out_dir WITH gv_logsys(3).
  REPLACE 'xxx' IN in_dir WITH gv_logsys(3).


  IF DOWNLOAD = 'S' OR
     DOWNLOAD = 'N' OR
     DOWNLOAD = 'Y'.
      .
  ELSE.
     DATA: m_xfer_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'data transfer method: ' DOWNLOAD
'. Regenerate the ABAP program and upload to this system.'
     INTO m_xfer_err_msg.
     MESSAGE  E240(S#) WITH m_xfer_err_msg.
  ENDIF.

  IF EXECMODE = 'B' OR
     EXECMODE = 'D'.
      .
  ELSE.
     DATA: m_exec_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'execution option: ' EXECMODE
'. Regenerate the ABAP program and upload to this system.'
     INTO m_exec_err_msg.
     MESSAGE  E240(S#) WITH m_exec_err_msg.
  ENDIF.

  IF DOWNLOAD = 'S'.
     PERFORM CONNECT_RFCDEST_TO_PROGID.
  ENDIF.



PERFORM FORM3.
last_batch = 'X'.
PERFORM FORM4.
FREE ITAB3.
  IF DOWNLOAD = 'S'.
     PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
  ENDIF.


end-of-selection.

CLEAR WARN_MSG.

IF NOT P_DF_VK IS INITIAL.
  IF P_DF_VK <> C_DF_VK.
     CONCATENATE '$$Warning$'
                 C_DF_VK
                 '$' INTO WARN_MSG.
  ENDIF.
ENDIF.
IF NOT P_DI_GEN IS INITIAL.
  IF P_DI_GEN <> C_DI_GEN.
     IF WARN_MSG IS INITIAL.
       CONCATENATE '$$Warning$$'
                   C_DI_GEN
                   INTO WARN_MSG.
     ELSE.
       CONCATENATE WARN_MSG
                   C_DI_GEN
                   INTO WARN_MSG.
     ENDIF.
  ENDIF.
ENDIF.

IF NOT WARN_MSG IS INITIAL.
  IF EXECMODE = 'D'.
    WRITE WARN_MSG.
    NEW-LINE.
  ELSE.
    MESSAGE S240(S#) with WARN_MSG.
  ENDIF.
ENDIF.


write  '* Program Complete *'.
write
 '(C)Copyright Business Objects S.A.  All rights reserved.'.

FORM FORM3.
DATA ALTMP1(3) TYPE C.
DATA ALTMP2(2) TYPE C.
DATA ALTMP3(2) TYPE C.
DATA ALTMP4(9) TYPE C.
DATA ALTMP5(2) TYPE C.
DATA ALTMP6(1) TYPE C.
DATA ALTMP7(2) TYPE C.
DATA ALTMP8(4) TYPE C.
DATA ALTMP9(4) TYPE C.
DATA ALTMP10(4) TYPE C.
DATA ALTMP11(4) TYPE C.
DATA ALTMP12(4) TYPE C.
DATA ALTMP13(8) TYPE C.
DATA ALTMP14(8) TYPE C.
DATA ALTMP15(2) TYPE C.
DATA ALTMP16(4) TYPE C.
DATA ALTMP17(4) TYPE C.
DATA ALTMP18(2) TYPE C.
DATA ALTMP19(2) TYPE C.
DATA ALTMP20(2) TYPE C.
DATA ALTMP21(2) TYPE C.
DATA ALTMP22(2) TYPE C.
DATA ALTMP23(2) TYPE C.
DATA ALTMP24(2) TYPE C.
DATA ALTMP25(2) TYPE C.
DATA ALTMP26(1) TYPE C.
DATA ALTMP27(10) TYPE C.
DATA ALTMP28(10) TYPE C.
DATA ALTMP29(10) TYPE C.
DATA ALTMP30(1) TYPE C.
DATA ALTMP31(1) TYPE C.
DATA ALTMP32(1) TYPE C.
DATA ALTMP33(1) TYPE C.
DATA ALTMP34(1) TYPE C.
DATA ALTMP35(1) TYPE C.
DATA ALTMP36(6) TYPE C.
DATA ALTMP37(5) TYPE C.
DATA ALTMP38(16) TYPE P DECIMALS 2.
DATA ALTMP39(30) TYPE C.
DATA ALTMP40(4) TYPE C.
DATA ALTMP41(2) TYPE C.
DATA ALTMP42(1) TYPE C.
DATA ALTMP43(4) TYPE C.
DATA ALTMP44(4) TYPE C.
DATA ALTMP45(4) TYPE C.
DATA ALTMP46(4) TYPE C.
DATA ALTMP47(4) TYPE C.
DATA ALTMP48(1) TYPE C.
DATA ALTMP49(1) TYPE C.
DATA ALTMP50(4) TYPE C.
DATA ALTMP51(1) TYPE C.
DATA ALTMP52(1) TYPE C.
DATA ALTMP53(1) TYPE C.
DATA ALTMP54(1) TYPE C.
DATA ALTMP55(1) TYPE C.
DATA ALTMP56(1) TYPE C.
DATA ALTMP57(1) TYPE C.
DATA ALTMP58(1) TYPE C.
DATA ALTMP59(30) TYPE C.
DATA ALTMP60(30) TYPE C.
DATA ALTMP61(1) TYPE C.
DATA ALTMP62(4) TYPE N.
DATA ALTMP63(10) TYPE C.
DATA ALTMP64(70) TYPE C.
DATA ALTMP65(4) TYPE C.
DATA ALTMP66(1) TYPE C.
DATA ALTMP67(2) TYPE C.
DATA ALTMP68(2) TYPE C.
DATA ALTMP69(30) TYPE C.
DATA ALTMP70(12) TYPE C.
DATA ALTMP71(1) TYPE C.
DATA ALTMP72(2) TYPE C.
DATA ALTMP73(12) TYPE C.
DATA ALTMP74(12) TYPE C.
DATA ALTMP75(1) TYPE C.
DATA ALTMP76(20) TYPE C.

DATA TQ809MANDT LIKE TQ80-MANDT.
DATA TQ809QMART LIKE TQ80-QMART.
DATA TQ809QMTYP LIKE TQ80-QMTYP.
DATA TQ809RBNR LIKE TQ80-RBNR.
DATA TQ809HERKZ LIKE TQ80-HERKZ.
DATA TQ809BEZZT LIKE TQ80-BEZZT.
DATA TQ809QMNUK LIKE TQ80-QMNUK.
DATA TQ809AUART LIKE TQ80-AUART.
DATA TQ809HSCRTP LIKE TQ80-HSCRTP.
DATA TQ809OSCRTP LIKE TQ80-OSCRTP.
DATA TQ809PSCRTP LIKE TQ80-PSCRTP.
DATA TQ809PARGR LIKE TQ80-PARGR.
DATA TQ809STSMA LIKE TQ80-STSMA.
DATA TQ809SMSTSMA LIKE TQ80-SMSTSMA.
DATA TQ809ARTPR LIKE TQ80-ARTPR.
DATA TQ809SDAUART LIKE TQ80-SDAUART.
DATA TQ809COAUART LIKE TQ80-COAUART.
DATA TQ809PARVW_KUND LIKE TQ80-PARVW_KUND.
DATA TQ809PARVW_AP LIKE TQ80-PARVW_AP.
DATA TQ809PARVW_INT LIKE TQ80-PARVW_INT.
DATA TQ809PARVW_LIEF LIKE TQ80-PARVW_LIEF.
DATA TQ809PARVW_HER LIKE TQ80-PARVW_HER.
DATA TQ809PARVW_VERA LIKE TQ80-PARVW_VERA.
DATA TQ809PARVW_AUTO LIKE TQ80-PARVW_AUTO.
DATA TQ809PARVW_QMSM LIKE TQ80-PARVW_QMSM.
DATA TQ809KLAKT LIKE TQ80-KLAKT.
DATA TQ809INFO_WIND LIKE TQ80-INFO_WIND.
DATA TQ809SERWI LIKE TQ80-SERWI.
DATA TQ809ESCAL LIKE TQ80-ESCAL.
DATA TQ809FEKAT LIKE TQ80-FEKAT.
DATA TQ809URKAT LIKE TQ80-URKAT.
DATA TQ809MAKAT LIKE TQ80-MAKAT.
DATA TQ809MFKAT LIKE TQ80-MFKAT.
DATA TQ809OTKAT LIKE TQ80-OTKAT.
DATA TQ809SAKAT LIKE TQ80-SAKAT.
DATA TQ809STAFO LIKE TQ80-STAFO.
DATA TQ809QMWAERS LIKE TQ80-QMWAERS.
DATA TQ809QMWERT LIKE TQ80-QMWERT.
DATA TQ809FBS_CREATE LIKE TQ80-FBS_CREATE.
DATA TQ809FBS_DYNNR LIKE TQ80-FBS_DYNNR.
DATA TQ809TDFORMAT LIKE TQ80-TDFORMAT.
DATA TQ809KZEILE LIKE TQ80-KZEILE.
DATA TQ809USERSCR1 LIKE TQ80-USERSCR1.
DATA TQ809USERSCR2 LIKE TQ80-USERSCR2.
DATA TQ809USERSCR3 LIKE TQ80-USERSCR3.
DATA TQ809USERSCR4 LIKE TQ80-USERSCR4.
DATA TQ809USERSCR5 LIKE TQ80-USERSCR5.
DATA TQ809QMLTXT01 LIKE TQ80-QMLTXT01.
DATA TQ809QMLTXT02 LIKE TQ80-QMLTXT02.
DATA TQ809AUART2 LIKE TQ80-AUART2.
DATA TQ809EARLY_NUM LIKE TQ80-EARLY_NUM.
DATA TQ809AUTOM_CONT LIKE TQ80-AUTOM_CONT.
DATA TQ809MATKZ LIKE TQ80-MATKZ.
DATA TQ809KUKZ LIKE TQ80-KUKZ.
DATA TQ809MATKUKZ LIKE TQ80-MATKUKZ.
DATA TQ809LIKZ LIKE TQ80-LIKZ.
DATA TQ809MATLIKZ LIKE TQ80-MATLIKZ.
DATA TQ809MOD LIKE TQ80-MOD.
DATA TQ809ICON1 LIKE TQ80-ICON1.
DATA TQ809ICON2 LIKE TQ80-ICON2.
DATA TQ809VERS LIKE TQ80-VERS.
DATA TQ809ZEITRAUM LIKE TQ80-ZEITRAUM.
DATA TQ809TDOBJECT LIKE TQ80-TDOBJECT.
DATA TQ809TDNAME LIKE TQ80-TDNAME.
DATA TQ809TDID LIKE TQ80-TDID.
DATA TQ809CMCHECK_SM LIKE TQ80-CMCHECK_SM.
DATA TQ809CMGRA LIKE TQ80-CMGRA.
DATA TQ809PARVW_PAGE LIKE TQ80-PARVW_PAGE.
DATA TQ809CUA_FBS LIKE TQ80-CUA_FBS.
DATA TQ809ROLE_VERA LIKE TQ80-ROLE_VERA.
DATA TQ809PERMIT LIKE TQ80-PERMIT.
DATA TQ809PARVW_GEH LIKE TQ80-PARVW_GEH.
DATA TQ809ROLE_GEH LIKE TQ80-ROLE_GEH.
DATA TQ809ROLE_QMSM LIKE TQ80-ROLE_QMSM.
DATA TQ809ZZPRIOK LIKE TQ80-ZZPRIOK.
DATA TQ80_T9QMARTX LIKE TQ80_T-QMARTX.
DATA TQ80_T9SPRAS LIKE TQ80_T-SPRAS.
DATA TQ80_T9QMART LIKE TQ80_T-QMART.



SELECT
  TQ809~MANDT
  TQ809~QMART
  TQ809~QMTYP
  TQ809~RBNR
  TQ809~HERKZ
  TQ809~BEZZT
  TQ809~QMNUK
  TQ809~AUART
  TQ809~HSCRTP
  TQ809~OSCRTP
  TQ809~PSCRTP
  TQ809~PARGR
  TQ809~STSMA
  TQ809~SMSTSMA
  TQ809~ARTPR
  TQ809~SDAUART
  TQ809~COAUART
  TQ809~PARVW_KUND
  TQ809~PARVW_AP
  TQ809~PARVW_INT
  TQ809~PARVW_LIEF
  TQ809~PARVW_HER
  TQ809~PARVW_VERA
  TQ809~PARVW_AUTO
  TQ809~PARVW_QMSM
  TQ809~KLAKT
  TQ809~INFO_WIND
  TQ809~SERWI
  TQ809~ESCAL
  TQ809~FEKAT
  TQ809~URKAT
  TQ809~MAKAT
  TQ809~MFKAT
  TQ809~OTKAT
  TQ809~SAKAT
  TQ809~STAFO
  TQ809~QMWAERS
  TQ809~QMWERT
  TQ809~FBS_CREATE
  TQ809~FBS_DYNNR
  TQ809~TDFORMAT
  TQ809~KZEILE
  TQ809~USERSCR1
  TQ809~USERSCR2
  TQ809~USERSCR3
  TQ809~USERSCR4
  TQ809~USERSCR5
  TQ809~QMLTXT01
  TQ809~QMLTXT02
  TQ809~AUART2
  TQ809~EARLY_NUM
  TQ809~AUTOM_CONT
  TQ809~MATKZ
  TQ809~KUKZ
  TQ809~MATKUKZ
  TQ809~LIKZ
  TQ809~MATLIKZ
  TQ809~MOD
  TQ809~ICON1
  TQ809~ICON2
  TQ809~VERS
  TQ809~ZEITRAUM
  TQ809~TDOBJECT
  TQ809~TDNAME
  TQ809~TDID
  TQ809~CMCHECK_SM
  TQ809~CMGRA
  TQ809~PARVW_PAGE
  TQ809~CUA_FBS
  TQ809~ROLE_VERA
  TQ809~PERMIT
  TQ809~PARVW_GEH
  TQ809~ROLE_GEH
  TQ809~ROLE_QMSM
  TQ809~ZZPRIOK
  TQ80_T9~QMARTX
  TQ80_T9~SPRAS
  TQ80_T9~QMART
into (TQ809MANDT,
  TQ809QMART,
  TQ809QMTYP,
  TQ809RBNR,
  TQ809HERKZ,
  TQ809BEZZT,
  TQ809QMNUK,
  TQ809AUART,
  TQ809HSCRTP,
  TQ809OSCRTP,
  TQ809PSCRTP,
  TQ809PARGR,
  TQ809STSMA,
  TQ809SMSTSMA,
  TQ809ARTPR,
  TQ809SDAUART,
  TQ809COAUART,
  TQ809PARVW_KUND,
  TQ809PARVW_AP,
  TQ809PARVW_INT,
  TQ809PARVW_LIEF,
  TQ809PARVW_HER,
  TQ809PARVW_VERA,
  TQ809PARVW_AUTO,
  TQ809PARVW_QMSM,
  TQ809KLAKT,
  TQ809INFO_WIND,
  TQ809SERWI,
  TQ809ESCAL,
  TQ809FEKAT,
  TQ809URKAT,
  TQ809MAKAT,
  TQ809MFKAT,
  TQ809OTKAT,
  TQ809SAKAT,
  TQ809STAFO,
  TQ809QMWAERS,
  TQ809QMWERT,
  TQ809FBS_CREATE,
  TQ809FBS_DYNNR,
  TQ809TDFORMAT,
  TQ809KZEILE,
  TQ809USERSCR1,
  TQ809USERSCR2,
  TQ809USERSCR3,
  TQ809USERSCR4,
  TQ809USERSCR5,
  TQ809QMLTXT01,
  TQ809QMLTXT02,
  TQ809AUART2,
  TQ809EARLY_NUM,
  TQ809AUTOM_CONT,
  TQ809MATKZ,
  TQ809KUKZ,
  TQ809MATKUKZ,
  TQ809LIKZ,
  TQ809MATLIKZ,
  TQ809MOD,
  TQ809ICON1,
  TQ809ICON2,
  TQ809VERS,
  TQ809ZEITRAUM,
  TQ809TDOBJECT,
  TQ809TDNAME,
  TQ809TDID,
  TQ809CMCHECK_SM,
  TQ809CMGRA,
  TQ809PARVW_PAGE,
  TQ809CUA_FBS,
  TQ809ROLE_VERA,
  TQ809PERMIT,
  TQ809PARVW_GEH,
  TQ809ROLE_GEH,
  TQ809ROLE_QMSM,
  TQ809ZZPRIOK,
  TQ80_T9QMARTX,
  TQ80_T9SPRAS,
  TQ80_T9QMART)
FROM TQ80_T AS TQ80_T9
 INNER JOIN TQ80 AS TQ809
 ON ( TQ809~QMART = TQ80_T9~QMART )
WHERE ( TQ80_T9~SPRAS = 'EN' ).
ALTMP1 = TQ809MANDT.
ALTMP2 = TQ809QMART.
ALTMP3 = TQ809QMTYP.
ALTMP4 = TQ809RBNR.
ALTMP5 = TQ809HERKZ.
ALTMP6 = TQ809BEZZT.
ALTMP7 = TQ809QMNUK.
ALTMP8 = TQ809AUART.
ALTMP9 = TQ809HSCRTP.
ALTMP10 = TQ809OSCRTP.
ALTMP11 = TQ809PSCRTP.
ALTMP12 = TQ809PARGR.
ALTMP13 = TQ809STSMA.
ALTMP14 = TQ809SMSTSMA.
ALTMP15 = TQ809ARTPR.
ALTMP16 = TQ809SDAUART.
ALTMP17 = TQ809COAUART.
ALTMP18 = TQ809PARVW_KUND.
ALTMP19 = TQ809PARVW_AP.
ALTMP20 = TQ809PARVW_INT.
ALTMP21 = TQ809PARVW_LIEF.
ALTMP22 = TQ809PARVW_HER.
ALTMP23 = TQ809PARVW_VERA.
ALTMP24 = TQ809PARVW_AUTO.
ALTMP25 = TQ809PARVW_QMSM.
ALTMP26 = TQ809KLAKT.
ALTMP27 = TQ809INFO_WIND.
ALTMP28 = TQ809SERWI.
ALTMP29 = TQ809ESCAL.
ALTMP30 = TQ809FEKAT.
ALTMP31 = TQ809URKAT.
ALTMP32 = TQ809MAKAT.
ALTMP33 = TQ809MFKAT.
ALTMP34 = TQ809OTKAT.
ALTMP35 = TQ809SAKAT.
ALTMP36 = TQ809STAFO.
ALTMP37 = TQ809QMWAERS.
ALTMP38 = TQ809QMWERT.
ALTMP39 = TQ809FBS_CREATE.
ALTMP40 = TQ809FBS_DYNNR.
ALTMP41 = TQ809TDFORMAT.
ALTMP42 = TQ809KZEILE.
ALTMP43 = TQ809USERSCR1.
ALTMP44 = TQ809USERSCR2.
ALTMP45 = TQ809USERSCR3.
ALTMP46 = TQ809USERSCR4.
ALTMP47 = TQ809USERSCR5.
ALTMP48 = TQ809QMLTXT01.
ALTMP49 = TQ809QMLTXT02.
ALTMP50 = TQ809AUART2.
ALTMP51 = TQ809EARLY_NUM.
ALTMP52 = TQ809AUTOM_CONT.
ALTMP53 = TQ809MATKZ.
ALTMP54 = TQ809KUKZ.
ALTMP55 = TQ809MATKUKZ.
ALTMP56 = TQ809LIKZ.
ALTMP57 = TQ809MATLIKZ.
ALTMP58 = TQ809MOD.
ALTMP59 = TQ809ICON1.
ALTMP60 = TQ809ICON2.
ALTMP61 = TQ809VERS.
ALTMP62 = TQ809ZEITRAUM.
ALTMP63 = TQ809TDOBJECT.
ALTMP64 = TQ809TDNAME.
ALTMP65 = TQ809TDID.
ALTMP66 = TQ809CMCHECK_SM.
ALTMP67 = TQ809CMGRA.
ALTMP68 = TQ809PARVW_PAGE.
ALTMP69 = TQ809CUA_FBS.
ALTMP70 = TQ809ROLE_VERA.
ALTMP71 = TQ809PERMIT.
ALTMP72 = TQ809PARVW_GEH.
ALTMP73 = TQ809ROLE_GEH.
ALTMP74 = TQ809ROLE_QMSM.
ALTMP75 = TQ809ZZPRIOK.
ALTMP76 = TQ80_T9QMARTX.
 move ALTMP1 to ITAB3-MANDT.
 move ALTMP2 to ITAB3-QMART.
 move ALTMP3 to ITAB3-QMTYP.
 move ALTMP4 to ITAB3-RBNR.
 move ALTMP5 to ITAB3-HERKZ.
 move ALTMP6 to ITAB3-BEZZT.
 move ALTMP7 to ITAB3-QMNUK.
 move ALTMP8 to ITAB3-AUART.
 move ALTMP9 to ITAB3-HSCRTP.
 move ALTMP10 to ITAB3-OSCRTP.
 move ALTMP11 to ITAB3-PSCRTP.
 move ALTMP12 to ITAB3-PARGR.
 move ALTMP13 to ITAB3-STSMA.
 move ALTMP14 to ITAB3-SMSTSMA.
 move ALTMP15 to ITAB3-ARTPR.
 move ALTMP16 to ITAB3-SDAUART.
 move ALTMP17 to ITAB3-COAUART.
 move ALTMP18 to ITAB3-PARVW_KUND.
 move ALTMP19 to ITAB3-PARVW_AP.
 move ALTMP20 to ITAB3-PARVW_INT.
 move ALTMP21 to ITAB3-PARVW_LIEF.
 move ALTMP22 to ITAB3-PARVW_HER.
 move ALTMP23 to ITAB3-PARVW_VERA.
 move ALTMP24 to ITAB3-PARVW_AUTO.
 move ALTMP25 to ITAB3-PARVW_QMSM.
 move ALTMP26 to ITAB3-KLAKT.
 move ALTMP27 to ITAB3-INFO_WIND.
 move ALTMP28 to ITAB3-SERWI.
 move ALTMP29 to ITAB3-ESCAL.
 move ALTMP30 to ITAB3-FEKAT.
 move ALTMP31 to ITAB3-URKAT.
 move ALTMP32 to ITAB3-MAKAT.
 move ALTMP33 to ITAB3-MFKAT.
 move ALTMP34 to ITAB3-OTKAT.
 move ALTMP35 to ITAB3-SAKAT.
 move ALTMP36 to ITAB3-STAFO.
 move ALTMP37 to ITAB3-QMWAERS.
 move ALTMP38 to ITAB3-QMWERT.
 move ALTMP39 to ITAB3-FBS_CREATE.
 move ALTMP40 to ITAB3-FBS_DYNNR.
 move ALTMP41 to ITAB3-TDFORMAT.
 move ALTMP42 to ITAB3-KZEILE.
 move ALTMP43 to ITAB3-USERSCR1.
 move ALTMP44 to ITAB3-USERSCR2.
 move ALTMP45 to ITAB3-USERSCR3.
 move ALTMP46 to ITAB3-USERSCR4.
 move ALTMP47 to ITAB3-USERSCR5.
 move ALTMP48 to ITAB3-QMLTXT01.
 move ALTMP49 to ITAB3-QMLTXT02.
 move ALTMP50 to ITAB3-AUART2.
 move ALTMP51 to ITAB3-EARLY_NUM.
 move ALTMP52 to ITAB3-AUTOM_CONT.
 move ALTMP53 to ITAB3-MATKZ.
 move ALTMP54 to ITAB3-KUKZ.
 move ALTMP55 to ITAB3-MATKUKZ.
 move ALTMP56 to ITAB3-LIKZ.
 move ALTMP57 to ITAB3-MATLIKZ.
 move ALTMP58 to ITAB3-MOD.
 move ALTMP59 to ITAB3-ICON1.
 move ALTMP60 to ITAB3-ICON2.
 move ALTMP61 to ITAB3-VERS.
 move ALTMP62 to ITAB3-ZEITRAUM.
 move ALTMP63 to ITAB3-TDOBJECT.
 move ALTMP64 to ITAB3-TDNAME.
 move ALTMP65 to ITAB3-TDID.
 move ALTMP66 to ITAB3-CMCHECK_SM.
 move ALTMP67 to ITAB3-CMGRA.
 move ALTMP68 to ITAB3-PARVW_PAGE.
 move ALTMP69 to ITAB3-CUA_FBS.
 move ALTMP70 to ITAB3-ROLE_VERA.
 move ALTMP71 to ITAB3-PERMIT.
 move ALTMP72 to ITAB3-PARVW_GEH.
 move ALTMP73 to ITAB3-ROLE_GEH.
 move ALTMP74 to ITAB3-ROLE_QMSM.
 move ALTMP75 to ITAB3-ZZPRIOK.
 move ALTMP76 to ITAB3-QMARTX.
 append ITAB3.
 cntbuf = cntbuf + 1.
 if download = 'N'.
  if cntbuf > 5000.
    perform FORM4.
    clear cntbuf.
    refresh ITAB3.
    append_flag = 'A'.
  endif.
 endif.
 if download = 'S'.
  if cntbuf > P_PKGSZ.
    perform FORM4.
    clear cntbuf.
    refresh ITAB3.
  endif.
 endif.
ENDSELECT.
ENDFORM.

FORM FORM4.
data: outfile(512), ldfile(50).
ldfile = 'CTS_LZ_SAP_CP1_TQ80'.
concatenate out_dir ldfile into outfile
  separated by '/'.
  IF DOWNLOAD = 'S'.
     DATA: error_message(700),mtext(800),iEOP(1).
     CALL FUNCTION P_SRVFM
          DESTINATION P_DEST
          KEEPING LOGICAL UNIT OF WORK
          EXPORTING
            EOS = last_batch
          IMPORTING
            EOP = iEOP
          TABLES
            E_TABLE = ITAB3
          EXCEPTIONS
            READ_ERROR = 1
            SYSTEM_FAILURE = 2
            MESSAGE error_message
            COMMUNICATION_FAILURE = 3
            MESSAGE error_message
            OTHERS = 4.

     IF sy-subrc ne 0.
        Case sy-subrc.
        when 1.
        CONCATENATE
        'Data Services read error. '
        'Check Data Services error log.'
        INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 2.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 3.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 4.
        MESSAGE  E240(S#) WITH
'Other SAP System Failure while calling DS remote function.'.
        endcase.
      ENDIF.
      IF iEOP = 'X'.
         PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
         LEAVE PROGRAM.
       ENDIF.
  ELSE.
data  dlmtlen type i value '1'.
data xdlmtlen type i value '1'.
data:
  ht(1) type c,
  xht(1) type x,
  conv type ref to cl_abap_conv_in_ce.
xht = '7F'.
conv = cl_abap_conv_in_ce=>create(
  encoding = '1100'
  input = xht
).
call method conv->read(
  exporting n    = xdlmtlen
  importing data = ht
            len = dlmtlen
).
data return_code type i.
 perform write_delimited_file
           tables   ITAB3
           using    outfile
                    append_flag
                    ht
                    dlmtlen
                    download
           changing return_code.

  case return_code.
    when 1.
      IF EXECMODE = 'D'.
        WRITE: /5 'No line selected'.
      ELSE.
        MESSAGE E047(S#).
      ENDIF.
    when 2.
      IF EXECMODE = 'D'.
        WRITE: /5 'Open File Error -- ', 25 OUTFILE.
      ELSE.
        MESSAGE  E084(E0) WITH OUTFILE.
      ENDIF.
    when 3.
      IF EXECMODE = 'D'.
        WRITE: /5 'Data exceed length limit (8192) '.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Data exceed length limit (8192) '.
      ENDIF.
    when 4.
      IF EXECMODE = 'D'.
        WRITE: /5 'Call function WS_DOWNLOAD error'.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Call function WS_DOWNLOAD error'.
      ENDIF.
  endcase.
 ENDIF.
ENDFORM.

FORM SUBSTRING USING SRC BEG LEN CHANGING RET.

DATA: VA1 TYPE I.
DATA: VA2 TYPE I.
DATA: VA3 TYPE I.

VA3 = STRLEN( SRC ).

IF  BEG = 0.   VA1 = 0.
ELSE.
  IF  BEG < 0.
    VA1 = VA3 + BEG.
    IF  VA1 < 0.   VA1 = 0.
    ENDIF.
  ELSE.          VA1 = BEG - 1.
  ENDIF.
ENDIF.

IF  LEN < 0.   VA2 = 0.
ELSE.          VA2 = VA3 - VA1.
ENDIF.

IF  VA2 > LEN. VA2 = LEN.
ENDIF.

IF  VA2 < 1.   MOVE ''           TO RET.
ELSE.          MOVE SRC+VA1(VA2) TO RET.
ENDIF.

ENDFORM.

form write_delimited_file
           tables   datatab
           using    file
                    append
                    delimit
                    dlength
                    dwnload
          changing rc.

  data: type1,
        appd(1),
        temp(32),
        time1(8),
        date1(10),
        output(8192),
        rcount type i,
        offset type i,
        tablen type i,
        maxlen type i value '8192'.

  data: begin of clientab occurs 0,
             output(8192),
          end of clientab.

  field-symbols: <f>.
  field-symbols <delim1>.
  data delim2(16).
  data l_filename type string.

  appd = append.
  if appd is not initial.
     appd = 'X'.
  endif.
  move file to l_filename.
  describe table datatab lines tablen.


  if dwnload = 'Y'.
     clear clientab. refresh clientab.
     rcount = 0.
  else.
     if appd = space.
   open dataset file for output in text mode ENCODING UTF-8.
     else.
    open dataset file for appending in text mode ENCODING UTF-8.

     endif.
     if sy-subrc <> 0.
         rc = 2. exit.
     endif.
  endif.

  loop at datatab.
    clear: tablen, offset, output.
    do.
      assign component sy-index of
         structure datatab to <f>.
      if sy-subrc <> 0. exit. endif.
      if sy-index > 1.
         assign delimit(dlength) TO <delim1> CASTING TYPE C.
         delim2 = <delim1>.
         write delim2(dlength) to output+offset(dlength).
         add dlength to offset.
      endif.

      describe field <f> type type1.

      if type1 = 'I' or type1 = 'N'.
          type1 = 'P'.
      endif.

      case type1.
        when 'D'.
          if <f> = '00000000'.
             <f> = ' '.
          else.
             move <f> to time1.
             assign time1 to <f>.
          endif.
        when 'F'.
          if <f> = '0.0'.
            temp = '0.0'.
          else.
             write <f> to temp exponent 0.
          endif.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
        when 'P'.
          if <f> < 0.
             write '-' to output+offset(1).
             add 1 to offset.
             <f> = <f> * ( -1 ).
          endif.
          move <f> to temp.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
      endcase.

      sy-fdpos = strlen( <f> ).

      tablen = offset + sy-fdpos.
      if tablen > maxlen.
         rc = 3. exit.
      endif.
      write <f> to output+offset(sy-fdpos).
      add sy-fdpos to offset.
    enddo.

    if dwnload = 'Y'.
       clientab-output = output.
       append clientab.
       rcount = rcount + 1.
       if rcount >= 50.
          SY-BATCH = SPACE.
          CALL FUNCTION 'GUI_DOWNLOAD'
            EXPORTING
              FILENAME = l_filename
              FILETYPE = 'ASC'
              CODEPAGE = '4110'
              APPEND   = appd
              WRITE_FIELD_SEPARATOR = 'X'
*            IMPORTING
*              FILELENGTH =
            TABLES
              DATA_TAB = clientab
            EXCEPTIONS
              OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
          clear clientab. refresh clientab.
          rcount = 0. appd = 'A'.
       endif.
    else.
       transfer output to file.
    endif.
  endloop.

  if dwnload = 'Y'.
       SY-BATCH = SPACE.
       CALL FUNCTION 'GUI_DOWNLOAD'
         EXPORTING
           FILENAME = l_filename
           FILETYPE = 'ASC'
              CODEPAGE = '4110'
           APPEND   = appd
           WRITE_FIELD_SEPARATOR = 'X'
*         IMPORTING
*           FILELENGTH =
         TABLES
           DATA_TAB = clientab
         EXCEPTIONS
           OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
  else.
       close dataset file.
  endif.
endform.

FORM CONNECT_RFCDEST_TO_PROGID.
 INCLUDE rfctypes.

 DATA: len     type i,
       R3NAME(4),
       SYSTNR(2),
       uid     LIKE SYS_UID,
       options LIKE RFCOPT,
       isunicode  TYPE n.

 DATA: NTOTAL     LIKE GWY_STRUCT-NOREG,
       GWY_GWHOST LIKE GWY_STRUCT-GWHOST,
       GWY_GWSERV LIKE GWY_STRUCT-GWSERV,
       GWY_TPNAME LIKE GWY_SYSTEM-TPNAME.

 TABLES: RFCSI.

* Check program ID
 IF P_PROGID = SPACE.							
    RAISE INVALID_PROGRAM_ID.
 ENDIF.

* determine if the RFC destination authority
  CALL FUNCTION 'RFC_READ_TCPIP_DESTINATION'
       EXPORTING destination = P_DEST
                 authority_check = 'X'
  IMPORTING rfcunicode = isunicode.

* Use current gateway if no info exits
 IF P_GWHOST = SPACE OR P_GWSERV = SPACE.
  CALL FUNCTION 'RFC_SYSTEM_INFO'
      IMPORTING
          RFCSI_EXPORT = RFCSI.

  len = strlen( rfcsi-rfcdest ) - 2.
  systnr = rfcsi-rfcdest+len.
  len = len - 1 - 3.
  r3name = rfcsi-rfcdest+len(3).
  len = len - 1.
  options-rfcgwhost = rfcsi-rfcdest(len).
  CONCATENATE 'sapgw' SYSTNR INTO options-rfcgwserv.
 ELSE.
   options-rfcgwhost = P_GWHOST.
   options-rfcgwserv = P_GWSERV.
 ENDIF.

* Parameters for GWY function call
  GWY_GWHOST = OPTIONS-RFCGWHOST.
  GWY_GWSERV = OPTIONS-RFCGWSERV.
  GWY_TPNAME = P_PROGID.

* Check gateway and server program registered
  CALL FUNCTION 'GWY_GET_NO_REG_PROGRAMS'
     EXPORTING
        GWHOST      = GWY_GWHOST
        GWSERV      = GWY_GWSERV
        TPNAME      = GWY_TPNAME
     IMPORTING
        NOREG_TOTAL = NTOTAL
     EXCEPTIONS
        OTHERS      = 1.

  IF sy-subrc NE 0.
     raise CONNECT_TO_GATEWAY_FAILED.
  ENDIF.

  IF NTOTAL = 0.
     raise SERVER_NOT_REGISTERED.
  ENDIF.

  IF NTOTAL GT 1.
     raise DUPLICATE_REG_PROGRAMS.
  ENDIF.

* build new connection to a registered server
  options-rfcexec   = gwy_tpname.
  options-rfcgwhost = gwy_gwhost.
  options-rfcgwserv = gwy_gwserv.
  options-rfchost   = '%%RFCSERVER%%'.
  IF P_SNC_ON = 'X'.
    options-rfcsnc  = 'X'.
  ENDIF.

  CALL 'RFCControl' ID 'CODE' FIELD 'O'
                    ID 'DESTINATION' FIELD P_DEST
                    ID 'TYPE' FIELD rfctype_external_tcp
                    ID 'OPTIONS' FIELD options.

  IF sy-subrc NE 0.
     RAISE CONNECT_TO_REG_SERVER_FAILED.
   ENDIF.

* and set exclusive mode to keep server owned
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
      EXPORTING  destination = P_DEST
                 exclusiv    = 'Y'
      EXCEPTIONS connect_to_reg_server_failed = 1
                 exclusiv_not_supported       = 2.

  IF SY-SUBRC NE 0.
     CASE SY-SUBRC.
          WHEN 1.
              RAISE CONNECT_TO_REG_SERVER_FAILED.
          WHEN 2.
              RAISE EXCLUSIV_NOT_SUPPORTED.
     ENDCASE.
  ENDIF.

ENDFORM.

FORM DISCONNECT_RFCDEST_FROM_PROGID.
* set exclusive mode to E to end the session
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
     EXPORTING
         destination = P_DEST
         exclusiv    = 'E'
     EXCEPTIONS
         connect_to_reg_server_failed = 1				
         exclusiv_not_supported       = 2.
ENDFORM.
