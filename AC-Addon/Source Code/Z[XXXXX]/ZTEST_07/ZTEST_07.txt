*----------------------------------------------------------------------*
* PROGRAM ID    : YSE_VISA_IDOc_ordersE_LIST                           *
* PROGRAM TITLE : List, Delete & Reprocess IDOCs of ACC INVOICE        *
* AUTHOR        : Anda Wu                                              *
* DATE          : 11/03/2013                                           *
* DEVELOPMENT ID:                                                      *
*                                                                      *
* CHANGE REQUEST NUMBER:                                               *
*                                                                      *
* Program Description: IDOC of ACC INVOICE Operation                   *
*                                                                      *
*----------------------------------------------------------------------*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
*  DATE    | NAME     |TRANSPORT  | CR# and short Description          *
*----------------------------------------------------------------------*
*11/03/2013|Anda Wu   |CD1K975233 |N/A: Initial version                *
*                      CD1K975244
*                      CD1K975277
*                      CD1K975279
*                      CD1K975284
*----------------------------------------------------------------------*
REPORT  YSE_ACC_IDOC_ORDERSE_LIST.
TYPE-POOLS: ICON.
************************************************************************
* TABLES                                                              *
************************************************************************
TABLES: LIKP,
        KNVP,
        EDIDS,
        EKKO.

************************************************************************
* TYPES                                                             *
************************************************************************
TYPES:  BEGIN OF TY_IDOC ,
          DOCNUM    TYPE EDI_DOCNUM,
        END OF TY_IDOC,
        BEGIN OF TY_OUT,
          DOCNUM    TYPE EDI_DOCNUM,
          EKORG     TYPE EKORG,
          LIFNR     TYPE LIFNR,
          IHREZ     TYPE KNVP-KNREF,
          BOLNR     TYPE BOLNR,
          DATUM     TYPE SY-DATUM,
          PO_BELNR  TYPE EBELN,
          CREDAT    TYPE EDI_CREDAT,
          CRETIM    TYPE EDI_CRETIM,
          TEXT      TYPE CHAR120,
          SELKZ     TYPE XFELD,
          ZZCOL     TYPE COL_CODE,
        END OF TY_OUT,
        BEGIN OF TY_LIKP,
          VBELN TYPE VBELN_VL,
          LFDAT TYPE LFDAT,
          BOLNR TYPE BOLNR,
        END OF TY_LIKP,
        BEGIN OF TY_VBUK,
          VBELN TYPE VBUK-VBELN,
          WBSTK TYPE VBUK-WBSTK,
        END OF TY_VBUK.

************************************************************************
* CLASSES DEFINITION                                                   *
************************************************************************
CLASS LCL_EVENT_HANDLER DEFINITION FINAL.
  PUBLIC SECTION.
    METHODS:
*   Double click control
    HANDLE_DOUBLE_CLICK
          FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID
          IMPORTING E_ROW. "e_column.
ENDCLASS.                    "lcl_event_handler DEFINITION

************************************************************************
* CLASS  IMPLEMENTATION                                                *
************************************************************************
*----------------------------------------------------------------------*
* CLASS lcl_event_handler IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS LCL_EVENT_HANDLER IMPLEMENTATION.
* Handle double click
  METHOD HANDLE_DOUBLE_CLICK.
    PERFORM HANDLE_DOUBLE_CLICK USING E_ROW.
  ENDMETHOD.                    "handle_double_click
ENDCLASS.                    "lcl_event_handler IMPLEMENTATION

************************************************************************
* WORKAREAS                                                            *
************************************************************************
DATA: GS_IDOC           TYPE TY_IDOC,
      GS_EDIDD          TYPE EDIDD,
      GS_EDIDC          TYPE EDIDC,
      GS_BDCDATA        TYPE BDCDATA,
      GS_E1EDK14        TYPE E1EDK14,
      GS_E1EDKA1        TYPE E1EDKA1,
      GS_LAYOUT         TYPE LVC_S_LAYO,
      GS_SELECTED_ROWS  TYPE LVC_S_ROID,
      GS_FCAT           TYPE LVC_S_FCAT,
      GS_STABLE         TYPE LVC_S_STBL,
      GS_OUT            TYPE TY_OUT.

DATA: GS_IDOC_TCODE    TYPE YSE_IDOC_TCODE.
DATA: GT_SCREEN        TYPE C.
************************************************************************
* INTERNAL TABLES                                                      *
************************************************************************
DATA: GT_IDOC           TYPE STANDARD TABLE OF TY_IDOC,
      GT_EDIDD          TYPE STANDARD TABLE OF EDIDD,
      GT_BDCDATA        TYPE STANDARD TABLE OF BDCDATA,
      GT_OUT            TYPE STANDARD TABLE OF TY_OUT,
      GT_SELECTED_ROWS  TYPE LVC_T_ROID,
      GT_FCAT           TYPE LVC_T_FCAT,
      GT_OUT2           TYPE STANDARD TABLE OF TY_OUT.

************************************************************************
* VARIABLES                                                            *
************************************************************************
DATA: GV_ERROR          TYPE XFELD,
      GV_COL(10)        TYPE N,
      GV_TEXT           TYPE CHAR80,
      GV_COUNTER        TYPE CHAR10,
      GV_TOTAL          TYPE CHAR10,
      GV_ANSWER         TYPE C,
      OK_CODE           TYPE SY-UCOMM,
      GV_CONTAINER      TYPE SCRFNAME VALUE 'CUSTOM_CONTROL'.

************************************************************************
* OBJECTS                                                              *
************************************************************************
DATA: GR_GRID             TYPE REF TO CL_GUI_ALV_GRID,
      GR_CUSTOM_CONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      GR_EVENT_HANDLER    TYPE REF TO LCL_EVENT_HANDLER.

************************************************************************
* CONSTANTS                                                            *
************************************************************************
CONSTANTS: C_ORDERS   TYPE EDI_MESTYP   VALUE 'ORDERS',
           C_ACC(3)   TYPE C            VALUE 'ACC',
           C_GDS      TYPE VBKD-BSARK   VALUE 'GDS',
           C_SIM      TYPE VBKD-BSARK   VALUE 'SIM',
           C_51       TYPE EDI_STATUS   VALUE '51',
           C_68       TYPE EDI_STATUS   VALUE '68',
           C_X        TYPE C            VALUE 'X',
           C_MODE_S   TYPE C            VALUE 'S',
           C_SAVE_A   TYPE C            VALUE 'A'.

************************************************************************
* SELECTION-SCREEN                                                     *
************************************************************************
***===================================================MOD BY LINS 140806¡ý
*SELECTION-SCREEN  BEGIN OF BLOCK sel  WITH FRAME  TITLE text-s01.
*PARAMETERS:     p_bsark  TYPE vbkd-bsark DEFAULT 'ACC' OBLIGATORY,
*                p_famcd  TYPE yse_sd_acc_fam-famback OBLIGATORY.
*SELECT-OPTIONS: so_datum FOR sy-datum DEFAULT sy-datum,
*                so_ihrez FOR knvp-knref,
*                so_bolnr FOR likp-bolnr.
*SELECTION-SCREEN  END OF BLOCK sel.

SELECTION-SCREEN  BEGIN OF BLOCK SEL  WITH FRAME  TITLE TEXT-S01.
PARAMETERS:     P_BSARK  TYPE VBKD-BSARK OBLIGATORY             ,
                P_FAMCD  TYPE YSE_SD_ACC_FAM-FAMBACK OBLIGATORY MODIF ID BL1.
SELECT-OPTIONS: SO_DATUM FOR SY-DATUM DEFAULT SY-DATUM          MODIF ID BL1,
                SO_IHREZ FOR KNVP-KNREF                         MODIF ID BL1,
                SO_BOLNR FOR LIKP-BOLNR                         MODIF ID BL1.
SELECT-OPTIONS: S_BELNR FOR LIKP-BOLNR     MODIF ID BL2.
SELECTION-SCREEN  END OF BLOCK SEL.

*SELECTION-SCREEN  BEGIN OF BLOCK BLK2 WITH FRAME  TITLE TEXT-S01. "°´Å¥ÆÁÄ»
*SELECTION-SCREEN SKIP 1.
*
*SELECTION-SCREEN BEGIN OF LINE.
* SELECTION-SCREEN COMMENT 4(17) TEXT-C01  MODIF ID BL2.
*SELECTION-SCREEN PUSHBUTTON 25(10) text-b01  USER-COMMAND A1  MODIF ID BL2.
*SELECTION-SCREEN end of line.
*
*SELECTION-SCREEN SKIP 2.
*SELECTION-SCREEN BEGIN OF LINE.
*SELECTION-SCREEN COMMENT 4(17) TEXT-C02  MODIF ID BL2.
*SELECTION-SCREEN PUSHBUTTON 25(10) text-b02 USER-COMMAND A2  MODIF ID BL2.
*SELECTION-SCREEN end of line.
*
*SELECTION-SCREEN  END OF BLOCK BLK2.


*SELECTION-SCREEN  BEGIN OF BLOCK BLK3 WITH FRAME  TITLE TEXT-S01. "°´Å¥ÆÁÄ»
*
*SELECTION-SCREEN  END OF BLOCK BLK3.
***===================================================MOD BY LINS 140806¡ü
*&---------------------------------------------------------------------*
*& INITIALIZATION                                                       *
*&---------------------------------------------------------------------*
INITIALIZATION.
* Initializ the globbal variables...
  PERFORM DO_INIT.

***===================================================ADD BY LINS 140806¡ý
  PERFORM SET_SCR.

*&---------------------------------------------------------------------*
*& AT SELECTION-SCREEN OUTPUT                                           *
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN OUTPUT.
  LOOP AT SCREEN.
    IF SCREEN-NAME = 'P_BSARK'.
      SCREEN-INPUT = '0'.
    ENDIF.

    CASE GT_SCREEN .
      WHEN 'A'.
        IF SCREEN-GROUP1 = 'BL2'.
          SCREEN-ACTIVE = '1'.
        ENDIF.
        IF SCREEN-GROUP1 = 'BL1' .
          SCREEN-ACTIVE = '0'.
        ENDIF.
      WHEN'S'.
        IF SCREEN-GROUP1 = 'BL1'.
          SCREEN-ACTIVE = '1'.
        ENDIF.
        IF SCREEN-GROUP1 = 'BL2' .
          SCREEN-ACTIVE = '0'.
        ENDIF.
      WHEN OTHERS.
        IF SCREEN-GROUP1 = 'BL1'.
          SCREEN-ACTIVE = '1'.
        ENDIF.
        IF SCREEN-GROUP1 = 'BL2' .
          SCREEN-ACTIVE = '0'.
        ENDIF.
    ENDCASE.


*  CASE GT_SCREEN.
*    WHEN 'A'.
*      IF SCREEN-GROUP1 = 'BL2'.
*        SCREEN-ACTIVE = '1'.
*      ENDIF.
*      IF SCREEN-GROUP1 = 'BL1' OR SCREEN-GROUP1 = 'BL3'.
*        SCREEN-ACTIVE = '0'.
*      ENDIF.
*    WHEN 'S'.
*      IF SCREEN-GROUP1 = 'BL3'.
*        SCREEN-ACTIVE = '1'.
*      ENDIF.
*      IF SCREEN-GROUP1 = 'BL1' OR SCREEN-GROUP1 = 'BL2'.
*        SCREEN-ACTIVE = '0'.
*      ENDIF.
*
*    WHEN OTHERS.
*      IF SCREEN-GROUP1 = 'BL1'.
*        SCREEN-ACTIVE = '1'.
*      ENDIF.
*      IF SCREEN-GROUP1 = 'BL2' OR SCREEN-GROUP1 = 'BL3'.
*        SCREEN-ACTIVE = '0'.
*      ENDIF.
*  ENDCASE.

*    IF GS_IDOC_TCODE-ZFLG = 'A' . "³õÊ¼½øÈë
*      IF SCREEN-GROUP1 = 'BL1' OR SCREEN-GROUP1 = 'BL3'.
*        SCREEN-ACTIVE = '0'.
*      ENDIF.
**      APPEND CNS_EXEC TO TD_EXCLUDE.
**      CALL FUNCTION 'RS_SET_SELSCREEN_STATUS'
**        EXPORTING
**          P_STATUS  = SY-PFKEY
**        TABLES
**          P_EXCLUDE = TD_EXCLUDE.
**      SET PF-STATUS 'BUT'.
*    ELSE.
*      IF SCREEN-GROUP1 = 'BL2' OR SCREEN-GROUP1 = 'BL3'.
*        SCREEN-ACTIVE = '0'.
*      ENDIF.
*    ENDIF.
**
*    IF GS_IDOC_TCODE-ZFLG = 'S'.
*      IF SCREEN-GROUP1 = 'BL1'.
*        SCREEN-ACTIVE = '1'.
*      ENDIF.
*      IF SCREEN-GROUP1 = 'BL2' OR SCREEN-GROUP1 = 'BL3'.
*        SCREEN-ACTIVE = '0'.
*      ENDIF.
*    ENDIF.
**
*    IF GS_IDOC_TCODE-ZFLG = 'G'.
*      IF SCREEN-GROUP1 = 'BL1' OR SCREEN-GROUP1 = 'BL2'.
*        SCREEN-ACTIVE = '0'.
*      ENDIF.
*      IF SCREEN-GROUP1 = 'BL3'.
*        SCREEN-ACTIVE = '1'.
*      ENDIF.
*    ENDIF.

    MODIFY SCREEN.
  ENDLOOP.
***===================================================ADD BY LINS 140806¡ü
*&---------------------------------------------------------------------*
*& AT SELECTION-SCREEN                                                 *
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN.
* AUTHORITY-CHECK
*  PERFORM  check_authorization.

***===================================================ADD BY LINS 140806¡ý
*  CASE SY-UCOMM.
*    WHEN 'A1'.
*     GS_IDOC_TCODE-Zscreen = 'Z'.
*    WHEN 'A2'.
*      GS_IDOC_TCODE-Zscreen = 'S'.
*  ENDCASE.
***===================================================ADD BY LINS 140806¡ü

*&---------------------------------------------------------------------*
*& AT SELECTION-SCREEN  ON VALUE-REQUEST                               *
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FAMCD.
* F4-help Function Implementation for FAM code
  PERFORM F4_FAMCODE.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_BSARK.
* F4-help Function Implementation for Purchase order type
  PERFORM F4_BSARK.

*&---------------------------------------------------------------------*
*&  MAIN PROGRAM                                                       *
*&---------------------------------------------------------------------*
START-OF-SELECTION.
* Statistics for transaction / program
  CALL METHOD YCL_STATISTICS=>RECORD_TRANSACTION.
  CALL SCREEN 0100.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.

  SET PF-STATUS 'YSE_ACC_IDOC'.
  SET TITLEBAR  'IDOCS_LIST'.
  PERFORM DISPLAY_REPORT.

ENDMODULE.                 " STATUS_0100  OUTPUT

*&---------------------------------------------------------------------*
*&      Form  SELECT_DATA
*&---------------------------------------------------------------------*
*       Select data
*----------------------------------------------------------------------*
FORM SELECT_DATA .

* Progress indicator
  GV_TEXT = 'Data is being selected'(I01).
  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      TEXT = GV_TEXT.

  REFRESH: GT_IDOC.
  REFRESH: GT_OUT.
* Select Idocs with status 51
  SELECT DOCNUM INTO TABLE GT_IDOC
         FROM EDIDC
         WHERE STATUS = C_51
*           AND mescod = c_acc
           AND MESTYP = C_ORDERS.

  GV_COUNTER = 0.
  DESCRIBE TABLE GT_IDOC LINES GV_TOTAL.

* Process segments
  LOOP AT GT_IDOC INTO GS_IDOC.
    ADD 1 TO GV_COUNTER.
    GV_TEXT = 'IDoc & (& of &) is being processed'(I02).
    REPLACE '&' WITH GS_IDOC-DOCNUM INTO GV_TEXT.
    REPLACE '&' WITH GV_COUNTER     INTO GV_TEXT.
    REPLACE '&' WITH GV_TOTAL       INTO GV_TEXT.
    CONDENSE GV_TEXT.
    CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
      EXPORTING
        TEXT = GV_TEXT.
    CLEAR: GV_ERROR,
           GT_EDIDD[].
*   Get IDoc data
    CALL FUNCTION 'IDOC_READ_COMPLETELY'
      EXPORTING
        DOCUMENT_NUMBER         = GS_IDOC-DOCNUM
      IMPORTING
        IDOC_CONTROL            = GS_EDIDC
      TABLES
        INT_EDIDD               = GT_EDIDD
      EXCEPTIONS
        DOCUMENT_NOT_EXIST      = 1
        DOCUMENT_NUMBER_INVALID = 2
        OTHERS                  = 3.
    IF SY-SUBRC = 0.
      PERFORM FILL_OUTPUT.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " SELECT_DATA

*&---------------------------------------------------------------------*
*&      Form  FILL_OUTPUT
*&---------------------------------------------------------------------*
*       Fill output table
*----------------------------------------------------------------------*
FORM FILL_OUTPUT .

  DATA: LT_EDIDS    TYPE STANDARD TABLE OF EDIDS,
        LS_EDIDS    TYPE EDIDS,
        LS_E1EDK02  TYPE E1EDK02.

  CLEAR GS_OUT.
  GS_OUT-DOCNUM = GS_IDOC-DOCNUM.
  LOOP AT GT_EDIDD INTO GS_EDIDD.
*   Check data
    CASE GS_EDIDD-SEGNAM.

      WHEN 'E1EDKA1'.                        "Partner data (header)
        MOVE GS_EDIDD-SDATA TO GS_E1EDKA1.
*       Check vendor
        IF GS_E1EDKA1-PARVW = 'AG'.          "Vendor code
          IF GS_E1EDKA1-IHREZ IN SO_IHREZ.
            GS_OUT-IHREZ = GS_E1EDKA1-IHREZ.
          ELSE.
            GV_ERROR = C_X.
            EXIT.
          ENDIF.
        ENDIF.

      WHEN 'E1EDK14'.                        "Organ. data (header)
        MOVE GS_EDIDD-SDATA TO GS_E1EDK14.
        IF GS_E1EDK14-QUALF = '008'.
          IF GS_E1EDK14-ORGID(3) = P_FAMCD OR P_FAMCD IS INITIAL.
            GS_OUT-EKORG = GS_E1EDK14-ORGID(3).
          ELSE.
            GV_ERROR = C_X.
            EXIT.
          ENDIF.
        ENDIF.
        IF GS_E1EDK14-QUALF = '019'.
          IF NOT (  GS_E1EDK14-ORGID(4) = P_BSARK
                    OR P_BSARK IS INITIAL ).
            GV_ERROR = C_X.
            EXIT.
          ENDIF.
        ENDIF.

      WHEN 'E1EDK02'.                        "Refer. data (header)
        MOVE GS_EDIDD-SDATA TO LS_E1EDK02.
        IF    LS_E1EDK02-BELNR IN SO_BOLNR
          AND LS_E1EDK02-DATUM IN SO_DATUM.
          GS_OUT-BOLNR = LS_E1EDK02-BELNR.
          GS_OUT-DATUM = LS_E1EDK02-DATUM.
        ELSE.
          GV_ERROR = C_X.
          EXIT.
        ENDIF.
***===================================================ADD BY LINS 140806¡ý
        IF    LS_E1EDK02-BELNR IN S_BELNR.
          GS_OUT-BOLNR = LS_E1EDK02-BELNR.
          GS_OUT-DATUM = LS_E1EDK02-DATUM.
        ELSE.
          GV_ERROR = C_X.
          EXIT.
        ENDIF.
***===================================================ADD BY LINS 140806¡ü
    ENDCASE.

    REFRESH: LT_EDIDS.
    SELECT *
    FROM   EDIDS
    INTO   TABLE LT_EDIDS
    WHERE  DOCNUM = GS_IDOC-DOCNUM
    AND    STATUS = C_51.
    IF SY-SUBRC EQ 0.
      SORT LT_EDIDS BY LOGDAT DESCENDING.
      READ TABLE LT_EDIDS INTO LS_EDIDS INDEX 1.
      IF NOT LS_EDIDS-STAMID IS INITIAL.
        MESSAGE ID LS_EDIDS-STAMID TYPE 'E' NUMBER LS_EDIDS-STAMNO
                INTO GS_OUT-TEXT
                WITH LS_EDIDS-STAPA1 LS_EDIDS-STAPA2 LS_EDIDS-STAPA3 LS_EDIDS-STAPA4.
        GS_OUT-CREDAT = GS_EDIDC-CREDAT.
        GS_OUT-CRETIM = GS_EDIDC-CRETIM.
      ENDIF.
    ENDIF.

  ENDLOOP.

  IF GV_ERROR IS INITIAL.
    APPEND GS_OUT TO GT_OUT.
  ENDIF.

ENDFORM.                    " FILL_OUTPUT

*&---------------------------------------------------------------------*
*&      Form  ALV_FCAT
*&---------------------------------------------------------------------*
*       ALV field catalog
*----------------------------------------------------------------------*
FORM ALV_FCAT .

  CLEAR GV_COL.
  REFRESH: GT_FCAT.
* Fullfill the fieldcat
  PERFORM ADD_FIELD USING:
    'DOCNUM' 16 'IDoc number'(T01)       C_X  C_X,
    'IHREZ'  30 'Web Order No.'(T03)  ' '  ' ',
    'BOLNR'  35 'Customer Document No.'(T04)  ' '  ' ',
    'DATUM'  10 'Post Date'(T11)  ' '  ' ',
    'TEXT'  120 'Error Message'(T13)        ' '  ' '.

ENDFORM.                    " ALV_FCAT

*&---------------------------------------------------------------------*
*&      Form  ADD_FIELD
*&---------------------------------------------------------------------*
*       Add field to field catalog
*----------------------------------------------------------------------*
FORM ADD_FIELD  USING    P_FIELD TYPE LVC_FNAME
                         P_LEN   TYPE LVC_OUTLEN
                         P_DESCR TYPE SCRTEXT_L
                         P_HOTSPOT TYPE C
                         P_KEY TYPE C.

  GV_COL = GV_COL + 1.

  CLEAR GS_FCAT.
  GS_FCAT-COL_POS    = GV_COL.
  GS_FCAT-FIELDNAME  = P_FIELD.
  GS_FCAT-OUTPUTLEN  = P_LEN.

  GS_FCAT-SELTEXT  = P_DESCR.
  GS_FCAT-SCRTEXT_L  = P_DESCR.
  GS_FCAT-SCRTEXT_M  = P_DESCR.
  GS_FCAT-SCRTEXT_S  = P_DESCR.
  GS_FCAT-FIX_COLUMN = C_X.
  GS_FCAT-EMPHASIZE  = C_X.
  GS_FCAT-HOTSPOT    = P_HOTSPOT.
  GS_FCAT-KEY        = P_KEY.

  IF GS_FCAT-FIELDNAME   = 'LIGHT'.
    GS_FCAT-ICON         = C_X.  " Display the field as ICON
    GS_FCAT-INTTYPE      = 'C'.
  ENDIF.

  APPEND GS_FCAT TO GT_FCAT.

ENDFORM.                    " ADD_FIELD

*&---------------------------------------------------------------------*
*&      Form  ALV_LAYOUT
*&---------------------------------------------------------------------*
*       Modify ALV layout
*----------------------------------------------------------------------*
FORM ALV_LAYOUT .

  GS_LAYOUT-ZEBRA       = C_X.
  GS_LAYOUT-NO_KEYFIX   = C_X.
  GS_LAYOUT-INFO_FNAME  = 'ZZCOL'.
  GS_LAYOUT-SEL_MODE    = 'A'.
  GS_LAYOUT-CWIDTH_OPT  = C_X.
  GS_LAYOUT-GRID_TITLE  = 'List and Reprocess IDoc status 51'(H02).


ENDFORM.                    " ALV_LAYOUT

*&---------------------------------------------------------------------*
*&      Form  DELETE_IDOCS
*&---------------------------------------------------------------------*
*       Delete Idocs
*----------------------------------------------------------------------*
FORM DELETE_IDOCS .

* Internal table with IDoc status
  DATA: LT_EDIDS      TYPE STANDARD TABLE OF EDIDS  ,
        LS_EDIDS      TYPE EDIDS.

* Internal table with IDoc status counter
  TYPES: BEGIN OF LTY_COUNT  ,
          DOCNUM      TYPE EDI_DOCNUM,
          COUNTR      TYPE EDI_COUNTR,
         END OF LTY_COUNT.

  DATA: LT_COUNT TYPE STANDARD TABLE OF LTY_COUNT,
        LS_COUNT TYPE LTY_COUNT.

  DATA: LT_DOCNUM_RANGE TYPE RANGE OF EDIDC-DOCNUM,
        LS_DOCNUM_RANGE LIKE LINE OF LT_DOCNUM_RANGE.

  CLEAR: LT_EDIDS[],
         LS_DOCNUM_RANGE.

  REFRESH: GT_SELECTED_ROWS.
  CLEAR:   GS_SELECTED_ROWS.

  CALL METHOD GR_GRID->GET_SELECTED_ROWS
    IMPORTING
      ET_ROW_NO = GT_SELECTED_ROWS.

  IF NOT GT_SELECTED_ROWS IS INITIAL.

* Confirm delete
    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        TITLEBAR              = TEXT-P01
        TEXT_QUESTION         = TEXT-P02
        ICON_BUTTON_1         = 'ICON_OKAY'
        ICON_BUTTON_2         = 'ICON_CANCEL'
        DEFAULT_BUTTON        = '2'
        DISPLAY_CANCEL_BUTTON = SPACE
      IMPORTING
        ANSWER                = GV_ANSWER
      EXCEPTIONS
        TEXT_NOT_FOUND        = 1
        OTHERS                = 2.
    IF SY-SUBRC <> 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
              WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

    CHECK GV_ANSWER = '1'.

    LS_DOCNUM_RANGE-SIGN   = 'I'.
    LS_DOCNUM_RANGE-OPTION = 'EQ'.

    CLEAR: GS_SELECTED_ROWS.
    LOOP AT GT_SELECTED_ROWS INTO GS_SELECTED_ROWS.
      LOOP AT GT_OUT2 INTO GS_OUT.
        IF SY-TABIX EQ GS_SELECTED_ROWS-ROW_ID.
          SELECT * APPENDING TABLE LT_EDIDS
                   FROM EDIDS
                   WHERE DOCNUM = GS_OUT-DOCNUM
                     AND STATUS = C_51.
*   Control record
          LS_DOCNUM_RANGE-LOW = GS_OUT-DOCNUM.
          APPEND LS_DOCNUM_RANGE TO LT_DOCNUM_RANGE.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

* IDocs selected ?
    CHECK NOT LT_DOCNUM_RANGE IS INITIAL.

* Get status counters for IDocs
    SELECT DOCNUM COUNTR INTO TABLE LT_COUNT
           FROM EDIDS
           WHERE DOCNUM IN LT_DOCNUM_RANGE.

* Keep the latest status counter
    SORT LT_COUNT BY DOCNUM ASCENDING
                     COUNTR DESCENDING.

    DELETE ADJACENT DUPLICATES FROM LT_COUNT
           COMPARING DOCNUM.

* Get latest error (status 51 to be reprocessed)
    SORT LT_EDIDS BY DOCNUM ASCENDING
                    LOGDAT DESCENDING LOGTIM DESCENDING.

    DELETE ADJACENT DUPLICATES FROM LT_EDIDS
           COMPARING DOCNUM.

* Set counter
    LOOP AT LT_EDIDS INTO LS_EDIDS.
      READ TABLE LT_COUNT
        INTO LS_COUNT
        WITH KEY DOCNUM = LS_EDIDS-DOCNUM
                            BINARY SEARCH.
      LS_EDIDS-COUNTR = LS_COUNT-COUNTR + 1.
      MODIFY LT_EDIDS FROM LS_EDIDS.
    ENDLOOP.

* Insert status records
    INSERT EDIDS FROM TABLE LT_EDIDS.
    COMMIT WORK AND WAIT.

* Update control records
    UPDATE EDIDC
           SET STATUS = C_68
           WHERE DOCNUM IN LT_DOCNUM_RANGE.
    COMMIT WORK AND WAIT.

  ENDIF.
ENDFORM.                    " DELETE_IDOCS

*---------------------------------------------------------------------*
*&      Form  DELETE_IDOCS
*&---------------------------------------------------------------------*
*       Reprocess Idocs
*----------------------------------------------------------------------*
FORM REPROCESS_IDOCS .

* Internal table with IDoc status
  DATA: LT_EDIDS      TYPE STANDARD TABLE OF EDIDS ,
        LS_EDIDS      TYPE EDIDS.

* Internal table with IDoc status counter
  TYPES:BEGIN OF LTY_COUNT,
          DOCNUM      TYPE EDI_DOCNUM,
          COUNTR      TYPE EDI_COUNTR,
        END OF LTY_COUNT.
  DATA: LT_COUNT TYPE STANDARD TABLE OF LTY_COUNT,
        LS_COUNT TYPE LTY_COUNT.

  DATA: LT_SEL_TAB  TYPE STANDARD TABLE OF RSPARAMS,
        LS_SEL_TAB  TYPE  RSPARAMS.
  DATA: LT_DOCNUM_RANGE TYPE RANGE OF EDIDC-DOCNUM,
        LS_DOCNUM_RANGE LIKE LINE OF LT_DOCNUM_RANGE.

  CLEAR: LT_EDIDS[],
         LT_DOCNUM_RANGE[].
  REFRESH: GT_SELECTED_ROWS.
  CLEAR:   GS_SELECTED_ROWS.

  CALL METHOD GR_GRID->GET_SELECTED_ROWS
    IMPORTING
      ET_ROW_NO = GT_SELECTED_ROWS.

  IF NOT GT_SELECTED_ROWS IS INITIAL.


    LS_DOCNUM_RANGE-SIGN   = 'I'.
    LS_DOCNUM_RANGE-OPTION = 'EQ'.

    CLEAR: GS_SELECTED_ROWS.
    LOOP AT GT_SELECTED_ROWS INTO GS_SELECTED_ROWS.
      LOOP AT GT_OUT2 INTO GS_OUT.
        IF SY-TABIX EQ GS_SELECTED_ROWS-ROW_ID.
          SELECT * APPENDING TABLE LT_EDIDS
                   FROM EDIDS
                   WHERE DOCNUM = GS_OUT-DOCNUM
                     AND STATUS = C_51.
*   Control record
          LS_DOCNUM_RANGE-LOW = GS_OUT-DOCNUM.
          APPEND LS_DOCNUM_RANGE TO LT_DOCNUM_RANGE.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

* IDocs selected ?
    CHECK NOT LT_DOCNUM_RANGE IS INITIAL.

* Get status counters for IDocs
    SELECT DOCNUM COUNTR INTO TABLE LT_COUNT
           FROM EDIDS
           WHERE DOCNUM IN LT_DOCNUM_RANGE.

* Keep the latest status counter
    SORT LT_COUNT BY DOCNUM ASCENDING
                     COUNTR DESCENDING.

    DELETE ADJACENT DUPLICATES FROM LT_COUNT
           COMPARING DOCNUM.

* Get latest error (status 51 to be reprocessed)
    SORT LT_EDIDS BY DOCNUM ASCENDING
                    LOGDAT DESCENDING LOGTIM DESCENDING.

    DELETE ADJACENT DUPLICATES FROM LT_EDIDS
           COMPARING DOCNUM.

* Set counter
    LOOP AT LT_EDIDS INTO LS_EDIDS.
      READ TABLE LT_COUNT
        INTO LS_COUNT
        WITH KEY DOCNUM = LS_EDIDS-DOCNUM
          BINARY SEARCH.
      LS_EDIDS-COUNTR = LS_COUNT-COUNTR + 1.
      MODIFY LT_EDIDS FROM LS_EDIDS.
    ENDLOOP.

* Insert status records
    INSERT EDIDS FROM TABLE LT_EDIDS.
    COMMIT WORK AND WAIT.

* Selection table for IDoc reprocessing
    CLEAR LT_SEL_TAB.
    REFRESH LT_SEL_TAB.
    LS_SEL_TAB-SELNAME = 'SO_MESTY'.
    LS_SEL_TAB-KIND    = 'S'.
    LS_SEL_TAB-SIGN    = 'I'.
    LS_SEL_TAB-OPTION  = 'EQ'.
    LS_SEL_TAB-LOW     = C_ORDERS.
    APPEND LS_SEL_TAB TO LT_SEL_TAB.
    LS_SEL_TAB-SELNAME = 'SO_DOCNU'.
    LS_SEL_TAB-KIND    = ''.
    LS_SEL_TAB-SIGN    = 'I'.
    LS_SEL_TAB-OPTION  = 'EQ'.
    LOOP AT LT_DOCNUM_RANGE INTO LS_DOCNUM_RANGE.
      LS_SEL_TAB-LOW     = LS_DOCNUM_RANGE-LOW.
      APPEND LS_SEL_TAB TO LT_SEL_TAB.
    ENDLOOP.

* Reprocess IDocs
    SUBMIT RBDMANIN WITH SELECTION-TABLE LT_SEL_TAB
                    AND RETURN.
  ENDIF.
ENDFORM.                    " REPROCESS_IDOCS

*&---------------------------------------------------------------------*
*&      Form  REFRESH_REPORT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM REFRESH_REPORT .

  PERFORM DISPLAY_REPORT.

ENDFORM.                    " REFRESH_REPORT


*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100 INPUT.

  CASE OK_CODE.
    WHEN 'BACK'.
      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN 'DEL'.
*     Delete IDocs
      PERFORM DELETE_IDOCS.
    WHEN 'REP'.
*     Reprocess IDocs
      PERFORM REPROCESS_IDOCS.
    WHEN 'REF'.
*     Refresh Report
      PERFORM REFRESH_REPORT.
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_0100  INPUT

*&---------------------------------------------------------------------*
*&      Form  DISPLAY_REPORT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM DISPLAY_REPORT .

  PERFORM SELECT_DATA.

  REFRESH: GT_OUT2.
  APPEND LINES OF GT_OUT[] TO GT_OUT2.

  IF GR_CUSTOM_CONTAINER IS INITIAL.

    CREATE OBJECT GR_CUSTOM_CONTAINER
      EXPORTING
        CONTAINER_NAME              = GV_CONTAINER
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.

    CREATE OBJECT GR_GRID
      EXPORTING
        I_PARENT = GR_CUSTOM_CONTAINER.

    PERFORM ALV_LAYOUT.
    PERFORM ALV_FCAT.

    CREATE OBJECT GR_EVENT_HANDLER.

*Display the table Contents in ALV format
    CALL METHOD GR_GRID->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT       = GS_LAYOUT
        I_DEFAULT       = C_X
        I_SAVE          = C_SAVE_A
      CHANGING
        IT_OUTTAB       = GT_OUT2
        IT_FIELDCATALOG = GT_FCAT.
*   Enable line selection and double clicking
    SET HANDLER GR_EVENT_HANDLER->HANDLE_DOUBLE_CLICK FOR GR_GRID.
  ELSE.
    CALL METHOD GR_GRID->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE      = GS_STABLE
        I_SOFT_REFRESH = C_X.
  ENDIF.
ENDFORM.                    " DISPLAY_REPORT

***********************************************************************
* Form HANDLE_DOUBLE_CLICK                                             *
************************************************************************
*      -->P_E_ROW_ID     text                                          *
*      -->P_E_COLUMN_ID  text                                          *
************************************************************************
* When a field in the ALV grid has been double clicked, load the       *
* detail overview for that period and rental depot.                    *
************************************************************************
FORM HANDLE_DOUBLE_CLICK  USING  P_E_ROW_ID TYPE LVC_S_ROW.

  DATA: GV_MODE    TYPE C             VALUE 'E'.

  CLEAR GT_OUT.
  READ TABLE GT_OUT2 INTO GS_OUT INDEX P_E_ROW_ID.

* If Contract Number clicked
*  SET PARAMETER ID 'DCN' FIELD gt_out-docnum.
  PERFORM PREPARE_SHOW_IDOC.
  CALL TRANSACTION 'WE02' USING GT_BDCDATA
           MODE GV_MODE UPDATE C_MODE_S.

ENDFORM.            " handle_double_click

************************************************************************
* Show IDOC                                                            *
************************************************************************

FORM PREPARE_SHOW_IDOC.

  DATA: LV_DATE TYPE D,
        LV_SYSDATE TYPE SY-DATUM.

  REFRESH: GT_BDCDATA.
* Screen 1
  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
           USING    'RSEIDOC2'  '1000'  C_X  ''   ''
           CHANGING GS_BDCDATA.
  APPEND GS_BDCDATA  TO GT_BDCDATA.
  CLEAR  GS_BDCDATA.

  CLEAR LV_DATE.
  LV_SYSDATE = GS_OUT-CREDAT - 1.
  WRITE LV_SYSDATE TO LV_DATE.
  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
       USING    ''  ''  ''  'CREDAT-LOW' LV_DATE
          CHANGING GS_BDCDATA.
  APPEND GS_BDCDATA  TO GT_BDCDATA.
  CLEAR  GS_BDCDATA.

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
       USING    ''  ''  ''  'DOCNUM-LOW'  GS_OUT-DOCNUM
          CHANGING GS_BDCDATA.
  APPEND GS_BDCDATA  TO GT_BDCDATA.
  CLEAR  GS_BDCDATA.



  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
           USING    ''  ''  ''  'BDC_OKCODE'  '=ONLI'
           CHANGING GS_BDCDATA.
  APPEND GS_BDCDATA  TO GT_BDCDATA.
  CLEAR  GS_BDCDATA.

* Screen 2

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
         USING    'IDOC_TREE_CONTROL'  '0100'  C_X  ''   ''
         CHANGING GS_BDCDATA.
  APPEND GS_BDCDATA  TO GT_BDCDATA.
  CLEAR  GS_BDCDATA.


ENDFORM.                    "prepare_show_idoc
*&---------------------------------------------------------------------*
*&      Form  DO_INIT
*&---------------------------------------------------------------------*
*       Do initilization
*----------------------------------------------------------------------*
FORM DO_INIT .

* Initital the global workareas
  CLEAR:  GS_IDOC           ,
          GS_EDIDD          ,
          GS_EDIDC          ,
          GS_BDCDATA        ,
          GS_E1EDK14        ,
          GS_E1EDKA1        ,
          GS_LAYOUT         ,
          GS_SELECTED_ROWS  ,
          GS_FCAT           ,
          GS_STABLE         ,
          GS_OUT            .

* Initital the global internal tables
  REFRESH:GT_IDOC           ,
          GT_EDIDD          ,
          GT_BDCDATA        ,
          GT_OUT            ,
          GT_SELECTED_ROWS  ,
          GT_FCAT           ,
          GT_OUT2           .

* Initital the global variables
  CLEAR:  GV_ERROR          ,
          GV_COL(10)        ,
          GV_TEXT           ,
          GV_COUNTER        ,
          GV_TOTAL          ,
          GV_ANSWER         ,
          OK_CODE           .

ENDFORM.                    " DO_INIT
*&---------------------------------------------------------------------*
*&      Form  F4_FAMCODE
*&---------------------------------------------------------------------*
*       F4-help Function Implementation for FAM code
*----------------------------------------------------------------------*
FORM F4_FAMCODE .
  TYPES:  BEGIN OF LTY_FAM,
            FAMCUST TYPE YSE_SD_ACC_FAM-FAMCUST,
            FAMBACK TYPE YSE_SD_ACC_FAM-FAMBACK,
          END OF LTY_FAM.
  DATA: LT_FAM TYPE TABLE OF LTY_FAM.
  DATA: LT_RETURN TYPE TABLE OF DDSHRETVAL,
        LS_RETURN TYPE DDSHRETVAL.

  SELECT FAMCUST            "FAM Code Customer
         FAMBACK            "Back-end FAM Customer
    FROM YSE_SD_ACC_FAM
    INTO TABLE LT_FAM.                                "#EC CI_SGLSELECT
  DELETE ADJACENT DUPLICATES FROM LT_FAM.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'FAMBACK'
      DYNPPROG        = SY-REPID
      DYNPROFIELD     = 'P_FAMCD'
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = LT_FAM
      RETURN_TAB      = LT_RETURN
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.
  IF SY-SUBRC = 0.
    READ TABLE LT_RETURN INTO LS_RETURN INDEX 1.
    P_FAMCD = LS_RETURN-FIELDVAL.
  ENDIF.
ENDFORM.                    " F4_FAMCODE
*&---------------------------------------------------------------------*
*&      Form  F4_BSARK
*&---------------------------------------------------------------------*
*       F4-help Function Implementation for Purchase order type
*----------------------------------------------------------------------*
FORM F4_BSARK .
  TYPES: BEGIN OF LTY_T176T,
            BSARK TYPE T176T-BSARK,
            VTEXT TYPE T176T-VTEXT,
         END OF LTY_T176T.
  DATA: LT_T176T TYPE TABLE OF LTY_T176T.
  DATA: LT_RETURN TYPE TABLE OF DDSHRETVAL,
        LS_RETURN TYPE DDSHRETVAL.
  SELECT  BSARK
          VTEXT
    FROM T176T
    INTO TABLE LT_T176T
    WHERE   SPRAS = SY-LANGU
      AND  (    BSARK = C_ACC
            OR  BSARK = C_GDS
            OR  BSARK = C_SIM ) .

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'BSARK'
      DYNPPROG        = SY-REPID
      DYNPROFIELD     = 'P_BSARK'
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = LT_T176T
      RETURN_TAB      = LT_RETURN
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.
  IF SY-SUBRC = 0.
    READ TABLE LT_RETURN INTO LS_RETURN INDEX 1.
    P_BSARK = LS_RETURN-FIELDVAL.
  ENDIF.
ENDFORM.                    " F4_BSARK
*&---------------------------------------------------------------------*
*&      Form  SET_SCR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SET_SCR .


  SELECT SINGLE *
    FROM YSE_IDOC_TCODE
    INTO GS_IDOC_TCODE
   WHERE ZTOCDE = SY-TCODE.

  IF SY-SUBRC = 0.
    P_BSARK = GS_IDOC_TCODE-ZBSARK.
  ENDIF.

  IMPORT GT_SCREEN = GT_SCREEN FROM MEMORY ID 'YSE_IDOC_LIST'.

ENDFORM.                    " SET_SCR

*Text symbol text£º
*B01:BUTTON1
*B02:BUTTON2
*C01:TEXTTEST1
*C02:TEXTTEST2
*H02:List and Reprocess IDoc status 51
*I01:Data is being selected
*I02:IDoc & (& of &) is being processed
*P01:Delete IDocs ?
*P02:You are about to Delete  the selected IDocs. Are you sure to continue ?
*S01:Selection
*T01:IDoc number
*T03:Web Order No.
*T04:Customer Document No.
*T11:Post Date

*T13:Error Message
*Selection text£º
*P_BSARK:        Purchase Order Type
*P_FAMCD:        FAM Code
*SO_BOLNR:        Customer Document Number
*SO_DATUM:        Post Date
*SO_IHREZ:        Web Order Number
