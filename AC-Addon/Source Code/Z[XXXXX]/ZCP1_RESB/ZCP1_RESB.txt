REPORT ZAL_ABAP message-id 26 line-size 255
no standard page heading.
* ZCP1_RESB.
PARAMETER DOWNLOAD(1) DEFAULT 'S' lower case. "N-svr,Y-clnt
PARAMETER EXECMODE(1) DEFAULT 'B' lower case. "D-dlg,B-btch
PARAMETER OUT_DIR(48) DEFAULT "output file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER IN_DIR(48) DEFAULT "input file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER P_DEST TYPE RFCDES-RFCDEST DEFAULT
'NONE'.
PARAMETER P_PROGID TYPE RFCOPT-RFCEXEC DEFAULT
SPACE.
PARAMETER P_GWHOST TYPE RFCOPT-RFCGWHOST DEFAULT
SPACE.
PARAMETER P_GWSERV TYPE RFCOPT-RFCGWSERV DEFAULT
SPACE.
PARAMETER P_SRVFM(30) DEFAULT "Server Callback function
SPACE.
PARAMETER P_PKGSZ TYPE I DEFAULT "Stream package size
5000.
PARAMETER P_SNC_ON(1) DEFAULT "X-on SPACE-off
SPACE.

PARAMETER $PARAM1 TYPE D.

PARAMETER $PARAM2 TYPE D.

PARAMETER P_DF_VK(40) DEFAULT "ABAP data flow object key
'' lower case.
PARAMETER P_DI_GEN(40) DEFAULT "DI version that generated ABAP
'' lower case.

*** Machine generated ABAP. Do not modify.            ***
*** (C)Copyright Business Objects S.A.  All rights reserved. ***
*
* Date Time:
*    12/24/15 07:22:59
* SAP used for generated this ABAP:
*    Release: 701
*    Host   : 10.25.3.82
*
* ABAP Dataflow Name:
*    DF_R3_CTS_LZ_SAP_CP1_RESB_D
* ABAP Dataflow comments:
*  SAP Source : RESB / AUFK / PMSDO
*  Delta load
* ABAP program name in SAP:
*  ZCP1_RESB
* Generated ABAP file name:
*    //AIRSBEAP0512/D$/Data/SAPLogistics/VAL/ABAP/ZCP1_RESB
TABLES PMSDO.
TABLES AUFK.
TABLES RESB.
TABLES ZSTC_SALES_COMP.

DATA: begin of ITAB5 occurs 0,
AUFNR(12) TYPE C,
BDMNG(16) TYPE P DECIMALS 3,
BDTER TYPE D,
BEMOT(2) TYPE C,
BWART(3) TYPE C,
LGORT(4) TYPE C,
LIFNR(10) TYPE C,
MANDT(3) TYPE C,
MATNR(18) TYPE C,
MEINS(3) TYPE C,
OBJNR(22) TYPE C,
RSART(1) TYPE C,
RSNUM(10) TYPE N,
RSPOS(4) TYPE N,
SHKZG(1) TYPE C,
SOBKZ(1) TYPE C,
VKORG(4) TYPE C,
WAERS(5) TYPE C,
WERKS(4) TYPE C,
Z_BUKRS(4) TYPE C,
Z_VKORG(4) TYPE C,
Z_WERKS(4) TYPE C,
Z_EKORG(4) TYPE C,
Z_MAMUSERCMPY(4) TYPE C,
Z_REGION(40) TYPE C,
Z_COUNTRY(40) TYPE C,
Z_COUNTRYDSCR(255) TYPE C,
Z_SALESCOMPANY(40) TYPE C,
Z_SALESCMPDSCR(255) TYPE C.
DATA: end of ITAB5.

data: append_flag(1) value ' ',
      cntbuf type i,
      delimleng type i,last_batch(1) value ' '.

CONSTANTS C_DF_VK(40) VALUE '1679'.
CONSTANTS C_DI_GEN(40) VALUE '14.2.3.660'.
DATA WARN_MSG(50).


DATA: gv_directory     TYPE epsdirnam  VALUE '/var/load/xxx/UK/read/',
      gv_logsys        LIKE tbdlst-logsys.

start-of-selection.
* Logical system
  CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
    IMPORTING
      own_logical_system             = gv_logsys
    EXCEPTIONS
      own_logical_system_not_defined = 1
      OTHERS                         = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE 'E' NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    STOP.
  ENDIF.
  REPLACE 'xxx' IN out_dir WITH gv_logsys(3).
  REPLACE 'xxx' IN in_dir WITH gv_logsys(3).


  IF DOWNLOAD = 'S' OR
     DOWNLOAD = 'N' OR
     DOWNLOAD = 'Y'.
      .
  ELSE.
     DATA: m_xfer_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'data transfer method: ' DOWNLOAD
'. Regenerate the ABAP program and upload to this system.'
     INTO m_xfer_err_msg.
     MESSAGE  E240(S#) WITH m_xfer_err_msg.
  ENDIF.

  IF EXECMODE = 'B' OR
     EXECMODE = 'D'.
      .
  ELSE.
     DATA: m_exec_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'execution option: ' EXECMODE
'. Regenerate the ABAP program and upload to this system.'
     INTO m_exec_err_msg.
     MESSAGE  E240(S#) WITH m_exec_err_msg.
  ENDIF.

  IF DOWNLOAD = 'S'.
     PERFORM CONNECT_RFCDEST_TO_PROGID.
  ENDIF.



PERFORM FORM5.
last_batch = 'X'.
PERFORM FORM6.
FREE ITAB5.
  IF DOWNLOAD = 'S'.
     PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
  ENDIF.


end-of-selection.

CLEAR WARN_MSG.

IF NOT P_DF_VK IS INITIAL.
  IF P_DF_VK <> C_DF_VK.
     CONCATENATE '$$Warning$'
                 C_DF_VK
                 '$' INTO WARN_MSG.
  ENDIF.
ENDIF.
IF NOT P_DI_GEN IS INITIAL.
  IF P_DI_GEN <> C_DI_GEN.
     IF WARN_MSG IS INITIAL.
       CONCATENATE '$$Warning$$'
                   C_DI_GEN
                   INTO WARN_MSG.
     ELSE.
       CONCATENATE WARN_MSG
                   C_DI_GEN
                   INTO WARN_MSG.
     ENDIF.
  ENDIF.
ENDIF.

IF NOT WARN_MSG IS INITIAL.
  IF EXECMODE = 'D'.
    WRITE WARN_MSG.
    NEW-LINE.
  ELSE.
    MESSAGE S240(S#) with WARN_MSG.
  ENDIF.
ENDIF.


write  '* Program Complete *'.
write  '(C)Copyright Business Objects S.A.  All rights reserved.'.

FORM FORM5.
DATA ALTMP226(16) TYPE P DECIMALS 3.
DATA ALTMP227(12) TYPE C.
DATA ALTMP228(16) TYPE P DECIMALS 3.
DATA ALTMP229 TYPE D.
DATA ALTMP230(2) TYPE C.
DATA ALTMP231(3) TYPE C.
DATA ALTMP232(4) TYPE C.
DATA ALTMP233(10) TYPE C.
DATA ALTMP234(3) TYPE C.
DATA ALTMP235(18) TYPE C.
DATA ALTMP236(3) TYPE C.
DATA ALTMP237(22) TYPE C.
DATA ALTMP238(1) TYPE C.
DATA ALTMP239(10) TYPE N.
DATA ALTMP240(4) TYPE N.
DATA ALTMP241(1) TYPE C.
DATA ALTMP242(1) TYPE C.
DATA ALTMP243(4) TYPE C.
DATA ALTMP244(5) TYPE C.
DATA ALTMP245(4) TYPE C.
DATA ALTMP246(4) TYPE C.
DATA ALTMP247(4) TYPE C.
DATA ALTMP248(4) TYPE C.
DATA ALTMP249(4) TYPE C.
DATA ALTMP250(4) TYPE C.
DATA ALTMP251(40) TYPE C.
DATA ALTMP252(40) TYPE C.
DATA ALTMP253(255) TYPE C.
DATA ALTMP254(40) TYPE C.
DATA ALTMP255(255) TYPE C.

DATA AUFK9AUFNR LIKE AUFK-AUFNR.
DATA RESB9BDMNG LIKE RESB-BDMNG.
DATA RESB9BDTER LIKE RESB-BDTER.
DATA AUFK9BEMOT LIKE AUFK-BEMOT.
DATA RESB9BWART LIKE RESB-BWART.
DATA RESB9LGORT LIKE RESB-LGORT.
DATA RESB9LIFNR LIKE RESB-LIFNR.
DATA RESB9MANDT LIKE RESB-MANDT.
DATA RESB9MATNR LIKE RESB-MATNR.
DATA RESB9MEINS LIKE RESB-MEINS.
DATA PMSDO9OBJNR LIKE PMSDO-OBJNR.
DATA RESB9RSART LIKE RESB-RSART.
DATA RESB9RSNUM LIKE RESB-RSNUM.
DATA RESB9RSPOS LIKE RESB-RSPOS.
DATA RESB9SHKZG LIKE RESB-SHKZG.
DATA RESB9SOBKZ LIKE RESB-SOBKZ.
DATA PMSDO9VKORG LIKE PMSDO-VKORG.
DATA AUFK9WAERS LIKE AUFK-WAERS.
DATA RESB9WERKS LIKE RESB-WERKS.
DATA ZSTC_SALE_019BUKRS LIKE ZSTC_SALES_COMP-BUKRS.
DATA ZSTC_SALE_019VKORG LIKE ZSTC_SALES_COMP-VKORG.
DATA ZSTC_SALE_019WERKS LIKE ZSTC_SALES_COMP-WERKS.
DATA ZSTC_SALE_019EKORG LIKE ZSTC_SALES_COMP-EKORG.
DATA ZSTC_SALE_019MAMUSERCMPY LIKE ZSTC_SALES_COMP-MAMUSERCMPY.
DATA ZSTC_SALE_019REGION LIKE ZSTC_SALES_COMP-REGION.
DATA ZSTC_SALE_019COUNTRY LIKE ZSTC_SALES_COMP-COUNTRY.
DATA ZSTC_SALE_019COUNTRYDSCR LIKE ZSTC_SALES_COMP-COUNTRYDSCR.
DATA ZSTC_SALE_019SALESCOMPANY LIKE ZSTC_SALES_COMP-SALESCOMPANY.
DATA ZSTC_SALE_019SALESCMPDSCR LIKE ZSTC_SALES_COMP-SALESCMPDSCR.
DATA AUFK9IDAT3 LIKE AUFK-IDAT3.
DATA RESB9AUFNR LIKE RESB-AUFNR.
DATA AUFK9OBJNR LIKE AUFK-OBJNR.



SELECT
  AUFK9~AUFNR
  RESB9~BDMNG
  RESB9~BDTER
  AUFK9~BEMOT
  RESB9~BWART
  RESB9~LGORT
  RESB9~LIFNR
  RESB9~MANDT
  RESB9~MATNR
  RESB9~MEINS
  PMSDO9~OBJNR
  RESB9~RSART
  RESB9~RSNUM
  RESB9~RSPOS
  RESB9~SHKZG
  RESB9~SOBKZ
  PMSDO9~VKORG
  AUFK9~WAERS
  RESB9~WERKS
  ZSTC_SALE_019~BUKRS
  ZSTC_SALE_019~VKORG
  ZSTC_SALE_019~WERKS
  ZSTC_SALE_019~EKORG
  ZSTC_SALE_019~MAMUSERCMPY
  ZSTC_SALE_019~REGION
  ZSTC_SALE_019~COUNTRY
  ZSTC_SALE_019~COUNTRYDSCR
  ZSTC_SALE_019~SALESCOMPANY
  ZSTC_SALE_019~SALESCMPDSCR
  AUFK9~IDAT3
  RESB9~AUFNR
  AUFK9~OBJNR
into (AUFK9AUFNR,
  RESB9BDMNG,
  RESB9BDTER,
  AUFK9BEMOT,
  RESB9BWART,
  RESB9LGORT,
  RESB9LIFNR,
  RESB9MANDT,
  RESB9MATNR,
  RESB9MEINS,
  PMSDO9OBJNR,
  RESB9RSART,
  RESB9RSNUM,
  RESB9RSPOS,
  RESB9SHKZG,
  RESB9SOBKZ,
  PMSDO9VKORG,
  AUFK9WAERS,
  RESB9WERKS,
  ZSTC_SALE_019BUKRS,
  ZSTC_SALE_019VKORG,
  ZSTC_SALE_019WERKS,
  ZSTC_SALE_019EKORG,
  ZSTC_SALE_019MAMUSERCMPY,
  ZSTC_SALE_019REGION,
  ZSTC_SALE_019COUNTRY,
  ZSTC_SALE_019COUNTRYDSCR,
  ZSTC_SALE_019SALESCOMPANY,
  ZSTC_SALE_019SALESCMPDSCR,
  AUFK9IDAT3,
  RESB9AUFNR,
  AUFK9OBJNR)
FROM PMSDO AS PMSDO9
 INNER JOIN AUFK AS AUFK9
 ON ( PMSDO9~OBJNR = AUFK9~OBJNR )
 INNER JOIN ZSTC_SALES_COMP AS ZSTC_SALE_019
 ON ( PMSDO9~VKORG = ZSTC_SALE_019~VKORG )
 INNER JOIN RESB AS RESB9
 ON ( AUFK9~AUFNR = RESB9~AUFNR )
WHERE ( NOT ( ( PMSDO9~VKORG like '%09' ) )
 AND ( NOT ( ( PMSDO9~VKORG like '%05' ) )
 AND ( NOT ( ( PMSDO9~VKORG like '%04' ) )
 AND ( NOT ( ( PMSDO9~VKORG like '%03' ) )
 AND ( NOT ( ( PMSDO9~VKORG like '%02' ) )
 AND ( ( AUFK9~IDAT3 <= $PARAM1 )
 OR ( AUFK9~IDAT3 >= $PARAM2 ) ) ) ) ) ) ).
if RESB9BDMNG = 0.
move 0 to ALTMP226.
else.
move RESB9BDMNG to ALTMP226.
endif.
IF ( ALTMP226 <> 0 ).
ALTMP227 = AUFK9AUFNR.
ALTMP228 = RESB9BDMNG.
ALTMP229 = RESB9BDTER.
ALTMP230 = AUFK9BEMOT.
ALTMP231 = RESB9BWART.
ALTMP232 = RESB9LGORT.
ALTMP233 = RESB9LIFNR.
ALTMP234 = RESB9MANDT.
ALTMP235 = RESB9MATNR.
ALTMP236 = RESB9MEINS.
ALTMP237 = PMSDO9OBJNR.
ALTMP238 = RESB9RSART.
ALTMP239 = RESB9RSNUM.
ALTMP240 = RESB9RSPOS.
ALTMP241 = RESB9SHKZG.
ALTMP242 = RESB9SOBKZ.
ALTMP243 = PMSDO9VKORG.
ALTMP244 = AUFK9WAERS.
ALTMP245 = RESB9WERKS.
ALTMP246 = ZSTC_SALE_019BUKRS.
ALTMP247 = ZSTC_SALE_019VKORG.
ALTMP248 = ZSTC_SALE_019WERKS.
ALTMP249 = ZSTC_SALE_019EKORG.
ALTMP250 = ZSTC_SALE_019MAMUSERCMPY.
ALTMP251 = ZSTC_SALE_019REGION.
ALTMP252 = ZSTC_SALE_019COUNTRY.
ALTMP253 = ZSTC_SALE_019COUNTRYDSCR.
ALTMP254 = ZSTC_SALE_019SALESCOMPANY.
ALTMP255 = ZSTC_SALE_019SALESCMPDSCR.
 move ALTMP227 to ITAB5-AUFNR.
 move ALTMP228 to ITAB5-BDMNG.
 move ALTMP229 to ITAB5-BDTER.
 move ALTMP230 to ITAB5-BEMOT.
 move ALTMP231 to ITAB5-BWART.
 move ALTMP232 to ITAB5-LGORT.
 move ALTMP233 to ITAB5-LIFNR.
 move ALTMP234 to ITAB5-MANDT.
 move ALTMP235 to ITAB5-MATNR.
 move ALTMP236 to ITAB5-MEINS.
 move ALTMP237 to ITAB5-OBJNR.
 move ALTMP238 to ITAB5-RSART.
 move ALTMP239 to ITAB5-RSNUM.
 move ALTMP240 to ITAB5-RSPOS.
 move ALTMP241 to ITAB5-SHKZG.
 move ALTMP242 to ITAB5-SOBKZ.
 move ALTMP243 to ITAB5-VKORG.
 move ALTMP244 to ITAB5-WAERS.
 move ALTMP245 to ITAB5-WERKS.
 move ALTMP246 to ITAB5-Z_BUKRS.
 move ALTMP247 to ITAB5-Z_VKORG.
 move ALTMP248 to ITAB5-Z_WERKS.
 move ALTMP249 to ITAB5-Z_EKORG.
 move ALTMP250 to ITAB5-Z_MAMUSERCMPY.
 move ALTMP251 to ITAB5-Z_REGION.
 move ALTMP252 to ITAB5-Z_COUNTRY.
 move ALTMP253 to ITAB5-Z_COUNTRYDSCR.
 move ALTMP254 to ITAB5-Z_SALESCOMPANY.
 move ALTMP255 to ITAB5-Z_SALESCMPDSCR.
 append ITAB5.
 cntbuf = cntbuf + 1.
 if download = 'N'.
  if cntbuf > 5000.
    perform FORM6.
    clear cntbuf.
    refresh ITAB5.
    append_flag = 'A'.
  endif.
 endif.
 if download = 'S'.
  if cntbuf > P_PKGSZ.
    perform FORM6.
    clear cntbuf.
    refresh ITAB5.
  endif.
 endif.
ENDIF.
ENDSELECT.
ENDFORM.

FORM FORM6.
data: outfile(512), ldfile(50).
ldfile = 'CTS_LZ_SAP_CP1_RESB_D'.
concatenate out_dir ldfile into outfile
  separated by '/'.
  IF DOWNLOAD = 'S'.
     DATA: error_message(700),mtext(800),iEOP(1).
     CALL FUNCTION P_SRVFM
          DESTINATION P_DEST
          KEEPING LOGICAL UNIT OF WORK
          EXPORTING
            EOS = last_batch
          IMPORTING
            EOP = iEOP
          TABLES
            E_TABLE = ITAB5
          EXCEPTIONS
            READ_ERROR = 1
            SYSTEM_FAILURE = 2
            MESSAGE error_message
            COMMUNICATION_FAILURE = 3
            MESSAGE error_message
            OTHERS = 4.

     IF sy-subrc ne 0.
        Case sy-subrc.
        when 1.
        CONCATENATE
        'Data Services read error. '
        'Check Data Services error log.'
        INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 2.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 3.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 4.
        MESSAGE  E240(S#) WITH
'Other SAP System Failure while calling DS remote function.'.
        endcase.
      ENDIF.
      IF iEOP = 'X'.
         PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
         LEAVE PROGRAM.
       ENDIF.
  ELSE.
data  dlmtlen type i value '1'.
data xdlmtlen type i value '1'.
data:
  ht(1) type c,
  xht(1) type x,
  conv type ref to cl_abap_conv_in_ce.
xht = '7F'.
conv = cl_abap_conv_in_ce=>create(
  encoding = '1100'
  input = xht
).
call method conv->read(
  exporting n    = xdlmtlen
  importing data = ht
            len = dlmtlen
).
data return_code type i.
 perform write_delimited_file
           tables   ITAB5
           using    outfile
                    append_flag
                    ht
                    dlmtlen
                    download
           changing return_code.

  case return_code.
    when 1.
      IF EXECMODE = 'D'.
        WRITE: /5 'No line selected'.
      ELSE.
        MESSAGE E047(S#).
      ENDIF.
    when 2.
      IF EXECMODE = 'D'.
        WRITE: /5 'Open File Error -- ', 25 OUTFILE.
      ELSE.
        MESSAGE  E084(E0) WITH OUTFILE.
      ENDIF.
    when 3.
      IF EXECMODE = 'D'.
        WRITE: /5 'Data exceed length limit (8192) '.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Data exceed length limit (8192) '.
      ENDIF.
    when 4.
      IF EXECMODE = 'D'.
        WRITE: /5 'Call function WS_DOWNLOAD error'.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Call function WS_DOWNLOAD error'.
      ENDIF.
  endcase.
 ENDIF.
ENDFORM.

FORM SUBSTRING USING SRC BEG LEN CHANGING RET.

DATA: VA1 TYPE I.
DATA: VA2 TYPE I.
DATA: VA3 TYPE I.

VA3 = STRLEN( SRC ).

IF  BEG = 0.   VA1 = 0.
ELSE.
  IF  BEG < 0.
    VA1 = VA3 + BEG.
    IF  VA1 < 0.   VA1 = 0.
    ENDIF.
  ELSE.          VA1 = BEG - 1.
  ENDIF.
ENDIF.

IF  LEN < 0.   VA2 = 0.
ELSE.          VA2 = VA3 - VA1.
ENDIF.

IF  VA2 > LEN. VA2 = LEN.
ENDIF.

IF  VA2 < 1.   MOVE ''           TO RET.
ELSE.          MOVE SRC+VA1(VA2) TO RET.
ENDIF.

ENDFORM.

form write_delimited_file
           tables   datatab
           using    file
                    append
                    delimit
                    dlength
                    dwnload
          changing rc.

  data: type1,
        appd(1),
        temp(32),
        time1(8),
        date1(10),
        output(8192),
        rcount type i,
        offset type i,
        tablen type i,
        maxlen type i value '8192'.

  data: begin of clientab occurs 0,
             output(8192),
          end of clientab.

  field-symbols: <f>.
  field-symbols <delim1>.
  data delim2(16).
  data l_filename type string.

  appd = append.
  if appd is not initial.
     appd = 'X'.
  endif.
  move file to l_filename.
  describe table datatab lines tablen.


  if dwnload = 'Y'.
     clear clientab. refresh clientab.
     rcount = 0.
  else.
     if appd = space.
   open dataset file for output in text mode ENCODING UTF-8.
     else.
    open dataset file for appending in text mode ENCODING UTF-8.
     endif.
     if sy-subrc <> 0.
         rc = 2. exit.
     endif.
  endif.

  loop at datatab.
    clear: tablen, offset, output.
    do.
      assign component sy-index of
         structure datatab to <f>.
      if sy-subrc <> 0. exit. endif.
      if sy-index > 1.
         assign delimit(dlength) TO <delim1> CASTING TYPE C.
         delim2 = <delim1>.
         write delim2(dlength) to output+offset(dlength).
         add dlength to offset.
      endif.

      describe field <f> type type1.

      if type1 = 'I' or type1 = 'N'.
          type1 = 'P'.
      endif.

      case type1.
        when 'D'.
          if <f> = '00000000'.
             <f> = ' '.
          else.
             move <f> to time1.
             assign time1 to <f>.
          endif.
        when 'F'.
          if <f> = '0.0'.
            temp = '0.0'.
          else.
             write <f> to temp exponent 0.
          endif.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
        when 'P'.
          if <f> < 0.
             write '-' to output+offset(1).
             add 1 to offset.
             <f> = <f> * ( -1 ).
          endif.
          move <f> to temp.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
      endcase.

      sy-fdpos = strlen( <f> ).

      tablen = offset + sy-fdpos.
      if tablen > maxlen.
         rc = 3. exit.
      endif.
      write <f> to output+offset(sy-fdpos).
      add sy-fdpos to offset.
    enddo.

    if dwnload = 'Y'.
       clientab-output = output.
       append clientab.
       rcount = rcount + 1.
       if rcount >= 50.
          SY-BATCH = SPACE.
          CALL FUNCTION 'GUI_DOWNLOAD'
            EXPORTING
              FILENAME = l_filename
              FILETYPE = 'ASC'
              CODEPAGE = '4110'
              APPEND   = appd
              WRITE_FIELD_SEPARATOR = 'X'
*            IMPORTING
*              FILELENGTH =
            TABLES
              DATA_TAB = clientab
            EXCEPTIONS
              OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
          clear clientab. refresh clientab.
          rcount = 0. appd = 'A'.
       endif.
    else.
       transfer output to file.
    endif.
  endloop.

  if dwnload = 'Y'.
       SY-BATCH = SPACE.
       CALL FUNCTION 'GUI_DOWNLOAD'
         EXPORTING
           FILENAME = l_filename
           FILETYPE = 'ASC'
              CODEPAGE = '4110'
           APPEND   = appd
           WRITE_FIELD_SEPARATOR = 'X'
*         IMPORTING
*           FILELENGTH =
         TABLES
           DATA_TAB = clientab
         EXCEPTIONS
           OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
  else.
       close dataset file.
  endif.
endform.

FORM CONNECT_RFCDEST_TO_PROGID.
 INCLUDE rfctypes.

 DATA: len     type i,
       R3NAME(4),
       SYSTNR(2),
       uid     LIKE SYS_UID,
       options LIKE RFCOPT,
       isunicode  TYPE n.

 DATA: NTOTAL     LIKE GWY_STRUCT-NOREG,
       GWY_GWHOST LIKE GWY_STRUCT-GWHOST,
       GWY_GWSERV LIKE GWY_STRUCT-GWSERV,
       GWY_TPNAME LIKE GWY_SYSTEM-TPNAME.

 TABLES: RFCSI.

* Check program ID
 IF P_PROGID = SPACE.							
    RAISE INVALID_PROGRAM_ID.
 ENDIF.

* determine if the RFC destination authority
  CALL FUNCTION 'RFC_READ_TCPIP_DESTINATION'
       EXPORTING destination = P_DEST
                 authority_check = 'X'
  IMPORTING rfcunicode = isunicode.

* Use current gateway if no info exits
 IF P_GWHOST = SPACE OR P_GWSERV = SPACE.
  CALL FUNCTION 'RFC_SYSTEM_INFO'
      IMPORTING
          RFCSI_EXPORT = RFCSI.

  len = strlen( rfcsi-rfcdest ) - 2.
  systnr = rfcsi-rfcdest+len.
  len = len - 1 - 3.
  r3name = rfcsi-rfcdest+len(3).
  len = len - 1.
  options-rfcgwhost = rfcsi-rfcdest(len).
  CONCATENATE 'sapgw' SYSTNR INTO options-rfcgwserv.
 ELSE.
   options-rfcgwhost = P_GWHOST.
   options-rfcgwserv = P_GWSERV.
 ENDIF.

* Parameters for GWY function call
  GWY_GWHOST = OPTIONS-RFCGWHOST.
  GWY_GWSERV = OPTIONS-RFCGWSERV.
  GWY_TPNAME = P_PROGID.

* Check gateway and server program registered
  CALL FUNCTION 'GWY_GET_NO_REG_PROGRAMS'
     EXPORTING
        GWHOST      = GWY_GWHOST
        GWSERV      = GWY_GWSERV
        TPNAME      = GWY_TPNAME
     IMPORTING
        NOREG_TOTAL = NTOTAL
     EXCEPTIONS
        OTHERS      = 1.

  IF sy-subrc NE 0.
     raise CONNECT_TO_GATEWAY_FAILED.
  ENDIF.

  IF NTOTAL = 0.
     raise SERVER_NOT_REGISTERED.
  ENDIF.

  IF NTOTAL GT 1.
     raise DUPLICATE_REG_PROGRAMS.
  ENDIF.

* build new connection to a registered server
  options-rfcexec   = gwy_tpname.
  options-rfcgwhost = gwy_gwhost.
  options-rfcgwserv = gwy_gwserv.
  options-rfchost   = '%%RFCSERVER%%'.
  IF P_SNC_ON = 'X'.
    options-rfcsnc  = 'X'.
  ENDIF.

  CALL 'RFCControl' ID 'CODE' FIELD 'O'
                    ID 'DESTINATION' FIELD P_DEST
                    ID 'TYPE' FIELD rfctype_external_tcp
                    ID 'OPTIONS' FIELD options.

  IF sy-subrc NE 0.
     RAISE CONNECT_TO_REG_SERVER_FAILED.
   ENDIF.

* and set exclusive mode to keep server owned
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
      EXPORTING  destination = P_DEST
                 exclusiv    = 'Y'
      EXCEPTIONS connect_to_reg_server_failed = 1
                 exclusiv_not_supported       = 2.

  IF SY-SUBRC NE 0.
     CASE SY-SUBRC.
          WHEN 1.
              RAISE CONNECT_TO_REG_SERVER_FAILED.
          WHEN 2.
              RAISE EXCLUSIV_NOT_SUPPORTED.
     ENDCASE.
  ENDIF.

ENDFORM.

FORM DISCONNECT_RFCDEST_FROM_PROGID.
* set exclusive mode to E to end the session
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
     EXPORTING
         destination = P_DEST
         exclusiv    = 'E'
     EXCEPTIONS
         connect_to_reg_server_failed = 1				
         exclusiv_not_supported       = 2.
ENDFORM.
