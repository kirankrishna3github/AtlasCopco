*&---------------------------------------------------------------------*
*& Report  ZJWU_FORMTOPDF_TEST
*&
*&---------------------------------------------------------------------*
*&*Copied from the following URL
*&http://saptechnical.com/Tutorials/Smartforms/OTF2PDF.htm
*&
*&---------------------------------------------------------------------*

REPORT  zcwu_sendpdf_mail.

PARAMETERS:
  mailto TYPE ad_smtpadr
   DEFAULT 'chang.chun.wu@cn.atlascopco.com'.               "#EC *

* Variable declarations
DATA:
lt_data TYPE solix_tab,
w_form_name TYPE tdsfname VALUE 'YSE_SD_PO',
w_fmodule TYPE rs38l_fnam,
w_cparam TYPE ssfctrlop,
w_outoptions TYPE ssfcompop,
w_bin_filesize TYPE i, " Binary File Size
w_file_name TYPE string,
w_file_path TYPE string,
w_full_path TYPE string,
w_nast TYPE nast,
w_ekko TYPE ekko,
w_pekko TYPE pekko,
l_xekpo TYPE TABLE OF  ekpo,
l_xekpa TYPE TABLE OF  ekpa,
l_xpekpo TYPE TABLE OF  pekpo,
l_xeket TYPE TABLE OF  eket,
l_xtkomv TYPE TABLE OF   komv,
l_xekkn TYPE TABLE OF  ekkn,
l_xekek TYPE TABLE OF  ekek,
l_xkomk TYPE TABLE OF  komk.

* Internal tables declaration

* Internal table to hold the OTF data
DATA:
t_otf TYPE itcoo OCCURS 0 WITH HEADER LINE,

* Internal table to hold OTF data recd from the SMARTFORM
t_otf_from_fm TYPE ssfcrescl,

* Internal table to hold the data from the FM CONVERT_OTF
t_pdf_tab LIKE tline OCCURS 0 WITH HEADER LINE.


* This function module call is used to retrieve the name of the Function
* module generated when the SMARTFORM is activated

CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
EXPORTING
formname = w_form_name
* VARIANT = ' '
* DIRECT_CALL = ' '
IMPORTING
fm_name = w_fmodule
EXCEPTIONS
no_form = 1
no_function_module = 2
OTHERS = 3
.
IF sy-subrc <> 0.
  MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.

* Calling the SMARTFORM using the function module retrieved above
* GET_OTF parameter in the CONTROL_PARAMETERS is set to get the OTF
* format of the output


*w_cparam-device = 'PRINTER'.
w_cparam-no_dialog = 'X'.
*w_cparam-preview = 'X'. " Suppressing the dialog box
" for print preview
w_cparam-getotf = 'X'.

* Printer name to be used is provided in the export parameter
* OUTPUT_OPTIONS

w_outoptions-TDNEWID  = 'X'.
w_outoptions-TDIMMED  = 'X'.
w_outoptions-TDDELETE  = 'X'.
w_outoptions-TDFINAL  = 'X'.
w_outoptions-TDIEXIT  = 'X'.
w_outoptions-tddest = 'CN01'.
*w_outoptions-TDNOPREV = 'X'.
*w_outoptions-TDNOPRINT = 'X'.
*w_outoptions-TDNOARCH  = 'X'.

CALL FUNCTION w_fmodule
EXPORTING
* ARCHIVE_INDEX =
* ARCHIVE_INDEX_TAB =
* ARCHIVE_PARAMETERS =
control_parameters = w_cparam
* MAIL_APPL_OBJ =
* MAIL_RECIPIENT =
* MAIL_SENDER =
*output_options = w_outoptions
zxekko = w_ekko
zxpekko = w_pekko
is_nast = w_nast
 USER_SETTINGS = 'X'
IMPORTING
* DOCUMENT_OUTPUT_INFO =
job_output_info = t_otf_from_fm
* JOB_OUTPUT_OPTIONS =
TABLES
l_xekpo = l_xekpo
l_xekpa = l_xekpa
l_xpekpo = l_xpekpo
l_xeket = l_xeket
l_xtkomv = l_xtkomv
l_xekkn = l_xekkn
l_xekek = l_xekek
l_xkomk = l_xkomk
EXCEPTIONS
formatting_error = 1
internal_error = 2
send_error = 3
user_canceled = 4
OTHERS = 5
.
IF sy-subrc <> 0.
  MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.

t_otf[] = t_otf_from_fm-otfdata[].

* Function Module CONVERT_OTF is used to convert the OTF format to PDF

CALL FUNCTION 'CONVERT_OTF'
EXPORTING
format = 'PDF'
max_linewidth = 132
* ARCHIVE_INDEX = ' '
* COPYNUMBER = 0
* ASCII_BIDI_VIS2LOG = ' '
* PDF_DELETE_OTFTAB = ' '
IMPORTING
bin_filesize = w_bin_filesize
* BIN_FILE =
TABLES
otf = t_otf
lines = t_pdf_tab
EXCEPTIONS
err_max_linewidth = 1
err_format = 2
err_conv_not_possible = 3
err_bad_otf = 4
OTHERS = 5
.
IF sy-subrc <> 0.
  MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.

DATA: lt_pdf TYPE TABLE OF tline,
      ls_pdf TYPE tline,
      lv_content  TYPE xstring.
FIELD-SYMBOLS <fs_x> TYPE x.

APPEND LINES OF t_pdf_tab TO lt_pdf.
* convert pdf to xstring string
LOOP AT lt_pdf INTO ls_pdf.
  ASSIGN ls_pdf TO <fs_x> CASTING.
  CONCATENATE lv_content <fs_x> INTO lv_content IN BYTE MODE.
ENDLOOP.

* Convert xstring to binary table to pass to the LOAD_DATA method
CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
  EXPORTING
    buffer     = lv_content
  TABLES
    binary_tab = lt_data.

* To display File SAVE dialog window
CALL METHOD cl_gui_frontend_services=>file_save_dialog
* EXPORTING
* WINDOW_TITLE =
* DEFAULT_EXTENSION =
* DEFAULT_FILE_NAME =
* FILE_FILTER =
* INITIAL_DIRECTORY =
* WITH_ENCODING =
* PROMPT_ON_OVERWRITE = 'X'
CHANGING
filename = w_file_name
path = w_file_path
fullpath = w_full_path
* USER_ACTION =
* FILE_ENCODING =
EXCEPTIONS
cntl_error = 1
error_no_gui = 2
not_supported_by_gui = 3
OTHERS = 4
.
IF sy-subrc <> 0.
  MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.


* Use the FM GUI_DOWNLOAD to download the generated PDF file onto the
* presentation server

CALL FUNCTION 'GUI_DOWNLOAD'
EXPORTING
bin_filesize = w_bin_filesize
filename = w_full_path
filetype = 'BIN'
* APPEND = ' '
* WRITE_FIELD_SEPARATOR = ' '
* HEADER = '00'
* TRUNC_TRAILING_BLANKS = ' '
* WRITE_LF = 'X'
* COL_SELECT = ' '
* COL_SELECT_MASK = ' '
* DAT_MODE = ' '
* CONFIRM_OVERWRITE = ' '
* NO_AUTH_CHECK = ' '
* CODEPAGE = ' '
* IGNORE_CERR = ABAP_TRUE
* REPLACEMENT = '#'
* WRITE_BOM = ' '
* TRUNC_TRAILING_BLANKS_EOL = 'X'
* WK1_N_FORMAT = ' '
* WK1_N_SIZE = ' '
* WK1_T_FORMAT = ' '
* WK1_T_SIZE = ' '
* IMPORTING
* FILELENGTH =
TABLES
data_tab = t_pdf_tab
* FIELDNAMES =
* EXCEPTIONS
* FILE_WRITE_ERROR = 1
* NO_BATCH = 2
* GUI_REFUSE_FILETRANSFER = 3
* INVALID_TYPE = 4
* NO_AUTHORITY = 5
* UNKNOWN_ERROR = 6
* HEADER_NOT_ALLOWED = 7
* SEPARATOR_NOT_ALLOWED = 8
* FILESIZE_NOT_ALLOWED = 9
* HEADER_TOO_LONG = 10
* DP_ERROR_CREATE = 11
* DP_ERROR_SEND = 12
* DP_ERROR_WRITE = 13
* UNKNOWN_DP_ERROR = 14
* ACCESS_DENIED = 15
* DP_OUT_OF_MEMORY = 16
* DISK_FULL = 17
* DP_TIMEOUT = 18
* FILE_NOT_FOUND = 19
* DATAPROVIDER_EXCEPTION = 20
* CONTROL_FLUSH_ERROR = 21
* OTHERS = 22
.
IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.


DATA: send_request   TYPE REF TO cl_bcs,
      document       TYPE REF TO cl_document_bcs,
      recipient      TYPE REF TO if_recipient_bcs,
      bcs_exception  TYPE REF TO cx_bcs,
      main_text      TYPE bcsy_text,
      binary_content TYPE solix_tab,
      size           TYPE so_obj_len,
      sent_to_all    TYPE os_boolean.
TRY.

*     -------- create persistent send request ------------------------
    send_request = cl_bcs=>create_persistent( ).

*     -------- create and set document with attachment ---------------
*     create document object from internal table with text
    APPEND 'Hello world!' TO main_text.                     "#EC NOTEXT
    document = cl_document_bcs=>create_document(
      i_type    = 'RAW'
      i_text    = main_text
      i_subject = 'Test Created By BCS_EXAMPLE_7' ).        "#EC NOTEXT

*     add the spread sheet as attachment to document object
    document->add_attachment(
      i_attachment_type    = 'PDF'                          "#EC NOTEXT
      i_attachment_subject = 'Test_PDF_wcc'                     "#EC NOTEXT
      i_attachment_size    = size
      i_att_content_hex    = lt_data ).

*     add document object to send request
    send_request->set_document( document ).

*     --------- add recipient (e-mail address) -----------------------
*     create recipient object
    recipient = cl_cam_address_bcs=>create_internet_address( mailto ).

*     add recipient object to send request
    send_request->add_recipient( recipient ).

*     ---------- send document ---------------------------------------
    sent_to_all = send_request->send( i_with_error_screen = 'X' ).

    COMMIT WORK.

    IF sent_to_all IS INITIAL.
      MESSAGE i500(sbcoms) WITH mailto.
    ELSE.
      MESSAGE s022(so).
    ENDIF.

*   ------------ exception handling ----------------------------------
*   replace this rudimentary exception handling with your own one !!!
  CATCH cx_bcs INTO bcs_exception.
    MESSAGE i865(so) WITH bcs_exception->error_type.
ENDTRY.
