report  rkaafru1.
* Select confirmations from table AFRU (using creation date).
* List all confirmations for that no CO-documents or multiple
* CO-documents were created.
* Condition for select: actual quantities ISM01 ... ISM06 <> 0 or
* network quantity ISMNW <> 0.
* From release 4.0, confirmations can be analysed with transaction COFC.

tables: afru, cobk, coep, afvc, t430.

select-options:
  s_ersda for cobk-cpudt.

data:
  gd_value     like coep-wkgbtr,
  gd_cnt_afru  like sy-tabix,
  gd_cnt_cobk  like sy-tabix,
  gd_awref like acchd-awref,
  gd_aworg like acchd-aworg.

data: begin of gtv_cobk occurs 0,
   kokrs like cobk-kokrs,
   belnr like cobk-belnr,
   kwaer like cobk-kwaer,
   stflg like cobk-stflg,
end of gtv_cobk.

data:      dummy_afrc(300) type c.
constants: afrc(4) type c value 'AFRC'.

format intensified off.
select * from afru
  where ersda in s_ersda
  and (    ( ism01 <> 0  or
             ism02 <> 0  or
             ism03 <> 0  or
             ism04 <> 0  or
             ism05 <> 0  or
             ism06 <> 0 )
        or ( ismnw <> 0 ) )
  order by primary key.
  if sy-saprl(1) >= '4'.
    SELECT SINGLE * FROM (AFRC) INTO DUMMY_AFRC
                    where aufnr = afru-aufnr
                    and   rueck = afru-rueck
                    and   rmzhl = afru-rmzhl.
    if sy-subrc = 0.
      write: / 'COFC entry for: RUECK ', afru-rueck,
             ', RMZHL ', afru-rmzhl.
      continue.
    endif.
  endif.
  select single steus lar01 lar02 lar03 lar04 lar05 lar06 selkz larnt
                      from afvc into corresponding fields of afvc
         where aufpl = afru-aufpl
          and  aplzl = afru-aplzl.
  check sy-subrc = 0.
  check not afvc-selkz is initial.
  call function 'CO_TA_T430_READ'
       exporting
            steus  = afvc-steus
       importing
            struct = t430.
  check not t430-kalkz is initial.
* keine Eigenbearbeitungsdaten
  check t430-lief is initial or
      ( t430-lief = 'X' and not afru-arbid is initial ).
  check ( afru-ism01 > 0 and not afvc-lar01 is initial ) or
        ( afru-ism02 > 0 and not afvc-lar02 is initial ) or
        ( afru-ism03 > 0 and not afvc-lar03 is initial ) or
        ( afru-ism04 > 0 and not afvc-lar04 is initial ) or
        ( afru-ism05 > 0 and not afvc-lar05 is initial ) or
        ( afru-ism06 > 0 and not afvc-lar06 is initial ) or
        ( afru-ismnw > 0 and
          ( not afvc-larnt is initial or not afru-learr is initial ) ).

  add 1 to gd_cnt_afru.
  clear gtv_cobk.
  select kokrs belnr kwaer stflg from cobk
         into corresponding fields of table gtv_cobk
         where   refbt = 'R'
         and     awtyp = 'AFRU'
         and     refbn = afru-rueck
         and     aworg = afru-rmzhl
         and     vrgng <> 'KOLI'.
  add sy-dbcnt to gd_cnt_cobk.
  if sy-dbcnt = 0 or sy-dbcnt > 1.
    write: / afru-rueck hotspot,
             afru-rmzhl.
    hide: afru-rueck,
          afru-rmzhl.
    read table gtv_cobk index 1.
    write gtv_cobk-belnr.
    clear gd_value.
    select * from coep where kokrs = gtv_cobk-kokrs
                       and   belnr = gtv_cobk-belnr
                       and   beknz = 'S'.
      add coep-wkgbtr to gd_value.
    endselect.
    write: ' ', gd_value, ' ', gtv_cobk-kwaer, ' ', gtv_cobk-stflg.
    loop at gtv_cobk from 2.
      clear gd_value.
      write: / gtv_cobk-belnr under gtv_cobk-belnr.
      select * from coep where kokrs = gtv_cobk-kokrs
                         and   belnr = gtv_cobk-belnr
                         and   beknz = 'S'.
        add coep-wkgbtr to gd_value.
      endselect.
      write: ' ', gd_value, ' ', gtv_cobk-kwaer, ' ', gtv_cobk-stflg.
    endloop.
  endif.
  sy-msgv1 = 'AFRU:'.
  write gd_cnt_afru to sy-msgv2 left-justified.
  sy-msgv3 = ' COBK:'.
  write gd_cnt_cobk to sy-msgv4 left-justified.
  concatenate sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 into
              sy-msgv1 separated by ' '.

  sy-tfill = gd_cnt_afru mod 100.
  if sy-tfill = 0.
    call function 'SAPGUI_PROGRESS_INDICATOR'
         exporting
              text = sy-msgv1.
  endif.
endselect.
clear afru.

skip.
write: / 'AFRU: ', gd_cnt_afru left-justified intensified.
write: / 'COBK: ', gd_cnt_cobk left-justified intensified.
sy-tfill = gd_cnt_afru - gd_cnt_cobk.
write: / 'Diff: ', sy-tfill left-justified intensified.

at line-selection.
  check not afru-rueck is initial.
  gd_awref = afru-rueck.
  gd_aworg = afru-rmzhl.
  call function 'AC_DOCUMENT_RECORD'
       exporting
            i_awtyp = 'AFRU'
            i_awref = gd_awref
            i_aworg = gd_aworg.

*&---------------------------------------------------------------------*
*& Report  ZKAAFRU1                                                    *
*&                                                                     *
*&---------------------------------------------------------------------*
*&                                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*

at line-selection.
  check not afru-rueck is initial.
  gd_awref = afru-rueck.
  gd_aworg = afru-rmzhl.
  call function 'AC_DOCUMENT_RECORD'
       exporting
            i_awtyp = 'AFRU'
            i_awref = gd_awref
            i_aworg = gd_aworg.

                            .

*Selection text£º
*S_ERSDA:D       Created on
