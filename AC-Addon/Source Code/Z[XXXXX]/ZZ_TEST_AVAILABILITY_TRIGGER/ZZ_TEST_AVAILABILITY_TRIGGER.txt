*&---------------------------------------------------------------------*
*& Report  ZZ_TEST_AVAILABILITY_TRIGGER                                *
*&                                                                     *
*&---------------------------------------------------------------------*
*&                                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*

REPORT  ZZ_TEST_AVAILABILITY_TRIGGER            .


DATA: BEGIN OF IT_VBAP OCCURS 0,
        VBELN TYPE VBELN_VA,
        POSNR TYPE POSNR_VA,
        WERKS TYPE WERKS_EXT,
      END OF IT_VBAP.

* Return
DATA LT_RETURN TYPE STANDARD TABLE OF BAPIRET2.


* BAPI Sales order change
DATA: BEGIN OF LS_ORDER_HEADER_INX.
        INCLUDE STRUCTURE BAPISDH1X.
DATA: END   OF LS_ORDER_HEADER_INX.
* Item
DATA:   LS_ORDER_ITEM_IN TYPE BAPISDITM.
DATA:   LT_ORDER_ITEM_IN TYPE CRMT_BAPISDITM_T.
DATA:   LS_ORDER_ITEM_INX TYPE BAPISDITMX.
DATA:   LT_ORDER_ITEM_INX TYPE CRMT_BAPISDITMX_T.



parameters: p_vbeln type vbeln,
            p_posnr type posnr.



SELECT VBELN POSNR WERKS FROM VBAP INTO TABLE IT_VBAP
                  WHERE VBELN = p_vbeln
                   and posnr = p_posnr.



* Updateflag in the headerrecord:
LS_ORDER_HEADER_INX-UPDATEFLAG = 'U'.

*
LOOP AT IT_VBAP.
  LS_ORDER_ITEM_INX-UPDATEFLAG = 'X'.
* Itemnumber
  LS_ORDER_ITEM_IN-ITM_NUMBER = IT_VBAP-POSNR.
  LS_ORDER_ITEM_INX-ITM_NUMBER = IT_VBAP-POSNR.
* Plant
  LS_ORDER_ITEM_IN-PLANT = IT_VBAP-WERKS.
  LS_ORDER_ITEM_INX-PLANT = 'X'.

  APPEND LS_ORDER_ITEM_IN TO LT_ORDER_ITEM_IN.
  APPEND LS_ORDER_ITEM_INX TO LT_ORDER_ITEM_INX.
ENDLOOP.


CALL FUNCTION 'BAPI_SALESORDER_CHANGE'
  EXPORTING
    SALESDOCUMENT     = p_VBELN
    ORDER_HEADER_INX  = LS_ORDER_HEADER_INX
  TABLES
    RETURN            = LT_RETURN
    ORDER_ITEM_IN     = LT_ORDER_ITEM_IN
    ORDER_ITEM_INX    = LT_ORDER_ITEM_INX.



commit work and wait.
