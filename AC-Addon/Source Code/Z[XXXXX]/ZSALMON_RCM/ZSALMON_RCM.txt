REPORT ZAL_ABAP message-id 26 line-size 255
no standard page heading.
* ZSalMon.
PARAMETER DOWNLOAD(1) DEFAULT 'N' lower case. "N-svr,Y-clnt
PARAMETER EXECMODE(1) DEFAULT 'B' lower case. "D-dlg,B-btch
PARAMETER OUT_DIR(48) DEFAULT "output file dir
'/var/load/CP1/UK/read' lower case.
PARAMETER IN_DIR(48) DEFAULT "input file dir
'/var/load/CP1/UK/read' lower case.

PARAMETER $PARAM1(50) TYPE C.

PARAMETER $PARAM2(50) TYPE C.

PARAMETER $PARAM3(50) TYPE C.

PARAMETER P_DF_VK(40) DEFAULT "ABAP data flow object key
'' lower case.
PARAMETER P_DI_GEN(40) DEFAULT "DI version that generated ABAP
'' lower case.

*** Machine generated ABAP. Do not modify.            ***
*** # Copyright Business Objects S.A.  All rights reserved. ***
*
* Date Time:
*    06/06/15 00:12:41
* SAP used for generated this ABAP:
*    Release: 701
*    Host   : 10.25.3.26
*
* ABAP Dataflow Name:
*    DF_SALMON_R3_WDV_SalMon
* ABAP program name in SAP:
*    ZSALMON
* Generated ABAP file name:
*    D:/Data/SAPLogistics/PRD/ABAP/SalMon
TABLES KNA1.
TABLES KNB1.
TABLES ADRC.
TABLES KNVV.
TABLES TVKO.
TABLES KNVH.

DATA: begin of ITAB7 occurs 0,
BUKRS(4) TYPE C,
VKORG(4) TYPE C,
VTWEG(2) TYPE C,
SPART(2) TYPE C,
KUNNR(10) TYPE C,
BRAN1(10) TYPE C,
COUNTRY(3) TYPE C,
KDGRP(2) TYPE C,
LOEVM(1) TYPE C,
NAME1(40) TYPE C,
NAME2(40) TYPE C,
NAME3(40) TYPE C,
NAME4(40) TYPE C.
DATA: end of ITAB7.

DATA: begin of ITAB10 occurs 0,
BUKRS(4) TYPE C,
VKORG(4) TYPE C,
VTWEG(2) TYPE C,
SPART(2) TYPE C,
KUNNR(10) TYPE C,
BRAN1(10) TYPE C,
COUNTRY(3) TYPE C,
KDGRP(2) TYPE C,
LOEVM(1) TYPE C,
HKUNNR(10) TYPE C,
SORT1(20) TYPE C,
NAME1(40) TYPE C,
NAME2(40) TYPE C,
NAME3(40) TYPE C,
NAME4(40) TYPE C.
DATA: end of ITAB10.

DATA: begin of ITAB11 occurs 0,
BUKRS(4) TYPE C,
VKORG(4) TYPE C,
VTWEG(2) TYPE C,
SPART(2) TYPE C,
KUNNR(10) TYPE C,
BRAN1(10) TYPE C,
COUNTRY(3) TYPE C,
KDGRP(2) TYPE C,
LOEVM(1) TYPE C,
HKUNNR(10) TYPE C,
SORT1(20) TYPE C,
NAME1(40) TYPE C,
NAME2(40) TYPE C,
NAME3(40) TYPE C,
NAME4(40) TYPE C.
DATA: end of ITAB11.

data: append_flag(1) value ' ',
      cntbuf type i,
      delimleng type i.

CONSTANTS C_DF_VK(40) VALUE '8417'.
CONSTANTS C_DI_GEN(40) VALUE '12.2.2.3'.
DATA WARN_MSG(50).
DATA: gv_directory     TYPE epsdirnam  VALUE '/var/load/xxx/UK/read/',
      gv_logsys        like tbdlst-logsys.

start-of-selection.
* Logical system
  CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
    IMPORTING
      own_logical_system             = gv_logsys
    EXCEPTIONS
      own_logical_system_not_defined = 1
      OTHERS                         = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE 'E' NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    STOP.
  ENDIF.
  REPLACE 'xxx' IN out_dir WITH gv_logsys(3).
  REPLACE 'xxx' IN in_dir WITH gv_logsys(3).



PERFORM FORM7.
PERFORM FORM10.
FREE ITAB7.
PERFORM FORM12.
FREE ITAB11.
PERFORM FORM11.
FREE ITAB10.

end-of-selection.

CLEAR WARN_MSG.

IF NOT P_DF_VK IS INITIAL.
  IF P_DF_VK <> C_DF_VK.
     CONCATENATE '$$Warning$'
                 C_DF_VK
                 '$' INTO WARN_MSG.
  ENDIF.
ENDIF.
IF NOT P_DI_GEN IS INITIAL.
  IF P_DI_GEN <> C_DI_GEN.
     IF WARN_MSG IS INITIAL.
       CONCATENATE '$$Warning$$'
                   C_DI_GEN
                   INTO WARN_MSG.
     ELSE.
       CONCATENATE WARN_MSG
                   C_DI_GEN
                   INTO WARN_MSG.
     ENDIF.
  ENDIF.
ENDIF.

IF NOT WARN_MSG IS INITIAL.
  IF EXECMODE = 'D'.
    WRITE WARN_MSG.
    NEW-LINE.
  ELSE.
    MESSAGE S000 with WARN_MSG.
  ENDIF.
ENDIF.


write  '* Program Complete *'.
write  '# Copyright Business Objects S.A.  All rights reserved.'
.

FORM FORM7.
DATA ALTMP1(4) TYPE C.
DATA ALTMP2(4) TYPE C.
DATA ALTMP3(2) TYPE C.
DATA ALTMP4(2) TYPE C.
DATA ALTMP5(10) TYPE C.
DATA ALTMP6(10) TYPE C.
DATA ALTMP7(3) TYPE C.
DATA ALTMP8(2) TYPE C.
DATA ALTMP9(1) TYPE C.
DATA ALTMP10(40) TYPE C.
DATA ALTMP11(40) TYPE C.
DATA ALTMP12(40) TYPE C.
DATA ALTMP13(40) TYPE C.

DATA KNB19BUKRS LIKE KNB1-BUKRS.
DATA KNVV9VKORG LIKE KNVV-VKORG.
DATA KNVV9VTWEG LIKE KNVV-VTWEG.
DATA KNVV9SPART LIKE KNVV-SPART.
DATA KNA19KUNNR LIKE KNA1-KUNNR.
DATA KNA19BRAN1 LIKE KNA1-BRAN1.
DATA ADRC9COUNTRY LIKE ADRC-COUNTRY.
DATA KNVV9KDGRP LIKE KNVV-KDGRP.
DATA KNVV9LOEVM LIKE KNVV-LOEVM.
DATA ADRC9NAME1 LIKE ADRC-NAME1.
DATA ADRC9NAME2 LIKE ADRC-NAME2.
DATA ADRC9NAME3 LIKE ADRC-NAME3.
DATA ADRC9NAME4 LIKE ADRC-NAME4.
DATA KNB19KUNNR LIKE KNB1-KUNNR.
DATA KNA19ADRNR LIKE KNA1-ADRNR.
DATA ADRC9ADDRNUMBER LIKE ADRC-ADDRNUMBER.
DATA KNVV9KUNNR LIKE KNVV-KUNNR.
DATA TVKO9BUKRS LIKE TVKO-BUKRS.
DATA TVKO9VKORG LIKE TVKO-VKORG.



SELECT
  KNB19~BUKRS
  KNVV9~VKORG
  KNVV9~VTWEG
  KNVV9~SPART
  KNA19~KUNNR
  KNA19~BRAN1
  ADRC9~COUNTRY
  KNVV9~KDGRP
  KNVV9~LOEVM
  ADRC9~NAME1
  ADRC9~NAME2
  ADRC9~NAME3
  ADRC9~NAME4
  KNB19~KUNNR
  KNA19~ADRNR
  ADRC9~ADDRNUMBER
  KNVV9~KUNNR
  TVKO9~BUKRS
  TVKO9~VKORG
into (KNB19BUKRS,
  KNVV9VKORG,
  KNVV9VTWEG,
  KNVV9SPART,
  KNA19KUNNR,
  KNA19BRAN1,
  ADRC9COUNTRY,
  KNVV9KDGRP,
  KNVV9LOEVM,
  ADRC9NAME1,
  ADRC9NAME2,
  ADRC9NAME3,
  ADRC9NAME4,
  KNB19KUNNR,
  KNA19ADRNR,
  ADRC9ADDRNUMBER,
  KNVV9KUNNR,
  TVKO9BUKRS,
  TVKO9VKORG)
FROM KNA1 AS KNA19
 INNER JOIN KNB1 AS KNB19
 ON ( KNA19~KUNNR = KNB19~KUNNR )
 INNER JOIN ADRC AS ADRC9
 ON ( KNA19~ADRNR = ADRC9~ADDRNUMBER )
 INNER JOIN KNVV AS KNVV9
 ON ( KNB19~KUNNR = KNVV9~KUNNR )
 INNER JOIN TVKO AS TVKO9
 ON ( ( KNVV9~VKORG = TVKO9~VKORG )
 AND ( KNB19~BUKRS = TVKO9~BUKRS ) )
WHERE ( KNVV9~VKORG = $PARAM2 ).
ALTMP1 = KNB19BUKRS.
ALTMP2 = KNVV9VKORG.
ALTMP3 = KNVV9VTWEG.
ALTMP4 = KNVV9SPART.
ALTMP5 = KNA19KUNNR.
ALTMP6 = KNA19BRAN1.
ALTMP7 = ADRC9COUNTRY.
ALTMP8 = KNVV9KDGRP.
ALTMP9 = KNVV9LOEVM.
ALTMP10 = ADRC9NAME1.
ALTMP11 = ADRC9NAME2.
ALTMP12 = ADRC9NAME3.
ALTMP13 = ADRC9NAME4.
 move ALTMP1 to ITAB7-BUKRS.
 move ALTMP2 to ITAB7-VKORG.
 move ALTMP3 to ITAB7-VTWEG.
 move ALTMP4 to ITAB7-SPART.
 move ALTMP5 to ITAB7-KUNNR.
 move ALTMP6 to ITAB7-BRAN1.
 move ALTMP7 to ITAB7-COUNTRY.
 move ALTMP8 to ITAB7-KDGRP.
 move ALTMP9 to ITAB7-LOEVM.
 move ALTMP10 to ITAB7-NAME1.
 move ALTMP11 to ITAB7-NAME2.
 move ALTMP12 to ITAB7-NAME3.
 move ALTMP13 to ITAB7-NAME4.
 append ITAB7.
ENDSELECT.
ENDFORM.

FORM FORM10.
DATA ALTMP14(4) TYPE C.
DATA ALTMP15(4) TYPE C.
DATA ALTMP16(2) TYPE C.
DATA ALTMP17(2) TYPE C.
DATA ALTMP18(10) TYPE C.
DATA ALTMP19(10) TYPE C.
DATA ALTMP20(3) TYPE C.
DATA ALTMP21(2) TYPE C.
DATA ALTMP22(1) TYPE C.
DATA ALTMP23(10) TYPE C.
DATA ALTMP24(20) TYPE C.
DATA ALTMP25(40) TYPE C.
DATA ALTMP26(40) TYPE C.
DATA ALTMP27(40) TYPE C.
DATA ALTMP28(40) TYPE C.
DATA ALOJF1 TYPE C.
DATA ALOJF0 TYPE C.
DATA ALOJF3 TYPE C.

DATA KNVH9HKUNNR LIKE KNVH-HKUNNR.
DATA KNVH9KUNNR LIKE KNVH-KUNNR.
DATA KNVH9VKORG LIKE KNVH-VKORG.
DATA KNVH9VTWEG LIKE KNVH-VTWEG.
DATA KNVH9SPART LIKE KNVH-SPART.
DATA KNVH9HITYP LIKE KNVH-HITYP.
DATA KNVH9DATBI LIKE KNVH-DATBI.
DATA KNA1_19KUNNR LIKE KNA1-KUNNR.
DATA KNA1_19ADRNR LIKE KNA1-ADRNR.


LOOP AT ITAB7.
ALTMP14 = ITAB7-BUKRS.
ALTMP15 = ITAB7-VKORG.
ALTMP16 = ITAB7-VTWEG.
ALTMP17 = ITAB7-SPART.
ALTMP18 = ITAB7-KUNNR.
ALTMP19 = ITAB7-BRAN1.
ALTMP20 = ITAB7-COUNTRY.
ALTMP21 = ITAB7-KDGRP.
ALTMP22 = ITAB7-LOEVM.
ALTMP25 = ITAB7-NAME1.
ALTMP26 = ITAB7-NAME2.
ALTMP27 = ITAB7-NAME3.
ALTMP28 = ITAB7-NAME4.
ALOJF1 = 'Y'.
ALOJF0 = 'N'.
IF ( ALOJF1 = 'Y' ).

SELECT
  KNVH9~HKUNNR
  KNVH9~KUNNR
  KNVH9~VKORG
  KNVH9~VTWEG
  KNVH9~SPART
  KNVH9~HITYP
  KNVH9~DATBI
  KNA1_19~KUNNR
  KNA1_19~ADRNR
into (KNVH9HKUNNR,
  KNVH9KUNNR,
  KNVH9VKORG,
  KNVH9VTWEG,
  KNVH9SPART,
  KNVH9HITYP,
  KNVH9DATBI,
  KNA1_19KUNNR,
  KNA1_19ADRNR)
FROM KNVH AS KNVH9
 LEFT OUTER JOIN KNA1 AS KNA1_19
 ON ( KNVH9~HKUNNR = KNA1_19~KUNNR )
WHERE ( ( KNVH9~HITYP = 'A' )
 AND ( ( KNVH9~DATBI = '99991231' )
 AND ( ( KNVH9~SPART = ITAB7-SPART )
 AND ( ( KNVH9~VTWEG = ITAB7-VTWEG )
 AND ( ( KNVH9~VKORG = ITAB7-VKORG )
 AND ( KNVH9~KUNNR = ITAB7-KUNNR ) ) ) ) ) ).
ALTMP23 = KNVH9HKUNNR.
ALOJF0 = 'Y'.
ALOJF3 = 'N'.
IF ( ALOJF0 = 'Y' ).

SELECT
  SORT1
  ADDRNUMBER
INTO CORRESPONDING FIELDS OF ADRC
FROM ADRC
WHERE ( ADDRNUMBER = KNA1_19ADRNR ).
ALTMP24 = ADRC-SORT1.
ALOJF3 = 'Y'.
 move ALTMP14 to ITAB11-BUKRS.
 move ALTMP15 to ITAB11-VKORG.
 move ALTMP16 to ITAB11-VTWEG.
 move ALTMP17 to ITAB11-SPART.
 move ALTMP18 to ITAB11-KUNNR.
 move ALTMP19 to ITAB11-BRAN1.
 move ALTMP20 to ITAB11-COUNTRY.
 move ALTMP21 to ITAB11-KDGRP.
 move ALTMP22 to ITAB11-LOEVM.
 move ALTMP23 to ITAB11-HKUNNR.
 move ALTMP24 to ITAB11-SORT1.
 move ALTMP25 to ITAB11-NAME1.
 move ALTMP26 to ITAB11-NAME2.
 move ALTMP27 to ITAB11-NAME3.
 move ALTMP28 to ITAB11-NAME4.
 append ITAB11.
ENDSELECT.
ENDIF.
IF ( ALOJF3 = 'N' ).
clear ADRC-SORT1.
clear ADRC-ADDRNUMBER.
clear ALTMP24.
 move ALTMP14 to ITAB11-BUKRS.
 move ALTMP15 to ITAB11-VKORG.
 move ALTMP16 to ITAB11-VTWEG.
 move ALTMP17 to ITAB11-SPART.
 move ALTMP18 to ITAB11-KUNNR.
 move ALTMP19 to ITAB11-BRAN1.
 move ALTMP20 to ITAB11-COUNTRY.
 move ALTMP21 to ITAB11-KDGRP.
 move ALTMP22 to ITAB11-LOEVM.
 move ALTMP23 to ITAB11-HKUNNR.
 move ALTMP24 to ITAB11-SORT1.
 move ALTMP25 to ITAB11-NAME1.
 move ALTMP26 to ITAB11-NAME2.
 move ALTMP27 to ITAB11-NAME3.
 move ALTMP28 to ITAB11-NAME4.
 append ITAB11.
ENDIF.
ENDSELECT.
ENDIF.
IF ( ALOJF0 = 'N' ).
clear KNVH9HKUNNR.
clear KNVH9KUNNR.
clear KNVH9VKORG.
clear KNVH9VTWEG.
clear KNVH9SPART.
clear KNVH9HITYP.
clear KNVH9DATBI.
clear KNA1_19KUNNR.
clear KNA1_19ADRNR.
clear ALTMP23.
ALOJF3 = 'N'.
IF ( ALOJF0 = 'Y' ).

SELECT
  SORT1
  ADDRNUMBER
INTO CORRESPONDING FIELDS OF ADRC
FROM ADRC
WHERE ( ADDRNUMBER = KNA1_19ADRNR ).
ALTMP24 = ADRC-SORT1.
ALOJF3 = 'Y'.
 move ALTMP14 to ITAB11-BUKRS.
 move ALTMP15 to ITAB11-VKORG.
 move ALTMP16 to ITAB11-VTWEG.
 move ALTMP17 to ITAB11-SPART.
 move ALTMP18 to ITAB11-KUNNR.
 move ALTMP19 to ITAB11-BRAN1.
 move ALTMP20 to ITAB11-COUNTRY.
 move ALTMP21 to ITAB11-KDGRP.
 move ALTMP22 to ITAB11-LOEVM.
 move ALTMP23 to ITAB11-HKUNNR.
 move ALTMP24 to ITAB11-SORT1.
 move ALTMP25 to ITAB11-NAME1.
 move ALTMP26 to ITAB11-NAME2.
 move ALTMP27 to ITAB11-NAME3.
 move ALTMP28 to ITAB11-NAME4.
 append ITAB11.
ENDSELECT.
ENDIF.
IF ( ALOJF3 = 'N' ).
clear ADRC-SORT1.
clear ADRC-ADDRNUMBER.
clear ALTMP24.
 move ALTMP14 to ITAB11-BUKRS.
 move ALTMP15 to ITAB11-VKORG.
 move ALTMP16 to ITAB11-VTWEG.
 move ALTMP17 to ITAB11-SPART.
 move ALTMP18 to ITAB11-KUNNR.
 move ALTMP19 to ITAB11-BRAN1.
 move ALTMP20 to ITAB11-COUNTRY.
 move ALTMP21 to ITAB11-KDGRP.
 move ALTMP22 to ITAB11-LOEVM.
 move ALTMP23 to ITAB11-HKUNNR.
 move ALTMP24 to ITAB11-SORT1.
 move ALTMP25 to ITAB11-NAME1.
 move ALTMP26 to ITAB11-NAME2.
 move ALTMP27 to ITAB11-NAME3.
 move ALTMP28 to ITAB11-NAME4.
 append ITAB11.
ENDIF.
ENDIF.
ENDLOOP.
ENDFORM.

FORM FORM12.
SORT ITAB11 BY
  BUKRS
  VKORG
  VTWEG
  SPART
  KUNNR
  BRAN1
  COUNTRY
  KDGRP
  LOEVM
  HKUNNR
  SORT1
  NAME1
  NAME2
  NAME3
  NAME4.
delete adjacent duplicates from ITAB11 comparing all fields.

ITAB10[] = ITAB11[].
ENDFORM.

FORM FORM11.
data: outfile(128), ldfile(50).
ldfile = 'WDV_SalMon'.
concatenate out_dir ldfile into outfile
  separated by '/'.
data  dlmtlen type i value '1'.
data xdlmtlen type i value '1'.
data:
  ht(1) type c,
  xht(1) type x,
  conv type ref to cl_abap_conv_in_ce.
xht = '7F'.
conv = cl_abap_conv_in_ce=>create(
  encoding = '4110'
  input = xht
).
call method conv->read(
  exporting n    = xdlmtlen
  importing data = ht
            len = dlmtlen
).
data return_code type i.
 perform write_delimited_file
           tables   ITAB10
           using    outfile
                    append_flag
                    ht
                    dlmtlen
                    download
           changing return_code.

  case return_code.
    when 1.
      IF EXECMODE = 'D'.
        WRITE: /5 'No line selected'.
      ELSE.
        MESSAGE E098.
      ENDIF.
    when 2.
      IF EXECMODE = 'D'.
        WRITE: /5 'Open File Error -- ', 25 OUTFILE.
      ELSE.
        MESSAGE  E107 WITH OUTFILE.
      ENDIF.
    when 3.
      IF EXECMODE = 'D'.
        WRITE: /5 'Data exceed length limit (8192) '.
      ELSE.
        MESSAGE  E000 WITH
             'Data exceed length limit (8192) '.
      ENDIF.
    when 4.
      IF EXECMODE = 'D'.
        WRITE: /5 'Call function WS_DOWNLOAD error'.
      ELSE.
        MESSAGE  E000 WITH
             'Call function WS_DOWNLOAD error'.
      ENDIF.
  endcase.
ENDFORM.

FORM SUBSTRING USING SRC BEG LEN CHANGING RET.

DATA: VA1 TYPE I.
DATA: VA2 TYPE I.
DATA: VA3 TYPE I.

VA3 = STRLEN( SRC ).

IF  BEG = 0.   VA1 = 0.
ELSE.
  IF  BEG < 0.
    VA1 = VA3 + BEG.
    IF  VA1 < 0.   VA1 = 0.
    ENDIF.
  ELSE.          VA1 = BEG - 1.
  ENDIF.
ENDIF.

IF  LEN < 0.   VA2 = 0.
ELSE.          VA2 = VA3 - VA1.
ENDIF.

IF  VA2 > LEN. VA2 = LEN.
ENDIF.

IF  VA2 < 1.   MOVE ''           TO RET.
ELSE.          MOVE SRC+VA1(VA2) TO RET.
ENDIF.

ENDFORM.

form write_delimited_file
           tables   datatab
           using    file
                    append
                    delimit
                    dlength
                    dwnload
          changing rc.

  data: type1,
        appd(1),
        temp(32),
        time1(8),
        date1(10),
        output(8192),
        rcount type i,
        offset type i,
        tablen type i,
        maxlen type i value '8192'.

  data: begin of clientab occurs 0,
             output(8192),
          end of clientab.

  field-symbols: <f>.
  field-symbols <delim1>.
  data delim2(16).
  data l_filename type string.

  appd = append.
  if appd is not initial.
     appd = 'X'.
  endif.
  move file to l_filename.
  describe table datatab lines tablen.


  if dwnload = 'Y'.
     clear clientab. refresh clientab.
     rcount = 0.
  else.
     if appd = space.
         open dataset file for output in text mode ENCODING
UTF-8.
     else.
         open dataset file for appending in text mode ENCODING
UTF-8.
     endif.
     if sy-subrc <> 0.
         rc = 2. exit.
     endif.
  endif.

  loop at datatab.
    clear: tablen, offset, output.
    do.
      assign component sy-index of
         structure datatab to <f>.
      if sy-subrc <> 0. exit. endif.
      if sy-index > 1.
         assign delimit(dlength) TO <delim1> CASTING TYPE C.
         delim2 = <delim1>.
         write delim2(dlength) to output+offset(dlength).
         add dlength to offset.
      endif.

      describe field <f> type type1.

      if type1 = 'I' or type1 = 'N'.
          type1 = 'P'.
      endif.

      case type1.
        when 'D'.
          if <f> = '00000000'.
             <f> = ' '.
          else.
             move <f> to time1.
             assign time1 to <f>.
          endif.
        when 'F'.
          if <f> = '0.0'.
            temp = '0.0'.
          else.
             write <f> to temp exponent 0.
          endif.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
        when 'P'.
          if <f> < 0.
             write '-' to output+offset(1).
             add 1 to offset.
             <f> = <f> * ( -1 ).
          endif.
          move <f> to temp.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
      endcase.

      sy-fdpos = strlen( <f> ).

      tablen = offset + sy-fdpos.
      if tablen > maxlen.
         rc = 3. exit.
      endif.
      write <f> to output+offset(sy-fdpos).
      add sy-fdpos to offset.
    enddo.

    if dwnload = 'Y'.
       clientab-output = output.
       append clientab.
       rcount = rcount + 1.
       if rcount >= 50.
          SY-BATCH = SPACE.
          CALL FUNCTION 'GUI_DOWNLOAD'
            EXPORTING
              FILENAME = l_filename
              FILETYPE = 'ASC'
              CODEPAGE = '4110'
              APPEND   = appd
              WRITE_FIELD_SEPARATOR = 'X'
*            IMPORTING
*              FILELENGTH =
            TABLES
              DATA_TAB = clientab
            EXCEPTIONS
              OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
          clear clientab. refresh clientab.
          rcount = 0. appd = 'A'.
       endif.
    else.
       transfer output to file.
    endif.
  endloop.

  if dwnload = 'Y'.
       SY-BATCH = SPACE.
       CALL FUNCTION 'GUI_DOWNLOAD'
         EXPORTING
           FILENAME = l_filename
           FILETYPE = 'ASC'
              CODEPAGE = '4110'
           APPEND   = appd
           WRITE_FIELD_SEPARATOR = 'X'
*         IMPORTING
*           FILELENGTH =
         TABLES
           DATA_TAB = clientab
         EXCEPTIONS
           OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
  else.
       close dataset file.
  endif.
endform.
