*&---------------------------------------------------------------------*
*& Report  ZCWU_TEST13
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  zcwu_test13.
* *******Data Declaration****************

DATA:progname LIKE sy-repid,
dynnum LIKE sy-dynnr.

*PARAMETERS: FilePath TYPE LOCALFILE.

PARAMETERS:
  p_vtid  TYPE  yvtid,
  p_extid TYPE  yextid,
  p_fc  TYPE  yfcode,
  p_status  TYPE  ycallstate,
  p_fme TYPE  yfmextid,
  p_termv TYPE  string,
  p_termb TYPE  string,
  p_pland TYPE  yduration,
  p_besu  TYPE  yduration,
  p_plana TYPE  string,
  p_info1 TYPE  ycallinfo1,
  p_info2 TYPE  ycallinfo1.

DATA : it_tab TYPE STANDARD TABLE OF alsmex_tabline ,
wa_tab TYPE alsmex_tabline.

*ALV data declarations
DATA: gd_repid LIKE sy-repid. "Exists
TYPE-POOLS: slis.                                 "ALV Declarations
DATA: fieldcatalog TYPE slis_t_fieldcat_alv WITH HEADER LINE,
      gd_layout    TYPE slis_layout_alv.


******For GL Mappin************************

DATA: tmp_glmap_data TYPE STANDARD TABLE OF zcwu_city,
      t_glmap TYPE STANDARD TABLE OF zcwu_city,
     wa_glmap_data TYPE zcwu_city.

TYPES: BEGIN OF str_glmap_data,
          cityid TYPE zcwu_city-cityid,
          clevel TYPE  zcwu_city-clevel,
          description TYPE  zcwu_city-description,
          square TYPE  zcwu_city-square,
        END OF str_glmap_data.


DATA: t_glmap_data TYPE STANDARD TABLE OF str_glmap_data,
       wa_glmap TYPE str_glmap_data.


*******END Declaration****************

*FORM EXCEL_UPLOAD_LGL_ACC_DATA .
*  REFRESH IT_TAB.
*  CLEAR IT_TAB.
*
*
*  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
*    EXPORTING
*      filename                      = FILEPATH
*      i_begin_col                   = 1
*      i_begin_row                   = 3
*      i_end_col                     = 5
*      i_end_row                     = 9
*    tables
*      intern                        = IT_TAB
**   EXCEPTIONS
**     INCONSISTENT_PARAMETERS       = 1
**     UPLOAD_OLE                    = 2
**     OTHERS                        = 3
*            .
*  IF sy-subrc <> 0.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.
*
*  SORT IT_TAB BY ROW COL.
*  CLEAR wa_GLMAP.
*  CLEAR wa_tab.

*  IF IT_TAB[] IS NOT INITIAL.
*    LOOP AT IT_TAB into wa_tab .
*      CASE wa_tab-COL.
*        WHEN '0001'.
*          wa_GLMAP-L_GL_ACC = wa_tab-VALUE.
*        WHEN '0002'.
*          wa_GLMAP-DESC_LGL = wa_tab-VALUE.
*        WHEN '0003'.
*          wa_GLMAP-B_UNIT = wa_tab-VALUE.
*        WHEN '0004'.
*          wa_GLMAP-SAKNR = wa_tab-VALUE.
*        WHEN '0005'.
*          wa_GLMAP-DEL_IND = wa_tab-VALUE.
*      ENDCASE.
*
*      AT END OF ROW.
*        APPEND wa_GLMAP TO t_GLMAP_DATA.
*        CLEAR wa_GLMAP.
*      ENDAT.
*    ENDLOOP.
*  ELSE.
*    LEAVE LIST-PROCESSING.
*  ENDIF.
*
*  IF t_GLMAP_DATA IS NOT INITIAL.
*    LOOP AT t_GLMAP_DATA INTO wa_GLMAP.
*      CLEAR wa_GLMAP_DATA.
*      SELECT SINGLE * FROM Z82426_GL_MAP
*        INTO wa_GLMAP_DATA
*        WHERE L_GL_ACC = wa_GLMAP-L_GL_ACC.
*      IF SY-SUBRC = 0.
*        IF wa_GLMAP-DEL_IND = 'X'.
*          DELETE FROM Z82426_GL_MAP
*            WHERE L_GL_ACC = wa_GLMAP-L_GL_ACC.
*
*          wa_GLMAP-MSG = 'Record Deleted successfully'.
*        ELSE.
*          UPDATE Z82426_GL_MAP
*            SET DESC_LGL = wa_GLMAP-DESC_LGL
*            B_UNIT = wa_GLMAP-B_UNIT
*            SAKNR = wa_GLMAP-SAKNR
*            WHERE L_GL_ACC = wa_GLMAP-L_GL_ACC.
*
*          wa_GLMAP-MSG = 'Record Updated sucessfully'.
*        ENDIF.
*      ELSE.
*        IF wa_GLMAP-DEL_IND = 'X'.
*          wa_GLMAP-MSG = 'Record Not Found'.
*        ELSE.
*          wa_GLMAP_DATA-L_GL_ACC = wa_GLMAP-L_GL_ACC.
*          wa_GLMAP_DATA-DESC_LGL = wa_GLMAP-DESC_LGL.
*          wa_GLMAP_DATA-B_UNIT = wa_GLMAP-B_UNIT.
*          wa_GLMAP_DATA-SAKNR = wa_GLMAP-SAKNR.
*          INSERT INTO Z82426_GL_MAP VALUES wa_GLMAP_DATA.
*          wa_GLMAP-MSG = 'Record Inserted successfully'.
*        ENDIF.
*      ENDIF.
*      MODIFY t_GLMAP_DATA FROM wa_GLMAP.
*    ENDLOOP.
************Use this line only if you are using Dialog programming**********
*    LEAVE TO LIST-PROCESSING AND RETURN TO SCREEN 0.
*
*    SET PF-STATUS 'Z82426_PF_9010' excluding app_but_tab.
*    SET TITLEBAR 'Z82426_TITLE'.
*
************Ends************************************************************
*  REFRESH FIELDCATALOG.
*  CLEAR FIELDCATALOG.
*  FIELDCATALOG-FIELDNAME   = 'L_GL_ACC'.
*  FIELDCATALOG-SELTEXT_M   = 'Legacy GL Acc'.
*  FIELDCATALOG-COL_POS     = 1.
*  APPEND FIELDCATALOG.
*  CLEAR  FIELDCATALOG.
*
*  FIELDCATALOG-FIELDNAME   = 'DESC_LGL'.
*  FIELDCATALOG-SELTEXT_M   = 'Legacy GL Desc'.
*  FIELDCATALOG-COL_POS     = 2.
*  APPEND FIELDCATALOG.
*  CLEAR  FIELDCATALOG.
*
*  FIELDCATALOG-FIELDNAME   = 'B_UNIT'.
*  FIELDCATALOG-SELTEXT_M   = 'Business Unit'.
*  FIELDCATALOG-COL_POS     = 3.
*  APPEND FIELDCATALOG.
*  CLEAR  FIELDCATALOG.
*
*  FIELDCATALOG-FIELDNAME   = 'SAKNR'.
*  FIELDCATALOG-SELTEXT_M   = 'SAP GL Acc'.
*  FIELDCATALOG-COL_POS     = 4.
*  APPEND FIELDCATALOG.
*  CLEAR  FIELDCATALOG.
*
*  FIELDCATALOG-FIELDNAME   = 'DEL_IND'.
*  FIELDCATALOG-SELTEXT_M   = 'Deletion Indicator'.
*  FIELDCATALOG-COL_POS     = 5.
*  APPEND FIELDCATALOG.
*  CLEAR  FIELDCATALOG.
*
*  FIELDCATALOG-FIELDNAME   = 'MSG'.
*  FIELDCATALOG-SELTEXT_M   = 'Result Message'.
*  FIELDCATALOG-COL_POS     = 6.
*  APPEND FIELDCATALOG.
*  CLEAR  FIELDCATALOG.
*
*  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
*    EXPORTING
*      I_CALLBACK_PROGRAM        = SY-REPID
**    i_callback_top_of_page   = ' '
**    I_CALLBACK_PF_STATUS_SET  =  ' '
**    I_CALLBACK_USER_COMMAND   = ' '
**    i_grid_title             = ' '
*      IS_LAYOUT                 = GD_LAYOUT
*      IT_FIELDCAT               = FIELDCATALOG[]
*    TABLES
*      T_OUTTAB                  = t_GLMAP_DATA
*    EXCEPTIONS
*      PROGRAM_ERROR             = 1
*      OTHERS                    = 2.
*
*  IF SY-SUBRC NE  0.
*    WRITE:/ SY-SUBRC.
*  ENDIF.
*  ENDIF.
*ENDFORM.

*DATA: LV_MATNR TYPE MARA-MATNR.
*SELECT SINGLE MATNR
*  FROM MARA
*  INTO LV_MATNR
*  WHERE MATNR = '1'.
*
*IF SY-subrc = 0.
*  WRITE: 'SUCCESS'.
*ELSE.
*  WRITE: 'FAILED'.
*ENDIF.

DATA: e_extid TYPE  yextid,
e_result TYPE	yresult,
 e_infotext TYPE  ycallinfo1.
CALL FUNCTION 'ZCS_DYNAMIC_CHANGE'
  EXPORTING
    vtid         = p_vtid
    extid        = p_extid
    functioncode = p_fc
    status       = p_status
    fmextid      = p_fme
    termin_von   = p_termv
    termin_bis   = p_termb
    plandauer    = p_pland
    besuchsdauer = p_besu
    planankunft  = p_plana
    infotext1    = p_info1
    infotext2    = p_info2
  IMPORTING
    e_extid      = e_extid
    e_result     = e_result
    e_infotext   = e_infotext
  EXCEPTIONS
    retry        = 1
    no_retry     = 2
    OTHERS       = 3.
IF sy-subrc <> 0.
  WRITE 'Fail'.
ELSE.
  WRITE 'OK'.
ENDIF.

PERFORM frm_test.
*&---------------------------------------------------------------------*
*&      Form  FRM_TEST
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_TEST .
  DATA: lv_test TYPE  char1.
DATA: lt_test TYPE STANDARD TABLE OF zcwu_city.
DATA: p1 TYPE char1.
  lv_test = 'X'.

  IF  lv_test IS NOT INITIAL.
    LEAVE TO SCREEN 0.
  ENDIF.

  import p1 from MEMORY ID 'test'.
  import lt_test from  MEMORY ID 'idoc_test_errtab'.
ENDFORM.                    " FRM_TEST
