*&---------------------------------------------------------------------*
*&  Include           ZERO2MASTER_ANDA_04B_FUNC
*&---------------------------------------------------------------------*
FORM F_04B.
  DATA: lv_url  TYPE w3url.
*  CALL METHOD ycl_cwu_utility=>generate_qrcode_04b
*    EXPORTING
*      iv_tdname = 04b_p4
*      iv_qrtext = 04b_p1
*      iv_width  = 04b_p2
*      iv_height = 04b_p3
*    IMPORTING
*      ev_url    = lv_url.
  PERFORM generate_qrcode_04b USING   04b_p4
                                      04b_p1
                                      04b_p2
                                      04b_p3
                              CHANGING lv_url.

  WRITE: 'QR code', 04b_p4, '  is stored, you can check view SE78'.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  generate_qrcode_04B
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->PV_TDNAME  text
*      -->PV_QRTEXT  text
*      -->PV_WIDTH   text
*      -->PV_HEIGHT  text
*      <--PV_URL     text
*----------------------------------------------------------------------*
FORM generate_qrcode_04b USING  pv_tdname
                                pv_qrtext
                                pv_width
                                pv_height
                          CHANGING pv_url.
  TYPE-POOLS: sbdst.
  DATA :  bds_description  TYPE bapisignat-prop_value,
          lv_qr_generate   TYPE string,
          lv_url           TYPE string,
          lv_strlen        TYPE i,
          lv_docid         TYPE stxbitmaps-docid,
          lr_bds_object      TYPE REF TO cl_bds_document_set,
          lr_image_converter TYPE REF TO cl_igs_image_converter,
          ls_bds_signature  TYPE LINE OF sbdst_signature,
          lt_bds_signature   TYPE sbdst_signature,
          ls_bds_components TYPE LINE OF sbdst_components,
          lt_bds_components  TYPE sbdst_components,
          lt_bds_properties  TYPE sbdst_properties,
          ls_bds_properties TYPE LINE OF sbdst_properties,
          lv_title          TYPE bapisignat-prop_value,
          lv_content_length TYPE  i,
          http_client      TYPE REF TO if_http_client,
          content          TYPE xstring,
          lv_bytecount       TYPE i,
          lv_img_url        TYPE w3url,
          lv_img_subtype TYPE w3param-cont_type,
          mime             TYPE  w3mimetabtype.

  DATA: blob TYPE w3mimetabtype,
        blob_size TYPE w3param-cont_len,
        blob_type TYPE w3param-cont_type.

*   BDS handling
  CONSTANTS:
    c_bds_classname TYPE sbdst_classname VALUE 'DEVC_STXD_BITMAP',
    c_bds_classtype TYPE sbdst_classtype VALUE 'OT',          " others
    c_bds_mimetype  TYPE bds_mimetp      VALUE 'application/octet-stream',
    c_bds_original  TYPE sbdst_doc_var_tg VALUE 'OR',
    c_google_qr     TYPE string VALUE
        'http://chart.apis.google.com/chart?chs=200x200&cht=qr&chld=|1&chl=',
    c_qrapi_sina   TYPE string VALUE 'http://qrcoder.sinaapp.com?t=',
    c_qrapi_baid   TYPE string
      VALUE 'http://pan.baidu.com/share/qrcode?w=200&h=200&url='.

*   Graphic handling
  CONSTANTS:
        c_stdtext  TYPE thead-tdobject VALUE 'TEXT',
        c_graphics TYPE thead-tdobject VALUE 'GRAPHICS',
        c_bmon     TYPE thead-tdid     VALUE 'BMON',
        c_bcol     TYPE thead-tdid     VALUE 'BCOL'.


  DATA: lv_filename    TYPE rlgrap-filename,
        lv_name        TYPE stxbitmaps-tdname,
        lv_object      TYPE stxbitmaps-tdobject,
        lv_id          TYPE stxbitmaps-tdid,
        lv_btype       TYPE stxbitmaps-tdbtype,
        lv_resident    TYPE stxbitmaps-resident,
        lv_autoheight  TYPE stxbitmaps-autoheight,
        lv_bmcomp      TYPE stxbitmaps-bmcomp,
        lv_resolution  TYPE stxbitmaps-resolution,
        lv_extension   TYPE rlgrap-filename,
        lv_object_key TYPE sbdst_object_key,
        lv_tab        TYPE ddobjname,
        lv_bds_content     TYPE sbdst_content,
        ls_stxbitmaps TYPE stxbitmaps,
        lv_bds_bytecount   TYPE i,
        lv_width_tw        TYPE stxbitmaps-widthtw,
        lv_height_tw       TYPE stxbitmaps-heighttw,
        lv_width_pix       TYPE stxbitmaps-widthpix,
        lv_height_pix      TYPE stxbitmaps-heightpix.

  lv_qr_generate = c_google_qr.

  CONCATENATE lv_qr_generate
              pv_qrtext
              "'/chart.png'
              INTO lv_url.

  CALL METHOD cl_http_client=>create_by_url
    EXPORTING
      url                = lv_url
    IMPORTING
      client             = http_client
    EXCEPTIONS
      argument_not_found = 1
      plugin_not_active  = 2
      internal_error     = 3
      OTHERS             = 4.


  IF sy-subrc = 0.

    http_client->send( ).

    http_client->receive( ).

    content = http_client->response->get_data( ).

    http_client->close( ).

    lv_strlen = XSTRLEN( content ).

    CALL FUNCTION 'RSFO_XSTRING_TO_MIME'
      EXPORTING
        c_xstring = content
        i_length  = lv_strlen
      TABLES
        c_t_mime  = mime.

  ENDIF.

**********************************************************************
* Convert image
  CREATE OBJECT lr_image_converter .

  lr_image_converter->input = 'image/png'.
  lr_image_converter->output = 'image/bmp'.
  lr_image_converter->width = pv_width.
  lr_image_converter->height = pv_height.

  CALL METHOD lr_image_converter->set_image
    EXPORTING
      blob      = mime
      blob_size = lv_content_length.


  CALL METHOD lr_image_converter->execute
    EXCEPTIONS
      communication_error = 1
      internal_error      = 2
      external_error      = 3
      OTHERS              = 4.

  IF sy-subrc = 0.

    CALL METHOD lr_image_converter->get_image
      IMPORTING
        blob      = blob
        blob_size = blob_size
        blob_type = blob_type.

  ENDIF.
**********************************************************************
  DATA: lv_blob_type TYPE w3param-cont_type.
*  Generate image url
  "Creating the url of the image for the display in the container in the screen
  SPLIT blob_type AT '/' INTO lv_blob_type lv_img_subtype.

  CALL FUNCTION 'DP_CREATE_URL'
    EXPORTING
      type     = lv_blob_type
      subtype  = lv_img_subtype
      size     = blob_size
      lifetime = 'T'
    TABLES
      data     = blob
    CHANGING
      url      = lv_img_url
    EXCEPTIONS
      OTHERS   = 1.

  IF sy-subrc = 0.
    pv_url = lv_img_url.
  ENDIF.

**********************************************************************
*Store image in SAP mine reposity
  lv_name = pv_tdname.         "name of the qrcode will be in se78
  lv_object = 'GRAPHICS'.
  lv_id = 'BMAP'.
  lv_btype = 'BCOL'. "If u want black and white pass BMON
  lv_resident = ' '.
  lv_autoheight =  'X'.
  lv_bmcomp = 'X'.
  lv_extension = 'BMP'.
  lv_title = 'test'.

*Enqueue of graphics stored in BDS
  CALL FUNCTION 'ENQUEUE_ESSGRABDS'
       EXPORTING
*           MODE_STXBITMAPS = 'E'
            tdobject        = lv_object
            tdname          = lv_name
            tdid            = lv_id
            tdbtype         =  lv_btype
       EXCEPTIONS
            foreign_lock    = 1
            OTHERS          = 2.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

* Bitmap conversion
  CALL FUNCTION 'SAPSCRIPT_CONVERT_BITMAP_BDS'
    EXPORTING
      color                    = 'X'
      format                   = lv_extension
      resident                 = lv_resident
      bitmap_bytecount         = lv_bytecount
      compress_bitmap          = lv_bmcomp
    IMPORTING
      width_tw                 = lv_width_tw
      height_tw                = lv_height_tw
      width_pix                = lv_width_pix
      height_pix               = lv_height_pix
      dpi                      = lv_resolution
      bds_bytecount            = lv_bds_bytecount
    TABLES
      bitmap_file              = blob
      bitmap_file_bds          = lv_bds_content
    EXCEPTIONS
      format_not_supported     = 1
      no_bmp_file              = 2
      bmperr_invalid_format    = 3
      bmperr_no_colortable     = 4
      bmperr_unsup_compression = 5
      bmperr_corrupt_rle_data  = 6
      OTHERS                   = 7.

  IF sy-subrc <> 0.

    CALL FUNCTION 'DEQUEUE_ESSGRABDS'
      EXPORTING
        tdobject = lv_object
        tdname   = lv_name
        tdid     = lv_id
        tdbtype  = lv_btype.

    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    EXIT.
  ENDIF.

* Save bitmap in BDS
  CREATE OBJECT lr_bds_object.

  ls_bds_components-doc_count  = '1'.
  ls_bds_components-comp_count = '1'.
  ls_bds_components-mimetype   = c_bds_mimetype.
  ls_bds_components-comp_size  = lv_bds_bytecount.
  APPEND ls_bds_components TO lt_bds_components.

  IF lv_docid IS INITIAL.          " graphic is new

    ls_bds_signature-doc_count = '1'.
    APPEND ls_bds_signature TO lt_bds_signature.


    CALL METHOD lr_bds_object->create_with_table
      EXPORTING
        classname  = c_bds_classname
        classtype  = c_bds_classtype
        components = lt_bds_components
        content    = lv_bds_content
      CHANGING
        signature  = lt_bds_signature
        object_key = lv_object_key
      EXCEPTIONS
        OTHERS     = 1.

    IF sy-subrc <> 0.

      CALL FUNCTION 'DEQUEUE_ESSGRABDS'
        EXPORTING
          tdobject = lv_object
          tdname   = lv_name
          tdid     = lv_id
          tdbtype  = lv_btype.

      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      EXIT.
    ENDIF.

    READ TABLE lt_bds_signature INDEX 1 INTO ls_bds_signature
    TRANSPORTING doc_id.

    IF sy-subrc = 0.

      lv_docid = ls_bds_signature-doc_id.

    ELSE.

      CALL FUNCTION 'DEQUEUE_ESSGRABDS'
        EXPORTING
          tdobject = lv_object
          tdname   = lv_name
          tdid     = lv_id
          tdbtype  = lv_btype.

      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      EXIT.

    ENDIF.

  ELSE.                " graphic already exists

********* read object_key for faster access *****
    CLEAR lv_object_key.
    SELECT SINGLE * FROM stxbitmaps INTO ls_stxbitmaps
        WHERE tdobject = lv_object
          AND tdid     = lv_id
          AND tdname   = lv_name
          AND tdbtype  = lv_btype.

    SELECT SINGLE tabname FROM bds_locl INTO lv_tab
       WHERE classname = c_bds_classname
          AND classtype = c_bds_classtype.

    IF sy-subrc = 0.

      SELECT SINGLE object_key FROM (lv_tab) INTO lv_object_key
        WHERE loio_id = ls_stxbitmaps-docid+10(32)
          AND classname = c_bds_classname
            AND classtype = c_bds_classtype.

    ENDIF.

******** read object_key end ********************

    CALL METHOD lr_bds_object->update_with_table
      EXPORTING
        classname     = c_bds_classname
        classtype     = c_bds_classtype
        object_key    = lv_object_key
        doc_id        = lv_docid
        doc_ver_no    = '1'
        doc_var_id    = '1'
      CHANGING
        components    = lt_bds_components
        content       = lv_bds_content
      EXCEPTIONS
        nothing_found = 1
        OTHERS        = 2.

    IF sy-subrc = 1.   " inconsistency STXBITMAPS - BDS; repeat check in

      ls_bds_signature-doc_count = '1'.
      APPEND ls_bds_signature TO lt_bds_signature.

      CALL METHOD lr_bds_object->create_with_table
        EXPORTING
          classname  = c_bds_classname
          classtype  = c_bds_classtype
          components = lt_bds_components
          content    = lv_bds_content
        CHANGING
          signature  = lt_bds_signature
          object_key = lv_object_key
        EXCEPTIONS
          OTHERS     = 1.

      IF sy-subrc <> 0.
        CALL FUNCTION 'DEQUEUE_ESSGRABDS'
          EXPORTING
            tdobject = lv_object
            tdname   = lv_name
            tdid     = lv_id
            tdbtype  = lv_btype.

        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        EXIT.

      ENDIF.

      READ TABLE lt_bds_signature INDEX 1 INTO ls_bds_signature
      TRANSPORTING doc_id.
      IF sy-subrc = 0.
        lv_docid = ls_bds_signature-doc_id.
      ELSE.

        CALL FUNCTION 'DEQUEUE_ESSGRABDS'
          EXPORTING
            tdobject = lv_object
            tdname   = lv_name
            tdid     = lv_id
            tdbtype  = lv_btype.

        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        EXIT.

      ENDIF.

    ELSEIF sy-subrc = 2.

      CALL FUNCTION 'DEQUEUE_ESSGRABDS'
        EXPORTING
          tdobject = lv_object
          tdname   = lv_name
          tdid     = lv_id
          tdbtype  = lv_btype.

      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      EXIT.

    ENDIF.

  ENDIF.

* Save bitmap header in STXBITPMAPS
  ls_stxbitmaps-tdname     = pv_tdname.
  ls_stxbitmaps-tdobject   = lv_object.
  ls_stxbitmaps-tdid       = lv_id.
  ls_stxbitmaps-tdbtype    = lv_btype.
  ls_stxbitmaps-docid      = lv_docid.
  ls_stxbitmaps-widthpix   = lv_width_pix.
  ls_stxbitmaps-heightpix  = lv_height_pix.
  ls_stxbitmaps-widthtw    = lv_width_tw.
  ls_stxbitmaps-heighttw   = lv_height_tw.
  ls_stxbitmaps-resolution = lv_resolution.
  ls_stxbitmaps-resident   = lv_resident.
  ls_stxbitmaps-autoheight = lv_autoheight.
  ls_stxbitmaps-bmcomp     = lv_bmcomp.
  INSERT INTO stxbitmaps VALUES ls_stxbitmaps.

  IF sy-subrc <> 0.

    UPDATE stxbitmaps FROM ls_stxbitmaps.

  ENDIF.
* Set description in BDS attributes
  ls_bds_properties-prop_name  = 'DESCRIPTION'.
  ls_bds_properties-prop_value = lv_title.
  APPEND ls_bds_properties TO lt_bds_properties.

  CALL METHOD lr_bds_object->change_properties
    EXPORTING
      classname  = c_bds_classname
      classtype  = c_bds_classtype
      object_key = lv_object_key
      doc_id     = lv_docid
      doc_ver_no = '1'
      doc_var_id = '1'
    CHANGING
      properties = lt_bds_properties
    EXCEPTIONS
      OTHERS     = 1.

  CALL FUNCTION 'DEQUEUE_ESSGRABDS'
    EXPORTING
      tdobject = lv_object
      tdname   = lv_name
      tdid     = lv_id
      tdbtype  = lv_btype.

ENDFORM.                    "generate_qrcode_04B
