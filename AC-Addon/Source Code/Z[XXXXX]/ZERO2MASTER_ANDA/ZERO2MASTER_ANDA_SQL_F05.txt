*&---------------------------------------------------------------------*
*&  Include           ZSQLEXPLORERF05
*&---------------------------------------------------------------------*
************************************************************************
*^ Written By      : Tom Yang
*^ Date Written    : 2006/12/28
*^ Include Name    : ZSQLEXPLORERF05
*^ Used in Programs: <Programs referencing this include>
*^ Purpose         : To Create A Dynamic Program
*
*^ Other           :
************************************************************************

************************************************************************
*&      Form  Get_Data_In_Dynamic_Program
************************************************************************
FORM get_data_in_dynamic_prog USING  pt_sql      TYPE  ty_t_text
                                     pv_type     TYPE  string
                                     pt_element  TYPE  ty_t_element.

  DATA : lt_code      TYPE ty_t_code     ,
         lv_prog      TYPE c LENGTH 8  ,
         lv_msg       TYPE c LENGTH 120,
         lv_lin       TYPE c LENGTH 3  ,
         lv_wrd       TYPE c LENGTH 10 ,
         lv_off       TYPE c LENGTH 3  ,
         lv_msg_str   TYPE string      ,
         lr_stcurt    TYPE REF TO data .


  PERFORM  create_dynamic_program_code USING pt_sql
                                             pt_element
                                             pv_type
                                    CHANGING lt_code   .

  GENERATE SUBROUTINE POOL lt_code NAME lv_prog
                                MESSAGE lv_msg
                                   LINE lv_lin
                                   WORD lv_wrd
                                 OFFSET lv_off.

  IF sy-subrc <> 0.
    lv_msg_str  =  lv_msg .
    PERFORM append_error_message USING 4 lv_msg_str .
    PERFORM download_table_to_local TABLES lt_code[]
                                   USING     'c:\11.txt'.
  ELSE .

*& Get The Dynamic Structure
    PERFORM get_structure  IN PROGRAM (lv_prog) CHANGING lr_stcurt .
    ASSIGN lr_stcurt->* TO <table> .


*& Get Data With SQL
    PERFORM get_data       IN PROGRAM (lv_prog) USING  <table> .


  ENDIF .

ENDFORM .                    "Get_Data_In_Dynamic_Prog

************************************************************************
*&      Form  Create_Dynamic_Program_Code
************************************************************************
FORM  create_dynamic_program_code USING  pt_sql     TYPE  ty_t_text
                                         pt_element TYPE  ty_t_element
                                         pv_type    TYPE  string
                               CHANGING  pt_code    TYPE  ty_t_code.
  DATA : lt_temp  TYPE  ty_t_code .

  CLEAR : pt_code[] .


*& Create The Start Of The Dynamic Program
  PERFORM  define_program_01     USING pt_element
                              CHANGING lt_temp  .
  APPEND LINES OF lt_temp TO pt_code .



*& Create The First Function
  PERFORM  define_program_02  CHANGING lt_temp  .
  APPEND LINES OF lt_temp TO pt_code .



*& Create The Get Data Function
  PERFORM  define_program_03     USING pt_sql
                                       pv_type
                              CHANGING lt_temp  .
  APPEND LINES OF lt_temp TO pt_code .


ENDFORM .                    "Create_Dynamic_Program


************************************************************************
*&      Form  Define_Program_01
************************************************************************
FORM  define_program_01 USING  pt_element TYPE  ty_t_element
                     CHANGING  pt_code    TYPE  ty_t_code    .
  DATA : ls_element  TYPE  ty_s_element ,
         ls_line     TYPE  LINE OF ty_t_code,
         lv_text      TYPE  string .

  CLEAR : pt_code[] .

  APPEND 'PROGRAM SUBPOOL.                                      '
    TO pt_code .
  APPEND 'TYPES:Begin OF TY_S_DATA,                               '
    TO pt_code .

  LOOP AT pt_element INTO ls_element .
    IF ls_element-display CS c_element-count .
      CONCATENATE ls_element-alias ' ' 'TYPE' ' '
                   'i,'
             INTO ls_line
        SEPARATED BY space .
    ELSE .
      CONCATENATE ls_element-source '-' ls_element-name
            INTO lv_text .
      CONCATENATE ls_element-alias ' ' 'LIKE' ' '
                  lv_text ','
             INTO ls_line
        SEPARATED BY space .
    ENDIF .
    APPEND ls_line TO pt_code .
  ENDLOOP .

  APPEND '      End   OF TY_S_DATA.                               '
    TO pt_code .
  APPEND 'TYPES: TY_T_DATA  TYPE STANDARD TABLE OF TY_S_DATA.       '
    TO pt_code .

ENDFORM .                    "Define_Program_01

************************************************************************
*&      Form  Define_Program_02
************************************************************************
FORM  define_program_02  CHANGING  pt_code  TYPE  ty_t_code    .
  DATA : ls_element  TYPE  ty_s_element ,
         ls_line     TYPE  LINE OF ty_t_code .

  CLEAR : pt_code[] .

  APPEND 'FORM get_structure Changing p_struct TYPE REF TO data . '
    TO pt_code .
  APPEND '                                                        '
    TO pt_code .
  APPEND '  CREATE DATA p_struct TYPE TY_T_DATA.                    '
    TO pt_code .
  APPEND '                                                        '
    TO pt_code .
  APPEND 'ENDFORM .                                               '
    TO pt_code .


ENDFORM .                    "Define_Program_02

************************************************************************
*&      Form  Define_Program_03
************************************************************************
FORM  define_program_03     USING  pt_sql   TYPE  ty_t_text
                                   pv_type  TYPE  string
                         CHANGING  pt_code  TYPE  ty_t_code    .
  DATA : ls_text  TYPE ty_s_text    ,
         lv_first TYPE i  VALUE 0 .

  CLEAR : pt_code[] .


  APPEND 'FORM GET_DATA USING P_DATA     TYPE ANY TABLE . '
    TO pt_code .
  APPEND '  DATA : IT_DATA TYPE TY_T_DATA .                 '
    TO pt_code .
  APPEND '  DATA : WA_DATA TYPE TY_S_DATA .                 '
    TO pt_code .
  APPEND '                                                '
    TO pt_code .

  LOOP AT pt_sql INTO ls_text .
    IF ls_text = 'FROM' AND lv_first = 0 .
      IF pv_type =  c_element-single .
        ls_text = 'INTO       WA_DATA FROM' .
      ELSE .
        ls_text = 'INTO CORRESPONDING FIELDS OF TABLE IT_DATA FROM' .
      ENDIF .
      lv_first  =  1 .
    ENDIF .
    SHIFT ls_text-line BY 1 PLACES RIGHT .
    APPEND ls_text TO pt_code .
  ENDLOOP .

  APPEND '  .                                             '
    TO pt_code .
  IF pv_type =  c_element-single .
    APPEND '  APPEND WA_DATA TO IT_DATA.                    '
      TO pt_code .
  ENDIF .
  APPEND '  P_DATA = IT_DATA[].                           '
    TO pt_code .
  APPEND '                                                '
    TO pt_code .
  APPEND 'ENDFORM.                                        '
    TO pt_code .

ENDFORM .                    "Define_Program_03
