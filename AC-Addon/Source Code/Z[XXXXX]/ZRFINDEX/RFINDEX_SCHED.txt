*&---------------------------------------------------------------------*
*&  Include           RFINDEX_SCHED
*&---------------------------------------------------------------------*
data: g_s_log            type bal_s_log,"#EC NEEDED
      g_log_handle       type balloghndl,
      g_dummy            type c,"#EC NEEDED
      g_SCMA             type c,
      G_E_MSG            TYPE  BOOLEAN.
* priority clas
constants:
  probclass_very_high type bal_s_msg-probclass value '1',
  probclass_high      type bal_s_msg-probclass value '2',
  probclass_medium    type bal_s_msg-probclass value '3',
  probclass_low       type bal_s_msg-probclass value '4',
  probclass_none      type bal_s_msg-probclass value ' '.
* message types
constants:
  msgty_x             type sy-msgty            value 'X',
  msgty_a             type sy-msgty            value 'A',
  msgty_e             type sy-msgty            value 'E',
  msgty_w             type sy-msgty            value 'W',
  msgty_i             type sy-msgty            value 'I',
  msgty_s             type sy-msgty            value 'S',
  msgty_none          type sy-msgty            value ' '.

data: t_spono like schedman_spool .
data: gt_spono like t_spono occurs 0."#EC NEEDED

include rkasmawf.             "<     necessary for Workflow



form scm_init.

  perform schedman_check.
  if not g_scma is initial.
    perform LOG_ALMSG_init.
    perform schedman_start_stop using 'START'.
  endif.
endform.


form scm_close.
  if not g_SCMA is initial.
    perform log_almsg.
    perform schedman_start_stop using 'STOP'.
  endif.
endform.
*&---------------------------------------------------------------------*
*&      Form  scm_add_error
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*









form schedman_check.
  CALL FUNCTION 'FUNCTION_EXISTS'
    EXPORTING
      FUNCNAME                 = 'SCMA_JOB_STARTED_FROM_SCMA'
*     IMPORTING
*     GROUP                    =
*     INCLUDE                  =
*     NAMESPACE                =
*     STR_AREA                 =
    EXCEPTIONS
      FUNCTION_NOT_EXIST       = 1
      OTHERS                   = 2.

  IF SY-SUBRC = 0.
    call function 'SCMA_JOB_STARTED_FROM_SCMA'
      exporting
        BEFORE_INIT = 'X'
      importing
        E_SCMA = G_SCMA.
*       E_WF   =
*       E_JOB  =
  endif.

  G_SCMA = 'X'.
endform.

*&---------------------------------------------------------------------*
*&       FORM schedman_start_stop                                      *
*&---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  icommand                                                      *
*---------------------------------------------------------------------*
form schedman_start_stop using icommand type c.

  statics: ls_key_static like schedman_key.

  data: gs_key      like schedman_key."#EC NEEDED

  data: ld_worklist_flag(1)."#EC NEEDED
  data: ls_detail   like schedman_detail_user.
  data: lt_selkrit  like schedman_selkrit occurs 0 with header line.
  data: lt_param    like schedman_selkrit occurs 0 with header line.
  data: ls_witem    like scma_witem.
  data: LS_SCMA_EVENT LIKE SCMA_EVENT.
  data: ls_ext              like schedman_ext."#EC NEEDED
  data: ls_message  like schedman_message,
        ld_objects  like smmain-nr_of_objects,"#EC NEEDED
        ld_aplstat  like smmain-aplstat.

  data: LT_LOG_HANDLE TYPE  BAL_T_LOGH.

INCLUDE SCHEDMAN_EVENTS.                      " events for workflow

* muss in scmatasks
 ls_detail-repid       = 'SAPF120'.           "sy-repid.
 ls_detail-variante    = sy-slset.            "<<die variante
 ls_detail-activity    = '16'.
 ls_detail-application = 'FI-GL'.

* save some select-options
  data entry_no type i.
  entry_no = 1.
  loop at p_bukrs.
    CLEAR LT_SELKRIT.
    LT_SELKRIT-STRUCTURE = 'BKPF'.
    LT_SELKRIT-FIELD     = 'BUKRS'.
    LT_SELKRIT-ENTRY     =  entry_no.
    LT_SELKRIT-SIGN      = p_bukrs-sign.
    LT_SELKRIT-OPTIO     = p_bukrs-option.
    LT_SELKRIT-LOW       = p_bukrs-low.
    LT_SELKRIT-HIGH      = p_bukrs-high.
    APPEND LT_SELKRIT.
    add 1 to entry_no.
  endloop.

  loop at p_gjahr.
    CLEAR LT_SELKRIT.
    LT_SELKRIT-STRUCTURE = 'BKPF'.
    LT_SELKRIT-FIELD     = 'GJAHR'.
    LT_SELKRIT-ENTRY     =  entry_no.
    LT_SELKRIT-SIGN      = p_gjahr-sign.
    LT_SELKRIT-OPTIO     = p_gjahr-option.
    LT_SELKRIT-LOW       = p_gjahr-low.
    LT_SELKRIT-HIGH      = p_gjahr-high.
    APPEND LT_SELKRIT.
    add 1 to entry_no.
  endloop.

  loop at p_gjahr.
    CLEAR LT_SELKRIT.
    LT_SELKRIT-STRUCTURE = 'BKPF'.
    LT_SELKRIT-FIELD     = 'BELNR'.
    LT_SELKRIT-ENTRY     =  entry_no.
    LT_SELKRIT-SIGN      = p_belnr-sign.
    LT_SELKRIT-OPTIO     = p_belnr-option.
    LT_SELKRIT-LOW       = p_belnr-low.
    LT_SELKRIT-HIGH      = p_belnr-high.
    APPEND LT_SELKRIT.
    add 1 to entry_no.
  endloop.

  loop at p_hkont.
    CLEAR LT_SELKRIT.
    LT_SELKRIT-STRUCTURE = 'BSEG'.
    LT_SELKRIT-FIELD     = 'HKONT'.
    LT_SELKRIT-ENTRY     =  entry_no.
    LT_SELKRIT-SIGN      = p_hkont-sign.
    LT_SELKRIT-OPTIO     = p_hkont-option.
    LT_SELKRIT-LOW       = p_hkont-low.
    LT_SELKRIT-HIGH      = p_hkont-high.
    APPEND LT_SELKRIT.
    add 1 to entry_no.
  endloop.

  loop at p_kunnr.
    CLEAR LT_SELKRIT.
    LT_SELKRIT-STRUCTURE = 'BSEG'.
    LT_SELKRIT-FIELD     = 'KUNNR'.
    LT_SELKRIT-ENTRY     =  entry_no.
    LT_SELKRIT-SIGN      = p_kunnr-sign.
    LT_SELKRIT-OPTIO     = p_kunnr-option.
    LT_SELKRIT-LOW       = p_kunnr-low.
    LT_SELKRIT-HIGH      = p_kunnr-high.
    APPEND LT_SELKRIT.
    add 1 to entry_no.
  endloop.

  loop at p_lifnr.
    CLEAR LT_SELKRIT.
    LT_SELKRIT-STRUCTURE = 'BSEG'.
    LT_SELKRIT-FIELD     = 'LIFNR'.
    LT_SELKRIT-ENTRY     =  entry_no.
    LT_SELKRIT-SIGN      = p_lifnr-sign.
    LT_SELKRIT-OPTIO     = p_lifnr-option.
    LT_SELKRIT-LOW       = p_lifnr-low.
    LT_SELKRIT-HIGH      = p_lifnr-high.
    APPEND LT_SELKRIT.
    add 1 to entry_no.
  endloop.

  loop at p_matnr.
    CLEAR LT_SELKRIT.
    LT_SELKRIT-STRUCTURE = 'BSEG'.
    LT_SELKRIT-FIELD     = 'MATNR'.
    LT_SELKRIT-ENTRY     =  entry_no.
    LT_SELKRIT-SIGN      = p_matnr-sign.
    LT_SELKRIT-OPTIO     = p_matnr-option.
    LT_SELKRIT-LOW       = p_matnr-low.
    LT_SELKRIT-HIGH      = p_matnr-high.
    APPEND LT_SELKRIT.
    add 1 to entry_no.
  endloop.





  ls_witem-wf_witem = wf_witem.
  ls_witem-wf_wlist = wf_wlist.
*
  ls_scma_event-wf_witem = wf_witem.
  ls_scma_event-wf_okey  = wf_okey.
  IF G_E_MSG = space.
    ls_scma_event-wf_event = cs_wf_events-finished.
  ELSE.
    ls_scma_event-wf_event = cs_wf_events-error.
  ENDIF.

  if icommand = 'START'.
*   clear ls_witem.
*   ls_witem-wf_witem = wf_witem.
*   ls_witem-wf_wlist = wf_wlist.

    call function 'KPEP_MONI_INIT_RECORD'
         exporting
              ls_detail        = ls_detail
              LS_WITEM         = ls_witem
*             LS_APPL          =
*             LD_WORKLIST_FLAG = ' '
         importing
              ls_key           = ls_key_static
         tables
              lt_selkrit       = lt_selkrit
              lt_param         = lt_param.
  elseif icommand = 'STOP'.
    ld_aplstat  = '0'.
    if G_E_MSG = 'X'.
      ld_aplstat  = '4'.    "set status for schedman
      if sy-batch = 'X'.
         message S348(SY).
      endif.
    elseif G_E_MSG = 'W'.
      ld_aplstat  = '2'.    "set status for schedman
    endif. "error occurred
*   ls_scma_event-wf_event = 'FINISHED'.
*   ls_scma_event-wf_witem = wf_witem.
*   ls_scma_event-wf_okey  = wf_okey.
    ls_message-log_handle = g_log_handle.

* save messages
  APPEND G_LOG_HANDLE TO LT_LOG_HANDLE.
  CALL FUNCTION 'BAL_DB_SAVE'
       EXPORTING
*           I_IN_UPDATE_TASK =
            I_SAVE_ALL       = ' '
            I_T_LOG_HANDLE   = LT_LOG_HANDLE
       EXCEPTIONS
            LOG_NOT_FOUND    = 1
            SAVE_NOT_ALLOWED = 2
            NUMBERING_ERROR  = 3
            OTHERS           = 4.

  IF SY-SUBRC = 2.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ELSEIF SY-SUBRC > 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

    call function 'KPEP_MONI_CLOSE_RECORD'
         exporting
              ls_key        = ls_key_static
              LS_MESSAGE    = ls_message
*             LD_OBJECTS    =
*             LS_EXT        =
*             LS_RL         =
              LS_SCMA_EVENT = ls_scma_event
*        TABLES
*             lt_spool      = gt_spono
         changing
              ld_aplstat    = ld_aplstat
        exceptions
*            NO_ID_GIVEN    = 1
             others         = 0.


  endif.
  commit work.

endform.

*&--------------------------------------------------------------------*
*&      FORM LOG_ALMSG_init                                           *
*&--------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
form LOG_ALMSG_init.
  data: l_s_log type BAL_S_LOG.

  clear l_s_log.
  l_s_log-aldate = sy-datlo.
  l_s_log-altime = sy-timlo.
  l_s_log-aluser = sy-uname.
  l_s_log-alprog = 'ZZ_TEST_F070'.
  l_s_log-object = 'FIGL'.
  l_s_log-subobject = 'FIGL_F070'.

  l_s_log-aldate = sy-datlo.
  l_s_log-altime = sy-timlo.
  l_s_log-aluser = sy-uname.
  l_s_log-alprog = 'SAPF120'.
  l_s_log-object = 'FIGL'.
  l_s_log-subobject = 'FIGL_F120'.

  call function 'BAL_LOG_CREATE'
    EXPORTING
      i_s_log                 = l_s_log
    IMPORTING
      E_LOG_HANDLE            = g_log_handle
    EXCEPTIONS
      LOG_HEADER_INCONSISTENT = 1
      OTHERS                  = 2.
  if sy-subrc <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  endif.

endform.                    "LOG_ALMSG_init

*&---------------------------------------------------------------------*
*&       FORM log_almsg_var                                            *
*&---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM LOG_almsg_var  using I_msgid type any
                          I_msgty type any
                          I_msgno type any
                          I_msgv1 type any
                          I_msgv2 type any
                          I_msgv3 type any
                          I_msgv4 type any.

  check not g_scma is initial.


  sy-msgid = I_msgid.
  sy-msgty = I_msgty.
  sy-msgno = I_msgno.
  sy-msgv1 = I_msgv1.
  sy-msgv2 = I_msgv2.
  sy-msgv3 = I_msgv3.
  sy-msgv4 = I_msgv4.

  perform log_almsg.

  clear sy-msgid.
  clear sy-msgty.
  clear sy-msgno.
  clear sy-msgv1.
  clear sy-msgv2.
  clear sy-msgv3.
  clear sy-msgv4.

  if I_msgty = 'X'
  or I_msgty = 'A'
  or I_msgty = 'E'.
    perform schedman_start_stop using 'STOP'.
  endif.
endform.

*&---------------------------------------------------------------------*
*&       FORM log_almsg                                                *
*&---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM LOG_almsg.

  data:  i_probclass type BAL_S_msg-probclass,
         l_s_msg     type bal_s_msg.
* entry check
*  check sy-msgno ne 0.
  check sy-msgid ne space.
* define data of message for Application Log
  l_s_msg-msgty     = sy-msgty.
  l_s_msg-msgid     = sy-msgid.
  l_s_msg-msgno     = sy-msgno.
  l_s_msg-msgv1     = sy-msgv1.
  l_s_msg-msgv2     = sy-msgv2.
  l_s_msg-msgv3     = sy-msgv3.
  l_s_msg-msgv4     = sy-msgv4.

  case sy-msgty.
    when msgty_x.
      i_probclass = probclass_very_high.  G_E_MSG = 'X'.
    when msgty_a.
      i_probclass = probclass_very_high.  G_E_MSG = 'X'.
    when msgty_e.
      i_probclass = probclass_high.       G_E_MSG = 'X'.
    when msgty_w.
      i_probclass = probclass_medium.
      if G_E_MSG ne 'X'. G_E_MSG = 'W'. endif.
    when msgty_i.
      i_probclass = probclass_low.
      if G_E_MSG ne 'X' and G_E_MSG ne 'W'. G_E_MSG = 'S'. endif.
    when msgty_s.
      i_probclass = probclass_low.
      if G_E_MSG ne 'X' and G_E_MSG ne 'W'. G_E_MSG = 'S'. endif.
    when msgty_none.
      i_probclass = probclass_none.
      if G_E_MSG ne 'X' and G_E_MSG ne 'W'. G_E_MSG = 'S'. endif.
  endcase.
* bis hier tempor#r
  l_s_msg-probclass = i_probclass.
* add this message to log file

  CALL FUNCTION 'BAL_LOG_MSG_ADD'
    EXPORTING
      I_LOG_HANDLE              = g_log_handle
      I_S_MSG                   = l_s_msg
*   IMPORTING
*     E_S_MSG_HANDLE            =
*     E_MSG_WAS_LOGGED          =
*     E_MSG_WAS_DISPLAYED       =
    EXCEPTIONS
      LOG_NOT_FOUND             = 1
*     MSG_INCONSISTENT          = 2
*     LOG_IS_FULL               = 3
      OTHERS                    = 4.

  if sy-subrc <> 0.
    message id sy-msgid type sy-msgty number sy-msgno
            with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  endif.

endform.                    "LOG_almsg
