*&---------------------------------------------------------------------*
*& Report  ZSAPSLA                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*
*&                                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*

REPORT  ZSAPSLACP1.
data: begin of zdf_protocol occurs 500.
        include structure btcxpm.
data: end of zdf_protocol.

*{   REPLACE        MD0K900055                                        1
*\data: zzhost  like btcxp1-receiver.
data: zzhost  like RFCDISPLAY-RFCHOST.
data: zsystem(32).
data: c_tasktimes         TYPE SWNCGL_T_AGGTASKTIMES.
data: c_times            TYPE swnc_t_aggtimes.
DATA: tt_summt LIKE SWNCAGGTIMES OCCURS 70 WITH HEADER LINE.

DATA: SUMMR LIKE SWNCGLAGGTASKTIMES OCCURS 70 WITH HEADER LINE.
*}   REPLACE
data: zwplatform(10),zdf_status(1) type c,firstex(1) type c ,
zwtrans(30) type c.
data: xval(5) type n.
data: zwnum(10) type n.
data: zwsum(15) type n.
data: zwsum2(15) type n.
data: zwsum3(15) type n.
DATA: RSYSTEM2(8).
DATA: RINSTANCE LIKE   SAPWLSERV-NAME.
*{   DELETE         MD0K900107                                        3
*\DATA  tt_summt LIKE sapwltimes OCCURS 0 WITH HEADER LINE.
*}   DELETE
DATA: BEGIN OF ex OCCURS 100,
     trans(30) TYPE C,
     count like tt_summt-count,
     respti like tt_summt-respti.

DATA: END OF ex.

DATA: BEGIN OF FILESTATS OCCURS 1,
     LABEL(25) TYPE C,
     VALUE(10) TYPE C.
DATA: END OF FILESTATS.
DATA: BEGIN OF X OCCURS 1,
     DATE1(2) TYPE C,
     DATE2(2) TYPE C,
     DATE3(2) TYPE C,
     DATE4(2) TYPE C.
DATA: END OF X.
* ------------------------- Database tables -------------------------- *
TABLES: TFACS,                         "Factory calendar (display)
        SDBAH,                         "Header Table for dba Log
        USR02,                         "Logon data
        OSMON,                         "Operating system monitoring data
        USR01.        "User master record (runtime data)

* ------------------------- Internal tables -------------------------- *
DATA: SERVERS LIKE MSXXLIST OCCURS 50 WITH HEADER LINE.
DATA: XSUMZ(9) TYPE P DECIMALS 1.
DATA: zwvalue(9) TYPE P DECIMALS 1.

data:      zw_filein(35)    type c.
DATA: XSUMZz(9) TYPE P DECIMALS 1.
DATA: BEGIN OF FILEX   OCCURS 1,
        FILLER1(7) TYPE C VALUE 'Tot_tx ',
        FELD1(9) TYPE N,
*{   REPLACE        MD0K900107                                        4
*\        FILLER2v(20) TYPE C VALUE 'Dialop steps < 1 sec ',
        FILLER2v(21) TYPE C VALUE 'Dialop steps < 1 sec ',
*}   REPLACE
        FELD2v(9) TYPE N,
*{   REPLACE        MD0K900107                                        5
*\        FILLER3v(24) TYPE C VALUE 'Dialog steps > 1 + < 2 s ',
        FILLER3v(25) TYPE C VALUE 'Dialog steps > 1 + < 2 s ',
*}   REPLACE
        FELD3v(7) TYPE N,
*{   REPLACE        MD0K900107                                        6
*\        FILLER6v(20) TYPE C VALUE 'Dialog steps > 2 sec ',
        FILLER6v(21) TYPE C VALUE 'Dialog steps > 2 sec ',
*}   REPLACE
        FELD6v(7) TYPE N,
        FILLER2(15) TYPE C VALUE 'Tot_Subsec_tx ',
        FELD2(9) TYPE N,
        FILLER3(15) TYPE C VALUE 'Pct_Subsec_tx ',
        FELD3(7) TYPE p decimals 1,
        FILLER6(15) TYPE C VALUE 'Pct_GT2sec_tx ',
        FELD6(7) TYPE p decimals 1,
        FILLER6p(20) TYPE C VALUE 'Pct_betw1and2sec_tx ',
        FELD6p(7) TYPE p decimals 1,
        FILLER7(21) TYPE C VALUE 'Average_Response_Time',
        FELD7(7) TYPE N,
        FILLER5(18) TYPE C VALUE 'Tot_Working_Days ',
        FELD5(2) TYPE N,
        FILLER10(7) TYPE C VALUE 'Month ',
        FELD10(7) TYPE C,
        FILLER11(15) TYPE C VALUE 'Sapsystem ',
        FELD11(7) TYPE C,
        FILLER14(15) TYPE C VALUE 'Interrupt_day',
        FELD14(8) TYPE C,
        FILLER15(15) TYPE C VALUE 'Interrupt_Hour',
        FELD15(5) TYPE C,
        FILLER16(20) TYPE C VALUE 'Interrupt_Minutes',
        FELD16(7) TYPE C,
FILLER8(16) TYPE C VALUE 'Tot_Named_Users ',
FELD8(7) TYPE N,
FILLER13(17) TYPE C VALUE 'Total KB Database',
FELD17(10) TYPE N,
FILLER17(16) TYPE C VALUE 'Used KB Database',
FELD18(10) TYPE N,
FILLER18(16) TYPE C VALUE 'Free KB Database',
FELD13(10) TYPE N,
FILLER19(16) TYPE C VALUE 'Excl.Transaction',
FELD19(30) TYPE c.


DATA: END OF FILEX.
DATA: HELP_PACK TYPE P.
* Internal table with same structure as SAPWLTSKTI
*{   DELETE         MD0K900107                                        2
*\DATA: SUMMR LIKE SAPWLTSKTI OCCURS 70 WITH HEADER LINE.
*}   DELETE

DATA: BEGIN OF TAB_DAT OCCURS 0,
       TAB_DATE LIKE SY-DATUM.
DATA  END OF TAB_DAT.

DATA: TT_USERS_OF_ENTRY_ID LIKE SAPWLUENTI OCCURS 0
                           WITH HEADER LINE.

* ------------------- Workfields ------------------------------------- *
DATA: RPERIOD(8) VALUE 'DAY',
      XTIME(7) TYPE N,
      FILEY(250) TYPE C.
DATA: XSUM(9) TYPE P,
      XSUM2(9) TYPE P,
      XSUM2X(9) TYPE P,
      XSUM3(9) TYPE P decimals 1,
      XSUM3Z(9) TYPE P,
      XSUM4(9) TYPE P,
      XSUM8(9) TYPE P,
      XSUMX(9) TYPE P,
      XSUM3X(9) TYPE P,
      XSUM4X(9) TYPE P,
      XSUM3p(9) TYPE P,
      XSUM4p(9) TYPE P,
      XSUM2p(9) TYPE P,
      XSUMp(9) TYPE P,
      XSUM5X(9) TYPE P decimals 1,
      XSUM5p(9) TYPE P decimals 1,

      SUM1(9) TYPE P,
      SUM2(9) TYPE P,
      SUM3(9) TYPE P,
      SUM6(9) TYPE P,
      XYZTIME(11).
DATA: XSUM5(3) type p decimals 1 VALUE 0.
DATA: DATE LIKE SY-DATUM,
      DATE2 LIKE SY-DATUM,
      MONAT2(2) TYPE N,
      RSYSTEM(8) TYPE C,
      USERNAME LIKE USR02-BNAME,
      USERNAME2 LIKE USR02-BNAME.        " insert IVW
************************************************************************
*             Data for additionnal backup informations

* ---------------- Internal tables ----------------------------------- *
DATA: BEGIN OF L_BACKUPS,
      FUNCT        LIKE SDBAH-FUNCT,
      STARTDATE    TYPE D,
      STARTTIME    TYPE T,
      ENDDATE      TYPE D,
      ENDTIME      TYPE T,
      RC           LIKE SDBAH-RC.
DATA: END OF L_BACKUPS.
DATA: I_BACKUPS LIKE L_BACKUPS OCCURS 10.
DATA: L_BACKUPS1 LIKE L_BACKUPS.

DATA: BEGIN OF L_MONTH,
      DAY(1)        TYPE N,
      DATE          TYPE D,
      WORKDAY(1)    TYPE C.
DATA: END OF L_MONTH.
DATA: I_MONTH LIKE L_MONTH OCCURS 10.

DATA: BEGIN OF L_CHECK,
      DAY(1)        TYPE N,
      DATE          TYPE D,
      SUCCESS(1)    TYPE C,
      ONLINE(1)     TYPE C,
      ARCHIVE(1)    TYPE C,
      OFFLINE(1)    TYPE C.
DATA: END OF L_CHECK.
DATA: I_CHECK LIKE L_CHECK OCCURS 10.

* -------------------- Work variables -------------------------------- *
DATA: W_MONTH(2)  TYPE N,
      W_DAYMONTH(2)  TYPE N,
      W_PERIOD(6) TYPE N,
      W_DATE      TYPE D,
      W_TIME(8)   TYPE C,           "Write the time in format xx:xx:xx
      W_TIMECOUNT  LIKE SY-UZEIT,   "Used to fill the time in I_ALL_RC
      W_DATUM(10)  TYPE C,
      W_LASTDAY   TYPE D,
      W_LENGTH    TYPE I,
      W_LENGTHE   TYPE I,
      W_WEEKDAY(1)    TYPE C,
      W_DAY(2)        TYPE N,
      DATUM_X       LIKE W_DATE,                  " insert IVW
      SYSTEMID     LIKE SY-SYSID,            " insert IVW
      C_DATASET_ID LIKE RLGRAP-FILENAME.        " insert IVW

DATA: W_INDEX        TYPE I           VALUE 1,
      W_SYDATUM      LIKE SY-DATUM,
      W_YESTERDAY    LIKE L_MONTH-DATE,
      W_SATURDAY     TYPE I,           "Counter for number of saturday
      W_SUNDAY       TYPE I,           "Counter for number of sunday
      W_END          LIKE L_BACKUPS-ENDTIME,
      W_WORKDAY(31)  TYPE C.

CONSTANTS C_DATASET LIKE RLGRAP-FILENAME
          VALUE '/var/SCC/global/SAP/log/SLA/sapinfo.out'.

* -------------------- Constants ------------------------------------- *
CONSTANTS: C_EVENING    LIKE L_BACKUPS-ENDTIME   VALUE '190000',
           C_NOON       LIKE L_BACKUPS-ENDTIME   VALUE '120000',
           C_MORNING    LIKE L_BACKUPS-ENDTIME   VALUE '070000',
           C_LINE(2)    TYPE C                   VALUE 'nf',
           AANTAL_DAGEN TYPE I                   VALUE -1.   "insert IVW
* -------------------- Ranges ---------------------------------------- *
RANGES: R_FUNCTION FOR SDBAH-FUNCT OCCURS 10.

************************************************************************
*      Additionnal data to calculate the number of interrupts          *

* ------------------------- Workfields ------------------------------- *
DATA: W_FILEIN(35)    TYPE C,   "Use to put the content of UNIX file
      W_POSDATE       LIKE SY-FDPOS,   "Find the position of the date
      W_POSDAY        LIKE SY-FDPOS,   "Find the position of the day
      W_POSTIME       LIKE SY-FDPOS,   "Find the position of the time
      W_POSRC         LIKE SY-FDPOS,   "Find the position of the rc
      W_HOUR(4)       TYPE N,
      W_INTERRUPT(1)  TYPE C,
      W_DATECHECK(6)  TYPE C.   "To check the month from Unix file

DATA: W_HAPINTERRUPT  TYPE I,          "Number of interrupts in HAP
      W_LAPINTERRUPT  TYPE I,          "Number of interrupts in LAP
      W_HAPINDEX      TYPE I,
      W_LAPINDEX      TYPE I,
      W_HAPHOURS      TYPE P DECIMALS 1,  "Availability hours during HAP
      W_LAPHOURS      TYPE P DECIMALS 1.  "Availability hours during LAP

* ---------------- Internal tables ----------------------------------- *
DATA: BEGIN OF L_ALL_RC,
      DATE      LIKE SY-DATUM,
      TIME      LIKE SY-UZEIT,
      RC(1)     TYPE C.
DATA: END OF L_ALL_RC.
DATA: I_ALL_RC LIKE L_ALL_RC OCCURS 0.
DATA: BEGIN OF L_INTERRUPT,
      DATE      LIKE SY-DATUM,
      TIME      LIKE SY-UZEIT,
      RC(1)     TYPE C.
DATA: END OF L_INTERRUPT.
DATA: I_INTERRUPT LIKE L_INTERRUPT OCCURS 0.
DATA: L_HAP LIKE L_INTERRUPT,          "Interrupts in High Avail.
      I_HAP LIKE L_INTERRUPT OCCURS 0. "Interrupts in High Avail.
DATA: L_LAP LIKE L_INTERRUPT,          "Interrupts in Low Avail.
      I_LAP LIKE L_INTERRUPT OCCURS 0. "Interrupts in Low Avail.

DATA: BEGIN OF L_AVAIL,       "Summary of the interrupts on a system
      BEGINDATE     LIKE SY-DATUM,
      BEGINTIME     LIKE SY-UZEIT,
      ENDDATE       LIKE SY-DATUM,
      ENDTIME       LIKE SY-UZEIT,
      PERIOD(3)     TYPE C.
DATA: END OF L_AVAIL.
DATA: I_AVAIL LIKE L_AVAIL OCCURS 10.

************************************************************************

* ------------------ Initialization -------------------------------- *
INITIALIZATION.
*{   INSERT         MD0K900107                                        1
* sy-datum = sy-datum + 31.
*}   INSERT

  W_SYDATUM = SY-DATUM + 1.
  XSUM3 = 0.
  XSUM4 = 0.

START-OF-SELECTION.

* 1. Find the values of w_month = previous month
*                   and w_period = previous month and year
  PERFORM FIND_PREVIOUS_MONTH.

* 2. File sapstats.SID.Host.YYYY.MM  to put the results of the program
  DATA: W_CALENDAR(31),        "Days of the month (like 1110011111001)
        FILELENGTH(5) TYPE P,  "Length of the name of the file
        FILE(80) TYPE C VALUE ' '.

* concatenate '/usr/sap/trans/zsla/sapstats'
  CONCATENATE '/var/SCC/global/zsla/sapstats'
              SY-SYSID SY-HOST W_PERIOD(4) INTO FILE SEPARATED BY
 '.'.
  FILELENGTH = STRLEN( FILE ).
  MOVE '.'     TO FILE+FILELENGTH(1).
  FILELENGTH = FILELENGTH + 1.
  MOVE W_MONTH   TO FILE+FILELENGTH(2).
  FILELENGTH = FILELENGTH + 2.
  move '.txt' to FILE+FILELENGTH(4).
  move 0 to xsumzz.
  move 0 to xsum3z.
  move 0 to xsumz.

* concatenate c_dataset                              " insert ivw
  SYSTEMID = SY-SYSID.                               " insert ivw
  CONCATENATE C_DATASET SYSTEMID INTO C_DATASET_ID
    SEPARATED BY '.'.                                " insert ivw

* 3. Select the calendar from table TFACS for previous month.
  SELECT SINGLE * FROM TFACS WHERE IDENT = 'BE' AND JAHR = W_PERIOD(4).
  CASE W_MONTH.
    WHEN 01.
      MOVE 'Jan' TO FILEX-FELD10.
      MOVE TFACS-MON01 TO W_CALENDAR.
    WHEN 02.
      MOVE 'Feb' TO FILEX-FELD10.
      MOVE TFACS-MON02 TO W_CALENDAR.
    WHEN 03.
      MOVE 'Mar' TO FILEX-FELD10.
      MOVE TFACS-MON03 TO W_CALENDAR.
    WHEN 04.
      MOVE 'Apr' TO FILEX-FELD10.
      MOVE TFACS-MON04 TO W_CALENDAR.
    WHEN 05.
      MOVE 'May' TO FILEX-FELD10.
      MOVE TFACS-MON05 TO W_CALENDAR.
    WHEN 06.
      MOVE 'Jun' TO FILEX-FELD10.
      MOVE TFACS-MON06 TO W_CALENDAR.
    WHEN 07.
      MOVE 'Jul' TO FILEX-FELD10.
      MOVE TFACS-MON07 TO W_CALENDAR.
    WHEN 08.
      MOVE 'Aug' TO FILEX-FELD10.
      MOVE TFACS-MON08 TO W_CALENDAR.
    WHEN 09.
      MOVE 'Sep' TO FILEX-FELD10.
      MOVE TFACS-MON09 TO W_CALENDAR.
    WHEN 10.
      MOVE 'Oct' TO FILEX-FELD10.
      MOVE TFACS-MON10 TO W_CALENDAR.
    WHEN 11.
      MOVE 'Nov' TO FILEX-FELD10.
      MOVE TFACS-MON11 TO W_CALENDAR.
    WHEN 12.
      MOVE 'Dec' TO FILEX-FELD10.
      MOVE TFACS-MON12 TO W_CALENDAR.
  ENDCASE.

  OPEN DATASET FILE FOR OUTPUT IN TEXT MODE encoding Default.
  WRITE:/ 'Month ' , W_MONTH.
  WRITE:/ TFACS-JAHR,TFACS-IDENT,
              W_CALENDAR, '(1 = working days, 0 = none working days)'.

  W_DAYMONTH = STRLEN( W_CALENDAR ).

  FORMAT INTENSIFIED.
  ULINE. ULINE.
  DATA: ZAEZAE(2) TYPE N VALUE 0.
  DATA: ZAEZAE2(2) TYPE N VALUE 0.
  DATA: ZAEZAE3(2) TYPE N VALUE 0.
  DATA: ZAEZAE4(6) TYPE N VALUE 0.
  DATA: ZAEZAEat(6) TYPE N VALUE 0.
  DATA: ZAEZAEbe(6) TYPE N VALUE 0.
  DATA: ZAEZAEch(6) TYPE N VALUE 0.
  DATA: ZAEZAEde(6) TYPE N VALUE 0.
  DATA: ZAEZAEes(6) TYPE N VALUE 0.
  DATA: ZAEZAEfr(6) TYPE N VALUE 0.
  DATA: ZAEZAEgb(6) TYPE N VALUE 0.
  DATA: ZAEZAEit(6) TYPE N VALUE 0.
  DATA: ZAEZAEnl(6) TYPE N VALUE 0.
  DATA: ZAEZAEpt(6) TYPE N VALUE 0.
  DATA: ZAEZAE6(6) TYPE N VALUE 0.
  DATA: ZAEZAE9(6) TYPE N VALUE 0.
  DATA: W_UNUSEDACC(6) TYPE N VALUE 0.

  W_LENGTH = STRLEN( W_CALENDAR ) - 1.
  W_WORKDAY = W_CALENDAR.
  W_LENGTHE = STRLEN( W_CALENDAR ).

* This loop will execute the FORM BERECHNUNG for all the weekdays
  WHILE W_LENGTHE > 0.
    W_DAY = W_DAY + 1.
    IF W_CALENDAR(1) = '1'.
      ZAEZAE = ZAEZAE + 1.
      MOVE W_PERIOD TO W_DATE(6).
      MOVE W_DAY TO W_DATE+6(2).
      PERFORM BERECHNUNG.
      PERFORM BERECHNUNG2.
      perform berechnung3.
      WRITE W_DATE.
    ENDIF.
    SHIFT W_CALENDAR.
    W_LENGTHE = STRLEN( W_CALENDAR ).
  ENDWHILE.


  WRITE:/ SY-ULINE(132).
  WRITE:/ 'Number of working days in the month', ZAEZAE.
  WRITE:/ 'Number of days in the month', W_DAYMONTH.
  MOVE ZAEZAE TO FILEX-FELD5.
  WRITE:/ 'Total dialogs per month ', XSUM3.
  MOVE XSUM3 TO FILEX-FELD1.
  MOVE XSUM3 TO XSUM3Z.
  WRITE:/ 'Total dialogs per month < 1 sec ', XSUM4.
  MOVE XSUM4 TO FILEX-FELD2.
*  format color col_negative.
* exclude selected transactions from Percentage statistics:
*move 0 to sum2.
*move 0 to sum3.
*move 0 to sum6.
  loop at ex.
*    sum1 = sum1 + ex-count.
*    write:/ zwvalue, ex-respti, ex-count.
*    zwvalue = ex-respti / ex-count.
*    zwvalue = zwvalue / 1000.
*    if zwvalue < 1.
      sum2 = sum2 + ex-count.
*    endif.
*    if zwvalue > 2.
*      write:/ sum3 , ex-count , 'summe sum3'.
*      sum3 = sum3 + ex-count.
*    endif.
*    if zwvalue > 1 and zwvalue < 2.
*      sum6 = sum6 + ex-count.
*    endif.
  endloop.
  write:/ sum2, 'sum2'.
*  xsum3 = xsum3 - sum1.
*  xsum3x = xsum3x - sum1.
*  xsum4 = xsum4 - sum2.
*  xsum4x = xsum4x - sum3.
* end of exclude selected transactions
  xsum4 = xsum4 + sum2.
  write:/ xsum4, 'xsum4'.
*  write:/ xsum4x , 'xsum4x 1.'.
*  xsum4x = xsum4x - sum3.
*  write:/ xsum4x , 'xsum4x 2.', sum3 , 'sum3'.

*    xsum4p = xsum4p - sum6.
  write:/ xsum4 , xsum4x , xsum4p.
  xsum3 = xsum4 + xsum4x + xsum4p.
  xsum3x = xsum3.
  xsum3p = xsum3.

  XSUM5 = XSUM4 * 100 / XSUM3.
  write:/ '1.'  , xsum4 , '* 100' , '/' , xsum3.
  XSUM5X = XSUM4X * 100 / XSUM3X.
  write:/ '2.'  , xsum4x , '* 100' , '/' , xsum3x.
  XSUM5p = XSUM4p * 100 / XSUM3p.
  write:/ '3.'  , xsum4p , '* 100' , '/' , xsum3p.
  move xsum4 to filex-feld2v.
  move xsum4x to filex-feld6v.
  move xsum4p to filex-feld3v.
  XSUM3 = XSUM3 / ZAEZAE.
  WRITE:/ 'Total average steps per month', XSUM3.
  MOVE XSUM3 TO FILEX-FELD1.
  FORMAT COLOR OFF.
*  format color col_negative.
  WRITE:/ 'PCT sub-second dialog steps', XSUM5.

  MOVE XSUM5 TO FILEX-FELD3.
  FORMAT COLOR OFF.
*  format color col_negative.
  WRITE:/ 'PCT > 2 second dialog steps', XSUM5X.

  MOVE XSUM5X TO FILEX-FELD6.
  FORMAT COLOR OFF.
  WRITE:/ 'PCT > 1 sec and < 2 second dialog steps', XSUM5p.

  MOVE XSUM5p TO FILEX-FELD6p.
  FORMAT COLOR OFF.

  WRITE:/ 'Overall average response time (dialog only)           :'.
* write:/ xsumz , 'XSUMZ'.
*  write:/ xsum3z , 'xsum3z'.
*  write:/ xsumzz, 'xsumzz'.
  xtime = ( xsumz - xsumzz ) / xsum3Z.
  MOVE XTIME TO FILEX-FELD7.
  WRITE:  XTIME NO-ZERO  , 'MS'.
  MOVE SY-SYSID TO FILEX-FELD11.
  MOVE FILEX-FILLER11 TO FILESTATS-LABEL.
  MOVE FILEX-FELD11 TO FILESTATS-VALUE.
  TRANSFER FILESTATS TO FILE.
  MOVE FILEX-FILLER2v TO FILESTATS-LABEL.
  MOVE FILEX-FELD2v TO FILESTATS-VALUE.
  TRANSFER FILESTATS TO FILE.
MOVE FILEX-FILLER3v TO FILESTATS-LABEL.
  MOVE FILEX-FELD3v TO FILESTATS-VALUE.
  TRANSFER FILESTATS TO FILE.
MOVE FILEX-FILLER6v TO FILESTATS-LABEL.
  MOVE FILEX-FELD6v TO FILESTATS-VALUE.
  TRANSFER FILESTATS TO FILE.
  MOVE FILEX-FILLER3 TO FILESTATS-LABEL.
  MOVE FILEX-FELD3 TO FILESTATS-VALUE.
  TRANSFER FILESTATS TO FILE.
  MOVE FILEX-FILLER6 TO FILESTATS-LABEL.
  MOVE FILEX-FELD6 TO FILESTATS-VALUE.
  TRANSFER FILESTATS TO FILE.
  MOVE FILEX-FILLER6p TO FILESTATS-LABEL.
  MOVE FILEX-FELD6p TO FILESTATS-VALUE.
  TRANSFER FILESTATS TO FILE.

  MOVE FILEX-FILLER7 TO FILESTATS-LABEL.
  MOVE FILEX-FELD7 TO FILESTATS-VALUE.
  TRANSFER FILESTATS TO FILE.
*  PERFORM USERS.
*  MOVE FILEX-FILLER8 TO FILESTATS-LABEL.
*  MOVE FILEX-FELD8 TO FILESTATS-VALUE.
*  TRANSFER FILESTATS TO FILE.
  WRITE: / FILEX-FELD10.
  MOVE W_PERIOD(4) TO FILEX-FELD10+3(4).
  MOVE FILEX-FILLER10 TO FILESTATS-LABEL.
  MOVE FILEX-FELD10 TO FILESTATS-VALUE.
  TRANSFER FILESTATS TO FILE.
  perform calcdb.
*  EXEC SQL.
*    SELECT SUM(BYTES)/1024 FROM DBA_DATA_FILES INTO :HELP_PACK
*
*  ENDEXEC.
*  WRITE:/.
*  WRITE:/ 'Total size of Database in kb :        ' , HELP_PACK.
  MOVE zwsum TO FILEX-FELD13.
  MOVE FILEX-FILLER13 TO FILESTATS-LABEL.
  MOVE FILEX-FELD13 TO FILESTATS-VALUE.
  TRANSFER FILESTATS TO FILE.
  MOVE zwsum3 TO FILEX-FELD17.
  MOVE FILEX-FILLER17 TO FILESTATS-LABEL.
  MOVE FILEX-FELD17 TO FILESTATS-VALUE.
  TRANSFER FILESTATS TO FILE.
  MOVE zwsum2 TO FILEX-FELD18.
  MOVE FILEX-FILLER18 TO FILESTATS-LABEL.
  MOVE FILEX-FELD18 TO FILESTATS-VALUE.
  TRANSFER FILESTATS TO FILE.
  move '    ' to filex-feld19.
 move '                                                               '
 to filestats.
  write:/.
  write:/ 'List of transactions excluded'.
  sort ex by trans.
  loop at ex.
*   if ex-trans(1) = 'Z'.
    if firstex = 'A'.
      move 'X' to firstex.
      move ex-trans to zwtrans.
    endif.
    if ex-trans ne zwtrans.
      write:/ ex-trans.
      move ex-trans to filex-feld19.
      move filex-filler19 to filestats-label.
      MOVE FILEX-FELD19 TO FILESTATS-VALUE.
      TRANSFER FILESTATS TO FILE.
    endif.
    move ex-trans to zwtrans.
*   endif.
  endloop.

  perform check_interupts.
  close dataset c_dataset_id.
  perform check_interupts2.
  close dataset file.
  close dataset c_dataset_id.

*       FORM BERECHNUNG                                               *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM BERECHNUNG.
  MOVE '*             '          TO RINSTANCE.
  RSYSTEM = 'TOTAL'.
*  date = sy-datum.
  DATE = W_DATE.
  RPERIOD = 'DAY'.
  CLEAR SUMMR.
  FREE SUMMR.
  MOVE '*             '          TO RINSTANCE.


*{   REPLACE        MD0K900107                                        1
*\  CALL FUNCTION 'SAPWL_WORKLOAD_GET_STATISTIC'
*\    EXPORTING
*\      PERIODTYPE         = RPERIOD(1)
*\      HOSTID             = 'TOTAL'
*\      STARTDATE          = DATE
*\    TABLES
*\      TASKTYPE_STATISTIC = SUMMR
*\      time_statistic     = tt_summt
*\    EXCEPTIONS
*\      UNKNOWN_PERIODTYPE = 1
*\      NO_DATA_FOUND      = 2
*\      OTHERS             = 3.
  move sy-sysid to zsystem.
    CALL FUNCTION 'SWNC_GET_WORKLOAD_STATISTIC'
                                 EXPORTING
*                                  SELECT_SYSTEM                = ' '
                                  SYSTEMID                     = zsystem
                                  INSTANCE                     = 'TOTAL'
                                   PERIODTYPE                   = 'D'
                                   PERIODSTRT                   = DATE
*                                  SUMMARY_ONLY                 = 'X'
                                IMPORTING
*                                  TASKTYPE                     = SUMMR
                               TASKTIMES                  =  C_tasktimes
                               TIMES = c_times


         EXCEPTIONS
                                  UNKNOWN_PERIODTYPE           = 1
                                  NO_DATA_FOUND                = 2
                                  UNKNOWN_ERROR                = 3
                                  OTHERS                       = 4.
                                         .
                               IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
                               ENDIF.


loop at c_tasktimes into summr.
             if summr-tasktype = '01'.
             append summr.
             endif.
             endloop.
             loop at c_times into tt_summt.
*             write:/ tt_summt-tasktype.
             if tt_summt-tasktype = '01'.
             append tt_summt.
             endif.
             endloop.

             if sy-subrc ne 0 . write:/ 'Error getting data', sy-subrc.
endif.



*}   REPLACE

  XSUM = 0.
  XSUM2 = 0.
   LOOP AT SUMMR.

*{   REPLACE        MD0K900107                                        2
*\    IF: SUMMR-TASKTYPE = 'DIALOG'.
    IF: SUMMR-TASKTYPE = '01'.
*}   REPLACE
      IF: SUMMR-TIME > '14'
      AND SUMMR-TIME < '16'.
        XSUM2 = SUMMR-COUNT + XSUM2.
        XSUM = SUMMR-CNT001 + SUMMR-CNT002 + SUMMR-CNT003 +
               SUMMR-CNT004 + SUMMR-CNT005 + SUMMR-CNT006 + XSUM.
        XSUMZ = XSUMZ + SUMMR-RESPTI.
        XSUMZZ = XSUMZZ + SUMMR-GUITIME.             "Satya
      ENDIF.
      IF: SUMMR-TIME > '10'
      AND SUMMR-TIME < '12'.
        XSUM2 = SUMMR-COUNT + XSUM2.
        XSUM = SUMMR-CNT001 + SUMMR-CNT002 + SUMMR-CNT003 +
               SUMMR-CNT004 + SUMMR-CNT005 + SUMMR-CNT006 + XSUM.
        XSUMZ = XSUMZ + SUMMR-RESPTI.
        XSUMZZ = XSUMZZ + SUMMR-GUITIME.             "Satya

      ENDIF.
    ENDIF.
    .
  ENDLOOP.
*  write:/ xsumz , 'XSUMZ'.
*  write:/ xsum3z , 'xsum3z'.
*  write:/ xsumzz, 'xsumzz'.

  WRITE:/ XSUM2, 'Total dialog steps',SY-VLINE,
                                     XSUM ,'Steps < 1 sec'.
  XSUM3 = XSUM3 + XSUM2.
  XSUM4 = XSUM4 + XSUM.
  MOVE DATE TO TAB_DAT.
  APPEND TAB_DAT.
  loop at tt_summt.


*{   REPLACE        MD0K900107                                        3
*\*write:/ tt_summt-entry_id.
*write:/ tt_summt-entry_id.
*}   REPLACE
*{   REPLACE        MD0K900107                                        4
*\    if tt_summt-ttype = '01'.
    if tt_summt-tasktype = '01'.
*}   REPLACE
*     XSUMZ = XSUMZ + tt_summt-RESPTI.

      if tt_summt-time > '14'
      and tt_summt-time < '16'.
*        xsumzz = xsumzz + tt_summt-guitime.       "Satya
*        XSUMZ = XSUMZ + tt_summt-RESPTI.

*       write:/ tt_summt-entry_id, tt_summt-count.
*        write:/ xsumzz, tt_summt-guitime, 'GUI-time'.
        if tt_summt-entry_id(15) = 'SESSION_MANAGER'
        or tt_summt-entry_id(15) = 'KE30'
        or tt_summt-entry_id(15) = 'CM33'
        or tt_summt-entry_id(15) = 'IW73'
        or tt_summt-entry_id(15) = 'MEREP_EX_REPLIC'
        or tt_summt-entry_id(15) = 'ZBOLCO'
        or tt_summt-entry_id(15) = 'ZDTS404'
        or tt_summt-entry_id(15) = 'ZLT10'
        or tt_summt-entry_id(15) = 'ZDTS110'
        or tt_summt-entry_id(15) = 'ZBOLINE'
        or tt_summt-entry_id(15) = 'ZCOLGRAM'
*{   INSERT         MD0K900338                                        5
  or tt_summt-entry_id(22) = 'Z_ENGA_ME_BESTELLINFO'
  or tt_summt-entry_id(22) = 'LSMW'
*}   INSERT
* Start of insert 06/05/2008
        or tt_summt-entry_id(22) = 'BD87'
        or tt_summt-entry_id(22) = 'IW72'
        or tt_summt-entry_id(22) = 'IW58'
        or tt_summt-entry_id(22) = 'IW47'
        or tt_summt-entry_id(22) = 'Z_ENGA_PP_FADRUCK1'
        or tt_summt-entry_id(22) = 'Z_ENGA_PP_RUECK'
        or tt_summt-entry_id(22) = 'Z_ENGA_MM52'
        or tt_summt-entry_id(22) = 'Z_ENGA_PPABLIE01'
        or tt_summt-entry_id(22) = 'Z_ENGA_BAFG'
        or tt_summt-entry_id(22) = 'Z_ENGA_COOPAD'
        or tt_summt-entry_id(22) = 'IW59'
        or tt_summt-entry_id(22) = 'YSE_SL_REPORTING'

        or tt_summt-entry_id(22) = 'YSE_SL_UPL_PURPRICE'
        or tt_summt-entry_id(22) = 'YSE_FI_UPL_FUTUREPR'
        or tt_summt-entry_id(22) = 'VKM4'
        or tt_summt-entry_id(22) = 'YSE_SL_UPL_SALESPRIC'
        or tt_summt-entry_id(22) = 'YSE_FI_REP_STOCKS'
        or tt_summt-entry_id(22) = 'YSE_SL_REP_STOCK'
        or tt_summt-entry_id(22) = 'YAM_EQUI_INST'
        or tt_summt-entry_id(22) = 'VF31'
        or tt_summt-entry_id(22) = 'VL71'
        or tt_summt-entry_id(22) = 'YSE_AM_REV'
        or tt_summt-entry_id(22) = 'YAM_EXP_MPLAN'
        or tt_summt-entry_id(22) = 'YAM_MASS_UPD_EQUIP'
        or tt_summt-entry_id(22) = 'YSE_RCOCI'
        or tt_summt-entry_id(22) = 'YAM_ONE2ONE'
        or tt_summt-entry_id(22) = 'SAPMS380'
        or tt_summt-entry_id(22) = 'VT11'
        or tt_summt-entry_id(22) = 'VT70'
        or tt_summt-entry_id(22) = 'YSE_FI_REP_GIT'
        or tt_summt-entry_id(22) = 'VF02'
        or tt_summt-entry_id(22) = 'YAM_HR_REPORT'
        or tt_summt-entry_id(22) = 'YSE_SL_REP_STOCKALM'
        or tt_summt-entry_id(22) = 'YSE_SL_REP_OPENPO'
        or tt_summt-entry_id(22) = 'YSE_KP02'
        or tt_summt-entry_id(26) = 'YAM_LIST_ITEM_PRICE_CHECK'
        or tt_summt-entry_id(26) = 'YSE_DOWNLOAD_FILE'
        or tt_summt-entry_id(26) = 'YSE_SD_KP02_1'
        or tt_summt-entry_id(26) = 'YSE_SL_REP_TRANSIT'
        or tt_summt-entry_id(26) = 'YSE_RFINU'
        or tt_summt-entry_id(26) = 'YAM_RECON_INV'
        or tt_summt-entry_id(26) = 'YSE_SL_ITEMREP'
        or tt_summt-entry_id(26) = 'YSE_RPB'
        or tt_summt-entry_id(26) = 'YSE_VISA_AB_REPORT'
        or tt_summt-entry_id(26) = 'YSE_FI_REP_AGEINGBAL'
        or tt_summt-entry_id(26) = 'YSE_ORDER_OUTPUT'
        or tt_summt-entry_id(26) = 'MD07'
        or tt_summt-entry_id(26) = 'YSE_SDMM_SURPLUS'
        or tt_summt-entry_id(26) = 'YAM_ECHR'
        or tt_summt-entry_id(26) = 'YAM_DEF_REV'
        or tt_summt-entry_id(26) = 'YAM_EQUI_HOURS'
        or tt_summt-entry_id(26) = 'KE80'
        or tt_summt-entry_id(26) = 'KE24'
        or tt_summt-entry_id(26) = 'YAM_IQQ'
* End of insert 06/05/2008
        or tt_summt-entry_id(15) = 'ZPLIST'
        or tt_summt-entry_id(15) = '<no buffer>'.
          move tt_summt-entry_id to ex-trans.
          move tt_summt-count to ex-count.
          move tt_summt-respti to ex-respti.
          append ex.

          XSUM2 = xsum2 - tt_SUMMt-COUNT.
         XSUMZ = XSUMZ - tt_SUMMt-RESPTI.
         xsumzz = xsumzz - tt_summt-guitime.
*          write:/ tt_summt-entry_id, tt_summt-count,tt_summt-respti,
* tt_summt-guitime , 'entry line'.
        endif.
      endif.
      if tt_summt-time > '10'
       and tt_summt-time < '12'.
*        xsumzz = xsumzz + tt_summt-guitime.     "Satya
*         XSUMZ = XSUMZ + tt_summt-RESPTI.

*        write:/ tt_summt-entry_id, tt_summt-count.
*      write:/ xsumzz, tt_summt-guitime , 'GUI-time'.

        if tt_summt-entry_id(15) = 'SESSION_MANAGER'
        or tt_summt-entry_id(15) = 'KE30'
        or tt_summt-entry_id(15) = 'CM33'
        or tt_summt-entry_id(15) = 'IW73'
*{   INSERT         MD0K900338                                        6
  or tt_summt-entry_id(22) = 'Z_ENGA_ME_BESTELLINFO'
  or tt_summt-entry_id(22) = 'LSMW'
*}   INSERT
        or tt_summt-entry_id(15) = 'MEREP_EX_REPLIC'
        or tt_summt-entry_id(15) = 'ZBOLCO'
         or tt_summt-entry_id(15) = 'ZDTS404'
         or tt_summt-entry_id(15) = 'ZDTS110'
          or tt_summt-entry_id(15) = 'ZCOLGRAM'
        or tt_summt-entry_id(15) = 'ZBOLINE'
        or tt_summt-entry_id(15) = 'ZPLIST'
* Start of insert 06/05/2008
        or tt_summt-entry_id(22) = 'BD87'
        or tt_summt-entry_id(22) = 'IW72'
        or tt_summt-entry_id(22) = 'IW58'
        or tt_summt-entry_id(22) = 'IW47'
        or tt_summt-entry_id(22) = 'Z_ENGA_PP_FADRUCK1'
        or tt_summt-entry_id(22) = 'Z_ENGA_PP_RUECK'
        or tt_summt-entry_id(22) = 'Z_ENGA_MM52'
        or tt_summt-entry_id(22) = 'Z_ENGA_PPABLIE01'
        or tt_summt-entry_id(22) = 'Z_ENGA_BAFG'
        or tt_summt-entry_id(22) = 'Z_ENGA_COOPAD'
        or tt_summt-entry_id(22) = 'IW59'
        or tt_summt-entry_id(22) = 'YSE_SL_REPORTING'

        or tt_summt-entry_id(22) = 'YSE_SL_UPL_PURPRICE'
        or tt_summt-entry_id(22) = 'YSE_FI_UPL_FUTUREPR'
        or tt_summt-entry_id(22) = 'VKM4'
        or tt_summt-entry_id(22) = 'YSE_SL_UPL_SALESPRIC'
        or tt_summt-entry_id(22) = 'YSE_FI_REP_STOCKS'
        or tt_summt-entry_id(22) = 'YSE_SL_REP_STOCK'
        or tt_summt-entry_id(22) = 'YAM_EQUI_INST'
        or tt_summt-entry_id(22) = 'VF31'
        or tt_summt-entry_id(22) = 'VL71'
        or tt_summt-entry_id(22) = 'YSE_AM_REV'
        or tt_summt-entry_id(22) = 'YAM_EXP_MPLAN'
        or tt_summt-entry_id(22) = 'YAM_MASS_UPD_EQUIP'
        or tt_summt-entry_id(22) = 'YSE_RCOCI'
        or tt_summt-entry_id(22) = 'YAM_ONE2ONE'
        or tt_summt-entry_id(22) = 'SAPMS380'
        or tt_summt-entry_id(22) = 'VT11'
        or tt_summt-entry_id(22) = 'VT70'
        or tt_summt-entry_id(22) = 'YSE_FI_REP_GIT'
        or tt_summt-entry_id(22) = 'VF02'
        or tt_summt-entry_id(22) = 'YAM_HR_REPORT'
        or tt_summt-entry_id(22) = 'YSE_SL_REP_STOCKALM'
        or tt_summt-entry_id(22) = 'YSE_SL_REP_OPENPO'
        or tt_summt-entry_id(22) = 'YSE_KP02'
        or tt_summt-entry_id(26) = 'YAM_LIST_ITEM_PRICE_CHECK'
        or tt_summt-entry_id(26) = 'YSE_DOWNLOAD_FILE'
        or tt_summt-entry_id(26) = 'YSE_SD_KP02_1'
        or tt_summt-entry_id(26) = 'YSE_SL_REP_TRANSIT'
        or tt_summt-entry_id(26) = 'YSE_RFINU'
        or tt_summt-entry_id(26) = 'YAM_RECON_INV'
        or tt_summt-entry_id(26) = 'YSE_SL_ITEMREP'
        or tt_summt-entry_id(26) = 'YSE_RPB'
        or tt_summt-entry_id(26) = 'YSE_VISA_AB_REPORT'
        or tt_summt-entry_id(26) = 'YSE_FI_REP_AGEINGBAL'
        or tt_summt-entry_id(26) = 'YSE_ORDER_OUTPUT'
        or tt_summt-entry_id(26) = 'MD07'
        or tt_summt-entry_id(26) = 'YSE_SDMM_SURPLUS'
        or tt_summt-entry_id(26) = 'YAM_ECHR'
        or tt_summt-entry_id(26) = 'YAM_DEF_REV'
        or tt_summt-entry_id(26) = 'YAM_EQUI_HOURS'
        or tt_summt-entry_id(26) = 'KE80'
        or tt_summt-entry_id(26) = 'KE24'
        or tt_summt-entry_id(26) = 'YAM_IQQ'
* End of insert 06/05/2008
         or tt_summt-entry_id(15) = 'ZLT10'
         or tt_summt-entry_id(15) = '<no buffer>'.
          move tt_summt-entry_id to ex-trans.
          move tt_summt-count to ex-count.
          move tt_summt-respti to ex-respti.

          append ex.
           xsumzz = xsumzz - tt_summt-guitime.

          XSUM2 = xsum2 - tt_SUMMt-COUNT.
         XSUMZ = XSUMZ - tt_SUMMt-RESPTI.
*          write:/ tt_summt-entry_id, tt_summt-count,tt_summt-respti,
*tt_summt-guitime , 'entry-line'.
        endif.
      endif.
    endif.
  endloop.
*  write:/ xsumz , 'XSUMZ'.
*  write:/ xsum3z , 'xsum3z'.
*  write:/ xsumzz, 'xsumzz'.

ENDFORM.                    "BERECHNUNG
*       FORM BERECHNUNG2                                              *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM BERECHNUNG2.
  XSUMX = 0.
  XSUM2X = 0.
  xsum4x = 0.
  xsum3x = 0.
  LOOP AT SUMMR.
*{   REPLACE        MD0K900107                                        1
*\    IF: SUMMR-TASKTYPE = 'DIALOG'.
    IF: SUMMR-TASKTYPE = '01'.
*}   REPLACE
      IF: SUMMR-TIME > '14'
      AND SUMMR-TIME < '16'.
        XSUM2X = SUMMR-COUNT + XSUM2X.
        XSUMX = SUMMR-CNT008 + SUMMR-CNT009 +
                XSUMX.
      ENDIF.
      IF: SUMMR-TIME > '10'
      AND SUMMR-TIME < '12'.
        XSUM2X = SUMMR-COUNT + XSUM2X.
        XSUMX =
               SUMMR-CNT008 + SUMMR-CNT009 + XSUMX.
      ENDIF.
    ENDIF.
    .
  ENDLOOP.
  WRITE:/ XSUM2X, 'Total dialog steps',SY-VLINE,
                                      XSUMX ,'Steps > 2 sec'.
  XSUM3X = XSUM3X + XSUM2X.
  XSUM4X = XSUM4X + XSUMX.
ENDFORM.                    "BERECHNUNG2

*&---------------------------------------------------------------------*
*&      Form  BERECHNUNG3
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM BERECHNUNG3.
  XSUMp = 0.
  XSUM2p = 0.
  LOOP AT SUMMR.
*{   REPLACE        MD0K900107                                        1
*\    IF: SUMMR-TASKTYPE = 'DIALOG'.
    IF: SUMMR-TASKTYPE = '01'.
*}   REPLACE
      IF: SUMMR-TIME > '14'
      AND SUMMR-TIME < '16'.
        XSUM2p = SUMMR-COUNT + XSUM2p.
        XSUMp = SUMMR-CNT007 +
                XSUMp.
      ENDIF.
      IF: SUMMR-TIME > '10'
      AND SUMMR-TIME < '12'.
        XSUM2p = SUMMR-COUNT + XSUM2p.
        XSUMp =
               SUMMR-CNT007  + XSUMp.
      ENDIF.
    ENDIF.
    .
  ENDLOOP.
  WRITE:/ XSUM2p, 'Total dialog steps',SY-VLINE,
                                      XSUMp ,'Steps > 1 sec and < 2 sec'
.
  XSUM3p = XSUM3p + XSUM2p.
  XSUM4p = XSUM4p + XSUMp.
ENDFORM.                    "BERECHNUNG3
*&---------------------------------------------------------------------*
*&      Form  FIND_PREVIOUS_MONTH
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FIND_PREVIOUS_MONTH.

* Calculate previous month and put the value in w_month
  W_MONTH = W_SYDATUM+4(2) - 1.
  IF W_MONTH = 0.
    W_PERIOD(4) = W_SYDATUM(4) - 1.
    W_PERIOD+4(2) = 12.
    W_MONTH = 12.
  ELSE.
    W_PERIOD(4) = W_SYDATUM(4).
    W_PERIOD+4(2) = W_MONTH.
  ENDIF.

* Calculate 3 months ago ...
  MONAT2 = W_SYDATUM+4(2).
  CASE MONAT2.
    WHEN 01 OR 02 OR 03.
      DATE2+6(2) = W_SYDATUM+6(2).
      DATE2(4)   = W_SYDATUM(4) - 1.
      DATE2+4(2) = MONAT2 + 9.
    WHEN OTHERS.
      MONAT2 = MONAT2 -  3.
      MOVE W_SYDATUM TO DATE2.
      MOVE MONAT2 TO DATE2+4(2).
  ENDCASE.

ENDFORM.                               " FIND_PREVIOUS_MONTH
*---------------------------------------------------------------------*
*       FORM CHECK_INTERUPTS                                          *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM CHECK_INTERUPTS.
  DATA: XINTER(1) TYPE C.
  DATA: XMINUTES(7) TYPE N.
  MOVE ' ' TO XINTER.
  OPEN DATASET C_DATASET_ID FOR INPUT IN TEXT MODE encoding default.
  IF SY-SUBRC NE 0.
    WRITE : 'Unable to open dataset', C_DATASET_ID.
  ENDIF.
  DO.
    READ DATASET C_DATASET_ID INTO W_FILEIN.
    if w_filein+14(2)  > '00'
    and w_filein+14(2) < '13'.
      IF W_MONTH =
             W_FILEIN+14(2).

        IF W_FILEIN+29(1) = '2'
        AND XINTER = ' '.
          WRITE:/ W_FILEIN.
          MOVE '20'  TO X-DATE1.
          MOVE W_FILEIN+11(2)      TO X-DATE2.
          MOVE W_FILEIN+14(2)      TO X-DATE3.
          MOVE W_FILEIN+17(2)      TO X-DATE4.
          MOVE X TO FILEX-FELD14.
          MOVE FILEX-FILLER14 TO FILESTATS-LABEL.
          MOVE FILEX-FELD14 TO FILESTATS-VALUE.
          TRANSFER FILESTATS TO FILE.
          MOVE W_FILEIN+20(5)     TO FILEX-FELD15.
          MOVE FILEX-FILLER15 TO FILESTATS-LABEL.
          MOVE FILEX-FELD15 TO FILESTATS-VALUE.
          TRANSFER FILESTATS TO FILE.
          MOVE 'X' TO XINTER.
        ENDIF.
        IF W_FILEIN+29(1) NE '2'
        AND XINTER = 'X'.
          IF   W_FILEIN+11(2)  =    X-DATE2
          AND  W_FILEIN+14(2)  =    X-DATE3
          AND  W_FILEIN+17(2)  =    X-DATE4.
            XMINUTES = 0.
            XMINUTES = ( W_FILEIN+20(2) - FILEX-FELD15(2) ) * 60.
            WRITE:/ XMINUTES ,'Hours  *  60'.
         XMINUTES = XMINUTES -      FILEX-FELD15+3(2) + W_FILEIN+23(2) .
            WRITE:/ XMINUTES ,'Total'.
            MOVE XMINUTES     TO FILEX-FELD16.
            MOVE FILEX-FILLER16 TO FILESTATS-LABEL.
            MOVE FILEX-FELD16 TO FILESTATS-VALUE.
            TRANSFER FILESTATS TO FILE.
            WRITE:/ W_FILEIN.
            MOVE ' ' TO XINTER.
          ELSE.
            XMINUTES = 0.
            W_FILEIN+20(2) = W_FILEIN+20(2) + 24.
            XMINUTES = ( W_FILEIN+20(2) - FILEX-FELD15(2) ) * 60.
            WRITE:/ XMINUTES ,'Hours  *  60'.
         XMINUTES = XMINUTES -      FILEX-FELD15+3(2) + W_FILEIN+23(2) .
            WRITE:/ XMINUTES ,'Total'.
            MOVE XMINUTES     TO FILEX-FELD16.
            MOVE FILEX-FILLER16 TO FILESTATS-LABEL.
            MOVE FILEX-FELD16 TO FILESTATS-VALUE.
            TRANSFER FILESTATS TO FILE.
            WRITE:/ W_FILEIN.
            MOVE ' ' TO XINTER.
          ENDIF.
        ENDIF.
      endif.
    ENDIF.
    IF SY-SUBRC >< 0.
      EXIT.
    ENDIF.
  ENDDO.
  if xinter = 'X'.
    xminutes = 0.
    xminutes = ( 24 - filex-feld15(2) ) * 60.
    write:/ xminutes ,'Hours  *  60'.
    xminutes = xminutes -      filex-feld15+3(2).
    write:/ xminutes ,'Total'.
    move xminutes     to filex-feld16.
    move filex-filler16 to filestats-label.
    move filex-feld16 to filestats-value.
    transfer filestats to file.
    move ' ' to xinter.
  endif.

ENDFORM.                    "CHECK_INTERUPTS

*---------------------------------------------------------------------*
*       FORM check_interupts2                                         *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
form check_interupts2.
  write:/ '> 10 minutes'.
  data: xinter(1) type c.
  data: xminutes(7) type n.
  data: xdays(7) type n.
  xminutes = 0.
  move ' ' to xinter.
  open dataset c_dataset_id for input in text mode encoding default.
  if sy-subrc ne 0.
    write : 'Unable to open dataset', c_dataset_id.
  endif.
  do.
    read dataset c_dataset_id into w_filein.

    if sy-subrc ne 0. exit.endif.
    if w_filein+14(2)  > '00'
and w_filein+14(2) < '13'.

      if w_month ne w_filein+14(2) and xinter = ' '.
        move w_filein to zw_filein.
      endif.
      if w_month = w_filein+14(2) and xinter = ' '.
        move w_filein+11(8) to zw_filein+11(8).
        move '00' to zw_filein+17(2).
        move 'X' to xinter.
      endif.
      if w_month =
             w_filein+14(2).
        move 0 to xminutes.
        if  w_filein+17(2) ne zw_filein+17(2).
          xminutes = ( w_filein+20(2) + 24 - zw_filein+20(2) ) * 60.
          xminutes = ( xminutes - zw_filein+23(2) ) + w_filein+23(2).
          xdays = w_filein+17(2) - zw_filein+17(2) - 1.
          if xdays > 0.
            xminutes = xminutes + ( xdays * 1440 ).
          endif.
        endif.
        if w_filein+23(2) > zw_filein+23(2)
    and w_filein+17(2) = zw_filein+17(2).
          xminutes = ( w_filein+20(2) - zw_filein+20(2)  ) * 60.
          xminutes = ( xminutes - zw_filein+23(2) ) + w_filein+23(2).
        endif.
        if  w_filein+17(2) = zw_filein+17(2)
  and w_filein+23(2) < zw_filein+23(2).
          xminutes = ( w_filein+20(2) - zw_filein+20(2) ) * 60.
          xminutes = ( xminutes - zw_filein+23(2) ) + w_filein+23(2).
        endif.
        if xminutes > 11
     and w_filein+29(1) ne '2'
  and zw_filein+29(1) ne '2'.
          MOVE '20'  TO X-DATE1.
          move zw_filein+11(2)      to x-date2.
          move zw_filein+14(2)      to x-date3.
          move zw_filein+17(2)      to x-date4.
          move zw_filein+17(2)      to x-date4.
          move x to filex-feld14.
          move filex-filler14 to filestats-label.
          move filex-feld14 to filestats-value.
          transfer filestats to file.
          move zw_filein+20(5)     to filex-feld15.
          move filex-filler15 to filestats-label.
          move filex-feld15 to filestats-value.
          transfer filestats to file.
          move xminutes     to filex-feld16.
          move filex-filler16 to filestats-label.
          move filex-feld16 to filestats-value.
          transfer filestats to file.
          write:/ 'Interupt' , xminutes , 'Minutes'.
          write:/ 'Starting time', zw_filein+11(17).
          write:/ 'End time', w_filein+11(17).
        endif.
        move w_filein to zw_filein.
      else.
      endif.
    endif.
  enddo.
endform.                    "check_interupts2

.
*&--------------------------------------------------------------------*
*&      Form  calcdb
*&--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
form calcdb.
  call 'C_SAPGPARAM' id 'NAME' field 'SAPLOCALHOST'
                    id 'VALUE' field zzhost.
  move sy-opsys to zwplatform.


  refresh zdf_protocol. clear zdf_protocol.
  call function 'SXPG_COMMAND_EXECUTE'
    EXPORTING
      commandname                   = 'ZDBSIZE'
      targetsystem                  = zzhost
      stdout                        = 'X'
      stderr                        = 'X'
      terminationwait               = 'X'
      operatingsystem               = zwplatform
    IMPORTING
      status                        = zdf_status
    TABLES
      exec_protocol                 = zdf_protocol
    EXCEPTIONS
      no_permission                 = 1
      command_not_found             = 2
      parameters_too_long           = 3
      security_risk                 = 4
      wrong_check_call_interface    = 5
      program_start_error           = 6
      program_termination_error     = 7
      x_error                       = 8
      parameter_expected            = 9
      too_many_parameters           = 10
      illegal_command               = 11
      wrong_asynchronous_parameters = 12
      cant_enq_tbtco_entry          = 13
      jobcount_generation_error     = 14
      others                        = 15.
  move 0 to xval.
  move 0 to zwsum.
  data: xst(1) type c.
  move ' ' to xst.

  loop at zdf_protocol.
    if zdf_protocol+4(11) = 'Total pages'.
      move ' ' to xst.

      if zdf_protocol+43(1) ne 'N'.
        move zdf_protocol+43(10) to zwnum.
*        write:/ zwnum ,'ZWNUM'.
      else.
        move 'Z' to xst.
      endif.
    endif.
    if zdf_protocol+4(9) = 'Page size'.
      if xst ne 'Z'.
        xval = zdf_protocol+43(5).
*        write:/ xval,  'xval'.
        zwnum = zwnum * xval / 1024.
*        write:/ zwnum ,'ZWNUM'.
        zwsum = zwsum + zwnum.
*        write:/ zwsum,  'ZWSUM'.
      endif.
    endif.
  endloop.
  write:/ 'Total space ', zwsum.
  move 0 to zwsum2.
  move 0 to xval.
  move ' ' to xst.
  loop at zdf_protocol.
    if zdf_protocol+4(10) = 'Free pages'.
      move ' ' to xst.
      if zdf_protocol+43(1) ne 'N'.
        move zdf_protocol+43(10) to zwnum.
*        write:/ zwnum ,'ZWNUM'.
      else.
        move 'Z' to xst.
      endif.
    endif.
    if zdf_protocol+4(9) = 'Page size'.
      if xst ne 'Z'.
        xval =  zdf_protocol+43(5) .
*        write:/ xval,  'xval'.
        zwnum = zwnum * xval / 1024.
*        write:/ zwnum ,'ZWNUM'.
        zwsum2 = zwsum2 + zwnum.
*        write:/ zwsum2 , 'zwsum2'.
      endif.
    endif.
  endloop.
  zwsum3 = zwsum - zwsum2.
  write:/ 'Used' , zwsum3.
  write:/ 'Free ', zwsum2.
endform.                    "calcdb
