REPORT ZAL_ABAP message-id 26 line-size 255
no standard page heading.
* ZCP1_QMUR.
PARAMETER DOWNLOAD(1) DEFAULT 'S' lower case. "N-svr,Y-clnt
PARAMETER EXECMODE(1) DEFAULT 'B' lower case. "D-dlg,B-btch
PARAMETER OUT_DIR(48) DEFAULT "output file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER IN_DIR(48) DEFAULT "input file dir
'/var/load/CD1/UK/read' lower case.
PARAMETER P_DEST TYPE RFCDES-RFCDEST DEFAULT
'NONE'.
PARAMETER P_PROGID TYPE RFCOPT-RFCEXEC DEFAULT
SPACE.
PARAMETER P_GWHOST TYPE RFCOPT-RFCGWHOST DEFAULT
SPACE.
PARAMETER P_GWSERV TYPE RFCOPT-RFCGWSERV DEFAULT
SPACE.
PARAMETER P_SRVFM(30) DEFAULT "Server Callback function
SPACE.
PARAMETER P_PKGSZ TYPE I DEFAULT "Stream package size
5000.
PARAMETER P_SNC_ON(1) DEFAULT "X-on SPACE-off
SPACE.

PARAMETER $PARAM1 TYPE D.

PARAMETER $PARAM2 TYPE D.

PARAMETER P_DF_VK(40) DEFAULT "ABAP data flow object key
'' lower case.
PARAMETER P_DI_GEN(40) DEFAULT "DI version that generated ABAP
'' lower case.

*** Machine generated ABAP. Do not modify.            ***
*** (C)Copyright Business Objects S.A.  All rights reserved. ***
*
* Date Time:
*    12/24/15 07:28:25
* SAP used for generated this ABAP:
*    Release: 701
*    Host   : 10.25.3.82
*
* ABAP Dataflow Name:
*    DF_R3_CTS_LZ_SAP_CP1_QMUR_D
* ABAP program name in SAP:
*  ZCP1_QMUR
* Generated ABAP file name:
*    //AIRSBEAP0512/D$/Data/SAPLogistics/VAL/ABAP/ZCP1_QMUR
TABLES QMUR.
TABLES AUFK.
TABLES QMIH.
TABLES ILOA.
TABLES QMEL.
TABLES ZSTC_SALES_COMP.

DATA: begin of ITAB7 occurs 0,
QMNUM(12) TYPE C,
FENUM(4) TYPE N,
URNUM(4) TYPE N,
ERNAM(12) TYPE C,
ERDAT TYPE D,
AENAM(12) TYPE C,
AEDAT TYPE D,
URTXT(40) TYPE C,
URKAT(1) TYPE C,
URGRP(8) TYPE C,
URCOD(4) TYPE C,
URVER(6) TYPE C,
INDTX(1) TYPE C,
KZMLA(1) TYPE C,
ERZEIT(24) TYPE C,
AEZEIT(24) TYPE C,
VUKAT(1) TYPE C,
VUGRP(8) TYPE C,
VUCOD(4) TYPE C,
PARVW(2) TYPE C,
PARNR(12) TYPE C,
BAUTL(18) TYPE C,
URMENGE(16) TYPE P DECIMALS 3,
URMGEIN(3) TYPE C,
KZLOESCH(1) TYPE C,
QURNUM(4) TYPE N,
AUTKZ(1) TYPE C,
Z_BUKRS(4) TYPE C,
Z_VKORG(4) TYPE C,
Z_WERKS(4) TYPE C,
Z_EKORG(4) TYPE C,
Z_MAMUSERCMPY(4) TYPE C,
Z_REGION(40) TYPE C,
Z_COUNTRY(40) TYPE C,
Z_COUNTRYDSCR(255) TYPE C,
Z_SALESCOMPANY(40) TYPE C,
Z_SALESCMPDSCR(255) TYPE C.
DATA: end of ITAB7.

data: append_flag(1) value ' ',
      cntbuf type i,
      delimleng type i,last_batch(1) value ' '.

CONSTANTS C_DF_VK(40) VALUE '1676'.
CONSTANTS C_DI_GEN(40) VALUE '14.2.3.660'.
DATA WARN_MSG(50).


DATA: gv_directory     TYPE epsdirnam  VALUE '/var/load/xxx/UK/read/',
      gv_logsys        LIKE tbdlst-logsys.

start-of-selection.
* Logical system
  CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
    IMPORTING
      own_logical_system             = gv_logsys
    EXCEPTIONS
      own_logical_system_not_defined = 1
      OTHERS                         = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE 'E' NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    STOP.
  ENDIF.
  REPLACE 'xxx' IN out_dir WITH gv_logsys(3).
  REPLACE 'xxx' IN in_dir WITH gv_logsys(3).


  IF DOWNLOAD = 'S' OR
     DOWNLOAD = 'N' OR
     DOWNLOAD = 'Y'.
      .
  ELSE.
     DATA: m_xfer_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'data transfer method: ' DOWNLOAD
'. Regenerate the ABAP program and upload to this system.'
     INTO m_xfer_err_msg.
     MESSAGE  E240(S#) WITH m_xfer_err_msg.
  ENDIF.

  IF EXECMODE = 'B' OR
     EXECMODE = 'D'.
      .
  ELSE.
     DATA: m_exec_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'execution option: ' EXECMODE
'. Regenerate the ABAP program and upload to this system.'
     INTO m_exec_err_msg.
     MESSAGE  E240(S#) WITH m_exec_err_msg.
  ENDIF.

  IF DOWNLOAD = 'S'.
     PERFORM CONNECT_RFCDEST_TO_PROGID.
  ENDIF.



PERFORM FORM7.
last_batch = 'X'.
PERFORM FORM8.
FREE ITAB7.
  IF DOWNLOAD = 'S'.
     PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
  ENDIF.


end-of-selection.

CLEAR WARN_MSG.

IF NOT P_DF_VK IS INITIAL.
  IF P_DF_VK <> C_DF_VK.
     CONCATENATE '$$Warning$'
                 C_DF_VK
                 '$' INTO WARN_MSG.
  ENDIF.
ENDIF.
IF NOT P_DI_GEN IS INITIAL.
  IF P_DI_GEN <> C_DI_GEN.
     IF WARN_MSG IS INITIAL.
       CONCATENATE '$$Warning$$'
                   C_DI_GEN
                   INTO WARN_MSG.
     ELSE.
       CONCATENATE WARN_MSG
                   C_DI_GEN
                   INTO WARN_MSG.
     ENDIF.
  ENDIF.
ENDIF.

IF NOT WARN_MSG IS INITIAL.
  IF EXECMODE = 'D'.
    WRITE WARN_MSG.
    NEW-LINE.
  ELSE.
    MESSAGE S240(S#) with WARN_MSG.
  ENDIF.
ENDIF.


write  '* Program Complete *'.
write  '(C)Copyright Business Objects S.A.  All rights reserved.'.

FORM FORM7.
DATA ALTMP630(12) TYPE C.
DATA ALTMP631(4) TYPE N.
DATA ALTMP632(4) TYPE N.
DATA ALTMP633(12) TYPE C.
DATA ALTMP634 TYPE D.
DATA ALTMP635(12) TYPE C.
DATA ALTMP636 TYPE D.
DATA ALTMP637(40) TYPE C.
DATA ALTMP638(1) TYPE C.
DATA ALTMP639(8) TYPE C.
DATA ALTMP640(4) TYPE C.
DATA ALTMP641(6) TYPE C.
DATA ALTMP642(1) TYPE C.
DATA ALTMP643(1) TYPE C.
DATA ALTMP644 TYPE T.
DATA ALTMP645 TYPE T.
DATA ALTMP646(1) TYPE C.
DATA ALTMP647(8) TYPE C.
DATA ALTMP648(4) TYPE C.
DATA ALTMP649(2) TYPE C.
DATA ALTMP650(12) TYPE C.
DATA ALTMP651(18) TYPE C.
DATA ALTMP652(16) TYPE P DECIMALS 3.
DATA ALTMP653(3) TYPE C.
DATA ALTMP654(1) TYPE C.
DATA ALTMP655(4) TYPE N.
DATA ALTMP656(1) TYPE C.
DATA ALTMP657(4) TYPE C.
DATA ALTMP658(4) TYPE C.
DATA ALTMP659(4) TYPE C.
DATA ALTMP660(4) TYPE C.
DATA ALTMP661(4) TYPE C.
DATA ALTMP662(40) TYPE C.
DATA ALTMP663(40) TYPE C.
DATA ALTMP664(255) TYPE C.
DATA ALTMP665(40) TYPE C.
DATA ALTMP666(255) TYPE C.

DATA QMUR9QMNUM LIKE QMUR-QMNUM.
DATA QMUR9FENUM LIKE QMUR-FENUM.
DATA QMUR9URNUM LIKE QMUR-URNUM.
DATA QMUR9ERNAM LIKE QMUR-ERNAM.
DATA QMUR9ERDAT LIKE QMUR-ERDAT.
DATA QMUR9AENAM LIKE QMUR-AENAM.
DATA QMUR9AEDAT LIKE QMUR-AEDAT.
DATA QMUR9URTXT LIKE QMUR-URTXT.
DATA QMUR9URKAT LIKE QMUR-URKAT.
DATA QMUR9URGRP LIKE QMUR-URGRP.
DATA QMUR9URCOD LIKE QMUR-URCOD.
DATA QMUR9URVER LIKE QMUR-URVER.
DATA QMUR9INDTX LIKE QMUR-INDTX.
DATA QMUR9KZMLA LIKE QMUR-KZMLA.
DATA QMUR9ERZEIT LIKE QMUR-ERZEIT.
DATA QMUR9AEZEIT LIKE QMUR-AEZEIT.
DATA QMUR9VUKAT LIKE QMUR-VUKAT.
DATA QMUR9VUGRP LIKE QMUR-VUGRP.
DATA QMUR9VUCOD LIKE QMUR-VUCOD.
DATA QMUR9PARVW LIKE QMUR-PARVW.
DATA QMUR9PARNR LIKE QMUR-PARNR.
DATA QMUR9BAUTL LIKE QMUR-BAUTL.
DATA QMUR9URMENGE LIKE QMUR-URMENGE.
DATA QMUR9URMGEIN LIKE QMUR-URMGEIN.
DATA QMUR9KZLOESCH LIKE QMUR-KZLOESCH.
DATA QMUR9QURNUM LIKE QMUR-QURNUM.
DATA QMUR9AUTKZ LIKE QMUR-AUTKZ.
DATA ZSTC_SALE_019BUKRS LIKE ZSTC_SALES_COMP-BUKRS.
DATA ZSTC_SALE_019VKORG LIKE ZSTC_SALES_COMP-VKORG.
DATA ZSTC_SALE_019WERKS LIKE ZSTC_SALES_COMP-WERKS.
DATA ZSTC_SALE_019EKORG LIKE ZSTC_SALES_COMP-EKORG.
DATA ZSTC_SALE_019MAMUSERCMPY LIKE ZSTC_SALES_COMP-MAMUSERCMPY.
DATA ZSTC_SALE_019REGION LIKE ZSTC_SALES_COMP-REGION.
DATA ZSTC_SALE_019COUNTRY LIKE ZSTC_SALES_COMP-COUNTRY.
DATA ZSTC_SALE_019COUNTRYDSCR LIKE ZSTC_SALES_COMP-COUNTRYDSCR.
DATA ZSTC_SALE_019SALESCOMPANY LIKE ZSTC_SALES_COMP-SALESCOMPANY.
DATA ZSTC_SALE_019SALESCMPDSCR LIKE ZSTC_SALES_COMP-SALESCMPDSCR.
DATA QMEL9VKORG LIKE QMEL-VKORG.
DATA AUFK9IDAT3 LIKE AUFK-IDAT3.
DATA QMEL9QMNUM LIKE QMEL-QMNUM.
DATA QMIH9QMNUM LIKE QMIH-QMNUM.
DATA QMEL9AUFNR LIKE QMEL-AUFNR.
DATA AUFK9AUFNR LIKE AUFK-AUFNR.
DATA QMIH9ILOAN LIKE QMIH-ILOAN.
DATA ILOA9ILOAN LIKE ILOA-ILOAN.



SELECT
  QMUR9~QMNUM
  QMUR9~FENUM
  QMUR9~URNUM
  QMUR9~ERNAM
  QMUR9~ERDAT
  QMUR9~AENAM
  QMUR9~AEDAT
  QMUR9~URTXT
  QMUR9~URKAT
  QMUR9~URGRP
  QMUR9~URCOD
  QMUR9~URVER
  QMUR9~INDTX
  QMUR9~KZMLA
  QMUR9~ERZEIT
  QMUR9~AEZEIT
  QMUR9~VUKAT
  QMUR9~VUGRP
  QMUR9~VUCOD
  QMUR9~PARVW
  QMUR9~PARNR
  QMUR9~BAUTL
  QMUR9~URMENGE
  QMUR9~URMGEIN
  QMUR9~KZLOESCH
  QMUR9~QURNUM
  QMUR9~AUTKZ
  ZSTC_SALE_019~BUKRS
  ZSTC_SALE_019~VKORG
  ZSTC_SALE_019~WERKS
  ZSTC_SALE_019~EKORG
  ZSTC_SALE_019~MAMUSERCMPY
  ZSTC_SALE_019~REGION
  ZSTC_SALE_019~COUNTRY
  ZSTC_SALE_019~COUNTRYDSCR
  ZSTC_SALE_019~SALESCOMPANY
  ZSTC_SALE_019~SALESCMPDSCR
  QMEL9~VKORG
  AUFK9~IDAT3
  QMEL9~QMNUM
  QMIH9~QMNUM
  QMEL9~AUFNR
  AUFK9~AUFNR
  QMIH9~ILOAN
  ILOA9~ILOAN
into (QMUR9QMNUM,
  QMUR9FENUM,
  QMUR9URNUM,
  QMUR9ERNAM,
  QMUR9ERDAT,
  QMUR9AENAM,
  QMUR9AEDAT,
  QMUR9URTXT,
  QMUR9URKAT,
  QMUR9URGRP,
  QMUR9URCOD,
  QMUR9URVER,
  QMUR9INDTX,
  QMUR9KZMLA,
  QMUR9ERZEIT,
  QMUR9AEZEIT,
  QMUR9VUKAT,
  QMUR9VUGRP,
  QMUR9VUCOD,
  QMUR9PARVW,
  QMUR9PARNR,
  QMUR9BAUTL,
  QMUR9URMENGE,
  QMUR9URMGEIN,
  QMUR9KZLOESCH,
  QMUR9QURNUM,
  QMUR9AUTKZ,
  ZSTC_SALE_019BUKRS,
  ZSTC_SALE_019VKORG,
  ZSTC_SALE_019WERKS,
  ZSTC_SALE_019EKORG,
  ZSTC_SALE_019MAMUSERCMPY,
  ZSTC_SALE_019REGION,
  ZSTC_SALE_019COUNTRY,
  ZSTC_SALE_019COUNTRYDSCR,
  ZSTC_SALE_019SALESCOMPANY,
  ZSTC_SALE_019SALESCMPDSCR,
  QMEL9VKORG,
  AUFK9IDAT3,
  QMEL9QMNUM,
  QMIH9QMNUM,
  QMEL9AUFNR,
  AUFK9AUFNR,
  QMIH9ILOAN,
  ILOA9ILOAN)
FROM QMUR AS QMUR9
 INNER JOIN QMEL AS QMEL9
 ON ( QMUR9~QMNUM = QMEL9~QMNUM )
 INNER JOIN QMIH AS QMIH9
 ON ( QMEL9~QMNUM = QMIH9~QMNUM )
 INNER JOIN AUFK AS AUFK9
 ON ( QMEL9~AUFNR = AUFK9~AUFNR )
 INNER JOIN ZSTC_SALES_COMP AS ZSTC_SALE_019
 ON ( QMEL9~VKORG = ZSTC_SALE_019~VKORG )
 INNER JOIN ILOA AS ILOA9
 ON ( QMIH9~ILOAN = ILOA9~ILOAN )
WHERE ( ( ( AUFK9~IDAT3 <= $PARAM1 )
 OR ( AUFK9~IDAT3 >= $PARAM2 ) )
 AND ( NOT ( ( QMEL9~VKORG like '%04' ) )
 AND ( NOT ( ( QMEL9~VKORG like '%03' ) )
 AND NOT ( ( QMEL9~VKORG like '%02' ) ) ) ) ).
ALTMP630 = QMUR9QMNUM.
ALTMP631 = QMUR9FENUM.
ALTMP632 = QMUR9URNUM.
ALTMP633 = QMUR9ERNAM.
ALTMP634 = QMUR9ERDAT.
ALTMP635 = QMUR9AENAM.
ALTMP636 = QMUR9AEDAT.
ALTMP637 = QMUR9URTXT.
ALTMP638 = QMUR9URKAT.
ALTMP639 = QMUR9URGRP.
ALTMP640 = QMUR9URCOD.
ALTMP641 = QMUR9URVER.
ALTMP642 = QMUR9INDTX.
ALTMP643 = QMUR9KZMLA.
ALTMP644 = QMUR9ERZEIT.
ALTMP645 = QMUR9AEZEIT.
ALTMP646 = QMUR9VUKAT.
ALTMP647 = QMUR9VUGRP.
ALTMP648 = QMUR9VUCOD.
ALTMP649 = QMUR9PARVW.
ALTMP650 = QMUR9PARNR.
ALTMP651 = QMUR9BAUTL.
ALTMP652 = QMUR9URMENGE.
ALTMP653 = QMUR9URMGEIN.
ALTMP654 = QMUR9KZLOESCH.
ALTMP655 = QMUR9QURNUM.
ALTMP656 = QMUR9AUTKZ.
ALTMP657 = ZSTC_SALE_019BUKRS.
ALTMP658 = ZSTC_SALE_019VKORG.
ALTMP659 = ZSTC_SALE_019WERKS.
ALTMP660 = ZSTC_SALE_019EKORG.
ALTMP661 = ZSTC_SALE_019MAMUSERCMPY.
ALTMP662 = ZSTC_SALE_019REGION.
ALTMP663 = ZSTC_SALE_019COUNTRY.
ALTMP664 = ZSTC_SALE_019COUNTRYDSCR.
ALTMP665 = ZSTC_SALE_019SALESCOMPANY.
ALTMP666 = ZSTC_SALE_019SALESCMPDSCR.
 move ALTMP630 to ITAB7-QMNUM.
 move ALTMP631 to ITAB7-FENUM.
 move ALTMP632 to ITAB7-URNUM.
 move ALTMP633 to ITAB7-ERNAM.
 move ALTMP634 to ITAB7-ERDAT.
 move ALTMP635 to ITAB7-AENAM.
 move ALTMP636 to ITAB7-AEDAT.
 move ALTMP637 to ITAB7-URTXT.
 move ALTMP638 to ITAB7-URKAT.
 move ALTMP639 to ITAB7-URGRP.
 move ALTMP640 to ITAB7-URCOD.
 move ALTMP641 to ITAB7-URVER.
 move ALTMP642 to ITAB7-INDTX.
 move ALTMP643 to ITAB7-KZMLA.
 move ALTMP644 to ITAB7-ERZEIT.
 move ALTMP645 to ITAB7-AEZEIT.
 move ALTMP646 to ITAB7-VUKAT.
 move ALTMP647 to ITAB7-VUGRP.
 move ALTMP648 to ITAB7-VUCOD.
 move ALTMP649 to ITAB7-PARVW.
 move ALTMP650 to ITAB7-PARNR.
 move ALTMP651 to ITAB7-BAUTL.
 move ALTMP652 to ITAB7-URMENGE.
 move ALTMP653 to ITAB7-URMGEIN.
 move ALTMP654 to ITAB7-KZLOESCH.
 move ALTMP655 to ITAB7-QURNUM.
 move ALTMP656 to ITAB7-AUTKZ.
 move ALTMP657 to ITAB7-Z_BUKRS.
 move ALTMP658 to ITAB7-Z_VKORG.
 move ALTMP659 to ITAB7-Z_WERKS.
 move ALTMP660 to ITAB7-Z_EKORG.
 move ALTMP661 to ITAB7-Z_MAMUSERCMPY.
 move ALTMP662 to ITAB7-Z_REGION.
 move ALTMP663 to ITAB7-Z_COUNTRY.
 move ALTMP664 to ITAB7-Z_COUNTRYDSCR.
 move ALTMP665 to ITAB7-Z_SALESCOMPANY.
 move ALTMP666 to ITAB7-Z_SALESCMPDSCR.
 append ITAB7.
 cntbuf = cntbuf + 1.
 if download = 'N'.
  if cntbuf > 5000.
    perform FORM8.
    clear cntbuf.
    refresh ITAB7.
    append_flag = 'A'.
  endif.
 endif.
 if download = 'S'.
  if cntbuf > P_PKGSZ.
    perform FORM8.
    clear cntbuf.
    refresh ITAB7.
  endif.
 endif.
ENDSELECT.
ENDFORM.

FORM FORM8.
data: outfile(512), ldfile(50).
ldfile = 'CTS_LZ_SAP_CP1_QMUR'.
concatenate out_dir ldfile into outfile
  separated by '/'.
  IF DOWNLOAD = 'S'.
     DATA: error_message(700),mtext(800),iEOP(1).
     CALL FUNCTION P_SRVFM
          DESTINATION P_DEST
          KEEPING LOGICAL UNIT OF WORK
          EXPORTING
            EOS = last_batch
          IMPORTING
            EOP = iEOP
          TABLES
            E_TABLE = ITAB7
          EXCEPTIONS
            READ_ERROR = 1
            SYSTEM_FAILURE = 2
            MESSAGE error_message
            COMMUNICATION_FAILURE = 3
            MESSAGE error_message
            OTHERS = 4.

     IF sy-subrc ne 0.
        Case sy-subrc.
        when 1.
        CONCATENATE
        'Data Services read error. '
        'Check Data Services error log.'
        INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 2.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 3.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 4.
        MESSAGE  E240(S#) WITH
'Other SAP System Failure while calling DS remote function.'.
        endcase.
      ENDIF.
      IF iEOP = 'X'.
         PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
         LEAVE PROGRAM.
       ENDIF.
  ELSE.
data  dlmtlen type i value '1'.
data xdlmtlen type i value '1'.
data:
  ht(1) type c,
  xht(1) type x,
  conv type ref to cl_abap_conv_in_ce.
xht = '7F'.
conv = cl_abap_conv_in_ce=>create(
  encoding = '1100'
  input = xht
).
call method conv->read(
  exporting n    = xdlmtlen
  importing data = ht
            len = dlmtlen
).
data return_code type i.
 perform write_delimited_file
           tables   ITAB7
           using    outfile
                    append_flag
                    ht
                    dlmtlen
                    download
           changing return_code.

  case return_code.
    when 1.
      IF EXECMODE = 'D'.
        WRITE: /5 'No line selected'.
      ELSE.
        MESSAGE E047(S#).
      ENDIF.
    when 2.
      IF EXECMODE = 'D'.
        WRITE: /5 'Open File Error -- ', 25 OUTFILE.
      ELSE.
        MESSAGE  E084(E0) WITH OUTFILE.
      ENDIF.
    when 3.
      IF EXECMODE = 'D'.
        WRITE: /5 'Data exceed length limit (8192) '.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Data exceed length limit (8192) '.
      ENDIF.
    when 4.
      IF EXECMODE = 'D'.
        WRITE: /5 'Call function WS_DOWNLOAD error'.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Call function WS_DOWNLOAD error'.
      ENDIF.
  endcase.
 ENDIF.
ENDFORM.

FORM SUBSTRING USING SRC BEG LEN CHANGING RET.

DATA: VA1 TYPE I.
DATA: VA2 TYPE I.
DATA: VA3 TYPE I.

VA3 = STRLEN( SRC ).

IF  BEG = 0.   VA1 = 0.
ELSE.
  IF  BEG < 0.
    VA1 = VA3 + BEG.
    IF  VA1 < 0.   VA1 = 0.
    ENDIF.
  ELSE.          VA1 = BEG - 1.
  ENDIF.
ENDIF.

IF  LEN < 0.   VA2 = 0.
ELSE.          VA2 = VA3 - VA1.
ENDIF.

IF  VA2 > LEN. VA2 = LEN.
ENDIF.

IF  VA2 < 1.   MOVE ''           TO RET.
ELSE.          MOVE SRC+VA1(VA2) TO RET.
ENDIF.

ENDFORM.

form write_delimited_file
           tables   datatab
           using    file
                    append
                    delimit
                    dlength
                    dwnload
          changing rc.

  data: type1,
        appd(1),
        temp(32),
        time1(8),
        date1(10),
        output(8192),
        rcount type i,
        offset type i,
        tablen type i,
        maxlen type i value '8192'.

  data: begin of clientab occurs 0,
             output(8192),
          end of clientab.

  field-symbols: <f>.
  field-symbols <delim1>.
  data delim2(16).
  data l_filename type string.

  appd = append.
  if appd is not initial.
     appd = 'X'.
  endif.
  move file to l_filename.
  describe table datatab lines tablen.


  if dwnload = 'Y'.
     clear clientab. refresh clientab.
     rcount = 0.
  else.
     if appd = space.
   open dataset file for output in text mode ENCODING UTF-8.
     else.
    open dataset file for appending in text mode ENCODING UTF-8.
     endif.
     if sy-subrc <> 0.
         rc = 2. exit.
     endif.
  endif.

  loop at datatab.
    clear: tablen, offset, output.
    do.
      assign component sy-index of
         structure datatab to <f>.
      if sy-subrc <> 0. exit. endif.
      if sy-index > 1.
         assign delimit(dlength) TO <delim1> CASTING TYPE C.
         delim2 = <delim1>.
         write delim2(dlength) to output+offset(dlength).
         add dlength to offset.
      endif.

      describe field <f> type type1.

      if type1 = 'I' or type1 = 'N'.
          type1 = 'P'.
      endif.

      case type1.
        when 'D'.
          if <f> = '00000000'.
             <f> = ' '.
          else.
             move <f> to time1.
             assign time1 to <f>.
          endif.
        when 'F'.
          if <f> = '0.0'.
            temp = '0.0'.
          else.
             write <f> to temp exponent 0.
          endif.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
        when 'P'.
          if <f> < 0.
             write '-' to output+offset(1).
             add 1 to offset.
             <f> = <f> * ( -1 ).
          endif.
          move <f> to temp.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
      endcase.

      sy-fdpos = strlen( <f> ).

      tablen = offset + sy-fdpos.
      if tablen > maxlen.
         rc = 3. exit.
      endif.
      write <f> to output+offset(sy-fdpos).
      add sy-fdpos to offset.
    enddo.

    if dwnload = 'Y'.
       clientab-output = output.
       append clientab.
       rcount = rcount + 1.
       if rcount >= 50.
          SY-BATCH = SPACE.
          CALL FUNCTION 'GUI_DOWNLOAD'
            EXPORTING
              FILENAME = l_filename
              FILETYPE = 'ASC'
              CODEPAGE = '4110'
              APPEND   = appd
              WRITE_FIELD_SEPARATOR = 'X'
*            IMPORTING
*              FILELENGTH =
            TABLES
              DATA_TAB = clientab
            EXCEPTIONS
              OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
          clear clientab. refresh clientab.
          rcount = 0. appd = 'A'.
       endif.
    else.
       transfer output to file.
    endif.
  endloop.

  if dwnload = 'Y'.
       SY-BATCH = SPACE.
       CALL FUNCTION 'GUI_DOWNLOAD'
         EXPORTING
           FILENAME = l_filename
           FILETYPE = 'ASC'
              CODEPAGE = '4110'
           APPEND   = appd
           WRITE_FIELD_SEPARATOR = 'X'
*         IMPORTING
*           FILELENGTH =
         TABLES
           DATA_TAB = clientab
         EXCEPTIONS
           OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
  else.
       close dataset file.
  endif.
endform.

FORM CONNECT_RFCDEST_TO_PROGID.
 INCLUDE rfctypes.

 DATA: len     type i,
       R3NAME(4),
       SYSTNR(2),
       uid     LIKE SYS_UID,
       options LIKE RFCOPT,
       isunicode  TYPE n.

 DATA: NTOTAL     LIKE GWY_STRUCT-NOREG,
       GWY_GWHOST LIKE GWY_STRUCT-GWHOST,
       GWY_GWSERV LIKE GWY_STRUCT-GWSERV,
       GWY_TPNAME LIKE GWY_SYSTEM-TPNAME.

 TABLES: RFCSI.

* Check program ID
 IF P_PROGID = SPACE.							
    RAISE INVALID_PROGRAM_ID.
 ENDIF.

* determine if the RFC destination authority
  CALL FUNCTION 'RFC_READ_TCPIP_DESTINATION'
       EXPORTING destination = P_DEST
                 authority_check = 'X'
  IMPORTING rfcunicode = isunicode.

* Use current gateway if no info exits
 IF P_GWHOST = SPACE OR P_GWSERV = SPACE.
  CALL FUNCTION 'RFC_SYSTEM_INFO'
      IMPORTING
          RFCSI_EXPORT = RFCSI.

  len = strlen( rfcsi-rfcdest ) - 2.
  systnr = rfcsi-rfcdest+len.
  len = len - 1 - 3.
  r3name = rfcsi-rfcdest+len(3).
  len = len - 1.
  options-rfcgwhost = rfcsi-rfcdest(len).
  CONCATENATE 'sapgw' SYSTNR INTO options-rfcgwserv.
 ELSE.
   options-rfcgwhost = P_GWHOST.
   options-rfcgwserv = P_GWSERV.
 ENDIF.

* Parameters for GWY function call
  GWY_GWHOST = OPTIONS-RFCGWHOST.
  GWY_GWSERV = OPTIONS-RFCGWSERV.
  GWY_TPNAME = P_PROGID.

* Check gateway and server program registered
  CALL FUNCTION 'GWY_GET_NO_REG_PROGRAMS'
     EXPORTING
        GWHOST      = GWY_GWHOST
        GWSERV      = GWY_GWSERV
        TPNAME      = GWY_TPNAME
     IMPORTING
        NOREG_TOTAL = NTOTAL
     EXCEPTIONS
        OTHERS      = 1.

  IF sy-subrc NE 0.
     raise CONNECT_TO_GATEWAY_FAILED.
  ENDIF.

  IF NTOTAL = 0.
     raise SERVER_NOT_REGISTERED.
  ENDIF.

  IF NTOTAL GT 1.
     raise DUPLICATE_REG_PROGRAMS.
  ENDIF.

* build new connection to a registered server
  options-rfcexec   = gwy_tpname.
  options-rfcgwhost = gwy_gwhost.
  options-rfcgwserv = gwy_gwserv.
  options-rfchost   = '%%RFCSERVER%%'.
  IF P_SNC_ON = 'X'.
    options-rfcsnc  = 'X'.
  ENDIF.

  CALL 'RFCControl' ID 'CODE' FIELD 'O'
                    ID 'DESTINATION' FIELD P_DEST
                    ID 'TYPE' FIELD rfctype_external_tcp
                    ID 'OPTIONS' FIELD options.

  IF sy-subrc NE 0.
     RAISE CONNECT_TO_REG_SERVER_FAILED.
   ENDIF.

* and set exclusive mode to keep server owned
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
      EXPORTING  destination = P_DEST
                 exclusiv    = 'Y'
      EXCEPTIONS connect_to_reg_server_failed = 1
                 exclusiv_not_supported       = 2.

  IF SY-SUBRC NE 0.
     CASE SY-SUBRC.
          WHEN 1.
              RAISE CONNECT_TO_REG_SERVER_FAILED.
          WHEN 2.
              RAISE EXCLUSIV_NOT_SUPPORTED.
     ENDCASE.
  ENDIF.

ENDFORM.

FORM DISCONNECT_RFCDEST_FROM_PROGID.
* set exclusive mode to E to end the session
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
     EXPORTING
         destination = P_DEST
         exclusiv    = 'E'
     EXCEPTIONS
         connect_to_reg_server_failed = 1				
         exclusiv_not_supported       = 2.
ENDFORM.
