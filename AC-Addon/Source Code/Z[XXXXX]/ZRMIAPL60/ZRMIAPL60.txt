*&---------------------------------------------------------------------*
*& Modulpool         JKR_MAT_VERW_IN_PLAENEN                           *
*&                                                                     *
*&---------------------------------------------------------------------*
*&                                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*
REPORT jkr_mat_verw_in_plaenen MESSAGE-ID ci LINE-SIZE 132
                               NO STANDARD PAGE HEADING.

*/--- Tabellen Definitionen --------------------------------------------
TABLES:
       plmz,
       plmzv,
       plko,
       stpo,
       t399i,     "Customizingtabelle f¨¹r IH-Planungswerk
       t416,      "Customizingtabelle f¨¹r St¨¹cklistenverwendung defini.
       t370a.


*/--- Daten Definitionen -----------------------------------------------
DATA: BEGIN OF liststruc OCCURS 0.
        INCLUDE STRUCTURE plmzv.
DATA: werks_plko LIKE plko-werks,
      datuv_plmz LIKE plmz-datuv,
      datuv_plko LIKE plko-datuv.
DATA: END OF liststruc.

DATA: BEGIN OF object_tab OCCURS 0.
        INCLUDE STRUCTURE liststruc.
DATA:   clda1 LIKE dicldat-ausp1.
DATA:   clda2 LIKE dicldat-ausp1.
DATA:   clda3 LIKE dicldat-ausp1.
DATA:   clda4 LIKE dicldat-ausp1.
DATA:   clda5 LIKE dicldat-ausp1.
DATA:   clda6 LIKE dicldat-ausp1.
DATA:   clda7 LIKE dicldat-ausp1.
DATA:   clda8 LIKE dicldat-ausp1.
DATA:   clda9 LIKE dicldat-ausp1.
DATA:   clda10 LIKE dicldat-ausp1.
DATA:   clda11 LIKE dicldat-ausp1.
DATA:   clda12 LIKE dicldat-ausp1.
DATA:   clda13 LIKE dicldat-ausp1.
DATA:   clda14 LIKE dicldat-ausp1.
DATA:   clda15 LIKE dicldat-ausp1.
DATA:   clda16 LIKE dicldat-ausp1.
DATA:   clda17 LIKE dicldat-ausp1.
DATA:   clda18 LIKE dicldat-ausp1.
DATA:   clda19 LIKE dicldat-ausp1.
DATA:   clda20 LIKE dicldat-ausp1.
DATA:   selected,
        pm_selected TYPE pm_selected,
      END OF object_tab.


DATA: BEGIN OF sel_tab OCCURS 50.
        INCLUDE STRUCTURE liststruc.
DATA: END OF sel_tab.

DATA: BEGIN OF doccat   OCCURS 0.
        INCLUDE STRUCTURE cscdoc.
DATA: END OF doccat  .

DATA: BEGIN OF equicat  OCCURS 0.
        INCLUDE STRUCTURE cscequi.
DATA: END OF equicat .

DATA: BEGIN OF kndcat   OCCURS 0.
        INCLUDE STRUCTURE cscknd.
DATA: END OF kndcat  .

DATA: BEGIN OF matcat   OCCURS 0.
        INCLUDE STRUCTURE cscmat.
DATA: END OF matcat  .

DATA: BEGIN OF prjcat   OCCURS 0.
        INCLUDE STRUCTURE cscprj.
DATA: END OF prjcat.

DATA: BEGIN OF stdcat   OCCURS 0.
        INCLUDE STRUCTURE cscstd.
DATA: END OF stdcat  .

DATA: BEGIN OF tplcat   OCCURS 0.
        INCLUDE STRUCTURE csctpl.
DATA: END OF tplcat  .

DATA: BEGIN OF selpool.
        INCLUDE STRUCTURE mc29s.
DATA: END OF selpool.

DATA: BEGIN OF ltb OCCURS 0.
        INCLUDE STRUCTURE stpov.
DATA: END OF ltb.

DATA g_ucomm LIKE sy-ucomm.

DATA: plnnr_alt LIKE plmz-plnnr,
      plnal_alt LIKE plmz-plnal,
      plnty_alt LIKE plmz-plnty.

DATA: BEGIN OF t412_loc OCCURS 1.
        INCLUDE STRUCTURE t412.
DATA: END OF t412_loc.

RANGES stlant FOR t416-stlan OCCURS 0.

*/--- Plantyp Variable definieren --------------------------------------
DATA: plnty LIKE plko-plnty,                                "n359999
      plnnr LIKE plko-plnnr,                                "n359999
      plnal LIKE plko-plnal.                                "n359999

* Definitions (new component processing)
DATA: correction_active(1) TYPE c.


* Task list operations (PLAS)  ==========================>>>.
DATA: g_plas_buf TYPE SORTED TABLE OF plas
                 WITH NON-UNIQUE KEY plnty plnnr plnal.

* Task list operation details (PLPO)
DATA: g_plpo_buf TYPE SORTED TABLE OF plpo
                 WITH NON-UNIQUE KEY plnty plnnr plnkn.
*===============================================================>>>>>>>


*/--- Selektions Parameter (#bernahme analog Vorlage RIMARA20) ---------

PARAMETERS:
  dy_selm DEFAULT '0' NO-DISPLAY,
  dy_tcode LIKE sy-tcode NO-DISPLAY.


*/--- Eigene Select Options --------------------------------------------
SELECTION-SCREEN BEGIN OF BLOCK object1
                                WITH FRAME
                                TITLE text-002.
PARAMETERS: typ_anl  RADIOBUTTON GROUP 0001 DEFAULT 'X',
            typ_equ  RADIOBUTTON GROUP 0001,
            typ_ifl  RADIOBUTTON GROUP 0001.
SELECTION-SCREEN END   OF BLOCK object1.



SELECTION-SCREEN BEGIN OF BLOCK object2
                                WITH FRAME
                                TITLE text-003.
PARAMETERS:
*  Datum gueltig von
   pm_datuv LIKE stpo-datuv DEFAULT sy-datum,
*  Datum gueltig bis
   pm_datub LIKE stpo-datuv DEFAULT sy-datum,
*  Planstatus
   pm_plnst LIKE plkod-statu MEMORY ID sta,    " default '4' value check
*  Material
   pm_idnrk LIKE stpo-idnrk MEMORY ID mat OBLIGATORY
                            MATCHCODE OBJECT mat1,
*  Einschraenken auf Positionstyp
   pm_postp LIKE stpo-postp NO-DISPLAY,
*  Werk
   pm_werks LIKE marc-werks MEMORY ID wrk,
*  Stuecklistenverwendung
   pm_stlan LIKE stzu-stlan DEFAULT '4' NO-DISPLAY.
SELECTION-SCREEN END   OF BLOCK object2.





*/--- INCLUDES ---------------------------------------------------------
INCLUDE miolxtop.

INCLUDE miolxf14.
INCLUDE miolxf16.

*/--- Work Area f¨¹r Listenkopfausgabe ----------------------------------
DATA header TYPE slis_listheader.

************************************************************************
* INITIALIZATION
************************************************************************
INITIALIZATION.

  PERFORM initialize.

  PERFORM get_t370a.

* #bernahme aus Report RIMARA20
*/--- Listvariante initialisieren ------------------------------------
  PERFORM variant_init_f14 USING 'INST'
                                 'INST'
                                 'INST'.
*/--- Feldkatalog aufbauen -------------------------------------------
  PERFORM create_fieldcat_f14 USING 'PLMZV'.
*/--- Selektionsbildvariante holen -----------------------------------
  PERFORM variant_start_f16.
*/--- Defaultvariante f¨¹r Feldauswahl ermitteln ----------------------
  PERFORM get_default_variant_f14 USING ''. "VARIANT.

*/---- F4 Eingabehilfe f¨¹r Listvariante --------------------------------
*AT SELECTION-SCREEN ON VALUE-REQUEST FOR VARIANT.
*  PERFORM VARIANT_INPUTHELP_F14 USING VARIANT.

************************************************************************
* AT SELECTION-SCREEN OUTPUT
************************************************************************
AT SELECTION-SCREEN OUTPUT.
*  perform init_selection_screen_f16.

************************************************************************
* AT SELECTION-SCREEN
************************************************************************
AT SELECTION-SCREEN.
  PERFORM check_plnst.

AT SELECTION-SCREEN  ON RADIOBUTTON GROUP 0001.
  IF NOT typ_anl IS INITIAL. plnty = 'A'. ENDIF.
  IF NOT typ_equ IS INITIAL. plnty = 'E'. ENDIF.
  IF NOT typ_ifl IS INITIAL. plnty = 'T'. ENDIF.

  PERFORM variant_existence_f14 USING ''.   "VARIANT.

************************************************************************
* START-OF-SELECTION
************************************************************************
START-OF-SELECTION.

  PERFORM determine_g_tcode_f16.
  PERFORM get_t370a.

*/--- Tabelle der Listen¨¹berschriften f¨¹llen ---------------------------
  PERFORM fill_g_listheader_tab.
*/--- Listenkopf ausgeben ----------------------------------------------
*/--- Nicht aufrufen, sonst kommt leere Seite mit #berschrift hoch -----
*  perform top_of_page_f14.

*/--- Material Verprobung ----------------------------------------------
  PERFORM check_material.

*/--- Arbeitsplanstatus verproben --------------------------------------
  PERFORM check_plnst.

  PERFORM export_seltab_mem_f16.

  REFRESH sel_tab.
*/--- Allgemeine Einstellungen f¨¹r Listviewer --------------------------
  PERFORM prepare_display_list_f14.

*/--- Ausgew#hlte Listfelder ermitteln f¨¹r dynamisches Select ----------
  PERFORM update_fieldcat_variant_f14.
  PERFORM check_fieldcat_variant_l.
  PERFORM selection_l.

************************************************************************
* END-OF-SELECTION
************************************************************************
END-OF-SELECTION.

*/--- Liste ausgeben ---------------------------------------------------
  CLEAR g_event_exit_tab. REFRESH g_event_exit_tab.
  g_ucomm = ''.
  SET TITLEBAR 'LVS'.
  PERFORM display_list_f14 USING g_ucomm.

*---------------------------------------------------------------------*
*       FORM USER_COMMAND_L                                           *
*---------------------------------------------------------------------*
*       will be called out of listviewer                              *
*---------------------------------------------------------------------*
*  -->  P_UCOMM                                                       *
*  -->  P_SELFIELD                                                    *
*---------------------------------------------------------------------*
FORM user_command_l USING p_ucomm LIKE sy-ucomm
                          p_selfield TYPE slis_selfield.

  PERFORM set_p_selfield_general_f16 USING p_selfield.

  g_ucomm = p_ucomm.

  p_selfield-refresh = g_x.
  g_index = p_selfield-tabindex.

  CASE g_ucomm.
    WHEN g_ol0.
*/--- Aktuelle Feldauswahl #ndern -------------------------------------
      PERFORM refresh_l USING p_selfield.
    WHEN g_olx.
*/--- Feldauswahl #ndern ---------------------------------------------
      PERFORM refresh_l USING p_selfield.
    WHEN g_oad.
*/--- Feldauswahl ausw#hlen ------------------------------------------
      PERFORM refresh_l USING p_selfield.
    WHEN g_lis.
*/--- Grundliste aufbauen --------------------------------------------
      PERFORM refresh_l USING p_selfield.
    WHEN 'AKTU'.
*/--- Auffrischen ----------------------------------------------------
*/--- Datenbankselektion ---------------------------------------------
      PERFORM selection_l.
    WHEN 'IOBJ'.
*/--- Objektstammsatz anzeigen ---------------------------------------
      PERFORM check_object_tab_marked_f14 USING g_ucomm
                                                p_selfield.
      liststruc   = object_tab.
*        move-corresponding object_tab to rihplko.
      PERFORM master_data_f16 USING g_ucomm
                                    p_selfield.
*/--- Wegen doppelclick sicherstellen das F-Code nicht zweimal -------
      CLEAR g_ucomm.
      CLEAR p_ucomm.
    WHEN OTHERS.
*/--- zentrale F-codes f¨¹r alle Listen -----------------------------
      PERFORM user_command_f16 USING g_ucomm p_selfield.
  ENDCASE.
ENDFORM.                    "USER_COMMAND_L


*---------------------------------------------------------------------*
*       FORM FCODES_WITH_MARK_L (Aktion bei Doppelclick auf Liste)    *
*---------------------------------------------------------------------*
*       FCodes, die auch im Loop verarbeitet werden k#nnen            *
*---------------------------------------------------------------------*
FORM fcodes_with_mark_l USING f_ucomm LIKE sy-ucomm
                              f_selfield TYPE slis_selfield.
  DATA: h_mxx(4).
  DATA: h_retc LIKE sy-subrc.
  DATA: h_tcode LIKE sy-tcode.

  h_mxx = f_ucomm.
  SHIFT h_mxx BY 3 PLACES.
*/--- Aufruf der jeweiligen Arbeitsplan Anzeigetransaktion -------------
  IF plnty = 'T'.
    h_tcode = 'IA04'.  "Allgemeiner Einstieg f¨¹r alle Plantpen  "n359999
  ELSEIF plnty = 'E'.                                       "n359999
    h_tcode = 'IA04'.                                       "n359999
  ELSE.                         "Anleitung oder sonstige Pl#ne  "n359999
    h_tcode = 'IA04'.                                       "n359999
  ENDIF.                                                    "n359999

*/--- aktuelle Plannummer und Alternative in Parameter schreiben -------
  MOVE object_tab-plnnr TO plnnr.                           "n359999
  MOVE object_tab-plnal TO plnal.                           "n359999

  SET PARAMETER ID 'PTY' FIELD plnty.                       "n359999
  SET PARAMETER ID 'PLN' FIELD plnnr.                       "n359999
  SET PARAMETER ID 'PAL' FIELD plnal.                       "n359999

*--- Berechtigungspr¨¹fung auf T-code ------------------------------*
  PERFORM auth_check_tcode_f16 USING h_tcode                "n359999
                               CHANGING h_retc.             "n359999
  IF h_retc IS INITIAL.                                     "n359999
    CALL TRANSACTION h_tcode AND SKIP FIRST SCREEN.         "n359999
  ENDIF.                                                    "n359999
ENDFORM.                    "FCODES_WITH_MARK_L


*&---------------------------------------------------------------------*
*&      Form  CHECK_FIELDCAT_VARIANT_L
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_fieldcat_variant_l.

  DATA h_fieldcat_wa TYPE slis_fieldcat_alv.
  DATA h_index       LIKE sy-tabix.

  h_index = 1.

  DESCRIBE TABLE g_selfields_tab LINES sy-tabix.
  IF sy-tabix IS INITIAL.
    LOOP AT g_fieldcat_tab INTO h_fieldcat_wa.
      CASE h_fieldcat_wa-fieldname.
        WHEN 'PM_SELECTED'.
          h_fieldcat_wa-no_out  = space.
          h_fieldcat_wa-col_pos = 1.
        WHEN 'PLNNR'.
          h_fieldcat_wa-no_out  = space.
          h_fieldcat_wa-col_pos = 2.
        WHEN 'PLNKN'.
          h_fieldcat_wa-no_out  = space.
          h_fieldcat_wa-col_pos = 3.
        WHEN 'PLNTY'.
          h_fieldcat_wa-no_out = space.
          h_fieldcat_wa-col_pos = 4.
        WHEN 'PLNAL'.
          h_fieldcat_wa-no_out = space.
          h_fieldcat_wa-col_pos = 5.
        WHEN 'VERWE'.
          h_fieldcat_wa-no_out = space.
          h_fieldcat_wa-col_pos = 6.
        WHEN 'VORNR'.
          h_fieldcat_wa-no_out = space.
          h_fieldcat_wa-col_pos = 7.
        WHEN 'MATNR'.
          h_fieldcat_wa-no_out = space.
          h_fieldcat_wa-col_pos = 8.
        WHEN 'WERKS'.
          h_fieldcat_wa-no_out = space.
          h_fieldcat_wa-col_pos = 9.
        WHEN 'MENGE'.
          h_fieldcat_wa-no_out = space.
          h_fieldcat_wa-col_pos = 10.
        WHEN 'MEINH'.
          h_fieldcat_wa-no_out = space.
          h_fieldcat_wa-col_pos = 11.
        WHEN 'KTEXT'.
          h_fieldcat_wa-no_out = space.
          h_fieldcat_wa-col_pos = 12.
        WHEN 'PLNST'.
          h_fieldcat_wa-no_out = space.
          h_fieldcat_wa-col_pos = 13.
        WHEN OTHERS.
          h_fieldcat_wa-no_out = g_x.
      ENDCASE.
      MODIFY g_fieldcat_tab FROM h_fieldcat_wa.
    ENDLOOP.
  ENDIF.

ENDFORM.                               " CHECK_FIELDCAT_VARIANT_L


*&---------------------------------------------------------------------*
*&      Form  SELECTION_L
*&---------------------------------------------------------------------*
*       Select task lists, linked with the given material
*----------------------------------------------------------------------*
FORM selection_l.

  TYPES: BEGIN OF t_plmzx,
           plnty TYPE plmz-plnty,
           plnnr TYPE plmz-plnnr,
           zuonr TYPE plmz-zuonr,
           zaehl TYPE plmz-zaehl,
           plnal TYPE plmz-plnal,
           plnfl TYPE plmz-plnfl,
           plnkn TYPE plmz-plnkn,
           stlty TYPE plmz-stlty,
           stlnr TYPE plmz-stlnr,
           stlal TYPE plmz-stlal,
           stlkn TYPE plmz-stlkn,
           loekz TYPE plmz-loekz,
           datuv TYPE datuv,
           datub TYPE datub,
           imeng TYPE plmz-imeng,
           imein TYPE plmz-imein,
           aennr TYPE plmz-aennr,
         END OF t_plmzx.

  CONSTANTS: cc_x(1)        TYPE c VALUE 'X',
             cc_s(1)        TYPE c VALUE 'S',
             cc_e(1)        TYPE c VALUE 'E',
             cc_t(1)        TYPE c VALUE 'T',
             cc_00000000(8) TYPE c VALUE '00000000',
             cc_99991231(8) TYPE c VALUE '99991231'.

  DATA: h_tabix LIKE sy-tabix,
        l_subrc LIKE sy-subrc,
        l_stvkn TYPE stpo-stvkn,
        l_plmz_tab  TYPE TABLE OF plmz,
        l_plmzx_tab TYPE TABLE OF t_plmzx,
        l_datuv_1   TYPE datuv,
        l_datuv_2   TYPE datuv,
        l_plas_tab  TYPE TABLE OF plas,
        l_plpo_tab  TYPE TABLE OF plpo,
        l_plko      TYPE plko.

  FIELD-SYMBOLS: <l_plmz_tab>  TYPE plmz,
                 <l_plmzx_tab> TYPE t_plmzx,
                 <l_plpo_tab>  TYPE plpo.

*"==================================================>
  FIELD-SYMBOLS: <g_plpo_buf> LIKE LINE OF g_plpo_buf,
                 <e_plas_tab> TYPE LINE OF PLAS_TAB,
                 <e_plpo_tab> TYPE LINE OF plpo_tab,
                 <l_plko>     type plko.


  data: lt_plko1 type table of plko,
        lt_plko  type table of plko.

  CLEAR: object_tab, object_tab[].

  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      text = 'Materialverwendung'(004).


*----- Get bill of material items / validity ---------------------------

  CALL FUNCTION 'CS_WHERE_USED_MAT'
    EXPORTING
      datub                      = pm_datub
      datuv                      = pm_datuv
      matnr                      = pm_idnrk
      postp                      = pm_postp
      stlan                      = ''             "pm_stlan
      werks                      = '*'            "pm_werks
    IMPORTING
      topmat                     = selpool
    TABLES
      wultb                      = ltb
      equicat                    = equicat
      kndcat                     = kndcat
      matcat                     = matcat
      stdcat                     = stdcat
      tplcat                     = tplcat
    EXCEPTIONS
      call_invalid               = 1
      material_not_found         = 2
      no_where_used_rec_found    = 3
      no_where_used_rec_selected = 4
      no_where_used_rec_valid    = 5.

  CASE sy-subrc.
    WHEN 0.
    WHEN 1.
      MESSAGE i504.
      EXIT.
    WHEN 2.
      MESSAGE i500.
      EXIT.
    WHEN 3 OR 4 OR 5.
*     Material not used in relevant bill of materials
      l_subrc = sy-subrc.
    WHEN OTHERS.
      MESSAGE i505.
      EXIT.
  ENDCASE.

* Add standard bill of material items (bom category 'S')
  DELETE ltb WHERE stlty = 'S'.
  SELECT * FROM stpo
    APPENDING CORRESPONDING FIELDS OF TABLE ltb
    WHERE stpo~stlty = cc_s     AND
          stpo~idnrk = pm_idnrk AND
          EXISTS ( SELECT COUNT( * ) FROM stst
                     WHERE stst~stlnr = stpo~stlnr AND
                           stst~stlan = '4' ).

  IF ( sy-subrc <> 0 ) AND
     ( l_subrc  <> 0 ).
    CASE l_subrc.
      WHEN 3.
        MESSAGE i501.
        EXIT.
      WHEN 4.
        MESSAGE i502.
        EXIT.
      WHEN 5.
        MESSAGE i503.
        EXIT.
    ENDCASE.
  ENDIF.

* Check if the new component processing is active
* Please note that lplko is empty here!
  CALL FUNCTION 'CI20_CALL_BADI_COMP_PROCESSING'
    EXPORTING
      i_task_list_header  = plko
    IMPORTING
      e_correction_active = correction_active.


*----- Check bill of material - task list link -------------------------

  LOOP AT ltb WHERE stlan IN stlant.

    CLEAR: l_plas_tab, g_plas_buf, l_plpo_tab, g_plpo_buf, l_plko.
    REFRESH: l_plas_tab[], g_plas_buf[], l_plpo_tab[], g_plpo_buf[].

    CLEAR l_plmzx_tab.

*   Standard bom items are always valid
    IF ltb-stlty = cc_s.
      ltb-datuv = cc_00000000.
      ltb-datub = cc_99991231.
    ENDIF.

    IF correction_active = cc_x.
      SELECT SINGLE stvkn FROM stas
        INTO (l_stvkn)
        WHERE stlty = ltb-stlty AND
              stlnr = ltb-stlnr AND
              stlkn = ltb-stlkn.
    ELSE.
      l_stvkn = ltb-stlkn.
    ENDIF.

*   Get task list components
    SELECT * FROM plmz
      INTO TABLE l_plmz_tab
      WHERE plnty =  plnty     AND
            stlty =  ltb-stlty AND
            stlnr =  ltb-stlnr AND
            stlkn =  l_stvkn   AND
            datuv <= ltb-datub AND
            datuv <= pm_datub  AND
            loekz = space.

    SORT l_plmz_tab BY plnty plnnr zuonr datuv zaehl.

*   Get component (plmz) validity period
    LOOP AT l_plmz_tab ASSIGNING <l_plmz_tab>.

      READ TABLE l_plmzx_tab ASSIGNING <l_plmzx_tab>
        WITH KEY plnty = <l_plmz_tab>-plnty
                 plnnr = <l_plmz_tab>-plnnr
                 zuonr = <l_plmz_tab>-zuonr
        BINARY SEARCH.

      IF sy-subrc = 0.
*       Update validity period
        IF ( <l_plmz_tab>-datuv > <l_plmzx_tab>-datuv    ) OR
           ( <l_plmz_tab>-datuv = <l_plmzx_tab>-datuv AND
             <l_plmz_tab>-zaehl > <l_plmzx_tab>-zaehl    ).
          <l_plmzx_tab>-zaehl = <l_plmz_tab>-zaehl.
          <l_plmzx_tab>-imeng = <l_plmz_tab>-imeng.
          <l_plmzx_tab>-imein = <l_plmz_tab>-imein.
          <l_plmzx_tab>-aennr = <l_plmz_tab>-aennr.
          IF <l_plmzx_tab>-loekz = cc_x.
*           This case should not occure
            MESSAGE e865(ip) WITH 'RMIAPL60'.
          ELSEIF <l_plmz_tab>-loekz = cc_x.
*           Set end of existence / deletion flag
            IF <l_plmzx_tab>-datuv = <l_plmz_tab>-datuv.
              <l_plmzx_tab>-loekz = <l_plmz_tab>-loekz.
              <l_plmzx_tab>-datub = <l_plmz_tab>-datuv.
            ELSEIF <l_plmz_tab>-datuv <= pm_datuv.
              <l_plmzx_tab>-loekz = cc_x.
              <l_plmzx_tab>-datub = <l_plmz_tab>-datuv.
            ELSE.
              <l_plmzx_tab>-datub = <l_plmz_tab>-datuv.
            ENDIF.
          ENDIF.
        ENDIF.
      ELSE.
*       Add component
        APPEND INITIAL LINE TO l_plmzx_tab ASSIGNING <l_plmzx_tab>.
        MOVE-CORRESPONDING <l_plmz_tab> TO <l_plmzx_tab>.
        <l_plmzx_tab>-datub = ltb-datub.
        SORT l_plmzx_tab BY plnty plnnr zuonr.
      ENDIF.

    ENDLOOP. "l_plmz_tab

*   Determine start date
    IF pm_datuv < ltb-datuv.
      l_datuv_1 = ltb-datuv.
    ELSE.
      l_datuv_1 = pm_datuv.
    ENDIF.
*
*   Check superordinated validities (operations, headers)
*    LOOP AT l_plmzx_tab ASSIGNING <l_plmzx_tab>
*      WHERE NOT loekz = cc_x.

*     Update start date
*      IF l_datuv_1 < <l_plmzx_tab>-datuv.
*        l_datuv_2 = <l_plmzx_tab>-datuv.
*      ELSE.
*        l_datuv_2 = l_datuv_1.
*      ENDIF.

**     Check validity of operation
*      CALL FUNCTION 'CI03_READ_PLPO'
*        EXPORTING
*          i_plnty               = <l_plmzx_tab>-plnty
*          i_plnnr               = <l_plmzx_tab>-plnnr
*          i_plnal               = <l_plmzx_tab>-plnal
*          i_date                = l_datuv_2
*          i_add_work_place      = space
*        IMPORTING
*          e_plas_tab            = l_plas_tab
*          e_plpo_tab            = l_plpo_tab
*        EXCEPTIONS
*          database_inconsistent = 1
*          OTHERS                = 2.
*      IF sy-subrc <> 0.
*        MESSAGE e865(ip) WITH 'RMIAPL60'.
*      ENDIF.
*===============================================================>>>>>
*Read the Operations
    IF l_plmzx_tab[] is  initial.
      continue.
    endif.


    IF l_plmzx_tab[] is not initial.
      SELECT * FROM plas INTO TABLE l_plas_tab
         FOR ALL entries in l_plmzx_tab
            WHERE plnty = l_plmzx_tab-plnty AND
                  plnnr = l_plmzx_tab-plnnr AND
                  plnal = l_plmzx_tab-plnal AND
             ( datuv <= l_plmzx_tab-datuv OR  datuv <=  l_datuv_1 ) AND
                  loekz NE cc_x
            ORDER BY PRIMARY KEY.

      IF sy-subrc <> 0.
        MESSAGE e865(ip) WITH 'RMIAPL60'.
      ENDIF.

    endif.

*For every operation read from PLAS, get the corresponding details
    IF l_plas_tab[] is not initial.
      SELECT * FROM plpo INTO TABLE l_plpo_tab
      FOR ALL ENTRIES IN  l_plas_tab
      WHERE plnty = l_plas_tab-plnty AND
            plnnr = l_plas_tab-plnnr AND
               plnkn = l_plas_tab-plnkn  AND
              loekz NE cc_x
      ORDER BY PRIMARY KEY.

      IF sy-subrc <> 0.
        MESSAGE e865(ip) WITH 'RMIAPL60'.
      ENDIF.
    ENDIF.



*Endof Read Operations
*===============================================================>>>>>
*
*      READ TABLE l_plas_tab
*        WITH KEY plnty = <l_plmzx_tab>-plnty
*                 plnnr = <l_plmzx_tab>-plnnr
*                 plnal = <l_plmzx_tab>-plnal
*                 plnfl = <l_plmzx_tab>-plnfl
*                 plnkn = <l_plmzx_tab>-plnkn
*        BINARY SEARCH
*        TRANSPORTING NO FIELDS.
*      IF sy-subrc <> 0.
*        <l_plmzx_tab>-loekz = cc_x.
*        CONTINUE.
*      ENDIF.
*
*      READ TABLE l_plpo_tab ASSIGNING <l_plpo_tab>
*        WITH KEY plnty = <l_plmzx_tab>-plnty
*                 plnnr = <l_plmzx_tab>-plnnr
*                 plnkn = <l_plmzx_tab>-plnkn
*        BINARY SEARCH.

*     Check validity of task list header
*      CALL FUNCTION 'CI03_READ_PLKO'
*        EXPORTING
*          i_plnty         = <l_plmzx_tab>-plnty
*          i_plnnr         = <l_plmzx_tab>-plnnr
*          i_plnal         = <l_plmzx_tab>-plnal
*          i_date          = l_datuv_2
*        IMPORTING
*          e_plko          = l_plko
*        EXCEPTIONS
*          tl_not_existent = 1
*          tl_not_valid    = 2
*          OTHERS          = 3.
*      IF sy-subrc <> 0.
*        <l_plmzx_tab>-loekz = cc_x.
*        CONTINUE.
*      ENDIF.
*===============================================================>>>>>
*Read the Header for the Operations
    SELECT * FROM plko into table lt_plko
        FOR ALL entries in l_plmzx_tab
          WHERE plnty = l_plmzx_tab-plnty    AND
                plnnr = l_plmzx_tab-plnnr    AND
                plnal = l_plmzx_tab-plnal    AND
                loekz NE cc_x                AND
               ( datuv <= l_plmzx_tab-datuv OR  datuv <=  l_datuv_1 ) .

    IF sy-subrc <> 0.
      CONTINUE.
    ENDIF.


*End OF Read  Header for the Operations
*===============================================================>>>>>

    LOOP AT l_plmzx_tab ASSIGNING <l_plmzx_tab>
          WHERE NOT loekz = cc_x.

      read table lt_plko into l_plko
      with key  plnty = <l_plmzx_tab>-plnty
                 plnnr = <l_plmzx_tab>-plnnr
                 plnal = <l_plmzx_tab>-plnal.

*     Check task list plant and status
      CHECK ( pm_werks = l_plko-werks OR
              pm_werks IS INITIAL        ) AND
            ( pm_plnst = l_plko-statu OR
              pm_plnst IS INITIAL        ).

*     Transfer bill of material data
      MOVE-CORRESPONDING ltb TO object_tab.

*     Get begin of validity (First entry in l_plmz_tab)
      LOOP AT l_plmz_tab ASSIGNING <l_plmz_tab>
        WHERE ( plnty = <l_plmzx_tab>-plnty ) AND
              ( plnnr = <l_plmzx_tab>-plnnr ) AND
              ( zuonr = <l_plmzx_tab>-zuonr ) AND
              ( NOT loekz = cc_x ).
        object_tab-datuv = <l_plmz_tab>-datuv.
        object_tab-mandt = <l_plmz_tab>-mandt.
        EXIT.
      ENDLOOP.

*     Get functional location
      IF <l_plmzx_tab>-plnty = cc_t.
        SELECT SINGLE tplnr FROM tapl INTO (object_tab-tplnr)
          WHERE plnty = <l_plmzx_tab>-plnty AND
                plnnr = <l_plmzx_tab>-plnnr AND
                plnal = <l_plmzx_tab>-plnal.
      ENDIF.

*     Get equipment
      IF <l_plmzx_tab>-plnty = cc_e.
        SELECT SINGLE equnr FROM eapl INTO (object_tab-equnr)
          WHERE plnty = <l_plmzx_tab>-plnty AND
                plnnr = <l_plmzx_tab>-plnnr AND
                plnal = <l_plmzx_tab>-plnal.
      ENDIF.

*     Transfer task list data
      object_tab-plnty = <l_plmzx_tab>-plnty.
      object_tab-plnnr = <l_plmzx_tab>-plnnr.
      object_tab-plnal = <l_plmzx_tab>-plnal.
      object_tab-plnkn = <l_plmzx_tab>-plnkn.
      object_tab-zaehl = <l_plmzx_tab>-zaehl.
      object_tab-stlal = <l_plmzx_tab>-stlal.
      object_tab-meinh = <l_plmzx_tab>-imein.
      object_tab-menge = <l_plmzx_tab>-imeng.
      object_tab-aennr = <l_plmzx_tab>-aennr.
      object_tab-matnr = pm_idnrk.


      READ TABLE l_plpo_tab ASSIGNING <l_plpo_tab>
        WITH KEY plnty = <l_plmzx_tab>-plnty
                 plnnr = <l_plmzx_tab>-plnnr
                 plnkn = <l_plmzx_tab>-plnkn
        BINARY SEARCH.

      object_tab-vornr = <l_plpo_tab>-vornr.



      object_tab-werks = l_plko-werks.
      object_tab-verwe = l_plko-verwe.
      object_tab-statu = l_plko-statu.
      object_tab-ktext = l_plko-ktext.
      APPEND object_tab.

    ENDLOOP. "l_plmzx_tab

  ENDLOOP. "ltb (bom items)

* Sort task lists if not done via SALV
  IF g_sortfields_tab[] IS INITIAL.
    SORT object_tab BY plnnr plnal vornr.
  ENDIF.

ENDFORM.                               " SELECTION_L



*&---------------------------------------------------------------------*
*&      Form  REFRESH_L
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM refresh_l USING p_selfield TYPE slis_selfield.

ENDFORM.                    "REFRESH_L



*&---------------------------------------------------------------------*
*&      Form  CHECK_MATERIAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_material.

  DATA: matnr LIKE mara-matnr.
*/--- Verprobung, ob Material prinzipiell vorhanden ist ----------------
  IF pm_werks IS INITIAL.
    SELECT SINGLE matnr
           INTO matnr
           FROM mara WHERE matnr = pm_idnrk.
    IF sy-subrc NE 0.
      MESSAGE i500.
    ENDIF.
  ELSE.
*/--- Verprobung ob angegebenes Werk ein IH-Planungswerk ist -----------
    IF plnty = 'A'.
      SELECT SINGLE * FROM  t399i WHERE  iwerk = pm_werks.
      IF NOT sy-subrc IS INITIAL.
        MESSAGE i158(ci) WITH pm_werks.
      ENDIF.
    ENDIF.

*/--- Verprobung, ob Material in angegebenem Werk gepflegt ist ---------
    CALL FUNCTION 'MARC_READ_FOR_PM'
      EXPORTING
        material_imp       = pm_idnrk
        werk_imp           = pm_werks
      EXCEPTIONS
        plant_not_found    = 1
        text_not_found     = 2
        material_not_found = 3
        other_error        = 4
        lvorm_set          = 5
        OTHERS             = 6.

    IF sy-subrc = 5.
      MESSAGE s093 WITH pm_idnrk pm_werks.
    ELSEIF sy-subrc <> 0.
      MESSAGE i067 WITH pm_idnrk pm_werks.
    ENDIF.
  ENDIF.
ENDFORM.                    " CHECK_MATERIAL

*&---------------------------------------------------------------------*
*&      Form  CHECK_VERWENDUNG_PM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_verwendung_pm.
  SELECT stlan INTO stlant-low FROM t416 WHERE pmpin = '+'.
    stlant-option = 'EQ'.
    stlant-sign   = 'I'.
    APPEND stlant.
  ENDSELECT.
ENDFORM.                    " CHECK_VERWENDUNG_PM
*&---------------------------------------------------------------------*
*&      Form  FILL_G_LISTHEADER_TAB
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM fill_g_listheader_tab.
  CLEAR g_listheader_tab. REFRESH g_listheader_tab.

  MOVE: text-010 TO header-info,
        'H' TO header-typ.
  APPEND header TO g_listheader_tab.

  CASE plnty.
    WHEN 'A'. MOVE text-007 TO header-info.
    WHEN 'E'. MOVE text-008 TO header-info.
    WHEN 'T'. MOVE text-009 TO header-info.
  ENDCASE.
  MOVE 'H' TO header-typ.
  APPEND header TO g_listheader_tab.

  MOVE: 'H' TO header-typ, '' TO header-info.
  APPEND header TO g_listheader_tab.

  CONCATENATE text-006 '  ' pm_idnrk INTO header-info.
  MOVE: 'H' TO header-typ.
  APPEND header TO g_listheader_tab.

ENDFORM.                    " FILL_G_LISTHEADER_TAB
*&---------------------------------------------------------------------*
*&      Form  CHECK_PLNST
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_plnst.
  IF NOT pm_plnst IS INITIAL.
    SELECT SINGLE *
         INTO t412_loc
         FROM t412
    WHERE plnst = pm_plnst.
    IF sy-subrc NE 0.
      MESSAGE s506 WITH pm_plnst.
      LEAVE TO TRANSACTION sy-tcode.
    ENDIF.
  ENDIF.

ENDFORM.                    " CHECK_PLNST


*&---------------------------------------------------------------------*
*&      Form  INITIALIZE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM initialize.
  SET TITLEBAR 'E01' WITH text-001.
ENDFORM.                    " INITIALIZE


*&---------------------------------------------------------------------*
*&      Form  get_t370a
*&---------------------------------------------------------------------*
FORM get_t370a.
  SELECT SINGLE * FROM t370a WHERE tcode = g_tcode.
  IF sy-subrc <> 0.
    SELECT SINGLE * FROM t370a WHERE tcode = 'IP62'.
    IF sy-subrc <> 0.
      RAISE ip62_not_in_t370a.
    ENDIF.
  ENDIF.
  g_aktyp = t370a-aktyp.
ENDFORM.                                                    " get_t370a

*Text symbol text£º
*001:Material where-used list in task list
*002:Task list type selection
*003:Selection Parameters
*004:Material where-used list
*005:Material - use in
*006:Usage of material:
*007:General task list
*008:Equipment task list
*009:Functional location task list
*010:Material where-used list in task list
*700:**** LINES 701, 702, 703 are one sentence.
*701:Cancel processing for all
*702:the objects selected that
*703:have not yet been processed?
*704:List editing canceled
*705:No
*706:Y
*ANZ:Number

*SON:Others
*Selection text£º
*PM_DATUB:        Valid-to date
*PM_DATUV:        Date valid from
*PM_IDNRK:        Material
*PM_PLNST:        Task list status
*PM_POSTP:        Item category
*PM_WERKS:        Planning plant
*STATUS:        Task list status
*TYP_ANL:        General task list
*TYP_EQU:        Equipment task list
*TYP_IFL:        Functional location task list
*VARIANT:        List version
