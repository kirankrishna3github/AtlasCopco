*&---------------------------------------------------------------------*
*& Report  ZCWU_TEST4
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  zcwu_test7.

*TYPE-POOLS : TRUXS.
*DATA : I_TAB_RAW_DATA         TYPE  TRUXS_T_TEXT_DATA.
*DATA:  GT_UPLOAD_ACC          TYPE STANDARD TABLE OF YSE_ATP_AUART.
*
*SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-002.
*PARAMETERS: P_FILE1  LIKE  RLGRAP-FILENAME OBLIGATORY
*  MODIF ID ONE DEFAULT 'C:\SAP\test_data2.xls'.
*SELECTION-SCREEN END OF BLOCK B2.
*
** Upload the Material data from the excel file
*  CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
*     EXPORTING
*       I_FIELD_SEPERATOR          = ','
*       I_LINE_HEADER              = 'X'
*       I_TAB_RAW_DATA             = I_TAB_RAW_DATA
*       I_FILENAME                 = P_FILE1
*     TABLES
*       I_TAB_CONVERTED_DATA       = GT_UPLOAD_ACC
*   EXCEPTIONS
*    CONVERSION_FAILED          = 1
*    OTHERS                     = 2
*             .
*  IF SY-SUBRC <> 0.
*    MESSAGE 'error' TYPE 'I'.
*  ENDIF.

DATA:  lt_object  TYPE STANDARD TABLE OF abaplist,
        lv_dmbtr    TYPE bsid-dmbtr,
        lv_temp   TYPE UKURS_CURR,
        lv_char   TYPE char20,
        lv_div    TYPE UKURS_CURR.

lv_temp = '8.87987'.
lv_dmbtr = '14773000'.
lv_char = '1'.
lv_div  = '0.13413'.
lv_dmbtr = lv_dmbtr * lv_temp * ( 1 / lv_div ).

SUBMIT zcwu_alv_color AND RETURN "USING SELECTION-SET  'abc'
       EXPORTING LIST TO MEMORY.
CALL FUNCTION 'LIST_FROM_MEMORY'
  TABLES
    listobject       =  lt_object
*   EXCEPTIONS
*     NOT_FOUND        = 1
*     OTHERS           = 2
          .
IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.
DATA:  list_text TYPE char1024 OCCURS 10 WITH HEADER LINE.

CALL FUNCTION 'LIST_TO_ASCI'
*   EXPORTING
*     LIST_INDEX               = -1
*     WITH_LINE_BREAK          = ' '
*   IMPORTING
*     LIST_STRING_ASCII        =
*     LIST_DYN_ASCII           =
  TABLES
    listasci                 = list_text
    listobject               = lt_object
*   EXCEPTIONS
*     EMPTY_LIST               = 1
*     LIST_INDEX_INVALID       = 2
*     OTHERS                   = 3
          .
IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.

LOOP AT  list_text.
  WRITE / list_text.
ENDLOOP.

***&---------------------------------------------------------------------*
*** PROGRAM ID:     YCNSDI16
*** PROGRAM NAME :  JDA库存信息IF
*** CONSFER DATE PROGRAMMER
*** 20151231        Wang chunhui
***&---------------------------------------------------------------------*
*** CHG req number:
*** Changed by:Wang chunhui
*** Date:20160304
*** Change description: Fix Bug（库存数据抽取条件bug）
***&---------------------------------------------------------------------*
*** CHG req number:
*** Changed by:Wang chunhui
*** Date:20160308
*** Change description: 库存数量计算逻辑变更
***&---------------------------------------------------------------------*
*** CHG req number:
*** Changed by:Wang chunhui
*** Date:20160310
*** Change description: 库存数量计算逻辑再修正
***&---------------------------------------------------------------------*
*** CHG req number:
*** Changed by:Wang chunhui
*** Date:20160311
*** Change description: 库存数量计算逻辑Bug fix
***&---------------------------------------------------------------------*
*** CHG req number:
*** Changed by:Wang chunhui
*** Date:20160321
*** Change description: performance对应
***&---------------------------------------------------------------------*
*** CHG req number:
*** Changed by:Wang chunhui
*** Date:20160328
*** Change description: Bug fix
***&---------------------------------------------------------------------*
*** CHG req number:
*** Changed by:Wang chunhui
*** Date:20160404
*** Change description:期初逻辑追加
***&---------------------------------------------------------------------*
*** CHG req number:
*** Changed by:Wang chunhui
*** Date:20160407
*** Change description:库存计算中追加减去调拨单出库确认交货数量
***&---------------------------------------------------------------------*
*** CHG req number:
*** Changed by:Wang chunhui
*** Date:20160412
*** Change description:OE/RE数量，出库预留数量变更
***&---------------------------------------------------------------------*
*** CHG req number:
*** Changed by:Wang chunhui
*** Date:20160426
*** Change description:服务器文件输出对应(文件存在的时候，追加处理)
***&---------------------------------------------------------------------*
**REPORT  ycnsdi16 NO STANDARD PAGE HEADING
**                 LINE-SIZE 280
**                 LINE-COUNT 65
**                 MESSAGE-ID zbscn.
***&---------------------------------------------------------------------*
***&       TYPE DEFINITION
***&---------------------------------------------------------------------*
**TYPES:
*****20160407 ADD Wangchunhui START
**  BEGIN OF typ_po,
**    ebeln   TYPE ekpo-ebeln,
**    ebelp   TYPE ekpo-ebelp,
**    reswk   TYPE ekko-reswk,
**    werks   TYPE ekpo-werks,
**    matnr   TYPE ekpo-matnr,
**    zekkn   TYPE ekbe-zekkn,
**    vgabe   TYPE ekbe-vgabe,
**    gjahr   TYPE ekbe-gjahr,
**    belnr   TYPE ekbe-belnr,
**    buzei   TYPE ekbe-buzei,
**    budat   TYPE ekbe-budat,
**    menge   TYPE ekbe-menge,
**    xblnr   TYPE ekbe-xblnr,
**    vbeln   TYPE lips-vbeln,
**    posnr   TYPE lips-posnr,
**  END OF typ_po,
**
**  BEGIN OF typ_mara,
**    matnr   TYPE mara-matnr,
**    spart   TYPE mara-spart,
**    mvgr2   TYPE mvke-mvgr2,
**  END OF typ_mara,
*****20160407 ADD Wangchunhui END
**  BEGIN OF typ_object,
**    prodh       TYPE ycnmmt04-prodh,      "P-Code
**    werks       TYPE ycnmmt04-werks,      "plant
*****20160404 ADD Wangchunhui START
**    lgort       TYPE ycnmmt04-lgort,      "Stock Loc.
*****20160404 ADD Wangchunhui END
*****20160407 ADD Wangchunhui START
**    spart       TYPE mara-spart,          "Product Group
**    vtweg       TYPE ycnmmt04-vtweg,
*****20160407 ADD Wangchunhui END
**    menge_b     TYPE ycnmmt04-menge,      "Inventory before netting
**    menge_a     TYPE ycnmmt04-menge,      "Inventory after netting
**  END OF typ_object,
**
**  BEGIN OF typ_so_info,
**    vbeln     TYPE lips-vbeln,          "Deliver No.
**    posnn     TYPE lips-posnr,
**    vtweg     TYPE vbak-vtweg,
**  END OF typ_so_info,
**
**  BEGIN OF  typ_sum_t04,
**    werks       TYPE ycnmmt04-werks,      "plant
**    lgort       TYPE ycnmmt04-lgort,      "Stock Loc.
**    spart       TYPE mara-spart,          "Product Group
**    vtweg       TYPE ycnmmt04-vtweg,      "
**    prodh       TYPE ycnmmt04-prodh,      "P-Code
**    stoqf       TYPE ycnmmt04-stoqf,      "Stock div
**    stodate     TYPE ycnmmt04-stodate,    "Date
**    menge_ok    TYPE ycnmmt04-menge,      "Quantity
**    menge_hold  TYPE ycnmmt04-menge,      "Quantity
**    menge_ng    TYPE ycnmmt04-menge,      "Quantity
**  END OF typ_sum_t04,
**
**  BEGIN OF  typ_sum_t06,
**    werks       TYPE ycnmmt06-werks,      "plant
**    lgort       TYPE ycnmmt06-lgort,      "Stock Loc.
**    spart       TYPE mara-spart,          "Product Group
**    vtweg       TYPE ycnmmt06-vtweg,      "
**    stopf       TYPE ycnmmt06-stopf,      "Stock type
**    stotp       TYPE ycnmmt06-stotp,      "Move type
**    stodate     TYPE ycnmmt06-stodate,    "Date
**    stodf       TYPE ycnmmt06-stodf,      "inbound/outbound
**    prodh       TYPE ycnmmt06-prodh,      "P-Code
**    menge       TYPE ycnmmt06-menge,      "Quantity
**  END OF typ_sum_t06,
**
**  BEGIN OF typ_sum_lips,
**    werks       TYPE lips-werks,          "Plant
**    lgort       TYPE lips-lgort,          "Storage Location
**    spart       TYPE mara-spart,          "Product Group
**    vtweg       TYPE ycnmmt05-vtweg,      "
**    matnr       TYPE lips-matnr,          "Material
*****20160308 DEL Wangchunhui START
***    LFIMG       TYPE LIPS-LFIMG,          "Quantity
*****20160308 DEL Wangchunhui END
*****20160310 ADD Wangchunhui START
**    lfimg       TYPE lips-lfimg,          "Quantity
*****20160310 ADD Wangchunhui END
**    lfimg_fix   TYPE lips-lfimg,          "Quantity
*****20160308 DEL Wangchunhui START
***    LFIMG_DELAY TYPE LIPS-LFIMG,          "Quantity
*****20160308 DEL Wangchunhui END
**  END OF typ_sum_lips,
**
**  BEGIN OF typ_lips,
**    werks     TYPE lips-werks,          "Plant
**    lgort     TYPE lips-lgort,          "Storage Location
**    spart     TYPE mara-spart,          "Product Group
**    vtweg     TYPE ycnmmt05-vtweg,      "
**    matnr     TYPE lips-matnr,          "Material
**    vbeln     TYPE lips-vbeln,          "Deliver No.
**    posnr     TYPE lips-posnr,          "item No.
**    wadat     TYPE likp-wadat,          "Plan GI date
**    wadat_ist TYPE likp-wadat_ist,      "Actual GI date
**    lfdat     TYPE likp-lfdat,          "Delivery Date
**    lfimg     TYPE lips-lfimg,          "Quantity
**    wbsta     TYPE vbup-wbsta,          "Status
**  END OF typ_lips,
**
**  BEGIN OF typ_ycnmmt04,
**    werks   TYPE ycnmmt04-werks,      "plant
**    lgort   TYPE ycnmmt04-lgort,      "Stock Loc.
**    spart   TYPE mara-spart,          "Product Group
**    vtweg   TYPE ycnmmt04-vtweg,      "
**    prodh   TYPE ycnmmt04-prodh,      "P-Code
**    stoqf   TYPE ycnmmt04-stoqf,      "Stock div
**    stopf   TYPE ycnmmt04-stopf,      "Stock div
**    stodf   TYPE ycnmmt04-stodf,      "inbound/outbound
**    stodate TYPE ycnmmt04-stodate,    "Date
**    menge   TYPE ycnmmt04-menge,      "Quantity
**  END OF typ_ycnmmt04,
**
**  BEGIN OF typ_ycnmmt06,
**    werks   TYPE ycnmmt06-werks,      "plant
**    lgort   TYPE ycnmmt06-lgort,      "Stock Loc.
**    spart   TYPE mara-spart,          "Product Group
**    vtweg   TYPE ycnmmt06-vtweg,      "
**    prodh   TYPE ycnmmt06-prodh,      "P-Code
**    stopf   TYPE ycnmmt06-stopf,      "Stock type
**    stotp   TYPE ycnmmt06-stotp,      "Move type
**    stodate TYPE ycnmmt06-stodate,    "Date
**    stodf   TYPE ycnmmt06-stodf,      "inbound/outbound
**    menge   TYPE ycnmmt06-menge,      "Quantity
**    ymblnr  TYPE ycnmmt06-ymblnr,     "Stock No.
**    yzeile  TYPE ycnmmt06-yzeile,     "Stock item No.
**  END OF typ_ycnmmt06,
**
**  BEGIN OF typ_ycnmmt08,
**    werks   TYPE ycnmmt08-werks,      "plant
**    lgort   TYPE ycnmmt08-lgort,      "Stock Loc.
**    spart   TYPE mara-spart,          "Product Group
**    vtweg   TYPE ycnmmt08-vtweg,      "
**    prodh   TYPE ycnmmt08-prodh,      "P-Code
**    stoqf   TYPE ycnmmt08-stoqf,      "Stock div
**    stopf   TYPE ycnmmt08-stopf,      "Stock type
**    stodf   TYPE ycnmmt08-stodf,      "inbound/outbound
**    calcdate TYPE ycnmmt08-calcdate,  "Date of stock
**    menge   TYPE ycnmmt08-menge,      "Quantity
**  END OF typ_ycnmmt08,
**
**  BEGIN OF typ_master,
**    matnr TYPE mara-matnr,             "Material
**    werks TYPE marc-werks,             "Plant
**  END OF typ_master,
**
**  BEGIN OF typ_lgort,
**    werks TYPE t001l-werks,            "Plant
**    lgort TYPE t001l-lgort,            "Stock Loc.
**  END OF typ_lgort,
**
**  BEGIN OF typ_screen,
**    werks TYPE t001l-werks,            "Plant
**    lgort TYPE t001l-lgort,            "Stock Loc.
**    spart TYPE mara-spart,             "Product Group
**    mvgr2 TYPE mvke-mvgr2,             "type
**    matnr TYPE mara-matnr,             "Material
**    dats  TYPE datum,                  "Date
**  END OF typ_screen,
**
**  BEGIN OF typ_file,
**    line  TYPE string,
**  END OF typ_file,
**
*****20160407 ADD Wangchunhui START
**  typ_tab_po       TYPE STANDARD TABLE OF typ_po,
*****20160407 ADD Wangchunhui END
**  typ_tab_master   TYPE STANDARD TABLE OF typ_master,
**  typ_tab_sum_t04  TYPE STANDARD TABLE OF typ_sum_t04,
**  typ_tab_sum_t06  TYPE STANDARD TABLE OF typ_sum_t06,
**  typ_tab_sum_lips TYPE STANDARD TABLE OF typ_sum_lips,
**  typ_tab_lips     TYPE STANDARD TABLE OF typ_lips,
**  typ_tab_ycnmmt04 TYPE STANDARD TABLE OF typ_ycnmmt04,
**  typ_tab_ycnmmt06 TYPE STANDARD TABLE OF typ_ycnmmt06,
**  typ_tab_ycnmmt08 TYPE STANDARD TABLE OF typ_ycnmmt08,
**  typ_tab_file     TYPE STANDARD TABLE OF typ_file.
**
***&---------------------------------------------------------------------*
***&       DATA DEFINITION
***&---------------------------------------------------------------------*
**DATA:
**  st_screen TYPE typ_screen.
**
**CONSTANTS:
**  cns_wbsta_c     TYPE vbup-wbsta     VALUE 'C',
**  cns_oe          TYPE vbak-vtweg     VALUE 'OE',
**  cns_re          TYPE vbak-vtweg     VALUE 'RE',
**  cns_vtweg_oe    TYPE ycnmmt04-vtweg VALUE 'OE',
**  cns_vtweg_rep   TYPE ycnmmt04-vtweg VALUE 'REP',
**  cns_stoqf_a     TYPE ycnmmt04-stoqf VALUE 'A',
**  cns_stopf_ok    TYPE ycnmmt04-stopf VALUE '11',
**  cns_stopf_hold  TYPE ycnmmt04-stopf VALUE '21',
**  cns_stopf_ng    TYPE ycnmmt04-stopf VALUE '31',
**  cns_stodf_in    TYPE ycnmmt04-stodf VALUE 'IN',
**  cns_stodf_out   TYPE ycnmmt04-stodf VALUE 'OUT',
**  cns_stotp_11    TYPE ycnmmt06-stotp VALUE '11',
**  cns_stotp_12    TYPE ycnmmt06-stotp VALUE '12',
**  cns_stotp_13    TYPE ycnmmt06-stotp VALUE '13',
**  cns_stotp_14    TYPE ycnmmt06-stotp VALUE '14',
**  cns_stotp_15    TYPE ycnmmt06-stotp VALUE '15',
**  cns_stotp_16    TYPE ycnmmt06-stotp VALUE '16',
**  cns_stotp_17    TYPE ycnmmt06-stotp VALUE '17',
**  cns_stotp_18    TYPE ycnmmt06-stotp VALUE '18',
**  cns_stotp_19    TYPE ycnmmt06-stotp VALUE '19',
**  cns_stotp_20    TYPE ycnmmt06-stotp VALUE '20',
**  cns_stotp_21    TYPE ycnmmt06-stotp VALUE '21',
**  cns_spart_psr   TYPE mara-spart     VALUE 'T1',
**  cns_spart_tbr   TYPE mara-spart     VALUE 'T2',
**  cns_vbtyp_return TYPE likp-vbtyp     VALUE 'H',
**  cns_vbtyp_n     TYPE vbfa-vbtyp_n    VALUE 'J',
**  cns_plan_days    TYPE ycnmmt07-numb  VALUE '18',
**  cns_key_word    TYPE c LENGTH 8 VALUE 'YYYYMMDD',
**  cns_tab         TYPE c VALUE cl_abap_char_utilities=>horizontal_tab.
**
***&---------------------------------------------------------------------*
***&       SELECTION-SCREEN
***&---------------------------------------------------------------------*
**INITIALIZATION.
**  PARAMETERS:
**    p_vkorg TYPE tvko-vkorg DEFAULT 'CN00' OBLIGATORY.
**  SELECT-OPTIONS:
**    s_werks FOR st_screen-werks,             "Plant
**    s_lgort FOR st_screen-lgort,             "Stock Loc.
**    s_spart FOR st_screen-spart,             "Product Group
**    s_mvgr2 FOR st_screen-mvgr2,             "Type
**    s_matnr FOR st_screen-matnr.             "Material
**  PARAMETERS:
**    p_dats  TYPE  sy-datum OBLIGATORY DEFAULT sy-datum,  "Date
**    p_lpath TYPE  rlgrap-filename OBLIGATORY.
**
*** Set Stock Loc.
**  PERFORM frm_set_lgort.
**
*** Set Product Group
**  PERFORM frm_set_spart.
**
*** Set Product Type
**  PERFORM frm_set_mvgr2.
**
***&---------------------------------------------------------------------*
***&       AT SELECTION-SCREEN.
***&---------------------------------------------------------------------*
**AT SELECTION-SCREEN.
*** Check Input
**  PERFORM frm_check_input.
**
***&---------------------------------------------------------------------*
***&       AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_LPATH
***&---------------------------------------------------------------------*
**AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_lpath.
*** Get local file name
**  PERFORM f_getpath.
**
***&---------------------------------------------------------------------*
***&       START-OF-SELECTION
***&---------------------------------------------------------------------*
**START-OF-SELECTION.
*** Main process
**  PERFORM frm_main_proc.
**
***&---------------------------------------------------------------------*
***&      Form  F_GETPATH
***&---------------------------------------------------------------------*
***       text
***----------------------------------------------------------------------*
**FORM f_getpath .
**
**  CALL FUNCTION 'F4_FILENAME'
**    EXPORTING
**      program_name  = syst-cprog
**      dynpro_number = syst-dynnr
**    IMPORTING
**      file_name     = p_lpath.
**
**ENDFORM.                    " F_GETPATH
***&---------------------------------------------------------------------*
***&      Form  FRM_SET_LGORT
***&---------------------------------------------------------------------*
***       Set Stock Loc.
***----------------------------------------------------------------------*
**FORM frm_set_lgort .
**
**  IF s_lgort[] IS INITIAL .
**    s_lgort-sign   = 'E'.
**    s_lgort-option = 'EQ'.
**    s_lgort-low    = 'OETJ'.
**    APPEND s_lgort TO s_lgort.
**
**    s_lgort-sign   = 'E'.
**    s_lgort-option = 'EQ'.
**    s_lgort-low    = 'OEWX'.
**    APPEND s_lgort TO s_lgort.
**  ENDIF.
**ENDFORM.                    " FRM_SET_LGORT
***&---------------------------------------------------------------------*
***&      Form  FRM_SET_SPART
***&---------------------------------------------------------------------*
***       Set Product Group
***----------------------------------------------------------------------*
**FORM frm_set_spart .
**
**  IF s_spart[] IS INITIAL.
**    s_spart-sign   = 'I'.
**    s_spart-option = 'BT'.
**    s_spart-low    = 'T1'.
**    s_spart-high   = 'T2'.
**    APPEND s_spart TO s_spart.
**  ENDIF.
**ENDFORM.                    " FRM_SET_SPART
***&---------------------------------------------------------------------*
***&      Form  FRM_SET_MVGR2
***&---------------------------------------------------------------------*
***       Set Product Type
***----------------------------------------------------------------------*
**FORM frm_set_mvgr2 .
**
**  IF s_mvgr2[] IS INITIAL.
**    s_mvgr2-sign   = 'I'.
**    s_mvgr2-option = 'EQ'.
***   SetTire
**    s_mvgr2-low = '1'.
**    APPEND s_mvgr2 TO s_mvgr2.
***   Tire
**    s_mvgr2-low = '3'.
**    APPEND s_mvgr2 TO s_mvgr2.
**  ENDIF.
**
**ENDFORM.                    " FRM_SET_MVGR2
**
***&---------------------------------------------------------------------*
***&      Form  FRM_CHECK_INPUT
***&---------------------------------------------------------------------*
***       Check Input
***----------------------------------------------------------------------*
**FORM frm_check_input .
**
*** Check Sales Organization
**  PERFORM frm_check_vkorg.
**
*** Check Plant
**  PERFORM frm_check_werks.
**
*** Check Stock Loc.
**  PERFORM frm_check_lgort.
**
*** Check Product Group
**  PERFORM frm_check_spart.
**
*** Check Product Type
**  PERFORM frm_check_mvgr2.
**
*** Check Material
**  PERFORM frm_check_matnr.
**
**ENDFORM.                    " FRM_CHECK_INPUT
***&---------------------------------------------------------------------*
***&      Form  FRM_CHECK_VKORG
***&---------------------------------------------------------------------*
***       Check Sales Organization
***----------------------------------------------------------------------*
**FORM frm_check_vkorg .
**
**  DATA:
**    lw_vkorg TYPE tvko-vkorg.
**
**  SELECT SINGLE vkorg
**    INTO lw_vkorg
**    FROM tvko
**   WHERE vkorg = p_vkorg.
**  IF sy-subrc <> 0.
***   Display the error message
**    SET CURSOR FIELD 'P_VKORG'.
**    MESSAGE e041 WITH text-m01 p_vkorg.
**  ENDIF.
**ENDFORM.                    " FRM_CHECK_VKORG
***&---------------------------------------------------------------------*
***&      Form  FRM_CHECK_LGORT
***&---------------------------------------------------------------------*
***       Check Stock Loc.
***----------------------------------------------------------------------*
**FORM frm_check_lgort .
**  DATA:
**    lst_lgort TYPE typ_lgort.
**
**  IF s_lgort[] IS NOT INITIAL.
**    SELECT SINGLE
**           werks
**           lgort
**      INTO lst_lgort
**      FROM t001l
**     WHERE werks IN s_werks
**       AND lgort IN s_lgort.
**    IF sy-subrc <> 0.
***     Display the error message
**      SET CURSOR FIELD 'S_LGORT-LOW'.
**      MESSAGE e041 WITH text-m04 space.
**    ENDIF.
**  ENDIF.
**ENDFORM.                    " FRM_CHECK_LGORT
***&---------------------------------------------------------------------*
***&      Form  FRM_CHECK_SPART
***&---------------------------------------------------------------------*
***       Check Product Group
***----------------------------------------------------------------------*
**FORM frm_check_spart .
**  DATA:
**    lw_spart TYPE tspa-spart.
**
**  IF s_spart[] IS NOT INITIAL.
**    SELECT SINGLE spart
**      INTO lw_spart
**      FROM tspa
**     WHERE spart IN s_spart.
**    IF sy-subrc <> 0.
***     Display the error message
**      SET CURSOR FIELD 'S_SPART-LOW'.
**      MESSAGE e041 WITH text-m05 space.
**    ENDIF.
**  ENDIF.
**ENDFORM.                    " FRM_CHECK_SPART
**
***&---------------------------------------------------------------------*
***&      Form  FRM_CHECK_MVGR2
***&---------------------------------------------------------------------*
***       Check Product Type
***----------------------------------------------------------------------*
**FORM frm_check_mvgr2 .
**
**  DATA:
**    ltd_mvgr2 TYPE STANDARD TABLE OF tvm2.
**
**  IF s_mvgr2[] IS NOT INITIAL.
**    SELECT *
**      INTO TABLE ltd_mvgr2
**      FROM tvm2
**     WHERE mvgr2 IN s_mvgr2.
**    IF sy-subrc <> 0.
***     Display the error message
**      SET CURSOR FIELD 'S_MVGR2-LOW'.
**      MESSAGE e041 WITH text-m06 space.
**    ENDIF.
**  ENDIF.
**ENDFORM.                    " FRM_CHECK_MVGR2
***&---------------------------------------------------------------------*
***&      Form  FRM_CHECK_MATNR
***&---------------------------------------------------------------------*
***       Check Material
***----------------------------------------------------------------------*
**FORM frm_check_matnr .
**
**  DATA:
**    lw_matnr TYPE mara-matnr.
**
**  IF s_matnr[] IS NOT INITIAL.
**    SELECT SINGLE matnr
**      INTO lw_matnr
**      FROM mara
**     WHERE matnr IN s_matnr.
**    IF sy-subrc <> 0.
***     Display the error message
**      SET CURSOR FIELD 'S_MATNR-LOW'.
**      MESSAGE e041 WITH text-m07 space.
**    ENDIF.
**  ENDIF.
**ENDFORM.                    " FRM_CHECK_MATNR
***&---------------------------------------------------------------------*
***&      Form  FRM_MAIN_PROC
***&---------------------------------------------------------------------*
***       Main process
***----------------------------------------------------------------------*
**FORM frm_main_proc .
**  DATA:
*****20160407 ADD Wangchunhui START
**    ltd_lips_tr     TYPE typ_tab_lips,
**    ltd_sum_lips_tr TYPE typ_tab_sum_lips,
*****20160407 ADD Wangchunhui END
**    lw_plan_days  TYPE i,
**    lw_start_date TYPE sy-datum,
**    lw_end_date   TYPE sy-datum,
**    lst_ycnmmt08  TYPE typ_ycnmmt08,
**    ltd_file      TYPE typ_tab_file,
**    ltd_sum_t04   TYPE typ_tab_sum_t04,
**    ltd_master    TYPE typ_tab_master,
**    ltd_lips      TYPE typ_tab_lips,
**    ltd_ycnmmt04  TYPE typ_tab_ycnmmt04,
**    ltd_ycnmmt06  TYPE typ_tab_ycnmmt06,
**    ltd_ycnmmt08  TYPE typ_tab_ycnmmt08.
**
*** Get days info from YCNMMT07
**  PERFORM frm_get_days USING cns_plan_days
**                             text-m08
**                    CHANGING lw_plan_days.
**
*** Get SAP master data
**  PERFORM frm_get_master CHANGING ltd_master.
**
*** Get the Initial stock
**  PERFORM frm_sel_ycnmmt08 USING ltd_master
**                        CHANGING ltd_ycnmmt08.
**
**  READ TABLE ltd_ycnmmt08 INTO lst_ycnmmt08 INDEX 1.
**  IF sy-subrc = 0.
**    lw_start_date = lst_ycnmmt08-calcdate + 1.
**  ELSE.
**    CONCATENATE sy-datum+0(4) '0101' INTO lw_start_date.
**  ENDIF.
**
*** Get Stock data
**  PERFORM frm_sel_ycnmmt04 USING lw_start_date
**                                 ltd_master
**                        CHANGING ltd_ycnmmt04.
**
*** Sum the data of YCNMMT04
**  PERFORM frm_sum_ycnmmt04 USING ltd_ycnmmt04
**                                 ltd_ycnmmt08
**                        CHANGING ltd_sum_t04.
**
*** Get Stock move data
**  PERFORM frm_sel_ycnmmt06 USING lw_start_date
**                                 lw_plan_days
**                                 ltd_sum_t04
**                        CHANGING ltd_ycnmmt06.
**
*** Get SAP Deliver data
**  PERFORM frm_sel_likp_lips USING lw_start_date
*****20160310 UPD Wangchunhui START
***                                  LTD_SUM_T04
**                                  ltd_master
*****20160310 UPD Wangchunhui END
**                         CHANGING ltd_lips.
**
*****20160407 ADD Wangchunhui START
*** Get the Deliver data for transfer orders
**  PERFORM frm_get_dn_for_trans USING lw_start_date
**                            CHANGING ltd_lips_tr.
**
*** Sum the Deliver data for transfer orders
**  PERFORM frm_sum_dn_for_trans USING lw_start_date
**                                     ltd_lips_tr
**                            CHANGING ltd_sum_lips_tr.
*****20160407 ADD Wangchunhui END
**
*** Edit file
**  PERFORM frm_edit_file USING ltd_sum_t04
**                              ltd_ycnmmt06
**                              ltd_lips
**                              lw_start_date
**                              lw_plan_days
*****20160407 ADD Wangchunhui START
**                              ltd_sum_lips_tr
*****20160407 ADD Wangchunhui END
**                     CHANGING ltd_file.
**
*** Download file
**  PERFORM frm_download USING ltd_file.
**
**ENDFORM.                    " FRM_MAIN_PROC
***&---------------------------------------------------------------------*
***&      Form  FRM_GET_MASTER
***&---------------------------------------------------------------------*
***       Get SAP master data
***----------------------------------------------------------------------*
***      <--O_T_MASTER  master data
***----------------------------------------------------------------------*
**FORM frm_get_master CHANGING o_t_master TYPE typ_tab_master.
**
**  SELECT mara~matnr
**         marc~werks
**    INTO TABLE o_t_master
**    FROM mara
**    INNER JOIN marc
**      ON mara~matnr = marc~matnr
**    INNER JOIN mvke
**      ON mara~matnr = mvke~matnr
**   WHERE mvke~vkorg = p_vkorg
**     AND mvke~mvgr2 IN s_mvgr2
**     AND mara~matnr IN s_matnr
**     AND mara~spart IN s_spart
**     AND marc~werks IN s_werks
**     AND mara~lvorm = space
**     AND marc~lvorm = space.
**  IF sy-subrc = 0.
**    SORT o_t_master BY matnr ASCENDING
**                       werks ASCENDING.
**    DELETE ADJACENT DUPLICATES FROM o_t_master
**      COMPARING matnr werks.
**  ELSE.
**    IF sy-batch IS INITIAL.
***     Display the Error message
**      MESSAGE s039 DISPLAY LIKE 'E'.
**      LEAVE LIST-PROCESSING.
**    ELSE.
***     Display the Error message
**      MESSAGE e039.
**    ENDIF.
**  ENDIF.
**ENDFORM.                    " FRM_GET_MASTER
***&---------------------------------------------------------------------*
***&      Form  FRM_SEL_YCNMMT08
***&---------------------------------------------------------------------*
***       Get the Initial stock
***----------------------------------------------------------------------*
***      <--O_T_YCNMMT08  Initial stock
***----------------------------------------------------------------------*
**FORM frm_sel_ycnmmt08 USING i_t_master   TYPE typ_tab_master
**                   CHANGING o_t_ycnmmt08 TYPE typ_tab_ycnmmt08.
*****20160404 ADD Wangchunhui START
**  DATA:
**    lst_ycnmmt08 TYPE typ_ycnmmt08.
*****20160404 ADD Wangchunhui END
**  SELECT t08~werks      "plant
**         t08~lgort      "Stock Loc.
**         mara~spart          "Product Group
**         t08~vtweg      "
**         t08~prodh      "P-Code
**         t08~stoqf      "Stock div
**         t08~stopf      "Stock type
**         t08~stodf      "inbound/outbound
**         t08~calcdate   "Date of stock
**         t08~menge      "Quantity
**    INTO TABLE o_t_ycnmmt08
**    FROM ycnmmt08 AS t08
**    INNER JOIN mara
**      ON t08~prodh = mara~matnr
**    FOR ALL entries IN i_t_master
**   WHERE t08~werks = i_t_master-werks
**     AND t08~lgort IN s_lgort
**     AND t08~prodh = i_t_master-matnr
**     AND t08~stoqf = cns_stoqf_a
**     AND t08~calcdate <= p_dats
**     AND ( mara~spart = cns_spart_psr
**      OR   mara~spart = cns_spart_tbr ).
*****20160407 UPD Wangchunhui START
***  SORT O_T_YCNMMT08 BY WERKS ASCENDING
***                       LGORT ASCENDING
***                       SPART ASCENDING
***                       VTWEG ASCENDING
***                       PRODH ASCENDING
***                       STOQF ASCENDING
***                       STOPF ASCENDING
***                       STODF ASCENDING
***                       CALCDATE DESCENDING.
**  SORT o_t_ycnmmt08 BY calcdate DESCENDING.
*****20160407 UPD Wangchunhui END
*****20160404 ADD Wangchunhui START
**  READ TABLE o_t_ycnmmt08 INTO lst_ycnmmt08 INDEX 1.
**  DELETE o_t_ycnmmt08 WHERE calcdate <> lst_ycnmmt08-calcdate.
*****20160404 ADD Wangchunhui END
*****20160407 ADD Wangchunhui START
**  SORT o_t_ycnmmt08 BY werks ASCENDING
**                       lgort ASCENDING
**                       spart ASCENDING
**                       vtweg ASCENDING
**                       prodh ASCENDING
**                       stoqf ASCENDING
**                       stopf ASCENDING
**                       stodf ASCENDING
**                       calcdate DESCENDING.
*****20160407 ADD Wangchunhui END
**ENDFORM.                    " FRM_SEL_YCNMMT08
***&---------------------------------------------------------------------*
***&      Form  FRM_SEL_YCNMMT04
***&---------------------------------------------------------------------*
***       Get Stock data
***----------------------------------------------------------------------*
***      -->I_W_START_DATE  The start date
***      <--O_T_YCNMMT04    Stock data
***----------------------------------------------------------------------*
**FORM frm_sel_ycnmmt04 USING i_w_start_date TYPE sy-datum
**                            i_t_master     TYPE typ_tab_master
**                   CHANGING o_t_ycnmmt04   TYPE typ_tab_ycnmmt04.
**  DATA:
**    lw_end_date   TYPE sy-datum.
**
*****20160304 ADD Wangchunhui START
**  IF i_w_start_date > p_dats.
**    RETURN.
**  ENDIF.
*****20160304 ADD Wangchunhui END
*****20160304 UPD Wangchunhui START
***  LW_END_DATE = P_DATS - 1.
**  lw_end_date = p_dats.
*****20160304 UPD Wangchunhui END
*** Get the data of YCNMMT04
**  SELECT t04~werks       "plant
**         t04~lgort       "Stock Loc.
**         mara~spart      "Product Group
**         t04~vtweg       "
**         t04~prodh       "P-Code
**         t04~stoqf       "Stock div
**         t04~stopf       "Stock div
**         t04~stodf       "Stock in/out div
**         t04~stodate     "Date
**         t04~menge       "Quantity
**    INTO TABLE o_t_ycnmmt04
**    FROM ycnmmt04 AS t04
**    INNER JOIN mara
**      ON t04~prodh = mara~matnr
**    FOR ALL entries IN i_t_master
**   WHERE t04~werks = i_t_master-werks
**     AND t04~lgort IN s_lgort
**     AND t04~prodh = i_t_master-matnr
**     AND t04~stoqf =  cns_stoqf_a
**     AND t04~stodf =  cns_stodf_in
**     AND t04~stodate >= i_w_start_date
**     AND t04~stodate <= lw_end_date
**     AND mara~spart IN s_spart.
**  IF sy-subrc = 0.
**    SORT o_t_ycnmmt04 BY werks ASCENDING
**                         lgort ASCENDING
**                         spart ASCENDING
**                         vtweg ASCENDING
**                         prodh ASCENDING
**                         stoqf ASCENDING
**                         stopf ASCENDING
**                         stodate ASCENDING.
**  ENDIF.
**ENDFORM.                    " FRM_SEL_YCNMMT04
***&---------------------------------------------------------------------*
***&      Form  FRM_SUM_YCNMMT04
***&---------------------------------------------------------------------*
***       Sum the data of YCNMMT04
***----------------------------------------------------------------------*
***      -->I_T_YCNMMT04  Stock data
***      -->I_T_YCNMMT08  Initial Stock data
***      <--O_T_SUM_T04   Sum of the inbound Stock
***----------------------------------------------------------------------*
**FORM frm_sum_ycnmmt04 USING i_t_ycnmmt04 TYPE typ_tab_ycnmmt04
**                            i_t_ycnmmt08 TYPE typ_tab_ycnmmt08
**                   CHANGING o_t_sum_t04  TYPE typ_tab_sum_t04.
*** Local variants
**  DATA:
**    lw_ed_date     TYPE sy-datum,
**    lw_menge_input TYPE menge_d,
**    lst_sum_t04    TYPE typ_sum_t04,
**    lst_t08_hold   TYPE typ_ycnmmt08,
**    lst_t08_ng     TYPE typ_ycnmmt08,
**    lst_t04_tmp    TYPE typ_ycnmmt04,
**    lst_ycnmmt04   TYPE typ_ycnmmt04,
**    lst_ycnmmt08   TYPE typ_ycnmmt08.
**
**  lw_ed_date = p_dats - 1.
*** Sum the Actual
**  LOOP AT i_t_ycnmmt04 INTO lst_t04_tmp.
**    lst_ycnmmt04 = lst_t04_tmp.
**
**    IF lst_ycnmmt04-stodf = cns_stodf_out.
**      lst_ycnmmt04-menge = lst_ycnmmt04-menge * -1.
**    ENDIF.
**
**    TRY.
***     Sum the actual input
**        lw_menge_input = lw_menge_input + lst_ycnmmt04-menge.
**      CATCH cx_sy_arithmetic_overflow.
***     When the overflow occurrs，display the error message
**        IF sy-batch IS INITIAL.
**          MESSAGE s036 DISPLAY LIKE 'E'.
**          LEAVE LIST-PROCESSING.
**        ELSE.
**          MESSAGE e036.
**        ENDIF.
**    ENDTRY.
**
**    AT END OF stoqf.
***     Get the Initial balance of OK
**      READ TABLE i_t_ycnmmt08 INTO lst_ycnmmt08
**        WITH KEY werks = lst_ycnmmt04-werks
**                 lgort = lst_ycnmmt04-lgort
**                 spart = lst_ycnmmt04-spart
**                 vtweg = lst_ycnmmt04-vtweg
**                 prodh = lst_ycnmmt04-prodh
**                 stoqf = cns_stoqf_a
**                 stopf = cns_stopf_ok
**                 BINARY SEARCH.
**
***     Get the Initial balance of NG
**      READ TABLE i_t_ycnmmt08 INTO lst_t08_ng
**        WITH KEY werks = lst_ycnmmt04-werks
**                 lgort = lst_ycnmmt04-lgort
**                 spart = lst_ycnmmt04-spart
**                 vtweg = lst_ycnmmt04-vtweg
**                 prodh = lst_ycnmmt04-prodh
**                 stoqf = cns_stoqf_a
**                 stopf = cns_stopf_ng
**                 BINARY SEARCH.
**
***     Get the Initial balance of HOLD
**      READ TABLE i_t_ycnmmt08 INTO lst_t08_hold
**        WITH KEY werks = lst_ycnmmt04-werks
**                 lgort = lst_ycnmmt04-lgort
**                 spart = lst_ycnmmt04-spart
**                 vtweg = lst_ycnmmt04-vtweg
**                 prodh = lst_ycnmmt04-prodh
**                 stoqf = cns_stoqf_a
**                 stopf = cns_stopf_hold
**                 BINARY SEARCH.
**      TRY.
***       Calculate the Actual Stock
**          lw_menge_input = lw_menge_input
**                         + lst_ycnmmt08-menge.
**        CATCH cx_sy_arithmetic_overflow.
***       When the overflow occurrs，display the error message
**          IF sy-batch IS INITIAL.
**            MESSAGE s036 DISPLAY LIKE 'E'.
**            LEAVE LIST-PROCESSING.
**          ELSE.
**            MESSAGE e036.
**          ENDIF.
**      ENDTRY.
**
**      lst_sum_t04-werks       = lst_ycnmmt04-werks.
**      lst_sum_t04-lgort       = lst_ycnmmt04-lgort.
**      lst_sum_t04-spart       = lst_ycnmmt04-spart.
**      lst_sum_t04-vtweg       = lst_ycnmmt04-vtweg.
**      lst_sum_t04-prodh       = lst_ycnmmt04-prodh.
**      lst_sum_t04-stoqf       = lst_ycnmmt04-stoqf.
**      lst_sum_t04-menge_ok    = lw_menge_input.
**      lst_sum_t04-menge_hold  = lst_t08_hold-menge.
**      lst_sum_t04-menge_ng    = lst_t08_ng-menge.
**
**      APPEND lst_sum_t04 TO o_t_sum_t04.
**
***     Clear the local variants
**      CLEAR:
**        lst_ycnmmt08,
**        lst_t08_hold,
**        lst_t08_ng,
**        lst_sum_t04,
**        lw_menge_input.
**    ENDAT.
**  ENDLOOP.
*****20160308 DEL Wangchunhui START
***  IF SY-SUBRC <> 0.
*****20160308 DEL Wangchunhui END
**  LOOP AT i_t_ycnmmt08 INTO lst_ycnmmt08
**    WHERE stopf = cns_stopf_ok.
**    CLEAR:
**      lst_t08_ng,
**      lst_t08_hold.
*****20160308 ADD Wangchunhui START
**    READ TABLE o_t_sum_t04 TRANSPORTING NO FIELDS
**      WITH KEY werks       = lst_ycnmmt08-werks
**               lgort       = lst_ycnmmt08-lgort
**               spart       = lst_ycnmmt08-spart
**               vtweg       = lst_ycnmmt08-vtweg
**               prodh       = lst_ycnmmt08-prodh.
**    IF sy-subrc = 0.
**      CONTINUE.
**    ENDIF.
*****20160308 ADD Wangchunhui END
**
***     Get the Initial balance of NG
**    READ TABLE i_t_ycnmmt08 INTO lst_t08_ng
**      WITH KEY werks = lst_ycnmmt08-werks
**               lgort = lst_ycnmmt08-lgort
**               spart = lst_ycnmmt08-spart
**               vtweg = lst_ycnmmt08-vtweg
**               prodh = lst_ycnmmt08-prodh
**               stoqf = cns_stoqf_a
**               stopf = cns_stopf_ng
**               BINARY SEARCH.
**
***     Get the Initial balance of HOLD
**    READ TABLE i_t_ycnmmt08 INTO lst_t08_hold
**      WITH KEY werks = lst_ycnmmt08-werks
**               lgort = lst_ycnmmt08-lgort
**               spart = lst_ycnmmt08-spart
**               vtweg = lst_ycnmmt08-vtweg
**               prodh = lst_ycnmmt08-prodh
**               stoqf = cns_stoqf_a
**               stopf = cns_stopf_hold
**               BINARY SEARCH.
**
**    lst_sum_t04-werks   = lst_ycnmmt08-werks.      "plant
**    lst_sum_t04-lgort   = lst_ycnmmt08-lgort.      "Stock Loc.
**    lst_sum_t04-spart   = lst_ycnmmt08-spart.      "Product Group
**    lst_sum_t04-vtweg   = lst_ycnmmt08-vtweg.      "
**    lst_sum_t04-prodh   = lst_ycnmmt08-prodh.      "P-Code
**    lst_sum_t04-stoqf   = lst_ycnmmt08-stoqf.      "Stock div
**    lst_sum_t04-stodate = lst_ycnmmt08-calcdate.   "Stock date
**    lst_sum_t04-menge_ok = lst_ycnmmt08-menge.     "Quantity
**    lst_sum_t04-menge_hold  = lst_t08_hold-menge.
**    lst_sum_t04-menge_ng    = lst_t08_ng-menge.
**    APPEND lst_sum_t04 TO o_t_sum_t04.
**  ENDLOOP.
*****20160308 DEL Wangchunhui START
***  ENDIF.
*****20160308 DEL Wangchunhui END
**
**  IF o_t_sum_t04 IS INITIAL.
**    IF sy-batch IS INITIAL.
***     Display the Error message
**      MESSAGE s039 DISPLAY LIKE 'E'.
**      LEAVE LIST-PROCESSING.
**    ELSE.
***     Display the Error message
**      MESSAGE e039.
**    ENDIF.
**  ENDIF.
**
**  SORT: o_t_sum_t04 BY werks  ASCENDING
**                       lgort  ASCENDING
**                       spart  ASCENDING
**                       vtweg  ASCENDING
**                       prodh  ASCENDING
**                       stoqf  ASCENDING.
**ENDFORM.                    " FRM_SUM_YCNMMT04
***&---------------------------------------------------------------------*
***&      Form  FRM_SEL_YCNMMT06
***&---------------------------------------------------------------------*
***       Get Stock move data
***----------------------------------------------------------------------*
***      -->I_W_START_DATE  The start date
***      -->O_T_SUM_T04     Sum of the inbound Stock
***      <--O_T_YCNMMT06    Stock move data
***----------------------------------------------------------------------*
**FORM frm_sel_ycnmmt06 USING i_w_start_date TYPE sy-datum
**                            i_w_plan_days  TYPE i
**                            i_t_sum_t04  TYPE typ_tab_sum_t04
**                   CHANGING o_t_ycnmmt06 TYPE typ_tab_ycnmmt06.
**  DATA:
**    lw_end_date TYPE sy-datum.
**
**  lw_end_date = p_dats + i_w_plan_days.
**
*** Get the data of YCNMMT06
**  SELECT t06~werks      "plant
**         t06~lgort      "Stock Loc.
**         mara~spart     "Product Group
**         t06~vtweg      "
**         t06~prodh      "P-Code
**         t06~stopf      "Stock type
**         t06~stotp      "Move type
**         t06~stodate    "Date
**         t06~stodf      "inbound/outbound
**         t06~menge      "Quantity
**         t06~ymblnr     "Stock No.
**         t06~yzeile     "Stock item No.
**    INTO TABLE o_t_ycnmmt06
**    FROM ycnmmt06 AS t06
**    INNER JOIN mara
**      ON t06~prodh = mara~matnr
**    FOR ALL entries IN i_t_sum_t04
**   WHERE t06~werks = i_t_sum_t04-werks
*****20160308 UPD Wangchunhui START
***     AND T06~LGORT = I_T_SUM_T04-LGORT
**     AND t06~lgort IN s_lgort
*****20160308 UPD Wangchunhui END
**     AND t06~prodh = i_t_sum_t04-prodh
**     AND t06~stodate >= i_w_start_date
**     AND t06~stodate <= lw_end_date
**     AND mara~spart IN s_spart.
**
**  IF sy-subrc = 0.
**    SORT o_t_ycnmmt06 BY werks ASCENDING
**                         lgort ASCENDING
**                         spart ASCENDING
**                         vtweg ASCENDING
**                         prodh ASCENDING
**                         stopf ASCENDING
**                         stotp ASCENDING
**                         stodate ASCENDING
**                         stodf ASCENDING.
**  ENDIF.
**ENDFORM.                    " FRM_SEL_YCNMMT06
***&---------------------------------------------------------------------*
***&      Form  FRM_SEL_LIKP_LIPS
***&---------------------------------------------------------------------*
***       Get SAP Deliver data
***----------------------------------------------------------------------*
***      -->I_W_START_DATE  Start date
***      -->I_W_END_DATE    End date
***      <--O_T_LIPS        SAP Deliver data
***----------------------------------------------------------------------*
**FORM frm_sel_likp_lips USING i_w_start_date TYPE sy-datum
*****20160310 UPD Wangchunhui START
***                             I_T_SUM_T04  TYPE TYP_TAB_SUM_T04
**                             i_t_master   TYPE typ_tab_master
*****20160310 UPD Wangchunhui END
**                    CHANGING o_t_lips     TYPE typ_tab_lips.
**  DATA:
*****20160321 ADD Wangchunhui START
**    ltd_master   TYPE typ_tab_master,
*****20160321 ADD Wangchunhui END
**    lw_end_date   TYPE sy-datum.
**
*****20160321 ADD Wangchunhui START
**  ltd_master[] = i_t_master[].
**  SORT ltd_master BY matnr ASCENDING.
**  DELETE ADJACENT DUPLICATES FROM ltd_master
**    COMPARING matnr.
*****20160321 ADD Wangchunhui END
**
**  SELECT lips~werks          "Plant
**         lips~lgort          "Storage Location
**         mara~spart          "Product Group
**         lips~matnr          "Material
**         lips~vbeln          "Deliver No.
**         lips~posnr          "item No.
**         likp~wadat          "Plan GI date
**         likp~wadat_ist      "Actual GI date
**         likp~lfdat          "Delivery Date
**         lips~lfimg          "Quantity
**         vbup~wbsta          "Status
**    INTO CORRESPONDING FIELDS OF TABLE o_t_lips
**    FROM lips
**    INNER JOIN likp
**    ON lips~vbeln = likp~vbeln
**    INNER JOIN vbup
**    ON  lips~vbeln = vbup~vbeln
**    AND lips~posnr = vbup~posnr
**    INNER JOIN vbfa
**    ON  lips~vbeln = vbfa~vbeln
**    AND lips~posnr = vbfa~posnn
**    INNER JOIN mara
**    ON lips~matnr = mara~matnr
*****20160310 UPD Wangchunhui START
***    FOR ALL ENTRIES IN I_T_SUM_T04
***   WHERE LIPS~WERKS = I_T_SUM_T04-WERKS
*****20160321 UPD Wangchunhui START
***    FOR ALL ENTRIES IN I_T_MASTER
***   WHERE LIPS~WERKS = I_T_MASTER-WERKS
**    FOR ALL entries IN ltd_master
*****20160328 UPD Wangchunhui START
***   WHERE LIPS~WERKS = S_WERKS
**   WHERE lips~werks IN s_werks
*****20160328 UPD Wangchunhui END
*****20160321 UPD Wangchunhui END
*****20160310 UPD Wangchunhui END
*****20160308 UPD Wangchunhui START
***     AND LIPS~LGORT = I_T_SUM_T04-LGORT
**     AND lips~lgort IN s_lgort
*****20160308 UPD Wangchunhui END
*****20160310 UPD Wangchunhui START
***     AND LIPS~MATNR = I_T_SUM_T04-PRODH
*****20160321 UPD Wangchunhui START
***     AND LIPS~MATNR = I_T_MASTER-MATNR
**     AND lips~matnr = ltd_master-matnr
*****20160321 UPD Wangchunhui END
*****20160310 UPD Wangchunhui END
*****20160310 UPD Wangchunhui START
**     AND likp~wadat <> lw_end_date
**     AND likp~wadat >= i_w_start_date
*****20160310 UPD Wangchunhui END
**     AND likp~vbtyp <> cns_vbtyp_return
**     AND vbfa~vbtyp_n = cns_vbtyp_n
**     AND mara~spart IN s_spart.
**
*******************STRART OF CWU**************
**
***    WERKS     TYPE LIPS-WERKS,          "Plant
***    LGORT     TYPE LIPS-LGORT,          "Storage Location
***    SPART     TYPE MARA-SPART,          "Product Group
***    VTWEG     TYPE YCNMMT05-VTWEG,      "
***    MATNR     TYPE LIPS-MATNR,          "Material
***    VBELN     TYPE LIPS-VBELN,          "Deliver No.
***    POSNR     TYPE LIPS-POSNR,          "item No.
***    WADAT     TYPE LIKP-WADAT,          "Plan GI date
***    WADAT_IST TYPE LIKP-WADAT_IST,      "Actual GI date
***    LFDAT     TYPE LIKP-LFDAT,          "Delivery Date
***    LFIMG     TYPE LIPS-LFIMG,          "Quantity
***    WBSTA     TYPE VBUP-WBSTA,          "Status
**
**  TYPES: BEGIN OF ltyp_likp,
**           vbeln    TYPE lips-vbeln,   "Deliver No.
**           wadat    TYPE likp-wadat,   "Plan GI date 12
**           lfdat    TYPE likp-lfdat,    "Delivery Date  15
**           vbtyp     TYPE likp-vbtyp,    "SD document category 24
**           wadat_ist TYPE likp-wadat_ist,"Actual GI date 88
**         END OF ltyp_likp,
**        BEGIN OF ltyp_lips,
**           vbeln  TYPE lips-vbeln,      "Deliver No.
**           posnr  TYPE lips-posnr,      "item No.
**           matnr  TYPE lips-matnr,      "Material
**           werks  TYPE lips-werks,      "Plant
**           lgort  TYPE lips-lgort,      "Storage Location
**           lfimg  TYPE lips-lfimg,      "Quantity
**         END OF ltyp_lips,
**         BEGIN OF lty_mara,
**           matnr  TYPE mara-matnr,
**           spart  TYPE mara-spart,
**         END OF lty_mara,
**         BEGIN OF lty_vbup,
**           vbeln   TYPE vbup-vbeln,
**           posnr   TYPE vbup-posnr,
**           wbsta   TYPE vbup-wbsta,
**         END OF lty_vbup.
**  DATA: ls_o_lips   TYPE typ_lips,
**        ls_lipstmp  TYPE ltyp_lips,
**        ls_lips     TYPE ltyp_lips,
**        ls_mara     TYPE ltyp_mara,
**        ls_vbup     TYPE ltyp_vbup,
**        ls_likp     TYPE ltyp_likp,
**        lt_likp     TYPE ltyp_likp,
**
**
**        lt_vbup     TYPE STANDARD TABLE OF ltyp_vbup,
**        lt_lips     TYPE STANDARD TABLE OF  ltyp_lips,
**        lt_mara     TYPE STANDARD TABLE OF ltyp_mara,
**        lt_lipstmp  TYPE STANDARD TABLE OF ltyp_lips.
**  IF ltd_master IS NOT INITIAL.
**    SELECT   lips~vbeln          "Deliver No.
**             lips~posnr          "item No.
**             lips~matnr          "Material
**             lips~werks          "Plant
**             lips~lgort          "Storage Location
**             lips~lfimg          "Quantity
**      FROM lips
**      INNER JOIN vbfa
**       ON  lips~vbeln = vbfa~vbeln
**       AND lips~posnr = vbfa~posnn
**      INTO TABLE lt_lips
**      FOR ALL ENTRIES IN ltd_master
**      WHERE lips~werks IN s_werks
**       AND  lips~lgort IN s_lgort
**       AND  lips~matnr = ltd_master-matnr
**       AND  vbfa~vbtyp_n = cns_vbtyp_n.
**
**    IF lt_lipstmp IS NOT INITIAL.
**      SELECT  matnr
**              spart
**        FROM mara
**        INTO TABLE lt_mara
**        FOR ALL ENTRIES IN ltd_master
**        WHERE matnr = ltd_master-matnr.
**    ENDIF.
**
**    REFRESH: lt_lipstmp.
**    APPEND LINES OF lt_lips TO lt_lipstmp.
**    SORT lt_lipstmp BY vbeln posnr.
**    DELETE ADJACENT DUPLICATES FROM lt_lipstmp COMPARING vbeln posnr.
**    IF lt_lipstmp IS NOT INITIAL.
**      SELECT vbeln
**             posnr
**             wbsta
**        FROM vbup
**        INTO TABLE lt_vbup
**        FOR ALL ENTRIES IN lt_lipstmp
**        WHERE vbeln = lt_lipstmp-vbeln
**          AND posnr = lt_lipstmp-posnt.
**    ENDIF.
**
**    REFRESH: lt_lipstmp.
**    APPEND LINES OF lt_lips TO lt_lipstmp.
**    SORT lt_lipstmp BY vbeln.
**    DELETE ADJACENT DUPLICATES FROM lt_lipstmp COMPARING vbeln.
**    IF lt_lipstmp IS NOT INITIAL.
**      SELECT  vbeln         "Deliver No.
**              wadat         "Plan GI date 12
**              lfdat         "Delivery Date  15
**              vbtyp         "SD document category 24
**              wadat_ist     "Actual GI date 88
**        FROM likp
**        INTO TABLE lt_likp
**        FOR ALL ENTRIES IN lt_lipstmp
**        WHERE vbeln = lt_lipstmp-vbeln.
**      DELETE lt_likp  WHERE wadat = lw_end_date.
**      DELETE lt_likp  WHERE wadat < i_w_start_date.
**      DELETE lt_likp  WHERE likp~vbtyp = cns_vbtyp_return.
**    ENDIF.
**
**    LOOP AT lt_lips INTO ls_lips.
**      CLEAR: ls_o_lips,ls_mara,ls_vbup,ls_likp.
**      READ TABLE lt_likp INTO ls_likp
**        WITH KEY vbeln = ls_lips-vbeln.
**      IF sy-subrc <> 0.
**        CONTINUE.
**      ELSE.
**        ls_o_lips-wadat = ls_likp~wadat.         "Plan GI date
**        ls_o_lips-wadat_ist =  ls_likp~wadat_ist. "Actual GI date
**        ls_o_lips-lfdat =  ls_likp~lfdat.         "Delivery Date
**      ENDIF.
**      MOVE-CORRESPONDING ls_lips TO ls_o_lips.
**      READ TABLE lt_mara INTO ls_mara
**        WITH KEY matnr = lips-matnr.
**      IF sy-subrc <> 0.
**        ls_o_lips-spart = ls_mara-spart.
**      ENDIF.
**      READ TABLE lt_vbup INTO ls_vbup
**        WITH KEY vbeln = ls_lips-vbeln
**                  posnr = ls_lips-posnr.
**      IF sy-subrc <> 0.
**        CONTINUE.
**      ELSE.
**        ls_o_lips-wbsta  = vbup~wbsta.         "Status
**      ENDIF.
**    ENDLOOP.
**  ENDIF.
**
***
***             MARA~SPART          "Product Group
***
***             LIKP~WADAT          "Plan GI date
***             LIKP~WADAT_IST      "Actual GI date
***             LIKP~LFDAT          "Delivery Date
***             VBUP~WBSTA          "Status
**
*******************END OF CWU*****************
**
**  IF sy-subrc = 0.
***   mapping the the data
**    PERFORM frm_eidt_vtweg CHANGING o_t_lips.
**
**    SORT o_t_lips BY werks ASCENDING
**                     lgort ASCENDING
**                     spart ASCENDING
**                     vtweg ASCENDING
**                     matnr ASCENDING
**                     wadat ASCENDING
**                     wadat_ist ASCENDING.
**  ENDIF.
**
**ENDFORM.                    " FRM_SEL_LIKP_LIPS
***&---------------------------------------------------------------------*
***&      Form  FRM_EIDT_VTWEG
***&---------------------------------------------------------------------*
***       mapping the the data
***----------------------------------------------------------------------*
***      <--O_T_LIPS  Deliver data
***----------------------------------------------------------------------*
**FORM frm_eidt_vtweg CHANGING o_t_lips TYPE typ_tab_lips.
**
**  DATA:
**    lst_so_info   TYPE typ_so_info,
**    lst_lips      TYPE typ_lips,
**    ltd_so_info   TYPE STANDARD TABLE OF typ_so_info,
**    ltd_lips      TYPE typ_tab_lips,
**    ltd_lips_sel  TYPE typ_tab_lips.
**
*** Data backup
**  ltd_lips[]     = o_t_lips[].
**  ltd_lips_sel[] = o_t_lips[].
**  REFRESH:
**    o_t_lips.
**  SORT ltd_lips_sel BY vbeln ASCENDING
**                       posnr ASCENDING.
**  DELETE ADJACENT DUPLICATES FROM ltd_lips_sel
**    COMPARING vbeln posnr.
**
*** Get the sales information
**  SELECT vbfa~vbeln
**         vbfa~posnn
**         vbak~vtweg
**    FROM vbfa
**    INNER JOIN vbak
**    ON  vbfa~vbelv = vbak~vbeln
**    INTO TABLE ltd_so_info
**    FOR ALL ENTRIES IN ltd_lips_sel
**   WHERE vbfa~vbeln = ltd_lips_sel-vbeln
**     AND vbfa~posnn = ltd_lips_sel-posnr
**     AND ( vbak~vtweg = cns_oe
**      OR   vbak~vtweg = cns_re ).
**
**  SORT ltd_so_info BY vbeln ASCENDING
**                      posnn ASCENDING.
**
*** mapping the the data
**  LOOP AT ltd_lips INTO lst_lips.
**    CLEAR lst_so_info.
**    READ TABLE ltd_so_info INTO lst_so_info
**      WITH KEY vbeln = lst_lips-vbeln
**               posnn = lst_lips-posnr
**               BINARY SEARCH.
**    IF sy-subrc <> 0.
**      CONTINUE.
**    ENDIF.
***   Set the VTWEG
**    IF lst_so_info-vtweg = cns_oe.
**      lst_lips-vtweg = cns_vtweg_oe.
**    ELSEIF lst_so_info-vtweg = cns_re.
**      lst_lips-vtweg = cns_vtweg_rep.
**    ENDIF.
**    APPEND lst_lips TO o_t_lips.
**  ENDLOOP.
**
**ENDFORM.                    " FRM_EIDT_VTWEG
***&---------------------------------------------------------------------*
***&      Form  FRM_EDIT_FILE
***&---------------------------------------------------------------------*
***       Edit file
***----------------------------------------------------------------------*
***      -->I_T_SUM_T04     Stock data
***      -->I_T_YCNMMT06    Stock data
***      -->I_T_LIPS        Deliver data
***      -->I_W_STDATE      start date
***      <--O_T_FILE        File
***----------------------------------------------------------------------*
**FORM frm_edit_file USING i_t_sum_t04    TYPE typ_tab_sum_t04
**                         i_t_ycnmmt06   TYPE typ_tab_ycnmmt06
**                         i_t_lips       TYPE typ_tab_lips
**                         i_w_stdate     TYPE sy-datum
**                         i_w_plan_days  TYPE i
*****20160407 ADD Wangchunhui START
**                         i_t_sum_lips_tr TYPE typ_tab_sum_lips
*****20160407 ADD Wangchunhui END
**                CHANGING o_t_file       TYPE typ_tab_file.
*** Local variants
**  DATA:
*****20160407 ADD Wangchunhui START
**    lst_sum_lips_tr TYPE typ_sum_lips,
*****20160407 ADD Wangchunhui END
**    lst_tmp       TYPE typ_object,
**    lst_object    TYPE typ_object,
**    ltd_object    TYPE STANDARD TABLE OF typ_object,
**    lst_file      TYPE typ_file,
**    lw_qty_c      TYPE c LENGTH 17,
**    lw_qtyb_c      TYPE c LENGTH 17,
**    lw_qty        TYPE menge_d,
**    lw_qtyb       TYPE menge_d,
**    lw_qty_sum    TYPE menge_d,
**    lw_menge      TYPE menge_d,
**    lw_menge_oere TYPE menge_d,
**    lw_menge_reser TYPE menge_d,
**    lw_menge_ok   TYPE menge_d,
**    lw_menge_ng   TYPE menge_d,
**    lw_menge_hold TYPE menge_d,
**    lst_sum_t04   TYPE typ_sum_t04,
**    lst_sum_lips  TYPE typ_sum_lips,
**    ltd_sum_t06_p TYPE typ_tab_sum_t06,
**    ltd_sum_t06_f TYPE typ_tab_sum_t06,
**    ltd_sum_lips  TYPE typ_tab_sum_lips.
**
*****20160407 ADD Wangchunhui START
**  FIELD-SYMBOLS:
**    <lfs_object>  TYPE typ_object.
*****20160407 ADD Wangchunhui END
**
*** Sum the data of YCNMMT06
**  PERFORM frm_sum_ycnmmt06 USING i_t_ycnmmt06
**                          CHANGING ltd_sum_t06_p
**                                   ltd_sum_t06_f.
**
*** Sum the data of lips
**  PERFORM frm_sum_lips USING i_t_lips
**                             i_w_stdate
*****20160304 ADD Wangchunhui START
**                             i_w_plan_days
*****20160304 ADD Wangchunhui END
**                    CHANGING ltd_sum_lips.
**
*** Edit head
**  CONCATENATE text-h01
**              text-h02
**              text-h03
**              text-h05
**              text-h04
**         INTO lst_file-line
**  SEPARATED BY cns_tab.
**
**  APPEND lst_file TO o_t_file.
**
**  LOOP AT i_t_sum_t04 INTO lst_sum_t04.
**    CLEAR:
**      lst_file,
**      lw_qty_c,
**      lw_qty,
**      lw_qtyb,
**      lw_menge,
**      lw_menge_oere,
**      lw_menge_reser,
**      lw_menge_ok,
**      lw_menge_ng,
**      lw_menge_hold,
**      lst_sum_lips.
**
*****20160310 ADD Wangchunhui START
***   剔除PSR轮胎的OE库存
**    IF lst_sum_t04-spart = cns_spart_psr
**      AND lst_sum_t04-lgort+0(2) = 'OE'.
**      CONTINUE.
**    ENDIF.
*****20160310 ADD Wangchunhui END
**
***   Get the deliver data
**    READ TABLE ltd_sum_lips INTO lst_sum_lips
**      WITH KEY werks = lst_sum_t04-werks
**               lgort = lst_sum_t04-lgort
**               spart = lst_sum_t04-spart
**               vtweg = lst_sum_t04-vtweg
**               matnr = lst_sum_t04-prodh
**               BINARY SEARCH.
**
***   Get the adjust Stock data
**    PERFORM frm_get_adjust USING lst_sum_t04
**                                 ltd_sum_t06_p
**                        CHANGING lw_menge_ok
**                                 lw_menge_ng
**                                 lw_menge_hold.
**    TRY.
***     Sum the Quantity
**        lw_menge_ng = lst_sum_t04-menge_ng
**                    + lw_menge_ng.
**
**        lw_menge_hold = lst_sum_t04-menge_hold
**                      + lw_menge_hold.
**
**        lw_menge = lst_sum_t04-menge_ok
**                 + lw_menge_ok
*****20160308 DEL Wangchunhui START
***               - LST_SUM_LIPS-LFIMG
*****20160308 DEL Wangchunhui END
*****20160310 ADD Wangchunhui START
**                 - lst_sum_lips-lfimg
*****20160310 ADD Wangchunhui END
**                 + lw_menge_ng
**                 + lw_menge_hold.
**      CATCH cx_sy_arithmetic_overflow.
***     When the overflow occurrs，display the error message
**        IF sy-batch IS INITIAL.
**          MESSAGE s036 DISPLAY LIKE 'E'.
**          LEAVE LIST-PROCESSING.
**        ELSE.
**          MESSAGE e036.
**        ENDIF.
**    ENDTRY.
**
***   Get the data(OE-->RE)
**    PERFORM frm_calculate_oere USING lst_sum_t04-werks
**                                     lst_sum_t04-lgort
**                                     lst_sum_t04-spart
**                                     lst_sum_t04-prodh
**                                     ltd_sum_t06_f
**                                     p_dats
**                                     cns_stopf_ok
**                                     cns_stotp_13
**                                     cns_stotp_14
**                            CHANGING lw_menge_oere.
**
**    IF lst_sum_t04-vtweg = cns_vtweg_oe.
**      lw_menge_oere = lw_menge_oere * -1.
**    ELSEIF lst_sum_t04-vtweg = cns_vtweg_rep.
**      lw_menge_oere = lw_menge_oere * 1.
**    ENDIF.
**
***   Get the shipment reservation data
**    PERFORM frm_get_shipment_reservation USING lst_sum_t04
**                                               ltd_sum_t06_f
**                                               i_w_plan_days
**                                      CHANGING lw_menge_reser.
**
**    TRY.
***     Sum the Quantity
**        lw_qty   = lw_menge
**                 + lw_menge_oere
**                 - lw_menge_ng
**                 - lw_menge_hold
**                 - lw_menge_reser
**                 - lst_sum_lips-lfimg_fix.
*****20160308 DEL Wangchunhui START
***               - LST_SUM_LIPS-LFIMG_DELAY.
*****20160308 DEL Wangchunhui END
**
**        lw_qtyb  = lw_qty
*****20160308 DEL Wangchunhui START
***               + LST_SUM_LIPS-LFIMG
*****20160308 DEL Wangchunhui END
**                 + lst_sum_lips-lfimg_fix.
*****20160308 DEL Wangchunhui START
***               + LST_SUM_LIPS-LFIMG_DELAY.
*****20160308 DEL Wangchunhui END
**      CATCH cx_sy_arithmetic_overflow.
***     When the overflow occurrs，display the error message
**        IF sy-batch IS INITIAL.
**          MESSAGE s036 DISPLAY LIKE 'E'.
**          LEAVE LIST-PROCESSING.
**        ELSE.
**          MESSAGE e036.
**        ENDIF.
**    ENDTRY.
**
**    lst_object-prodh   = lst_sum_t04-prodh.
**    lst_object-werks   = lst_sum_t04-werks.
*****20160404 ADD Wangchunhui START
**    lst_object-lgort   = lst_sum_t04-lgort.
*****20160404 ADD Wangchunhui END
*****20160407 ADD Wangchunhui START
**    lst_object-spart   = lst_sum_t04-spart.
**    lst_object-vtweg   = lst_sum_t04-vtweg.
*****20160407 ADD Wangchunhui END
**    lst_object-menge_b = lw_qtyb.
**    lst_object-menge_a = lw_qty.
**    APPEND lst_object TO ltd_object.
**  ENDLOOP.
**
*****20160310 ADD Wangchunhui START
**  LOOP AT ltd_sum_lips INTO lst_sum_lips.
**
**    READ TABLE ltd_object TRANSPORTING NO FIELDS
**      WITH KEY prodh = lst_sum_lips-matnr
**               werks = lst_sum_lips-werks
*****20160404 ADD Wangchunhui START
**               lgort = lst_sum_lips-lgort
*****20160404 ADD Wangchunhui END
*****20160407 ADD Wangchunhui START
**               spart = lst_sum_lips-spart
**               vtweg = lst_sum_lips-vtweg.
*****20160407 ADD Wangchunhui END
**    IF sy-subrc = 0.
**      CONTINUE.
**    ENDIF.
**
**    lst_object-prodh   = lst_sum_lips-matnr.
**    lst_object-werks   = lst_sum_lips-werks.
*****20160404 ADD Wangchunhui START
**    lst_object-lgort   = lst_sum_lips-lgort.
*****20160404 ADD Wangchunhui END\
*****20160407 ADD Wangchunhui START
**    lst_object-spart   = lst_sum_lips-spart.
**    lst_object-vtweg   = lst_sum_lips-vtweg.
*****20160407 ADD Wangchunhui END
*****20160311 UPD Wangchunhui START
***    CLEAR LST_OBJECT-MENGE_B.
***    LST_OBJECT-MENGE_A = LST_SUM_LIPS-LFIMG_FIX * -1.
**    lst_object-menge_b = 0 - lst_sum_lips-lfimg.
**    lst_object-menge_a = lst_object-menge_b - lst_sum_lips-lfimg_fix.
*****20160311 UPD Wangchunhui END
**    APPEND lst_object TO ltd_object.
**  ENDLOOP.
*****20160310 ADD Wangchunhui END
**
*****20160407 ADD Wangchunhui START
**  LOOP AT i_t_sum_lips_tr INTO lst_sum_lips_tr.
**
**    READ TABLE ltd_object ASSIGNING <lfs_object>
**      WITH KEY prodh = lst_sum_lips_tr-matnr
**               werks = lst_sum_lips_tr-werks
**               lgort = lst_sum_lips_tr-lgort
**               spart = lst_sum_lips_tr-spart.
**
**    IF sy-subrc = 0.
***     Minus the Deliver qty for transfer orders
**      <lfs_object>-menge_b = <lfs_object>-menge_b - lst_sum_lips_tr-lfimg.
**      <lfs_object>-menge_a = <lfs_object>-menge_a - lst_sum_lips_tr-lfimg.
**    ELSE.
**      CLEAR:
**        lst_object.
**
**      lst_object-prodh   = lst_sum_lips_tr-matnr.
**      lst_object-werks   = lst_sum_lips_tr-werks.
**      lst_object-lgort   = lst_sum_lips_tr-lgort.
**      lst_object-spart   = lst_sum_lips_tr-spart.
**      lst_object-menge_b = 0 - lst_sum_lips_tr-lfimg.
**      lst_object-menge_a = lst_object-menge_b.
**      APPEND lst_object TO ltd_object.
**    ENDIF.
**  ENDLOOP.
*****20160407 ADD Wangchunhui END
**
*** Sum the object data by key PRODH,WERKS
**  SORT ltd_object BY prodh ASCENDING
**                     werks ASCENDING.
**  CLEAR:
**    lw_qty,
**    lw_qtyb,
**    lw_qty_c,
**    lw_qtyb_c.
**  LOOP AT ltd_object INTO lst_tmp.
**    lst_object = lst_tmp.
**
**    lw_qtyb = lw_qtyb + lst_object-menge_b.
**    lw_qty  = lw_qty + lst_object-menge_a.
**    AT END OF werks.
***      IF LW_QTY < 0.
***        LW_QTY_C = '0'.
***      ELSE.
**      WRITE lw_qty TO lw_qty_c NO-GAP NO-GROUPING.
**      WRITE lw_qtyb TO lw_qtyb_c NO-GAP NO-GROUPING.
***      ENDIF.
**      CONDENSE:
**        lw_qty_c,
**        lw_qtyb_c.
**
***     PUT SIGN IN FRONT
**      PERFORM frm_sign_front: CHANGING lw_qty_c,
**                              CHANGING lw_qtyb_c.
**
**      CONCATENATE lst_object-prodh
**                  lst_object-werks
**                  lw_qtyb_c
**                  lw_qty_c
**                  sy-datum
**             INTO lst_file-line
**             SEPARATED BY cns_tab.
**      APPEND lst_file TO o_t_file.
**      CLEAR:
**        lw_qty,
**        lw_qtyb,
**        lw_qty_c,
**        lw_qtyb_c,
**        lst_file.
**    ENDAT.
**  ENDLOOP.
**
**ENDFORM.                    " FRM_EDIT_FILE
***&---------------------------------------------------------------------*
***&      Form  FRM_SUM_YCNMMT06
***&---------------------------------------------------------------------*
***       Sum the data of YCNMMT06
***----------------------------------------------------------------------*
***      -->I_T_YCNMMT06    Stock move data
***      <--O_T_SUM_T06_P   The past of Stock move data
***      <--O_T_SUM_T06_F   The furture of Stock move data
***----------------------------------------------------------------------*
**FORM frm_sum_ycnmmt06 USING i_t_ycnmmt06  TYPE typ_tab_ycnmmt06
**                   CHANGING o_t_sum_t06_p TYPE typ_tab_sum_t06
**                            o_t_sum_t06_f TYPE typ_tab_sum_t06.
*** Local variants
**  DATA:
**    lw_menge     TYPE menge_d,
**    lst_sum_t06  TYPE typ_sum_t06,
**    lst_t06_tmp  TYPE typ_ycnmmt06,
**    lst_ycnmmt06 TYPE typ_ycnmmt06,
**    ltd_t06_p    TYPE typ_tab_ycnmmt06,
**    ltd_t06_f    TYPE typ_tab_ycnmmt06.
**
**  LOOP AT i_t_ycnmmt06 INTO lst_ycnmmt06.
**
**    IF lst_ycnmmt06-stodate <= p_dats.
**      IF lst_ycnmmt06-stodf = cns_stodf_out
**        AND lst_ycnmmt06-stotp = cns_stotp_15.
**        lst_ycnmmt06-menge = lst_ycnmmt06-menge * -1.
**      ENDIF.
**      APPEND lst_ycnmmt06 TO ltd_t06_p.
**    ENDIF.
*****20160412 UPD Wangchunhui START
***    IF LST_YCNMMT06-STODATE >= P_DATS.
***      APPEND LST_YCNMMT06 TO LTD_T06_F.
***    ENDIF.
**    CLEAR lst_ycnmmt06-stodate.
**    APPEND lst_ycnmmt06 TO ltd_t06_f.
*****20160412 UPD Wangchunhui END
**  ENDLOOP.
**
**  LOOP AT ltd_t06_f INTO lst_t06_tmp.
**    lst_ycnmmt06 = lst_t06_tmp.
**
**    TRY.
***     Sum the Quantity
**        lw_menge = lw_menge + lst_ycnmmt06-menge.
**      CATCH cx_sy_arithmetic_overflow.
***     When the overflow occurrs，display the error message
**        IF sy-batch IS INITIAL.
**          MESSAGE s036 DISPLAY LIKE 'E'.
**          LEAVE LIST-PROCESSING.
**        ELSE.
**          MESSAGE e036.
**        ENDIF.
**    ENDTRY.
**
**    AT END OF stodf.
**      lst_sum_t06-werks = lst_ycnmmt06-werks.    "plant
**      lst_sum_t06-lgort = lst_ycnmmt06-lgort.    "Stock Loc.
**      lst_sum_t06-spart = lst_ycnmmt06-spart.    "Product Group
**      lst_sum_t06-vtweg = lst_ycnmmt06-vtweg.    "
**      lst_sum_t06-stopf = lst_ycnmmt06-stopf.    "Stock type
**      lst_sum_t06-stotp = lst_ycnmmt06-stotp.    "Move type
**      lst_sum_t06-stodate = lst_ycnmmt06-stodate.  "Date
**      lst_sum_t06-stodf = lst_ycnmmt06-stodf.    "inbound/outbound
**      lst_sum_t06-prodh = lst_ycnmmt06-prodh.    "P-Code
**      lst_sum_t06-menge = lw_menge.              "Quantity
**
**      APPEND lst_sum_t06 TO o_t_sum_t06_f.
**
**      CLEAR:
**        lw_menge,
**        lst_sum_t06.
**    ENDAT.
**  ENDLOOP.
**
**  CLEAR lw_menge.
**  LOOP AT ltd_t06_p INTO lst_t06_tmp.
**    lst_ycnmmt06 = lst_t06_tmp.
**
**    TRY.
***     Sum the Quantity
**        lw_menge = lw_menge + lst_ycnmmt06-menge.
**      CATCH cx_sy_arithmetic_overflow.
***     When the overflow occurrs，display the error message
**        IF sy-batch IS INITIAL.
**          MESSAGE s036 DISPLAY LIKE 'E'.
**          LEAVE LIST-PROCESSING.
**        ELSE.
**          MESSAGE e036.
**        ENDIF.
**    ENDTRY.
**
**    AT END OF stotp.
**      lst_sum_t06-werks = lst_ycnmmt06-werks.    "plant
**      lst_sum_t06-lgort = lst_ycnmmt06-lgort.    "Stock Loc.
**      lst_sum_t06-spart = lst_ycnmmt06-spart.    "Product Group
**      lst_sum_t06-vtweg = lst_ycnmmt06-vtweg.    "
**      lst_sum_t06-stopf = lst_ycnmmt06-stopf.    "Stock type
**      lst_sum_t06-stotp = lst_ycnmmt06-stotp.    "Move type
**      lst_sum_t06-prodh = lst_ycnmmt06-prodh.    "P-Code
**      lst_sum_t06-menge = lw_menge.              "Quantity
**
**      APPEND lst_sum_t06 TO o_t_sum_t06_p.
**
**      CLEAR:
**        lw_menge,
**        lst_sum_t06.
**    ENDAT.
**  ENDLOOP.
**  SORT:  o_t_sum_t06_p BY werks  ASCENDING
**                       lgort  ASCENDING
**                       spart  ASCENDING
**                       vtweg  ASCENDING
**                       prodh  ASCENDING
**                       stopf  ASCENDING
**                       stotp  ASCENDING
**                       stodate  ASCENDING,
**        o_t_sum_t06_f BY werks  ASCENDING
**                       lgort  ASCENDING
**                       spart  ASCENDING
**                       vtweg  ASCENDING
**                       prodh  ASCENDING
**                       stopf  ASCENDING
**                       stotp  ASCENDING
**                       stodate  ASCENDING.
**
**ENDFORM.                    " FRM_SUM_YCNMMT06
***&---------------------------------------------------------------------*
***&      Form  FRM_SUM_LIPS
***&---------------------------------------------------------------------*
***       Sum the data of lips
***----------------------------------------------------------------------*
***      -->I_T_LIPS      Deliver data
***      -->I_W_STDATE    Start date
***      <--O_T_SUM_LIPS  Deliver data
***----------------------------------------------------------------------*
**FORM frm_sum_lips USING i_t_lips     TYPE typ_tab_lips
**                        i_w_stdate   TYPE sy-datum
*****20160304 UPD Wangchunhui START
**                        i_w_plan_days TYPE i
*****20160304 UPD Wangchunhui END
**               CHANGING o_t_sum_lips TYPE typ_tab_sum_lips.
*** Local variants
**  DATA:
**    lw_lfimg_out   TYPE lips-lfimg,
**    lw_lfimg_fix   TYPE lips-lfimg,
**    lw_lfimg_delay TYPE lips-lfimg,
**    lw_fix_st      TYPE sy-datum,
**    lw_fix_ed      TYPE sy-datum,
**    lst_sum_lips   TYPE typ_sum_lips,
**    lst_lips_tmp   TYPE typ_lips,
**    lst_lips       TYPE typ_lips.
**
*** Edit date
*****20160310 UPD Wangchunhui START
***  LW_FIX_ST = P_DATS.
**  lw_fix_st = p_dats + 1.
*****20160310 ADD Wangchunhui END
*****20160304 UPD Wangchunhui START
***  LW_FIX_ED = '99991231'.
*****20160308 UPD Wangchunhui START
***  LW_FIX_ED = P_DATS + I_W_PLAN_DAYS.
**  lw_fix_ed = p_dats + i_w_plan_days - 1.
*****20160308 UPD Wangchunhui END
*****20160304 UPD Wangchunhui END
**
**  LOOP AT i_t_lips INTO lst_lips_tmp.
**    lst_lips = lst_lips_tmp.
*****20160308 DEL Wangchunhui START
***    IF LST_LIPS-WADAT_IST <= P_DATS
***      AND LST_LIPS-WADAT_IST >= I_W_STDATE
***      AND LST_LIPS-WADAT_IST IS NOT INITIAL
***      AND LST_LIPS-WBSTA = CNS_WBSTA_C.
***      TRY.
****       Sum the Quantity
***        LW_LFIMG_OUT = LW_LFIMG_OUT + LST_LIPS-LFIMG.
***      CATCH CX_SY_ARITHMETIC_OVERFLOW.
****       When the overflow occurrs，display the error message
***        MESSAGE S036 DISPLAY LIKE 'E'.
***        LEAVE LIST-PROCESSING.
***      ENDTRY.
***    ENDIF.
*****20160308 DEL Wangchunhui END
**
*****20160310 ADD Wangchunhui START
**    IF lst_lips-wadat <= p_dats
**      AND lst_lips-wadat >= i_w_stdate.
**      TRY.
***       Sum the Quantity
**          lw_lfimg_out = lw_lfimg_out + lst_lips-lfimg.
**        CATCH cx_sy_arithmetic_overflow.
***       When the overflow occurrs，display the error message
**          MESSAGE s036 DISPLAY LIKE 'E'.
**          LEAVE LIST-PROCESSING.
**      ENDTRY.
**    ENDIF.
*****20160310 ADD Wangchunhui END
**
**    IF lst_lips-wadat >= lw_fix_st
*****20160310 ADD Wangchunhui START
***      AND LST_LIPS-WADAT <= LW_FIX_ED
*****20160310 ADD Wangchunhui END
**      AND lst_lips-wbsta <> cns_wbsta_c.
***     Post Goods Issue(confirm)
**      TRY.
***       Sum the Quantity
**          lw_lfimg_fix = lw_lfimg_fix + lst_lips-lfimg.
**        CATCH cx_sy_arithmetic_overflow.
***       When the overflow occurrs，display the error message
**          MESSAGE s036 DISPLAY LIKE 'E'.
**          LEAVE LIST-PROCESSING.
**      ENDTRY.
*****20160308 DEL Wangchunhui START
***    ELSEIF LST_LIPS-WADAT < P_DATS
***      AND LST_LIPS-WBSTA <> CNS_WBSTA_C.
****     Post Goods Issue(unconfirm)
***      TRY.
****       Sum the Quantity
***        LW_LFIMG_DELAY = LW_LFIMG_DELAY + LST_LIPS-LFIMG.
***      CATCH CX_SY_ARITHMETIC_OVERFLOW.
****       When the overflow occurrs，display the error message
***        MESSAGE S036 DISPLAY LIKE 'E'.
***        LEAVE LIST-PROCESSING.
***      ENDTRY.
*****20160308 DEL Wangchunhui END
**    ENDIF.
**
**    AT END OF matnr.
**      lst_sum_lips-werks = lst_lips-werks.      "Plant
**      lst_sum_lips-lgort = lst_lips-lgort.      "Storage Location
**      lst_sum_lips-spart = lst_lips-spart.      "Product Group
**      lst_sum_lips-matnr = lst_lips-matnr.      "Material
**      lst_sum_lips-vtweg = lst_lips-vtweg.
*****20160308 DEL Wangchunhui START
***      LST_SUM_LIPS-LFIMG = LW_LFIMG_OUT.        "Quantity
*****20160308 DEL Wangchunhui END
*****20160310 ADD Wangchunhui START
**      lst_sum_lips-lfimg = lw_lfimg_out.        "Quantity
*****20160310 ADD Wangchunhui END
**      lst_sum_lips-lfimg_fix   = lw_lfimg_fix.  "Quantity
*****20160308 DEL Wangchunhui START
***      LST_SUM_LIPS-LFIMG_DELAY = LW_LFIMG_DELAY."Quantity
*****20160308 DEL Wangchunhui END
**
**      APPEND lst_sum_lips TO o_t_sum_lips.
***     Clear the variants
**      CLEAR:
**        lst_sum_lips,
**        lw_lfimg_out,
**        lw_lfimg_fix,
**        lw_lfimg_delay.
**
**    ENDAT.
**  ENDLOOP.
**
**  SORT o_t_sum_lips BY werks ASCENDING
**                       lgort ASCENDING
**                       spart ASCENDING
**                       vtweg ASCENDING
**                       matnr ASCENDING.
**
**ENDFORM.                    " FRM_SUM_LIPS
***&---------------------------------------------------------------------*
***&      Form  FRM_GET_ADJUST
***&---------------------------------------------------------------------*
***       Get the adjust Stock data
***----------------------------------------------------------------------*
***      -->I_ST_SUM_T04    The Sock data of input
***      -->I_T_SUM_T06     The Sock data of move
***      <--O_W_MENGE_OK    The Sock data of OK
***      <--O_W_MENGE_NG    The Sock data of NG
***      <--O_W_MENGE_HOLD  The Sock data of Hold
***----------------------------------------------------------------------*
**FORM frm_get_adjust USING i_st_sum_t04 TYPE typ_sum_t04
**                           i_t_sum_t06  TYPE typ_tab_sum_t06
**                  CHANGING o_w_menge_ok TYPE menge_d
**                           o_w_menge_ng TYPE menge_d
**                           o_w_menge_hold TYPE menge_d.
**  DATA:
**    lst_sum_t06 TYPE typ_sum_t06.
**
**  CLEAR:
**    o_w_menge_ok,
**    o_w_menge_ng,
**    o_w_menge_hold.
*** Get OK-->HOLD
**  READ TABLE i_t_sum_t06 INTO lst_sum_t06
**    WITH KEY werks = i_st_sum_t04-werks
**             lgort = i_st_sum_t04-lgort
**             spart = i_st_sum_t04-spart
**             vtweg = i_st_sum_t04-vtweg
*****20160412 ADD Wangchunhui START
**             prodh = i_st_sum_t04-prodh
*****20160412 ADD Wangchunhui END
**             stopf = cns_stopf_ok
**             stotp = cns_stotp_16
**             BINARY SEARCH.
**  IF sy-subrc = 0.
**    o_w_menge_ok   = o_w_menge_ok - lst_sum_t06-menge.
**    o_w_menge_hold = lst_sum_t06-menge.
**  ENDIF.
**
*** Get HOLD-->OK
**  READ TABLE i_t_sum_t06 INTO lst_sum_t06
**    WITH KEY werks = i_st_sum_t04-werks
**             lgort = i_st_sum_t04-lgort
**             spart = i_st_sum_t04-spart
**             vtweg = i_st_sum_t04-vtweg
*****20160412 ADD Wangchunhui START
**             prodh = i_st_sum_t04-prodh
*****20160412 ADD Wangchunhui END
**             stopf = cns_stopf_hold
**             stotp = cns_stotp_17
**             BINARY SEARCH.
**  IF sy-subrc = 0.
**    o_w_menge_ok   = o_w_menge_ok   + lst_sum_t06-menge.
**    o_w_menge_hold = o_w_menge_hold - lst_sum_t06-menge.
**  ENDIF.
**
*** Get OK-->NG
**  READ TABLE i_t_sum_t06 INTO lst_sum_t06
**    WITH KEY werks = i_st_sum_t04-werks
**             lgort = i_st_sum_t04-lgort
**             spart = i_st_sum_t04-spart
**             vtweg = i_st_sum_t04-vtweg
*****20160412 ADD Wangchunhui START
**             prodh = i_st_sum_t04-prodh
*****20160412 ADD Wangchunhui END
**             stopf = cns_stopf_ok
**             stotp = cns_stotp_18
**             BINARY SEARCH.
**  IF sy-subrc = 0.
**    o_w_menge_ok = o_w_menge_ok - lst_sum_t06-menge.
**    o_w_menge_ng = lst_sum_t06-menge.
**  ENDIF.
**
*** Get NG-->OK
**  READ TABLE i_t_sum_t06 INTO lst_sum_t06
**    WITH KEY werks = i_st_sum_t04-werks
**             lgort = i_st_sum_t04-lgort
**             spart = i_st_sum_t04-spart
**             vtweg = i_st_sum_t04-vtweg
*****20160412 ADD Wangchunhui START
**             prodh = i_st_sum_t04-prodh
*****20160412 ADD Wangchunhui END
**             stopf = cns_stopf_ng
**             stotp = cns_stotp_19
**             BINARY SEARCH.
**  IF sy-subrc = 0.
**    o_w_menge_ok = o_w_menge_ok + lst_sum_t06-menge.
**    o_w_menge_ng = o_w_menge_ng - lst_sum_t06-menge.
**  ENDIF.
**
*** Get NG-->HOLD
**  READ TABLE i_t_sum_t06 INTO lst_sum_t06
**    WITH KEY werks = i_st_sum_t04-werks
**             lgort = i_st_sum_t04-lgort
**             spart = i_st_sum_t04-spart
**             vtweg = i_st_sum_t04-vtweg
*****20160412 ADD Wangchunhui START
**             prodh = i_st_sum_t04-prodh
*****20160412 ADD Wangchunhui END
**             stopf = cns_stopf_ng
**             stotp = cns_stotp_21
**             BINARY SEARCH.
**  IF sy-subrc = 0.
**    o_w_menge_hold = o_w_menge_hold + lst_sum_t06-menge.
**    o_w_menge_ng   = o_w_menge_ng - lst_sum_t06-menge.
**  ENDIF.
**
*** Get HOLD-->NG
**  READ TABLE i_t_sum_t06 INTO lst_sum_t06
**    WITH KEY werks = i_st_sum_t04-werks
**             lgort = i_st_sum_t04-lgort
**             spart = i_st_sum_t04-spart
**             vtweg = i_st_sum_t04-vtweg
*****20160412 ADD Wangchunhui START
**             prodh = i_st_sum_t04-prodh
*****20160412 ADD Wangchunhui END
**             stopf = cns_stopf_hold
**             stotp = cns_stotp_20
**             BINARY SEARCH.
**  IF sy-subrc = 0.
**    o_w_menge_ng   = o_w_menge_ng   + lst_sum_t06-menge.
**    o_w_menge_hold = o_w_menge_hold - lst_sum_t06-menge.
**  ENDIF.
**
*** Get the movement between Stock Loc.
**  READ TABLE i_t_sum_t06 INTO lst_sum_t06
**    WITH KEY werks = i_st_sum_t04-werks
**             lgort = i_st_sum_t04-lgort
**             spart = i_st_sum_t04-spart
**             vtweg = i_st_sum_t04-vtweg
*****20160412 ADD Wangchunhui START
**             prodh = i_st_sum_t04-prodh
*****20160412 ADD Wangchunhui END
**             stopf = cns_stopf_ok
**             stotp = cns_stotp_15
**             BINARY SEARCH.
**  IF sy-subrc = 0.
**    o_w_menge_ok = o_w_menge_ok + lst_sum_t06-menge.
**  ENDIF.
**ENDFORM.                    " FRM_GET_ADJUST
***&---------------------------------------------------------------------*
***&      Form  FRM_GET_DAYS
***&---------------------------------------------------------------------*
***       Get days info from YCNMMT07
***----------------------------------------------------------------------*
***      -->P_CNS_PLAN_DAYS  text
***      <--P_LW_PLAN_DAYS  text
***----------------------------------------------------------------------*
**FORM frm_get_days USING i_w_numb  TYPE ycnmmt07-numb
**                        i_w_text  TYPE sy-msgv1
**               CHANGING o_w_days  TYPE i.
**  DATA:
**    lw_tcode TYPE ycnmmt07-tcode.
**
**  SELECT tcode
**    INTO lw_tcode
**    FROM ycnmmt07
**   WHERE numb = i_w_numb.
**    EXIT.
**  ENDSELECT.
**
**  IF sy-subrc <> 0.
**    IF sy-batch IS INITIAL.
**      MESSAGE s037 WITH i_w_text DISPLAY LIKE 'E'.
**      LEAVE LIST-PROCESSING.
**    ELSE.
**      MESSAGE e037 WITH i_w_text.
**    ENDIF.
**  ELSE.
**    o_w_days = lw_tcode.
**  ENDIF.
**ENDFORM.                    " FRM_GET_DAYS
***&---------------------------------------------------------------------*
***&      Form  FRM_CALCULATE_OERE
***&---------------------------------------------------------------------*
***       Get the data(OE-->RE)
***----------------------------------------------------------------------*
***      -->I_W_WERKS    text
***      -->I_W_LGORT    text
***      -->I_W_SPART    text
***      -->I_W_VTWEG    text
***      -->I_W_PRODH    text
***      -->I_T_SUM_T06  text
***      -->I_W_DATUM    text
***      -->I_W_STOPF1   text
***      -->I_W_STOTP1   text
***      -->I_W_STOTP2   text
***      <--O_W_MENGE    text
***----------------------------------------------------------------------*
**FORM frm_calculate_oere USING i_w_werks   TYPE ycnmmt06-werks
**                              i_w_lgort   TYPE ycnmmt06-lgort
**                              i_w_spart   TYPE mara-spart
**                              i_w_prodh   TYPE ycnmmt06-prodh
**                              i_t_sum_t06 TYPE typ_tab_sum_t06
**                              i_w_datum   TYPE sy-datum
**                              i_w_stopf1  TYPE ycnmmt06-stopf
**                              i_w_stotp1  TYPE ycnmmt06-stotp
**                              i_w_stotp2  TYPE ycnmmt06-stotp
**                     CHANGING o_w_menge TYPE menge_d.
**  DATA:
**    lst_sum_t06 TYPE typ_sum_t06.
**
**  CLEAR: o_w_menge.
*** Get the data for stock increase
**  READ TABLE i_t_sum_t06 INTO lst_sum_t06
**    WITH KEY werks = i_w_werks
**             lgort = i_w_lgort
**             spart = i_w_spart
*****20160412 UPD Wangchunhui START
***             VTWEG = CNS_VTWEG_OE
**             vtweg = cns_vtweg_rep
*****20160412 UPD Wangchunhui END
**             prodh = i_w_prodh
**             stopf = i_w_stopf1
**             stotp = i_w_stotp1
*****20160412 DEL Wangchunhui START
***             STODATE = I_W_DATUM
*****20160412 DEL Wangchunhui END
**             BINARY SEARCH.
**  IF sy-subrc = 0.
**    o_w_menge = lst_sum_t06-menge.
**  ENDIF.
**
**  READ TABLE i_t_sum_t06 INTO lst_sum_t06
**    WITH KEY werks = i_w_werks
**             lgort = i_w_lgort
**             spart = i_w_spart
*****20160412 UPD Wangchunhui START
***             VTWEG = CNS_VTWEG_OE
**             vtweg = cns_vtweg_rep
*****20160412 UPD Wangchunhui END
**             prodh = i_w_prodh
**             stopf = i_w_stopf1
**             stotp = i_w_stotp2
*****20160412 DEL Wangchunhui START
***             STODATE = I_W_DATUM
*****20160412 DEL Wangchunhui END
**             BINARY SEARCH.
**  IF sy-subrc = 0.
**    o_w_menge = o_w_menge - lst_sum_t06-menge.
**  ENDIF.
**
**ENDFORM.                    " FRM_CALCULATE_OERE
***&---------------------------------------------------------------------*
***&      Form  FRM_GET_SHIPMENT_RESERVATION
***&---------------------------------------------------------------------*
***       Get the shipment reservation data
***----------------------------------------------------------------------*
***  -->  I_ST_SUM_T04        Stock input data
***  -->  I_T_SUM_T06         Stock move data
***  -->  I_W_PLAN_DAYS       Dates
***  <--  O_W_MENGE           Quantity
***----------------------------------------------------------------------*
**FORM frm_get_shipment_reservation USING i_st_sum_t04 TYPE typ_sum_t04
**                                       i_t_sum_t06 TYPE typ_tab_sum_t06
**                                       i_w_plan_days TYPE i
**                              CHANGING o_w_menge.
**  DATA:
**    lw_menge TYPE menge_d,
**    lw_times TYPE i,
**    lw_date  TYPE sy-datum.
**
**  CLEAR o_w_menge.
*****20160412 DEL Wangchunhui START
***  LW_TIMES = I_W_PLAN_DAYS + 1.
***  LW_DATE  = P_DATS - 1.
***  DO LW_TIMES TIMES.
***    LW_DATE = LW_DATE + 1.
*****20160412 DEL Wangchunhui END
***   Get the shipment reservation data
**  PERFORM frm_calculate_move_stock USING i_st_sum_t04-werks
**                                         i_st_sum_t04-lgort
**                                         i_st_sum_t04-spart
**                                         i_st_sum_t04-vtweg
**                                         i_st_sum_t04-prodh
**                                         i_t_sum_t06
**                                         lw_date
**                                         cns_stopf_ok
**                                         cns_stotp_11
**                                         cns_stopf_ok
**                                         cns_stotp_12
**                                CHANGING lw_menge.
**  o_w_menge = o_w_menge + lw_menge.
*****20160412 DEL Wangchunhui START
***  ENDDO.
*****20160412 DEL Wangchunhui END
**ENDFORM.                    " FRM_GET_SHIPMENT_RESERVATION
***&---------------------------------------------------------------------*
***&      Form  FRM_CALCULATE_MOVE_STOCK
***&---------------------------------------------------------------------*
***       text
***----------------------------------------------------------------------*
***      -->I_ST_SUM_T04  Stock data
***      -->I_T_SUM_T06   Stock move data
***      -->I_W_STOPF1    Stock type
***      -->I_W_STOTP1    Stock Move type
***      -->I_W_STOPF2    Stock type
***      -->I_W_STOTP2    Stock Move type
***      <--O_W_MENGE     Quantity
***----------------------------------------------------------------------*
**FORM frm_calculate_move_stock USING i_w_werks   TYPE ycnmmt06-werks
**                                    i_w_lgort   TYPE ycnmmt06-lgort
**                                    i_w_spart   TYPE mara-spart
**                                    i_w_vtweg   TYPE ycnmmt06-vtweg
**                                    i_w_prodh   TYPE ycnmmt06-prodh
**                                    i_t_sum_t06 TYPE typ_tab_sum_t06
**                                    i_w_datum   TYPE sy-datum
**                                    i_w_stopf1  TYPE ycnmmt06-stopf
**                                    i_w_stotp1  TYPE ycnmmt06-stotp
**                                    i_w_stopf2  TYPE ycnmmt06-stopf
**                                    i_w_stotp2  TYPE ycnmmt06-stotp
**                           CHANGING o_w_menge TYPE menge_d.
**  DATA:
**    lst_sum_t06 TYPE typ_sum_t06.
**
**  CLEAR: o_w_menge.
*** Get the data for stock increase
**  READ TABLE i_t_sum_t06 INTO lst_sum_t06
**    WITH KEY werks = i_w_werks
**             lgort = i_w_lgort
**             spart = i_w_spart
**             vtweg = i_w_vtweg
**             prodh = i_w_prodh
**             stopf = i_w_stopf1
**             stotp = i_w_stotp1
*****20160412 DEL Wangchunhui START
***             STODATE = I_W_DATUM
*****20160412 DEL Wangchunhui END
**             BINARY SEARCH.
**  IF sy-subrc = 0.
**    o_w_menge = lst_sum_t06-menge.
**  ENDIF.
**
*** Get the data for stock decrease
**  READ TABLE i_t_sum_t06 INTO lst_sum_t06
**    WITH KEY werks = i_w_werks
**             lgort = i_w_lgort
**             spart = i_w_spart
**             vtweg = i_w_vtweg
**             prodh = i_w_prodh
**             stopf = i_w_stopf2
**             stotp = i_w_stotp2
*****20160412 DEL Wangchunhui START
***             STODATE = I_W_DATUM
*****20160412 DEL Wangchunhui END
**             BINARY SEARCH.
**  IF sy-subrc = 0.
**    o_w_menge = o_w_menge - lst_sum_t06-menge.
**  ENDIF.
**ENDFORM.                    " FRM_CALCULATE_MOVE_STOCK
***&---------------------------------------------------------------------*
***&      Form  FRM_DOWNLOAD
***&---------------------------------------------------------------------*
***       Download file
***----------------------------------------------------------------------*
***      -->I_T_FILE  file
***----------------------------------------------------------------------*
**FORM frm_download USING i_t_file TYPE typ_tab_file.
**  DATA:
*****20160426 ADD Wangchunhui START
**    ltd_file    TYPE typ_tab_file,
*****20160426 ADD Wangchunhui END
**    lw_count    TYPE i,
**    lw_fullpath TYPE string,
**    lst_file        TYPE typ_file.
**
**  lw_fullpath = p_lpath.
**  TRANSLATE: lw_fullpath TO UPPER CASE.
**  REPLACE: cns_key_word IN lw_fullpath WITH sy-datum.
**  IF sy-batch IS INITIAL.
***   Save as local file
**    CALL FUNCTION 'GUI_DOWNLOAD'
**      EXPORTING
**        filename                = lw_fullpath
**      TABLES
**        data_tab                = i_t_file
**      EXCEPTIONS
**        file_write_error        = 1
**        no_batch                = 2
**        gui_refuse_filetransfer = 3
**        invalid_type            = 4
**        no_authority            = 5
**        unknown_error           = 6
**        header_not_allowed      = 7
**        separator_not_allowed   = 8
**        filesize_not_allowed    = 9
**        header_too_long         = 10
**        dp_error_create         = 11
**        dp_error_send           = 12
**        dp_error_write          = 13
**        unknown_dp_error        = 14
**        access_denied           = 15
**        dp_out_of_memory        = 16
**        disk_full               = 17
**        dp_timeout              = 18
**        file_not_found          = 19
**        dataprovider_exception  = 20
**        control_flush_error     = 21
**        OTHERS                  = 22.
**    IF sy-subrc <> 0.
**      MESSAGE ID sy-msgid TYPE 'S' NUMBER sy-msgno
**              DISPLAY LIKE 'E'
**              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
**      LEAVE LIST-PROCESSING.
**    ENDIF.
**  ELSE.
***   Save as server file
***   Open File
*****20160426 ADD Wangchunhui START
***    OPEN DATASET LW_FULLPATH FOR OUTPUT
***      IN TEXT MODE ENCODING UTF-8
***      WITH BYTE-ORDER MARK WITH SMART LINEFEED.
**    ltd_file[] = i_t_file[].
**
**    OPEN DATASET lw_fullpath FOR INPUT IN BINARY MODE.
**
**    IF sy-subrc <> 0.
***     Open File For Output
**      OPEN DATASET lw_fullpath FOR OUTPUT
**        IN TEXT MODE ENCODING UTF-8
**        WITH BYTE-ORDER MARK WITH SMART LINEFEED.
**    ELSE.
***     Close the dataset
**      CLOSE DATASET lw_fullpath.
***     Delete the header
**      DELETE ltd_file INDEX 1.
***     Open File For Appending
**      OPEN DATASET lw_fullpath FOR APPENDING
**        IN TEXT MODE ENCODING UTF-8
**        WITH SMART LINEFEED.
**    ENDIF.
*****20160426 ADD Wangchunhui END
**
**    IF sy-subrc <> 0.
***     Failed to open file (file name: &1)
**      MESSAGE e010(zabap) WITH text-m09
**                          lw_fullpath
**                          text-m10.
**    ELSE.
***     Successfully open file (file name: &1)
**      MESSAGE s010(zabap) WITH text-m11
**                          lw_fullpath
**                          text-m10.
**      DESCRIBE TABLE i_t_file LINES lw_count.
**      lw_count = lw_count - 1.
*****20160426 UPD Wangchunhui START
***      LOOP AT I_T_FILE INTO LST_FILE.
**      LOOP AT ltd_file INTO lst_file.
*****20160426 UPD Wangchunhui END
**        TRANSFER lst_file-line TO lw_fullpath.
**        IF sy-subrc <> 0.
***         Failed to transfer data to file(file name: &1)
**          MESSAGE e010(zabap) WITH text-m12
**                              lw_fullpath
**                              text-m10.
**        ENDIF.
**      ENDLOOP.
***     Close the file
**      CLOSE DATASET lw_fullpath.
**      IF sy-subrc <> 0.
***       Failed to close file(file name: &1)
**        MESSAGE e010(zabap) WITH text-m13
**                            lw_fullpath
**                            text-m10.
**      ELSE.
***       Output record:&1.
**        MESSAGE s022(zabap) WITH lw_count.
**      ENDIF.
**    ENDIF.
**  ENDIF.
**
**ENDFORM.                    " FRM_DOWNLOAD
***&---------------------------------------------------------------------*
***&      Form  FRM_CHECK_WERKS
***&---------------------------------------------------------------------*
***       Check Plant
***----------------------------------------------------------------------*
**FORM frm_check_werks .
**  DATA:
**    lw_werks TYPE t001w-werks.
**
**  IF s_werks[] IS NOT INITIAL.
**    SELECT SINGLE werks
**      INTO lw_werks
**      FROM t001w
**     WHERE werks IN s_werks.
**    IF sy-subrc <> 0.
***     Display the error message
**      SET CURSOR FIELD 'S_WERKS-LOW'.
**      MESSAGE e041 WITH text-m14 space.
**    ENDIF.
**  ENDIF.
**ENDFORM.                    " FRM_CHECK_WERKS
***&---------------------------------------------------------------------*
***&      Form  FRM_SIGN_FRONT
***&---------------------------------------------------------------------*
***       CLOI_PUT_SIGN_IN_FRONT
***----------------------------------------------------------------------*
***      <--O_W_QTY  text
***----------------------------------------------------------------------*
**FORM frm_sign_front  CHANGING o_w_qty TYPE c.
**
**  CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
**    CHANGING
**      value = o_w_qty.
**  CONDENSE:
**    o_w_qty.
**ENDFORM.                    " FRM_SIGN_FRONT
***&---------------------------------------------------------------------*
***&      Form  FRM_GET_DN_FOR_TRANS
***&---------------------------------------------------------------------*
***       Get the Deliver data for transfer orders
***----------------------------------------------------------------------*
***      -->P_I_W_START_DATE  text
***      <--P_LTD_LIPS_TR  text
***----------------------------------------------------------------------*
**FORM frm_get_dn_for_trans USING i_w_start_date TYPE sy-datum
**                       CHANGING o_t_lips       TYPE typ_tab_lips.
**  DATA:
**    lst_po      TYPE typ_po,
**    ltd_po      TYPE typ_tab_po,
**    ltd_po_sel  TYPE typ_tab_po,
**    ltd_mara    TYPE STANDARD TABLE OF typ_mara.
**
**  SELECT ekpo~ebeln
**         ekpo~ebelp
**         ekko~reswk
**         ekpo~werks
**         ekpo~matnr
**         ekbe~zekkn
**         ekbe~vgabe
**         ekbe~gjahr
**         ekbe~belnr
**         ekbe~buzei
**         ekbe~budat
**         ekbe~menge
**         ekbe~xblnr
**    INTO TABLE ltd_po
**    FROM ekko
**    INNER JOIN ekpo
**    ON  ekko~ebeln = ekpo~ebeln
**    INNER JOIN ekbe
**    ON  ekpo~ebeln = ekbe~ebeln
**    AND ekpo~ebelp = ekbe~ebelp
**   WHERE ekko~bukrs = 'BSCN'
**     AND ekko~bsart = 'CUB'
**     AND ekko~loekz = space
**     AND ekpo~loekz = space
**     AND ekpo~matnr IN s_matnr
**     AND ekbe~vgabe = '8'.
**
**  ltd_po_sel[] = ltd_po[].
**  SORT ltd_po_sel BY matnr ASCENDING.
**  DELETE ADJACENT DUPLICATES FROM ltd_po_sel COMPARING matnr.
*** Get the Material Info.
**  SELECT  mara~matnr
**          mara~spart
**          mvke~mvgr2
**    INTO TABLE ltd_mara
**    FROM mara
**    INNER JOIN mvke
**    ON  mara~matnr = mvke~matnr
**    FOR ALL entries IN ltd_po_sel
**   WHERE mara~matnr = ltd_po_sel-matnr
**     AND mara~spart IN s_spart
**     AND mvke~mvgr2 IN s_mvgr2.
**
**  SORT ltd_mara BY matnr ASCENDING.
**
**  REFRESH ltd_po_sel.
**  LOOP AT ltd_po INTO lst_po.
**
**    READ TABLE ltd_mara TRANSPORTING NO FIELDS
**      WITH KEY matnr = lst_po-matnr
**      BINARY SEARCH.
**    IF sy-subrc <> 0.
**      CONTINUE.
**    ENDIF.
**
**    lst_po-vbeln = lst_po-belnr.
**    lst_po-posnr = lst_po-buzei.
**    APPEND lst_po TO ltd_po_sel.
**  ENDLOOP.
**
**  IF ltd_po_sel IS INITIAL.
**    RETURN.
**  ENDIF.
**  SORT ltd_po_sel BY vbeln ASCENDING
**                     posnr ASCENDING.
**  DELETE ADJACENT DUPLICATES FROM ltd_po_sel
**    COMPARING vbeln posnr.
**
*** Get the Deliver data
**  SELECT lips~werks          "Plant
**         lips~lgort          "Storage Location
**         mara~spart          "Product Group
**         lips~matnr          "Material
**         lips~vbeln          "Deliver No.
**         lips~posnr          "item No.
**         likp~wadat          "Plan GI date
**         likp~wadat_ist      "Actual GI date
**         likp~lfdat          "Delivery Date
**         lips~lfimg          "Quantity
**         vbup~wbsta          "Status
**    INTO CORRESPONDING FIELDS OF TABLE o_t_lips
**    FROM lips
**    INNER JOIN likp
**    ON lips~vbeln = likp~vbeln
**    INNER JOIN vbup
**    ON  lips~vbeln = vbup~vbeln
**    AND lips~posnr = vbup~posnr
**    INNER JOIN mara
**    ON lips~matnr = mara~matnr
**    FOR ALL entries IN ltd_po_sel
**   WHERE lips~vbeln = ltd_po_sel-vbeln
**     AND lips~posnr = ltd_po_sel-posnr
**     AND lips~werks IN s_werks
**     AND lips~lgort IN s_lgort
**     AND likp~wadat_ist >= i_w_start_date
**     AND vbup~wbsta = cns_wbsta_c.
**
**  IF sy-subrc = 0.
**    SORT o_t_lips BY werks ASCENDING
**                     lgort ASCENDING
**                     spart ASCENDING
**                     vtweg ASCENDING
**                     matnr ASCENDING
**                     wadat ASCENDING
**                     wadat_ist ASCENDING.
**  ENDIF.
**ENDFORM.                    " FRM_GET_DN_FOR_TRANS
***&---------------------------------------------------------------------*
***&      Form  FRM_SUM_DN_FOR_TRANS
***&---------------------------------------------------------------------*
***       Sum the Deliver data for transfer orders
***----------------------------------------------------------------------*
***      -->I_W_START_DATE   start date
***      -->I_T_LIPS_TR      Deliver data
***      <--O_T_SUM_LIPS_TR  Deliver data
***----------------------------------------------------------------------*
**FORM frm_sum_dn_for_trans USING i_w_start_date  TYPE dats
**                                i_t_lips_tr     TYPE typ_tab_lips
**                       CHANGING o_t_sum_lips_tr TYPE typ_tab_sum_lips.
*** Local variants
**  DATA:
**    lw_lfimg_out   TYPE lips-lfimg,
**    lst_sum_lips   TYPE typ_sum_lips,
**    lst_lips_tmp   TYPE typ_lips,
**    lst_lips       TYPE typ_lips.
**
**  LOOP AT i_t_lips_tr INTO lst_lips_tmp.
**    lst_lips = lst_lips_tmp.
**
**    TRY.
***     Sum the Quantity
**        lw_lfimg_out = lw_lfimg_out + lst_lips-lfimg.
**      CATCH cx_sy_arithmetic_overflow.
***     When the overflow occurrs，display the error message
**        MESSAGE s036 DISPLAY LIKE 'E'.
**        LEAVE LIST-PROCESSING.
**    ENDTRY.
**
**    AT END OF matnr.
**      lst_sum_lips-werks = lst_lips-werks.      "Plant
**      lst_sum_lips-lgort = lst_lips-lgort.      "Storage Location
**      lst_sum_lips-spart = lst_lips-spart.      "Product Group
**      lst_sum_lips-matnr = lst_lips-matnr.      "Material
**      lst_sum_lips-vtweg = lst_lips-vtweg.
**      lst_sum_lips-lfimg = lw_lfimg_out.        "Quantity
**
**      APPEND lst_sum_lips TO o_t_sum_lips_tr.
***     Clear the variants
**      CLEAR:
**        lst_sum_lips,
**        lw_lfimg_out.
**    ENDAT.
**  ENDLOOP.
**
**  SORT o_t_sum_lips_tr BY werks ASCENDING
**                          lgort ASCENDING
**                          spart ASCENDING
**                          vtweg ASCENDING
**                          matnr ASCENDING.

**ENDFORM.                    " FRM_SUM_DN_FOR_TRANS
*Selection text：
*P_FILE:        sdf
*P_FILE2:        sdf
