*&---------------------------------------------------------------------*
*& Report  ZZABRV                                                      *
*&                                                                     *
*&---------------------------------------------------------------------*
*&                                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*

REPORT ZZABRV.

TABLES: VBAK, VBAP, T100.

DATA: BEGIN OF DA_VBAPKOM.

        INCLUDE STRUCTURE VBAPKOM.
DATA: END OF DA_VBAPKOM.
DATA: BEGIN OF TAB OCCURS 1000,
VBELN LIKE VBAP-VBELN,
POSNR LIKE VBAP-POSNR,
END OF TAB.

DATA: DA_OLD_VBELN LIKE VBAK-VBELN.
SELECT-OPTIONS S_VBELN FOR VBAP-VBELN.
PARAMETERS: TEST DEFAULT 'X' AS CHECKBOX.

WRITE / 'document number item'.
ULINE.

* Verkaufspositionen mit CO-Objekt
SELECT * FROM VBAP INTO CORRESPONDING FIELDS OF TABLE TAB
WHERE VBELN IN S_VBELN.
CLEAR DA_OLD_VBELN.
* Eigentliche Nachbearbeitung der gefundenen Belegpositionen
LOOP AT TAB.
  WRITE: /10(10) TAB-VBELN, 22(6) TAB-POSNR.
  IF NOT TEST IS INITIAL.
    WRITE ' test'.
  ENDIF.
* Sichern nicht im Testmodus,
* nicht beim ersten Durchlauf oder wenn nach Fehler beim Einlesen
* DA_OLD_VBELN wieder gecleart wurde,
* nicht, wenn eine Position aus diesem Beleg noch bearbeitet wird
  IF TEST IS INITIAL AND
  NOT DA_OLD_VBELN IS INITIAL AND
  TAB-VBELN NE DA_OLD_VBELN.
* Sichern des Beleges
    CALL FUNCTION 'SD_SALES_DOCUMENT_SAVE'
      EXPORTING
        SYNCHRON                   = ' '
        STATUS_BUFFER_REFRESH      = 'X'
        REQUISITION_BUFFER_REFRESH = 'X'
      EXCEPTIONS
        ERROR_MESSAGE              = 1
        OTHERS                     = 2.
    IF SY-SUBRC = 1.
      PERFORM FEHLER_AUSGEBEN.
    ENDIF.
    IF SY-SUBRC = 0.
      COMMIT WORK.
    ENDIF.
  ENDIF.
  IF TAB-VBELN NE DA_OLD_VBELN.

* Lesen des Verkaufsbeleges
    CALL FUNCTION 'SD_SALES_DOCUMENT_READ'
      EXPORTING
        DOCUMENT_NUMBER = TAB-VBELN
      EXCEPTIONS
        ERROR_MESSAGE   = 1
        OTHERS          = 2.
    IF SY-SUBRC = 1.
      PERFORM FEHLER_AUSGEBEN.
      CLEAR DA_OLD_VBELN.
    ENDIF.
    CHECK SY-SUBRC = 0.
    DA_OLD_VBELN = TAB-VBELN.
  ENDIF.
* Lesen der Position
  CALL FUNCTION 'SD_SALES_ITEM_READ'
    EXPORTING
      ITEM_NUMBER = TAB-POSNR.

* Vorbereiten der VBAP-Bearbeitung
  CALL FUNCTION 'SD_SALES_DOCUMENT_PERFORM'
    EXPORTING
      IN_PROGRAM    = 'SAPFV45P'
      PERFORM       = 'VBAP_BEARBEITEN_VORBEREITEN'
    EXCEPTIONS
      ERROR_MESSAGE = 1
      OTHERS        = 2.
  IF SY-SUBRC = 1.
    PERFORM FEHLER_AUSGEBEN.
  ENDIF.
  CHECK SY-SUBRC = 0.
  CALL FUNCTION 'SD_SALES_DOCUMENT_PERFORM'
    EXPORTING
      IN_PROGRAM    = 'SAPFV45P'
      PERFORM       = 'VBAP_FUELLEN'
    EXCEPTIONS
      ERROR_MESSAGE = 1
      OTHERS        = 2.
  IF SY-SUBRC = 1.
    PERFORM FEHLER_AUSGEBEN.
  ENDIF.
  CHECK SY-SUBRC = 0.
* #nderung in *VBAP damit das ABRV aktualisiert wird
  CALL FUNCTION 'SD_SALES_DOCUMENT_PERFORM'
    EXPORTING
      IN_PROGRAM    = 'SAPMV45A'
      PERFORM       = 'ZZPAOBJNR_DELETE'
    EXCEPTIONS
      ERROR_MESSAGE = 1
      OTHERS        = 2.
  IF SY-SUBRC = 1.
    PERFORM FEHLER_AUSGEBEN.
  ENDIF.
  CHECK SY-SUBRC = 0.

* Aktualisieren der Aufteilungsregeln
  CALL FUNCTION 'SD_SALES_DOCUMENT_PERFORM'
    EXPORTING
      IN_PROGRAM    = 'SAPFV45P'
      PERFORM       = 'AUFTEILUNGSREGEL_AKTUALISIEREN'
    EXCEPTIONS
      ERROR_MESSAGE = 1
      OTHERS        = 2.
  IF SY-SUBRC > 0.
    WRITE AT 30 'X'.
  ENDIF.
  IF SY-SUBRC = 1.
    PERFORM FEHLER_AUSGEBEN.
  ENDIF.
  CHECK SY-SUBRC = 0.

* Bearbeitung abschlie#en
  CALL FUNCTION 'SD_SALES_DOCUMENT_PERFORM'
    EXPORTING
      IN_PROGRAM    = 'SAPFV45P'
      PERFORM       = 'XVBAP_AENDERN'
    EXCEPTIONS
      ERROR_MESSAGE = 1
      OTHERS        = 2.
  IF SY-SUBRC = 1.
    PERFORM FEHLER_AUSGEBEN.
  ENDIF.
  CHECK SY-SUBRC = 0.

ENDLOOP.

IF TEST IS INITIAL.
* Sichern des Beleges
  CALL FUNCTION 'SD_SALES_DOCUMENT_SAVE'
    EXPORTING
      SYNCHRON                   = ' '
      STATUS_BUFFER_REFRESH      = 'X'
      REQUISITION_BUFFER_REFRESH = 'X'
    EXCEPTIONS
      ERROR_MESSAGE              = 1
      OTHERS                     = 2.
  IF SY-SUBRC = 1.
    PERFORM FEHLER_AUSGEBEN.
  ENDIF.
  IF SY-SUBRC = 0.
    COMMIT WORK.
  ENDIF.
ENDIF.

* *
* FORM FEHLER_AUSGEBEN *
* *
* Fehlermeldung in die Liste ausgeben *
* *
FORM FEHLER_AUSGEBEN.
  DATA: DA_OUTPUT(160).
  SELECT SINGLE * FROM T100 WHERE ARBGB = SY-MSGID
  AND MSGNR = SY-MSGNO
  AND SPRSL = SY-LANGU.
  DA_OUTPUT = T100-TEXT.
  REPLACE '&' WITH SY-MSGV1 INTO DA_OUTPUT. CONDENSE DA_OUTPUT.
  REPLACE '&' WITH SY-MSGV2 INTO DA_OUTPUT. CONDENSE DA_OUTPUT.
  REPLACE '&' WITH SY-MSGV3 INTO DA_OUTPUT. CONDENSE DA_OUTPUT.
  REPLACE '&' WITH SY-MSGV4 INTO DA_OUTPUT. CONDENSE DA_OUTPUT.
  SUMMARY.
  WRITE: / TAB-VBELN, 19 SY-MSGID, SY-MSGNO, DA_OUTPUT(93).
  DETAIL.
ENDFORM.                    "FEHLER_AUSGEBEN

*Selection text£º
*S_VBELN:D       .
*TEST:        TEST?
