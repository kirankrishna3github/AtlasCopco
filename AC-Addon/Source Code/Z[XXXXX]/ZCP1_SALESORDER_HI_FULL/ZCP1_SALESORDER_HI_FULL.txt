REPORT ZAL_ABAP message-id 26 line-size 255
no standard page heading.
* ZCP1_SALESORDER_HI_FULL.
PARAMETER DOWNLOAD(1) DEFAULT 'S' lower case. "N-svr,Y-clnt
PARAMETER EXECMODE(1) DEFAULT 'B' lower case. "D-dlg,B-btch
PARAMETER OUT_DIR(48) DEFAULT "output file dir
'/var/load/CQ1/UK/read' lower case.
PARAMETER IN_DIR(48) DEFAULT "input file dir
'/var/load/CQ1/UK/read' lower case.
PARAMETER P_DEST TYPE RFCDES-RFCDEST DEFAULT
'NONE'.
PARAMETER P_PROGID TYPE RFCOPT-RFCEXEC DEFAULT
SPACE.
PARAMETER P_GWHOST TYPE RFCOPT-RFCGWHOST DEFAULT
SPACE.
PARAMETER P_GWSERV TYPE RFCOPT-RFCGWSERV DEFAULT
SPACE.
PARAMETER P_SRVFM(30) DEFAULT "Server Callback function
SPACE.
PARAMETER P_PKGSZ TYPE I DEFAULT "Stream package size
5000.
PARAMETER P_SNC_ON(1) DEFAULT "X-on SPACE-off
SPACE.

PARAMETER P_DF_VK(40) DEFAULT "ABAP data flow object key
'' lower case.
PARAMETER P_DI_GEN(40) DEFAULT "DI version that generated ABAP
'' lower case.

*** Machine generated ABAP. Do not modify.            ***
*** (C)Copyright Business Objects S.A.  All rights reserved. ***
*
* Date Time:
*    04/26/17 12:37:55
* SAP used for generated this ABAP:
*    Release: 701
*    Host   : 10.25.3.82
*
* ABAP Dataflow Name:
*    DF_R3_CTS_LZ_SAP_CP1_SAO_Header_Items_FullLoad_I
* ABAP Dataflow comments:
*  SAP source : VBAK VBKD VBUK
* ABAP program name in SAP:
*  ZCP1_SALESORDER_HI_FULL
* Generated ABAP file name:
*  //AIRSBEAP0512/D$/Data/SAPLogistics/VAL/ABAP/ZCP1_SALESORDER_HI_F
*    ULL
TABLES VBAK.
TABLES VBUK.
TABLES VBAP.
TABLES VBUP.
TABLES VBPA.

DATA: begin of ITAB6 occurs 0,
H_VBELN(10) TYPE C,
H_ERDAT TYPE D,
H_ERNAM(12) TYPE C,
H_ERZET(24) TYPE C,
H_VBTYP(1) TYPE C,
H_AUART(4) TYPE C,
H_AUGRU(3) TYPE C,
H_NETWR(16) TYPE P DECIMALS 2,
H_WAERK(5) TYPE C,
H_VKORG(4) TYPE C,
H_VTWEG(2) TYPE C,
H_SPART(2) TYPE C,
H_VKGRP(3) TYPE C,
H_VKBUR(4) TYPE C,
H_GUEBG TYPE D,
H_GUEEN TYPE D,
H_KNUMV(10) TYPE C,
H_BSTNK(20) TYPE C,
H_KUNNR(10) TYPE C,
H_AEDAT TYPE D,
H_OBJNR(22) TYPE C,
H_BUKRS_VF(4) TYPE C,
H_AUFNR(12) TYPE C,
H_QMNUM(12) TYPE C,
H_LFSTK(1) TYPE C,
H_FKSAK(1) TYPE C,
H_ABSTK(1) TYPE C,
H_GBSTK(1) TYPE C,
H_UVVLS(1) TYPE C,
H_UVALL(1) TYPE C,
H_CMPS1(1) TYPE C,
ABGRS(6) TYPE C,
H_POSNR(6) TYPE N,
H_KDGRP(2) TYPE C,
H_BZIRK(6) TYPE C,
H_VGTYP(1) TYPE C,
I_VBELN(10) TYPE C,
I_POSNR(6) TYPE N,
I_MATNR(18) TYPE C,
I_MATKL(9) TYPE C,
I_PSTYV(4) TYPE C,
I_PRODH(18) TYPE C,
I_MEINS(3) TYPE C,
I_WAERK(5) TYPE C,
I_KWMENG(16) TYPE P DECIMALS 3,
I_WERKS(4) TYPE C,
I_VGBEL(10) TYPE C,
I_VGPOS(6) TYPE N,
I_LGORT(4) TYPE C,
I_WAVWR(16) TYPE P DECIMALS 2,
I_AUFNR(12) TYPE C,
I_SERNR(8) TYPE C,
I_OBJNR(22) TYPE C,
I_KDGRP(2) TYPE C,
I_BZIRK(6) TYPE C,
I_ABSTA(1) TYPE C,
I_GBSTA(1) TYPE C,
I_FKSAA(1) TYPE C,
I_VBELV(10) TYPE C,
I_POSNV(6) TYPE N,
I_KUNNR_BILLTO(10) TYPE C,
H_KUNNR_BILLTO(10) TYPE C,
I_ARKTX(40) TYPE C,
NETWR(16) TYPE P DECIMALS 2,
NETPR(16) TYPE P DECIMALS 2.
DATA: end of ITAB6.

data: append_flag(1) value ' ',
      cntbuf type i,
      delimleng type i,last_batch(1) value ' '.

CONSTANTS C_DF_VK(40) VALUE '3717'.
CONSTANTS C_DI_GEN(40) VALUE '14.2.3.660'.
DATA WARN_MSG(50).


DATA: gv_directory     TYPE epsdirnam  VALUE '/var/load/xxx/UK/read/',
      gv_logsys        LIKE tbdlst-logsys.

start-of-selection.
* Logical system
  CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
    IMPORTING
      own_logical_system             = gv_logsys
    EXCEPTIONS
      own_logical_system_not_defined = 1
      OTHERS                         = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE 'E' NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    STOP.
  ENDIF.
  REPLACE 'xxx' IN out_dir WITH gv_logsys(3).
  REPLACE 'xxx' IN in_dir WITH gv_logsys(3).


  IF DOWNLOAD = 'S' OR
     DOWNLOAD = 'N' OR
     DOWNLOAD = 'Y'.
      .
  ELSE.
     DATA: m_xfer_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'data transfer method: ' DOWNLOAD
'. Regenerate the ABAP program and upload to this system.'
     INTO m_xfer_err_msg.
     MESSAGE  E240(S#) WITH m_xfer_err_msg.
  ENDIF.

  IF EXECMODE = 'B' OR
     EXECMODE = 'D'.
      .
  ELSE.
     DATA: m_exec_err_msg(700).
     CONCATENATE
'ABAP program does not recognize this new '
'execution option: ' EXECMODE
'. Regenerate the ABAP program and upload to this system.'
     INTO m_exec_err_msg.
     MESSAGE  E240(S#) WITH m_exec_err_msg.
  ENDIF.

  IF DOWNLOAD = 'S'.
     PERFORM CONNECT_RFCDEST_TO_PROGID.
  ENDIF.



PERFORM FORM6.
last_batch = 'X'.
PERFORM FORM7.
FREE ITAB6.
  IF DOWNLOAD = 'S'.
     PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
  ENDIF.


end-of-selection.

CLEAR WARN_MSG.

IF NOT P_DF_VK IS INITIAL.
  IF P_DF_VK <> C_DF_VK.
     CONCATENATE '$$Warning$'
                 C_DF_VK
                 '$' INTO WARN_MSG.
  ENDIF.
ENDIF.
IF NOT P_DI_GEN IS INITIAL.
  IF P_DI_GEN <> C_DI_GEN.
     IF WARN_MSG IS INITIAL.
       CONCATENATE '$$Warning$$'
                   C_DI_GEN
                   INTO WARN_MSG.
     ELSE.
       CONCATENATE WARN_MSG
                   C_DI_GEN
                   INTO WARN_MSG.
     ENDIF.
  ENDIF.
ENDIF.

IF NOT WARN_MSG IS INITIAL.
  IF EXECMODE = 'D'.
    WRITE WARN_MSG.
    NEW-LINE.
  ELSE.
    MESSAGE S240(S#) with WARN_MSG.
  ENDIF.
ENDIF.


write  '* Program Complete *'.
write  '(C)Copyright Business Objects S.A.  All rights reserved.'.

FORM FORM6.
DATA ALTMP1(10) TYPE C.
DATA ALTMP2 TYPE D.
DATA ALTMP3(12) TYPE C.
DATA ALTMP4 TYPE T.
DATA ALTMP5(1) TYPE C.
DATA ALTMP6(4) TYPE C.
DATA ALTMP7(3) TYPE C.
DATA ALTMP8 TYPE F.
DATA ALTMP9(5) TYPE C.
DATA ALTMP10(4) TYPE C.
DATA ALTMP11(2) TYPE C.
DATA ALTMP12(2) TYPE C.
DATA ALTMP13(3) TYPE C.
DATA ALTMP14(4) TYPE C.
DATA ALTMP15 TYPE D.
DATA ALTMP16 TYPE D.
DATA ALTMP17(10) TYPE C.
DATA ALTMP18(20) TYPE C.
DATA ALTMP19(10) TYPE C.
DATA ALTMP20 TYPE D.
DATA ALTMP21(22) TYPE C.
DATA ALTMP22(4) TYPE C.
DATA ALTMP23(12) TYPE C.
DATA ALTMP24(12) TYPE C.
DATA ALTMP25(1) TYPE C.
DATA ALTMP26(1) TYPE C.
DATA ALTMP27(1) TYPE C.
DATA ALTMP28(1) TYPE C.
DATA ALTMP29(1) TYPE C.
DATA ALTMP30(1) TYPE C.
DATA ALTMP31(1) TYPE C.
DATA ALTMP32(6) TYPE C.
DATA ALTMP33 TYPE F.
DATA ALTMP34 TYPE F.
DATA ALTMP35 TYPE F.
DATA ALTMP36(1) TYPE C.
DATA ALTMP37(10) TYPE C.
DATA ALTMP38(6) TYPE N.
DATA ALTMP39(18) TYPE C.
DATA ALTMP40(9) TYPE C.
DATA ALTMP41(4) TYPE C.
DATA ALTMP42(18) TYPE C.
DATA ALTMP43(3) TYPE C.
DATA ALTMP44(5) TYPE C.
DATA ALTMP45(16) TYPE P DECIMALS 3.
DATA ALTMP46(4) TYPE C.
DATA ALTMP47(10) TYPE C.
DATA ALTMP48(6) TYPE N.
DATA ALTMP49(4) TYPE C.
DATA ALTMP50(16) TYPE P DECIMALS 2.
DATA ALTMP51(12) TYPE C.
DATA ALTMP52(8) TYPE C.
DATA ALTMP53(22) TYPE C.
DATA ALTMP54 TYPE F.
DATA ALTMP55 TYPE F.
DATA ALTMP56(1) TYPE C.
DATA ALTMP57(1) TYPE C.
DATA ALTMP58(1) TYPE C.
DATA ALTMP59(10) TYPE C.
DATA ALTMP60(6) TYPE N.
DATA ALTMP61(256) TYPE C.
DATA ALTMP62(256) TYPE C.
DATA ALTMP63(40) TYPE C.
DATA ALTMP64(16) TYPE P DECIMALS 2.
DATA ALTMP65(16) TYPE P DECIMALS 2.

DATA VBAK9VBELN LIKE VBAK-VBELN.
DATA VBAK9ERDAT LIKE VBAK-ERDAT.
DATA VBAK9ERNAM LIKE VBAK-ERNAM.
DATA VBAK9ERZET LIKE VBAK-ERZET.
DATA VBAK9VBTYP LIKE VBAK-VBTYP.
DATA VBAK9AUART LIKE VBAK-AUART.
DATA VBAK9AUGRU LIKE VBAK-AUGRU.
DATA VBAK9WAERK LIKE VBAK-WAERK.
DATA VBAK9VKORG LIKE VBAK-VKORG.
DATA VBAK9VTWEG LIKE VBAK-VTWEG.
DATA VBAK9SPART LIKE VBAK-SPART.
DATA VBAK9VKGRP LIKE VBAK-VKGRP.
DATA VBAK9VKBUR LIKE VBAK-VKBUR.
DATA VBAK9GUEBG LIKE VBAK-GUEBG.
DATA VBAK9GUEEN LIKE VBAK-GUEEN.
DATA VBAK9KNUMV LIKE VBAK-KNUMV.
DATA VBAK9BSTNK LIKE VBAK-BSTNK.
DATA VBAK9KUNNR LIKE VBAK-KUNNR.
DATA VBAK9AEDAT LIKE VBAK-AEDAT.
DATA VBAK9OBJNR LIKE VBAK-OBJNR.
DATA VBAK9BUKRS_VF LIKE VBAK-BUKRS_VF.
DATA VBAK9AUFNR LIKE VBAK-AUFNR.
DATA VBAK9QMNUM LIKE VBAK-QMNUM.
DATA VBUK9LFSTK LIKE VBUK-LFSTK.
DATA VBUK9FKSAK LIKE VBUK-FKSAK.
DATA VBUK9ABSTK LIKE VBUK-ABSTK.
DATA VBUK9GBSTK LIKE VBUK-GBSTK.
DATA VBUK9UVVLS LIKE VBUK-UVVLS.
DATA VBUK9UVALL LIKE VBUK-UVALL.
DATA VBUK9CMPS1 LIKE VBUK-CMPS1.
DATA VBAP9ABGRS LIKE VBAP-ABGRS.
DATA VBAK9VGTYP LIKE VBAK-VGTYP.
DATA VBAP9VBELN LIKE VBAP-VBELN.
DATA VBAP9POSNR LIKE VBAP-POSNR.
DATA VBAP9MATNR LIKE VBAP-MATNR.
DATA VBAP9MATKL LIKE VBAP-MATKL.
DATA VBAP9PSTYV LIKE VBAP-PSTYV.
DATA VBAP9PRODH LIKE VBAP-PRODH.
DATA VBAP9MEINS LIKE VBAP-MEINS.
DATA VBAP9WAERK LIKE VBAP-WAERK.
DATA VBAP9KWMENG LIKE VBAP-KWMENG.
DATA VBAP9WERKS LIKE VBAP-WERKS.
DATA VBAP9VGBEL LIKE VBAP-VGBEL.
DATA VBAP9VGPOS LIKE VBAP-VGPOS.
DATA VBAP9LGORT LIKE VBAP-LGORT.
DATA VBAP9WAVWR LIKE VBAP-WAVWR.
DATA VBAP9AUFNR LIKE VBAP-AUFNR.
DATA VBAP9SERNR LIKE VBAP-SERNR.
DATA VBAP9OBJNR LIKE VBAP-OBJNR.
DATA VBUP9ABSTA LIKE VBUP-ABSTA.
DATA VBUP9GBSTA LIKE VBUP-GBSTA.
DATA VBUP9FKSAA LIKE VBUP-FKSAA.
DATA VBAP9VBELV LIKE VBAP-VBELV.
DATA VBAP9POSNV LIKE VBAP-POSNV.
DATA VBPA9KUNNR LIKE VBPA-KUNNR.
DATA VBPA9POSNR LIKE VBPA-POSNR.
DATA VBAP9ARKTX LIKE VBAP-ARKTX.
DATA VBAP9NETWR LIKE VBAP-NETWR.
DATA VBAP9NETPR LIKE VBAP-NETPR.
DATA VBPA9PARVW LIKE VBPA-PARVW.
DATA VBPA9VBELN LIKE VBPA-VBELN.
DATA VBUP9VBELN LIKE VBUP-VBELN.
DATA VBUP9POSNR LIKE VBUP-POSNR.
DATA VBUK9VBELN LIKE VBUK-VBELN.

ALTMP8 = ''.
ALTMP33 = ''.
ALTMP34 = ''.
ALTMP35 = ''.
ALTMP54 = ''.
ALTMP55 = ''.


SELECT
  VBAK9~VBELN
  VBAK9~ERDAT
  VBAK9~ERNAM
  VBAK9~ERZET
  VBAK9~VBTYP
  VBAK9~AUART
  VBAK9~AUGRU
  VBAK9~WAERK
  VBAK9~VKORG
  VBAK9~VTWEG
  VBAK9~SPART
  VBAK9~VKGRP
  VBAK9~VKBUR
  VBAK9~GUEBG
  VBAK9~GUEEN
  VBAK9~KNUMV
  VBAK9~BSTNK
  VBAK9~KUNNR
  VBAK9~AEDAT
  VBAK9~OBJNR
  VBAK9~BUKRS_VF
  VBAK9~AUFNR
  VBAK9~QMNUM
  VBUK9~LFSTK
  VBUK9~FKSAK
  VBUK9~ABSTK
  VBUK9~GBSTK
  VBUK9~UVVLS
  VBUK9~UVALL
  VBUK9~CMPS1
  VBAP9~ABGRS
  VBAK9~VGTYP
  VBAP9~VBELN
  VBAP9~POSNR
  VBAP9~MATNR
  VBAP9~MATKL
  VBAP9~PSTYV
  VBAP9~PRODH
  VBAP9~MEINS
  VBAP9~WAERK
  VBAP9~KWMENG
  VBAP9~WERKS
  VBAP9~VGBEL
  VBAP9~VGPOS
  VBAP9~LGORT
  VBAP9~WAVWR
  VBAP9~AUFNR
  VBAP9~SERNR
  VBAP9~OBJNR
  VBUP9~ABSTA
  VBUP9~GBSTA
  VBUP9~FKSAA
  VBAP9~VBELV
  VBAP9~POSNV
  VBPA9~KUNNR
  VBPA9~POSNR
  VBAP9~ARKTX
  VBAP9~NETWR
  VBAP9~NETPR
  VBPA9~PARVW
  VBPA9~VBELN
  VBUP9~VBELN
  VBUP9~POSNR
  VBUK9~VBELN
into (VBAK9VBELN,
  VBAK9ERDAT,
  VBAK9ERNAM,
  VBAK9ERZET,
  VBAK9VBTYP,
  VBAK9AUART,
  VBAK9AUGRU,
  VBAK9WAERK,
  VBAK9VKORG,
  VBAK9VTWEG,
  VBAK9SPART,
  VBAK9VKGRP,
  VBAK9VKBUR,
  VBAK9GUEBG,
  VBAK9GUEEN,
  VBAK9KNUMV,
  VBAK9BSTNK,
  VBAK9KUNNR,
  VBAK9AEDAT,
  VBAK9OBJNR,
  VBAK9BUKRS_VF,
  VBAK9AUFNR,
  VBAK9QMNUM,
  VBUK9LFSTK,
  VBUK9FKSAK,
  VBUK9ABSTK,
  VBUK9GBSTK,
  VBUK9UVVLS,
  VBUK9UVALL,
  VBUK9CMPS1,
  VBAP9ABGRS,
  VBAK9VGTYP,
  VBAP9VBELN,
  VBAP9POSNR,
  VBAP9MATNR,
  VBAP9MATKL,
  VBAP9PSTYV,
  VBAP9PRODH,
  VBAP9MEINS,
  VBAP9WAERK,
  VBAP9KWMENG,
  VBAP9WERKS,
  VBAP9VGBEL,
  VBAP9VGPOS,
  VBAP9LGORT,
  VBAP9WAVWR,
  VBAP9AUFNR,
  VBAP9SERNR,
  VBAP9OBJNR,
  VBUP9ABSTA,
  VBUP9GBSTA,
  VBUP9FKSAA,
  VBAP9VBELV,
  VBAP9POSNV,
  VBPA9KUNNR,
  VBPA9POSNR,
  VBAP9ARKTX,
  VBAP9NETWR,
  VBAP9NETPR,
  VBPA9PARVW,
  VBPA9VBELN,
  VBUP9VBELN,
  VBUP9POSNR,
  VBUK9VBELN)
FROM VBAK AS VBAK9
 INNER JOIN VBAP AS VBAP9
 ON ( VBAK9~VBELN = VBAP9~VBELN )
 INNER JOIN VBUK AS VBUK9
 ON ( VBAK9~VBELN = VBUK9~VBELN )
 INNER JOIN VBUP AS VBUP9
 ON ( ( VBAP9~POSNR = VBUP9~POSNR )
 AND ( VBAP9~VBELN = VBUP9~VBELN ) )
 INNER JOIN VBPA AS VBPA9
 ON ( VBPA9~VBELN = VBAP9~VBELN )
WHERE ( ( VBAK9~AUART <> 'ZO03' )
 AND ( ( VBPA9~PARVW = 'RE' )
 AND ( VBAK9~VTWEG = '11' ) ) ).
ALTMP1 = VBAK9VBELN.
ALTMP2 = VBAK9ERDAT.
ALTMP3 = VBAK9ERNAM.
ALTMP4 = VBAK9ERZET.
ALTMP5 = VBAK9VBTYP.
ALTMP6 = VBAK9AUART.
ALTMP7 = VBAK9AUGRU.
ALTMP9 = VBAK9WAERK.
ALTMP10 = VBAK9VKORG.
ALTMP11 = VBAK9VTWEG.
ALTMP12 = VBAK9SPART.
ALTMP13 = VBAK9VKGRP.
ALTMP14 = VBAK9VKBUR.
ALTMP15 = VBAK9GUEBG.
ALTMP16 = VBAK9GUEEN.
ALTMP17 = VBAK9KNUMV.
ALTMP18 = VBAK9BSTNK.
ALTMP19 = VBAK9KUNNR.
ALTMP20 = VBAK9AEDAT.
ALTMP21 = VBAK9OBJNR.
ALTMP22 = VBAK9BUKRS_VF.
ALTMP23 = VBAK9AUFNR.
ALTMP24 = VBAK9QMNUM.
ALTMP25 = VBUK9LFSTK.
ALTMP26 = VBUK9FKSAK.
ALTMP27 = VBUK9ABSTK.
ALTMP28 = VBUK9GBSTK.
ALTMP29 = VBUK9UVVLS.
ALTMP30 = VBUK9UVALL.
ALTMP31 = VBUK9CMPS1.
ALTMP32 = VBAP9ABGRS.
ALTMP36 = VBAK9VGTYP.
ALTMP37 = VBAP9VBELN.
ALTMP38 = VBAP9POSNR.
ALTMP39 = VBAP9MATNR.
ALTMP40 = VBAP9MATKL.
ALTMP41 = VBAP9PSTYV.
ALTMP42 = VBAP9PRODH.
ALTMP43 = VBAP9MEINS.
ALTMP44 = VBAP9WAERK.
ALTMP45 = VBAP9KWMENG.
ALTMP46 = VBAP9WERKS.
ALTMP47 = VBAP9VGBEL.
ALTMP48 = VBAP9VGPOS.
ALTMP49 = VBAP9LGORT.
ALTMP50 = VBAP9WAVWR.
ALTMP51 = VBAP9AUFNR.
ALTMP52 = VBAP9SERNR.
ALTMP53 = VBAP9OBJNR.
ALTMP56 = VBUP9ABSTA.
ALTMP57 = VBUP9GBSTA.
ALTMP58 = VBUP9FKSAA.
ALTMP59 = VBAP9VBELV.
ALTMP60 = VBAP9POSNV.
if ( VBPA9POSNR = 10 ).
ALTMP61 = VBPA9KUNNR.
else.
ALTMP61 = ''.
 endif.
if ( VBPA9POSNR = 0 ).
ALTMP62 = VBPA9KUNNR.
else.
ALTMP62 = ''.
 endif.
ALTMP63 = VBAP9ARKTX.
ALTMP64 = VBAP9NETWR.
ALTMP65 = VBAP9NETPR.
 move ALTMP1 to ITAB6-H_VBELN.
 move ALTMP2 to ITAB6-H_ERDAT.
 move ALTMP3 to ITAB6-H_ERNAM.
 move ALTMP4 to ITAB6-H_ERZET.
 move ALTMP5 to ITAB6-H_VBTYP.
 move ALTMP6 to ITAB6-H_AUART.
 move ALTMP7 to ITAB6-H_AUGRU.
 move ALTMP8 to ITAB6-H_NETWR.
 move ALTMP9 to ITAB6-H_WAERK.
 move ALTMP10 to ITAB6-H_VKORG.
 move ALTMP11 to ITAB6-H_VTWEG.
 move ALTMP12 to ITAB6-H_SPART.
 move ALTMP13 to ITAB6-H_VKGRP.
 move ALTMP14 to ITAB6-H_VKBUR.
 move ALTMP15 to ITAB6-H_GUEBG.
 move ALTMP16 to ITAB6-H_GUEEN.
 move ALTMP17 to ITAB6-H_KNUMV.
 move ALTMP18 to ITAB6-H_BSTNK.
 move ALTMP19 to ITAB6-H_KUNNR.
 move ALTMP20 to ITAB6-H_AEDAT.
 move ALTMP21 to ITAB6-H_OBJNR.
 move ALTMP22 to ITAB6-H_BUKRS_VF.
 move ALTMP23 to ITAB6-H_AUFNR.
 move ALTMP24 to ITAB6-H_QMNUM.
 move ALTMP25 to ITAB6-H_LFSTK.
 move ALTMP26 to ITAB6-H_FKSAK.
 move ALTMP27 to ITAB6-H_ABSTK.
 move ALTMP28 to ITAB6-H_GBSTK.
 move ALTMP29 to ITAB6-H_UVVLS.
 move ALTMP30 to ITAB6-H_UVALL.
 move ALTMP31 to ITAB6-H_CMPS1.
 move ALTMP32 to ITAB6-ABGRS.
 move ALTMP33 to ITAB6-H_POSNR.
 move ALTMP34 to ITAB6-H_KDGRP.
 move ALTMP35 to ITAB6-H_BZIRK.
 move ALTMP36 to ITAB6-H_VGTYP.
 move ALTMP37 to ITAB6-I_VBELN.
 move ALTMP38 to ITAB6-I_POSNR.
 move ALTMP39 to ITAB6-I_MATNR.
 move ALTMP40 to ITAB6-I_MATKL.
 move ALTMP41 to ITAB6-I_PSTYV.
 move ALTMP42 to ITAB6-I_PRODH.
 move ALTMP43 to ITAB6-I_MEINS.
 move ALTMP44 to ITAB6-I_WAERK.
 move ALTMP45 to ITAB6-I_KWMENG.
 move ALTMP46 to ITAB6-I_WERKS.
 move ALTMP47 to ITAB6-I_VGBEL.
 move ALTMP48 to ITAB6-I_VGPOS.
 move ALTMP49 to ITAB6-I_LGORT.
 move ALTMP50 to ITAB6-I_WAVWR.
 move ALTMP51 to ITAB6-I_AUFNR.
 move ALTMP52 to ITAB6-I_SERNR.
 move ALTMP53 to ITAB6-I_OBJNR.
 move ALTMP54 to ITAB6-I_KDGRP.
 move ALTMP55 to ITAB6-I_BZIRK.
 move ALTMP56 to ITAB6-I_ABSTA.
 move ALTMP57 to ITAB6-I_GBSTA.
 move ALTMP58 to ITAB6-I_FKSAA.
 move ALTMP59 to ITAB6-I_VBELV.
 move ALTMP60 to ITAB6-I_POSNV.
 move ALTMP61 to ITAB6-I_KUNNR_BILLTO.
 move ALTMP62 to ITAB6-H_KUNNR_BILLTO.
 move ALTMP63 to ITAB6-I_ARKTX.
 move ALTMP64 to ITAB6-NETWR.
 move ALTMP65 to ITAB6-NETPR.
 append ITAB6.
 cntbuf = cntbuf + 1.
 if download = 'N'.
  if cntbuf > 5000.
    perform FORM7.
    clear cntbuf.
    refresh ITAB6.
    append_flag = 'A'.
  endif.
 endif.
 if download = 'S'.
  if cntbuf > P_PKGSZ.
    perform FORM7.
    clear cntbuf.
    refresh ITAB6.
  endif.
 endif.
ENDSELECT.
ENDFORM.

FORM FORM7.
data: outfile(512), ldfile(50).
ldfile = 'CTS_LZ_SAP_CP1_SALESORDER_HI_FULLLOAD'.
concatenate out_dir ldfile into outfile
  separated by '/'.
  IF DOWNLOAD = 'S'.
     DATA: error_message(700),mtext(800),iEOP(1).
     CALL FUNCTION P_SRVFM
          DESTINATION P_DEST
          KEEPING LOGICAL UNIT OF WORK
          EXPORTING
            EOS = last_batch
          IMPORTING
            EOP = iEOP
          TABLES
            E_TABLE = ITAB6
          EXCEPTIONS
            READ_ERROR = 1
            SYSTEM_FAILURE = 2
            MESSAGE error_message
            COMMUNICATION_FAILURE = 3
            MESSAGE error_message
            OTHERS = 4.

     IF sy-subrc ne 0.
        Case sy-subrc.
        when 1.
        CONCATENATE
        'Data Services read error. '
        'Check Data Services error log.'
        INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 2.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 3.
        CONCATENATE
'SAP System Failure while calling DS remote function: '
      error_message INTO mtext.
        MESSAGE  E240(S#) WITH mtext.
        when 4.
        MESSAGE  E240(S#) WITH
'Other SAP System Failure while calling DS remote function.'.
        endcase.
      ENDIF.
      IF iEOP = 'X'.
         PERFORM DISCONNECT_RFCDEST_FROM_PROGID.
         LEAVE PROGRAM.
       ENDIF.
  ELSE.
data  dlmtlen type i value '1'.
data xdlmtlen type i value '1'.
data:
  ht(1) type c,
  xht(1) type x,
  conv type ref to cl_abap_conv_in_ce.
xht = '7F'.
conv = cl_abap_conv_in_ce=>create(
  encoding = '1100'
  input = xht
).
call method conv->read(
  exporting n    = xdlmtlen
  importing data = ht
            len = dlmtlen
).
data return_code type i.
 perform write_delimited_file
           tables   ITAB6
           using    outfile
                    append_flag
                    ht
                    dlmtlen
                    download
           changing return_code.

  case return_code.
    when 1.
      IF EXECMODE = 'D'.
        WRITE: /5 'No line selected'.
      ELSE.
        MESSAGE E047(S#).
      ENDIF.
    when 2.
      IF EXECMODE = 'D'.
        WRITE: /5 'Open File Error -- ', 25 OUTFILE.
      ELSE.
        MESSAGE  E084(E0) WITH OUTFILE.
      ENDIF.
    when 3.
      IF EXECMODE = 'D'.
        WRITE: /5 'Data exceed length limit (8192) '.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Data exceed length limit (8192) '.
      ENDIF.
    when 4.
      IF EXECMODE = 'D'.
        WRITE: /5 'Call function WS_DOWNLOAD error'.
      ELSE.
        MESSAGE  E240(S#) WITH
             'Call function WS_DOWNLOAD error'.
      ENDIF.
  endcase.
 ENDIF.
ENDFORM.

FORM SUBSTRING USING SRC BEG LEN CHANGING RET.

DATA: VA1 TYPE I.
DATA: VA2 TYPE I.
DATA: VA3 TYPE I.

VA3 = STRLEN( SRC ).

IF  BEG = 0.   VA1 = 0.
ELSE.
  IF  BEG < 0.
    VA1 = VA3 + BEG.
    IF  VA1 < 0.   VA1 = 0.
    ENDIF.
  ELSE.          VA1 = BEG - 1.
  ENDIF.
ENDIF.

IF  LEN < 0.   VA2 = 0.
ELSE.          VA2 = VA3 - VA1.
ENDIF.

IF  VA2 > LEN. VA2 = LEN.
ENDIF.

IF  VA2 < 1.   MOVE ''           TO RET.
ELSE.          MOVE SRC+VA1(VA2) TO RET.
ENDIF.

ENDFORM.

form write_delimited_file
           tables   datatab
           using    file
                    append
                    delimit
                    dlength
                    dwnload
          changing rc.

  data: type1,
        appd(1),
        temp(32),
        time1(8),
        date1(10),
        output(8192),
        rcount type i,
        offset type i,
        tablen type i,
        maxlen type i value '8192'.

  data: begin of clientab occurs 0,
             output(8192),
          end of clientab.

  field-symbols: <f>.
  field-symbols <delim1>.
  data delim2(16).
  data l_filename type string.

  appd = append.
  if appd is not initial.
     appd = 'X'.
  endif.
  move file to l_filename.
  describe table datatab lines tablen.


  if dwnload = 'Y'.
     clear clientab. refresh clientab.
     rcount = 0.
  else.
     if appd = space.
   open dataset file for output in text mode ENCODING UTF-8.
     else.
    open dataset file for appending in text mode ENCODING UTF-8.
     endif.
     if sy-subrc <> 0.
         rc = 2. exit.
     endif.
  endif.

  loop at datatab.
    clear: tablen, offset, output.
    do.
      assign component sy-index of
         structure datatab to <f>.
      if sy-subrc <> 0. exit. endif.
      if sy-index > 1.
         assign delimit(dlength) TO <delim1> CASTING TYPE C.
         delim2 = <delim1>.
         write delim2(dlength) to output+offset(dlength).
         add dlength to offset.
      endif.

      describe field <f> type type1.

      if type1 = 'I' or type1 = 'N'.
          type1 = 'P'.
      endif.

      case type1.
        when 'D'.
          if <f> = '00000000'.
             <f> = ' '.
          else.
             move <f> to time1.
             assign time1 to <f>.
          endif.
        when 'F'.
          if <f> = '0.0'.
            temp = '0.0'.
          else.
             write <f> to temp exponent 0.
          endif.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
        when 'P'.
          if <f> < 0.
             write '-' to output+offset(1).
             add 1 to offset.
             <f> = <f> * ( -1 ).
          endif.
          move <f> to temp.
          condense temp no-gaps.
          translate temp using ',.'.
          assign temp to <f>.
      endcase.

      sy-fdpos = strlen( <f> ).

      tablen = offset + sy-fdpos.
      if tablen > maxlen.
         rc = 3. exit.
      endif.
      write <f> to output+offset(sy-fdpos).
      add sy-fdpos to offset.
    enddo.

    if dwnload = 'Y'.
       clientab-output = output.
       append clientab.
       rcount = rcount + 1.
       if rcount >= 50.
          SY-BATCH = SPACE.
          CALL FUNCTION 'GUI_DOWNLOAD'
            EXPORTING
              FILENAME = l_filename
              FILETYPE = 'ASC'
              CODEPAGE = '4110'
              APPEND   = appd
              WRITE_FIELD_SEPARATOR = 'X'
*            IMPORTING
*              FILELENGTH =
            TABLES
              DATA_TAB = clientab
            EXCEPTIONS
              OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
          clear clientab. refresh clientab.
          rcount = 0. appd = 'A'.
       endif.
    else.
       transfer output to file.
    endif.
  endloop.

  if dwnload = 'Y'.
       SY-BATCH = SPACE.
       CALL FUNCTION 'GUI_DOWNLOAD'
         EXPORTING
           FILENAME = l_filename
           FILETYPE = 'ASC'
              CODEPAGE = '4110'
           APPEND   = appd
           WRITE_FIELD_SEPARATOR = 'X'
*         IMPORTING
*           FILELENGTH =
         TABLES
           DATA_TAB = clientab
         EXCEPTIONS
           OTHERS = 1.
          if sy-subrc <> 0.
             rc = 4.
          endif.
  else.
       close dataset file.
  endif.
endform.

FORM CONNECT_RFCDEST_TO_PROGID.
 INCLUDE rfctypes.

 DATA: len     type i,
       R3NAME(4),
       SYSTNR(2),
       uid     LIKE SYS_UID,
       options LIKE RFCOPT,
       isunicode  TYPE n.

 DATA: NTOTAL     LIKE GWY_STRUCT-NOREG,
       GWY_GWHOST LIKE GWY_STRUCT-GWHOST,
       GWY_GWSERV LIKE GWY_STRUCT-GWSERV,
       GWY_TPNAME LIKE GWY_SYSTEM-TPNAME.

 TABLES: RFCSI.

* Check program ID
 IF P_PROGID = SPACE.							
    RAISE INVALID_PROGRAM_ID.
 ENDIF.

* determine if the RFC destination authority
  CALL FUNCTION 'RFC_READ_TCPIP_DESTINATION'
       EXPORTING destination = P_DEST
                 authority_check = 'X'
  IMPORTING rfcunicode = isunicode.

* Use current gateway if no info exits
 IF P_GWHOST = SPACE OR P_GWSERV = SPACE.
  CALL FUNCTION 'RFC_SYSTEM_INFO'
      IMPORTING
          RFCSI_EXPORT = RFCSI.

  len = strlen( rfcsi-rfcdest ) - 2.
  systnr = rfcsi-rfcdest+len.
  len = len - 1 - 3.
  r3name = rfcsi-rfcdest+len(3).
  len = len - 1.
  options-rfcgwhost = rfcsi-rfcdest(len).
  CONCATENATE 'sapgw' SYSTNR INTO options-rfcgwserv.
 ELSE.
   options-rfcgwhost = P_GWHOST.
   options-rfcgwserv = P_GWSERV.
 ENDIF.

* Parameters for GWY function call
  GWY_GWHOST = OPTIONS-RFCGWHOST.
  GWY_GWSERV = OPTIONS-RFCGWSERV.
  GWY_TPNAME = P_PROGID.

* Check gateway and server program registered
  CALL FUNCTION 'GWY_GET_NO_REG_PROGRAMS'
     EXPORTING
        GWHOST      = GWY_GWHOST
        GWSERV      = GWY_GWSERV
        TPNAME      = GWY_TPNAME
     IMPORTING
        NOREG_TOTAL = NTOTAL
     EXCEPTIONS
        OTHERS      = 1.

  IF sy-subrc NE 0.
     raise CONNECT_TO_GATEWAY_FAILED.
  ENDIF.

  IF NTOTAL = 0.
     raise SERVER_NOT_REGISTERED.
  ENDIF.

  IF NTOTAL GT 1.
     raise DUPLICATE_REG_PROGRAMS.
  ENDIF.

* build new connection to a registered server
  options-rfcexec   = gwy_tpname.
  options-rfcgwhost = gwy_gwhost.
  options-rfcgwserv = gwy_gwserv.
  options-rfchost   = '%%RFCSERVER%%'.
  IF P_SNC_ON = 'X'.
    options-rfcsnc  = 'X'.
  ENDIF.

  CALL 'RFCControl' ID 'CODE' FIELD 'O'
                    ID 'DESTINATION' FIELD P_DEST
                    ID 'TYPE' FIELD rfctype_external_tcp
                    ID 'OPTIONS' FIELD options.

  IF sy-subrc NE 0.
     RAISE CONNECT_TO_REG_SERVER_FAILED.
   ENDIF.

* and set exclusive mode to keep server owned
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
      EXPORTING  destination = P_DEST
                 exclusiv    = 'Y'
      EXCEPTIONS connect_to_reg_server_failed = 1
                 exclusiv_not_supported       = 2.

  IF SY-SUBRC NE 0.
     CASE SY-SUBRC.
          WHEN 1.
              RAISE CONNECT_TO_REG_SERVER_FAILED.
          WHEN 2.
              RAISE EXCLUSIV_NOT_SUPPORTED.
     ENDCASE.
  ENDIF.

ENDFORM.

FORM DISCONNECT_RFCDEST_FROM_PROGID.
* set exclusive mode to E to end the session
  CALL FUNCTION 'SYSTEM_SET_REG_SERVER_PROPERTY'
     EXPORTING
         destination = P_DEST
         exclusiv    = 'E'
     EXCEPTIONS
         connect_to_reg_server_failed = 1				
         exclusiv_not_supported       = 2.
ENDFORM.
