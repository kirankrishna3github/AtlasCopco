*&---------------------------------------------------------------------*
*& Report  Z_MAINTAIN_SERVER_DRIVEN_090                                *
*&                                                                     *
*&---------------------------------------------------------------------*
*&                                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*

REPORT  z_maintain_server_driven_090                                .
*
* This report creates entries in MEMSD_DEP for
* Server-Driven SyncBOs. This report will be
* replaced by a MI program to maintain the values.
*
* Entries in the keytable MEMSD_DEPTYPE will also
* be created if neccessary
*
* Type
CONSTANTS lc_objtype     TYPE msdname     VALUE 'OBJTYPE'.
CONSTANTS lc_syncbo      TYPE msdname     VALUE 'SYNCBO'.
CONSTANTS lc_trigger     TYPE msdname     VALUE 'TRIGGER'.

* Dependency name
CONSTANTS lc_objsyncbo   TYPE msd_depname VALUE 'OBJSYNCBO'.
CONSTANTS lc_objvalue    TYPE msd_depname VALUE 'OBJVALUE'.
CONSTANTS lc_name        TYPE msd_depname VALUE 'NAME'.
CONSTANTS lc_value       TYPE msd_depname VALUE 'VALUE'.
CONSTANTS lc_interval    TYPE msd_depname VALUE 'INTERVAL'.
CONSTANTS lc_version     TYPE msd_depname VALUE 'VERSION'.
CONSTANTS lc_syncboversion(7) type c value '      1'.

PARAMETERS p_name    TYPE msdname        DEFAULT 'MAM'.
PARAMETERS p_versio  TYPE bwafvers.
PARAMETERS p_syncbo  TYPE merep_scenario DEFAULT 'MAM_090'.
PARAMETERS p_bvalue  TYPE msd_depname    DEFAULT 'USERCUST'.
PARAMETERS p_delay   TYPE i              DEFAULT 30.

PARAMETERS p_write   AS CHECKBOX.

DATA ls_memsd_dep     TYPE memsd_dep.
DATA ls_memsd_deptype TYPE memsd_deptype.

* Check if an entry in MEMSD_DEP exists
* A message is shown on the result screen
SELECT * FROM memsd_dep INTO ls_memsd_dep
  WHERE namespace        EQ space
  AND   name             EQ p_name
  AND   version          EQ p_versio
  AND   type             EQ lc_syncbo
  AND   dependency_name  EQ lc_name
  AND   dependency_value EQ p_syncbo.
* Exit at first entry found, TYPE_INDEX is not used
  EXIT.
ENDSELECT.
IF sy-subrc EQ 0.
  WRITE:/ 'Entry already exists and will be overwritten'.
ENDIF.

* Do the database update **********************************
IF p_write NE space.

* First create entries in the keytable MEMSD_DEPTYPE
  SELECT SINGLE * FROM memsd_deptype INTO ls_memsd_deptype
    WHERE type             EQ lc_trigger
    AND   dependency_name  EQ lc_syncbo.
  IF sy-subrc NE 0.
* Entries need to be created
    CLEAR ls_memsd_deptype.
    MOVE lc_objtype   TO ls_memsd_deptype-type.
    MOVE lc_objsyncbo TO ls_memsd_deptype-dependency_name.
    INSERT INTO memsd_deptype VALUES ls_memsd_deptype.
    MOVE lc_objvalue  TO ls_memsd_deptype-dependency_name.
    INSERT INTO memsd_deptype VALUES ls_memsd_deptype.
    CLEAR ls_memsd_deptype.
    MOVE lc_trigger   TO ls_memsd_deptype.
    MOVE lc_syncbo    TO ls_memsd_deptype-dependency_name.
    INSERT INTO memsd_deptype VALUES ls_memsd_deptype.
    MOVE lc_interval  TO ls_memsd_deptype-dependency_name.
    INSERT INTO memsd_deptype VALUES ls_memsd_deptype.
  ENDIF.

* Delete the entries in the database before adding new ****
  DELETE FROM memsd_dep
    WHERE namespace EQ space
    AND   name      EQ p_name
    AND   version   EQ p_versio
    AND (    type   EQ lc_objtype
          OR type   EQ lc_trigger
          OR type   EQ lc_syncbo ).

* Identical values for all entries
  MOVE space        TO ls_memsd_dep-namespace.
  MOVE p_name       TO ls_memsd_dep-name.
  MOVE p_versio     TO ls_memsd_dep-version.
  MOVE 1            TO ls_memsd_dep-type_index.

* Create Syncbo - Name entry
  MOVE lc_syncbo    TO ls_memsd_dep-type.
  MOVE lc_name      TO ls_memsd_dep-dependency_name.
  MOVE p_syncbo     TO ls_memsd_dep-dependency_value.
  INSERT INTO memsd_dep VALUES ls_memsd_dep.

* Create Syncbo - Version entry
  MOVE lc_version   TO ls_memsd_dep-dependency_name.
  MOVE lc_syncboversion TO ls_memsd_dep-dependency_value.
  INSERT INTO memsd_dep VALUES ls_memsd_dep.

* Create Objtype - Objsyncbo entry
  MOVE lc_objtype   TO ls_memsd_dep-type.
  MOVE lc_objsyncbo TO ls_memsd_dep-dependency_name.
  MOVE p_syncbo     TO ls_memsd_dep-dependency_value.
  INSERT INTO memsd_dep VALUES ls_memsd_dep.

* Create Objtype - Objvalue entry (usercust)
  MOVE lc_objvalue  TO ls_memsd_dep-dependency_name.
  MOVE p_bvalue     TO ls_memsd_dep-dependency_value.
  INSERT INTO memsd_dep VALUES ls_memsd_dep.

* Create Trigger - Syncbo entry
  MOVE lc_trigger   TO ls_memsd_dep-type.
  MOVE lc_syncbo    TO ls_memsd_dep-dependency_name.
  MOVE p_syncbo     TO ls_memsd_dep-dependency_value.
  INSERT INTO memsd_dep VALUES ls_memsd_dep.

* Create Trigger - Interval (time delay) entry
  MOVE lc_interval  TO ls_memsd_dep-dependency_name.
  WRITE p_delay     TO ls_memsd_dep-dependency_value LEFT-JUSTIFIED.
  INSERT INTO memsd_dep VALUES ls_memsd_dep.

* Finished
  WRITE:/ 'Entries written to database'.
  COMMIT WORK.

Else.
  WRITE:/ 'Simulation only, no data was written'.
ENDIF. "Write to database

