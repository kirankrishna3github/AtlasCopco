*----------------------------------------------------------------------*
***INCLUDE LMOF7F01 .
*----------------------------------------------------------------------*
* ABAK006180 note-328415 290800 entries of SCMA_CONT, SCMA_CONT_ELEMS
*                               not deleted with delete function

*&---------------------------------------------------------------------*
*&      Form  CREATE_SELECTION_TABLE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_TASKS  text
*      -->P_LT_WHERE  text
*----------------------------------------------------------------------*
FORM CREATE_SELECTION_TABLE TABLES LT_SEL STRUCTURE moni_if_selfields
                                   LT_WHERE.

data: lt_selfields like schedman_selfields occurs 0 with header line.

  loop at lt_sel.
     move-corresponding lt_sel to lt_selfields.
     append lt_selfields.
  endloop.

  CALL FUNCTION 'MONI_CREATE_SELECTION_TABLE'
       TABLES
            LT_SELFIELDS = lt_selfields
            LT_WHERE     = lt_where.


ENDFORM.                    " CREATE_SELECTION_TABLE

*&---------------------------------------------------------------------*
*&      Form  GET_ALL_ITEMS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_WHERE  text
*      -->P_LT_ITEMS  text
*----------------------------------------------------------------------*
FORM GET_ALL_ITEMS TABLES LT_WHERE
                          LT_SEL_TREED structure moni_if_selfields
                          LT_ITEMS STRUCTURE schedman_delete_wf.

data: lt_scmatree   like scmatree occurs 0 with header line.
data: lt_whered(72) type c                  occurs 0 with header line.
data: wa_scmatreed  like scmatreed.
constants: ld_field_profile(30) value 'PROFILE'.
constants: ld_field_node_id(30) value 'NODE_ID'.

  select * from scmatree into table lt_scmatree where (lt_where).
  check: sy-subrc = 0.

  loop at lt_scmatree.
     move-corresponding lt_scmatree to lt_items.
     read table lt_sel_treed with key fieldname = ld_field_profile.
     if sy-subrc = 0.
        lt_sel_treed-low       = lt_items-profile.
        clear lt_sel_treed-high.
        modify lt_sel_treed index sy-tabix.
     else.
        clear lt_sel_treed.
        lt_sel_treed-fieldname = ld_field_profile.
        lt_sel_treed-low       = lt_items-profile.
        append lt_sel_treed.
     endif.
     read table lt_sel_treed with key fieldname = ld_field_node_id.
     if sy-subrc = 0.
        lt_sel_treed-low       = lt_scmatree-node_id.
        clear lt_sel_treed-high.
        modify lt_sel_treed index sy-tabix.
     else.
        clear lt_sel_treed.
        lt_sel_treed-fieldname = ld_field_node_id.
        lt_sel_treed-low       = lt_scmatree-node_id.
        append lt_sel_treed.
     endif.
     perform create_selection_table tables lt_sel_treed
                                           lt_whered.
     select * from scmatreed into wa_scmatreed
                             where (lt_whered).
*                            where profile = lt_items-profile
*                              and node_id = lt_scmatree-node_id.
         move-corresponding wa_scmatreed to lt_items.
         append lt_items.
     endselect.
  endloop.

ENDFORM.                    " GET_ALL_ITEMS
*&---------------------------------------------------------------------*
*&      Form  DELETE_JOB
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_ITEMS  text
*----------------------------------------------------------------------*
FORM determine_JOB TABLES lt_smmain_part structure smmain
                   USING  LT_ITEMS       structure schedman_delete_Wf.

data: wa_smscmaid like smscmaid.
data: ld_Rc       like sy-subrc.

*..search for the sched_id to get the monitor id
   wa_smscmaid-schedulerid = lt_items-sched_id.
   CALL FUNCTION 'MONI_SELECT_SMSCMAID_BY_SCMA'
         IMPORTING
              LD_RC       = ld_rc
         CHANGING
              LS_SMSCMAID = wa_smscmaid.
   if ld_Rc = 0.
      select * from smmain into table lt_smmain_part
                           where id = wa_smscmaid-id.
*..longer coding for the same result
*          refresh lt_selfields.
*          lt_selfields-fieldname = 'ID'.
*          lt_selfields-low       = wa_smscmaid-id.
*          append lt_selfields.
*          refresh lt_where.
*          CALL FUNCTION 'MONI_CREATE_SELECTION_TABLE'
*               TABLES
*                    LT_SELFIELDS = lt_selfields
*                    LT_WHERE     = lt_where.
*          refresh: lt_smmain_part.
*          CALL FUNCTION 'MONI_SELECT_COMBINED'
*               TABLES
*                    LT_WHERE_SEL = lt_where
*                    lt_smmain    = lt_smmain_part.
   endif.


ENDFORM.                    " DELETE_JOB
*&---------------------------------------------------------------------*
*&      Form  DELETE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_SMMAIN_PART  text
*      -->P_I_TESTRUN  text
*----------------------------------------------------------------------*
FORM DELETE_MONITOR TABLES LT_SMMAIN_PART STRUCTURE smmain
                    USING  value(I_TESTRUN)
                           value(profile)
                           value(I_NO_MESSAGES).

data: ld_lines like sy-tabix.
data: result_list(1) type c.

  if i_no_messages is initial.
    result_list = 'X'.
  else.
    clear result_list.
  endif.

 describe table lt_smmain_part lines ld_lines.
 if ld_lines > 0.
    CALL FUNCTION 'KPEP_ARCHIVE_MONI_DATA'
       EXPORTING
            I_DELETE_ALL  = ' '
            i_profile     = profile
            I_TESTRUN     = i_testrun
            I_RESULT_LIST = result_list
       TABLES
            LT_SMMAIN     = lt_smmain_part.
 endif.

ENDFORM.                    " DELETE
*&---------------------------------------------------------------------*
*&      Form  DETERMINE_WORFLOW
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_SMMAIN_PART  text
*      -->P_LT_ITEMS  text
*----------------------------------------------------------------------*
FORM DETERMINE_WORFLOW TABLES LT_SMMAIN_PART STRUCTURE SMMAIN
                       USING  LT_ITEMS      structure schedman_delete_wf
                              p_no_messages type      char1.

data: lt_wf_out      like swd_api_lg         occurs 0 with header line.
data: lt_output_part like smoutput           occurs 0 with header line.
data: ld_wf2         like swwwihead-wi_id.
data: ld_tabix       like sy-tabix.

  if p_no_messages is initial.
    write: / sy-uline.
    write: / text-loe, lt_items-scma_sequence, lt_items-task_date,
                       lt_items-task_starttime.
    new-line.
    write at 1(20) sy-uline.
    new-line.
  endif.

  ld_wf2 = lt_items-wf_id.
*.Get structure of workflow definition
  call function 'SWD_PROFILE_API_FI_PROTOCOL'
       exporting
             in_wi_id = ld_wf2
       tables
             out_log  = lt_wf_out
       exceptions
             error    = 1
             others   = 2.
  if sy-subrc = 0.
**   WF protocol was found
*....Delete the lines not needed
     call function 'MONI_CHANGE_WF_FLOW'
        tables
             lt_output = lt_output_part
             lt_wf_out = lt_wf_out.
     describe table lt_output_part lines ld_tabix.
     if ld_tabix > 0.
*......Do the select in monitor table
        call function 'MONI_SELECT_MAIN_VIA_SCHEDULER'
           tables
                lt_output = lt_output_part
                lt_smmain = lt_smmain_part.
     endif.
  else.
**   WF protocol was not found - work items already deleted or archived
     perform get_smmain_for_wf tables lt_smmain_part
                               using  ld_wf2.
  endif.

  if p_no_messages is initial.
    write: / text-loa.
    new-line.
    write at 1(20) sy-uline.
    new-line.
  endif.

ENDFORM.                    " DETERMINE_WORFLOW
*&---------------------------------------------------------------------*
*&      Form  DELETE_WORKFLOWITEM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_ITEMS  text
*----------------------------------------------------------------------*
FORM DELETE_WORKFLOWITEM USING LT_ITEMS structure schedman_delete_Wf
                               value(I_TESTRUN).

data: ld_wf_id     like SWD_PRAPI-WI_ID.

*..At last delete the workflow item
   ld_wf_id = lt_items-wf_id.
   if i_testrun <> true.
      CALL FUNCTION 'SWD_PROFILE_API_FI_DELETE'
        EXPORTING
             IN_WI_ID = ld_wf_id
        EXCEPTIONS
             ERROR          = 1
             OTHERS         = 2
             .
     IF SY-SUBRC <> 0.
*     MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
     ENDIF.
   endif.

ENDFORM.                    " DELETE_WORKFLOWITEM
*&---------------------------------------------------------------------*
*&      Form  DELETE_SCHEDULER_ENTRY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_ITEMS  text
*----------------------------------------------------------------------*
FORM DELETE_SCHEDULER_ENTRY USING LT_ITEMS structure schedman_delete_Wf
                                  value(i_testrun)
                                  p_no_commit.              "note635291


   if i_testrun <> true.
      delete from scmatreed where sched_id = lt_items-sched_id.
      if p_no_commit is initial.                            "note635291
        commit work.
      endif.                                                "note635291
   endif.

ENDFORM.                    " DELETE_SCHEDULER_ENTRY
*&---------------------------------------------------------"ABAK006180)
*&      Form  delete_tvarv_container                                 ")
*&-------------------------------------------------------------------")
*       text                                                         ")
*--------------------------------------------------------------------")
*      -->P_LD_WF_ID  text                                           ")
*      -->P_LD_TESTRUN  text                                         ")
*--------------------------------------------------------------------")
*FORM delete_tvarv_container USING ld_wf_id like SWD_PRAPI-WI_ID     ")
**                                 LT_ITEMS structure schedman_delete")
*                                  value(I_TESTRUN).                 ")
*                                                                    ")
**data: ld_wf_id         like SWD_PRAPI-WI_ID.                       ")
*data: lt_scma_cont      like scma_cont       occurs 0 with header li")
*                                                                    ")
*data: lt_scma_cont_elems like scma_cont_elems occurs 0 with header l")
*                                                                    ")
*                                                                    ")
**..Delete the tables that contain the data of the TVARV-Variables   ")
**  ld_wf_id = lt_items-wf_id.                                       ")
*   if i_testrun <> true.                                            ")
*      select * from scma_cont into table lt_scma_cont               ")
*                       where wfd_id  = ld_wf_id                     ")
*                         and runtime <> '0'.                        ")
*      if sy-subrc = 0.                                              ")
*         delete scma_cont from table lt_scma_cont.                  ")
*         select * from scma_cont_elems into table lt_scma_cont_elems")
*                for all entries in lt_scma_cont                     ")
*                    where cont_guid = lt_scma_cont-cont_guid.       ")
*         if sy-subrc = 0.                                           ")
*            delete scma_cont_elems from table lt_scma_cont_elems.   ")
*         endif.                                                     ")
*     endif.                                                         ")
*   endif.                                                           ")
                                                                     ")
*&-------------------------------------------------------------------")
*&      Form  delete_tvarv_container                                 ")
*&-------------------------------------------------------------------")
*       delete guid tables with schedman variables                   ")
*--------------------------------------------------------------------")
*      -->lt_sel_treed  time interval for deletion                   ")
*      -->lt_sequences  workflows to delete                          ")
*      -->I_TESTRUN     deletion or simulation                       ")
*--------------------------------------------------------------------")
* change history:                                                    ")
* S9CK001152 note-328415 290800 entries of SCMA_CONT, SCMA_CONT_ELEMS")
*                               not deleted with delete function     ")
FORM delete_tvarv_container                                          ")
            tables lt_sel_treed structure MONI_IF_SELFIELDS          ")
                   lt_sequences  structure scmasequences             ")
                   using  value(I_TESTRUN)                           ")
                          p_no_messages type char1.
                                                                     ")
data: ld_dbcnt_cont       like sy-dbcnt.                             ")
data: ld_dbcnt_cont_elems like sy-dbcnt.                             ")
data: lt_scma_cont       like scma_cont    occurs 0 with header line.")
data: lt_scma_cont_elems like scma_cont_elems occurs 0               ")
                                              with header line.      ")
data: lt_scmasequences   like scmasequences   occurs 0               ")
                                              with header line.      ")
data: lt_timestamp_low   like scma_cont_elems-timestamp.             ")
data: lt_timestamp_high  like scma_cont_elems-timestamp.             ")
data: lt_uzeit           like sy-uzeit.                              ")
                                                                     ")
*..Delete the tables that contain the data of the TVARV-Variables    ")
                                                                     ")
  sort lt_sequences by sequence.                                     ")
  delete adjacent duplicates from lt_sequences comparing sequence.   ")
                                                                     ")
  clear: ld_dbcnt_cont, ld_dbcnt_cont_elems.                         ")
* get all workflow id's                                              ")
                                                                     ")
  refresh: lt_scmasequences.                                         ")
  select * from scmasequences into table lt_scmasequences            ")
     for all entries in lt_sequences                                 ")
     where sequence = lt_sequences-sequence.                         ")
                                                                     ")
  loop at lt_scmasequences.                                          ")
*    get time interval                                               ")
     read table lt_sel_treed with key fieldname = 'TASK_DATE'.       ")
     lt_uzeit = '000000'.                                            ")
     convert date lt_sel_treed-low                                   ")
             time lt_uzeit                                           ")
             into time stamp lt_timestamp_low                        ")
             time zone sy-zonlo.                                     ")
     lt_uzeit = '235959'.                                            ")
     convert date lt_sel_treed-high                                  ")
             time lt_uzeit                                           ")
             into time stamp lt_timestamp_high                       ")
             time zone sy-zonlo.                                     ")
                                                                     ")
*   get header guids for sets of schedman variables                  ")
    refresh: lt_scma_cont.                                           ")
    select * from scma_cont into table lt_scma_cont  "#EC CI_SGLSELECT
                            where wfd_id  = lt_scmasequences-wfid    ")
                              and runtime <> '0'.                    ")
    if sy-subrc = 0.                                                 ")
*     get guids for sets of schedman variables                       ")
      refresh lt_scma_cont_elems.                                    ")
      select * from scma_cont_elems into table lt_scma_cont_elems "#EC CI_SGLSELECT
               for all entries in lt_scma_cont                       ")
                   where cont_guid = lt_scma_cont-cont_guid          ")
                     and timestamp between lt_timestamp_low          ")
                                       and lt_timestamp_high.        ")
      if sy-subrc = 0.                                               ")
*       delete guids                                                 ")
        loop at lt_scma_cont_elems.                                  ")
          delete from scma_cont                                      ")
                 where cont_guid = lt_scma_cont_elems-cont_guid.     ")
          add sy-dbcnt to ld_dbcnt_cont.                             ")
        endloop.                                                     ")
        delete scma_cont_elems from table lt_scma_cont_elems.        ")
        add sy-dbcnt to ld_dbcnt_cont_elems.                         ")
      endif.                                                         ")
    endif.                                                           ")
  endloop.                                                           ")
                                                                     ")
* print results                                                      ")
  if p_no_messages is initial.
    if ld_dbcnt_cont ne 0.                                           ")
      write: / text-del, ld_dbcnt_cont, text-ta0, text-taf.          ")
    endif.                                                           ")
                                                                     ")
    if ld_dbcnt_cont_elems ne 0.                                     ")
      write: / text-del, ld_dbcnt_cont_elems, text-ta0, text-tag.    ")
    endif.                                                 "ABAK006180)
  endif.

ENDFORM.                    " delete_tvarv_container
*&---------------------------------------------------------------------
*&      Form  testrun
*&---------------------------------------------------------------------
*       print message: test/productive run
*----------------------------------------------------------------------
*      -->I_TESTRUN  deletion or simulation
*----------------------------------------------------------------------

FORM testrun USING    I_TESTRUN
                      p_no_messages
                      p_no_commit.

  if i_testrun <> true.
*   deletion
  if p_no_messages is initial.
      new-line.
      write: at 1(51) sy-uline.
      new-line.
      write: at 1 sy-vline.
      write: at 2 text-rer color col_negative.
      write: at 51 sy-vline.
      new-line.
      write: at 1(51) sy-uline.
      new-line.
    endif.
    if p_no_commit is initial.
      commit work.
    endif.
  else.
*   simulation
    if p_no_messages is initial.
      new-line.
      write: at 1(51) sy-uline.
      new-line.
      write: at 1 sy-vline.
      write: at 2 text-ter color col_positive.
      write: at 51 sy-vline.
      new-line.
      write: at 1(51) sy-uline.
      new-line.
    endif.
    if p_no_commit is initial.
      rollback work.
    endif.
  endif.

ENDFORM.                    " testrun
*&---------------------------------------------------------------------*
*&      Form  delete_smrta
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_ITEMS_PROFILE  text
*      -->P_LT_ITEMS_NODE_ID  text
*----------------------------------------------------------------------*
FORM delete_smrta  USING value(PROFILE)
                         value(NODE_ID)
                         value(i_testrun).

  if i_testrun <> true.
     delete from smrta where profile = profile
                         and node_id = node_id.
  endif.

ENDFORM.                    " delete_smrta
