*&---------------------------------------------------------------------*
*& Report  ZTESTLM2                                                    *
*&                                                                     *
*&---------------------------------------------------------------------*
*&                                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*

REPORT  ZTESTLM6.

data: gv_char(1) type c,
      gv_off(2)     type n,
      d_stprs2(15)  type c,
      lv_stprs(15)  type c,
      lv_stprs_p    type stprs,
      lv_check,
      gv_len(2)       type n.

data: g_marg%(5) type p decimals 2,
      gv_answer  type c.

DATA: BEGIN OF T OCCURS 200,
        TEXT1(60),TEXT2(12),
      END OF T.

constants: c_blank type matnr value space.

data: lt_tline like popuptext occurs 0 with header line,
      g_plifz type plifz,
      sxml type string.

data: begin of lt_iqq occurs 0.
        include structure yam_iqq.
data: end of lt_iqq.

*parameter: d_stprs(15) type c.
*parameters: p_pr_eq type prctr,
*            p_pr_sp type prctr,
*            p_vkorg type vkorg.
parameters: p_file type RLGRAP-FILENAME.

field-symbols: <plifz>.

start-of-selection.
*--------------------------------
*assign p_aplfz to <plifz>.
*move <plifz> to g_plifz.
*write: g_plifz.

*move d_stprs to d_stprs2.
*replace ',' in d_stprs2 with '.'.
*move d_stprs2 to lv_stprs_p.
*write lv_stprs_p to lv_stprs.
*write lv_stprs.

*.... Check how many positions of profitcenter has to be checked
*  select single ZNUMPOSCHK into lv_check
*       from YSE_VKORG_CHECK
*       where vkorg = p_vkorg.
*
*  if sy-subrc = 0.
*    gv_len = 6.
*    gv_len = gv_len + lv_check.
*    write: / p_pr_sp, p_pr_eq.
*    if p_pr_sp(gv_len) ne p_pr_eq(gv_len).
*      write: / 'Mismatch in profitcenters'.
*    endif.
*
*  endif.

*call transformation id source XML sxml
*             result lt_iqq = lt_iqq.

  CALL FUNCTION 'WS_FILENAME_GET'
   EXPORTING
*    DEF_FILENAME           = '*'
     DEF_PATH               = 'C:\'
*    MASK                   = ',*.*,*.csv.'
     MASK                   = ',*,*.txt.'
*    MODE                   = 'O'
*    TITLE                  = ' '
   IMPORTING
     FILENAME               = p_file
*    RC                     =
   EXCEPTIONS
     INV_WINSYS             = 1
     NO_BATCH               = 2
     SELECTION_CANCEL       = 3
     SELECTION_ERROR        = 4
     OTHERS                 = 5.

*  IF SY-SUBRC <> 0.
*    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*             WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.

CALL FUNCTION 'TEXT_CONVERT_XML_TO_SAP'
  EXPORTING
*   I_FIELD_SEPERATOR          = ';'
*   I_LINE_HEADER              =
*   I_TAB_RAW_DATA             =
    I_FILENAME                 = p_file
*   I_TOTALSIZE                =
  TABLES
    I_TAB_CONVERTED_DATA       = lt_iqq
* EXCEPTIONS
*   CONVERSION_FAILED          = 1
*   OTHERS                     = 2
          .
IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.
