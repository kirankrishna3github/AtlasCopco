*&---------------------------------------------------------------------*
*&  Include           YSE_REN_DEL_DATE_CONS_F01                        *
*&---------------------------------------------------------------------*

***********************************************************************
* FORM: INIT_PARAMS                                                   *
***********************************************************************
* For most of the selection options the user's preset values are read *
* and inserted on the selection screen.                               *
***********************************************************************
FORM init_params.

  IF so_auart[] IS INITIAL.
    so_auart-sign = 'I'.
    so_auart-option = 'EQ'.
    so_auart-low = 'ZQP'.
    APPEND so_auart.
    so_auart-low = 'ZQP2'.
    APPEND so_auart.
    so_auart-low = 'ZRIB'.
    APPEND so_auart.
  ENDIF.

  IF so_pstyv[] IS INITIAL.
    so_pstyv-sign = 'I'.
    so_pstyv-option = 'EQ'.
    so_pstyv-low = 'ZMVN'.
    APPEND so_pstyv.
    so_pstyv-low = 'ZNOD'.
    APPEND so_pstyv.
    so_pstyv-low = 'ZMIL'.
    APPEND so_pstyv.
    so_pstyv-low = 'ZMWD'.
    APPEND so_pstyv.
* begin of insert MOD-004
    so_pstyv-low = 'ZRNS'.
    APPEND so_pstyv.
    so_pstyv-low = 'ZMNS'.
    APPEND so_pstyv.
* end of insert MOD-004
  ENDIF.

ENDFORM.  " init_params


***********************************************************************
* FORM: LOAD_DATA                                                     *
***********************************************************************
* First select all contracts based on selection parameters. Contracts *
* that fall at least partially within selection dates are selected.   *
* Next eliminate all entries that don't correspond to the selected    *
* deliveries. If no deliveries given, keep all contracts.             *
***********************************************************************
FORM load_data.

  CLEAR it_result.
  CLEAR it_result[].
  CLEAR it_cont.
  CLEAR it_cont[].
  CLEAR it_vbfa.
  CLEAR it_vbfa[].
  CLEAR it_vbak.
  CLEAR it_vbak[].
  CLEAR it_vbap.
  CLEAR it_vbap[].
  CLEAR it_vbep.
  CLEAR it_vbep[].
  CLEAR it_likp.
  CLEAR it_likp[].

* Get all contracts in yse_rent_sme based on selection option
  SELECT yse_rent_sme~vkorg
         yse_rent_sme~vtweg
         yse_rent_sme~auart
         yse_rent_sme~vbeln AS sadoc
         yse_rent_sme~posnr
         yse_rent_sme~angdt
         yse_rent_sme~bnddt
         vbak~spart
         vbap~pstyv
         vbak~vkbur
      FROM yse_rent_sme
      JOIN vbak
        ON yse_rent_sme~vbeln EQ vbak~vbeln
      JOIN vbap
        ON yse_rent_sme~vbeln EQ vbap~vbeln
       AND yse_rent_sme~posnr EQ vbap~posnr
      INTO CORRESPONDING FIELDS OF TABLE it_cont
     WHERE   yse_rent_sme~vkorg   EQ p_vkorg       " Sales org
       AND   yse_rent_sme~vtweg   EQ p_vtweg       " Distr chan
       AND   yse_rent_sme~auart   IN so_auart      " Document type
       AND   yse_rent_sme~vbeln   IN so_sadoc      " Document nr
       AND   yse_rent_sme~angdt   IN so_angdt      " Start date
       AND   yse_rent_sme~bnddt   IN so_bnddt      " End date
       AND   vbak~spart           EQ p_spart       " Division
       AND   vbap~pstyv           IN so_pstyv      " Item category
       AND   vbak~vkbur           IN so_vkbur.     " Division

* If no deliveries are selected in the selection option
  IF so_dedoc IS INITIAL.
*   Get all deliveries corresponding to the selected contracts
    IF p_lfart IS INITIAL.
*     Read deliveries without precising delivery type or doc nrs
      SELECT vbelv AS sadoc
             posnv
             vbeln AS dedoc
          FROM vbfa
          INTO TABLE it_vbfa
           FOR ALL ENTRIES IN it_cont
         WHERE vbelv EQ it_cont-sadoc
           AND vbtyp_n EQ 'J'
           AND stufe   EQ '00'.
    ELSE.
*     Read deliveries by precising only delivery type
      SELECT vbfa~vbelv AS sadoc
             vbfa~posnv
             vbfa~vbeln AS dedoc
          FROM vbfa
          JOIN likp
            ON vbfa~vbeln EQ likp~vbeln
          INTO TABLE it_vbfa
           FOR ALL ENTRIES IN it_cont
         WHERE vbfa~vbelv   EQ it_cont-sadoc
           AND vbfa~vbtyp_n EQ 'J'
           AND vbfa~stufe   EQ '00'
           AND likp~lfart   EQ p_lfart.
    ENDIF.
  ELSE.
    IF p_lfart IS INITIAL.
*     Read deliveries by precising document numbers
      SELECT vbelv AS sadoc
             posnv
             vbeln AS dedoc
          FROM vbfa
          INTO TABLE it_vbfa
         WHERE vbeln   IN so_dedoc
           AND vbtyp_n EQ 'J'
           AND stufe   EQ '00'.            "#EC CI_NOFIRST
    ELSE.
*     Read deliveries by precising delivery type and doc nrs
      SELECT vbfa~vbelv AS sadoc
             vbfa~posnv
             vbfa~vbeln AS dedoc
          FROM vbfa
          JOIN likp
            ON vbfa~vbeln EQ likp~vbeln
          INTO TABLE it_vbfa
         WHERE vbfa~vbeln   IN so_dedoc
           AND vbfa~vbtyp_n EQ 'J'
           AND vbfa~stufe   EQ '00'
           AND likp~lfart   EQ p_lfart.
    ENDIF.
  ENDIF.

  LOOP AT it_cont.
    READ TABLE it_vbfa WITH KEY sadoc = it_cont-sadoc
                                posnv = it_cont-posnr.
    IF sy-subrc <> 0.
      IF NOT so_dedoc IS INITIAL OR
         NOT p_lfart IS INITIAL.
*       Don't copy the contract.
      ELSE.
*       Copy the contract data without delivery data
        it_result-angdt = it_cont-angdt.
        it_result-bnddt = it_cont-bnddt.
        it_result-auart = it_cont-auart.
        it_result-vkorg = it_cont-vkorg.
        it_result-vtweg = it_cont-vtweg.
        it_result-spart = it_cont-spart.
        it_result-pstyv = it_cont-pstyv.
        it_result-sadoc = it_cont-sadoc.
        it_result-posnr = it_cont-posnr.
        it_result-vkbur = it_cont-vkbur.
* MOD01 SDE start
        clear it_result-dedoc.
* MOD01 SDE end
        APPEND it_result.
      ENDIF.
    ELSE.
*     Copy the contract and the delivery
      it_result-angdt = it_cont-angdt.
      it_result-bnddt = it_cont-bnddt.
      it_result-auart = it_cont-auart.
      it_result-vkorg = it_cont-vkorg.
      it_result-vtweg = it_cont-vtweg.
      it_result-spart = it_cont-spart.
      it_result-pstyv = it_cont-pstyv.
      it_result-sadoc = it_cont-sadoc.
      it_result-posnr = it_cont-posnr.
      it_result-vkbur = it_cont-vkbur.
      it_result-dedoc = it_vbfa-dedoc.
      APPEND it_result.
    ENDIF.
  ENDLOOP.    " it_cont

  IF NOT it_result[] IS INITIAL.
*   Load schedule line data
    SELECT vbeln posnr edatu
        INTO TABLE it_vbep
        FROM vbep
         FOR ALL ENTRIES IN it_result
       WHERE vbeln EQ it_result-sadoc
         AND posnr EQ it_result-posnr.

*   Load delivery data
    SELECT vbeln lfart wadat wadat_ist erdat
        INTO TABLE it_likp
        FROM likp
         FOR ALL ENTRIES IN it_result
       WHERE vbeln EQ it_result-dedoc.
  ENDIF.    " it_result[] not empty

* Scan through input data
  LOOP AT it_result.

*   Process data
    PERFORM process_data.

*   Update record to result table and clean up.
    MODIFY it_result.

  ENDLOOP.  " it_result - output loop

ENDFORM.  " load_data


***********************************************************************
* FORM: PROCESS_DATA                                                  *
***********************************************************************
* Copy all fields to the output table to be displayed.                *
***********************************************************************
FORM process_data.

  READ TABLE it_vbep WITH KEY vbeln = it_result-sadoc
                              posnr = it_result-posnr.
  IF sy-subrc EQ 0.
    it_result-reqdat = it_vbep-edatu.
  ENDIF.    " record in it_vbep

  READ TABLE it_likp WITH KEY vbeln = it_result-dedoc.
  IF sy-subrc EQ 0.
    it_result-lfart   = it_likp-lfart.
    it_result-plgidat = it_likp-wadat.
    it_result-acgidat = it_likp-wadat_ist.
    it_result-erdat   = it_likp-erdat.
  ENDIF.    " record in it_likp

* Set trafic light color
  IF it_result-acgidat IS INITIAL.
    it_result-status = gc_yellow.
  ELSE.
    IF it_result-acgidat > it_result-angdt.    "Actual Goods Issue > Contract Start Date
      it_result-status = gc_red.
    ELSE.
      it_result-status = gc_green.
    ENDIF.
  ENDIF.

ENDFORM.    " process_data


************************************************************************
* Form BUILD_ALV                                                       *
************************************************************************
* No arguments                                                         *
************************************************************************
* Builds the field catalog, sets display parameters and calls the      *
* method to display the results on screen.                             *
************************************************************************
FORM build_alv.

  PERFORM build_field_catalog.

* Build layout, including default variant with subtotals
  gs_variant-report = sy-repid.
  gs_layout-sel_mode   = 'B'.        " single row selectable
  gs_layout-excp_fname = 'STATUS'.

  CALL METHOD obj_alv->set_table_for_first_display
    EXPORTING
      i_save          = 'A'
      is_variant      = gs_variant
      is_layout       = gs_layout
    CHANGING
      it_outtab       = it_result[]
      it_fieldcatalog = it_fieldcat[].

ENDFORM.                    "build_alv


************************************************************************
* Form BUILD_FIELD_CATALOG                                             *
************************************************************************
* Builds the field catalog for each field in it_result.                *
************************************************************************
FORM build_field_catalog.

  CLEAR it_fieldcat.

* Field: Required Delivery Date
  it_fieldcat-fieldname = 'REQDAT'.
  it_fieldcat-coltext   = 'Req Del Date'(001).
  it_fieldcat-tooltip   = 'Required Delivery Date'(002).
  APPEND it_fieldcat.

* Field: Planned GI date
  it_fieldcat-fieldname = 'PLGIDAT'.
  it_fieldcat-coltext   = 'Planned GI'(003).
  it_fieldcat-tooltip   = 'Planned Goods Issue Date'(004).
  APPEND it_fieldcat.

* Field: Actual GI date
  it_fieldcat-fieldname = 'ACGIDAT'.
  it_fieldcat-coltext   = 'Actual GI'(005).
  it_fieldcat-tooltip   = 'Actual Goods Issue Date'(006).
  APPEND it_fieldcat.

* Field: Contract start date
  it_fieldcat-fieldname = 'ANGDT'.
  it_fieldcat-coltext   = 'Start'(007).
  it_fieldcat-tooltip   = 'Contract start date'(008).
  APPEND it_fieldcat.

* Field: Contract start date
  it_fieldcat-fieldname = 'BNDDT'.
  it_fieldcat-coltext   = 'End'(009).
  it_fieldcat-tooltip   = 'Contract end date'(010).
  APPEND it_fieldcat.

* Field: Contract type
  it_fieldcat-fieldname = 'AUART'.
  it_fieldcat-coltext   = 'Type'(011).
  it_fieldcat-tooltip   = 'Contract type'(012).
  APPEND it_fieldcat.

* Field: Sales document
  it_fieldcat-hotspot   = gc_true.
  it_fieldcat-fieldname = 'SADOC'.
  it_fieldcat-coltext   = 'Sales doc'(013).
  it_fieldcat-tooltip   = 'Sales document nr'(014).
  APPEND it_fieldcat.
  CLEAR it_fieldcat-hotspot.

* Field: Item in document
  it_fieldcat-fieldname = 'POSNR'.
  it_fieldcat-coltext   = 'Item'(015).
  it_fieldcat-tooltip   = 'Item in document'(016).
  APPEND it_fieldcat.

* Field: Item category
  it_fieldcat-fieldname = 'PSTYV'.
  it_fieldcat-coltext   = 'Item cat'(017).
  it_fieldcat-tooltip   = 'Item category'(018).
  APPEND it_fieldcat.

* Field: Delivery type
  it_fieldcat-fieldname = 'LFART'.
  it_fieldcat-coltext   = 'Del type'(019).
  it_fieldcat-tooltip   = 'Delivery type'(020).
  APPEND it_fieldcat.

* Field: Delivery document
  it_fieldcat-hotspot   = gc_true.
  it_fieldcat-fieldname = 'DEDOC'.
  it_fieldcat-coltext   = 'Deliv doc'(021).
  it_fieldcat-tooltip   = 'Delivery document nr'(022).
  APPEND it_fieldcat.
  CLEAR it_fieldcat-hotspot.

* Field: Sales organization
  it_fieldcat-fieldname = 'VKORG'.
  it_fieldcat-coltext   = 'Sales org'(023).
  it_fieldcat-tooltip   = 'Sales organization'(024).
  APPEND it_fieldcat.

* Field: Distribution channel
  it_fieldcat-fieldname = 'VTWEG'.
  it_fieldcat-coltext   = 'Dist Ch.'(025).
  it_fieldcat-tooltip   = 'Distribution channel'(026).
  APPEND it_fieldcat.

* Field: Division
  it_fieldcat-fieldname = 'SPART'.
  it_fieldcat-coltext   = 'Division'(027).
  it_fieldcat-tooltip   = 'Division'(028).
  APPEND it_fieldcat.

* Field: Sales Office
  it_fieldcat-fieldname = 'VKBUR'.
  it_fieldcat-coltext   = 'Sales Office'(033).
  it_fieldcat-tooltip   = 'Sales Office'(033).
  APPEND it_fieldcat.

* Field: Creation Date Delivery Document
  it_fieldcat-fieldname = 'ERDAT'.
  it_fieldcat-coltext   = 'Del. Cr.'(031).
  it_fieldcat-tooltip   = 'Delivery Document Creation Date'(032).
  APPEND it_fieldcat.



ENDFORM.    " build_field_catalog


************************************************************************
* Form HANDLE_HOTSPOT_CLICK                                            *
************************************************************************
*      -->P_E_ROW_ID     text                                          *
*      -->P_E_COLUMN_ID  text                                          *
*      -->P_ES_ROW_NO    text                                          *
************************************************************************
FORM handle_hotspot_click  USING    p_e_row_id
                                    p_e_column_id
                                    p_es_row_no STRUCTURE lvc_s_roid.

* Get current alv cursor and scroll settings
  CALL METHOD obj_alv->get_selected_cells
    IMPORTING
      et_cell = it_cells.

  CALL METHOD obj_alv->get_scroll_info_via_id
    IMPORTING
      es_col_info = it_scol
      es_row_no   = it_srow.

* Obtain cell index for transaction
  CALL METHOD obj_alv->get_selected_rows
    IMPORTING
      et_index_rows = it_rows.
  READ TABLE it_rows INDEX 1 INTO lv_index.
  IF NOT sy-subrc = 0.
    READ TABLE it_cells INDEX 1 INTO wa_cells.
    IF sy-subrc = 0.
      lv_index = wa_cells-row_id-index.
    ENDIF.
  ENDIF.

  CLEAR it_result.
  READ TABLE it_result INDEX p_e_row_id.

* If Contract Number clicked
  IF p_e_column_id EQ 'SADOC'.
*    PERFORM edit_contract USING it_result-sadoc.
    IF NOT it_result-sadoc IS INITIAL.
*     Edit the contract
      SET PARAMETER ID 'AUN' FIELD it_result-sadoc.
      CALL TRANSACTION 'VA02' AND SKIP FIRST SCREEN.
    ENDIF.    " contract exists
  ENDIF.

* If Delivery Number clicked
  IF p_e_column_id EQ 'DEDOC'.
*    PERFORM edit_delivery USING it_result-dedoc.
    IF NOT it_result-dedoc IS INITIAL.
*     Edit the delivery
      SET PARAMETER ID 'VL' FIELD it_result-dedoc.
      CALL TRANSACTION 'VL02N' AND SKIP FIRST SCREEN.
    ENDIF.    " delivery exists
  ENDIF.    " field delivery selected

* Reload data (could have been changed)
  PERFORM load_data.

* Refresh display
  CALL METHOD obj_alv->refresh_table_display.

* Restore scroll position
  CALL METHOD obj_alv->set_scroll_info_via_id
    EXPORTING
      is_col_info = it_scol
      is_row_no   = it_srow.

* Restore curson position
  READ TABLE it_cells INDEX 1 INTO wa_cells.
  IF sy-subrc = 0.
    it_frow-index = wa_cells-row_id-index.
    it_fcol-fieldname = wa_cells-col_id-fieldname.

    CALL METHOD obj_alv->set_current_cell_via_id
      EXPORTING
        is_row_id    = it_frow
        is_column_id = it_fcol.
  ELSE.

    CALL METHOD obj_alv->set_selected_rows
      EXPORTING
        it_index_rows = it_rows.

  ENDIF.


ENDFORM.                    "handle_hotspot_click


***********************************************************************
*  FORM  REFRESH                                                      *
***********************************************************************
* Description: Reloads and refreshes the screen with unchanged        *
*              selection options.                                     *
***********************************************************************
FORM refresh.
* Get current alv cursor and scroll settings
  CALL METHOD obj_alv->get_selected_cells
    IMPORTING
      et_cell = it_cells.

  CALL METHOD obj_alv->get_scroll_info_via_id
    IMPORTING
      es_col_info = it_scol
      es_row_no   = it_srow.

* Obtain cell index for transaction
  CALL METHOD obj_alv->get_selected_rows
    IMPORTING
      et_index_rows = it_rows.
  READ TABLE it_rows INDEX 1 INTO lv_index.
  IF NOT sy-subrc = 0.
    READ TABLE it_cells INDEX 1 INTO wa_cells.
    IF sy-subrc = 0.
      lv_index = wa_cells-row_id-index.
    ENDIF.
  ENDIF.

* Reload data (could have been changed)
  PERFORM load_data.

* Refresh display
  CALL METHOD obj_alv->refresh_table_display.

* Restore scroll position
  CALL METHOD obj_alv->set_scroll_info_via_id
    EXPORTING
      is_col_info = it_scol
      is_row_no   = it_srow.

* Restore curson position
  READ TABLE it_cells INDEX 1 INTO wa_cells.
  IF sy-subrc = 0.
    it_frow-index = wa_cells-row_id-index.
    it_fcol-fieldname = wa_cells-col_id-fieldname.

    CALL METHOD obj_alv->set_current_cell_via_id
      EXPORTING
        is_row_id    = it_frow
        is_column_id = it_fcol.
  ELSE.

    CALL METHOD obj_alv->set_selected_rows
      EXPORTING
        it_index_rows = it_rows.

  ENDIF.

ENDFORM.    " Resfresh


*&---------------------------------------------------------------------*
*&      Form  check_authorisation
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_authorisation .
  AUTHORITY-CHECK OBJECT 'V_VBAK_VKO'
                      ID 'VKORG' FIELD p_vkorg
                      ID 'VTWEG' FIELD p_vtweg
                      ID 'SPART' FIELD p_spart
                      ID 'ACTVT' DUMMY.

  IF sy-subrc = 4.
*   No authorisation to display data from Sales Organisation p_vkorg
    MESSAGE ID 'YSE_RENTAL' TYPE 'E' NUMBER '041' WITH p_vkorg p_vtweg.
  ELSEIF sy-subrc <> 0.
*   Error checking authorization.
    MESSAGE ID 'YSE_RENTAL' TYPE 'E' NUMBER '046'.
  ENDIF.
ENDFORM.                    " check_authorisation
