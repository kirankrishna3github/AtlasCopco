*&---------------------------------------------------------------------*
*&  Include           YSE_SD_DTC_AUTOMATION_03B_EV                     *
*&---------------------------------------------------------------------*

START-OF-SELECTION.

DATA:
  LV_CONDITION TYPE STRING.
* Build condition dynamically (depending on chosen option on selection screen)
  CONCATENATE    'vbap~vstel in so_vstel'
             'and vbak~auart in so_auart'
        INTO LV_CONDITION SEPARATED BY SPACE.
* If user chose "Customer Delivery Date"
  IF P_CDD NE SPACE.
    CONCATENATE     LV_CONDITION
               'and vbep~edatu <= p_due'
          INTO LV_CONDITION SEPARATED BY SPACE.
* If user chose "Material Availability Date"
  ELSEIF P_MAD NE SPACE.
    CONCATENATE     LV_CONDITION
               'and vbep~MBDAT <= p_due'
          INTO LV_CONDITION SEPARATED BY SPACE.
  ENDIF.
* Finish the where condition
  CONCATENATE      LV_CONDITION
              'and vbak~vbeln in so_vbeln'
              'and vbak~vkorg in so_vkorg'
               'and vbep~BMENG > 0'
              'and vbup~lfsta <> ''C'''
         INTO LV_CONDITION SEPARATED BY SPACE.

* Select the documents from database
  SELECT   VBAK~VBELN
           VBUP~LFSTA
           VBEP~POSNR VBEP~EDATU
           VBAP~WERKS VBAP~MATNR VBAP~VSTEL   VBAP~ZZ_ASO_RSNUM VBAP~ZZ_ASO_RSPOS
           MARC~SERNP

           INTO CORRESPONDING FIELDS OF TABLE GT_SALES

           FROM VBAK INNER JOIN VBEP
             ON VBAK~VBELN = VBEP~VBELN
           INNER JOIN VBUP
             ON VBUP~VBELN = VBEP~VBELN
             AND VBUP~POSNR = VBEP~POSNR
           INNER JOIN VBAP
             ON VBEP~VBELN = VBAP~VBELN
             AND VBEP~POSNR = VBAP~POSNR
           INNER JOIN MARC
             ON VBAP~MATNR = MARC~MATNR
             AND VBAP~WERKS = MARC~WERKS
           WHERE (LV_CONDITION).

  IF SY-SUBRC NE 0.
    IF SY-BATCH IS INITIAL.
      MESSAGE S000(YSE_SDMM_DTC02).
      EXIT.
    ELSE.
      WRITE: 'No items selected'.                           "#EC *
      EXIT.
    ENDIF.
  ENDIF.

*Now select the po's of the selected asso's

select rsnum rspos ebeln from rsdbs
  INTO TABLE gt_rsdbs
  for all ENTRIES IN GT_SALES
  where rsnum = GT_SALES-ZZ_ASO_RSNUM
    AND rspos = GT_SALES-ZZ_ASO_RSPOS
    and ebeln <> ' '.

sort gt_rsdbs by ZZ_ASO_RSNUM ZZ_ASO_RSPOS.

select ebeln ekorg lifnr from ekko
  into table gt_ekko
  FOR ALL ENTRIES IN gt_rsdbs
  WHERE ebeln = gt_rsdbs-ebeln.

sort gt_ekko by ebeln.

END-OF-SELECTION.

  DELETE ADJACENT DUPLICATES FROM GT_SALES COMPARING VBELN POSNR.

* Now fill the sales table with the found po data
loop at gt_sales ASSIGNING <FS_SALES>.
  IF    <FS_SALES>-ZZ_ASO_RSNUM IS INITIAL
     OR <FS_SALES>-ZZ_ASO_RSPOS IS INITIAL.
    WRITE: / 'Order item ',
             <FS_SALES>-VBELN,
             <FS_SALES>-POSNR,
             ' does not have a valid reservation reference'.
    DELETE GT_SALES.
  ELSE.
    read TABLE gt_rsdbs ASSIGNING <fs_rsdbs> with KEY ZZ_ASO_RSNUM = <FS_SALES>-ZZ_ASO_RSNUM
                                                      ZZ_ASO_RSPOS = <FS_SALES>-ZZ_ASO_RSPOS.
    IF SY-SUBRC NE 0.
      WRITE: / 'Reservation ',
               <FS_SALES>-ZZ_ASO_RSNUM,
               <FS_SALES>-ZZ_ASO_RSPOS,
               ' not found in PO reference table RSDBS'.
      DELETE GT_SALES.
    ELSE.
      read table gt_ekko ASSIGNING <fs_ekko> with key ebeln = <fs_rsdbs>-ebeln.

      move: <fs_ekko>-ekorg to <FS_SALES>-ekorg,
            <fs_ekko>-lifnr to <FS_SALES>-lifnr.

    ENDIF.
  ENDIF.
ENDLOOP.

*Sort by vendor.
  SORT GT_SALES BY VBELN POSNR.

*Exclude all irelevant vendors
  LOOP AT GT_SALES ASSIGNING <FS_SALES>.
*Check if it is a relevant vendor
    IF NOT GT_EX_VENDORS[] IS INITIAL.
      READ TABLE GT_EX_VENDORS ASSIGNING <FS_EX_VEND>
        WITH KEY EKORG = <FS_SALES>-EKORG
            LIFNR = <FS_SALES>-LIFNR.
      IF SY-SUBRC NE 0.
*EQ in above line replaced by NE
        DELETE GT_SALES WHERE EKORG = <FS_SALES>-EKORG
                        AND LIFNR = <FS_SALES>-LIFNR.
        CONTINUE.
      ENDIF.
    ELSE.


*CHANGE!!! only execute the program for the selection if a vendor was found
*in the Y-table
*Remark: in program...AUTOMATION_02 it is the opposite
      SELECT * FROM YSE_SD_VEND_LLAB APPENDING TABLE GT_EX_VENDORS
        WHERE EKORG EQ <FS_SALES>-EKORG
        AND LIFNR EQ <FS_SALES>-LIFNR.
      IF SY-SUBRC NE 0.
*EQ in above line replaced by NE
        DELETE GT_SALES WHERE EKORG = <FS_SALES>-EKORG
                          AND LIFNR = <FS_SALES>-LIFNR.

        CONTINUE.
      ENDIF.
    ENDIF.
  ENDLOOP.

  DESCRIBE TABLE GT_SALES LINES GV_COUNT.

  IF GV_COUNT = 0.
    IF SY-BATCH IS INITIAL.
      MESSAGE S001(YSE_SDMM_DTC02).
      EXIT.
    ELSE.
      WRITE: 'No sales documents found for involved vendors'."#EC *
      EXIT.
    ENDIF.
  ENDIF.


*Now we can start processing the sales orders
  LOOP AT GT_SALES ASSIGNING <FS_SALES>.
    AT NEW VBELN.
      CLEAR: GT_SALES_SERNR[],
             GT_REQUEST[],
             GT_ITEMS[],
             GT_RETURN[],
             GT_SERNR[].
      LOOP AT GT_SALES ASSIGNING <FS_TO_DO>
            WHERE VBELN EQ <FS_SALES>-VBELN.
        PERFORM GET_SERNRS_OF_SO_STOCK.
*Start filling the sales order line item tables to process all line items together per sales order afterwards
        PERFORM FILL_PROCESSING_TABLES.
      ENDLOOP.
*Once all line items of current order are processed, create delivery.
      CALL FUNCTION 'BAPI_DELIVERYPROCESSING_EXEC'
        TABLES
          REQUEST      = GT_REQUEST
          CREATEDITEMS = GT_ITEMS
          RETURN       = GT_RETURN.

*Check if any erros occured
      LOOP AT GT_RETURN ASSIGNING <FS_RETURN>
        WHERE TYPE = 'E'.
        WRITE: / <FS_SALES>-VBELN, <FS_SALES>-POSNR, <FS_RETURN>-MESSAGE.
      ENDLOOP.
      IF SY-SUBRC EQ 0.  "If errors, exit current loop
        CONTINUE.
      ELSE.
*       TVO 21/01/2008 -- Since in a below step (FM SD_DELIVERY_UPDATE_PICKING_1)
*       SAP standard wants to delete and re-add the serial numbers, the serial
*       numbers added by BADI YCL_IM_SE_SDMM_DEL_CRE_SP first need to be commited
*       (otherwise, a dump occurs)
        commit work and wait.
*Delivery creation was succesfull
        WRITE: / 'Delivery creation was succesfull for sales order',<FS_SALES>-VBELN.
      ENDIF.

*END....


      CLEAR: GT_RETURN[].
*Perform picking of quantity with sernrs
      CLEAR: GT_VBPOK, GS_VBKOK.
      LOOP AT GT_ITEMS ASSIGNING <FS_ITEMS>.
        MOVE: <FS_ITEMS>-DOCUMENT_NUMB TO GS_VBKOK-VBELN_VL.

        MOVE: <FS_ITEMS>-DOCUMENT_NUMB TO GS_VBPOK-VBELN_VL,
              <FS_ITEMS>-DOCUMENT_ITEM TO GS_VBPOK-POSNR_VL,
              <FS_ITEMS>-QUANTITY_SALES_UOM TO GS_VBPOK-PIKMG,
              <FS_ITEMS>-DOCUMENT_NUMB TO GS_VBPOK-VBELN,
              <FS_ITEMS>-DOCUMENT_ITEM TO GS_VBPOK-POSNN.



        APPEND GS_VBPOK TO GT_VBPOK.
*Assign sernrs to delivery item if any sernr found
        LOOP AT GT_SERNR ASSIGNING <FS_SERNR>.
          LOOP AT GT_REQUEST INTO GS_REQUEST WHERE DOCUMENT_NUMB = <FS_SERNR>-RFBEL
                                             AND DOCUMENT_ITEM = <FS_SERNR>-RFPOS.
            LOOP AT GT_ITEMS INTO GS_ITEMS WHERE ID = GS_REQUEST-ID.
              MOVE: GS_ITEMS-DOCUMENT_NUMB TO <FS_SERNR>-RFBEL,
                    GS_ITEMS-DOCUMENT_ITEM TO <FS_SERNR>-RFPOS.
            ENDLOOP.
          ENDLOOP.
        ENDLOOP.
      ENDLOOP.
      IF SY-SUBRC EQ 0.


        CALL FUNCTION 'SD_DELIVERY_UPDATE_PICKING_1'
          EXPORTING
            VBKOK_WA        = GS_VBKOK
            IT_SERNR_UPDATE = GT_SERNR
          TABLES
            VBPOK_TAB       = GT_VBPOK.
        IF SY-SUBRC EQ 0.                                   "#EC *
          COMMIT WORK AND WAIT.
          WRITE: / 'Delivery creation and picking was succesfull for sales order ',<FS_SALES>-VBELN.
        ELSE.
*          write: / 'Error during picking, no goods issue'.      "#EC *
          WRITE: / 'Delivery creation was succesfull for sales order',<FS_SALES>-VBELN, 'but picking failed'."#EC *

          CONTINUE.
        ENDIF.

*=============================================================
*The goods issue is not necessary for issue 2832, but picking yes,
*Because serialnumbers are assigned when picking
        IF 1 = 2.
*=============================================================
*Next post goods issue
          MOVE: <FS_ITEMS>-DOCUMENT_NUMB TO GV_DEL,
                <FS_ITEMS>-DOCUMENT_NUMB TO GS_HEADER-DELIV_NUMB,
                <FS_ITEMS>-DOCUMENT_NUMB TO GS_CONTROL-DELIV_NUMB,
                'X' TO GS_CONTROL-POST_GI_FLG.

          CLEAR: GT_RETURN.

          CALL FUNCTION 'BAPI_OUTB_DELIVERY_CONFIRM_DEC'
            EXPORTING
              HEADER_DATA    = GS_HEADER
              HEADER_CONTROL = GS_CONTROL
              DELIVERY       = GV_DEL
            TABLES
              RETURN         = GT_RETURN.

*Check if any erros occured
          LOOP AT GT_RETURN ASSIGNING <FS_RETURN>
            WHERE TYPE = 'E'.
            WRITE: / <FS_SALES>-VBELN, <FS_SALES>-POSNR, <FS_RETURN>-MESSAGE.
          ENDLOOP.
          IF SY-SUBRC EQ 0.  "If errors, exit current loop
            CONTINUE.
          ELSE.  "Delivery create, picking and goods issue was succesfull
            WRITE: / 'Delivery creation, picking and goods issue was succesfull for sales order ',<FS_SALES>-VBELN."#EC *
          ENDIF.

          COMMIT WORK AND WAIT.


        ENDIF.
      ELSE.  "No delivery to pick
*          WRITE: / 'No delivery to pick and issue for sales order ', <FS_SALES>-VBELN."#EC *
        WRITE: / 'No delivery to pick for sales order ', <FS_SALES>-VBELN."#EC *

      ENDIF.
    ENDAT.

  ENDLOOP.
