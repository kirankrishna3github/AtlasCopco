*&---------------------------------------------------------------------*
*&  Include           yse_fi_upl_noteditems_forms                      *
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  READ_FILE
*&---------------------------------------------------------------------*
FORM read_file.

  DATA : w_filename TYPE string.


  SELECT SINGLE * FROM usr01 WHERE bname = sy-uname.

  w_filename = p_fname.


  IF p_one = 'X'.

    CALL FUNCTION 'GUI_UPLOAD'
      EXPORTING
        filename                = w_filename
        filetype                = 'ASC'
        has_field_separator     = 'X'
      TABLES
        data_tab                = i_data1
      EXCEPTIONS
        file_open_error         = 1
        file_read_error         = 2
        no_batch                = 3
        gui_refuse_filetransfer = 4
        invalid_type            = 5
        no_authority            = 6
        unknown_error           = 7
        bad_data_format         = 8
        header_not_allowed      = 9
        separator_not_allowed   = 10
        header_too_long         = 11
        unknown_dp_error        = 12
        access_denied           = 13
        dp_out_of_memory        = 14
        disk_full               = 15
        dp_timeout              = 16
        OTHERS                  = 17.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

* Delete first row from file if user indicated that a header line is
* included
    IF p_header = 'X'.
      DELETE i_data1 INDEX 1.
    ENDIF.

    PERFORM copy_data.

  ELSE.

    CALL FUNCTION 'GUI_UPLOAD'
      EXPORTING
        filename                = w_filename
        filetype                = 'ASC'
        has_field_separator     = 'X'
      TABLES
        data_tab                = i_data
      EXCEPTIONS
        file_open_error         = 1
        file_read_error         = 2
        no_batch                = 3
        gui_refuse_filetransfer = 4
        invalid_type            = 5
        no_authority            = 6
        unknown_error           = 7
        bad_data_format         = 8
        header_not_allowed      = 9
        separator_not_allowed   = 10
        header_too_long         = 11
        unknown_dp_error        = 12
        access_denied           = 13
        dp_out_of_memory        = 14
        disk_full               = 15
        dp_timeout              = 16
        OTHERS                  = 17.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

* Delete first row from file if user indicated that a header line is
* included
    IF p_header = 'X'.
      DELETE i_data INDEX 1.
    ENDIF.
  ENDIF.

* Convert data if required
  IF p_point = 'X' AND usr01-dcpfm <> 'X'.
    PERFORM convert_into_comma.
  ELSEIF p_comma = 'X' AND usr01-dcpfm = 'X'.
    PERFORM convert_into_point.
  ENDIF.

  PERFORM change_date.

ENDFORM.                    " READ_FILE

*&---------------------------------------------------------------------*
*&      Form  CREATE_BATCH_INPUT
*&---------------------------------------------------------------------*
FORM create_batch_input .
* Copy the data lines to a table with fewer fields to allow grouping
  i_header[] = i_data[].
* Begin of insertion MOD-003
*  Data declaration
  DATA: lv_idx TYPE sy-tabix.
  LOOP AT i_data.
    lv_idx = sy-tabix.
    READ TABLE i_header INDEX lv_idx.
    CLEAR: i_header-vatdate.
    MOVE i_data-vatdate TO i_header-vatdate.
    MODIFY i_header INDEX lv_idx TRANSPORTING vatdate.
    CLEAR: lv_idx.
  ENDLOOP.
* End of insertion MOD-003
  SORT i_header.
  DELETE ADJACENT DUPLICATES FROM i_header.
*  Date conversions
  DATA : wl_date(8) TYPE c.
  LOOP AT i_data.
    CLEAR wl_date.
    CASE usr01-datfm.
      WHEN '1'.
        wl_date = i_data-bldat.
        i_data-bldat+0(2) = wl_date+0(2).
        i_data-bldat+2(2) = wl_date+2(2).
        i_data-bldat+4(4) = wl_date+4(4).
        CONCATENATE i_data-bldat+0(2) i_data-bldat+2(2) i_data-bldat+4(4) INTO i_data-bldat_1 SEPARATED BY '.'.
        wl_date = i_data-budat.
        i_data-budat+0(2) = wl_date+0(2).
        i_data-budat+2(2) = wl_date+2(2).
        i_data-budat+4(4) = wl_date+4(4).
        CONCATENATE i_data-budat+0(2) i_data-budat+2(2) i_data-budat+4(4) INTO i_data-budat_1 SEPARATED BY '.'.
        wl_date = i_data-zfbdt.
        i_data-zfbdt+0(2) = wl_date+0(2).
        i_data-zfbdt+2(2) = wl_date+2(2).
        i_data-zfbdt+4(4) = wl_date+4(4).
        CONCATENATE i_data-zfbdt+0(2) i_data-zfbdt+2(2) i_data-zfbdt+4(4) INTO i_data-zfbdt_1 SEPARATED BY '.'.
        wl_date = i_data-vatdate.
        i_data-vatdate+0(2) = wl_date+0(2).
        i_data-vatdate+2(2) = wl_date+2(2).
        i_data-vatdate+4(4) = wl_date+4(4).
        CONCATENATE i_data-vatdate+0(2) i_data-vatdate+2(2) i_data-vatdate+4(4) INTO i_data-vatdate_1 SEPARATED BY '.'.

      WHEN '2' OR '3'.
        wl_date = i_data-bldat.
        i_data-bldat+0(2) = wl_date+0(2).
        i_data-bldat+2(2) = wl_date+2(2).
        i_data-bldat+4(4) = wl_date+4(4).
        CONCATENATE i_data-bldat+0(2) i_data-bldat+2(2) i_data-bldat+4(4) INTO i_data-bldat_1 SEPARATED BY '.'.
        wl_date = i_data-budat.
        i_data-budat+0(2) = wl_date+0(2).
        i_data-budat+2(2) = wl_date+2(2).
        i_data-budat+4(4) = wl_date+4(4).
        CONCATENATE i_data-budat+0(2) i_data-budat+2(2) i_data-budat+4(4) INTO i_data-budat_1 SEPARATED BY '.'.
        wl_date = i_data-zfbdt.
        i_data-zfbdt+0(2) = wl_date+0(2).
        i_data-zfbdt+2(2) = wl_date+2(2).
        i_data-zfbdt+4(4) = wl_date+4(4).
        CONCATENATE i_data-zfbdt+0(2) i_data-zfbdt+2(2) i_data-zfbdt+4(4) INTO i_data-zfbdt_1 SEPARATED BY '.'.
        wl_date = i_data-vatdate.
        i_data-vatdate+0(2) = wl_date+0(2).
        i_data-vatdate+2(2) = wl_date+2(2).
        i_data-vatdate+4(4) = wl_date+4(4).
        CONCATENATE i_data-vatdate+0(2) i_data-vatdate+2(2) i_data-vatdate+4(4) INTO i_data-vatdate_1 SEPARATED BY '.'.
    ENDCASE.
    MODIFY i_data TRANSPORTING bldat_1 budat_1 zfbdt_1 vatdate_1.
  ENDLOOP.
* Call Batch Input session method
  LOOP AT i_data.

    PERFORM open_group.

    PERFORM bdc_dynpro      USING 'SAPMF05A' '0112'.

    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '/00'.
    PERFORM bdc_field       USING 'BKPF-BLDAT'
                                  i_data-bldat_1.
    PERFORM bdc_field       USING 'BKPF-BLART'
                                  i_data-blart.
    PERFORM bdc_field       USING 'BKPF-BUKRS'
                                  i_data-bukrs.
    PERFORM bdc_field       USING 'BKPF-BUDAT'
                                  i_data-budat_1.
    PERFORM bdc_field       USING 'BKPF-MONAT'
                                  i_data-monat.
    PERFORM bdc_field       USING 'BKPF-WAERS'
                                  i_data-waers.
    PERFORM bdc_field       USING 'BKPF-XBLNR'
                                  i_data-xblnr.
    PERFORM bdc_field       USING 'BKPF-BKTXT'
                                  i_data-bktxt.
    PERFORM bdc_field       USING 'BKPF-VATDATE'
                                  i_data-vatdate_1.
    PERFORM bdc_field       USING 'RF05A-NEWKO'
                                  i_data-newko.
    PERFORM bdc_field       USING 'RF05A-ZUMSK'
                                  i_data-zumsk.
    PERFORM bdc_dynpro      USING 'SAPMF05A' '0304'.
    PERFORM bdc_field       USING 'BDC_CURSOR'
                                  i_data-sgtxt.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '/00'.
    PERFORM bdc_field       USING 'BSEG-WRBTR'
                                  i_data-wrbtr.
    PERFORM bdc_field       USING 'BSEG-MWSKZ'
                                  i_data-mwskz.
    PERFORM bdc_field       USING 'RF05A-XMWST'
                                  i_data-xmwst.
    PERFORM bdc_field       USING 'BSEG-ZFBDT'
                                  i_data-zfbdt_1.
    PERFORM bdc_field       USING 'BSEG-PRCTR'
                                  i_data-prctr.
    PERFORM bdc_field       USING 'BSEG-SGTXT'
                                  i_data-sgtxt.
    PERFORM bdc_dynpro      USING 'SAPMF05A' '0304'.
    PERFORM bdc_field       USING 'BDC_CURSOR'
                                  i_data-wrbtr.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '=ZK'.
    PERFORM bdc_field       USING 'BSEG-WRBTR'
                                  i_data-wrbtr.
    PERFORM bdc_field       USING 'BSEG-MWSKZ'
                                  i_data-mwskz.
    PERFORM bdc_field       USING 'BSEG-ZFBDT'
                                  i_data-zfbdt_1.
    PERFORM bdc_field       USING 'BSEG-SGTXT'
                                  i_data-sgtxt.
    PERFORM bdc_dynpro      USING 'SAPMF05A' '0332'.
    PERFORM bdc_field       USING 'BDC_CURSOR'
                                  'BSEG-BVTYP'.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '=BU'.
    PERFORM bdc_transaction USING 'F-47'.

    PERFORM close_group.

  ENDLOOP.
ENDFORM.                    " CREATE_BATCH_INPUT

*&---------------------------------------------------------------------*
*&      Form  CONVERT_INTO_COMMA
*&---------------------------------------------------------------------*
FORM convert_into_comma.

  LOOP AT i_data.
    REPLACE ALL OCCURRENCES OF '.' IN i_data-wrbtr WITH '/'.
    REPLACE ALL OCCURRENCES OF ',' IN i_data-wrbtr WITH '.'.
    REPLACE ALL OCCURRENCES OF '/' IN i_data-wrbtr WITH ','.
    REPLACE ALL OCCURRENCES OF '.' IN i_data-wmwst WITH '/'.
    REPLACE ALL OCCURRENCES OF ',' IN i_data-wmwst WITH '.'.
    REPLACE ALL OCCURRENCES OF '/' IN i_data-wmwst WITH ','.
    MODIFY i_data INDEX sy-tabix.
  ENDLOOP.

ENDFORM.                    " CONVERT_INTO_COMMA
*&---------------------------------------------------------------------*
*&      FORM  CONVERT_INTO_POINT
*&---------------------------------------------------------------------*
FORM convert_into_point.

  LOOP AT i_data.
    REPLACE ALL OCCURRENCES OF ',' IN i_data-wrbtr WITH '/'.
    REPLACE ALL OCCURRENCES OF '.' IN i_data-wrbtr WITH ','.
    REPLACE ALL OCCURRENCES OF '/' IN i_data-wrbtr WITH '.'.
    REPLACE ALL OCCURRENCES OF ',' IN i_data-wmwst WITH '/'.
    REPLACE ALL OCCURRENCES OF '.' IN i_data-wmwst WITH ','.
    REPLACE ALL OCCURRENCES OF '/' IN i_data-wmwst WITH '.'.
    MODIFY i_data INDEX sy-tabix.
  ENDLOOP.

ENDFORM.                    " CONVERT_INTO_POINT

*&---------------------------------------------------------------------*
*&      Form  CHANGE_DATE
*&---------------------------------------------------------------------*
FORM change_date.

  DATA : wl_date(8) TYPE c.

  LOOP AT i_data.

    CASE usr01-datfm.
      WHEN '1'.

        wl_date = i_data-bldat.
        i_data-bldat+0(2) = wl_date+6(2).
        i_data-bldat+2(2) = wl_date+4(2).
        i_data-bldat+4(4) = wl_date+0(4).

        wl_date = i_data-budat.
        i_data-budat+0(2) = wl_date+6(2).
        i_data-budat+2(2) = wl_date+4(2).
        i_data-budat+4(4) = wl_date+0(4).

        wl_date = i_data-zfbdt.
        i_data-zfbdt+0(2) = wl_date+6(2).
        i_data-zfbdt+2(2) = wl_date+4(2).
        i_data-zfbdt+4(4) = wl_date+0(4).

* Begin of insertion MOD-003
        wl_date = i_data-vatdate.
        i_data-vatdate+0(2) = wl_date+6(2).
        i_data-vatdate+2(2) = wl_date+4(2).
        i_data-vatdate+4(4) = wl_date+0(4).
* End of insertion MOD-003

      WHEN '2' OR '3'.
        wl_date = i_data-bldat.
        i_data-bldat+0(2) = wl_date+4(2).
        i_data-bldat+2(2) = wl_date+6(2).
        i_data-bldat+4(4) = wl_date+0(4).

        wl_date = i_data-budat.
        i_data-budat+0(2) = wl_date+4(2).
        i_data-budat+2(2) = wl_date+6(2).
        i_data-budat+4(4) = wl_date+0(4).

        wl_date = i_data-zfbdt.
        i_data-zfbdt+0(2) = wl_date+4(2).
        i_data-zfbdt+2(2) = wl_date+6(2).
        i_data-zfbdt+4(4) = wl_date+0(4).

* Begin of Insertion MOD-003
        wl_date = i_data-vatdate.
        i_data-vatdate+0(2) = wl_date+4(2).
        i_data-vatdate+2(2) = wl_date+6(2).
        i_data-vatdate+4(4) = wl_date+0(4).
* End of Insertion MOD-003

    ENDCASE.
    MODIFY i_data TRANSPORTING bldat budat zfbdt
                                                 vatdate. "MOD-003
  ENDLOOP.

ENDFORM.                    " CHANGE_DATE

*&---------------------------------------------------------------------*
*&      Form  PROCESS_HEADER
*&---------------------------------------------------------------------*
FORM process_header .

  DATA: lv_wmwst   TYPE xfeld.                    "MOD-002

  CLEAR lv_wmwst.                                 "MOD-002
  IF i_header-blart = 'KR' OR i_header-blart = 'KG'
                        OR i_header-blart = 'DR'
                        OR i_header-blart = 'DG'
                        OR i_header-blart = 'ZA' " Inserted on request of M. Schaerlaeken
                        OR i_header-blart = 'ZF'. " Inserted on request of D. Cumps
    bbkpf-xmwst = 'X'.
    i_data1-xmwst = 'X'.
    i_data-xmwst = 'X'.
  ENDIF.

* check xwmst on I_data
  LOOP AT i_data
  WHERE bldat = i_header-bldat
    AND blart = i_header-blart
    AND bukrs = i_header-bukrs
    AND budat = i_header-budat
    AND monat = i_header-monat       "+MOD-004
    AND waers = i_header-waers
    AND xblnr = i_header-xblnr
    AND bktxt = i_header-bktxt
     AND vatdate = i_header-vatdate. "+MOD-003
    IF i_data-xmwst = 'X'.
      bbkpf-xmwst = 'X'.
    ENDIF.
    IF NOT i_data-wmwst IS INITIAL.               "MOD-002
      lv_wmwst = 'X'.                             "MOD-002
    ENDIF.                                        "MOD-002
  ENDLOOP.
  IF lv_wmwst = 'X'.                              "MOD-002
    bbkpf-xmwst = '/'.
    i_data1-xmwst = '/'.
    i_data-xmwst = '/'.                           "MOD-002
  ENDIF.                                          "MOD-002

ENDFORM.                    " PROCESS_HEADER
*&---------------------------------------------------------------------*
*&      Form  copy_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM copy_data.

  REFRESH i_data.
  CLEAR i_data.

  LOOP AT i_data1.
    MOVE-CORRESPONDING i_data1 TO i_data.
    APPEND i_data.
    CLEAR i_data.
  ENDLOOP.

* delete empty lines
  LOOP AT i_data.
    IF i_data-blart IS INITIAL.
      DELETE i_data.
    ENDIF.
  ENDLOOP.

ENDFORM.                    "copy_data
*&---------------------------------------------------------------------*
*&      Form  BDC_DYNPRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0315   text
*      -->P_0316   text
*----------------------------------------------------------------------*
FORM bdc_dynpro  USING program dynpro.
  CLEAR bdcdata.
  bdcdata-program  = program.
  bdcdata-dynpro   = dynpro.
  bdcdata-dynbegin = 'X'.
  APPEND bdcdata.
ENDFORM.                    " BDC_DYNPRO
*&---------------------------------------------------------------------*
*&      Form  BDC_FIELD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0320   text
*      -->P_I_DATA_ZUMSK  text
*----------------------------------------------------------------------*
FORM bdc_field  USING  fnam fval.
  IF fval <> nodata.
    CLEAR bdcdata.
    bdcdata-fnam = fnam.
    bdcdata-fval = fval.
    APPEND bdcdata.
  ENDIF.
ENDFORM.                    " BDC_FIELD
*&---------------------------------------------------------------------*
*&      Form  BDC_TRANSACTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0470   text
*----------------------------------------------------------------------*
FORM bdc_transaction  USING tcode.
  DATA: l_mstring(480).
  DATA: l_subrc LIKE sy-subrc.
* batch input session
  IF session = 'X'.
    CALL FUNCTION 'BDC_INSERT'
      EXPORTING
        tcode     = tcode
      TABLES
        dynprotab = bdcdata.
    IF smalllog <> 'X'.
      WRITE: / 'BDC_INSERT'(i03),
               tcode,
               'returncode:'(i05),
               sy-subrc,
               'RECORD:',
               sy-index.
    ENDIF.
  ENDIF.
ENDFORM.                    " BDC_TRANSACTION
*&---------------------------------------------------------------------*
*&      Form  OPEN_GROUP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM open_group .
  IF session = 'X'.
    SKIP.
    WRITE: /(20) 'Create group'(i01), 'NOTED_ITEMS'.
    SKIP.
*   open batchinput group
    CALL FUNCTION 'BDC_OPEN_GROUP'
      EXPORTING
        client   = sy-mandt
        group    = 'NOTED_ITEMS'
        user     = user
        keep     = keep
        holddate = holddate.
    WRITE: /(30) 'BDC_OPEN_GROUP'(i02),
            (12) 'returncode:'(i05),
                 sy-subrc.
  ENDIF.
ENDFORM.                    " OPEN_GROUP
*&---------------------------------------------------------------------*
*&      Form  CLOSE_GROUP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM close_group .
  IF session = 'X'.
*   close batchinput group
    CALL FUNCTION 'BDC_CLOSE_GROUP'.
    WRITE: /(30) 'BDC_CLOSE_GROUP'(i04),
            (12) 'returncode:'(i05),
                 sy-subrc.
  ELSE.
    IF e_group_opened = 'X'.
      CALL FUNCTION 'BDC_CLOSE_GROUP'.
      WRITE: /.
      WRITE: /(30) 'Fehlermappe wurde erzeugt'(i06).
      e_group_opened = ' '.
    ENDIF.
  ENDIF.
ENDFORM.                    " CLOSE_GROUP
