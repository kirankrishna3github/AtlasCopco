*----------------------------------------------------------------------*
*   INCLUDE ADDI_TYPES_BUYING                                          *
*----------------------------------------------------------------------*
*  Type definitions to be used within application 'Buying' for
*  Additionals.
*
*  Addi_buying_print corresponds to the segments used for informing
*  a supplier which additionals to affix at the merchandise.
*  A separate type is defined for the extra text which may be
*  assigned to each additional.

types:  begin of addi_buying_extra_text.
        include structure wtad_buying_print_extra_text.
types:  end of addi_buying_extra_text.
types:  addi_buying_extra_text_itab type
                                addi_buying_extra_text occurs 0.

types: begin of addi_buying_print.
        include structure wtad_buying_print_addi.
types:   addi_buying_extra_text_info type
                              addi_buying_extra_text occurs 0,
       end of addi_buying_print.
types: addi_buying_print_itab type addi_buying_print occurs 0.

*  The operations and the status from Buying is kept in some constants
constants: addi_buying_row_insert(1) type c value 'I',
           addi_buying_row_update(1) type c value 'U',
           addi_buying_row_delete(1) type c value 'L',
           addi_buying_row_locked(1) type c value 'S',  " CvB/99A
* CvB/0998.ALRK139968 (
           addi_buying_item_delete(1) type c value 'D',
* CvB/0998.ALRK139968 )
           addi_buying_new(1) type c value 'H',
           addi_buying_update(1) type c value 'V',
           addi_buying_delete(1) type c value 'D'.

*  The names of the Orders segment are assigned to constants
constants:
       addi_segname_e1wtadord1 like edsea-segtyp value 'E1WTADORD1',
       addi_segname_e1wtadord2 like edsea-segtyp value 'E1WTADORD2'.


*  If we fill the Orders IDoc segments for Additionals we access
*  segment names via constants:
constants:
       addi_oi_segname_e1edp01 like edsea-segtyp value 'E1EDP01',
       addi_oi_segname_e1addi1 like edsea-segtyp value 'E1ADDI1',
       addi_oi_segname_e1edpa1 like edsea-segtyp value 'E1EDPA1',
       addi_oi_segname_e1edpa3 like edsea-segtyp value 'E1EDPA3',
       addi_oi_segname_e1edp19 like edsea-segtyp value 'E1EDP19',
       addi_oi_segname_e1edpt1 like edsea-segtyp value 'E1EDPT1',
       addi_oi_segname_e1edpt2 like edsea-segtyp value 'E1EDPT2'.

constants:
       addi_oi_text_id like e1edpt1-tdid value '007 ',
       addi_oi_text_format like e1edpt2-tdformat value '( '.

*  CvB/99A (
*  The additional must be uniquely identified in E1EDP19.
constants: addi_oi_e1edp19_qualifier like e1edp19-qualf value '017'.
*  CvB/99A )


*  The transaction code for updating a reference order is ME22.
constants: addi_order_change_tcode like tstc-tcode value 'ME22'.

*  The entries to be updated are identified via a range table.  Sign
*  and option are set from two constants:
constants: addi_order_id_sign like belnr_ran1-sign value 'I',
           addi_order_id_option like belnr_ran1-option value 'EQ'.

*  The fields updated are:
*   - MENGE (quantity)
*   - EINDT (delivery date)
constants: addi_order_field_quantity(30) type c value 'MENGE',
           addi_order_field_delivery_date(30) type c value 'EINDT'.

*  Let us define the values for allocations and distributions
constants: addi_ekko_allocation       like ekko-statu value 'E',
           addi_ekpo_allocation       like ekpo-statu value 'W',
           addi_ekko_distribution     like ekko-statu value 'S',
           addi_non_ekpo_distribution like ekpo-aurel value ' '.

*  For a distribution we shall only select data for purchase documents
constants: addi_distribution_doc_type like fret-btypb value '1'.
