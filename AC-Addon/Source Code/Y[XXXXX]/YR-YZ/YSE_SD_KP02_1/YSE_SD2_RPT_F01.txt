*&---------------------------------------------------------------------*
*&  Include           YSE_SD_KP03_RPT_DATASEL                          *
*&---------------------------------------------------------------------*

************************************************************************
* MOD-0002  | 03.07.2009| Satyabrata Basu | SM#4974  | CD1K949093      *
*   YSE_SD2_RPT_F01     Performance improvement (TIME_OUT problem)     *
************************************************************************
* MOD-0003  | 14.08.2009| Satyabrata Basu | SM#5489  |CD1K949787       *
*   YSE_SD2_RPT_F01     Add Customer Number and Customer PO Type       *
************************************************************************

*&---------------------------------------------------------------------*
*&      Form  select_data
*&---------------------------------------------------------------------*
FORM SELECT_DATA.

  DATA:
    BEGIN OF LT_DOCNO OCCURS 0,
      OBJECTID LIKE CDPOS-OBJECTID,
    END OF LT_DOCNO,
    LT_CDPOS LIKE IT_CDPOS OCCURS 0 WITH HEADER LINE.

* Begin of Mod-0002  - Satya 03/jul/2009
  DATA: BEGIN OF LT_VBELN OCCURS 0,
          VBELN LIKE VBAK-VBELN,
        END OF LT_VBELN.
* Get VBEP data with the delivery date first as this is the most selective criteria.
* This makes the total data to select later on much less (IT_VBAK)
  SELECT DISTINCT VBELN
         FROM VBEP
         into LT_VBELN
         WHERE VBEP~EDATU IN SO_VDATU.   "requested delivery date

    APPEND LT_VBELN.
  ENDSELECT.
* Don't continue if nothing found
  CHECK SY-SUBRC EQ 0.
  SORT LT_VBELN BY VBELN.
* End of Mod-0002

* Select vbak, vbap, vbup ... For the requested delivery date we can select from VBAK,
* because it contains always the date (VBEP-EDATU) of the first schedule line
* SELECT      VBAK~VBELN VBAK~AUART VBAK~VKORG VBAK~VTWEG VBAK~AUGRU VBAK~CMFRE            "comment MOD-003
  SELECT      VBAK~VBELN VBAK~ERDAT VBAK~AUART VBAK~VKORG VBAK~VTWEG VBAK~AUGRU VBAK~CMFRE "insert  MOD-003
              VBAP~POSNR VBAP~WERKS VBAP~LGORT VBAP~MATNR VBAP~MATKL VBAP~PRODH VBAP~PSTYV
*             VBAP~ERDAT YSE_EM_PLANT~WHTYPE VBAK~WAERK VBUK~CMGST VBUP~LSSTA VBUP~FSSTA
*             VBAP~ERDAT YSE_EM_PLANT~WHTYPE VBAK~WAERK VBUK~CMGST VBUK~LSSTK VBUK~FSSTK   "comment MOD-003
                         YSE_EM_PLANT~WHTYPE VBAK~WAERK VBUK~CMGST VBUK~LSSTK VBUK~FSSTK   "insert MOD-003
              VBAK~VSBED
              VBKD~BZIRK
         INTO CORRESPONDING FIELDS OF TABLE IT_VBAK
         FROM VBAK
         JOIN VBUK
           ON VBUK~VBELN = VBAK~VBELN
         JOIN VBAP
           ON VBAK~VBELN = VBAP~VBELN
         JOIN VBUP
           ON VBAP~VBELN = VBUP~VBELN
          AND VBAP~POSNR = VBUP~POSNR
         JOIN VBKD
           ON VBKD~VBELN = VBAP~VBELN
          AND VBKD~POSNR = VBAP~POSNR
         JOIN MARA
           ON MARA~MATNR = VBAP~MATNR
         LEFT JOIN YSE_EM_PLANT
           ON YSE_EM_PLANT~WERKS EQ VBAP~WERKS
          FOR ALL ENTRIES IN LT_VBELN                          " +MOD-0002 - Satya
*         WHERE VBAK~AUART IN SO_AUART                         " -MOD-0002 - Satya
        WHERE VBAK~VBELN EQ LT_VBELN-VBELN                     " +MOD-0002 - Satya
          AND VBAK~AUART IN SO_AUART                           " +MOD-0002 - Satya
          AND VBAK~VKORG IN SO_VKORG
          AND VBAK~VTWEG IN SO_VTWEG
*         AND VBAK~VDATU IN SO_VDATU   "requested delivery date
          AND VBAK~AUGRU IN SO_AUGRU
          AND VBAP~WERKS IN SO_WERKS
          AND VBAP~LGORT IN SO_LGORT
          AND VBAP~MATKL IN SO_MATKL
          AND VBAP~ABGRU EQ SPACE
          AND MARA~MTART IN SO_MTART.

* Don't continue if nothing found
  CHECK SY-SUBRC EQ 0.
  SORT IT_VBAK BY VBELN POSNR.

* Create table with unique material numbers in IT_VBAK2
  IT_VBAK2[] = IT_VBAK[].
  SORT IT_VBAK2 BY MATNR.
  DELETE ADJACENT DUPLICATES FROM IT_VBAK2 COMPARING MATNR.
* Get MARC data (dropped the WERKS condition since FOR ALL ENTRIES is not perf. for multiple
* condition fields)
  SELECT      MARC~MATNR MARC~WERKS MARC~PRCTR MARC~DISMM
         FROM MARC
         INTO TABLE IT_MARC
          FOR ALL ENTRIES IN IT_VBAK2
         WHERE MARC~MATNR EQ IT_VBAK2-MATNR
         AND   MARC~WERKS IN SO_WERKS.                         " +Mod-0002 - Satya
  SORT IT_MARC BY MATNR WERKS.

* Get MVKE data (dropped the VKORG condition since FOR ALL ENTRIES is not perf. for multiple
* condition fields)
  SELECT      MVKE~MATNR MVKE~VKORG MVKE~MTPOS MVKE~MVGR4
         FROM MVKE
         INTO TABLE IT_MVKE
          FOR ALL ENTRIES IN IT_VBAK2
         WHERE MVKE~MATNR EQ IT_VBAK2-MATNR
         AND   MVKE~VKORG IN SO_VKORG                          " +Mod-0002 - Satya
         AND   MVKE~VTWEG IN SO_VTWEG.                         " +Mod-0002 - Satya
  SORT IT_MVKE BY MATNR VKORG.

** Get MBEW data (dropped the WERKS condition since FOR ALL ENTRIES is not perf. for multiple
** condition fields)
*  SELECT      MBEW~MATNR MBEW~BWKEY MBEW~STPRS
*         FROM MBEW
*         INTO TABLE IT_MBEW
*          FOR ALL ENTRIES IN IT_VBAK2
*        WHERE MBEW~MATNR EQ IT_VBAK2-MATNR.
*  SORT IT_MBEW BY MATNR BWKEY.

* Get EORD data (dropped the WERKS condition since FOR ALL ENTRIES is not perf. for multiple
* condition fields)
  SELECT      EORD~MATNR EORD~WERKS EORD~LIFNR EORD~FLIFN
         FROM EORD
         INTO TABLE IT_EORD
          FOR ALL ENTRIES IN IT_VBAK2
        WHERE EORD~MATNR EQ IT_VBAK2-MATNR
        AND   EORD~WERKS IN SO_WERKS.                         " +Mod-0002 - Satya
  SORT IT_EORD BY MATNR WERKS FLIFN.

* Get VBEP data (dropped the position condition since FOR ALL ENTRIES is not perf. for multiple
* condition fields)
  SELECT      VBEP~VBELN VBEP~POSNR VBEP~ETTYP VBEP~EDATU VBEP~WMENG
         FROM VBEP
         INTO TABLE IT_VBEP
         FOR ALL ENTRIES IN IT_VBAK
         WHERE VBEP~VBELN EQ IT_VBAK-VBELN AND
               VBEP~ETENR EQ '0001'    "first schedule line
*              Exclude the vbep lines where VBAP-ERDAT > VBEP-EDATU,so include the opposite....
*              VBEP~EDATU >= IT_VBAK-ERDAT
           AND VBEP~EDATU IN SO_VDATU.   "requested delivery date
  SORT IT_VBEP BY VBELN POSNR.

* Get order reason descriptions
  SELECT * FROM TVAUT INTO TABLE IT_TVAUT
                WHERE SPRAS EQ SY-LANGU OR
                      SPRAS EQ 'E'.

* Get the factory calendards for all plants (not so many)
  SELECT WERKS FABKL FROM T001W INTO TABLE IT_T001W.

* Get the link between the advanced shipment number and item and the component
  SELECT      RESB~RSNUM RESB~RSPOS VBELN YSE_VBAP_RESB~POSNR SOBKZ
         INTO TABLE IT_VBAP_RESB
         FROM YSE_VBAP_RESB
         JOIN RESB
           ON RESB~RSNUM EQ YSE_VBAP_RESB~RSNUM AND
              RESB~RSPOS EQ YSE_VBAP_RESB~RSPOS
          FOR ALL ENTRIES IN IT_VBAK
        WHERE VBELN EQ IT_VBAK-VBELN.
  SORT IT_VBAP_RESB BY VBELN POSNR.

* Get the linked deliveries for VBAP (dropped the POSNV condition ...)
  SELECT      VBFA~VBELV VBFA~POSNV VBFA~VBELN POSNN LFIMG WADAT_IST
         INTO TABLE IT_DEL
         FROM VBFA
         JOIN LIPS
           ON LIPS~VBELN EQ VBFA~VBELN AND
              LIPS~POSNR EQ VBFA~POSNN
         JOIN LIKP
           ON LIKP~VBELN EQ VBFA~VBELN
         FOR ALL ENTRIES IN IT_VBAK
         WHERE VBFA~VBELV EQ IT_VBAK-VBELN AND
               VBFA~VBTYP_N EQ 'J'.
  SORT IT_DEL BY VBELV POSNV.

* Get delivery block changes (for "delivery release date")
* - first build table with document numbers in format that can be used for where clause against OBJECTID
  LOOP AT IT_VBAK.
    LT_DOCNO-OBJECTID = IT_VBAK-VBELN.
    APPEND LT_DOCNO.
  ENDLOOP.
  SORT LT_DOCNO BY OBJECTID.
  DELETE ADJACENT DUPLICATES FROM LT_DOCNO.
* Get changes on delivery block
  SELECT      OBJECTCLAS OBJECTID CHANGENR TABNAME TABKEY FNAME
              CHNGIND VALUE_NEW VALUE_OLD
         INTO CORRESPONDING FIELDS OF TABLE IT_CDPOS
         FROM CDPOS
          FOR ALL ENTRIES IN LT_DOCNO
        WHERE OBJECTCLAS EQ 'VERKBELEG'
          AND OBJECTID   EQ LT_DOCNO-OBJECTID
          AND TABNAME    EQ 'VBAK'
          AND FNAME      EQ 'LIFSK'
          AND CHNGIND    EQ 'U'.
*          AND VALUE_NEW  EQ SPACE.
* Get the dates for the delivery block removals
  LOOP AT IT_CDPOS.
*   When delivery block removed
    IF IT_CDPOS-VALUE_NEW EQ SPACE.
*     Get the date of the removal
      SELECT SINGLE UDATE UTIME
               INTO (IT_CDPOS-UDATE, IT_CDPOS-UTIME)
               FROM CDHDR
              WHERE OBJECTCLAS EQ IT_CDPOS-OBJECTCLAS
                AND OBJECTID   EQ IT_CDPOS-OBJECTID
                AND CHANGENR   EQ IT_CDPOS-CHANGENR.
      MODIFY IT_CDPOS.
*   When the change on delivery block was not removing it, ignore the change
    ELSE.
      DELETE IT_CDPOS.
    ENDIF.
  ENDLOOP.
  SORT IT_CDPOS BY OBJECTID UDATE UTIME.
* Build final table with max 1 line per document (delivery block could be set multiple times
  REFRESH LT_CDPOS.
  LOOP AT IT_CDPOS.
    IF IT_CDPOS-OBJECTID NE LT_CDPOS-OBJECTID AND LT_CDPOS-OBJECTID NE SPACE.
      APPEND LT_CDPOS.
    ENDIF.
    LT_CDPOS-OBJECTID = IT_CDPOS-OBJECTID.
    LT_CDPOS-UDATE    = IT_CDPOS-UDATE.
    LT_CDPOS-UTIME    = IT_CDPOS-UTIME.
  ENDLOOP.
  IF LT_CDPOS-OBJECTID NE SPACE.
    APPEND LT_CDPOS.
  ENDIF.
  IT_CDPOS[] = LT_CDPOS[].

ENDFORM.                    " SELECT_DATA

*&---------------------------------------------------------------------*
*&      Form  PROCESS_DATA
*&---------------------------------------------------------------------*
FORM PROCESS_DATA.

  DATA:  lv_bsark LIKE vbkd-bsark.                  " +Mod-0003
  DATA:  lv_kunnr LIKE vbak-kunnr.                  " +Mod-0003

* Process the selected order lines
  LOOP AT IT_VBAK.

*   Clear the output structure

*   Move most data to out table
    MOVE-CORRESPONDING IT_VBAK TO IT_OUT.

*   If there is no corresponding VBEP line then we do not need it in the report
*   Read the component link
    CLEAR IT_VBAP_RESB.
    READ TABLE IT_VBAP_RESB WITH KEY VBELN = IT_VBAK-VBELN
                                     POSNR = IT_VBAK-POSNR
                            BINARY SEARCH.

    READ TABLE IT_VBEP WITH KEY VBELN = IT_VBAK-VBELN
                                POSNR = IT_VBAK-POSNR
                       BINARY SEARCH.
    IF SY-SUBRC EQ 0.
*<<<<< Begin of Comment MOD-001
*      IF IT_VBEP-EDATU < IT_VBAK-ERDAT.
*        CONTINUE.
*      ENDIF.
*<<<<< End of Comment MOD-001
      IT_OUT-EDATU = IT_VBEP-EDATU.
      IT_OUT-WMENG = IT_VBEP-WMENG.
      IF IT_VBEP-ETTYP EQ 'Z2'.
        IF IT_VBAP_RESB-SOBKZ EQ 'E'.
          IT_OUT-DTC_SFS = 'DTC'.
        ELSE.
          IT_OUT-DTC_SFS = 'SFS'.
        ENDIF.
      ELSE.
        IF IT_VBEP-ETTYP EQ 'ZB'.
          IT_OUT-DTC_SFS = 'DTC'.
        ELSE.
          IT_OUT-DTC_SFS = 'SFS'.
        ENDIF.
      ENDIF.
    ELSE.
*     If not in VBEP, then we do not want it in the list
      CONTINUE.
    ENDIF.

*   Set the PGC
    IT_OUT-PRODH = IT_VBAK-PRODH+4(4).

*   Set "Blocked" flags
*   Credit block
    IF IT_VBAK-CMGST EQ 'B' OR
       IT_VBAK-CMGST EQ 'C'.
      IT_OUT-BLOCK = 'X'.
*   Delivery block
    ELSEIF IT_VBAK-LSSTK EQ 'B' OR
           IT_VBAK-LSSTK EQ 'C'.
      IT_OUT-BLOCK = 'X'.
*   Billing block
    ELSEIF IT_VBAK-FSSTK EQ 'B' OR
           IT_VBAK-FSSTK EQ 'C'.
      IT_OUT-BLOCK = 'X'.
    ENDIF.

*   MARC
    READ TABLE IT_MARC WITH KEY MATNR = IT_VBAK-MATNR
                                WERKS = IT_VBAK-WERKS
                       BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      IF IT_MARC-DISMM EQ 'Z5'.
        IT_OUT-STOCKPOL = 'ST'.
      ELSEIF IT_MARC-DISMM EQ 'Z6' OR
             IT_MARC-DISMM EQ 'Z7'.
        IT_OUT-STOCKPOL = 'NS'.
      ENDIF.
    ENDIF.

*   MVKE
    READ TABLE IT_MVKE WITH KEY MATNR = IT_VBAK-MATNR
                                VKORG = IT_VBAK-VKORG
                       BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      IF IT_MVKE-MTPOS EQ 'ZDTC'.
        IT_OUT-DISTRI_MODE = 'DTC'.
      ELSEIF IT_MVKE-MTPOS EQ 'NORM'.
        IF IT_MVKE-MVGR4 EQ ''.
          IT_OUT-DISTRI_MODE = 'NDTC'.
        ELSEIF IT_MVKE-MVGR4 EQ 'LCL'.
          IT_OUT-DISTRI_MODE = 'LCL'.
        ENDIF.
      ENDIF.
    ENDIF.

*   EORD
    READ TABLE IT_EORD WITH KEY MATNR = IT_VBAK-MATNR
                                WERKS = IT_VBAK-WERKS
                                FLIFN = 'X'
                       BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      IT_OUT-LIFNR = IT_EORD-LIFNR.
    ELSE.
*     There could only be 1 line not indicated as fixed
      READ TABLE IT_EORD WITH KEY MATNR = IT_VBAK-MATNR
                                  WERKS = IT_VBAK-WERKS
                         BINARY SEARCH.
      IF SY-SUBRC EQ 0.
        IT_OUT-LIFNR = IT_EORD-LIFNR.
      ENDIF.
    ENDIF.

*   Delivery release date
    READ TABLE IT_CDPOS WITH KEY OBJECTID = IT_OUT-VBELN BINARY SEARCH.
    IF SY-SUBRC = 0.
      IT_OUT-DMFRE = IT_CDPOS-UDATE.
    ENDIF.

* Logic for the fully delivered field:
* "1" if the requested quantity  is equal to the sum of all delivery quantities (LIPS-LFIMG)
* for the sales order item over all deliveries (LIKP) that have a goods issue date (LIKP-WADAT IST)
* that is before or equal to the requested delivery date (**) + X days. X corresponds to the tolerance
* in working days (***) for either SFS or DTC (****) as specified in the selection criteria.
* "0" for other cases
*(**) when the release date > requested delivery date, then the release date should be considered.
*(***) Non-working days need to be retrieved from the factory calendar of the plant in VBAP-WERKS.
*(****) Take DTC tolerance if VBEP-ETTYP = ZB. Take SFS tolerance if VBEP-ETTYP <> ZB.
    CLEAR: LV_DATE, LV_DATE_ADD, LV_DAYS, LV_FABKL.
*   Requested delivery date
    LV_DATE = IT_OUT-EDATU.
*   If Credit release date > requested delivery date
    IF IT_OUT-CMFRE > LV_DATE.
*     Then take that
      LV_DATE = IT_OUT-CMFRE.
    ENDIF.
*   If Delivery release date > max (credit release date, requested delivery date)
    IF IT_OUT-DMFRE > LV_DATE.
      LV_DATE = IT_OUT-DMFRE.
    ENDIF.

*   Add tolerance days specified on selection screen
    IF IT_OUT-DTC_SFS EQ 'DTC'.
      LV_DAYS = P_DTC.
    ELSEIF IT_OUT-DTC_SFS EQ 'SFS'.
      LV_DAYS = P_SFS.
    ENDIF.

*   Get factory calendar and add tolerance for delivery due
    CLEAR IT_T001W.
    READ TABLE IT_T001W WITH KEY WERKS = IT_VBAK-WERKS BINARY SEARCH.
    PERFORM ADD_DAYS USING LV_DATE
                           LV_DAYS
                           IT_T001W-FABKL
                  CHANGING LV_DATE_ADD.
    CLEAR LV_TOT_LFIMG.

*   Determin delivered qty
    CLEAR IT_OUT-LAST_ISSUE.
    LOOP AT IT_DEL
            WHERE VBELV EQ IT_VBAK-VBELN
              AND POSNV EQ IT_VBAK-POSNR.
      IF   IT_DEL-WADAT_IST NE '00000000'
       AND IT_DEL-WADAT_IST <= LV_DATE_ADD.
*       This is the qty of the deliveries
        LV_TOT_LFIMG = LV_TOT_LFIMG + IT_DEL-LFIMG.
      ENDIF.
      IF IT_DEL-WADAT_IST GT IT_OUT-LAST_ISSUE.
        IT_OUT-LAST_ISSUE = IT_DEL-WADAT_IST.
      ENDIF.
    ENDLOOP.
    IF IT_OUT-WMENG = LV_TOT_LFIMG.
      IT_OUT-FULLY_DEL = '1'.
    ELSE.
      IT_OUT-FULLY_DEL = '0'.
    ENDIF.

* Begin Mod-0003 - Satya 14/Aug/2009
* get Customer PO Type
clear lv_bsark.
        SELECT SINGLE bsark
                 INTO lv_bsark
                 FROM vbkd
                WHERE vbeln = it_out-vbeln
                  AND posnr = it_out-posnr.
      it_out-bsark = lv_bsark.
* get Customer PO Type
clear lv_kunnr.
        SELECT SINGLE kunnr
                 INTO lv_kunnr
                 FROM vbak
                WHERE vbeln = it_out-vbeln.
      it_out-kunnr = lv_kunnr.
* End Mod-0003 - Satya 14/Aug/2009

    APPEND IT_OUT.
    CLEAR IT_OUT.
  ENDLOOP.

ENDFORM.                    " PROCESS_DATA

*&---------------------------------------------------------------------*
*&      Form  ADD_DAYS
*&---------------------------------------------------------------------*
FORM ADD_DAYS  USING    P_DATE
                        P_DAYS
                        P_FABKL
               CHANGING P_DATE_ADD.

  DATA:
    LV_DAYS  LIKE  MDCAL-FKDAY.

  LV_DAYS = P_DAYS.

  CALL FUNCTION 'WDKAL_DATE_ADD_FKDAYS'
    EXPORTING
      I_DATE        = P_DATE
      I_FKDAY       = LV_DAYS
      I_FABKL       = P_FABKL
   IMPORTING
     E_DATE        = P_DATE_ADD
*    E_FKDAY       =
   EXCEPTIONS
     ERROR         = 1
     OTHERS        = 2
            .
  IF SY-SUBRC <> 0.
*   MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*           WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                    " ADD_DAYS

*&---------------------------------------------------------------------*
*&      Form  check_authorisation
*&---------------------------------------------------------------------*
FORM CHECK_AUTHORISATION .
  DATA: T_TVKO LIKE STANDARD TABLE OF TVKO WITH HEADER LINE.

  FREE T_TVKO.
  SELECT *
  FROM TVKO
  INTO TABLE T_TVKO WHERE VKORG IN SO_VKORG.


  LOOP AT T_TVKO.
    AUTHORITY-CHECK OBJECT 'V_VBAK_VKO'
                    ID     'VKORG' FIELD T_TVKO-VKORG
                    ID     'VTWEG' DUMMY
                    ID     'SPART' DUMMY
                    ID     'ACTVT' DUMMY.

    IF SY-SUBRC = 4.
*    No authorisation to display data from Sales Organisation p_vkorg
      MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '006'
                               WITH T_TVKO-VKORG.
    ELSEIF SY-SUBRC <> 0.
*     Error checking authorization
      MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '004'.
    ENDIF.

  ENDLOOP.
ENDFORM.                    " CHECK_AUTHORISATION
