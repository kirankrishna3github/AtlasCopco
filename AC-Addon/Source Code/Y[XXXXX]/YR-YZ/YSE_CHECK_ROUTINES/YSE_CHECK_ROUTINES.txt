
*&---------------------------------------------------------------------*
*&  Include           YSE_CHECK_ROUTINES                               *
*&---------------------------------------------------------------------*
*                       MAIN PROGRAM = YSE_CLOSE_SEO                   *
*----------------------------------------------------------------------*
*                                                                      *
* PROGRAM ID           : YSE_CHECK_ROUTINES                            *
* PROGRAM TITLE        : Check Routines 'one button administration'    *
* AUTHOR               : Geert Rutten                                  *
* DATE                 : 21/05/2010                                    *
* DEVELOPMENT ID       : XXXX                                          *
*                                                                      *
* CHANGE REQUEST NUMBER:                                               *
*                                                                      *
*----------------------------------------------------------------------*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
* MOD. NO.|  DATE     | NAME     |CORRECTION NUMBER| CHANGE REFERENCE #*
*                                                                      *
*----------------------------------------------------------------------*
*                                                                      *
************************************************************************
* Common routines for Atlas Copco Aftermarket project                  *
************************************************************************

PROGRAM yse_check_routines.

***********************************************************************
* Data
***********************************************************************
TABLES: yse_close_log.





************************************************************************
* Check Actual costs  = Planned costs with a 20% difference
************************************************************************
FORM check1_costs  USING lv_ordnr TYPE aufnr
                          lv_perc_f TYPE i
                          lv_perc_t TYPE i
                   CHANGING lv_check TYPE c.




  CONSTANTS :   c_currency  TYPE waerk   VALUE 'EUR'.      "Message typ
  DATA: ls_rihaufk TYPE rihaufk,
        lt_rihaufk TYPE STANDARD TABLE OF rihaufk,
        lt_list_pmco TYPE STANDARD TABLE OF pmco_ext,
        ls_list_pmco TYPE pmco_ext,
        lv_total_min TYPE wertv8,
        lv_total_max TYPE wertv8,
        lv_total_20 TYPE wertv8.


  CONCATENATE 'OR' lv_ordnr INTO ls_rihaufk-objnr.
  SELECT SINGLE waers FROM aufk INTO ls_rihaufk-waers
    WHERE aufnr = lv_ordnr.
  MOVE: lv_ordnr TO ls_rihaufk-aufnr.

  APPEND ls_rihaufk TO lt_rihaufk.

* get planned & actual costs for order
  CALL FUNCTION 'PM_WORKORDER_COSTS_LIST'
     EXPORTING
        pmco_detail    = 'X'
        list_currency  = c_currency
*            ALL_CURRENCIES = 'X'
        external_call  = 'X'
     TABLES
        list_aufk      = lt_rihaufk
        list_pmco      = lt_list_pmco
     EXCEPTIONS
        no_orders      = 1
        no_currency    = 2
        no_costs_found = 3
        OTHERS         = 4.

  IF  lt_list_pmco[] IS INITIAL.
    CALL FUNCTION 'PM_WORKORDER_COSTS_LIST'
      EXPORTING
         pmco_detail    = 'X'
         list_currency  = ls_rihaufk-waers
*            ALL_CURRENCIES = 'X'
         external_call  = 'X'
      TABLES
         list_aufk      = lt_rihaufk
         list_pmco      = lt_list_pmco
      EXCEPTIONS
         no_orders      = 1
         no_currency    = 2
         no_costs_found = 3
         OTHERS         = 4.
  ENDIF.

  CLEAR lv_total_min.
  CLEAR lv_total_max.
  READ TABLE lt_list_pmco INTO ls_list_pmco INDEX 1.
  IF NOT ls_list_pmco IS INITIAL.
* Begin of change MOD-001
    IF ls_list_pmco-ikosten <> ls_list_pmco-pkosten.
*          if ls_list_pmco-ikosten > ls_list_pmco-pkosten.
      lv_total_min = ls_list_pmco-ikosten - ( ls_list_pmco-ikosten * lv_perc_f / 100 ).
      lv_total_max = ls_list_pmco-ikosten + ( ls_list_pmco-ikosten * lv_perc_t / 100 ). " 20% difference value
      IF ls_list_pmco-pkosten < lv_total_min  OR ls_list_pmco-pkosten > lv_total_max.
        lv_check = 'N'.
      ENDIF.
*          else.
*          lv_total_min = ls_list_pmco-pkosten - ( ls_list_pmco-pkosten * lv_perc_f / 100 ).
*          lv_total_max = ls_list_pmco-pkosten + ( ls_list_pmco-pkosten * lv_perc_t / 100 ).
*          if ls_list_pmco-ikosten < lv_total_min  or ls_list_pmco-ikosten > lv_total_max.
*           lv_check = 'N'.
*          endif.
    ENDIF.
* End of change MOD-001
  ENDIF.


ENDFORM.                    "CHECK1_COSTS

************************************************************************
* Check internal comments on notification
************************************************************************
FORM check2_intern_com  USING lv_qmnum TYPE qmnum
                        CHANGING lv_check TYPE c.
* Begin of change MOD-005
*  DATA: lv_feknz TYPE feknz.
*
*  SELECT SINGLE feknz FROM qmel INTO lv_feknz
*    WHERE qmnum = lv_qmnum.
*  IF sy-subrc = 0.
*    IF lv_feknz IS INITIAL.
**    lv_check = 'Y'.
*    ELSE.
*      lv_check = 'N'.
*    ENDIF.
*  ELSE.
*    lv_check = 'N'.
*  ENDIF.

  DATA:  i_wiqmfe          LIKE wqmfe   OCCURS 0 WITH HEADER LINE.

    lv_check = 'Y'.
      CALL FUNCTION 'IQS4_GET_NOTIFICATION'
        EXPORTING
          i_qmnum     = lv_qmnum
*       IMPORTING
*         E_VIQMEL    =
*         E_RIWO03    =
        TABLES
          e_iviqmfe_t = i_wiqmfe[]
*         E_IVIQMUR_T = I_wiqmur[].
              .

      IF sy-subrc EQ 0.
        LOOP AT i_wiqmfe.
          IF i_wiqmfe-otgrp = 'ZACO-020' AND
             i_wiqmfe-oteil = '098'      AND
             i_wiqmfe-fegrp = 'ZACD-020' AND
             i_wiqmfe-fecod = '098'.
            lv_check = 'N'.
            EXIT.
          ENDIF.

          IF i_wiqmfe-otgrp = 'ZACO-038' AND
             i_wiqmfe-oteil = '098'      AND
             i_wiqmfe-fegrp = 'ZACD-038' AND
             i_wiqmfe-fecod = '098'.
            lv_check = 'N'.
            EXIT.
          ENDIF.
        ENDLOOP.
      ENDIF.
* End of change MOD-005
ENDFORM.                    "CHECK2_INTERN_COM

************************************************************************
*  All P#rts Confirmed
************************************************************************
FORM check3_all_parts_conf  USING lv_ordnr TYPE aufnr
* Begin of insert MOD-002
                                  lv_ctamflag TYPE c
* End of insert MOD-002
                            CHANGING lv_check TYPE c.

  DATA : BEGIN OF i_aufm OCCURS 0,
          aufnr LIKE aufm-aufnr,         " Service Order Number
          werks LIKE aufm-werks,         " Plant
*         lgort LIKE aufm-lgort,         " Storage Location
          matnr LIKE aufm-matnr,         " Material Number
          bwart LIKE aufm-bwart,         " Movement Type
          erfmg LIKE aufm-erfmg,         " Quantity
*          budat LIKE aufm-budat,         " posting date
       END OF i_aufm.

  DATA : BEGIN OF i_aufm2 OCCURS 0,
          aufnr LIKE aufm-aufnr,         " Service Order Number
          werks LIKE aufm-werks,         " Plant
*         lgort LIKE aufm-lgort,         " Storage Location
          matnr LIKE aufm-matnr,         " Material Number
          bwart LIKE aufm-bwart,         " Movement Type
          erfmg LIKE aufm-erfmg,         " Quantity
*          budat LIKE aufm-budat,         " posting date
       END OF i_aufm2.


  DATA : BEGIN OF i_resb OCCURS 0,
          matnr LIKE resb-matnr,         " Material Number
          bdmng  LIKE resb-bdmng,
          werks LIKE resb-werks,
          lgort LIKE resb-lgort,
         END OF i_resb.

  DATA : BEGIN OF i_resb2 OCCURS 0,
          matnr LIKE resb-matnr,         " Material Number
          bdmng  LIKE resb-bdmng,
          werks LIKE resb-werks,
          lgort LIKE resb-lgort,
         END OF i_resb2.

  DATA: lv_objnr   TYPE aufk-objnr,
        lv_tot     TYPE aufm-erfmg,
        lv_tot_501 TYPE aufm-erfmg,
        lv_aufm(3)           TYPE n.


* Begin of insert MOD-002

  TYPES: BEGIN OF ls_aufm_seed,
        aufnr TYPE aufm-aufnr,         " Service Order Number
        werks TYPE aufm-werks,         " Plant
        matnr TYPE aufm-matnr,         " Material Number
        bwart TYPE aufm-bwart,         " Movement Type
        menge TYPE aufm-menge,         " Quantity
        status TYPE char15,            " Confirmed / Unconfirmed
        maktx  TYPE makt-maktx,        " Description
        resb_menge TYPE aufm-menge,    " Ordered QTY
        mblnr   TYPE mblnr,
        mjahr   TYPE mjahr,
        zeile   TYPE mblpo,
        bemot   TYPE bemot,
     END OF ls_aufm_seed.

  TYPES : BEGIN OF ls_resb_seed,
          aufnr TYPE resb-aufnr,
          matnr TYPE resb-matnr,
          bdmng  TYPE resb-bdmng,
          werks TYPE resb-werks,
          maktx TYPE makt-maktx,
          rsnum TYPE resb-rsnum,
*          rspos TYPe resb-rspos,
*         lgort TYPE resb-lgort,
         END OF ls_resb_seed.

  TYPES : BEGIN OF ls_resb2_seed,
          aufnr TYPE resb-aufnr,
          matnr TYPE resb-matnr,
          bdmng  TYPE resb-bdmng,
          werks TYPE resb-werks,
          maktx TYPE makt-maktx,
          rsnum TYPE resb-rsnum,
          rspos TYPE resb-rspos,
*         lgort TYPE resb-lgort,
         END OF ls_resb2_seed.

  DATA: lt_resb_seed TYPE STANDARD TABLE OF ls_resb_seed,
        lt_resb2_seed TYPE TABLE OF ls_resb2_seed,
        wa_resb2_seed TYPE ls_resb2_seed,
        wa_resb3_seed TYPE ls_resb_seed,
        lv_count TYPE i,
        wa_resb_seed TYPE ls_resb2_seed,
        lt_aufm_seed TYPE STANDARD TABLE OF ls_aufm_seed,
        lt_aufm2_seed TYPE STANDARD TABLE OF ls_aufm_seed,
        wa_aufm_seed TYPE ls_aufm_seed,
        wa_aufm2_seed TYPE ls_aufm_seed,
        lv_qty   TYPE menge_d,
        lv_total TYPE i,
        lv_index_aufm TYPE sy-tabix.


*        wa_resb type ls_resb2,
*        lv_total type i.


* End of insert MOD-002

  CONCATENATE 'OR' lv_ordnr INTO lv_objnr.
* Begin of insert MOD-002
  IF lv_ctamflag  = 'Y'.
* End of insert MOD-002
    CLEAR i_resb[].
    CLEAR i_resb2[].
    CLEAR i_resb.
    SELECT *  FROM resb INTO CORRESPONDING FIELDS OF TABLE i_resb2
      WHERE aufnr = lv_ordnr AND xloek <> 'X' .

    IF sy-subrc = 0.

      LOOP AT i_resb2.
        COLLECT i_resb2 INTO i_resb.
      ENDLOOP.

      LOOP AT i_resb.
        CLEAR i_aufm.
        CLEAR i_aufm[].
        CLEAR i_aufm2[].
        SELECT aufnr werks  matnr bwart erfmg
                            INTO TABLE i_aufm2
                            FROM aufm
                            WHERE     aufnr =   lv_ordnr
                            AND       matnr =   i_resb-matnr.

        IF sy-subrc = 0.
          LOOP AT i_aufm2.
            COLLECT i_aufm2 INTO i_aufm.
          ENDLOOP.
** Sort data by Movement Type
          SORT i_aufm BY bwart.

          DESCRIBE TABLE i_aufm LINES lv_aufm.
          IF lv_aufm IS NOT INITIAL.
* First Check if 501's equal the ordered amount
            CLEAR lv_tot_501.
            LOOP AT i_aufm.
              IF i_aufm-bwart = '501'.
                lv_tot_501 = lv_tot_501 + i_aufm-erfmg.
              ENDIF.
            ENDLOOP.
* Sum of qty ordered - all movements should be 0 ... otherwise missing confirmation (261)
            IF lv_tot_501 = i_resb-bdmng.
              lv_tot = i_resb-bdmng.
              LOOP AT i_aufm.
                IF i_aufm-bwart = '261'.
                  lv_tot = lv_tot - i_aufm-erfmg.
                ENDIF.
                IF i_aufm-bwart = '262'.
                  lv_tot = lv_tot + i_aufm-erfmg.
                ENDIF.
                IF i_aufm-bwart = '502'.
                  lv_tot = lv_tot - i_aufm-erfmg.
                ENDIF.
              ENDLOOP.
              IF lv_tot <> 0.
                lv_check = 'N'.
                EXIT.
              ENDIF.
            ELSE.
              lv_check = 'N'.
              EXIT.
            ENDIF.
          ENDIF.
        ELSE.
          lv_check = 'N'.
        ENDIF.

      ENDLOOP.
    ENDIF.

* Begin of insert MOD-002
  ELSE.
* Check if part quantities SEED equal confimed quantities - returned quantities

* All GR (501's)
    SELECT aufnr matnr bdmng werks rsnum rspos FROM resb INTO CORRESPONDING FIELDS OF TABLE lt_resb2_seed
      WHERE aufnr = lv_ordnr.

    LOOP AT lt_resb2_seed INTO wa_resb2_seed.
* Check if component is not deleted
      CLEAR lv_objnr.
      CONCATENATE 'OK' wa_resb2_seed-rsnum wa_resb2_seed-rspos INTO lv_objnr.
      SELECT SINGLE COUNT(*) FROM jest
        WHERE stat = 'I0013' AND objnr = lv_objnr AND inact = ' '.
      IF sy-subrc <> 0.
        MOVE-CORRESPONDING wa_resb2_seed TO wa_resb3_seed.
        COLLECT wa_resb3_seed INTO lt_resb_seed.
      ENDIF.
    ENDLOOP.
    DESCRIBE TABLE lt_resb_seed LINES lv_count.

    IF lv_count > 0.


      CLEAR lt_aufm2_seed[].
      LOOP AT lt_resb_seed INTO wa_resb_seed.
*****
        CLEAR: lt_aufm_seed[].
        CLEAR: wa_aufm_seed, wa_aufm2_seed.
    SELECT aufnr werks matnr bwart erfmg AS menge mblnr mjahr zeile FROM aufm INTO CORRESPONDING FIELDS OF TABLE lt_aufm_seed
        WHERE aufnr EQ lv_ordnr AND matnr = wa_resb_seed-matnr.
        IF sy-subrc = 0.

          LOOP AT lt_aufm_seed INTO wa_aufm_seed.

            READ TABLE lt_aufm2_seed INTO wa_aufm2_seed WITH KEY matnr = wa_aufm_seed-matnr.
            IF sy-subrc = 0.
              lv_index_aufm  = sy-tabix.
              CLEAR lv_qty.
              lv_qty = wa_aufm2_seed-menge.

              IF wa_aufm_seed-bwart = '261'.
                lv_qty = lv_qty + wa_aufm_seed-menge.
              ELSEIF wa_aufm_seed-bwart = '262'.
                lv_qty = lv_qty - wa_aufm_seed-menge.
              ENDIF.
              wa_aufm2_seed-menge = lv_qty.
              MODIFY lt_aufm2_seed FROM wa_aufm2_seed INDEX lv_index_aufm TRANSPORTING menge.
            ELSE.
              CLEAR lv_qty.
              IF wa_aufm_seed-bwart = '261'.
                lv_qty = lv_qty + wa_aufm_seed-menge.
              ELSEIF wa_aufm_seed-bwart = '262'.
                lv_qty = lv_qty - wa_aufm_seed-menge.
              ENDIF.
              MOVE-CORRESPONDING wa_aufm_seed TO wa_aufm2_seed.
              wa_aufm2_seed-menge = lv_qty.
              wa_aufm2_seed-resb_menge  = wa_resb_seed-bdmng.
              APPEND wa_aufm2_seed TO lt_aufm2_seed.
            ENDIF.
          ENDLOOP.
        ELSE.

          wa_aufm2_seed-aufnr  = lv_ordnr.
          wa_aufm2_seed-werks  = wa_resb_seed-werks.
          wa_aufm2_seed-matnr  = wa_resb_seed-matnr.
*        WA_AUFM2-BEMOT =
          wa_aufm2_seed-bwart  = '999'.
          wa_aufm2_seed-menge  = 0.
          wa_aufm2_seed-resb_menge  = wa_resb_seed-bdmng.
          APPEND wa_aufm2_seed TO lt_aufm2_seed.

        ENDIF.
      ENDLOOP.


      LOOP AT lt_aufm2_seed INTO wa_aufm2_seed.

        CLEAR lv_total.
        lv_total = wa_aufm2_seed-resb_menge - wa_aufm2_seed-menge.
        IF wa_aufm2_seed-resb_menge =  lv_total OR lv_total > 0.
          lv_check = 'N'.
          EXIT.
        ENDIF.

      ENDLOOP.


    ENDIF.
  ENDIF.

* End of insert MOD-002


*........ Check current APAV status
*    CALL FUNCTION 'STATUS_CHECK'
*      EXPORTING
*        OBJNR             = lv_objnr
*        STATUS            = 'E0010'
*      EXCEPTIONS
*        OBJECT_NOT_FOUND  = 1
*        STATUS_NOT_ACTIVE = 2
*        OTHERS            = 3.
*
*    IF NOT SY-SUBRC EQ 0.  "No apav status
*      lv_check = 'N'.
*    ENDIF.

ENDFORM.                    "CHECK3_ALL_PARTS_CONF

*&---------------------------------------------------------------------*
*&      Form  CHECK4_MAXCOSTS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->LV_ORDNR   text
*      -->LV_PERC    text
*      -->LV_CHECK   text
*----------------------------------------------------------------------*
FORM check4_maxcosts  USING lv_ordnr TYPE aufnr
                            lv_perc TYPE i
                   CHANGING lv_check TYPE c.




  CONSTANTS :   c_currency  TYPE waerk   VALUE 'EUR'.      "Message typ
  DATA: ls_rihaufk TYPE rihaufk,
        lt_rihaufk TYPE STANDARD TABLE OF rihaufk,
        lt_list_pmco TYPE STANDARD TABLE OF pmco_ext,
        ls_list_pmco TYPE pmco_ext,
        lv_total TYPE wertv8,
        lv_total_20 TYPE wertv8.


  CONCATENATE 'OR' lv_ordnr INTO ls_rihaufk-objnr.
  SELECT SINGLE waers FROM aufk INTO ls_rihaufk-waers
    WHERE aufnr = lv_ordnr.
  MOVE: lv_ordnr TO ls_rihaufk-aufnr.

  APPEND ls_rihaufk TO lt_rihaufk.

** get planned & actual costs for order
*  CALL FUNCTION 'PM_WORKORDER_COSTS_LIST'
*     EXPORTING
*        pmco_detail    = 'X'
*        list_currency  = c_currency
**            ALL_CURRENCIES = 'X'
*        external_call  = 'X'
*     TABLES
*        list_aufk      = lt_rihaufk
*        list_pmco      = lt_list_pmco
*     EXCEPTIONS
*        no_orders      = 1
*        no_currency    = 2
*        no_costs_found = 3
*        OTHERS         = 4.

*  IF  lt_list_pmco[] IS INITIAL.
    CALL FUNCTION 'PM_WORKORDER_COSTS_LIST'
      EXPORTING
         pmco_detail    = 'X'
         list_currency  = ls_rihaufk-waers
*            ALL_CURRENCIES = 'X'
         external_call  = 'X'
      TABLES
         list_aufk      = lt_rihaufk
         list_pmco      = lt_list_pmco
      EXCEPTIONS
         no_orders      = 1
         no_currency    = 2
         no_costs_found = 3
         OTHERS         = 4.
*  ENDIF.


  READ TABLE lt_list_pmco INTO ls_list_pmco INDEX 1.
  IF NOT ls_list_pmco IS INITIAL.
* if difference > max value between actual and planned cost... than it may not be closed
    lv_total = ls_list_pmco-ikosten - ls_list_pmco-pkosten.
    IF ABS( lv_total ) > lv_perc.
      lv_check = 'N'.
    ENDIF.
  ENDIF.


ENDFORM.                    "CHECK4_MAXCOSTS

*&---------------------------------------------------------------------*
*&      Form  CHECK5_NO_PART
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->LV_ORDNR   text
*      -->LV_CHECK   text
*----------------------------------------------------------------------*
FORM check5_no_part  USING lv_ordnr TYPE aufnr
                     CHANGING lv_check TYPE c.
* When there are no parts ordered -> error
  TABLES resb.

  SELECT SINGLE * FROM resb
   WHERE aufnr = lv_ordnr AND xloek <> 'X'.

  IF sy-subrc <> 0.
    lv_check = 'N'.
  ENDIF.

ENDFORM.                    "CHECK5_NO_PART

* Begin of insert MOD-002
FORM check6_part_exist  USING lv_ordnr TYPE aufnr
                     CHANGING lv_check TYPE c.


* There should be no parts ordered... otherwise error


  SELECT SINGLE * FROM resb
   WHERE aufnr = lv_ordnr AND xloek <> 'X'.

  IF sy-subrc = 0.
    lv_check = 'N'.
  ENDIF.


ENDFORM.                    "CHECK6_PART_EXIST

*&---------------------------------------------------------------------*
*&      Form  CHECK7_SUBC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->LV_ORDNR   text
*      -->LV_CHECK   text
*----------------------------------------------------------------------*
FORM check7_subc  USING lv_ordnr TYPE aufnr
                     CHANGING lv_check TYPE c.


  TABLES afru.

* Check if subcontracting (ZAM019) is used in the order

  SELECT SINGLE * FROM afru
   WHERE aufnr = lv_ordnr AND learr = 'ZAM019' AND stzhl = ' ' AND stokz <> 'X'.

  IF sy-subrc = 0.
    lv_check = 'N'.
  ENDIF.


ENDFORM.                    "CHECK7_SUBC
* End of insert MOd-002

* Begin of insert MOD-005
************************************************************************
* Check difference Net Value / Actual costs
************************************************************************
FORM check8_profit  USING lv_ordnr TYPE aufnr
                          lv_kdauf TYPE kdauf
                          lv_perc TYPE i
                          lv_ctamflag TYPE c
                   CHANGING lv_check TYPE c.

  DATA: lv_salord TYPE vbeln,
        lv_quot TYPE vbeln,
        lv_netwr TYPE netwr.

* retrieve order net value
  IF lv_ctamflag = 'Y'.
    SELECT SINGLE vbeln FROM vbak INTO lv_quot
      WHERE aufnr = lv_ordnr AND
            vbtyp = 'B'.
    IF sy-subrc = 0.
      SELECT SINGLE vbeln FROM vbfa INTO lv_salord
        WHERE vbelv = lv_quot AND
              posnv = 0 AND
              vbtyp_n = 'L'.
      IF sy-subrc = 0.
        SELECT SINGLE netwr FROM vbak INTO lv_netwr
        WHERE vbeln = lv_salord.
      ENDIF.
    ENDIF.

  ELSE.
    lv_salord = lv_kdauf.
    SELECT SINGLE netwr FROM vbak INTO lv_netwr
      WHERE vbeln = lv_salord.
  ENDIF.


  CONSTANTS :   c_currency  TYPE waerk   VALUE 'EUR'.      "Message typ
  DATA: ls_rihaufk TYPE rihaufk,
        lt_rihaufk TYPE STANDARD TABLE OF rihaufk,
        lt_list_pmco TYPE STANDARD TABLE OF pmco_ext,
        ls_list_pmco TYPE pmco_ext,
        lv_total_min TYPE wertv8,
        lv_total_max TYPE wertv8,
        lv_total_20 TYPE wertv8,
        lv_profit TYPE i.


  CONCATENATE 'OR' lv_ordnr INTO ls_rihaufk-objnr.
  SELECT SINGLE waers FROM aufk INTO ls_rihaufk-waers
    WHERE aufnr = lv_ordnr.
  MOVE: lv_ordnr TO ls_rihaufk-aufnr.

  APPEND ls_rihaufk TO lt_rihaufk.

* get planned & actual costs for order
*  CALL FUNCTION 'PM_WORKORDER_COSTS_LIST'
*     EXPORTING
*        pmco_detail    = 'X'
*        list_currency  = c_currency
**            ALL_CURRENCIES = 'X'
*        external_call  = 'X'
*     TABLES
*        list_aufk      = lt_rihaufk
*        list_pmco      = lt_list_pmco
*     EXCEPTIONS
*        no_orders      = 1
*        no_currency    = 2
*        no_costs_found = 3
*        OTHERS         = 4.
*
*  IF  lt_list_pmco[] IS INITIAL.
    CALL FUNCTION 'PM_WORKORDER_COSTS_LIST'
      EXPORTING
         pmco_detail    = 'X'
         list_currency  = ls_rihaufk-waers
*            ALL_CURRENCIES = 'X'
         external_call  = 'X'
      TABLES
         list_aufk      = lt_rihaufk
         list_pmco      = lt_list_pmco
      EXCEPTIONS
         no_orders      = 1
         no_currency    = 2
         no_costs_found = 3
         OTHERS         = 4.
*  ENDIF.

  CLEAR lv_total_min.
  CLEAR lv_total_max.
  READ TABLE lt_list_pmco INTO ls_list_pmco INDEX 1.
  IF NOT lv_perc = 0.
    IF NOT ls_list_pmco IS INITIAL.

*      if ls_list_pmco-ikosten <> ls_list_pmco-pkosten.
*      lv_total_min = ls_list_pmco-ikosten - ( ls_list_pmco-ikosten * lv_perc / 100 ).
      lv_profit =  ( ( lv_netwr - ls_list_pmco-ikosten ) * 100 ) / lv_netwr.

*      IF lv_netwr < LV_TOTAL_MIN  or lv_netwr > lv_total_max.
      IF lv_profit < lv_perc.
        lv_check = 'N'.
      ENDIF.
*      endif.

    ENDIF.
  ENDIF.


ENDFORM.                    "CHECK8_PROFIT
* End of insert MOD-005
*&---------------------------------------------------------------------*
*&      Form  CHECK9_ACTCOST
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GT_SEO_AUFNR  text
*      -->P_LV_PERC  text
*      <--P_CHECK  text
*----------------------------------------------------------------------*
form CHECK9_ACTCOST   USING lv_ordnr TYPE aufnr
                            lv_perc TYPE i
                   CHANGING lv_check TYPE c.




  CONSTANTS :   c_currency  TYPE waerk   VALUE 'EUR'.      "Message typ
  DATA: ls_rihaufk TYPE rihaufk,
        lt_rihaufk TYPE STANDARD TABLE OF rihaufk,
        lt_list_pmco TYPE STANDARD TABLE OF pmco_ext,
        ls_list_pmco TYPE pmco_ext,
        lv_total TYPE wertv8,
        lv_total_20 TYPE wertv8.


  CONCATENATE 'OR' lv_ordnr INTO ls_rihaufk-objnr.
  SELECT SINGLE waers FROM aufk INTO ls_rihaufk-waers
    WHERE aufnr = lv_ordnr.
  MOVE: lv_ordnr TO ls_rihaufk-aufnr.

  APPEND ls_rihaufk TO lt_rihaufk.

* get planned & actual costs for order
*  CALL FUNCTION 'PM_WORKORDER_COSTS_LIST'
*     EXPORTING
*        pmco_detail    = 'X'
*        list_currency  = c_currency
**            ALL_CURRENCIES = 'X'
*        external_call  = 'X'
*     TABLES
*        list_aufk      = lt_rihaufk
*        list_pmco      = lt_list_pmco
*     EXCEPTIONS
*        no_orders      = 1
*        no_currency    = 2
*        no_costs_found = 3
*        OTHERS         = 4.
*
*  IF  lt_list_pmco[] IS INITIAL.
    CALL FUNCTION 'PM_WORKORDER_COSTS_LIST'
      EXPORTING
         pmco_detail    = 'X'
         list_currency  = ls_rihaufk-waers
*            ALL_CURRENCIES = 'X'
         external_call  = 'X'
      TABLES
         list_aufk      = lt_rihaufk
         list_pmco      = lt_list_pmco
      EXCEPTIONS
         no_orders      = 1
         no_currency    = 2
         no_costs_found = 3
         OTHERS         = 4.
*  ENDIF.


  READ TABLE lt_list_pmco INTO ls_list_pmco INDEX 1.
  IF NOT ls_list_pmco IS INITIAL.
* if  actual cost > limit... than it may not be closed
    lv_total = ls_list_pmco-ikosten.
    IF ABS( lv_total ) > lv_perc.
      lv_check = 'N'.
    ENDIF.
  ENDIF.


endform.                    " CHECK9_ACTCOST
