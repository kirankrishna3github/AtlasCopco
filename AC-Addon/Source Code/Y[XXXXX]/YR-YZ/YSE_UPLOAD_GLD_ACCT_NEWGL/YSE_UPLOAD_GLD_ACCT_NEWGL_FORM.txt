*&---------------------------------------------------------------------*
*&  Include           YSE_UPLOAD_GLD_ACCT_FORMS                        *
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  READ_FILE
*&---------------------------------------------------------------------*
FORM read_file.

  DATA : w_filename TYPE string.


  SELECT SINGLE * FROM usr01 WHERE bname = sy-uname.

  w_filename = p_fname.


  IF p_one = 'X'.

    CALL FUNCTION 'GUI_UPLOAD'
      EXPORTING
        filename                = w_filename
        filetype                = 'ASC'
        has_field_separator     = 'X'
      TABLES
        data_tab                = i_data1
      EXCEPTIONS
        file_open_error         = 1
        file_read_error         = 2
        no_batch                = 3
        gui_refuse_filetransfer = 4
        invalid_type            = 5
        no_authority            = 6
        unknown_error           = 7
        bad_data_format         = 8
        header_not_allowed      = 9
        separator_not_allowed   = 10
        header_too_long         = 11
        unknown_dp_error        = 12
        access_denied           = 13
        dp_out_of_memory        = 14
        disk_full               = 15
        dp_timeout              = 16
        OTHERS                  = 17.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

* Delete first row from file if user indicated that a header line is
* included
    IF p_header = 'X'.
      DELETE i_data1 INDEX 1.
    ENDIF.

    PERFORM copy_data.

  ELSE.

    CALL FUNCTION 'GUI_UPLOAD'
      EXPORTING
        filename                = w_filename
        filetype                = 'ASC'
        has_field_separator     = 'X'
      TABLES
        data_tab                = i_data
      EXCEPTIONS
        file_open_error         = 1
        file_read_error         = 2
        no_batch                = 3
        gui_refuse_filetransfer = 4
        invalid_type            = 5
        no_authority            = 6
        unknown_error           = 7
        bad_data_format         = 8
        header_not_allowed      = 9
        separator_not_allowed   = 10
        header_too_long         = 11
        unknown_dp_error        = 12
        access_denied           = 13
        dp_out_of_memory        = 14
        disk_full               = 15
        dp_timeout              = 16
        OTHERS                  = 17.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

* Delete first row from file if user indicated that a header line is
* included
    IF p_header = 'X'.
      DELETE i_data INDEX 1.
    ENDIF.
  ENDIF.

* Convert data if required
  IF p_point = 'X' AND usr01-dcpfm <> 'X'.
    PERFORM convert_into_comma.
  ELSEIF p_comma = 'X' AND usr01-dcpfm = 'X'.
    PERFORM convert_into_point.
  ENDIF.

  PERFORM change_date.

ENDFORM.                    " READ_FILE

*&---------------------------------------------------------------------*
*&      Form  CREATE_BATCH_INPUT
*&---------------------------------------------------------------------*
FORM create_batch_input .

* Data
  DATA:
    lv_callmode  TYPE c VALUE 'B',
    lv_cnt     TYPE i.
  DATA : gv_count   TYPE i,
       gv_index   TYPE i.

* Read parameter "ID: Calculate tax" into W_XTX
  GET PARAMETER ID 'XTX' FIELD w_xtx.

* Copy the data lines to a table with fewer fields to allow grouping
  i_header[] = i_data[].
* Begin of insertion MOD-003
*  Data declaration
  DATA: lv_idx TYPE sy-tabix.
  LOOP AT i_data.
    lv_idx = sy-tabix.
    READ TABLE i_header INDEX lv_idx.
    CLEAR: i_header-vatdate.
    MOVE i_data-vatdate TO i_header-vatdate.
    MODIFY i_header INDEX lv_idx TRANSPORTING vatdate.
    CLEAR: lv_idx.
  ENDLOOP.
* End of insertion MOD-003
  SORT i_header.
  DELETE ADJACENT DUPLICATES FROM i_header.
  DESCRIBE TABLE i_header LINES lv_cnt.
* Set call mode depending on number of document headers
*  IF lv_cnt GT 20.
  IF lv_cnt GT 50.
    lv_callmode = 'B'.  " create batch
    MESSAGE ID 'YSE_FICO' TYPE 'I' NUMBER 13.
  ELSE.
    lv_callmode = 'C'.  " direct input
  ENDIF.

* Initialize the header, item and session template working area's
  PERFORM init.

* Fill session header from template and update with current data
  PERFORM set_session_wa.

* Open file in which BDC input will be written
  w_file = 'BATCH_INPUT.TXT'.
  OPEN DATASET w_file FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.

* Write session header into file
  TRANSFER bgr00 TO w_file.

* Proccess the data
  LOOP AT i_header.

    PERFORM process_header.

  ENDLOOP.

* Close file in which BDC input is written
  CLOSE DATASET w_file.

* Take timestamp 1
  w_cretime1 = sy-uzeit.

* Have standard report creating the batch session
  SUBMIT rfbibl00
    WITH callmode = lv_callmode
    WITH ds_name  = w_file
*   WITH XLOG     = 'X'
    WITH xinf     = 'X'
    WITH pa_xprot = 'X'
  AND RETURN.

* Take timestamp 2
  w_cretime2 = sy-uzeit.

* Don't reprocess failed entries when batch session was created
  CHECK lv_callmode = 'C'.

* Find most recently created batch time
  SELECT SINGLE MAX( cretime ) INTO w_max
           FROM apqi
          WHERE credate EQ sy-datum
            AND creator EQ sy-uname
            AND groupid EQ p_sess.

* Read QID using the most recent batch time
  SELECT SINGLE qid INTO w_qid
           FROM apqi
          WHERE credate EQ sy-datum
            AND creator EQ sy-uname
            AND groupid EQ p_sess
            AND cretime EQ w_max
            AND cretime BETWEEN w_cretime1 AND w_cretime2.

* Following part is for covering the failed entries???

* If batch QID found
  IF sy-subrc = 0.

*   Get batch data definition
    SELECT * INTO TABLE it_apqd
      FROM apqd
      WHERE qid = w_qid.
    SORT it_apqd BY qid trans block segmt.

    lv_mode = 'N'.

*   Loop over the batch entries
    LOOP AT it_apqd.
      IF it_apqd-vardata+0(1) = 'S'.
        w_tcode = it_apqd-vardata+2(5).
      ENDIF.

      IF it_apqd-vardata+0(1) = 'M'.
        w_screen = it_apqd-vardata+22(20).
        w_dynpro = it_apqd-vardata+62(4).
        PERFORM bdc_dynpro USING w_screen w_dynpro.

        w_string = it_apqd-vardata+68.
        w_spliter = it_apqd-vardata+67(1).
        DO.
          FIND w_spliter IN w_string MATCH OFFSET w_off.
          IF sy-subrc <> 0.
            EXIT.
          ENDIF.
          IF w_off <> 0.
            w_var1 = w_string+0(w_off).
          ELSE.
            CLEAR w_var1.
          ENDIF.
          w_string = w_string+w_off.
          w_string = w_string+1.
          FIND w_spliter IN w_string MATCH OFFSET w_off.
          IF sy-subrc <> 0.
            w_var2 = w_string.
          ELSE.
            IF w_off <> 0.
              w_var2 = w_string+0(w_off).
            ELSE.
              CLEAR w_var2.
            ENDIF.
            w_string = w_string+w_off.
            w_string = w_string+1.
            IF w_var1 = 'BKPF-BKTXT'.
              w_bktxt = w_var2.
            ENDIF.
            IF w_var1 = 'BKPF-XBLNR'.
              w_xblnr = w_var2.
            ENDIF.
          ENDIF.
          PERFORM bdc_field USING w_var1 w_var2.
        ENDDO.
      ENDIF.

      AT END OF trans.

* extra popup on taxdate
        IF bbkpf-bukrs = 'MRUA' AND bbkpf-budat GT bbkpf-bldat.
          CLEAR gv_count.
          LOOP AT bdcdata.
            IF NOT bdcdata-program IS INITIAL.
              gv_count = gv_count + 1.
              IF gv_count = 2.
                gv_index = sy-tabix.
                EXIT.
              ENDIF.

            ENDIF.
          ENDLOOP.

          READ TABLE bdcdata INDEX gv_index.

          PERFORM fill_bdcdata IN PROGRAM yam_common_routines
             USING    'SAPLSPO4'  '0300'  'X'  ''  ''
             CHANGING struct_bdcdata.
          INSERT struct_bdcdata  INTO bdcdata INDEX gv_index.
          CLEAR  struct_bdcdata.
          gv_index = gv_index + 1.

          PERFORM fill_bdcdata IN PROGRAM yam_common_routines
            USING    ''  ''  ''  'SVALD-VALUE(01)'  '!'
            CHANGING struct_bdcdata.
          INSERT struct_bdcdata  INTO bdcdata INDEX gv_index.
          CLEAR  struct_bdcdata.
          gv_index = gv_index + 1.

          PERFORM fill_bdcdata IN PROGRAM yam_common_routines
             USING    ''  ''  ''  'BDC_OKCODE'  '=FURT'
             CHANGING struct_bdcdata.
          INSERT struct_bdcdata  INTO bdcdata INDEX gv_index.
          CLEAR  struct_bdcdata.

        ENDIF.

* check and eventually add screen for tax vendor
        IF lv_taxvendor = 'X'.
          PERFORM add_screen.
        ENDIF.

        CALL TRANSACTION w_tcode  USING bdcdata  MODE lv_mode
                           MESSAGES INTO messtab.
*If something went wrong sy-subrc will be different from zero!!
        IF sy-subrc NE 0.
*        READ TABLE MESSTAB WITH KEY MSGTYP = 'E'.
*        IF SY-SUBRC = 0.
          w_nline_e = w_nline_e + 1.
*        ENDIF.

*Try to get the error message, if not found, try to get the 'S' message
          LOOP AT messtab WHERE msgtyp = 'E'.
            CLEAR i_errors.
            MOVE w_bktxt TO i_errors-bktxt.
            MOVE w_xblnr TO i_errors-xblnr.
            CLEAR it_assign.
            READ TABLE it_assign WITH KEY bktxt = w_bktxt
                                          xblnr = w_xblnr.
            IF sy-subrc = 0.
              MOVE it_assign-zuonr TO i_errors-zuonr.
            ENDIF.
            MESSAGE ID messtab-msgid
                  TYPE messtab-msgtyp
                NUMBER messtab-msgnr
                WITH   messtab-msgv1
                       messtab-msgv2
                       messtab-msgv3
                       messtab-msgv4
                  INTO i_errors-message.
            APPEND i_errors.
          ENDLOOP.
          IF sy-subrc NE 0.
*The error was not found, so then try the first 'S' message
            LOOP AT messtab WHERE msgtyp = 'S' OR
                                  msgtyp = 'A'.
              CLEAR i_errors.
              MOVE w_bktxt TO i_errors-bktxt.
              MOVE w_xblnr TO i_errors-xblnr.
              CLEAR it_assign.
              READ TABLE it_assign WITH KEY bktxt = w_bktxt
                                            xblnr = w_xblnr.
              IF sy-subrc = 0.
                MOVE it_assign-zuonr TO i_errors-zuonr.
              ENDIF.
              MESSAGE ID messtab-msgid
                    TYPE messtab-msgtyp
                  NUMBER messtab-msgnr
                  WITH   messtab-msgv1
                         messtab-msgv2
                         messtab-msgv3
                         messtab-msgv4
                    INTO i_errors-message.
              APPEND i_errors.
            ENDLOOP.

          ENDIF.
        ENDIF.
        CLEAR bdcdata. REFRESH bdcdata.
        CLEAR messtab. REFRESH messtab.

      ENDAT.
    ENDLOOP.
  ENDIF.

  DESCRIBE TABLE i_header LINES w_nline_t.

  WRITE :/ w_nline_e , text-007 , w_nline_t, text-008.

  ULINE.

  LOOP AT i_errors.
    WRITE : /.
    WRITE : i_errors-bktxt , i_errors-xblnr,
            i_errors-zuonr , i_errors-message.
  ENDLOOP.


ENDFORM.                    " CREATE_BATCH_INPUT

*&---------------------------------------------------------------------*
*&      Form  CONVERT_INTO_COMMA
*&---------------------------------------------------------------------*
FORM convert_into_comma.

  LOOP AT i_data.
    REPLACE ALL OCCURRENCES OF '.' IN i_data-wrbtr WITH '/'.
    REPLACE ALL OCCURRENCES OF ',' IN i_data-wrbtr WITH '.'.
    REPLACE ALL OCCURRENCES OF '/' IN i_data-wrbtr WITH ','.
    REPLACE ALL OCCURRENCES OF '.' IN i_data-dmbtr WITH '/'.
    REPLACE ALL OCCURRENCES OF ',' IN i_data-dmbtr WITH '.'.
    REPLACE ALL OCCURRENCES OF '/' IN i_data-dmbtr WITH ','.
    REPLACE ALL OCCURRENCES OF '.' IN i_data-menge WITH '/'.
    REPLACE ALL OCCURRENCES OF ',' IN i_data-menge WITH '.'.
    REPLACE ALL OCCURRENCES OF '/' IN i_data-menge WITH ','.
    REPLACE ALL OCCURRENCES OF '.' IN i_data-wmwst WITH '/'.
    REPLACE ALL OCCURRENCES OF ',' IN i_data-wmwst WITH '.'.
    REPLACE ALL OCCURRENCES OF '/' IN i_data-wmwst WITH ','.
    MODIFY i_data INDEX sy-tabix.
  ENDLOOP.

ENDFORM.                    " CONVERT_INTO_COMMA
*&---------------------------------------------------------------------*
*&      FORM  CONVERT_INTO_POINT
*&---------------------------------------------------------------------*
FORM convert_into_point.

  LOOP AT i_data.
    REPLACE ALL OCCURRENCES OF ',' IN i_data-wrbtr WITH '/'.
    REPLACE ALL OCCURRENCES OF '.' IN i_data-wrbtr WITH ','.
    REPLACE ALL OCCURRENCES OF '/' IN i_data-wrbtr WITH '.'.
    REPLACE ALL OCCURRENCES OF ',' IN i_data-dmbtr WITH '/'.
    REPLACE ALL OCCURRENCES OF '.' IN i_data-dmbtr WITH ','.
    REPLACE ALL OCCURRENCES OF '/' IN i_data-dmbtr WITH '.'.
    REPLACE ALL OCCURRENCES OF ',' IN i_data-menge WITH '/'.
    REPLACE ALL OCCURRENCES OF '.' IN i_data-menge WITH ','.
    REPLACE ALL OCCURRENCES OF '/' IN i_data-menge WITH '.'.
    REPLACE ALL OCCURRENCES OF ',' IN i_data-wmwst WITH '/'.
    REPLACE ALL OCCURRENCES OF '.' IN i_data-wmwst WITH ','.
    REPLACE ALL OCCURRENCES OF '/' IN i_data-wmwst WITH '.'.
    MODIFY i_data INDEX sy-tabix.
  ENDLOOP.

ENDFORM.                    " CONVERT_INTO_POINT

*&---------------------------------------------------------------------*
*&      Form  CHANGE_DATE
*&---------------------------------------------------------------------*
FORM change_date.

  DATA : wl_date(8) TYPE c.

  LOOP AT i_data.

    CASE usr01-datfm.
      WHEN '1'.

        wl_date = i_data-bldat.
        i_data-bldat+0(2) = wl_date+6(2).
        i_data-bldat+2(2) = wl_date+4(2).
        i_data-bldat+4(4) = wl_date+0(4).

        wl_date = i_data-budat.
        i_data-budat+0(2) = wl_date+6(2).
        i_data-budat+2(2) = wl_date+4(2).
        i_data-budat+4(4) = wl_date+0(4).

        wl_date = i_data-stodt.
        i_data-stodt+0(2) = wl_date+6(2).
        i_data-stodt+2(2) = wl_date+4(2).
        i_data-stodt+4(4) = wl_date+0(4).

        wl_date = i_data-zfbdt.
        i_data-zfbdt+0(2) = wl_date+6(2).
        i_data-zfbdt+2(2) = wl_date+4(2).
        i_data-zfbdt+4(4) = wl_date+0(4).

* Begin of insertion MOD-003
        wl_date = i_data-vatdate.
        i_data-vatdate+0(2) = wl_date+6(2).
        i_data-vatdate+2(2) = wl_date+4(2).
        i_data-vatdate+4(4) = wl_date+0(4).
* End of insertion MOD-003

      WHEN '2' OR '3'.
        wl_date = i_data-bldat.
        i_data-bldat+0(2) = wl_date+4(2).
        i_data-bldat+2(2) = wl_date+6(2).
        i_data-bldat+4(4) = wl_date+0(4).

        wl_date = i_data-budat.
        i_data-budat+0(2) = wl_date+4(2).
        i_data-budat+2(2) = wl_date+6(2).
        i_data-budat+4(4) = wl_date+0(4).

        wl_date = i_data-stodt.
        i_data-stodt+0(2) = wl_date+4(2).
        i_data-stodt+2(2) = wl_date+6(2).
        i_data-stodt+4(4) = wl_date+0(4).

        wl_date = i_data-zfbdt.
        i_data-zfbdt+0(2) = wl_date+4(2).
        i_data-zfbdt+2(2) = wl_date+6(2).
        i_data-zfbdt+4(4) = wl_date+0(4).

* Begin of Insertion MOD-003
        wl_date = i_data-vatdate.
        i_data-vatdate+0(2) = wl_date+4(2).
        i_data-vatdate+2(2) = wl_date+6(2).
        i_data-vatdate+4(4) = wl_date+0(4).
* End of Insertion MOD-003

    ENDCASE.
    MODIFY i_data TRANSPORTING bldat budat stodt zfbdt
                                                 vatdate. "MOD-003
  ENDLOOP.

ENDFORM.                    " CHANGE_DATE

*&---------------------------------------------------------------------*
*&      Form  init
*&---------------------------------------------------------------------*
FORM init.

  DATA: idetails   TYPE abap_compdescr_tab,
        xdetails   TYPE abap_compdescr,
        structref  TYPE REF TO cl_abap_structdescr.

  FIELD-SYMBOLS: <fs_field> TYPE ANY.

*Session header
  CLEAR idetails[].
  structref ?= cl_abap_typedescr=>describe_by_name( 'BGR00' ).
  idetails[] = structref->components[].
  LOOP AT idetails INTO xdetails.
    ASSIGN COMPONENT xdetails-name OF STRUCTURE init_bgr00 TO <fs_field>.
    <fs_field> = '/'.
  ENDLOOP.
*Document header
  CLEAR idetails[].
  structref ?= cl_abap_typedescr=>describe_by_name( 'BBKPF' ).
  idetails[] = structref->components[].
  LOOP AT idetails INTO xdetails.
    ASSIGN COMPONENT xdetails-name OF STRUCTURE init_bbkpf TO <fs_field>.
    <fs_field> = '/'.
  ENDLOOP.
* Document item
  CLEAR idetails[].
  structref ?= cl_abap_typedescr=>describe_by_name( 'BBSEG' ).
  idetails[] = structref->components[].
  LOOP AT idetails INTO xdetails.
    IF xdetails-name = 'MEINS'.
      ASSIGN COMPONENT xdetails-name OF STRUCTURE init_bbseg TO <fs_field> CASTING TYPE c.
    ELSE.
      ASSIGN COMPONENT xdetails-name OF STRUCTURE init_bbseg TO <fs_field>.
    ENDIF.
    <fs_field> = '/'.
  ENDLOOP.



*  FIELD-SYMBOLS: <F>.

** Session header
*  INIT_BGR00-STYPE = '/'.
*  INIT_BGR00-GROUP = '/'.
*  INIT_BGR00-MANDT = '/'.
*  INIT_BGR00-USNAM = '/'.
*  INIT_BGR00-START = '/'.
*  INIT_BGR00-XKEEP = '/'.
*  INIT_BGR00-NODATA = '/'.
** Document header
*  INIT_BBKPF-STYPE = '/'.
*  INIT_BBKPF-TCODE = '/'.
*  INIT_BBKPF-BLDAT = '/'.
*  INIT_BBKPF-BLART = '/'.
*  INIT_BBKPF-BUKRS = '/'.
*  INIT_BBKPF-BUDAT = '/'.
*  INIT_BBKPF-MONAT = '/'.
*  INIT_BBKPF-WAERS = '/'.
*  INIT_BBKPF-KURSF = '/'.
*  INIT_BBKPF-BELNR = '/'.
*  INIT_BBKPF-WWERT = '/'.
*  INIT_BBKPF-XBLNR = '/'.
*  INIT_BBKPF-BVORG = '/'.
*  INIT_BBKPF-BKTXT = '/'.
*  INIT_BBKPF-PARGB = '/'.
*  INIT_BBKPF-AUGLV = '/'.
*  INIT_BBKPF-VBUND = '/'.
*  INIT_BBKPF-XMWST = '/'.
*  INIT_BBKPF-DOCID = '/'.
*  INIT_BBKPF-BARCD = '/'.
*  INIT_BBKPF-STODT = '/'.
*  INIT_BBKPF-BRNCH = '/'.
*  INIT_BBKPF-NUMPG = '/'.
*  INIT_BBKPF-STGRD = '/'.
*  INIT_BBKPF-KURSF_M = '/'.
*  INIT_BBKPF-AUGTX = '/'.
*  INIT_BBKPF-XPRFG = '/'.
*  INIT_BBKPF-XBWAE = '/'.
*  INIT_BBKPF-SENDE = '/'.
** Document item
*  INIT_BBSEG-STYPE = '/'.
*  INIT_BBSEG-TBNAM = '/'.
*  INIT_BBSEG-NEWBS = '/'.
*  INIT_BBSEG-DUMMYX = '/'.
*  INIT_BBSEG-NEWUM = '/'.
*  INIT_BBSEG-NEWBK = '/'.
*  INIT_BBSEG-WRBTR = '/'.
*  INIT_BBSEG-DMBTR = '/'.
*  INIT_BBSEG-WMWST = '/'.
*  INIT_BBSEG-MWSTS = '/'.
*  INIT_BBSEG-MWSKZ = '/'.
*  INIT_BBSEG-XSKRL = '/'.
*  INIT_BBSEG-FWZUZ = '/'.
*  INIT_BBSEG-HWZUZ = '/'.
*  INIT_BBSEG-GSBER = '/'.
*  INIT_BBSEG-KOSTL = '/'.
*  INIT_BBSEG-DUMMY4 = '/'.
*  INIT_BBSEG-AUFNR = '/'.
*  INIT_BBSEG-EBELN = '/'.
*  INIT_BBSEG-EBELP = '/'.
*  INIT_BBSEG-PROJN = '/'.
*  INIT_BBSEG-MATNR = '/'.
*  INIT_BBSEG-WERKS = '/'.
*  INIT_BBSEG-MENGE = '/'.
** INIT_BBSEG-MEINS = '/'.
*  ASSIGN INIT_BBSEG-MEINS TO <F> CASTING TYPE C.
*  <F> = '/'.
*  INIT_BBSEG-VBEL2 = '/'.
*  INIT_BBSEG-POSN2 = '/'.
*  INIT_BBSEG-ETEN2 = '/'.
*  INIT_BBSEG-PERNR = '/'.
*  INIT_BBSEG-BEWAR = '/'.
*  INIT_BBSEG-VALUT = '/'.
*  INIT_BBSEG-ZFBDT = '/'.
*  INIT_BBSEG-ZINKZ = '/'.
*  INIT_BBSEG-ZUONR = '/'.
*  INIT_BBSEG-FKONT = '/'.
*  INIT_BBSEG-XAABG = '/'.
*  INIT_BBSEG-SGTXT = '/'.
*  INIT_BBSEG-BLNKZ = '/'.
*  INIT_BBSEG-BLNBT = '/'.
*  INIT_BBSEG-BLNPZ = '/'.
*  INIT_BBSEG-MABER = '/'.
*  INIT_BBSEG-SKFBT = '/'.
*  INIT_BBSEG-WSKTO = '/'.
*  INIT_BBSEG-ZTERM = '/'.
*  INIT_BBSEG-ZBD1T = '/'.
*  INIT_BBSEG-ZBD1P = '/'.
*  INIT_BBSEG-ZBD2T = '/'.
*  INIT_BBSEG-ZBD2P = '/'.
*  INIT_BBSEG-ZBD3T = '/'.
*  INIT_BBSEG-ZLSPR = '/'.
*  INIT_BBSEG-REBZG = '/'.
*  INIT_BBSEG-REBZJ = '/'.
*  INIT_BBSEG-REBZZ = '/'.
*  INIT_BBSEG-ZLSCH = '/'.
*  INIT_BBSEG-SAMNR = '/'.
*  INIT_BBSEG-ZBFIX = '/'.
*  INIT_BBSEG-QSSKZ = '/'.
*  INIT_BBSEG-QSSHB ='/'.
*  INIT_BBSEG-QSFBT ='/'.
*  INIT_BBSEG-ESRNR ='/'.
*  INIT_BBSEG-ESRPZ ='/'.
*  INIT_BBSEG-ESRRE ='/'.
*  INIT_BBSEG-FDTAG ='/'.
*  INIT_BBSEG-FDLEV ='/'.
*  INIT_BBSEG-ANLN1 ='/'.
*  INIT_BBSEG-ANLN2 ='/'.
*  INIT_BBSEG-BZDAT ='/'.
*  INIT_BBSEG-ANBWA ='/'.
*  INIT_BBSEG-ABPER ='/'.
*  INIT_BBSEG-GBETR ='/'.
*  INIT_BBSEG-KURSR ='/'.
*  INIT_BBSEG-MANSP ='/'.
*  INIT_BBSEG-MSCHL ='/'.
*  INIT_BBSEG-HBKID ='/'.
*  INIT_BBSEG-BVTYP ='/'.
*  INIT_BBSEG-ANFBN ='/'.
*  INIT_BBSEG-ANFBU ='/'.
*  INIT_BBSEG-ANFBJ ='/'.
*  INIT_BBSEG-LZBKZ ='/'.
*  INIT_BBSEG-LANDL ='/'.
*  INIT_BBSEG-DIEKZ ='/'.
*  INIT_BBSEG-ZOLLD ='/'.
*  INIT_BBSEG-ZOLLT ='/'.
*  INIT_BBSEG-VRSDT ='/'.
*  INIT_BBSEG-VRSKZ ='/'.
*  INIT_BBSEG-HZUON ='/'.
*  INIT_BBSEG-REGUL ='/'.
*  INIT_BBSEG-NAME1 ='/'.
*  INIT_BBSEG-NAME2 ='/'.
*  INIT_BBSEG-NAME3 ='/'.
*  INIT_BBSEG-NAME4 ='/'.
*  INIT_BBSEG-STRAS ='/'.
*  INIT_BBSEG-ORT01 ='/'.
*  INIT_BBSEG-PSTLZ ='/'.
*  INIT_BBSEG-LAND1 ='/'.
*  INIT_BBSEG-REGIO ='/'.
*  INIT_BBSEG-BANKL ='/'.
*  INIT_BBSEG-BANKS ='/'.
*  INIT_BBSEG-BANKN ='/'.
*  INIT_BBSEG-BKONT ='/'.
*  INIT_BBSEG-STCD1 ='/'.
*  INIT_BBSEG-STCD2 ='/'.
*  INIT_BBSEG-MADAT ='/'.
*  INIT_BBSEG-MANST ='/'.
*  INIT_BBSEG-EGMLD ='/'.
*  INIT_BBSEG-DUMMY2 ='/'.
*  INIT_BBSEG-STCEG ='/'.
*  INIT_BBSEG-STKZA ='/'.
*  INIT_BBSEG-STKZU ='/'.
*  INIT_BBSEG-PFACH ='/'.
*  INIT_BBSEG-PSTL2 ='/'.
*  INIT_BBSEG-SPRAS ='/'.
*  INIT_BBSEG-XINVE ='/'.
*  INIT_BBSEG-NEWKO ='/'.
*  INIT_BBSEG-NEWBW ='/'.
*  INIT_BBSEG-KNRZE ='/'.
*  INIT_BBSEG-HKONT ='/'.
*  INIT_BBSEG-PRCTR ='/'.
*  INIT_BBSEG-VERTN ='/'.
*  INIT_BBSEG-VERTT = '/'.
*  INIT_BBSEG-VBEWA ='/'.
*  INIT_BBSEG-HWBAS ='/'.
*  INIT_BBSEG-FWBAS ='/'.
*  INIT_BBSEG-FIPOS ='/'.
*  INIT_BBSEG-VNAME ='/'.
*  INIT_BBSEG-EGRUP ='/'.
*  INIT_BBSEG-BTYPE ='/'.
*  INIT_BBSEG-PAOBJNR ='/'.
*  INIT_BBSEG-KSTRG ='/'.
*  INIT_BBSEG-IMKEY ='/'.
*  INIT_BBSEG-DUMMY3 ='/'.
*  INIT_BBSEG-VPTNR ='/'.
*  INIT_BBSEG-NPLNR ='/'.
*  INIT_BBSEG-VORNR ='/'.
*  INIT_BBSEG-XEGDR ='/'.
*  INIT_BBSEG-RECID ='/'.
*  INIT_BBSEG-PPRCT ='/'.
*  INIT_BBSEG-PROJK ='/'.
*  INIT_BBSEG-UZAWE ='/'.
*  INIT_BBSEG-TXJCD ='/'.
*  INIT_BBSEG-FISTL ='/'.
*  INIT_BBSEG-GEBER ='/'.
*  INIT_BBSEG-DMBE2 ='/'.
*  INIT_BBSEG-DMBE3 ='/'.
*  INIT_BBSEG-PARGB ='/'.
*  INIT_BBSEG-XREF1 ='/'.
*  INIT_BBSEG-XREF2 ='/'.
*  INIT_BBSEG-KBLNR ='/'.
*  INIT_BBSEG-KBLPOS ='/'.
*  INIT_BBSEG-WDATE ='/'.
*  INIT_BBSEG-WGBKZ ='/'.
*  INIT_BBSEG-XAKTZ ='/'.
*  INIT_BBSEG-WNAME ='/'.
*  INIT_BBSEG-WORT1 ='/'.
*  INIT_BBSEG-WBZOG ='/'.
*  INIT_BBSEG-WORT2 ='/'.
*  INIT_BBSEG-WBANK ='/'.
*  INIT_BBSEG-WLZBP ='/'.
*  INIT_BBSEG-DISKP ='/'.
*  INIT_BBSEG-DISKT ='/'.
*  INIT_BBSEG-WINFW ='/'.
*  INIT_BBSEG-WINHW ='/'.
*  INIT_BBSEG-WEVWV ='/'.
*  INIT_BBSEG-WSTAT ='/'.
*  INIT_BBSEG-WMWKZ ='/'.
*  INIT_BBSEG-WSTKZ ='/'.
*  INIT_BBSEG-RKE_ARTNR ='/'.
*  INIT_BBSEG-RKE_BONUS ='/'.
*  INIT_BBSEG-RKE_BRSCH ='/'.
*  INIT_BBSEG-RKE_BUKRS ='/'.
*  INIT_BBSEG-RKE_BZIRK ='/'.
*  INIT_BBSEG-RKE_EFORM ='/'.
*  INIT_BBSEG-RKE_FKART ='/'.
*  INIT_BBSEG-RKE_GEBIE ='/'.
*  INIT_BBSEG-RKE_GSBER ='/'.
*  INIT_BBSEG-RKE_KAUFN ='/'.
*  INIT_BBSEG-RKE_KDGRP ='/'.
*  INIT_BBSEG-RKE_KDPOS ='/'.
*  INIT_BBSEG-RKE_KNDNR ='/'.
*  INIT_BBSEG-RKE_KOKRS ='/'.
*  INIT_BBSEG-RKE_KSTRG ='/'.
*  INIT_BBSEG-RKE_LAND1 ='/'.
*  INIT_BBSEG-RKE_MAABC ='/'.
*  INIT_BBSEG-RKE_MATKL ='/'.
*  INIT_BBSEG-RKE_PRCTR ='/'.
*  INIT_BBSEG-RKE_PSPNR = '/'.
*  INIT_BBSEG-RKE_RKAUFNR ='/'.
*  INIT_BBSEG-RKE_SPART ='/'.
*  INIT_BBSEG-RKE_VKBUR ='/'.
*  INIT_BBSEG-RKE_VKGRP ='/'.
*  INIT_BBSEG-RKE_VKORG ='/'.
*  INIT_BBSEG-RKE_VTWEG ='/'.
*  INIT_BBSEG-RKE_WERKS ='/'.
*  INIT_BBSEG-RKE_KMBRND ='/'.
*  INIT_BBSEG-RKE_KMCATG ='/'.
*  INIT_BBSEG-RKE_KMHI01 ='/'.
*  INIT_BBSEG-RKE_KMHI02 ='/'.
*  INIT_BBSEG-RKE_KMHI03 ='/'.
*  INIT_BBSEG-RKE_KMKDGR ='/'.
*  INIT_BBSEG-RKE_KMLAND ='/'.
*  INIT_BBSEG-RKE_KMMAKL ='/'.
*  INIT_BBSEG-RKE_KMNIEL ='/'.
*  INIT_BBSEG-RKE_KMSTGE ='/'.
*  INIT_BBSEG-RKE_KMVKBU ='/'.
*  INIT_BBSEG-RKE_KMVKGR ='/'.
*  INIT_BBSEG-RKE_KMVTNR ='/'.
*  INIT_BBSEG-RKE_PPRCTR ='/'.
*  INIT_BBSEG-RKE_AUART = '/'.
*  INIT_BBSEG-RKE_EQUNR ='/'.
*  INIT_BBSEG-RKE_BEMOT ='/'.
*  INIT_BBSEG-RKE_WW001 ='/'.
*  INIT_BBSEG-RKE_WW002 ='/'.
*  INIT_BBSEG-RKE_PRODH ='/'.
*  INIT_BBSEG-RKE_WW003 ='/'.
*  INIT_BBSEG-RKE_WW004 ='/'.
*  INIT_BBSEG-RKE_WW005 ='/'.
*  INIT_BBSEG-RKE_WW006 ='/'.
*  INIT_BBSEG-RKE_WW007 ='/'.
*  INIT_BBSEG-RKE_KTGRD ='/'.
*  INIT_BBSEG-RKE_KUNWE ='/'.
*  INIT_BBSEG-RKE_VRTNR ='/'.
*  INIT_BBSEG-RKE_WW008 ='/'.
*  INIT_BBSEG-RKE_WW009 ='/'.
*  INIT_BBSEG-VBUND ='/'.
*  INIT_BBSEG-FKBER ='/'.
*  INIT_BBSEG-DABRZ ='/'.
*  INIT_BBSEG-XSTBA ='/'.
*  INIT_BBSEG-RSTGR ='/'.
*  INIT_BBSEG-FIPEX =  '/'.
*  INIT_BBSEG-XNEGP ='/'.
*  INIT_BBSEG-GRICD ='/'.
*  INIT_BBSEG-GRIRG ='/'.
*  INIT_BBSEG-GITYP ='/'.
*  INIT_BBSEG-FITYP ='/'.
*  INIT_BBSEG-STCDT ='/'.
*  INIT_BBSEG-STKZN ='/'.
*  INIT_BBSEG-STCD3 ='/'.
*  INIT_BBSEG-STCD4 ='/'.
*  INIT_BBSEG-XREF3 ='/'.
*  INIT_BBSEG-KIDNO ='/'.
*  INIT_BBSEG-DTWS1 ='/'.
*  INIT_BBSEG-DTWS2 ='/'.
*  INIT_BBSEG-DTWS3 ='/'.
*  INIT_BBSEG-DTWS4 ='/'.
*  INIT_BBSEG-DTAWS ='/'.
*  INIT_BBSEG-PYCUR ='/'.
*  INIT_BBSEG-PYAMT ='/'.
*  INIT_BBSEG-BUPLA ='/'.
*  INIT_BBSEG-SECCO ='/'.
*  INIT_BBSEG-LSTAR ='/'.
*  INIT_BBSEG-EGDEB ='/'.
*  INIT_BBSEG-WENR = '/'.
*  INIT_BBSEG-GENR ='/'.
*  INIT_BBSEG-GRNR ='/'.
*  INIT_BBSEG-MENR ='/'.
*  INIT_BBSEG-MIVE ='/'.
*  INIT_BBSEG-NKSL ='/'.
*  INIT_BBSEG-EMPSL ='/'.
*  INIT_BBSEG-SVWNR ='/'.
*  INIT_BBSEG-SBERI ='/'.
*  INIT_BBSEG-KKBER ='/'.
*  INIT_BBSEG-EMPFB ='/'.
*  INIT_BBSEG-KURSR_M ='/'.
*  INIT_BBSEG-J_1KFREPRE ='/'.
*  INIT_BBSEG-J_1KFTBUS ='/'.
*  INIT_BBSEG-J_1KFTIND ='/'.
*  INIT_BBSEG-IDXSP ='/'.
*  INIT_BBSEG-ANRED ='/'.
*  INIT_BBSEG-RECNNR ='/'.
*  INIT_BBSEG-E_MIVE ='/'.
*  INIT_BBSEG-BKREF ='/'.
*  INIT_BBSEG-DTAMS ='/'.
*  INIT_BBSEG-CESSION_KZ ='/'.
*  INIT_BBSEG-GRANT_NBR ='/'.
*  INIT_BBSEG-FKBER_LONG ='/'.
*  INIT_BBSEG-ERLKZ ='/'.
*  INIT_BBSEG-IBAN ='/'.
*  INIT_BBSEG-VALID_FROM ='/'.
*  INIT_BBSEG-SENDE ='/'.

ENDFORM.                    "INIT

*&---------------------------------------------------------------------*
*&      Form  BDC_DYNPRO
*&---------------------------------------------------------------------*
*       Start new screen
*----------------------------------------------------------------------*
FORM bdc_dynpro USING program dynpro.
  CLEAR bdcdata.
  bdcdata-program  = program.
  bdcdata-dynpro   = dynpro.
  bdcdata-dynbegin = 'X'.
  APPEND bdcdata.
ENDFORM.                    "bdc_dynpro
*&---------------------------------------------------------------------*
*&      Form  BDC_FIELD
*&---------------------------------------------------------------------*
*       Insert field
*----------------------------------------------------------------------*
FORM bdc_field USING fnam fval.
  IF fval <> '/'.
    CLEAR bdcdata.
    bdcdata-fnam = fnam.
    bdcdata-fval = fval.
    APPEND bdcdata.
  ENDIF.
ENDFORM.                    "BDC_FIELD

*&---------------------------------------------------------------------*
*&      Form  PROCESS_HEADER
*&---------------------------------------------------------------------*
FORM process_header .

  DATA: lv_wmwst   TYPE xfeld.                    "MOD-002

* Begin of Insertion MOD-003
  CONSTANTS: lc_pola TYPE char4 VALUE 'POLA'.
* End of Insertion MOD-003

  CLEAR lv_taxvendor.
* Fill header wa with initial data
  bbkpf = init_bbkpf.
* Update specifics in the header
  bbkpf-stype = '1'.
  IF i_header-stgrd IS INITIAL.
    bbkpf-tcode = 'FB01'.
  ELSE.
    bbkpf-tcode = 'FBS1'.
  ENDIF.
  IF NOT i_header-bldat IS INITIAL.
    bbkpf-bldat = i_header-bldat.
  ENDIF.
  IF NOT i_header-blart IS INITIAL.
    bbkpf-blart = i_header-blart.
  ENDIF.
  IF NOT i_header-bukrs IS INITIAL.
    bbkpf-bukrs = i_header-bukrs.
  ENDIF.
  IF NOT i_header-budat IS INITIAL.
    bbkpf-budat = i_header-budat.
    bbkpf-monat = i_header-budat+2(2).
  ENDIF.
  IF NOT i_header-waers IS INITIAL.
    bbkpf-waers = i_header-waers.
  ENDIF.
  IF NOT i_header-xblnr IS INITIAL.
    bbkpf-xblnr = i_header-xblnr.
  ENDIF.
* begin of insertion MJ 20091117
  IF NOT i_header-xref1_hd IS INITIAL.
    bbkpf-xref1_hd = i_header-xref1_hd.
  ENDIF.
  IF NOT i_header-xref2_hd IS INITIAL.
    bbkpf-xref2_hd = i_header-xref2_hd.
  ENDIF.
  DATA : gv_href1 TYPE xref1_hd,
         gv_href2 TYPE xref2_hd.
  gv_href1 = bbkpf-xref1_hd.
  gv_href2 = bbkpf-xref2_hd.
  EXPORT gv_href1 gv_href2 TO MEMORY ID 'YSE_CR1138'.
* end of insertion MJ 20091117
  IF NOT i_header-bktxt IS INITIAL.
    bbkpf-bktxt = i_header-bktxt.
  ENDIF.
* Begin of Insertion MOD-003
  IF NOT i_header-vatdate IS INITIAL
     AND NOT i_header-bukrs IS INITIAL
     AND i_header-bukrs = lc_pola.
    bbkpf-vatdate = i_header-vatdate.
  ENDIF.
* End of Insertion MOD-003

  CLEAR lv_wmwst.                                 "MOD-002
  IF bbkpf-blart = 'KR' OR bbkpf-blart = 'KG'
                        OR bbkpf-blart = 'DR'
                        OR bbkpf-blart = 'DG'
                        OR bbkpf-blart = 'ZA' " Inserted on request of M. Schaerlaeken
                        OR bbkpf-blart = 'ZF'. " Inserted on request of D. Cumps
    bbkpf-xmwst = 'X'.
  ENDIF.                                          "MOD-002
*  ELSE.                                          "MOD-002
* check xwmst on I_data
  LOOP AT i_data
  WHERE bldat = i_header-bldat
    AND blart = i_header-blart
    AND bukrs = i_header-bukrs
    AND budat = i_header-budat
    AND waers = i_header-waers
    AND xblnr = i_header-xblnr
* begin of insertion MJ 20091117
    AND xref1_hd = i_header-xref1_hd
    AND xref2_hd = i_header-xref2_hd
* end of insertion MJ 20091117
    AND bktxt = i_header-bktxt
    AND stgrd = i_header-stgrd
    AND stodt = i_header-stodt
    AND vatdate = i_header-vatdate. "+MOD-003
    IF i_data-xmwst = 'X'.
      bbkpf-xmwst = 'X'.
    ENDIF.
    IF NOT i_data-wmwst IS INITIAL.               "MOD-002
      lv_wmwst = 'X'.                             "MOD-002
    ENDIF.                                        "MOD-002
  ENDLOOP.
*  ENDIF.                                         "MOD-002

  IF lv_wmwst = 'X'.                              "MOD-002
    bbkpf-xmwst = '/'.                            "MOD-002
  ENDIF.                                          "MOD-002

  IF NOT i_header-stodt IS INITIAL.
    bbkpf-stodt = i_header-stodt.
  ENDIF.
  IF NOT i_header-stgrd IS INITIAL.
    bbkpf-stgrd = i_header-stgrd.
  ENDIF.
* begin of insertion MOD-005
  IF NOT i_header-ldgrp IS INITIAL.
    bbkpf-ldgrp = i_header-ldgrp.
  ENDIF.
* end of insertion MOD-005
* Write header to file (input for BDC)
  TRANSFER bbkpf TO w_file.

* Start processing the items
  LOOP AT i_data
    WHERE bldat = i_header-bldat
      AND blart = i_header-blart
      AND bukrs = i_header-bukrs
      AND budat = i_header-budat
      AND waers = i_header-waers
      AND xblnr = i_header-xblnr
* begin of insertion MJ 20091117
      AND xref1_hd = i_header-xref1_hd
      AND xref2_hd = i_header-xref2_hd
* end of insertion MJ 20091117
      AND bktxt = i_header-bktxt
      AND stgrd = i_header-stgrd
      AND stodt = i_header-stodt
* begin of insertion MOD-005
      AND ldgrp = i_header-ldgrp
* end of insertion MOD-005
      AND vatdate = i_header-vatdate. "+MOD-003

*   Fill item wa with initial data
    bbseg = init_bbseg.
*   Update specifics in the item
    bbseg-tbnam = 'BBSEG'.
    bbseg-stype = '2'.
    bbseg-tbnam = 'BBSEG'.
    IF NOT i_data-newbs IS INITIAL.
      bbseg-newbs = i_data-newbs.
    ENDIF.
    IF NOT i_data-newko IS INITIAL.
      bbseg-newko = i_data-newko.
    ENDIF.
    IF lv_taxvendor IS INITIAL.
      PERFORM read_lifnr  USING i_data-bukrs CHANGING i_data-newko lv_taxvendor.
    ENDIF.
* begin of insertion MJ 20091117
    IF NOT i_data-xref1 IS INITIAL.
      bbseg-xref1 = i_data-xref1.
    ENDIF.
    IF NOT i_data-xref2 IS INITIAL.
      bbseg-xref2 = i_data-xref2.
    ENDIF.
* end of insertion MJ 20091117
    IF NOT i_data-newbw IS INITIAL.
      bbseg-newbw = i_data-newbw.
    ENDIF.
    IF NOT i_data-wrbtr IS INITIAL.
      bbseg-wrbtr = i_data-wrbtr.
    ENDIF.
    IF NOT i_data-dmbtr IS INITIAL.
      bbseg-dmbtr = i_data-dmbtr.
    ENDIF.
    IF NOT i_data-mwskz IS INITIAL.
      bbseg-mwskz = i_data-mwskz.
    ENDIF.
    IF NOT i_data-menge IS INITIAL.
      bbseg-menge = i_data-menge.
    ENDIF.
    IF NOT i_data-zuonr IS INITIAL.
      bbseg-zuonr = i_data-zuonr.
*     Keep relation for error reporting
      it_assign-xblnr = i_data-xblnr.
      it_assign-bktxt = i_data-bktxt.
      it_assign-zuonr = i_data-zuonr.
      APPEND it_assign.
    ENDIF.
    IF NOT i_data-sgtxt IS INITIAL.
      bbseg-sgtxt = i_data-sgtxt.
    ENDIF.
    IF NOT i_data-kkber IS INITIAL.
      bbseg-kkber = i_data-kkber.
    ENDIF.
    IF NOT i_data-kostl IS INITIAL.
      bbseg-kostl = i_data-kostl.
    ENDIF.
    IF NOT i_data-prctr IS INITIAL.
      bbseg-prctr = i_data-prctr.
    ENDIF.
    IF NOT i_data-zterm IS INITIAL.
      bbseg-zterm = i_data-zterm.
    ENDIF.
    IF NOT i_data-zfbdt IS INITIAL.
      bbseg-zfbdt = i_data-zfbdt.
    ENDIF.
    IF NOT i_data-zlspr IS INITIAL.
      bbseg-zlspr = i_data-zlspr.
    ENDIF.
    IF NOT i_data-pernr IS INITIAL.
      bbseg-pernr = i_data-pernr.
    ENDIF.
    IF NOT i_data-c_kndnr IS INITIAL.
      bbseg-rke_kndnr = i_data-c_kndnr.
      bbseg-rke_bukrs = i_data-bukrs.
    ENDIF.
    IF NOT i_data-c_artnr IS INITIAL.
      bbseg-rke_artnr = i_data-c_artnr.
      bbseg-rke_bukrs = i_data-bukrs.
    ENDIF.
*    IF NOT I_DATA-C_VKORG IS INITIAL.
*      BBSEG-RKE_VKORG = I_DATA-C_VKORG.
*      BBSEG-RKE_BUKRS = I_DATA-BUKRS.
*    ENDIF.
*    IF NOT I_DATA-C_VTWEG IS INITIAL.
*      BBSEG-RKE_VTWEG = I_DATA-C_VTWEG.
*      BBSEG-RKE_BUKRS = I_DATA-BUKRS.
*    ENDIF.
*    IF NOT I_DATA-C_SPART IS INITIAL.
*      BBSEG-RKE_SPART = I_DATA-C_SPART.
*      BBSEG-RKE_BUKRS = I_DATA-BUKRS.
*    ENDIF.
    IF NOT i_data-c_prctr IS INITIAL.
      bbseg-rke_prctr = i_data-c_prctr.
      bbseg-rke_bukrs = i_data-bukrs.
    ENDIF.
    IF NOT i_data-c_ww006 IS INITIAL.
      bbseg-rke_ww006 = i_data-c_ww006.
      bbseg-rke_bukrs = i_data-bukrs.
    ENDIF.
    IF NOT i_data-c_ww007 IS INITIAL.
      bbseg-rke_ww007 = i_data-c_ww007.
      bbseg-rke_bukrs = i_data-bukrs.
    ENDIF.
* Begin of insert EXTUVE
    IF NOT i_data-c_ww008 IS INITIAL.
      bbseg-rke_ww008 = i_data-c_ww008.
    ENDIF.
* End of insert EXTUVE
*    IF NOT I_DATA-C_VKBUR IS INITIAL.
*      BBSEG-RKE_VKBUR = I_DATA-C_VKBUR.
*      BBSEG-RKE_BUKRS = I_DATA-BUKRS.
*    ENDIF.
*    IF NOT I_DATA-C_VRTNR IS INITIAL.
*      BBSEG-RKE_VRTNR = I_DATA-C_VRTNR.
*      BBSEG-RKE_BUKRS = I_DATA-BUKRS.
*    ENDIF.
    IF NOT i_data-c_equnr IS INITIAL.
      bbseg-rke_equnr = i_data-c_equnr.
      bbseg-rke_bukrs = i_data-bukrs.
    ENDIF.

*{Begin insert Raskin Kevin

    IF NOT i_data-c_ww002 IS INITIAL.
      bbseg-rke_ww002 = i_data-c_ww002.
    ENDIF.

    IF NOT i_data-c_spart IS INITIAL.
      bbseg-rke_spart = i_data-c_spart.
    ENDIF.

    IF NOT i_data-c_vtweg IS INITIAL.
      bbseg-rke_vtweg = i_data-c_vtweg.
    ENDIF.
    IF NOT i_data-c_ww009 IS INITIAL.
      bbseg-rke_ww009 = i_data-c_ww009.
    ENDIF.
    IF NOT i_data-c_ktgrd IS INITIAL.
      bbseg-rke_ktgrd = i_data-c_ktgrd.
    ENDIF.

*End insert Raskin Kevin}


*   Special GL indicator
    IF NOT i_data-c_newum IS INITIAL.
      bbseg-newum = i_data-c_newum.
    ENDIF.
*   Sales order number
    IF NOT i_data-c_vbel2 IS INITIAL.
      bbseg-vbel2 = i_data-c_vbel2.
    ENDIF.
*   Sales order item number
    IF NOT i_data-c_posn2 IS INITIAL.
      bbseg-posn2 = i_data-c_posn2.
    ENDIF.

*   Accounting indicator
    IF NOT i_data-c_ww003 IS INITIAL.
      bbseg-rke_ww003 = i_data-c_ww003.
    ENDIF.


*   Material
    IF NOT i_data-c_matnr IS INITIAL.
      bbseg-matnr = i_data-c_matnr.
    ENDIF.

*   Plant
    IF NOT i_data-c_werks IS INITIAL.
      bbseg-werks = i_data-c_werks.
    ENDIF.


*   Sales order
    IF NOT i_data-c_kaufn IS INITIAL.
      bbseg-rke_kaufn = i_data-c_kaufn.
    ENDIF.

*   Sales order
    IF NOT i_data-c_kdpos IS INITIAL.
      bbseg-rke_kdpos = i_data-c_kdpos.
    ENDIF.

* begin of insertion MOD-005
    IF NOT i_data-segment IS INITIAL.
      bbseg-segment = i_data-segment.
    ENDIF.
* end of insertion MOD-005
* begin of insertion MJ 20091130
    IF NOT i_data-wmwst IS INITIAL.
      bbseg-wmwst = i_data-wmwst.
    ENDIF.
* end of insertion MJ 20091130

*   Write item to file (input for BDC)
    TRANSFER bbseg TO w_file.

  ENDLOOP.

ENDFORM.                    " PROCESS_HEADER

*&---------------------------------------------------------------------*
*&      Form  SET_SESSION_WA
*&---------------------------------------------------------------------*
FORM set_session_wa .

  bgr00 = init_bgr00.
  bgr00-stype = '0'.
  bgr00-mandt = sy-mandt.
  bgr00-start = ''.
  bgr00-xkeep = 'X'.
  bgr00-nodata = '/'.
  bgr00-usnam = sy-uname.
  bgr00-group = p_sess.

ENDFORM.                    " SET_SESSION_WA

*&---------------------------------------------------------------------*
*&      Form  add_screen
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM add_screen.
* tax vendor ?

  IF NOT lv_taxvendor IS INITIAL.

    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    'SAPLYSE_J3RF_PDOC'  '0100'  'X'  ''  ''
       CHANGING struct_bdcdata.
    APPEND struct_bdcdata  TO bdcdata.
    CLEAR  struct_bdcdata.

    IF NOT i_data-j_3rf_kpp IS INITIAL.
      PERFORM fill_bdcdata IN PROGRAM yam_common_routines
         USING    ''  ''  ''  'J_3RF_PLAT-J_3RF_KPP'  i_data-j_3rf_kpp
         CHANGING struct_bdcdata.
      APPEND struct_bdcdata  TO bdcdata.
      CLEAR  struct_bdcdata.
    ENDIF.

    IF NOT i_data-j_3rf_104 IS INITIAL.
      PERFORM fill_bdcdata IN PROGRAM yam_common_routines
         USING    ''  ''  ''  'J_3RF_PLAT-J_3RF_104'  i_data-j_3rf_104
         CHANGING struct_bdcdata.
      APPEND struct_bdcdata  TO bdcdata.
      CLEAR  struct_bdcdata.
    ENDIF.

    IF NOT i_data-j_3rf_105 IS INITIAL.
      PERFORM fill_bdcdata IN PROGRAM yam_common_routines
         USING    ''  ''  ''  'J_3RF_PLAT-J_3RF_105'  i_data-j_3rf_105
         CHANGING struct_bdcdata.
      APPEND struct_bdcdata  TO bdcdata.
      CLEAR  struct_bdcdata.
    ENDIF.

    IF NOT i_data-j_3rf_106 IS INITIAL.
      PERFORM fill_bdcdata IN PROGRAM yam_common_routines
         USING    ''  ''  ''  'J_3RF_PLAT-J_3RF_106'  i_data-j_3rf_106
         CHANGING struct_bdcdata.
      APPEND struct_bdcdata  TO bdcdata.
      CLEAR  struct_bdcdata.
    ENDIF.

    IF NOT i_data-j_3rf_107 IS INITIAL.
      PERFORM fill_bdcdata IN PROGRAM yam_common_routines
         USING    ''  ''  ''  'J_3RF_PLAT-J_3RF_107'  i_data-j_3rf_107
         CHANGING struct_bdcdata.
      APPEND struct_bdcdata  TO bdcdata.
      CLEAR  struct_bdcdata.
    ENDIF.

    IF NOT i_data-j_3rf_108 IS INITIAL.
      PERFORM fill_bdcdata IN PROGRAM yam_common_routines
         USING    ''  ''  ''  'J_3RF_PLAT-J_3RF_108'  i_data-j_3rf_108
         CHANGING struct_bdcdata.
      APPEND struct_bdcdata  TO bdcdata.
      CLEAR  struct_bdcdata.
    ENDIF.

    IF NOT i_data-j_3rf_109 IS INITIAL.
      PERFORM fill_bdcdata IN PROGRAM yam_common_routines
         USING    ''  ''  ''  'J_3RF_PLAT-J_3RF_109'  i_data-j_3rf_109
         CHANGING struct_bdcdata.
      APPEND struct_bdcdata  TO bdcdata.
      CLEAR  struct_bdcdata.
    ENDIF.

    IF NOT i_data-j_3rfblart_p IS INITIAL.
      PERFORM fill_bdcdata IN PROGRAM yam_common_routines
         USING    ''  ''  ''  'J_3RF_PLAT-J_3RF_110'  i_data-j_3rfblart_p
         CHANGING struct_bdcdata.
      APPEND struct_bdcdata  TO bdcdata.
      CLEAR  struct_bdcdata.
    ENDIF.

    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BDC_OKCODE'  '=MSEL'
       CHANGING struct_bdcdata.
    APPEND struct_bdcdata  TO bdcdata.
    CLEAR  struct_bdcdata.
* ok
    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    'SAPLSPO1'  '0500'  'X'  ''  ''
       CHANGING struct_bdcdata.
    APPEND struct_bdcdata  TO bdcdata.
    CLEAR  struct_bdcdata.

    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BDC_OKCODE'  '=OPT1'
       CHANGING struct_bdcdata.
    APPEND struct_bdcdata  TO bdcdata.
    CLEAR  struct_bdcdata.

  ENDIF.

ENDFORM.                    "add_screen

*&---------------------------------------------------------------------*
*&      Form  read_lifnr
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_BUKRS    text
*      -->P_LIFNR    text
*      -->P_PRZN     text
*----------------------------------------------------------------------*
FORM read_lifnr  USING p_bukrs CHANGING p_lifnr p_przn.

  TABLES : thead.
  DATA: tname LIKE thead-tdname, num_line TYPE i.
  DATA: BEGIN OF line OCCURS 0.  "Text lines
          INCLUDE STRUCTURE tline.
  DATA: END OF line.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_lifnr
    IMPORTING
      output = p_lifnr.

  MOVE p_lifnr+7(10) TO tname.
  MOVE p_bukrs TO tname+10.
  CLEAR line.
  CALL FUNCTION 'READ_TEXT'          "read text
    EXPORTING
       id         =  'P101'
*         language   = 'R'
       language   =  sy-langu
       name       =  tname
       object     = 'LFB1'
    IMPORTING
       header     = thead
    TABLES
       lines      = line
    EXCEPTIONS OTHERS = 8.
  DESCRIBE TABLE line LINES num_line.   " line content
  IF num_line > 0.
    READ TABLE line INDEX 1.
    IF line-tdline <> space.
      p_przn = 'X'.
    ENDIF.
  ENDIF.

ENDFORM.                    "read_lifnr

*&---------------------------------------------------------------------*
*&      Form  copy_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM copy_data.

  REFRESH i_data.
  CLEAR i_data.

  LOOP AT i_data1.
    MOVE-CORRESPONDING i_data1 TO i_data.
    APPEND i_data.
    CLEAR i_data.
* part 2
    MOVE i_data1-bldatb TO i_data-bldat.
    MOVE i_data1-blartb TO i_data-blart.
    MOVE i_data1-bukrsb TO i_data-bukrs.
    MOVE i_data1-budatb TO i_data-budat.
    MOVE i_data1-waersb TO i_data-waers.
    MOVE i_data1-xblnrb TO i_data-xblnr.
    MOVE i_data1-xref1_hdb TO i_data-xref1_hd.
    MOVE i_data1-xref2_hdb TO i_data-xref2_hd.
    MOVE i_data1-bktxtb TO i_data-bktxt.
    MOVE i_data1-stgrdb TO i_data-stgrd.
    MOVE i_data1-stodtb TO i_data-stodt.
    MOVE i_data1-ldgrpb TO i_data-ldgrp.
    MOVE i_data1-newbsb TO i_data-newbs.
    MOVE i_data1-newkob TO i_data-newko.
    MOVE i_data1-xref1b TO i_data-xref1.
    MOVE i_data1-xref2b TO i_data-xref2.
    MOVE i_data1-newbwb TO i_data-newbw.
    MOVE i_data1-wrbtrb TO i_data-wrbtr.
    MOVE i_data1-dmbtrb TO i_data-dmbtr.
    MOVE i_data1-mwskzb TO i_data-mwskz.
    MOVE i_data1-xmwstb TO i_data-xmwst.
    MOVE i_data1-wmwstb TO i_data-wmwst.
    MOVE i_data1-ztermb TO i_data-zterm.
    MOVE i_data1-zfbdtb TO i_data-zfbdt.
    MOVE i_data1-zlsprb TO i_data-zlspr.
    MOVE i_data1-mengeb TO i_data-menge.
    MOVE i_data1-zuonrb TO i_data-zuonr.
    MOVE i_data1-sgtxtb TO i_data-sgtxt.
    MOVE i_data1-zeileb TO i_data-zeile.
    MOVE i_data1-kkberb TO i_data-kkber.
    MOVE i_data1-kostlb TO i_data-kostl.
    MOVE i_data1-pernrb TO i_data-pernr.
    MOVE i_data1-prctrb TO i_data-prctr.
    MOVE i_data1-char1b TO i_data-char1.
    MOVE i_data1-c_prctrb TO i_data-c_prctr.
    MOVE i_data1-c_ww006b TO i_data-c_ww006.
    MOVE i_data1-c_ww007b TO i_data-c_ww007.
    MOVE i_data1-c_ww008b TO i_data-c_ww008.
    MOVE i_data1-c_kndnrb TO i_data-c_kndnr.
    MOVE i_data1-c_artnrb TO i_data-c_artnr.
    MOVE i_data1-c_equnrb TO i_data-c_equnr.
    MOVE i_data1-c_ww002b TO i_data-c_ww002.
    MOVE i_data1-c_spartb TO i_data-c_spart.
    MOVE i_data1-c_vtwegb TO i_data-c_vtweg.
    MOVE i_data1-c_ww009b TO i_data-c_ww009.
    MOVE i_data1-c_ktgrdb TO i_data-c_ktgrd.
    MOVE i_data1-c_newumb TO i_data-c_newum.
    MOVE i_data1-c_vbel2b TO i_data-c_vbel2.
    MOVE i_data1-c_posn2b TO i_data-c_posn2.
    MOVE i_data1-c_ww003b  TO i_data-c_ww003.
    MOVE i_data1-c_matnrb  TO i_data-c_matnr.
    MOVE i_data1-c_werksb  TO i_data-c_werks.
    MOVE i_data1-c_kaufnb  TO i_data-c_kaufn.
    MOVE i_data1-c_kdposb  TO i_data-c_kdpos.
    MOVE i_data1-segmentb  TO i_data-segment.
* Begin of Insertion MOD-003
    MOVE i_data1-vatdate To i_data-vatdate.
* End of Insertion MOD-003
    MOVE i_data1-j_3rf_kppb  TO i_data-j_3rf_kpp.
    MOVE i_data1-j_3rf_104b  TO i_data-j_3rf_104.
    MOVE i_data1-j_3rf_105b  TO i_data-j_3rf_105.
    MOVE i_data1-j_3rf_106b  TO i_data-j_3rf_106.
    MOVE i_data1-j_3rf_107b  TO i_data-j_3rf_107.
    MOVE i_data1-j_3rf_108b  TO i_data-j_3rf_108.
    MOVE i_data1-j_3rf_109b  TO i_data-j_3rf_109.
    MOVE i_data1-j_3rfblart_pb  TO i_data-j_3rfblart_p.
    APPEND i_data.
    CLEAR i_data.
  ENDLOOP.

* delete empty lines
  LOOP AT i_data.
    IF i_data-blart IS INITIAL.
      DELETE i_data.
    ENDIF.
  ENDLOOP.

ENDFORM.                    "copy_data
