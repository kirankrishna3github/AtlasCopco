*&---------------------------------------------------------------------*
*&  Include           RF_PRD_OP_SCHED
*&---------------------------------------------------------------------*

* declarations for SCMA

* global data
DATA:
*      g_s_log            TYPE bal_s_log,
      g_log_handle       TYPE balloghndl,
*      g_dummy            TYPE c,
      g_scma             TYPE c,
      g_e_msg            TYPE  boolean.

* priority class
CONSTANTS:
  probclass_very_high TYPE bal_s_msg-probclass VALUE '1',
  probclass_high      TYPE bal_s_msg-probclass VALUE '2',
  probclass_medium    TYPE bal_s_msg-probclass VALUE '3',
  probclass_low       TYPE bal_s_msg-probclass VALUE '4',
  probclass_none      TYPE bal_s_msg-probclass VALUE ' '.

* message types
CONSTANTS:
  msgty_x             TYPE sy-msgty            VALUE 'X',
  msgty_a             TYPE sy-msgty            VALUE 'A',
  msgty_e             TYPE sy-msgty            VALUE 'E',
  msgty_w             TYPE sy-msgty            VALUE 'W',
  msgty_i             TYPE sy-msgty            VALUE 'I',
  msgty_s             TYPE sy-msgty            VALUE 'S',
  msgty_none          TYPE sy-msgty            VALUE ' '.

* DATA: t_spono LIKE schedman_spool .
* DATA: gt_spono LIKE t_spono OCCURS 0.

INCLUDE rkasmawf.   "necessary for Workflow


*&---------------------------------------------------------------------*
*&      Form  SCM_INIT
*&---------------------------------------------------------------------*
FORM scm_init.

  PERFORM schedman_check.
  IF NOT g_scma IS INITIAL.
    PERFORM log_almsg_init.
    PERFORM schedman_start_stop USING 'START'.
  ENDIF.

ENDFORM.                    "scm_init


*&---------------------------------------------------------------------*
*&      Form  SCM_CLOSE
*&---------------------------------------------------------------------*
FORM scm_close.

  IF NOT g_scma IS INITIAL.
    PERFORM log_almsg.
    PERFORM schedman_start_stop USING 'STOP'.
  ENDIF.

ENDFORM.                    "scm_close


*&---------------------------------------------------------------------*
*&      Form  SCHEDMAN_CHECK
*&---------------------------------------------------------------------*
FORM schedman_check.

  CALL FUNCTION 'FUNCTION_EXISTS'
    EXPORTING
      funcname           = 'SCMA_JOB_STARTED_FROM_SCMA'
    EXCEPTIONS
      function_not_exist = 1
      OTHERS             = 2.

  IF sy-subrc = 0.
    CALL FUNCTION 'SCMA_JOB_STARTED_FROM_SCMA'
      EXPORTING
        before_init = 'X'
      IMPORTING
        e_scma      = g_scma.
  ENDIF.

  g_scma = 'X'.

ENDFORM.                    "schedman_check


*&---------------------------------------------------------------------*
*&       FORM schedman_start_stop                                      *
*&---------------------------------------------------------------------*
FORM schedman_start_stop USING icommand TYPE c.

  STATICS: ls_key_static LIKE schedman_key.

*  DATA: gs_key      LIKE schedman_key.

*  DATA: ld_worklist_flag(1).
  DATA: ls_detail     LIKE schedman_detail_user.
  DATA: lt_selkrit    LIKE schedman_selkrit OCCURS 0 WITH HEADER LINE.
  DATA: lt_param      LIKE schedman_selkrit OCCURS 0 WITH HEADER LINE.
  DATA: ls_witem      LIKE scma_witem.
  DATA: ls_scma_event LIKE scma_event.
*  DATA: ls_ext        LIKE schedman_ext.
  DATA: ls_message    LIKE schedman_message,
*        ld_objects    LIKE smmain-nr_of_objects,
        ld_aplstat    LIKE smmain-aplstat.

  DATA: lt_log_handle TYPE  bal_t_logh.

  INCLUDE schedman_events.   " events for workflow

* muss in scmatasks
  ls_detail-repid       = sy-repid.
  ls_detail-variante    = sy-slset.
* ls_detail-activity    = '16'.
  ls_detail-application = 'FI-GL'.

* parameters
  DATA entry_no TYPE i.
  entry_no = 1.

  lt_param-entry     = entry_no.
  lt_param-sign      = 'I'.
  lt_param-optio     = 'EQ'.

  CLEAR lt_param.
  lt_param-structure = 'T001B'.
  lt_param-field     = 'BUKRS'.
  lt_param-low       = cocovar.
  lt_param-high      = cocovar.
  APPEND lt_param.
  ADD 1 TO entry_no.

  CLEAR lt_param.
  lt_param-structure = 'T001B'.
  lt_param-field     = 'TOYE1'.
  lt_param-low       = fyear.
  lt_param-high      = fyear.
  APPEND lt_param.
  ADD 1 TO entry_no.

  CLEAR lt_param.
  lt_param-structure = 'T001B'.
  lt_param-field     = 'FRPE1'.
  lt_param-low       = prd1_fr.
  lt_param-high      = prd1_fr.
  APPEND lt_param.
  ADD 1 TO entry_no.

  CLEAR lt_param.
  lt_param-structure = 'T001B'.
  lt_param-field     = 'TOPE1'.
  lt_param-low       = prd1_to.
  lt_param-high      = prd1_to.
  APPEND lt_param.
  ADD 1 TO entry_no.

  CLEAR lt_param.
  lt_param-structure = 'T001B'.
  lt_param-field     = 'FRPE2'.
  lt_param-low       = prd2_fr.
  lt_param-high      = prd2_fr.
  APPEND lt_param.
  ADD 1 TO entry_no.

  CLEAR lt_param.
  lt_param-structure = 'T001B'.
  lt_param-field     = 'TOPE2'.
  lt_param-low       = prd2_to.
  lt_param-high      = prd2_to.
  APPEND lt_param.
  ADD 1 TO entry_no.

  CLEAR lt_param.
  lt_param-structure = 'T001B'.
  lt_param-field     = 'MKOAR'.
  lt_param-low       = actyp.
  lt_param-high      = actyp.
  APPEND lt_param.
  ADD 1 TO entry_no.


  ls_witem-wf_witem = wf_witem.
  ls_witem-wf_wlist = wf_wlist.

  ls_scma_event-wf_witem = wf_witem.
  ls_scma_event-wf_okey  = wf_okey.

  IF g_e_msg = space.
    ls_scma_event-wf_event = cs_wf_events-finished.
  ELSE.
    ls_scma_event-wf_event = cs_wf_events-error.
  ENDIF.

  IF icommand = 'START'.

*    IF sy-uname = 'SOLTEK'.
*      DATA ld_tem TYPE i.
*      DO.
*        ADD 1 TO ld_tem.
*        SUBTRACT 1 FROM ld_tem.
*      ENDDO.
*    ENDIF.

    CALL FUNCTION 'KPEP_MONI_INIT_RECORD'
      EXPORTING
        ls_detail  = ls_detail
        ls_witem   = ls_witem
      IMPORTING
        ls_key     = ls_key_static
      TABLES
        lt_selkrit = lt_selkrit
        lt_param   = lt_param.

  ELSEIF icommand = 'STOP'.
    ld_aplstat  = '0'.
    IF g_e_msg = 'X'.
      ld_aplstat  = '4'.    "set status for schedman
      IF sy-batch = 'X'.
        MESSAGE s348(sy).
      ENDIF.
    ENDIF. "error occurred
    ls_message-log_handle = g_log_handle.

* save messages
    APPEND g_log_handle TO lt_log_handle.
    CALL FUNCTION 'BAL_DB_SAVE'
      EXPORTING
        i_save_all       = ' '
        i_t_log_handle   = lt_log_handle
      EXCEPTIONS
        log_not_found    = 1
        save_not_allowed = 2
        numbering_error  = 3
        OTHERS           = 4.

    IF sy-subrc = 2.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ELSEIF sy-subrc > 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

*    IF sy-uname = 'SOLTEK'.
**      DATA ld_tem TYPE i.
*      DO.
*        ADD 1 TO ld_tem.
*        SUBTRACT 1 FROM ld_tem.
*      ENDDO.
*    ENDIF.

    CALL FUNCTION 'KPEP_MONI_CLOSE_RECORD'
         EXPORTING
              ls_key        = ls_key_static
              ls_message    = ls_message
              ls_scma_event = ls_scma_event
         CHANGING
              ld_aplstat    = ld_aplstat
        EXCEPTIONS
*            NO_ID_GIVEN    = 1
             OTHERS         = 0.

  ENDIF.
  COMMIT WORK.

ENDFORM.                    "schedman_start_stop


*&--------------------------------------------------------------------*
*&      FORM LOG_ALMSG_init                                           *
*&--------------------------------------------------------------------*
FORM log_almsg_init.
  DATA: l_s_log TYPE bal_s_log.

  CLEAR l_s_log.
  l_s_log-aldate = sy-datlo.
  l_s_log-altime = sy-timlo.
  l_s_log-aluser = sy-uname.
  l_s_log-alprog = sy-repid.
  l_s_log-object = 'FASTCLOSE'.
  l_s_log-subobject = 'FASTCLOSE'.

  CALL FUNCTION 'BAL_LOG_CREATE'
    EXPORTING
      i_s_log                 = l_s_log
    IMPORTING
      e_log_handle            = g_log_handle
    EXCEPTIONS
      log_header_inconsistent = 1
      OTHERS                  = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    "LOG_ALMSG_init


*&---------------------------------------------------------------------*
*&       FORM log_almsg_var                                            *
*&---------------------------------------------------------------------*
FORM log_almsg_var  USING i_msgid
                          i_msgty
                          i_msgno
                          i_msgv1
                          i_msgv2
                          i_msgv3
                          i_msgv4.        "#EC *

  CHECK NOT g_scma IS INITIAL.


  sy-msgid = i_msgid.
  sy-msgty = i_msgty.
  sy-msgno = i_msgno.
  sy-msgv1 = i_msgv1.
  sy-msgv2 = i_msgv2.
  sy-msgv3 = i_msgv3.
  sy-msgv4 = i_msgv4.

  PERFORM log_almsg.

  CLEAR sy-msgid.
  CLEAR sy-msgty.
  CLEAR sy-msgno.
  CLEAR sy-msgv1.
  CLEAR sy-msgv2.
  CLEAR sy-msgv3.
  CLEAR sy-msgv4.

ENDFORM.                    "log_almsg_var


*&---------------------------------------------------------------------*
*&       FORM log_almsg                                                *
*&---------------------------------------------------------------------*
FORM log_almsg.

  DATA:  i_probclass TYPE bal_s_msg-probclass,
         l_s_msg     TYPE bal_s_msg.
* entry check
  CHECK sy-msgid NE space.

* define data of message for Application Log
  l_s_msg-msgty     = sy-msgty.
  l_s_msg-msgid     = sy-msgid.
  l_s_msg-msgno     = sy-msgno.
  l_s_msg-msgv1     = sy-msgv1.
  l_s_msg-msgv2     = sy-msgv2.
  l_s_msg-msgv3     = sy-msgv3.
  l_s_msg-msgv4     = sy-msgv4.

  CASE sy-msgty.
    WHEN msgty_x.
      i_probclass = probclass_very_high.  g_e_msg = 'X'.
    WHEN msgty_a.
      i_probclass = probclass_very_high.  g_e_msg = 'X'.
    WHEN msgty_e.
      i_probclass = probclass_high.       g_e_msg = 'X'.
    WHEN msgty_w.
      i_probclass = probclass_medium.
    WHEN msgty_i.
      i_probclass = probclass_low.
    WHEN msgty_s.
      i_probclass = probclass_low.
    WHEN msgty_none.
      i_probclass = probclass_none.
  ENDCASE.

* bis hier tempor#r
  l_s_msg-probclass = i_probclass.

* add this message to log file
  CALL FUNCTION 'BAL_LOG_MSG_ADD'
    EXPORTING
      i_log_handle              = g_log_handle
      i_s_msg                   = l_s_msg
*   IMPORTING
*     E_S_MSG_HANDLE            =
*     E_MSG_WAS_LOGGED          =
*     E_MSG_WAS_DISPLAYED       =
    EXCEPTIONS
      log_not_found             = 1
*     MSG_INCONSISTENT          = 2
*     LOG_IS_FULL               = 3
      OTHERS                    = 4.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    "LOG_almsg
