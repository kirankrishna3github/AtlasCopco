*&---------------------------------------------------------------------*
*& Report  YSE_LINK_NOTIF_FOLLOW_UP_DOCS                               *
*&                                                                     *
*&---------------------------------------------------------------------*
*&                                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*

REPORT  yse_link_notif_follow_up_docs.


********************************************************************
* Program ID           : YSE_LINK_NOTIF_FOLLOW_UP_DOCS					 *
* Program Title        : Change sales order created during notification creation     *
* Author               :   Andr¨¦ Blommaert                            			 *
* Date                 : 3.11.2006                               				 *
* Change Request Number: D257-CS-OTH-Copy equipm from service notific to sales order *
* Description         : The purpose of this program is to automatically assign the
*                        serial number related to the equipment nr of the originating
*                         notification                                               *
*                      periods or to extend the periods of all selected contracts    *
*==================================================================*
* Copied From         : (Cloned Program)                        		*
* Title               : (Program Title)                          		*
* Other Related obj   : (Object names)                 				*
*==================================================================*
* Change History Log                                             				*
*------------------------------------------------------------------*
* Mod. no.|  Date    | Name           | Correction Number  | Change Reference #	*
*------------------------------------------------------------------*
* MOD-001 |dd/mm/yyyy| xxxxxxxxxxxxxx | XXXXxxxxxx        |   XXXXxxxxxx      *
*                                                                		*
* Description:                                                   	*
*------------------------------------------------------------------*
* MOD-002 |dd/mm/yyyy| xxxxxxxxxxxxxx | XXXXxxxxxx               				*
*                                                                				*
* Description:                                                   	*
********************************************************************

*****************************
* TYPE-POOLS
****************************

TYPE-POOLS :tsdsm, imsmt.
.

*****************************
* TABLES
****************************
TABLES: viqmel.

*****************************
* DATA
****************************



DATA: lv_posnr LIKE vbap-posnr.
DATA: lv_equnr LIKE equi-equnr,
     lv_equi LIKE equi,
        lv_sernr LIKE itob-sernr,
        lv_vbap LIKE vbap,
        lv_tabix LIKE sy-tabix,

     lv_riwol1 TYPE  riwol1,
        lv_memory_id(16).

DATA : wa_ordpar_imp LIKE ordpar.
DATA : wa_ordpar_exp LIKE ordpar.
DATA: wa_vbadr LIKE vbadr.
DATA: wa_bzgsobj LIKE t399a-bzgsobj.
DATA: wa_svobj LIKE t399a-svobj.
DATA:  $ok LIKE sy-batch.

*****************************
* INTERNAL TABLES
****************************
DATA: it_riwol1 LIKE riwol1 OCCURS 0 WITH HEADER LINE.
DATA: it_viqmel LIKE viqmel OCCURS 0 WITH HEADER LINE.
DATA: it_aufk LIKE aufk OCCURS 0 WITH HEADER LINE.
DATA: it_vbak LIKE vbak OCCURS 0 WITH HEADER LINE.

DATA: it_vbap LIKE vbap OCCURS 0 WITH HEADER LINE.
DATA: it_methods LIKE bapi_alm_order_method OCCURS 0 WITH HEADER LINE,
      it_header LIKE bapi_alm_order_headers_i OCCURS 0 WITH HEADER LINE,
      it_header_up  LIKE bapi_alm_order_headers_up OCCURS 0 WITH HEADER LINE,
      it_return LIKE bapiret2 OCCURS 0 WITH HEADER LINE,
      it_return2 LIKE bapiret2 OCCURS 0 WITH HEADER LINE.
DATA: it_vbpa LIKE vbpa OCCURS 0 WITH HEADER LINE.
DATA: it_vbkd LIKE vbkd OCCURS 0 WITH HEADER LINE.
DATA: it_adrc LIKE adrc OCCURS 0 WITH HEADER LINE.

DATA: sdsm_interface TYPE  tsdsm_interface  .
DATA:  pm_ihpa            TYPE imsmt_pa,
        pm_adr             TYPE imsmt_adr.


*******************************
* CONSTANTS
****************************
CONSTANTS:
vkgru_rep_reparaturanfo LIKE vbap-vkgru VALUE 'I01',
     vkgru_dyn_posten        LIKE vbap-vkgru VALUE 'I02',
     vkgru_dyn_posten_ag     LIKE vbap-vkgru VALUE 'I03',
     vkgru_rep_retoure       LIKE vbap-vkgru VALUE '101',
     vkgru_rep_reparatur     LIKE vbap-vkgru VALUE '102',
     charx VALUE 'X',
      vbtyp_agan(2)  VALUE 'AB',                " Vorauftragsphase
quan_1        LIKE vbep-wmeng VALUE '1.000',
c_objnr LIKE caufvd-objnr VALUE '000010',
c_objid(2) TYPE c VALUE '01'.
.


*******************************
* SELECTION SCREEN
****************************

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.

SELECT-OPTIONS:s_qmnum FOR viqmel-qmnum.

SELECT-OPTIONS:s_ausvn FOR viqmel-ausvn.


SELECTION-SCREEN END OF BLOCK b1.


*********************************
* START-OF-SELECTION
****************************

START-OF-SELECTION.



* SELECT ALL SERVICE NOTIFICATIONS
* WITH DATE AND NOTIFICATION NR AS IN SSELECTION SCREEN
* AND WITH ASSIGNED SALES ORDER AND EQUIPMENT

  SELECT qmnum  equnr vbeln matnr  FROM viqmel
  INTO CORRESPONDING FIELDS OF TABLE it_viqmel
  WHERE qmnum IN s_qmnum
  AND ausvn IN s_ausvn
  AND qmart EQ 'Z1'    "REQUESTS FRO SERVICE

  AND NOT vbeln EQ space
  AND NOT equnr EQ space.

  IF sy-subrc NE 0.

    WRITE / 'No entries for this selection'.
    EXIT.
  ENDIF.

  SELECT aufnr  INTO CORRESPONDING FIELDS OF TABLE it_aufk
  FROM aufk
  FOR ALL ENTRIES IN it_viqmel

  WHERE
  autyp = '30'               "MAINTENANCE ORDERS
*  AND werks = it_viqmel-iwerk
 AND kdauf = it_viqmel-vbeln.

  SELECT *  INTO CORRESPONDING FIELDS OF TABLE it_vbak
   FROM vbak
   FOR ALL ENTRIES IN it_viqmel

   WHERE vbeln = it_viqmel-vbeln.


  SELECT *  INTO CORRESPONDING FIELDS OF TABLE it_vbap
  FROM vbap
  FOR ALL ENTRIES IN it_vbak

  WHERE vbeln = it_vbak-vbeln.

  SELECT *  INTO CORRESPONDING FIELDS OF TABLE it_vbpa
 FROM vbpa
 FOR ALL ENTRIES IN it_vbak

 WHERE vbeln = it_vbak-vbeln.

  SELECT *  INTO CORRESPONDING FIELDS OF TABLE it_vbkd
FROM vbkd
FOR ALL ENTRIES IN it_vbak

WHERE vbeln = it_vbak-vbeln.

  SELECT *  INTO CORRESPONDING FIELDS OF TABLE it_adrc
FROM adrc
FOR ALL ENTRIES IN it_vbpa

WHERE addrnumber = it_vbpa-adrnr.


  LOOP AT it_vbap.

    CLEAR: wa_ordpar_imp,sdsm_interface.
    .
*    MOVE-CORRESPONDING it_vbap TO wa_ordpar_imp.
*
    READ TABLE it_viqmel WITH KEY vbeln = it_vbap-vbeln.
******************
* FILL IN sdsm_interface
**********************
*Transfer structure for FM external order processing
****************************
*   nur bei Service
    MOVE it_vbap-posnr TO sdsm_interface-comdata-kdpos.
*   Reparaturabwicklung
    IF it_vbap-vkgru EQ vkgru_rep_reparaturanfo OR
       it_vbap-vkgru EQ vkgru_rep_reparatur.
      sdsm_interface-comdata-rma_kz = charx.
    ENDIF.

*     Partnerdaten-
    LOOP AT it_vbpa WHERE vbeln = it_vbap-vbeln AND
    ( posnr IS INITIAL OR
                        posnr = it_vbap-posnr ).
      APPEND it_vbpa TO sdsm_interface-partner.
      READ TABLE it_adrc WITH KEY addrnumber = it_vbpa-adrnr.
      CLEAR wa_vbadr.

      wa_vbadr-adrnr = it_adrc-addrnumber.
      wa_vbadr-name1 = it_adrc-name1.
      wa_vbadr-pstlz = it_adrc-post_code1.
      wa_vbadr-ort01 =  it_adrc-city1.
      wa_vbadr-stras =  it_adrc-street.


      APPEND wa_vbadr TO sdsm_interface-adress.

    ENDLOOP.

    SORT sdsm_interface-adress BY adrnr.
    DELETE ADJACENT DUPLICATES FROM sdsm_interface-adress COMPARING adrnr.
*     allgemeine SD-Daten
    READ TABLE it_vbak WITH KEY vbeln = it_vbap-vbeln.
    MOVE-CORRESPONDING it_vbak TO sdsm_interface-comdata.
    READ TABLE it_vbkd WITH KEY vbeln = it_vbap-vbeln
                               posnr = it_vbap-posnr..

    MOVE-CORRESPONDING it_vbkd TO sdsm_interface-comdata.
    MOVE-CORRESPONDING it_vbap TO sdsm_interface-comdata.
    MOVE it_vbap-vbeln TO sdsm_interface-comdata-kdauf.
    IF it_vbak-vbtyp CA vbtyp_agan.
      sdsm_interface-comdata-qflag = charx.
    ENDIF.
*     Fakturierform immer aus der Position mit Kostenrelevanz
    IF NOT it_vbap-posnv IS INITIAL    AND
           it_vbap-posnr NE it_vbap-posnv.
      PERFORM xvbkd_lesen_direkt(sapfv45k) USING it_vbap-posnv sy-tabix.
      IF sy-tabix NE 0.
        MOVE it_vbkd-faktf TO sdsm_interface-comdata-faktf.
        MOVE it_vbkd-ffprf TO sdsm_interface-comdata-ffprf.
      ENDIF.
    ENDIF.
    sdsm_interface-comdata-matrma = it_vbap-matnr.

    sdsm_interface-comdata-gamng = it_vbap-anzsn * quan_1.
    IF NOT sdsm_interface-comdata-gamng IS INITIAL.
      sdsm_interface-comdata-gmein = it_vbap-meins.
    ENDIF.

******************
* FILL IN ORDPAR_IMP
**********************

*Transfer structure for FM external order processing

    MOVE-CORRESPONDING it_vbak TO wa_ordpar_imp.

    MOVE-CORRESPONDING it_vbap TO wa_ordpar_imp.
    MOVE it_vbap-posnr TO  wa_ordpar_imp-vbelp.
    MOVE it_vbap-kwmeng TO wa_ordpar_imp-menge.
    MOVE it_vbap-kwmeng TO wa_ordpar_imp-menge_f.
    MOVE 1 TO wa_ordpar_imp-veten.
    MOVE sy-datum TO wa_ordpar_imp-gsbtr.
    MOVE it_vbap-werks TO wa_ordpar_imp-pwerk.
    MOVE 'C' TO wa_ordpar_imp-aplid.
    MOVE 'ZSM1' TO  wa_ordpar_imp-auart.
    MOVE 'H' TO wa_ordpar_imp-trtyp.
    MOVE 'BACK' TO wa_ordpar_imp-fcode.

    MOVE it_viqmel-equnr TO wa_bzgsobj.
    MOVE it_vbap-matnr TO wa_svobj.


* * Partner kopieren

    CALL FUNCTION 'PM_PARTNER_FROM_SD_FILTER'
      EXPORTING
        pargr     = 'SV'
        posnr     = wa_ordpar_imp-vbelp
        vbeln     = wa_ordpar_imp-vbeln
      TABLES
        xvbpa     = sdsm_interface-partner
        adrnr_imp = sdsm_interface-adress
        pm_ihpa   = pm_ihpa
        adrnr_exp = pm_adr.
    CHECK sy-subrc EQ 0.


* CREATE SERVICE ORDER

    CALL FUNCTION 'IM_SM_CREATE_ORDER'
      EXPORTING
        objnr                                = c_objnr
        iwerk                                = wa_ordpar_imp-pwerk  "xvbap[1]-WERKS VBAP WERKS
        svobj_id                             = c_objid
        svobj                                = wa_svobj   "VBAP-MATNR
       auart                                = wa_ordpar_imp-auart
*   CUOBJ                                =
        gstrp                                = wa_ordpar_imp-gsbtr "SY-DATUM
      gltrp                                = wa_ordpar_imp-gsbtr

       ktext                                = it_vbap-arktx
        bzgsobjtyp                           = '02'
       bzgsobj                              = wa_bzgsobj  " EQUIPMENT NR
*   BZGSERNR                             =
    DARK_CONFIGURATION                   = 'X'
*   PM_IHPA                              =
*   PM_ADR                               =
*   PM_OBJLIST                           =
*   PM_TEXT                              =
*   PM_PERMITS                           =
*   SDSM_COM_IMP                         =
       sdsm_interface                       = sdsm_interface "XVBAP XVBKD XVBPA
     ordpar_imp                           = wa_ordpar_imp "XVBAK XVBAP
     EXCEPTIONS
       no_t399a_entry                       = 1
      missing_t399a_data                   = 2
       task_list_not_found                  = 4
      create_error                         = 5
       configuration_error                  = 6
       no_configuration_number              = 7
       order_not_changeable                 = 8
       order_not_found                      = 9
       serialnumber_missing                 = 10
       object_not_found                     = 11
       unnecessary_configuration_data       = 12
       error_copy_configuration             = 13
       order_already_exists                 = 14
       object_not_allowed                   = 15
       internal_update_error                = 16
       wrong_object_type                    = 17
       refurbishment_not_allowed            = 18
       no_technical_object                  = 19
       temporary_object_not_found           = 20
       ilart_auart_wrong                    = 21
       ref_object_create_error              = 22
       incorrect_rma_customizing            = 23
       OTHERS                               = 24
              .

*    PERFORM sd_error_handling(limsmf02) USING 'CREATE' sy-subrc.

* SD-spezifische Daten merken
    PERFORM sd_save_data(saplimsm) USING c_objnr
                               pm_ihpa
                                 pm_adr
                               sdsm_interface-comdata
                               $ok.
    IF $ok IS INITIAL.
      MESSAGE e025(i3) .
    ENDIF.

* Abschlussarbeiten Auftrag

    wa_ordpar_exp =  wa_ordpar_imp.
    PERFORM sd_order_end_processing(saplimsm) USING c_objnr
      sdsm_interface-comdata-qflag wa_ordpar_imp wa_ordpar_exp.


*
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ELSE.

    CALL FUNCTION 'CO_ZV_ORDER_POST'
      EXPORTING
        COMMIT_FLAG                 = 'X'
        EXT_FLG                     = 'C'
*       FLG_ACT                     = ' '
*       FLG_NO_STAT                 = ' '
*       FLG_USER                    = ' '
*       FLG_WAIT                    = ' '
*       NETZPLAN                    = ' '
*       AUFNR_SINGLE                = ' '
*       PROCESS_AT_COMMIT           = ' '
*       PRSEL_IMP                   = ' '
*       T496D_MIX_IMP               = ' '
        trans_typ                   = 'H'
*       NO_GUI_MESSAGE              = ' '
*       FLG_REL_TRANS               = ' '
*       FLG_CALLED_FROM_PDC         = ' '
*       FLG_PROOF                   = ' '
*       REQ_EXISTS                  = 'X'
*       NO_DIALOG                   = ' '
*       FLG_NO_CLASSIFICATION       = ' '
*       FLG_NO_TEXT_PROCESS         = ' '
*       FLG_CHECK_ONLY              =
*       FLG_NO_PROOF                =
*       FLG_NO_SCHEDULING           = ' '
*       FLG_NO_CALCULATION          = ' '
*       FLG_PROJECT_VERSION         = 'X'
*       FLG_CALLER_CJ9K             = ' '
*       FLG_NO_BUDGET_CHECK         = ' '
*     IMPORTING
*       FIRST_AUFNR                 =
*       FIRST_AUTYP                 =
*       E_FLG_LVS_ERROR             =
*     TABLES
*       CAUFVD_NUM_EXP              =
*       OBJN_TAB_EXP                =
*     EXCEPTIONS
*       NO_CHANGE                   = 1
*       UPDATE_REJECT               = 2
*       BUDGET_REJECT               = 3
*       OTHERS                      = 4
              .
    IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.



      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*       EXPORTING
*         WAIT          =
*       IMPORTING
*         RETURN        =
                .

    ENDIF.



  ENDLOOP.



*
*
*
*    CALL FUNCTION 'SERIALNUMBER_READ'
*     EXPORTING
**   I_HANDLE                   =
**   I_LOCK                     =
*       equnr                      = it_viqmel-equnr
*   matnr                      = it_viqmel-matnr
**   SERNR                      =
**   READ_AS_EQUI               = ' '
**   CHECK_EQUI_EXIST           = 'X'
**   CHECK_AUTH                 = ' '
**   AKTYP                      = ' '
*     IMPORTING
*       equi                       = lv_equi
**   EQKT                       =
**   EQUZ                       =
**   ILOA                       =
**   EQBS                       =
**   FLEET                      =
**   EFHM                       =
**   EQUI_EXIST                 =
*     EXCEPTIONS
*       equi_not_found             = 1
*       authority_is_missing       = 2
*       err_handle                 = 3
*       lock_failure               = 4
*      OTHERS                     = 5
*              .
*    IF sy-subrc <> 0.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*    ELSE.
*
*      MOVE lv_equi-sernr TO lv_riwol1-sernr.
**      MOVE lv_equi-MATNR TO lv_riwol1-MATNR.
**   EQKT                       =
*
*
**    MOVE it_viqmel-serialnr TO lv_riwol1-sernr.
*      MOVE it_vbap-matnr   TO lv_riwol1-matnr.
*      APPEND lv_riwol1 TO it_riwol1.
*    ENDIF.
** ADD TECHNICAL OBJECT TO SALES ORDER ITEM
*
*    CALL FUNCTION 'IWOL_WV_ADD_OBJECTS'
*      EXPORTING
*        i_sdaufnr                 = it_vbap-vbeln
*        i_sdposnr                 = it_vbap-posnr
*        to_type                   = 'SD'
**   I_KUNDE                   =
**   I_VBTYP                   =
**   I_SD_AUART                =
**   I_POSTYP                  =
*      TABLES
*        t_riwol1                  = it_riwol1
**   T_SER02                   =
**   T_RIWOL                   =
*     EXCEPTIONS
*       no_object_list            = 1
*      entry_exists              = 2
*       invalid_material          = 3
*       invalid_serialnr          = 4
*       invalid_equipment         = 5
*      invalid_location          = 6
*      invalid_assembly          = 7
*       status_not_allowed        = 8
*       equi_foreign_key          = 9
*       equi_system_failure       = 10
*       customer_exit_error       = 11
*       OTHERS                    = 12
*              .
*    IF sy-subrc <> 0.
*      CONTINUE.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*    ELSE.
*
*      CALL FUNCTION 'IWOL_WV_POST_OBJECT_LIST'
*       EXPORTING
*         i_sdaufnr            = it_viqmel-vbeln
*
**              I_SDPOSNR            =
**            TABLES
**              I_SER02              =
*      EXCEPTIONS
*         no_object_list       = 1
*        OTHERS               = 3
*                .
*      IF sy-subrc <> 0.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*      ENDIF.
*
*
*    ENDIF.
*
*
*
*
*
*
*  ENDLOOP.
*
** assign equipment to servicer order
** via BAPI_ALM_ORDER_MAINTAIN
*
*
*
*  LOOP AT it_aufk.
*
*
*    READ TABLE it_viqmel WITH KEY kdauf = it_aufk-kdauf.
*
*
** FILL THE CHANGE METHOD
*    it_methods-refnumber = 1.
*    it_methods-objecttype = 'HEADER'.
*    it_methods-method = 'CHANGE'.
*    it_methods-objectkey = it_aufk-aufnr.
*    .
*    APPEND it_methods.
*    CLEAR it_methods.
*
** FILL TEH SAVE METHOD
*
** ADD AT LAST THE SAVE METHOD
*
*    it_methods-method = 'SAVE'.
*    it_methods-objectkey = it_aufk-aufnr.
*    it_methods-refnumber = 1.
*    it_methods-objecttype = ''.
*    APPEND it_methods.
*    CLEAR it_methods.
*
*
*
** FILL HEADER AND HEADER_UP TABLES
*
*    it_header-orderid =  it_aufk-aufnr.
*
*    it_header-equipment = it_viqmel-equnr.
*
*    it_header-material = it_viqmel-matnr.
*
*    APPEND it_header.
*
*    it_header_up-orderid = it_aufk-aufnr.
*
*    it_header_up-equipment = 'X'.
*    it_header_up-material = 'X'.
*
*    APPEND it_header_up.
*
*    CALL FUNCTION 'BAPI_ALM_ORDER_MAINTAIN'
*   TABLES
*     it_methods             = it_methods
*     it_header              = it_header
*  it_header_up           = it_header_up
**   IT_HEADER_SRV          =
**   IT_HEADER_SRV_UP       =
**   IT_USERSTATUS          =
**     it_partner             = it_partner
**    it_partner_up          = it_partner_up
**    it_operation           = it_operation
**    it_operation_up        = it_operation_up
**   IT_RELATION            =
**   IT_RELATION_UP         =
**   IT_COMPONENT           =
**   IT_COMPONENT_UP        =
**   IT_TEXT                =
**   IT_TEXT_LINES          =
**   EXTENSION_IN           =
*     return                 = it_return
**   et_numbers             = it_numbers
*           .
*
*
*
*
*    READ TABLE it_return WITH KEY type = 'E'.
*    IF sy-subrc EQ 0.
*      LOOP AT it_return.
*        it_return = it_return.
*        APPEND it_return2.
*      ENDLOOP.
**      RAISE create_service_order_failed.
*
*    ELSE.
*      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
** EXPORTING
**   WAIT          =
** IMPORTING
**   RETURN        =
*                .
*
*
*    ENDIF.
*
*    REFRESH: it_return,it_methods, it_header, it_header_up.
*
*
*
*  ENDLOOP.
*


















*  *error handling
*Text symbol text£º

*001:Selection criteria
*Selection text£º
*S_AUSVN:        Start date malfunction
*S_QMNUM:        Notification number
