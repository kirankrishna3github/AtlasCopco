*----------------------------------------------------------------------*
***INCLUDE YSE_IBOX_PROCESS_F01 .
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  initialization
*&---------------------------------------------------------------------*
*       Perform the necessary initialization actions
*----------------------------------------------------------------------*
FORM initialization .

*.. Local variables
  DATA: ls_log    TYPE bal_s_log.

  ls_log-object = 'YSE_IBOX_PROCESS'.

*.. Create application log
  CALL FUNCTION 'BAL_LOG_CREATE'
    EXPORTING
      i_s_log                 = ls_log
    IMPORTING
      e_log_handle            = gv_handle
    EXCEPTIONS
      log_header_inconsistent = 1
      OTHERS                  = 2.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  GET PARAMETER ID 'VKO' FIELD p_vkorg.

ENDFORM.                    " initialization

*eject
*&---------------------------------------------------------------------*
*&      Form  select_entries_cre
*&---------------------------------------------------------------------*
*       Select the relevant entries to be created for IBOX
*----------------------------------------------------------------------*
FORM select_entries_cre.

  DATA: lv_umren  type yumren,
        lv_pumren TYPE ypumren.

  SELECT * FROM yse_ibox_create
    INTO CORRESPONDING FIELDS OF TABLE gt_cre
    WHERE vkorg EQ p_vkorg."#EC CI_NOFIRST

  IF gt_cre[] IS INITIAL.
    MESSAGE s001(00) with text-i01.
  ENDIF.

  SORT gt_cre by matnr lifnr vkorg.

  LOOP AT gt_cre.
    SELECT SINGLE umren pumren
      INTO (lv_umren, lv_pumren)
      FROM yse_ibox_create WHERE matnr = gt_cre-matnr
                             AND lifnr = gt_cre-lifnr
                             AND vkorg = gt_cre-vkorg.

    gt_cre-yumren = lv_umren / 1000.
    gt_cre-ypumren = lv_pumren / 1000.
    MODIFY gt_cre.
  ENDLOOP.

ENDFORM.                    " select_entries_cre

*eject
*&---------------------------------------------------------------------*
*&      Form  select_entries_upd
*&---------------------------------------------------------------------*
*       Select the relevant entries to be updated for IBOX
*----------------------------------------------------------------------*
FORM select_entries_upd.

  DATA: lv_umren2  type yumren,
        lv_pumren2 TYPE ypumren.

  SELECT * FROM yse_ibox_iti_upd"#EC CI_NOFIRST
    INTO CORRESPONDING FIELDS OF TABLE gt_upd
    WHERE vkorg EQ p_vkorg.

  IF gt_upd[] IS INITIAL.
    MESSAGE s001(00) with text-i01.
  ENDIF.

  SORT gt_upd by matnr vkorg.

  LOOP AT gt_upd.
    SELECT SINGLE umren pumren
      INTO (lv_umren2, lv_pumren2)
      FROM yse_ibox_iti_upd WHERE matnr = gt_upd-matnr
                              AND vkorg = gt_upd-vkorg.

    gt_upd-yumren = lv_umren2 / 1000.
    gt_upd-ypumren = lv_pumren2 / 1000.
    MODIFY gt_upd.
  ENDLOOP.

ENDFORM.                    " select_entries_upd

*eject
*&---------------------------------------------------------------------*
*&      Form  select_entries_sup
*&---------------------------------------------------------------------*
*       Select the relevant entries to be displayed for IBOX
*----------------------------------------------------------------------*
FORM select_entries_sup.

  SELECT * FROM yse_ibox_sup
    INTO CORRESPONDING FIELDS OF TABLE gt_sup
    WHERE vkorg EQ p_vkorg.

  IF gt_sup[] IS INITIAL.
    MESSAGE s001(00) with text-i01.
  ENDIF.

  SORT gt_upd by matnr vkorg.

ENDFORM.                    " select_entries_sup

*eject
*&---------------------------------------------------------------------*
*&      Form  output_list_entries_cre
*&---------------------------------------------------------------------*
*       Output the entries list with creations
*----------------------------------------------------------------------*
FORM output_list_entries_cre.

*.. Local variables
  DATA: ls_layout TYPE slis_layout_alv,
        ls_grid   TYPE lvc_s_glay,
        ls_events TYPE slis_alv_event.

  DATA: lt_events TYPE slis_t_event,
        lt_event_exits TYPE slis_t_event_exit,
        lt_fieldcat TYPE slis_t_fieldcat_alv.

*.. Fill events
  REFRESH lt_events.
  ls_events-name = 'USER_COMMAND'.
  ls_events-form = 'USER_COMMAND_CRE'.
  APPEND ls_events TO lt_events.
  ls_events-name = 'PF_STATUS_SET'.
  ls_events-form = 'PF_STATUS_SET_CRE'.
  APPEND ls_events TO lt_events.
  ls_events-name = 'TOP_OF_PAGE'.
  ls_events-form = 'TOP_OF_PAGE_CRE'.
  APPEND ls_events TO lt_events.
  ls_events-form = ls_events-name = 'END_OF_LIST'.
  APPEND ls_events TO lt_events.

*.. Define layout
  CLEAR ls_layout.
  ls_layout-get_selinfos      = gc_charx.
  ls_layout-colwidth_optimize = gc_charx.
  ls_layout-detail_popup      = gc_charx.
  ls_layout-box_fieldname     = 'SELKZ'.
  ls_layout-no_keyfix         = gc_charx.
  ls_layout-info_fieldname    = 'ZZCOL'.

*.. Define grid settings
* ls_grid-coll_end_l = gc_charx.

*.. Prepare field catalog
  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'YSE_IBOX_CREATE_ALV'
      i_client_never_display = 'X'
    CHANGING
      ct_fieldcat            = lt_fieldcat
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*.. Call ALV grid output
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program = 'YSE_IBOX_PROCESS'
      i_structure_name   = 'YSE_IBOX_CREATE_ALV'
      i_grid_settings    = ls_grid
      is_layout          = ls_layout
      i_save             = 'A'
      it_fieldcat        = lt_fieldcat
      it_events          = lt_events
    TABLES
      t_outtab           = gt_cre
    EXCEPTIONS
      program_error      = 1
      OTHERS             = 2.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " output_list_entries_cre

*eject
*&---------------------------------------------------------------------*
*&      Form  output_list_entries_upd
*&---------------------------------------------------------------------*
*       Output the entries list with updates
*----------------------------------------------------------------------*
FORM output_list_entries_upd.

*.. Local variables
  DATA: ls_layout TYPE slis_layout_alv,
        ls_grid   TYPE lvc_s_glay,
        ls_events TYPE slis_alv_event.

  DATA: lt_events TYPE slis_t_event,
        lt_event_exits TYPE slis_t_event_exit,
        lt_fieldcat TYPE slis_t_fieldcat_alv.

*.. Fill events
  REFRESH lt_events.
  ls_events-name = 'USER_COMMAND'.
  ls_events-form = 'USER_COMMAND_UPD'.
  APPEND ls_events TO lt_events.
  ls_events-name = 'PF_STATUS_SET'.
  ls_events-form = 'PF_STATUS_SET_UPD'.
  APPEND ls_events TO lt_events.
  ls_events-name = 'TOP_OF_PAGE'.
  ls_events-form = 'TOP_OF_PAGE_UPD'.
  APPEND ls_events TO lt_events.
  ls_events-form = ls_events-name = 'END_OF_LIST'.
  APPEND ls_events TO lt_events.

*.. Define layout
  CLEAR ls_layout.
  ls_layout-get_selinfos      = gc_charx.
  ls_layout-colwidth_optimize = gc_charx.
  ls_layout-detail_popup      = gc_charx.
  ls_layout-box_fieldname     = 'SELKZ'.
  ls_layout-no_keyfix         = gc_charx.
  ls_layout-info_fieldname    = 'ZZCOL'.

*.. Define grid settings
* ls_grid-coll_end_l = gc_charx.

*.. Prepare field catalog
  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'YSE_IBOX_ITI_UPD_ALV'
      i_client_never_display = 'X'
    CHANGING
      ct_fieldcat            = lt_fieldcat
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*.. Call ALV grid output
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program = 'YSE_IBOX_PROCESS'
      i_structure_name   = 'YSE_IBOX_ITI_UPD_ALV'
      i_grid_settings    = ls_grid
      is_layout          = ls_layout
      i_save             = 'A'
      it_fieldcat        = lt_fieldcat
      it_events          = lt_events
    TABLES
      t_outtab           = gt_upd
    EXCEPTIONS
      program_error      = 1
      OTHERS             = 2.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " output_list_entries_upd

*eject
*&---------------------------------------------------------------------*
*&      Form  output_list_entries_sup
*&---------------------------------------------------------------------*
*       Output the entries list with supersessions
*----------------------------------------------------------------------*
FORM output_list_entries_sup.

*.. Local variables
  DATA: ls_layout TYPE slis_layout_alv,
        ls_grid   TYPE lvc_s_glay,
        ls_events TYPE slis_alv_event.

  DATA: lt_events TYPE slis_t_event,
        lt_event_exits TYPE slis_t_event_exit,
        lt_fieldcat TYPE slis_t_fieldcat_alv.

*.. Fill events
  REFRESH lt_events.
  ls_events-name = 'USER_COMMAND'.
  ls_events-form = 'USER_COMMAND_SUP'.
  APPEND ls_events TO lt_events.
  ls_events-name = 'PF_STATUS_SET'.
  ls_events-form = 'PF_STATUS_SET_SUP'.
  APPEND ls_events TO lt_events.
  ls_events-name = 'TOP_OF_PAGE'.
  ls_events-form = 'TOP_OF_PAGE_SUP'.
  APPEND ls_events TO lt_events.
  ls_events-form = ls_events-name = 'END_OF_LIST'.
  APPEND ls_events TO lt_events.

*.. Define layout
  CLEAR ls_layout.
  ls_layout-get_selinfos      = gc_charx.
  ls_layout-colwidth_optimize = gc_charx.
  ls_layout-detail_popup      = gc_charx.
  ls_layout-box_fieldname     = 'SELKZ'.
  ls_layout-no_keyfix         = gc_charx.
  ls_layout-info_fieldname    = 'ZZCOL'.

*.. Define grid settings
* ls_grid-coll_end_l = gc_charx.

*.. Prepare field catalog
  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'YSE_IBOX_SUP'
      i_client_never_display = 'X'
    CHANGING
      ct_fieldcat            = lt_fieldcat
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*.. Call ALV grid output
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program = 'YSE_IBOX_PROCESS'
      i_structure_name   = 'YSE_IBOX_SUP'
      i_grid_settings    = ls_grid
      is_layout          = ls_layout
      i_save             = 'A'
      it_fieldcat        = lt_fieldcat
      it_events          = lt_events
    TABLES
      t_outtab           = gt_sup
    EXCEPTIONS
      program_error      = 1
      OTHERS             = 2.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " output_list_entries_sup

*eject
*&---------------------------------------------------------------------*
*&      Form  add_message_to_log
*&---------------------------------------------------------------------*
*       Add a generated message to the application log
*----------------------------------------------------------------------*
FORM add_message_to_log .

*.. Local variables
  DATA: ls_msg TYPE bal_s_msg.

  MOVE-CORRESPONDING syst TO ls_msg.
  CALL FUNCTION 'BAL_LOG_MSG_ADD'
    EXPORTING
*     I_LOG_HANDLE              =
      i_s_msg                   = ls_msg
*   IMPORTING
*     E_S_MSG_HANDLE            =
*     E_MSG_WAS_LOGGED          =
*     E_MSG_WAS_DISPLAYED       =
    EXCEPTIONS
      log_not_found             = 1
      msg_inconsistent          = 2
      log_is_full               = 3
      OTHERS                    = 4
            .
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*.. Flag log as having entries
  IF gv_log IS INITIAL.
    gv_log = gc_charx.
  ENDIF.

ENDFORM.                    " add_message_to_log

*eject
*&---------------------------------------------------------------------*
*&      Form  save_application_log
*&---------------------------------------------------------------------*
*       Save the current application log to database
*----------------------------------------------------------------------*
FORM save_application_log .

*.. Local variables
  DATA: lt_handle TYPE bal_t_logh.

  APPEND gv_handle TO lt_handle.

  CALL FUNCTION 'BAL_DB_SAVE'
    EXPORTING
*     I_CLIENT               = SY-MANDT
      i_in_update_task       = 'X'
      i_t_log_handle         = lt_handle
*   IMPORTING
*     E_NEW_LOGNUMBERS       =
    EXCEPTIONS
      log_not_found          = 1
      save_not_allowed       = 2
      numbering_error        = 3
      OTHERS                 = 4
            .
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  COMMIT WORK.

ENDFORM.                    " save_application_log
