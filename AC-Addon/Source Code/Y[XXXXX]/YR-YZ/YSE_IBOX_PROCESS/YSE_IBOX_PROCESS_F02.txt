*----------------------------------------------------------------------*
***INCLUDE YSE_IBOX_PROCESS_F02.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  user_command_cre
*&---------------------------------------------------------------------*
*       text: User Command callback routine for ALV
*----------------------------------------------------------------------*
FORM user_command_cre USING r_ucomm LIKE sy-ucomm
                        rs_selfield TYPE slis_selfield.

  CASE r_ucomm.
    WHEN 'CRE' or 'CRES'."MOD-001
      LOOP AT gt_cre WHERE selkz = gc_charx.
        PERFORM create_material.
        CLEAR gt_cre-selkz.
        MODIFY gt_cre TRANSPORTING selkz.
      ENDLOOP.

      IF gv_ok = gc_charx.
*...... Delete line(s) from internal table (~refresh)
        PERFORM select_entries_cre.
        CLEAR gv_ok.
      ENDIF.
      rs_selfield-refresh = gc_charx.
    WHEN 'DEL'.
*.... Delete line(s) from the table YSE_IBOX_CREATE
*.... and refresh of ALV.
      LOOP AT gt_cre WHERE selkz = gc_charx.
        PERFORM delete_lines_c USING gt_cre-matnr gt_cre-lifnr gt_cre-vkorg.
      ENDLOOP.

*.... Select again
      PERFORM select_entries_cre.
      rs_selfield-refresh = gc_charx.
    WHEN 'LOG'.
*      PERFORM display_log.
      REFRESH lt_text.
      LOOP AT g_output.
        IF NOT g_output-matnr IS INITIAL.
          CONCATENATE g_output-matnr ' : ' INTO lt_text-text.
          APPEND lt_text.
          CLEAR lt_text.
          MOVE g_output-text TO lt_text-text+3(77).
          APPEND lt_text.
          CLEAR lt_text.
        ELSE.
          MOVE g_output-text TO lt_text-text.
          APPEND lt_text.
          CLEAR lt_text.
        ENDIF.
      ENDLOOP.

      IF NOT lt_text[] IS INITIAL.
        CALL FUNCTION 'DD_POPUP_WITH_INFOTEXT'
          EXPORTING
            titel        = 'Execution log'
            start_column = 10
            start_row    = 10
            end_column   = 90
            end_row      = 20
            infoflag     = ' '
          IMPORTING
            answer       = gv_answer
          TABLES
            lines        = lt_text.
      ENDIF.
  ENDCASE.

ENDFORM.                    " user_command_cre

*eject
*&---------------------------------------------------------------------*
*&      Form  PF_STATUS_SET_CRE
*&---------------------------------------------------------------------*
*       text: PF-status callback routine for ALV
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM pf_status_set_cre USING rt_extab TYPE slis_t_extab.

  SET PF-STATUS 'YSE_CREA'.

ENDFORM.                    " PF_STATUS_SET_CRE

*eject
*&---------------------------------------------------------------------*
*&      Form  top_of_page_cre
*&---------------------------------------------------------------------*
*       Top of page callback routine for ALV
*----------------------------------------------------------------------*
FORM top_of_page_cre.

*.. Local variables
  DATA: lt_comment TYPE slis_t_listheader,
        ls_comment TYPE slis_listheader.

*.. Header
  ls_comment-typ  = 'H'.
  ls_comment-info = text-h00.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

*.. Selection
  ls_comment-typ  = 'S'.
  ls_comment-key  = text-h03.
  MOVE p_vkorg TO ls_comment-info.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      it_list_commentary       = lt_comment
*     I_LOGO                   =
*     I_END_OF_LIST_GRID       =
            .

ENDFORM.                    " top_of_page_cre

*&---------------------------------------------------------------------*
*&      Form  user_command_upd
*&---------------------------------------------------------------------*
*       text: User Command callback routine for ALV
*----------------------------------------------------------------------*
FORM user_command_upd USING r_ucomm LIKE sy-ucomm
                        rs_selfield TYPE slis_selfield.

  CASE r_ucomm.
    WHEN 'UPD'.
      LOOP AT gt_upd WHERE selkz = gc_charx.
        PERFORM update_material.
        CLEAR gt_upd-selkz.
        MODIFY gt_upd TRANSPORTING selkz.
      ENDLOOP.

      IF gv_ok = gc_charx.
*...... Delete line(s) from internal table (~refresh)
        PERFORM select_entries_upd.
        CLEAR gv_ok.
      ENDIF.
      rs_selfield-refresh = gc_charx.
    WHEN 'DEL'.
*.... Delete line(s) from the table YSE_IBOX_ITI_UPD
*.... and refresh of ALV
      LOOP AT gt_upd WHERE selkz = gc_charx.
        PERFORM delete_lines_u USING gt_upd-matnr gt_upd-vkorg.
      ENDLOOP.

*.... Select again
      PERFORM select_entries_upd.
      rs_selfield-refresh = gc_charx.
    WHEN 'LOG'.
*      PERFORM display_log.
      REFRESH lt_text.
      LOOP AT g_output.
        IF NOT g_output-matnr IS INITIAL.
          CONCATENATE g_output-matnr ' : ' INTO lt_text-text.
          APPEND lt_text.
          CLEAR lt_text.
          MOVE g_output-text TO lt_text-text+3(77).
          APPEND lt_text.
          CLEAR lt_text.
        ELSE.
          MOVE g_output-text TO lt_text-text.
          APPEND lt_text.
          CLEAR lt_text.
        ENDIF.
      ENDLOOP.

      IF NOT lt_text[] IS INITIAL.
        CALL FUNCTION 'DD_POPUP_WITH_INFOTEXT'
          EXPORTING
            titel        = 'Execution log'
            start_column = 10
            start_row    = 10
            end_column   = 90
            end_row      = 20
            infoflag     = ' '
          IMPORTING
            answer       = gv_answer
          TABLES
            lines        = lt_text.
      ENDIF.
  ENDCASE.

ENDFORM.                    " user_command_upd

*eject
*&---------------------------------------------------------------------*
*&      Form  PF_STATUS_SET_UPD
*&---------------------------------------------------------------------*
*       text: PF-status callback routine for ALV
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM pf_status_set_upd USING rt_extab TYPE slis_t_extab.

  SET PF-STATUS 'YSE_UPDA'.

ENDFORM.                    " PF_STATUS_SET_UPD

*eject
*&---------------------------------------------------------------------*
*&      Form  top_of_page_upd
*&---------------------------------------------------------------------*
*       Top of page callback routine for ALV
*----------------------------------------------------------------------*
FORM top_of_page_upd.

*.. Local variables
  DATA: lt_comment TYPE slis_t_listheader,
        ls_comment TYPE slis_listheader.

*.. Header
  ls_comment-typ  = 'H'.
  ls_comment-info = text-h01.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

*.. Selection
  ls_comment-typ  = 'S'.
  ls_comment-key  = text-h03.
  MOVE p_vkorg TO ls_comment-info.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      it_list_commentary       = lt_comment
*     I_LOGO                   =
*     I_END_OF_LIST_GRID       =
            .

ENDFORM.                    " top_of_page_upd

*&---------------------------------------------------------------------*
*&      Form  user_command_sup
*&---------------------------------------------------------------------*
*       text: User Command callback routine for ALV
*----------------------------------------------------------------------*
FORM user_command_sup USING r_ucomm LIKE sy-ucomm
                        rs_selfield TYPE slis_selfield.

  CASE r_ucomm.
    WHEN '&REPR'.
      LOOP AT gt_sup WHERE selkz = gc_charx.
        PERFORM reprocess_super.
        CLEAR gt_upd-selkz.
        MODIFY gt_sup TRANSPORTING selkz.
      ENDLOOP.

*.... Delete always line(s) from internal table (~refresh)
      PERFORM select_entries_sup.
      rs_selfield-refresh = gc_charx.
    WHEN '&DEL'.
*.... Delete line(s) from the table YSE_IBOX_SUP
*.... and refresh of ALV.
      LOOP AT gt_sup WHERE selkz = gc_charx.
        PERFORM delete_lines_s USING gt_sup-pitmno gt_sup-vkorg.
      ENDLOOP.

*.... Select again
      PERFORM select_entries_sup.
      rs_selfield-refresh = gc_charx.
    WHEN '&LOG'.
      REFRESH lt_text.
      LOOP AT g_output.
        IF NOT g_output-matnr IS INITIAL.
          CONCATENATE g_output-matnr ' : ' INTO lt_text-text.
          APPEND lt_text.
          CLEAR lt_text.
          MOVE g_output-text TO lt_text-text+3(77).
          APPEND lt_text.
          CLEAR lt_text.
        ELSE.
          MOVE g_output-text TO lt_text-text.
          APPEND lt_text.
          CLEAR lt_text.
        ENDIF.
      ENDLOOP.

      IF NOT lt_text[] IS INITIAL.
        CALL FUNCTION 'DD_POPUP_WITH_INFOTEXT'
          EXPORTING
            titel        = 'Execution log'
            start_column = 10
            start_row    = 10
            end_column   = 90
            end_row      = 20
            infoflag     = ' '
          IMPORTING
            answer       = gv_answer
          TABLES
            lines        = lt_text.
      ENDIF.
  ENDCASE.

ENDFORM.                    " user_command_sup

*eject
*&---------------------------------------------------------------------*
*&      Form  PF_STATUS_SET_SUP
*&---------------------------------------------------------------------*
*       text: PF-status callback routine for ALV
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM pf_status_set_sup USING rt_extab TYPE slis_t_extab.

  SET PF-STATUS 'YSE_SUPER'.

ENDFORM.                    " PF_STATUS_SET_SUP

*eject
*&---------------------------------------------------------------------*
*&      Form  top_of_page_sup
*&---------------------------------------------------------------------*
*       Top of page callback routine for ALV
*----------------------------------------------------------------------*
FORM top_of_page_sup.

*.. Local variables
  DATA: lt_comment TYPE slis_t_listheader,
        ls_comment TYPE slis_listheader.

*.. Header
  ls_comment-typ  = 'H'.
  ls_comment-info = text-h02.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

*.. Selection
  ls_comment-typ  = 'S'.
  ls_comment-key  = text-h03.
  MOVE p_vkorg TO ls_comment-info.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      it_list_commentary       = lt_comment
*     I_LOGO                   =
*     I_END_OF_LIST_GRID       =
            .

ENDFORM.                    " top_of_page_sup

*eject
*&---------------------------------------------------------------------*
*&      Form  end_of_list
*&---------------------------------------------------------------------*
*       text: end of list callback routine for ALV
*----------------------------------------------------------------------*
FORM end_of_list .

* Output message to indicate log entries exist
  IF gv_log EQ gc_charx.
*.. Log contains entries. Please check
    MESSAGE s001(00) WITH text-e02.
  ENDIF.

ENDFORM.                    " end_of_list

*&---------------------------------------------------------------------*
*&      Module  SET_STATUS_9000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE SET_STATUS_9000 OUTPUT.

  CLEAR okcode_9000.
  SET PF-STATUS '9000'.
  SET TITLEBAR '9000'.

ENDMODULE.                 " SET_STATUS_9000  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  EXIT_COMMAND_9000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE EXIT_COMMAND_9000 INPUT.

  CASE okcode_9000.
    WHEN '&F03'.
      LEAVE TO SCREEN 0.
    WHEN '&F15'.
      LEAVE TO SCREEN 0.
    WHEN '&F12'.
      LEAVE TO SCREEN 0.
  ENDCASE.

ENDMODULE.                 " EXIT_COMMAND_9000  INPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9000 INPUT.

  CASE okcode_9000.
    WHEN '&F03'.
      LEAVE TO SCREEN 0.
    WHEN '&F15'.
      LEAVE TO SCREEN 0.
    WHEN '&F12'.
      LEAVE TO SCREEN 0.
    WHEN 'CREA'.
      SET SCREEN 9001.
      LEAVE SCREEN.
    WHEN 'UPDA'.
      SET SCREEN 9002.
      LEAVE SCREEN.
    WHEN 'SUPER'.
      SET SCREEN 9003.
      LEAVE SCREEN.
    WHEN OTHERS.
      SET SCREEN 9000.
      LEAVE SCREEN.
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_9000  INPUT

*&---------------------------------------------------------------------*
*&      Module  INIT_9001  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE INIT_9001 OUTPUT.

  CLEAR okcode_9001.
  SET PF-STATUS '9001'.
  SET TITLEBAR '9001'.

ENDMODULE.                 " INIT_9001  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  EXIT_COMMAND_9001  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE EXIT_COMMAND_9001 INPUT.

  CASE okcode_9001.
    WHEN '&F03'.
      SET SCREEN '9000'.
      LEAVE SCREEN.
    WHEN '&F15'.
      LEAVE TO SCREEN '9000'.
    WHEN '&F12'.
      LEAVE TO SCREEN 0.
  ENDCASE.

ENDMODULE.                 " EXIT_COMMAND_9001  INPUT

*----------------------------------------------------------------------*
*  MODULE CHECK_9001 INPUT
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
MODULE check_9001 INPUT.

  IF ( okcode_9001 <> '&F03' AND okcode_9001 <> '&F15' AND
      okcode_9001 <> '&F12' ).

    AUTHORITY-CHECK OBJECT 'V_VBAK_VKO'
               ID 'VKORG' FIELD p_vkorg
               ID 'VTWEG' dummy
               ID 'SPART' dummy
               ID 'ACTVT' FIELD '01'.

    IF sy-subrc NE 0.
*.... No authorization for sales organisation: &1
      MESSAGE e001(00) WITH text-e03 p_vkorg.
    ENDIF.
  ENDIF.

ENDMODULE.                    "CHECK_9001 INPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9001  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9001 INPUT.

  CASE okcode_9001.
    WHEN '&F03'.
      LEAVE TO SCREEN 0.
    WHEN '&F15'.
      LEAVE TO SCREEN 0.
    WHEN '&F12'.
      LEAVE TO SCREEN 0.
    WHEN 'EXEC'.
      set PARAMETER ID 'VKO' FIELD p_vkorg.
      gv_action = 'CRE'.
      SUBMIT yse_ibox_process WITH p_action = gv_action AND RETURN.
*      PERFORM check_parms.
*      IF parms_ok = 'Y'.
*        PERFORM fill_table_gt_mat.
*        IF gt_mat[] IS INITIAL .
*          MESSAGE s001(00) WITH text-i03.
*        ELSE.
*** Generate Idoc's
*          SORT gt_mat BY matnr_popic.
*          PERFORM create_idocs.
*        ENDIF.
*      ENDIF.
    WHEN OTHERS.
      SET SCREEN 9001.
      LEAVE SCREEN.
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_9001  INPUT

*&---------------------------------------------------------------------*
*&      Module  INIT_9002  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE INIT_9002 OUTPUT.

  CLEAR okcode_9002.
  SET PF-STATUS '9002'.
  SET TITLEBAR '9002'.

ENDMODULE.                 " INIT_9002  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  EXIT_COMMAND_9002  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE EXIT_COMMAND_9002 INPUT.

  CASE okcode_9002.
    WHEN '&F03'.
      SET SCREEN '9000'.
      LEAVE SCREEN.
    WHEN '&F15'.
      SET SCREEN '9000'.
      LEAVE SCREEN.
    WHEN '&F12'.
      SET SCREEN 0.
      LEAVE SCREEN.
  ENDCASE.

ENDMODULE.                 " EXIT_COMMAND_9002  INPUT

*----------------------------------------------------------------------*
*  MODULE CHECK_9002 INPUT
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
MODULE check_9002 INPUT.

  IF ( okcode_9002 <> '&F03' AND okcode_9002 <> '&F15' AND
      okcode_9002 <> '&F12' ).

    AUTHORITY-CHECK OBJECT 'V_VBAK_VKO'
               ID 'VKORG' FIELD p_vkorg
               ID 'VTWEG' dummy
               ID 'SPART' dummy
               ID 'ACTVT' FIELD '02'.

    IF sy-subrc NE 0.
*.... No authorization for sales organisation: &1
      MESSAGE e001(00) WITH text-e03 p_vkorg.
    ENDIF.
  ENDIF.

ENDMODULE.                    "CHECK_9002 INPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9002  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9002 INPUT.

  CASE okcode_9002.
    WHEN '&F03'.
      LEAVE TO SCREEN 0.
    WHEN '&F15'.
      LEAVE TO SCREEN 0.
    WHEN '&F12'.
      LEAVE TO SCREEN 0.
    WHEN 'EXEC'.
      set PARAMETER ID 'VKO' FIELD p_vkorg.
      gv_action = 'UPD'.
      SUBMIT yse_ibox_process WITH p_action = gv_action AND RETURN.
    WHEN OTHERS.
      SET SCREEN 9002.
      LEAVE SCREEN.
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_9002  INPUT

*&---------------------------------------------------------------------*
*&      Module  INIT_9003  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE INIT_9003 OUTPUT.

  CLEAR okcode_9003.
  SET PF-STATUS '9003'.
  SET TITLEBAR '9003'.

ENDMODULE.                 " INIT_9003  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  EXIT_COMMAND_9003  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE EXIT_COMMAND_9003 INPUT.

  CASE okcode_9003.
    WHEN '&F03'.
      SET SCREEN '9000'.
      LEAVE SCREEN.
    WHEN '&F15'.
      SET SCREEN '9000'.
      LEAVE SCREEN.
    WHEN '&F12'.
      SET SCREEN 0.
      LEAVE SCREEN.
  ENDCASE.

ENDMODULE.                 " EXIT_COMMAND_9003  INPUT

*----------------------------------------------------------------------*
*  MODULE CHECK_9003 INPUT
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
MODULE check_9003 INPUT.

  IF ( okcode_9003 <> '&F03' AND okcode_9003 <> '&F15' AND
      okcode_9003 <> '&F12' ).

    AUTHORITY-CHECK OBJECT 'V_VBAK_VKO'
               ID 'VKORG' FIELD p_vkorg
               ID 'VTWEG' dummy
               ID 'SPART' dummy
               ID 'ACTVT' FIELD '02'.

    IF sy-subrc NE 0.
*.... No authorization for sales organisation: &1
      MESSAGE e001(00) WITH text-e03 p_vkorg.
    ENDIF.
  ENDIF.

ENDMODULE.                    "CHECK_9003 INPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9003  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9003 INPUT.

  CASE okcode_9003.
    WHEN '&F03'.
      LEAVE TO SCREEN 0.
    WHEN '&F15'.
      LEAVE TO SCREEN 0.
    WHEN '&F12'.
      LEAVE TO SCREEN 0.
    WHEN 'EXEC'.
      set PARAMETER ID 'VKO' FIELD p_vkorg.
      gv_action = 'SUP'.
      SUBMIT yse_ibox_process WITH p_action = gv_action AND RETURN.
    WHEN OTHERS.
      SET SCREEN 9003.
      LEAVE SCREEN.
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_9003  INPUT
