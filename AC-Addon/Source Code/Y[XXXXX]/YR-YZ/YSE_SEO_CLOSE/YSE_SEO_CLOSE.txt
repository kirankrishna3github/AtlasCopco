*&---------------------------------------------------------------------*
*& Report  YSE_SEO_CLOSE
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  yse_seo_close.

DATA: gt_jest  TYPE STANDARD TABLE OF jest,
      gt_jest1 TYPE STANDARD TABLE OF jest,
      wa_jest  TYPE jest,
      wa_jest1 TYPE jest.



***********************************************************************
*                           Pattern ID : 001                           *
*          Begin of Pattern: L O C A L   F I L E   U P L O A D         *
***********************************************************************

***********************************************************************
*                   D A T A   D E C L A R A T I O N S                  *
***********************************************************************


* Structure for storing File data
TYPES: BEGIN OF ty_infile,
          field1(40)        TYPE  c,           "First Field
*Insert fields as per requirement
END OF ty_infile.

* Internal table for File data
DATA: it_infile TYPE STANDARD TABLE OF ty_infile INITIAL SIZE 0.
*      wa_infile TYPE ty_infile.
DATA wa_infile TYPE ty_infile.
* Error Internal table
DATA it_errors TYPE STANDARD TABLE OF bapiret2 INITIAL SIZE 0.

CONSTANTS: c_comma(1)      TYPE c VALUE','. " Comma(1) of type Character

***********************************************************************
*        S E L E C T I O N   S C R E E N   D E F I N I T I O N S       *
***********************************************************************


PARAMETER: pa_stat  TYPE j_status   DEFAULT 'I0046' OBLIGATORY,
           pa_chgnr TYPE j_chgnr    DEFAULT '001'   OBLIGATORY,
           pa_lfup  TYPE localfile                  OBLIGATORY.
***********************************************************************
*                  P R O C E S S I N G    E V E N T S                  *
***********************************************************************


*$*$ F4 help on Screen fieldpa_LFUP
AT SELECTION-SCREEN ON VALUE-REQUEST FOR pa_lfup.

  PERFORM sub_f4_local_uploadfile USING pa_lfup.

***********************************************************************
*                          B O D Y   L O G I C                         *
***********************************************************************

* Read presentation server file for Non XLS file
  PERFORM sub_read_localfile
                                  USING pa_lfup
                                  c_comma "Change IF needed
                                  CHANGING it_infile
                                  it_errors.

* Read presentation server file for XLS file
  PERFORM sub_read_localfile_xls USING pa_lfup.


  LOOP AT it_infile INTO wa_infile.
    wa_jest-mandt = sy-mandt.
    CONCATENATE 'OR00' wa_infile-field1 INTO wa_jest-objnr.
    wa_jest-stat  = pa_stat.
    wa_jest-inact = space.
    wa_jest-chgnr = pa_chgnr.
    APPEND wa_jest TO gt_jest.
  ENDLOOP.

  IF NOT gt_jest[] IS NOT INITIAL.
    SELECT * FROM jest INTO TABLE gt_jest1
                       FOR ALL ENTRIES IN gt_jest
                       WHERE objnr = gt_jest-objnr
                       AND   stat  = pa_stat.
  ENDIF.

  CALL FUNCTION 'ENQUEUE_E_TABLE'
     EXPORTING
*             MODE_RSTABLE         = 'E'
       tabname              = 'JEST'
*             _SCOPE               = '2'
    EXCEPTIONS
      foreign_lock         = 1
      system_failure       = 2
      OTHERS               = 3.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN '1'.

      WHEN '2'.

      WHEN '3'.
    ENDCASE.
  ELSE.
    LOOP AT gt_jest INTO wa_jest.
      READ TABLE gt_jest1 INTO wa_jest1 WITH KEY objnr = wa_jest-objnr
                                                 stat = wa_jest-stat.
      IF sy-subrc = 0.
* No action
      ELSE.
        INSERT jest FROM wa_jest.
        IF sy-subrc = 0.
          WRITE:/ wa_jest-objnr.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.
***********************************************************************
*                           Pattern ID : 002                           *
*        Begin of Pattern: C U S T O M   T A B L E   U P D A T E       *
***********************************************************************
*  IF gt_jest[] IS NOT INITIAL.
*
**        First Lock the custom table
*    CALL FUNCTION 'ENQUEUE_E_TABLE'
*       EXPORTING
**             MODE_RSTABLE         = 'E'
*         tabname              = 'ZJEST'
**             _SCOPE               = '2'
*      EXCEPTIONS
*        foreign_lock         = 1
*        system_failure       = 2
*        OTHERS               = 3.
*
**        Report any errors based on sy-subrc value
*    IF sy-subrc NE 0.
*      CASE sy-subrc.
*        WHEN '1'.
*
*        WHEN '2'.
*
*        WHEN '3'.
*      ENDCASE.
*    ELSE. " ELSE -> IF sy-subrc NE 0
*
**          Update the Custom Table
*      INSERT jest FROM TABLE gt_jest ACCEPTING DUPLICATE KEYS.
*
**          Do COMMIT WORK and Issue Proper Message on Successful Database Update
*      IF sy-subrc = 0.
**             COMMIT WORK.
**          Do ROLLBACK and Issue Proper Message on the Update failed
*      ELSE. " ELSE -> IF sy-subrc = 0
**             ROLLBACK WORK.
*      ENDIF. " IF sy-subrc = 0
*
**          Dequeue the Custom Table
*      CALL FUNCTION 'DEQUEUE_E_TABLE'
*        EXPORTING
*          tabname = 'ZJEST'.
*    ENDIF. " IF sy-subrc NE 0
*
*  ENDIF. " IF it_GT_JEST[] IS NOT INITIAL

***********************************************************************
*                           Pattern ID : 002                           *
*         End of Pattern: C U S T O M   T A B L E   U P D A T E        *
***********************************************************************


***********************************************************************
*                       F O R M   R O U T I N E S                      *
***********************************************************************
**---------------------------------------------------------------------*
*       Form sub_F4_LOCAL_UPLOADFILE
*
*---------------------------------------------------------------------*
*       This form provides the F4 file navigator on Selection screen
*----------------------------------------------------------------------*
*       Called by.: Calling Programs
*----------------------------------------------------------------------*
*       Parameters: Filepath --> Return value after navigation
*----------------------------------------------------------------------*
FORM sub_f4_local_uploadfile USING filepath TYPE rlgrap-filename.

  DATA l_rc          TYPE i. " Rc of type Integers
  DATA l_filetab          TYPE filetable.
  DATA l_wa_filetab          TYPE file_table. " file_table
  DATA l_title          TYPE string.

  l_title = 'Select local file.'.

  CALL METHOD cl_gui_frontend_services=>file_open_dialog
    EXPORTING
      window_title            = l_title
      file_filter             = ',*.*,*.*.'
      initial_directory       = ': '
    CHANGING
      file_table              = l_filetab
      rc                      = l_rc
    EXCEPTIONS
      file_open_dialog_failed = 1
      cntl_error              = 2
      error_no_gui            = 3
      not_supported_by_gui    = 4
      OTHERS                  = 5.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE. " ELSE -> IF sy-subrc <> 0
    READ TABLE l_filetab INTO l_wa_filetab INDEX 1.

    IF sy-subrc EQ 0.
      filepath = l_wa_filetab-filename.

    ENDIF. " IF sy-subrc EQ 0
  ENDIF. " IF sy-subrc <> 0

ENDFORM.                    "sub_f4_local_uploadfile
*
*---------------------------------------------------------------------*
*  Form sub_READ_LOCALFILE
*
*---------------------------------------------------------------------*
*  This subroutine IS used to read a local file and return the internal
*  table with file data
*----------------------------------------------------------------------
*  Parameters: <-- FILE_INTAB: Internal table for storing infile data
*              <-- RETURN:  Error table
*              --> FILENAME: File name
*              --> SEPARATOR:  File separator
**---------------------------------------------------------------------*

FORM sub_read_localfile
                     USING  filename   TYPE localfile
                            separator  TYPE char1
                     CHANGING file_intab TYPE yse_intab1 "ty_infile "wa_infile "ty_infile "char40
                              return     TYPE tt_bapiret2.

* Temporary table structure for storing data after splitting
  TYPES: BEGIN OF l_ty_source_data,
             fieldval(150)  TYPE c,        "File contents
         END OF l_ty_source_data.

* Structure of the file for storing the data read
  TYPES: BEGIN OF l_ty_file,
            text(500)  TYPE c,                "File contents
        END  OF l_ty_file.

* Internal table and Workarea structure for storing data after splitting
  DATA l_it_source_data TYPE STANDARD TABLE OF
                                 l_ty_source_data INITIAL SIZE 0.
  DATA l_wa_source_data TYPE l_ty_source_data.

* Internal table and work area for storing the data read from file
  DATA l_it_file TYPE STANDARD TABLE OF l_ty_file INITIAL SIZE 0.
  DATA l_wa_file TYPE l_ty_file.
  DATA l_error_msg(40) TYPE c.         "Error Message
  DATA l_tabix TYPE sytabix. "Position

* FIELD-SYMBOLS.
  FIELD-SYMBOLS: <f1> TYPE ANY,        "Field Symbol 1
                 <f2> TYPE ANY,        "Field Symbol 2
                 <f_source> TYPE ANY,
                 <f_wa_filetab> TYPE ANY.
  DATA l_separator TYPE char01. " Separator of type CHAR01

  FIELD-SYMBOLS <fs_file> TYPE l_ty_file.
  DATA l_filename TYPE string.

* Change the filename to a FM compatible type
  l_filename = filename.
* Check if the separator is tab
  IF separator EQ cl_abap_char_utilities=>horizontal_tab.
    l_separator = 'X'.
  ELSE. " ELSE -> IF separator EQ cl_abap_char_utilities=>horizontal_tab
    l_separator = ''.
  ENDIF. " IF separator EQ cl_abap_char_utilities=>horizontal_tab


* Read file from presentation layer for Non Excel File
  CALL FUNCTION 'GUI_UPLOAD'
    EXPORTING
      filename                = l_filename
      has_field_separator     = l_separator
    TABLES
      data_tab                = l_it_file
    EXCEPTIONS
      file_open_error         = 1
      file_read_error         = 2
      no_batch                = 3
      gui_refuse_filetransfer = 4
      invalid_type            = 5
      no_authority            = 6
      unknown_error           = 7
      bad_data_format         = 8
      header_not_allowed      = 9
      separator_not_allowed   = 10
      header_too_long         = 11
      unknown_dp_error        = 12
      access_denied           = 13
      dp_out_of_memory        = 14
      disk_full               = 15
      dp_timeout              = 16
      OTHERS                  = 17.

* File Open failed
  IF sy-subrc NE 0.

    l_tabix = sy-subrc.
* Get the exact error parameter for the failure
    SELECT parameter FROM fupararef UP TO 1 ROWS
      INTO l_error_msg
     WHERE funcname EQ 'GUI_UPLOAD '
       AND r3state EQ 'A'             "Active
       AND paramtype EQ 'X' "Exception
       AND pposition EQ l_tabix.
    ENDSELECT.
    PERFORM sub_message_build
                           USING  '00'
                                  'E'
                                  '398'
                                  'Unable to open file'(x06)
                                   filename
                                  'for reading. Error:'(x07)
                                   l_error_msg
                                CHANGING return.
    EXIT.

  ENDIF. " IF sy-subrc NE 0
* IF the file has a separator
  IF separator NE space.
* Loop at file data and split into the internal table structure
    LOOP AT l_it_file ASSIGNING <fs_file>.

      SPLIT  <fs_file> AT separator INTO TABLE l_it_source_data.

      IF l_it_source_data IS INITIAL.
        <f2> = space.
      ELSE. " ELSE -> IF l_it_source_data IS INITIAL
        LOOP AT l_it_source_data INTO l_wa_source_data.
          ASSIGN l_wa_source_data-fieldval TO <f1>.
          ASSIGN COMPONENT sy-tabix OF STRUCTURE file_intab TO <f2>.
          IF <f1> IS ASSIGNED
          AND <f2> IS ASSIGNED .
            <f2> = <f1>.
          ENDIF. " IF <f1> IS ASSIGNED
        ENDLOOP. " LOOP AT l_it_source_data INTO l_wa_source_data
      ENDIF. " IF l_it_source_data IS INITIAL

    ENDLOOP. " LOOP AT l_it_file ASSIGNING <FS_file>


* No file separator
  ELSE. " ELSE -> IF separator NE space
    file_intab[] = l_it_file[].
  ENDIF. " IF separator NE space

ENDFORM. "READ_LOCALFILE
**---------------------------------------------------------------------*
*  Form sub_READ_LOCALFILE_XLS
**---------------------------------------------------------------------*
*  This subroutine IS used to read a local file and return the internal
*  table with file data
*----------------------------------------------------------------------
*  Parameters: <-- FILE_INTAB: Internal table for storing infile data
*              <-- RETURN:  Error table
*              --> FILENAME: File name
**---------------------------------------------------------------------*

FORM sub_read_localfile_xls USING  filename TYPE localfile.
  DATA l_filename TYPE filename.
  DATA l_it_tab TYPE STANDARD TABLE OF alsmex_tabline INITIAL SIZE 0.
  DATA l_wa_tab TYPE alsmex_tabline. " Rows for Table with Excel Data
  FIELD-SYMBOLS:<fld_build_itab_xls> TYPE ANY.
*read file from presentation Layer for XL file upload
  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = filename
      i_begin_col             = '1'
      i_begin_row             = '1'
      i_end_col               = '200'
      i_end_row               = '9999'
    TABLES
      intern                  = l_it_tab
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF. " IF sy-subrc <> 0
* Sort table by rows and colums
  SORT l_it_tab BY row col ASCENDING.

  IF NOT l_it_tab IS INITIAL.
* Populate it_data_read with the data read from excel file
    LOOP AT l_it_tab INTO l_wa_tab.
      ASSIGN COMPONENT l_wa_tab-col OF STRUCTURE wa_infile
      TO <fld_build_itab_xls>.
      IF sy-subrc NE 0.
        EXIT.
      ENDIF. " IF sy-subrc NE 0

      <fld_build_itab_xls> = l_wa_tab-value.

      AT END OF row.
        APPEND wa_infile TO it_infile.

        CLEAR l_wa_tab.
      ENDAT.

    ENDLOOP. " LOOP AT l_it_tab INTO l_wa_tab

  ENDIF. " IF NOT l_it_tab IS INITIAL
ENDFORM. "READ_LOCALFILE_XLS
**---------------------------------------------------------------------*
*  Form sub_MESSAGE_BUILD
**---------------------------------------------------------------------*
*  This subroutine IS used populate the messages in return structure
**---------------------------------------------------------------------*
*  Parameters:  <--RETURN: Error table with message
*               -->CLASS:  Message Class
*               -->TYPE:   Message Type
*               -->NUMBER: Message Number
*               -->VAR1:   Message Variable 1
*               -->VAR2:   Message Variable 2
*               -->VAR3:   Message Variable 3
*               -->VAR4:   Message Variable 4
***********************************************************************
FORM sub_message_build
                   USING  value(class)     TYPE symsgid " Message Class
                          value(type)      TYPE symsgty " Message Type
                          value(number)    TYPE symsgno " Message Number
                          value(var1)      TYPE any
                          value(var2)      TYPE any
                          value(var3)      TYPE any
                          value(var4)      TYPE any
                  CHANGING   return           TYPE tt_bapiret2.

  DATA: ld_par1   TYPE symsgv,                "Variable for Msg
        ld_par2   TYPE symsgv,                "Variable for Msg
        ld_par3   TYPE symsgv,                "Variable for Msg
        ld_par4   TYPE symsgv,                "Variable for Msg
        ls_return TYPE bapiret2.              "Return structure

* Assign Message to variables
  ld_par1 = var1.
  ld_par2 = var2.
  ld_par3 = var3.
  ld_par4 = var4.

* Fills the return parameter
  CALL FUNCTION 'BALW_BAPIRETURN_GET2'
    EXPORTING
      type   = type " of type
      cl     = class
      number = number
      par1   = ld_par1
      par2   = ld_par2
      par3   = ld_par3
      par4   = ld_par4
    IMPORTING
      return = ls_return.

  APPEND ls_return TO return.

ENDFORM. "MESSAGE_BUILD

***********************************************************************
*                           Pattern ID : 001                           *
*           End of Pattern: L O C A L   F I L E   U P L O A D          *
***********************************************************************
