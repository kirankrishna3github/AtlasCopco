*&---------------------------------------------------------------------*
*& Report  YSE_UPLOAD_PRICES                                           *
*&                                                                     *
*&---------------------------------------------------------------------*
*&                                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*

REPORT  YSE_UPLOAD_PRICES   MESSAGE-ID   YSE_SALES_LOG LINE-SIZE 255.

*----------------------------------------------------------------------*
* PROGRAM ID           : YSE_UPLOAD_PRICES                *
* PROGRAM TITLE        : Upload price conditions from text file        *
* AUTHOR               : Andr¨¦ Blommaert                               *
* DATE                 : 02/01/2007                                    *
* DEVELOPMENT ID       :  D238-SDMM-Upload Program For Prices
*
*                                                                      *
* CHANGE REQUEST NUMBER: CD1K908986                                    *
*                                                                      *
* Program Description:  Upload program for material list prices
*                       customer list prices and customer net prices
*                       This program can also delete price conditions
*                       from a text file                               *
*----------------------------------------------------------------------*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
* MOD. NO.|  DATE    | NAME     |CORRECTION NUMBER| CHANGE REFERENCE # *
*----------------------------------------------------------------------*
*AIR22188 => check decimal notation of SAP user with format of price in
*            file
*Issue 2410
************************************************************************
* AIR23037  2008.03.13, issue 4457  new condition: Z105, z030          *
*                                                                      *
*                                                                      *
************************************************************************
************************************************************************
**EXTPMA   2012.02.09  Pratap      CD1K970927                          *
*                                  CD1K970926                          *
*                                  CD1K970923                          *
*                                  CD1K970299                          *
* Description: CR 2394  condition data in file compared to             *
*                       existing conditiondata.In Existing condition   *
*                       data dates are overlapping remove the that     *
*                       condition data from file process other         *
*                       condition data                                 *
*                                                                      *
************************************************************************
**EXTPMA   2012.02.09  Pratap      CD1K972452                          *
* Description:  changes in cr 2394  are moved upto to cq1.             *
*                After completing testing in cq1, we found that the    *
*                 program is not behaved properly.So We are reverting  *
*                the chages done cr2394 and same is moving to cq1 to   *
*                  synch with cp1.                                     *
************************************************************************




************************************************************************
*                   T A B L E S                                        *
************************************************************************
************************************************************************
*                   TYPES                                *
************************************************************************
TABLES: USR01.

TYPES:
  BEGIN OF T_A954,
    KSCHL LIKE A954-KSCHL,
    VKORG LIKE A954-VKORG,
    SPART LIKE A954-SPART,
    MATNR LIKE A954-MATNR,
    DATAB LIKE A954-DATAB,
    DATBI LIKE A954-DATBI,
    KBETR(40),
    KONWA LIKE KONP-KONWA,
    KPEIN(10),
    KMEIN LIKE KONP-KMEIN,
    KZNEP LIKE KONP-KZNEP,
 END OF T_A954,

 BEGIN OF t_z030_basic,
   KSCHL LIKE A004-KSCHL,    "
   VKORG LIKE A004-VKORG,    " sales org
   VTWEG LIKE A004-VTWEG,    " distr chan
 END OF t_z030_basic.


* discount Z030: customer + PGC
TYPES:
BEGIN OF t_z030_CPG.
include type t_z030_basic.
TYPES:
  SPART LIKE KOMG-SPART,    " division
  PGC   LIKE T2504-WW007,
  DATAB LIKE A004-DATAB,
  DATBI LIKE A004-DATBI,
  KUNNR LIKE KOMG-KUNNR,    " Customer
  KBETR LIKE KONP-KBETR,    " Ammount
END OF t_z030_CPG.

* discount Z030: Division + Customer
TYPES:
BEGIN OF t_z030_CUS.
include type t_z030_basic.
TYPES:
  SPART LIKE KOMG-SPART,    " division
  KUNNR LIKE KOMG-KUNNR,    " Customer
  DATAB LIKE A004-DATAB,
  DATBI LIKE A004-DATBI,
  KBETR LIKE KONP-KBETR,    " Ammount
END OF t_z030_CUS,

* discount Z030: Division + Material
BEGIN OF t_z030_MAT.
include type t_z030_basic.
TYPES:
  SPART LIKE KOMG-SPART,    " division
  matnr LIKE mara-matnr,
  DATAB LIKE A004-DATAB,
  DATBI LIKE A004-DATBI,
  KBETR LIKE KONP-KBETR,    " Ammount
END OF t_z030_MAT,

* discount Z030: division + PGC
BEGIN OF t_z030_PGC.
include type t_z030_basic.
TYPES:
  SPART LIKE KOMG-SPART,    " division
  PGC   LIKE T2504-WW007,
  DATAB LIKE A004-DATAB,
  DATBI LIKE A004-DATBI,
  KBETR LIKE KONP-KBETR,    " Ammount
END OF t_z030_PGC,

* discount Z030: division + Material Pricing Group
BEGIN OF t_z030_MPG.
include type t_z030_basic.
TYPES:
  SPART LIKE KOMG-SPART,    " division
  kondm LIKE t178-kondm,  " MatPrGr
  DATAB LIKE A004-DATAB,
  DATBI LIKE A004-DATBI,
  KBETR LIKE KONP-KBETR,    " Ammount
END OF t_z030_MPG,


* discount Z030: division + Material Pricing Group + Customer
BEGIN OF t_z030_MPC.
include type t_z030_basic.
TYPES:
  SPART LIKE KOMG-SPART,    " division
  KUNNR LIKE KOMG-KUNNR,    " Customer
  kondm LIKE t178-kondm,  " MatPrGr
  DATAB LIKE A004-DATAB,
  DATBI LIKE A004-DATBI,
  KBETR LIKE KONP-KBETR,    " Ammount
END OF t_z030_MPC,



* END OF Z030

BEGIN OF T_A953,
  KSCHL LIKE A004-KSCHL,
  VKORG LIKE A004-VKORG,
  VTWEG LIKE A004-VTWEG,
  SPART LIKE A953-SPART,
  PLTYP LIKE A953-PLTYP,
  MATNR LIKE A004-MATNR,
  DATAB LIKE A004-DATAB,
  DATBI LIKE A004-DATBI,
  KBETR(40),
  KONWA LIKE KONP-KONWA,
  KPEIN(10),
   KMEIN LIKE KONP-KMEIN,
  KZNEP LIKE KONP-KZNEP,

  END OF T_A953.

TYPES: BEGIN OF T_A950,
  KSCHL LIKE A004-KSCHL,
  VKORG LIKE A004-VKORG,
  VTWEG LIKE A004-VTWEG,
  SPART LIKE A953-SPART,
  KUNNR LIKE A950-KUNNR,
  MATNR LIKE A004-MATNR,
  DATAB LIKE A004-DATAB,
  DATBI LIKE A004-DATBI,
  KBETR(40),
  KONWA LIKE KONP-KONWA,
  KPEIN(10),
  KMEIN LIKE KONP-KMEIN,
  KZNEP LIKE KONP-KZNEP,

  END OF T_A950.

TYPES: BEGIN OF t_a304,
  KSCHL LIKE A004-KSCHL,
  VKORG LIKE A004-VKORG,
  VTWEG LIKE A004-VTWEG,
  MATNR LIKE A004-MATNR,
  DATBI LIKE A004-DATBI,
  DATAB LIKE A004-DATAB,
  KBETR(40),
  KONWA LIKE KONP-KONWA,
* end of upload content
* kpein LIKE konp-kpein,
* kmein LIKE konp-kmein,
  END OF t_a304.


TYPES: BEGIN OF T_PRICE,
   FIELD1(40),
   FIELD2(40),
   FIELD3(40),
   FIELD4(40),
   FIELD5(40),
   FIELD6(40),
   FIELD7(40),
   FIELD8(40),
   FIELD9(40),
   FIELD10(40),
   FIELD11(40),
   FIELD12(40),
   FIELD13(40),
*   STRING(1000),


  END OF T_PRICE.

TYPES:
  BEGIN OF T_PRICE_LINE,
    FIELD1(40),
    FIELD2(40),
    FIELD3(40),
    FIELD4(40),
    FIELD5(40),
    FIELD6(40),
    FIELD7(40),
    FIELD8(40),
    FIELD9(40),
    FIELD10(40),
    FIELD11(40),
    FIELD12(40),
    FIELD13(40),
  END OF T_PRICE_LINE.




************************************************************************
*                   V A R I A B L E S                                  *
************************************************************************
DATA: GV_TABIX TYPE SYTABIX.
DATA: WA_A954 TYPE T_A954 .
DATA: WA_A953 TYPE T_A953.
DATA: WA_A950 TYPE T_A950.
DATA: WA_PRICE_LINT TYPE T_PRICE_LINE.
************************************************************************
*                  I N T E R N A L   T A B L E S                       *
************************************************************************
DATA: IT_A954 TYPE TABLE OF T_A954 WITH HEADER LINE.
DATA: IT_A953 TYPE TABLE OF T_A953 WITH HEADER LINE.
DATA: IT_A950 TYPE TABLE OF T_A950 WITH HEADER LINE.
DATA: IT_PRICE TYPE TABLE OF T_PRICE WITH HEADER LINE.

* IT for selection screen
DATA:  BEGIN OF XT_DISCTF4 OCCURS 0,
        val LIKE yse_sd_billrelev-auart,
        text TYPE POSRABWERT,
       END OF xt_disctf4.

DATA:  BEGIN OF XT_KSCHL OCCURS 0,
        val LIKE A954-KSCHL,
        text TYPE POSRABWERT,
       END OF xt_kschl.

DATA: xt_t685t TYPE TABLE OF t685t,
      xv_t685t LIKE LINE OF xt_t685t.

DATA: xv_spras LIKE t685t-spras,
      xv_comm1(80).

RANGES: xr_kschl FOR t685-kschl.

************************************************************************
*                  FIELD-SYMBOLS                       *
************************************************************************

FIELD-SYMBOLS  : <FS>,  <A954> TYPE T_A954, <A953> TYPE T_A953,
                 <A304> TYPE T_A304, <A950> TYPE T_A950,
                <loop>,
                <Z030MAT> TYPE T_Z030_MAT,
                <Z030PGC> TYPE T_Z030_PGC,
                <Z030CUS> TYPE T_Z030_CUS,
                <Z030CPG> TYPE T_Z030_CPG,
                <Z030MPG> TYPE T_Z030_MPG,
                <Z030MPC> TYPE T_Z030_MPC.
.
************************************************************************
*       S E L E C T - O P T I O N S / P A R A M E T E R S              *
************************************************************************

SELECTION-SCREEN : BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.

PARAMETERS: P_KSCHL LIKE A954-KSCHL OBLIGATORY. " DEFAULT 'ZPRO'.


  PARAMETERS: P_DISCT(3) TYPE c MODIF ID Z30.
  SELECTION-SCREEN COMMENT 45(79) text-t06 MODIF ID Z30 FOR FIELD P_DISCT.

* SELECTION-SCREEN BEGIN OF LINE.
*  SELECTION-SCREEN COMMENT 1(30) text-t07 MODIF ID Z30 FOR FIELD P_DISCT.
*  PARAMETERS: P_DISCT(3) TYPE c MODIF ID Z30.
*  PARAMETERS: p_text(79) DEFAULT xv_comm1 MODIF ID Z30.
* SELECTION-SCREEN END OF LINE.




PARAMETERS: P_UPFILE LIKE RLGRAP-FILENAME
        DEFAULT 'c:\temp\prices.txt' OBLIGATORY.

*PARAMETERS: p_del TYPE checkbox.

SELECTION-SCREEN : END OF BLOCK B1.

PARAMETERS:
  P_HEADER TYPE C AS CHECKBOX DEFAULT ''.

SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-T01.
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS:
  R_COMMA  LIKE KCD_DOKU_STRUC-DECIMAL_SEP RADIOBUTTON GROUP DEC.
SELECTION-SCREEN COMMENT 4(30) TEXT-T02 FOR FIELD R_COMMA.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS:
  R_POINT  LIKE KCD_DOKU_STRUC-DECIMAL_SEP RADIOBUTTON GROUP DEC.
SELECTION-SCREEN COMMENT 4(35) TEXT-T03 FOR FIELD R_POINT.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(21) TEXT-T04.
SELECTION-SCREEN COMMENT 23(60) TEXT-T05.            " DD07V-DDTEXT
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK B2.

SELECTION-SCREEN SKIP 2.



***********
* * AT SELECTION SCREEN
*-----------------------------------------------------------------------

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_UPFILE.
  PERFORM FILE_LOOKUP USING P_UPFILE.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_KSCHL.
  PERFORM set_f4  TABLES  xt_kschl
                  USING 'Price condition type'(004)
                  CHANGING p_kschl.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_DISCT.
  PERFORM set_f4  TABLES  xt_disctf4
                  USING 'Discount type'(002)
                  CHANGING p_disct.



AT SELECTION-SCREEN ON HELP-REQUEST FOR p_disct.
  perform display_help.

*  CASE p_disct.
*     WHEN 'MAT'. xv_comm1 = 'KSCHL / VKORG / VTWEG / SPART / MATNR / YYYMMDD / YYMMDD / KBETR '.
*     WHEN 'PGC'. xv_comm1 = 'KSCHL / VKORG / VTWEG / SPART / PGV / YYYMMDD / YYMMDD / KBETR '.
*     WHEN 'CUS'. xv_comm1 = 'KSCHL / VKORG / VTWEG / SPART / KUNNR / YYYMMDD / YYMMDD / KBETR '.
*     WHEN 'CPG'. xv_comm1 = 'KSCHL / VKORG / VTWEG / SPART / PGC / YYYMMDD / YYMMDD / KUNNR / KBETR  '.
*     WHEN 'MPG'. xv_comm1 = 'KSCHL / VKORG / VTWEG / KONDM / YYYMMDD / YYMMDD / KBETR '.
*     WHEN OTHERS.    xv_comm1 = 'Please select a valid option'(T06).
*  ENDCASE.

AT SELECTION-SCREEN ON HELP-REQUEST FOR p_kschl.
  perform display_help.

AT SELECTION-SCREEN OUTPUT. " ON P_KSCHL.

  LOOP AT SCREEN.
    IF SCREEN-GROUP1 = 'Z30'.
      IF p_kschl = 'Z030'.
        SCREEN-ACTIVE = 1.
*        SCREEN-REQUIRED = 1.
      ELSE.
        SCREEN-ACTIVE = 0.
        SCREEN-REQUIRED = 0.
      ENDIF.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.



********************************************************************
LOAD-OF-PROGRAM.
  INCLUDE YSE_BDCRECX1.
********************************************************************
INITIALIZATION.
  p_kschl = ''.
  xv_comm1 = text-t06.

* Set data for F4 Help
  REFRESH xt_disctf4.

  xt_disctf4-val = 'MPC'.    xt_disctf4-text = 'SOrg - DCh - Div - MatPrGrp - Customer'. APPEND xt_disctf4.
  xt_disctf4-val = 'CPG'.    xt_disctf4-text = 'Sorg - Dch - Div - Cust - PGC'.         APPEND xt_disctf4.
  xt_disctf4-val = 'CUS'.    xt_disctf4-text = 'Division / Customer'.                   APPEND xt_disctf4.
  xt_disctf4-val = 'MAT'.    xt_disctf4-text = 'Sales org./Distr. Chl/Division/Material'. APPEND xt_disctf4.
  xt_disctf4-val = 'MPG'.    xt_disctf4-text = 'SOrg - DCh - Div - MatPrGrp'.            APPEND xt_disctf4.
  xt_disctf4-val = 'PGC'.    xt_disctf4-text = 'SOrg - DCh - Div - PGC'.                APPEND xt_disctf4.

* List of price conditions

  refresh xr_kschl.
  xr_kschl-sign = 'I'.
  xr_kschl-option = 'EQ'.
  xr_kschl-low = 'Z030'. APPEND xr_kschl.
  xr_kschl-low = 'ZPRO'. APPEND xr_kschl.
  xr_kschl-low = 'Z105'. APPEND xr_kschl.
  xr_kschl-low = 'ZPBO'. APPEND xr_kschl.
  xr_kschl-low = 'ZN00'. APPEND xr_kschl.

  SELECT * FROM t685t INTO TABLE xt_t685t
      WHERE kschl IN xr_kschl
        AND kvewe = 'A'
        AND kappl = 'V'.
  SORT xt_t685t BY kschl spras.

  CALL FUNCTION 'CONVERSION_EXIT_ISOLA_INPUT'
    EXPORTING
      INPUT                  = sy-langu
    IMPORTING
     OUTPUT                 = xv_spras
            .

  REFRESH xt_kschl.
  LOOP AT xr_kschl.
    READ TABLE xt_t685t INTO xv_t685t WITH KEY kschl = xr_kschl-low spras = xv_spras BINARY SEARCH.
    IF sy-subrc <> 0.
      READ TABLE xt_t685t INTO xv_t685t WITH KEY kschl = xr_kschl-low spras = 'E' BINARY SEARCH.
    ENDIF.
    xt_kschl-val = xv_t685t-kschl.    xt_kschl-text = xv_t685t-vtext.
    APPEND xt_kschl.
  ENDLOOP.

  REFRESH xt_t685t.



************************************************************************
*       S T A R T - O F - S E L E C T I O N                            *
************************************************************************


START-OF-SELECTION.

  IF p_kschl = 'Z030' AND p_disct IS INITIAL.
    MESSAGE I000 WITH 'Discount type is a requried field'.
    CALL SELECTION-SCREEN 1000.
  ENDIF.

*   Set default call transaction settings
  ctu = 'X'.
  CTUMODE = 'N'.
  keep = 'X'.
  SMALLLOG = ''.
  PERFORM UPLOAD_PRICES USING P_UPFILE P_KSCHL.

  PERFORM CLOSE_GROUP.

*&---------------------------------------------------------------------*
*&      Form  upload_prices
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_UPFILE  text
*----------------------------------------------------------------------*
FORM UPLOAD_PRICES  USING    P_P_UPFILE
                             P_P_KSCHL.

  DATA: LV_FILE TYPE STRING,
        LV_TAB TYPE ITAB OCCURS 0 WITH HEADER LINE,
        LINETYPE TYPE STRING,
        DREF TYPE REF TO DATA,
        DREF2 TYPE REF TO DATA,
        lv_tabix LIKE sy-tabix,
        lv_var(8)  type c,
        lv_kbetr(12) type c,
*        lv_curr TYPE konp-konwa,
        TABNAME  TYPE TABNAME.

  FIELD-SYMBOLS: <TAB> TYPE TABLE ,
                 <F1> TYPE LINE.

  LV_FILE = P_P_UPFILE.

  CASE  P_P_KSCHL.

    WHEN 'Z030'.
      CASE p_disct.
        WHEN 'MAT'.
          LINETYPE = 'T_Z030_MAT'.
        WHEN 'PGC'.
          LINETYPE = 'T_Z030_PGC'.
        WHEN 'CUS'.
          LINETYPE = 'T_Z030_CUS'.
        WHEN 'CPG'.
          LINETYPE = 'T_Z030_CPG'.
        WHEN 'MPG'.
          LINETYPE = 'T_Z030_MPG'.
        WHEN 'MPC'.
          LINETYPE = 'T_Z030_MPC'.
        WHEN OTHERS.
          MESSAGE E000 WITH 'Please use another discount type'.
      ENDCASE.
    WHEN 'ZPRO'.
      LINETYPE = 'T_A954'.
    WHEN 'Z105'.                                            "DUD080303
      LINETYPE = 'T_A304'.
    WHEN 'ZPBO'.
      LINETYPE = 'T_A953'.
    WHEN 'ZN00'.
      LINETYPE = 'T_A950'.
    WHEN OTHERS.
      MESSAGE E000 WITH 'Please use another condition type'.
  ENDCASE.

*  " Create STANDARD table and attach a field-symbol
  CREATE DATA DREF TYPE TABLE OF (LINETYPE).
  ASSIGN DREF->* TO <TAB>.

*
  CALL FUNCTION 'GUI_UPLOAD'
    EXPORTING
      FILENAME                = LV_FILE
      FILETYPE                = 'ASC'
      HAS_FIELD_SEPARATOR     = 'X'
    TABLES
      DATA_TAB                = <TAB>
    EXCEPTIONS
      FILE_OPEN_ERROR         = 1
      FILE_READ_ERROR         = 2
      NO_BATCH                = 3
      GUI_REFUSE_FILETRANSFER = 4
      INVALID_TYPE            = 5
      NO_AUTHORITY            = 6
      UNKNOWN_ERROR           = 7
      BAD_DATA_FORMAT         = 8
      HEADER_NOT_ALLOWED      = 9
      SEPARATOR_NOT_ALLOWED   = 10
      HEADER_TOO_LONG         = 11
      UNKNOWN_DP_ERROR        = 12
      ACCESS_DENIED           = 13
      DP_OUT_OF_MEMORY        = 14
      DISK_FULL               = 15
      DP_TIMEOUT              = 16
      OTHERS                  = 17.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.

  ELSE.

    IF P_HEADER = 'X'.
      DELETE <TAB> INDEX 1.
    ENDIF.

*Check if the data provided in the file is correct concerning the price
*if not show message
    SELECT SINGLE * FROM USR01 INTO USR01
               WHERE BNAME EQ SY-UNAME.

    CASE   P_P_KSCHL .
      WHEN  'Z030'.
        CASE p_disct.
          WHEN 'MAT'.
            LOOP AT <TAB> ASSIGNING <Z030MAT>.
              lv_tabix = sy-tabix.
*              * Check VKORG-VTWEG (sales org/distr. Ch.) combination must exist in table TVKOV
              perform check_VKORG_VTWEG USING <Z030MAT>-vkorg
                                              <Z030MAT>-vtweg lv_tabix.
*              * Check MATNR must exist in MVKE with VKORG and VTWEG
              perform check_matnr USING       <Z030MAT>-matnr
                                              <Z030MAT>-vkorg
                                              <Z030MAT>-vtweg lv_tabix.
*              * 0 < KBETR > 100
              IF                        NOT ( <Z030MAT>-kbetr > 0
                                          AND <Z030MAT>-kbetr < 100 ).
                MESSAGE E215(YSE_SALES_LOG)
                                WITH lv_tabix <Z030MAT>-kbetr.
              ENDIF.
              PERFORM CHECK_DATEFORMAT USING  <Z030MAT>-datab
                                              <Z030MAT>-datbi  lv_tabix.
            ENDLOOP.

          WHEN 'PGC'.
            LOOP AT <TAB> ASSIGNING  <Z030PGC>.
              lv_tabix = sy-tabix.
*              * Check PGC code
              perform check_pgc USING         <Z030PGC>-pgc sy-tabix.

*              * Check VKORG-VTWEG (sales org/distr. Ch.) combination must exist in table TVKOV
              perform check_VKORG_VTWEG USING <Z030PGC>-vkorg
                                              <Z030PGC>-vtweg lv_tabix.

*              * 0 < KBETR > 100
              IF   NOT                      ( <Z030PGC>-kbetr > 0 AND
                                              <Z030PGC>-kbetr < 100 ).
                MESSAGE E215(YSE_SALES_LOG)
                                WITH lv_tabix <Z030PGC>-kbetr.
              ENDIF.
              PERFORM CHECK_DATEFORMAT USING  <Z030PGC>-datab
                                              <Z030PGC>-datbi  lv_tabix.
            ENDLOOP.

          WHEN 'CUS'.
            LOOP AT <TAB> ASSIGNING  <Z030CUS>.
              lv_tabix = sy-tabix.
*              * Check VKORG-VTWEG (sales org/distr. Ch.) combination must exist in table TVKOV
              perform check_VKORG_VTWEG USING     <Z030CUS>-vkorg
                                                  <Z030CUS>-vtweg lv_tabix.

*              * KUNNR must exist in table KNVV for given VKORG and VTWEG and SPART
              perform check_kunnr USING           <Z030CUS>-kunnr
                                                  <Z030CUS>-vkorg
                                                  <Z030CUS>-vtweg
                                                  <Z030CUS>-spart lv_tabix.
*              * 0 < KBETR > 100
              IF NOT                            ( <Z030CUS>-kbetr > 0 AND
                                                  <Z030CUS>-kbetr < 100 ).
                MESSAGE E215(YSE_SALES_LOG)
                                    WITH lv_tabix <Z030CUS>-kbetr.
              ENDIF.
              PERFORM CHECK_DATEFORMAT USING      <Z030CUS>-datab
                                                  <Z030CUS>-datbi  lv_tabix.

            ENDLOOP.

          WHEN 'CPG'.
            LOOP AT <TAB> ASSIGNING  <Z030CPG>.
              lv_tabix = sy-tabix.
*              * Check PGC code
              perform check_pgc USING         <Z030CPG>-pgc sy-tabix.

*              * Check VKORG-VTWEG (sales org/distr. Ch.) combination must exist in table TVKOV
              perform check_VKORG_VTWEG USING <Z030CPG>-vkorg
                                              <Z030CPG>-vtweg lv_tabix.

*              * KUNNR must exist in table KNVV for given VKORG and VTWEG and SPART
              perform check_kunnr USING       <Z030CPG>-kunnr
                                              <Z030CPG>-vkorg
                                              <Z030CPG>-vtweg
                                              <Z030CPG>-spart lv_tabix.
*              * 0 < KBETR > 100
              IF NOT                        ( <Z030CPG>-kbetr > 0 AND
                                              <Z030CPG>-kbetr < 100 ).
                MESSAGE E215(YSE_SALES_LOG)
                                WITH lv_tabix <Z030CPG>-kbetr.
              ENDIF.
              PERFORM CHECK_DATEFORMAT USING  <Z030CPG>-datab
                                              <Z030CPG>-datbi  lv_tabix.

            ENDLOOP.

          WHEN 'MPG'.
            LOOP AT <TAB> ASSIGNING  <Z030MPG>.
              lv_tabix = sy-tabix.
*              * Check VKORG-VTWEG (sales org/distr. Ch.) combination must exist in table TVKOV
              perform check_VKORG_VTWEG USING <Z030MPG>-vkorg
                                              <Z030MPG>-vtweg lv_tabix.

*              * KONDM value must exist in table T178
              perform check_kondm USING       <z030MPG>-kondm lv_tabix.

*              * 0 < KBETR > 100
              IF NOT                        ( <Z030MPG>-kbetr > 0 AND
                                              <Z030MPG>-kbetr < 100 ).
                MESSAGE E215(YSE_SALES_LOG) WITH lv_tabix
                                              <Z030MPG>-kbetr.
              ENDIF.
              PERFORM CHECK_DATEFORMAT USING  <Z030MPG>-datab
                                              <Z030MPG>-datbi  lv_tabix.

            ENDLOOP.
          WHEN 'MPC'.
            LOOP AT <TAB> ASSIGNING  <Z030MPC>.
              lv_tabix = sy-tabix.
*              * Check VKORG-VTWEG (sales org/distr. Ch.) combination must exist in table TVKOV
              perform check_VKORG_VTWEG USING <Z030MPC>-vkorg
                                              <Z030MPC>-vtweg lv_tabix.

*              * KUNNR must exist in table KNVV for given VKORG and VTWEG and SPART
              perform check_kunnr USING       <Z030MPC>-kunnr
                                              <Z030MPC>-vkorg
                                              <Z030MPC>-vtweg
                                              <Z030MPC>-spart lv_tabix.

*              * KONDM value must exist in table T178
              perform check_kondm USING       <z030MPC>-kondm lv_tabix.

*              * 0 < KBETR > 100
              IF NOT                        ( <Z030MPC>-kbetr > 0 AND
                                              <Z030MPC>-kbetr < 100 ).
                MESSAGE E215(YSE_SALES_LOG) WITH lv_tabix
                                              <Z030MPC>-kbetr.
              ENDIF.
              PERFORM CHECK_DATEFORMAT USING  <Z030MPC>-datab
                                              <Z030MPC>-datbi  lv_tabix.


            ENDLOOP.
          WHEN OTHERS.
              MESSAGE E000 WITH 'Unexpected parameter value'.

        ENDCASE.

      WHEN  'ZPRO'.
        LOOP AT <TAB> ASSIGNING  <A954> .
          PERFORM CHECK_CONDITION_TYPE USING      <A954>-kschl sy-tabix.
          PERFORM CHECK_NOTATION_GENERAL CHANGING <A954>-kbetr.
        ENDLOOP.

      WHEN 'Z105'.                                          "DUD080303
        LOOP AT <TAB> ASSIGNING  <A304> .
          PERFORM CHECK_CONDITION_TYPE USING      <A304>-kschl sy-tabix.
          PERFORM CHECK_NOTATION_GENERAL CHANGING <A304>-kbetr.
        ENDLOOP.

      WHEN 'ZPBO'.
        LOOP AT <TAB> ASSIGNING  <A953> .
          PERFORM CHECK_CONDITION_TYPE USING <A953>-kschl sy-tabix.
          PERFORM CHECK_NOTATION_GENERAL CHANGING <A953>-kbetr.
        ENDLOOP.

      WHEN 'ZN00'.
        LOOP AT <TAB> ASSIGNING  <A950> .
          PERFORM CHECK_CONDITION_TYPE USING <A950>-kschl sy-tabix.
          PERFORM CHECK_NOTATION_GENERAL CHANGING <A950>-kbetr.
        ENDLOOP.

    ENDCASE.
*--------------------------------------------------------------*
* B U I L D     B D C                                          *
*--------------------------------------------------------------*


    PERFORM OPEN_GROUP.
    CASE   P_P_KSCHL .
      WHEN 'Z030'.
        CASE p_disct.
* Z030 / MAT   - Material
          WHEN 'MAT'.
            LOOP AT <TAB> ASSIGNING <Z030MAT>.
              GV_TABIX = SY-TABIX.
              PERFORM bdc_selscreen.
              PERFORM BDC_DYNPRO USING 'SAPLV14A' '0100' .
              PERFORM BDC_FIELD  USING 'BDC_OKCODE' '=WEIT'.
              PERFORM BDC_FIELD  USING 'RV130-SELKZ(04)' 'X'.              "4th option

              PERFORM BDC_DYNPRO USING 'SAPMV13A' '1955'.                  "For MAT
*             PERFORM BDC_FIELD  USING 'BDC_CURSOR' 'RV13A-DATBI(01)'.
              PERFORM BDC_FIELD  USING 'BDC_OKCODE' '=SICH'.
              PERFORM BDC_FIELD  USING 'KOMG-VKORG'      <Z030MAT>-VKORG.  "sales org
              PERFORM BDC_FIELD  USING 'KOMG-VTWEG'      <Z030MAT>-VTWEG.  "distr channel
              PERFORM BDC_FIELD  USING 'KOMG-MATNR(01)'  <Z030MAT>-MATNR.

              WRITE                                      <Z030MAT>-KBETR TO lv_kbetr.
              PERFORM BDC_FIELD  USING 'KONP-KBETR(01)'  lv_kbetr.  "Ammount
              PERFORM bdc_setdates USING                 <Z030MAT>-DATAB
                                                         <Z030MAT>-DATBI.
              PERFORM Z_BDC_TRANSACTION USING 'VK11'.
            ENDLOOP.
* Z030 / PGC   - division + PGC
          WHEN 'PGC'.
            LOOP AT <TAB> ASSIGNING  <Z030PGC>.
              GV_TABIX = SY-TABIX.
              PERFORM bdc_selscreen.
              PERFORM BDC_DYNPRO USING 'SAPLV14A' '0100' .
              PERFORM BDC_FIELD  USING 'BDC_OKCODE' '=WEIT'.
              PERFORM BDC_FIELD  USING 'RV130-SELKZ(06)' 'X'.

              PERFORM BDC_DYNPRO USING 'SAPMV13A' '1952'.                  " For MAT
              PERFORM BDC_FIELD  USING 'BDC_OKCODE' '=SICH'.
              PERFORM BDC_FIELD  USING 'KOMG-VKORG'      <Z030PGC>-VKORG.  "sales org
              PERFORM BDC_FIELD  USING 'KOMG-VTWEG'      <Z030PGC>-VTWEG.  "distr channel
              PERFORM BDC_FIELD  USING 'KOMG-SPART'      <Z030PGC>-SPART.  "division
              PERFORM BDC_FIELD  USING 'KOMG-PRODH2(01)' <Z030PGC>-PGC.    "PGC
              WRITE                                      <Z030PGC>-KBETR TO lv_kbetr.
              PERFORM BDC_FIELD  USING 'KONP-KBETR(01)'  lv_kbetr.  "Ammount
              PERFORM bdc_setdates USING                 <Z030PGC>-DATAB
                                                         <Z030PGC>-DATBI.
              PERFORM Z_BDC_TRANSACTION USING 'VK11'.
            ENDLOOP.
* Z030 / CUS   - division + PGC
          WHEN 'CUS'.
            LOOP AT <TAB> ASSIGNING  <Z030CUS>.
              GV_TABIX = SY-TABIX.
              PERFORM bdc_selscreen.
              PERFORM BDC_DYNPRO USING 'SAPLV14A' '0100' .
              PERFORM BDC_FIELD  USING 'BDC_OKCODE' '=WEIT'.
              PERFORM BDC_FIELD  USING 'RV130-SELKZ(03)' 'X'.

              PERFORM BDC_DYNPRO USING 'SAPMV13A' '1007'.                  " For MAT
              PERFORM BDC_FIELD  USING 'BDC_OKCODE' '=SICH'.
              PERFORM BDC_FIELD  USING 'KOMG-VKORG'      <Z030CUS>-VKORG.  "sales org
              PERFORM BDC_FIELD  USING 'KOMG-VTWEG'      <Z030CUS>-VTWEG.  "distr channel
              PERFORM BDC_FIELD  USING 'KOMG-SPART'      <Z030CUS>-SPART.  "division
              PERFORM BDC_FIELD  USING 'KOMG-KUNNR(01)'  <Z030CUS>-kunnr.  "Kunnr
              WRITE                                      <Z030CUS>-KBETR TO lv_kbetr.
              PERFORM BDC_FIELD  USING 'KONP-KBETR(01)'  lv_kbetr.  "Ammount
              PERFORM bdc_setdates USING                 <Z030CUS>-DATAB
                                                         <Z030CUS>-DATBI.
              PERFORM Z_BDC_TRANSACTION USING 'VK11'.
            ENDLOOP.
* Z030 / CPG  - Customer + PGC
          WHEN 'CPG'.                  " customer + pgc
            LOOP AT <TAB> ASSIGNING  <Z030CPG>.
              GV_TABIX = SY-TABIX.
              PERFORM bdc_selscreen.
              PERFORM BDC_DYNPRO USING 'SAPLV14A' '0100' .
              PERFORM BDC_FIELD  USING 'BDC_OKCODE' '=WEIT'.
              PERFORM BDC_FIELD  USING 'RV130-SELKZ(02)' 'X'.

              PERFORM BDC_DYNPRO USING 'SAPMV13A' '1951'.                  " For MAT
              PERFORM BDC_FIELD  USING 'BDC_OKCODE' '=SICH'.
              PERFORM BDC_FIELD  USING 'KOMG-VKORG'      <Z030CPG>-VKORG.  "sales org
              PERFORM BDC_FIELD  USING 'KOMG-VTWEG'      <Z030CPG>-VTWEG.  "distr channel
              PERFORM BDC_FIELD  USING 'KOMG-SPART'      <Z030CPG>-SPART.  "division
              PERFORM BDC_FIELD  USING 'KOMG-KUNNR'      <Z030CPG>-kunnr.  "Kunnr
              PERFORM BDC_FIELD  USING 'KOMG-PRODH2(01)' <Z030CPG>-PGC.    "PGC
              WRITE                                      <Z030CPG>-KBETR TO lv_kbetr.
              PERFORM BDC_FIELD  USING 'KONP-KBETR(01)'  lv_kbetr.  "Ammount
              PERFORM bdc_setdates USING                 <Z030CPG>-DATAB
                                                         <Z030CPG>-DATBI.
              PERFORM Z_BDC_TRANSACTION USING 'VK11'.
            ENDLOOP.
* Z030 / MPG  - DIVISION + Material Pricing Group
          WHEN 'MPG'.
            LOOP AT <TAB> ASSIGNING  <Z030MPG>.
              GV_TABIX = SY-TABIX.
              PERFORM bdc_selscreen.
              PERFORM BDC_DYNPRO USING 'SAPLV14A' '0100' .
              PERFORM BDC_FIELD  USING 'BDC_OKCODE' '=WEIT'.
              PERFORM BDC_FIELD  USING 'RV130-SELKZ(05)' 'X'.

              PERFORM BDC_DYNPRO USING 'SAPMV13A' '1957'.                  " For MPG
              PERFORM BDC_FIELD  USING 'BDC_OKCODE'   '=SICH'.
              PERFORM BDC_FIELD  USING 'KOMG-VKORG'      <Z030MPG>-VKORG.  "sales org
              PERFORM BDC_FIELD  USING 'KOMG-VTWEG'      <Z030MPG>-VTWEG.  "distr channel
              PERFORM BDC_FIELD  USING 'KOMG-SPART'      <Z030MPG>-SPART.  "division
              PERFORM BDC_FIELD  USING 'KOMG-KONDM(01)'  <Z030MPG>-kondm.    "Mat Pricing Group
              WRITE                                      <Z030MPG>-KBETR TO lv_kbetr.
              PERFORM BDC_FIELD  USING 'KONP-KBETR(01)'  lv_kbetr.  "Ammount
              PERFORM bdc_setdates USING                 <Z030MPG>-DATAB
                                                         <Z030MPG>-DATBI.
              PERFORM Z_BDC_TRANSACTION USING 'VK11'.
            ENDLOOP.
* Z030 / MPG  - DIVISION + Material Pricing Group + Customer
          WHEN 'MPC'.
            LOOP AT <TAB> ASSIGNING  <Z030MPC>.
              GV_TABIX = SY-TABIX.
              PERFORM bdc_selscreen.
              PERFORM BDC_DYNPRO USING 'SAPLV14A' '0100' .
              PERFORM BDC_FIELD  USING 'BDC_OKCODE' '=WEIT'.
              PERFORM BDC_FIELD  USING 'RV130-SELKZ(01)' 'X'.

              PERFORM BDC_DYNPRO USING 'SAPMV13A' '1956'.                  " For MAT
              PERFORM BDC_FIELD  USING 'BDC_OKCODE' '=SICH'.
              PERFORM BDC_FIELD  USING 'KOMG-VKORG'      <Z030MPC>-VKORG.  "sales org
              PERFORM BDC_FIELD  USING 'KOMG-VTWEG'      <Z030MPC>-VTWEG.  "distr channel
              PERFORM BDC_FIELD  USING 'KOMG-SPART'      <Z030MPC>-SPART.  "division
              PERFORM BDC_FIELD  USING 'KOMG-KONDM'      <Z030MPC>-kondm.    "Mat Pricing Group
              PERFORM BDC_FIELD  USING 'KOMG-KUNNR(01)'  <Z030MPC>-kunnr.  "Kunnr
              WRITE                                      <Z030MPC>-KBETR TO lv_kbetr.
              PERFORM BDC_FIELD  USING 'KONP-KBETR(01)'  lv_kbetr.  "Ammount
              PERFORM bdc_setdates USING                 <Z030MPC>-DATAB
                                                         <Z030MPC>-DATBI.
              PERFORM Z_BDC_TRANSACTION USING 'VK11'.
            ENDLOOP.
        ENDCASE.

      WHEN 'ZPRO'.
        LOOP AT <TAB> ASSIGNING  <A954> .
          GV_TABIX = SY-TABIX.
          PERFORM bdc_selscreen.

          PERFORM BDC_DYNPRO USING 'SAPLV14A' '0100' .
          PERFORM BDC_FIELD  USING 'RV130-SELKZ(06)' 'X'.
          PERFORM BDC_FIELD  USING 'BDC_OKCODE' '=WEIT'.
          PERFORM BDC_DYNPRO USING 'SAPMV13A' '1954'.       " '1004'.
          PERFORM BDC_FIELD  USING 'BDC_CURSOR' 'RV13A-DATBI(01)'.
          PERFORM BDC_FIELD  USING 'BDC_OKCODE' '=SICH'.
          PERFORM BDC_FIELD  USING 'KOMG-VKORG' <A954>-VKORG.
          PERFORM BDC_FIELD  USING 'KOMG-SPART' <A954>-SPART.
          PERFORM BDC_FIELD  USING 'KOMG-MATNR(01)' <A954>-MATNR.
*         INPUT FILE HAS . INSTEAD OF ,
*          REPLACE  '.' IN   <A954>-KBETR WITH ',' .
          PERFORM BDC_FIELD  USING 'KONP-KBETR(01)' <A954>-KBETR.
          PERFORM BDC_FIELD  USING 'KONP-KONWA(01)' <A954>-KONWA.
          PERFORM BDC_FIELD  USING 'KONP-KPEIN(01)' <A954>-KPEIN.
          PERFORM BDC_FIELD  USING 'KONP-KMEIN(01)' <A954>-KMEIN.
          PERFORM BDC_FIELD  USING 'KONP-KZNEP(01)' <A954>-KZNEP.

          PERFORM bdc_setdates USING                <A954>-DATAB
                                                    <A954>-DATBI.
          PERFORM Z_BDC_TRANSACTION USING 'VK11'.

        ENDLOOP.

      WHEN 'ZPBO'.

        LOOP AT <TAB> ASSIGNING  <A953>.
          GV_TABIX = SY-TABIX.
          PERFORM bdc_selscreen.
          PERFORM BDC_DYNPRO USING 'SAPLV14A' '0100' .
          PERFORM BDC_FIELD  USING 'RV130-SELKZ(02)' 'X'.
          PERFORM BDC_FIELD  USING 'BDC_OKCODE' '=WEIT'.
          PERFORM BDC_DYNPRO USING 'SAPMV13A' '1953'.
          PERFORM BDC_FIELD  USING 'BDC_CURSOR' 'KOMG-PLTYP'.
          PERFORM BDC_FIELD  USING 'BDC_OKCODE' '=SICH'.
          PERFORM BDC_FIELD  USING 'KOMG-VKORG' <A953>-VKORG.
          PERFORM BDC_FIELD  USING 'KOMG-VTWEG' <A953>-VTWEG.
          PERFORM BDC_FIELD  USING 'KOMG-SPART' <A953>-SPART.
          PERFORM BDC_FIELD  USING 'KOMG-PLTYP' <A953>-PLTYP.
          PERFORM BDC_FIELD  USING 'KOMG-MATNR(01)' <A953>-MATNR.
*         INPUT FILE HAS . INSTEAD OF ,
*          REPLACE  '.' IN   <A953>-KBETR WITH ',' .
          PERFORM BDC_FIELD  USING 'KONP-KBETR(01)' <A953>-KBETR.
          PERFORM BDC_FIELD  USING 'KONP-KONWA(01)' <A953>-KONWA.
          PERFORM BDC_FIELD  USING 'KONP-KPEIN(01)' <A953>-KPEIN.
          PERFORM BDC_FIELD  USING 'KONP-KMEIN(01)' <A953>-KMEIN.
          PERFORM BDC_FIELD  USING 'KONP-KZNEP(01)' <A953>-KZNEP.
          PERFORM bdc_setdates USING                <A953>-DATAB
                                                    <A953>-DATBI.
          PERFORM Z_BDC_TRANSACTION USING 'VK11'.
        ENDLOOP.

      WHEN 'Z105'.

        LOOP AT <TAB> ASSIGNING  <A304>.
          GV_TABIX = SY-TABIX.
          PERFORM bdc_selscreen.
          PERFORM BDC_DYNPRO USING 'SAPMV13A' '1304' .
          PERFORM BDC_FIELD  USING 'BDC_CURSOR' 'RV13A-DATBI(01)'.
          PERFORM BDC_FIELD  USING 'BDC_OKCODE' '=SICH'.
          PERFORM BDC_FIELD  USING 'KOMG-VKORG'     <A304>-VKORG.
          PERFORM BDC_FIELD  USING 'KOMG-VTWEG'     <A304>-VTWEG.
          PERFORM BDC_FIELD  USING 'KOMG-MATNR(01)' <A304>-MATNR.
          WRITE                                     <A304>-KBETR TO lv_kbetr.
          PERFORM BDC_FIELD  USING 'KONP-KBETR(01)'  lv_kbetr.  "Ammount
          PERFORM BDC_FIELD  USING 'KONP-KONWA(01)' <A304>-KONWA.
          PERFORM bdc_setdates USING                <A304>-DATAB
                                                    <A304>-DATBI.
          PERFORM Z_BDC_TRANSACTION USING 'VK11'.
        ENDLOOP.

      WHEN 'ZN00'.
        LOOP AT <TAB> ASSIGNING  <A950> .
          GV_TABIX = SY-TABIX.
          PERFORM bdc_selscreen.
          PERFORM BDC_DYNPRO USING 'SAPMV13A' '1950'.
          PERFORM BDC_FIELD  USING 'BDC_CURSOR' 'RV13A-DATBI(01)'.
          PERFORM BDC_FIELD  USING 'BDC_OKCODE' '=SICH'.
          PERFORM BDC_FIELD  USING 'KOMG-VKORG' <A950>-VKORG.
          PERFORM BDC_FIELD  USING 'KOMG-VTWEG' <A950>-VTWEG.
          PERFORM BDC_FIELD  USING 'KOMG-SPART' <A950>-SPART.
          PERFORM BDC_FIELD  USING 'KOMG-KUNNR' <A950>-KUNNR.
          PERFORM BDC_FIELD  USING 'KOMG-MATNR(01)' <A950>-MATNR.
*         INPUT FILE HAS . INSTEAD OF ,
*          REPLACE  '.' IN   <A950>-KBETR WITH ',' .
          PERFORM BDC_FIELD  USING 'KONP-KBETR(01)' <A950>-KBETR.
          PERFORM BDC_FIELD  USING 'KONP-KONWA(01)' <A950>-KONWA.
          PERFORM BDC_FIELD  USING 'KONP-KPEIN(01)' <A950>-KPEIN.
          PERFORM BDC_FIELD  USING 'KONP-KMEIN(01)' <A950>-KMEIN.
          PERFORM BDC_FIELD  USING 'KONP-KZNEP(01)' <A950>-KZNEP.
          PERFORM bdc_setdates USING                <A950>-DATAB
                                                    <A950>-DATBI.
          PERFORM Z_BDC_TRANSACTION USING 'VK11'.

        ENDLOOP.

    ENDCASE.

  ENDIF.

ENDFORM.                    " upload_prices




*&---------------------------------------------------------------------*
*&      Form  check_pgc
*&---------------------------------------------------------------------*

FORM check_pgc USING p_pgc p_tabix.
  STATICS: lt_t2504 TYPE TABLE OF t2504.
  DATA:         lv_t2504 TYPE t2504.

  IF lt_t2504[] IS INITIAL.
    SELECT * INTO TABLE lt_t2504 FROM T2504.
    SORT lt_t2504 BY ww007.
  ENDIF.

  READ TABLE lt_t2504 INTO lv_t2504 WITH key ww007 = p_pgc BINARY SEARCH.
  IF sy-subrc <> 0.
    MESSAGE E212(YSE_SALES_LOG) WITH p_tabix p_pgc.
  ENDIF.
ENDFORM.                    "check_pgc


*&---------------------------------------------------------------------*
*&      Form  file_lookup
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_UPFILE  text
*----------------------------------------------------------------------*
FORM FILE_LOOKUP  USING    P_P_UPFILE.

  DATA: LV_FILESEL LIKE IBIPPARMS-PATH.

  CALL FUNCTION 'F4_FILENAME'
    EXPORTING
      PROGRAM_NAME  = SYST-REPID
      DYNPRO_NUMBER = SYST-DYNNR
    IMPORTING
      FILE_NAME     = LV_FILESEL
    EXCEPTIONS
      OTHERS        = 1.

  P_P_UPFILE = LV_FILESEL.

ENDFORM.                    " file_lookup
*&---------------------------------------------------------------------*
*&      Form  CHANGE_DATE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_<A954>_DATAB  text
*----------------------------------------------------------------------*
FORM CHANGE_DATE  CHANGING P_DATE.

  DATA: LV_DATE(8).

  LV_DATE(2) = P_DATE+6(2).
  LV_DATE+2(2) = P_DATE+4(2).
  LV_DATE+4(4) = P_DATE(4).

  MOVE LV_DATE TO P_DATE.

ENDFORM.                    " CHANGE_DATE


*&---------------------------------------------------------------------*
*&      Form  z_bdc_transaction
*&---------------------------------------------------------------------*
FORM Z_BDC_TRANSACTION USING TCODE.
  DATA: L_MSTRING(480).
  DATA: L_SUBRC LIKE SY-SUBRC.
* batch input session
  IF SESSION = 'X'.
    CALL FUNCTION 'BDC_INSERT'
      EXPORTING
        TCODE     = TCODE
      TABLES
        DYNPROTAB = BDCDATA.
    IF SMALLLOG <> 'X'.
      WRITE: / 'BDC_INSERT'(I03),
               TCODE,
               'returncode:'(I05),
               SY-SUBRC,
               'RECORD:',
               SY-INDEX.
    ENDIF.
* call transaction using
  ELSE.
    REFRESH MESSTAB.
    CALL TRANSACTION TCODE USING BDCDATA
                     MODE   CTUMODE
                     UPDATE CUPDATE
                     MESSAGES INTO MESSTAB.

    L_SUBRC = SY-SUBRC.
    IF SMALLLOG <> 'X'.
      WRITE: / 'Record:',
               GV_TABIX,
               'call transaction',
               TCODE,
               'returncode:'(I05),
               L_SUBRC.
      LOOP AT MESSTAB.
        SELECT SINGLE * FROM T100 WHERE SPRSL = MESSTAB-MSGSPRA
                                  AND   ARBGB = MESSTAB-MSGID
                                  AND   MSGNR = MESSTAB-MSGNR.
        IF SY-SUBRC = 0.
          L_MSTRING = T100-TEXT.
          IF L_MSTRING CS '&1'.
            REPLACE '&1' WITH MESSTAB-MSGV1 INTO L_MSTRING.
            REPLACE '&2' WITH MESSTAB-MSGV2 INTO L_MSTRING.
            REPLACE '&3' WITH MESSTAB-MSGV3 INTO L_MSTRING.
            REPLACE '&4' WITH MESSTAB-MSGV4 INTO L_MSTRING.
          ELSE.
            REPLACE '&' WITH MESSTAB-MSGV1 INTO L_MSTRING.
            REPLACE '&' WITH MESSTAB-MSGV2 INTO L_MSTRING.
            REPLACE '&' WITH MESSTAB-MSGV3 INTO L_MSTRING.
            REPLACE '&' WITH MESSTAB-MSGV4 INTO L_MSTRING.
          ENDIF.
          CONDENSE L_MSTRING.
          WRITE: / MESSTAB-MSGTYP,
                   (250) L_MSTRING.
        ELSE.
          WRITE: / MESSTAB.
        ENDIF.
      ENDLOOP.
      SKIP.
    ENDIF.
** Erzeugen fehlermappe
************************************************
    IF L_SUBRC <> 0 AND E_GROUP <> SPACE.
      IF E_GROUP_OPENED = ' '.
        CALL FUNCTION 'BDC_OPEN_GROUP'
          EXPORTING
            CLIENT   = SY-MANDT
            GROUP    = E_GROUP
            USER     = E_USER
            KEEP     = E_KEEP
            HOLDDATE = E_HDATE.
        E_GROUP_OPENED = 'X'.
      ENDIF.
      CALL FUNCTION 'BDC_INSERT'
        EXPORTING
          TCODE     = TCODE
        TABLES
          DYNPROTAB = BDCDATA.
    ENDIF.
  ENDIF.
  REFRESH BDCDATA.
ENDFORM.                    "Z_BDC_TRANSACTION

*&---------------------------------------------------------------------*
*&      Form  CHECK_NOTATION_304
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CHECK_NOTATION_GENERAL CHANGING p_kbetr .


  CASE USR01-DCPFM.  " decimal notation
    WHEN ' '.          " good: comma
* If we need dots, let's convert comma to dots
      IF R_POINT = 'X'.
        REPLACE ALL OCCURRENCES OF '.' IN p_kbetr WITH '/'.
        REPLACE ALL OCCURRENCES OF ',' IN p_kbetr WITH '.'.
        REPLACE ALL OCCURRENCES OF '/' IN p_kbetr WITH ','.
      ENDIF.

* No thousand separators are allowed!!!!
      FIND '.' IN p_kbetr.
      IF SY-SUBRC EQ 0.
        FIND ',' IN p_kbetr.
        IF SY-SUBRC EQ 0.
          MESSAGE E104(YSE_SALES_LOG).
        ENDIF.
      ENDIF.

      FIND '.' IN p_kbetr.
      IF SY-SUBRC EQ 0.
        MESSAGE E103(YSE_SALES_LOG) with sy-uname '123456,78' '"."'.
      ENDIF.

    WHEN 'X'.        " notation: '.'
*   123456.60
* No thousand separators are allowed!!!!
      IF R_COMMA = 'X'.
        REPLACE ALL OCCURRENCES OF ',' IN p_kbetr WITH '/'.
        REPLACE ALL OCCURRENCES OF '.' IN p_kbetr WITH ','.
        REPLACE ALL OCCURRENCES OF '/' IN p_kbetr WITH '.'.
      ENDIF.

      FIND '.' IN p_kbetr.
      IF SY-SUBRC EQ 0.
        FIND ',' IN p_kbetr.
        IF SY-SUBRC EQ 0.
          MESSAGE E104(YSE_SALES_LOG).
        ENDIF.
      ENDIF.

      FIND ',' IN p_kbetr.
      IF SY-SUBRC EQ 0.
        MESSAGE E103(YSE_SALES_LOG) with sy-uname '123456.78' '","'.
      ENDIF.

    WHEN 'Y'.    " notation: comma
*   123456,60
* No thousand separators are allowed!!!!
      IF R_POINT = 'X'.
        REPLACE ALL OCCURRENCES OF '.' IN p_kbetr WITH '/'.
        REPLACE ALL OCCURRENCES OF ',' IN p_kbetr WITH '.'.
        REPLACE ALL OCCURRENCES OF '/' IN p_kbetr WITH ','.
      ENDIF.



      FIND '.' IN p_kbetr.
      IF SY-SUBRC EQ 0.
        FIND ',' IN p_kbetr.
        IF SY-SUBRC EQ 0.
          MESSAGE E104(YSE_SALES_LOG).
        ENDIF.
      ENDIF.

      FIND '.' IN p_kbetr.
      IF SY-SUBRC EQ 0.
        MESSAGE E103(YSE_SALES_LOG) with sy-uname '123456,78' '"."'.
      ENDIF.

  ENDCASE.

ENDFORM.                    " CHECK_NOTATION_304


*&---------------------------------------------------------------------*
*&      Form  CHECK_NOTATION_304
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CHECK_CONDITION_TYPE USING lp_kschl lp_i.

  IF lp_kschl <> P_KSCHL.
    MESSAGE E211(YSE_SALES_LOG) with lp_kschl lp_i.
  ENDIF.

ENDFORM.                    " CHECK_COND TYPE



*&---------------------------------------------------------------------*
*&      Form  set_f4
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_VAL      text
*----------------------------------------------------------------------*

FORM set_f4 TABLES pt_valuetab USING p_title CHANGING p_val  .
  DATA: lv_repid LIKE sy-repid,
        lv_dynnr LIKE sy-dynnr,
        lt_rettab TYPE TABLE OF DDSHRETVAL,
        lv_rettab TYPE  DDSHRETVAL.

  lv_repid = sy-repid.
  lv_dynnr = sy-dynnr.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
*         DDIC_STRUCTURE         = ' '
      RETFIELD               = 'VAL'
*         PVALKEY                = ' '
      DYNPPROG               = lv_repid
      DYNPNR                 = lv_dynnr
*         DYNPROFIELD            = ' '
*         STEPL                  = 0
      WINDOW_TITLE           = p_title
*         VALUE                  = ' '
      VALUE_ORG              = 'S'      " 'C'
*         MULTIPLE_CHOICE        = ' '
*         DISPLAY                = ' '
*         CALLBACK_PROGRAM       = ' '
*         CALLBACK_FORM          = ' '
*         MARK_TAB               =
*       IMPORTING
*         USER_RESET             =
    TABLES
      VALUE_TAB              = pt_valuetab
*          FIELD_TAB              = xt_fieldtab
      RETURN_TAB             = lt_rettab
*         DYNPFLD_MAPPING        =
       EXCEPTIONS
         PARAMETER_ERROR        = 1
         NO_VALUES_FOUND        = 2
         OTHERS                 = 3
            .
  IF sy-subrc EQ 0.
    READ TABLE lt_rettab INTO lv_rettab INDEX 1.
    p_val = lv_rettab-fieldval.
  ENDIF.


ENDFORM.                                                    "set_f4
*&---------------------------------------------------------------------*
*&      Form  check_VKORG_VTWEG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_<Z030CPG>_VKORG  text
*      -->P_<Z030CPG>_VTWEG  text
*      -->P_SY_TABIX  text
*----------------------------------------------------------------------*
FORM check_VKORG_VTWEG  USING    P_VKORG
                                 P_VTWEG
                                 P_TABIX.
  STATICS:lt_tvkov LIKE TABLE OF tvkov.
  DATA:   lv_tvkov TYPE tvkov.

  IF lt_tvkov IS INITIAL.
    SELECT mandt vkorg vtweg INTO TABLE lt_tvkov FROM tvkov.
    sort lt_tvkov BY vkorg vtweg.
  ENDIF.

  READ TABLE lt_tvkov INTO lv_tvkov
        WITH KEY vkorg = p_vkorg vtweg = p_vtweg BINARY SEARCH.
  IF sy-subrc <> 0.
    MESSAGE E213(YSE_SALES_LOG) WITH p_tabix p_vkorg p_vtweg.
  ENDIF.

ENDFORM.                    " check_VKORG_VTWEG
*&---------------------------------------------------------------------*
*&      Form  check_kunnr
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_KUNNR  text
*      -->P_VKORG  text
*      -->P_VTWEG  text
*      -->P_SPART  text
*      -->P_TABIX  text
*----------------------------------------------------------------------*
FORM check_kunnr  USING    P_KUNNR
                           P_VKORG
                           P_VTWEG
                           P_SPART
                           P_TABIX.

  DATA:   lv_kunnr LIKE knvv-kunnr.

  IF p_spart IS INITIAL.
    SELECT SINGLE kunnr INTO lv_kunnr
            FROM knvv
            WHERE kunnr = p_kunnr
              AND vkorg = p_vkorg
              AND vtweg = p_vtweg.
  ELSE.
    SELECT SINGLE kunnr INTO lv_kunnr
          FROM knvv
          WHERE kunnr = p_kunnr
            AND vkorg = p_vkorg
            AND vtweg = p_vtweg
            AND spart = p_spart.
  ENDIF.



  IF sy-subrc <> 0.
    MESSAGE E214(YSE_SALES_LOG) WITH p_tabix. " p_kunnr p_vkorg p_vtweg p_spart.
  ENDIF.

ENDFORM.                    " check_kunnr

*&---------------------------------------------------------------------*
*&      Form  check_matnr
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_MATNR  text
*      -->P_VKORG  text
*      -->P_VTWEG  text
*      -->P_TABIX  text
*----------------------------------------------------------------------*
FORM check_matnr  USING    P_MATNR
                           P_VKORG
                           P_VTWEG
                           P_TABIX.
  DATA:   lv_matnr LIKE mvke-matnr.

  CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
    EXPORTING
      INPUT              = p_matnr
   IMPORTING
     OUTPUT             = p_matnr
   EXCEPTIONS
     LENGTH_ERROR       = 1
     OTHERS             = 2
            .


  SELECT SINGLE matnr INTO lv_matnr
          FROM mvke
          WHERE matnr = p_matnr
            AND vkorg = p_vkorg
            AND vtweg = p_vtweg.
  IF sy-subrc <> 0.
    MESSAGE E216(YSE_SALES_LOG) WITH p_tabix  p_matnr p_vkorg p_vtweg.
  ENDIF.

ENDFORM.                    " check_matnr

*&---------------------------------------------------------------------*
*&      Form  check_kondm
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_KONDM  text
*      -->P_TABIX  text
*----------------------------------------------------------------------*
FORM check_kondm  USING    P_KONDM
                           P_TABIX.

  DATA:   lv_kondm LIKE t178-kondm.
  SELECT SINGLE kondm INTO lv_kondm
          FROM t178
          WHERE kondm = p_kondm.
  IF sy-subrc <> 0.
    MESSAGE E217(YSE_SALES_LOG) WITH p_tabix p_kondm.
  ENDIF.


ENDFORM.                    " check_kondm
*&---------------------------------------------------------------------*
*&      Form  bdc_setdates
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_<Z030MAT>_DATAB  text
*      -->P_<Z030MAT>_DATBI  text
*----------------------------------------------------------------------*
FORM bdc_setdates  USING    P_DATAB
                            P_DATBI.
*   ALL DATEFORMATS ARE CHANGED FROM YYYYMMDD TO DDMMYYYY
    PERFORM CHANGE_DATE CHANGING p_DATAB.
    PERFORM BDC_FIELD   USING 'RV13A-DATAB(01)' p_DATAB.
    PERFORM CHANGE_DATE CHANGING p_DATBI.
    PERFORM BDC_FIELD   USING 'RV13A-DATBI(01)' p_DATBI.
ENDFORM.                    " bdc_setdates
*&---------------------------------------------------------------------*
*&      Form  bdc_selscreen
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM bdc_selscreen .
    PERFORM BDC_DYNPRO USING 'SAPMV13A' '0100'.
    PERFORM BDC_FIELD  USING 'BDC_CURSOR' 'RV13A-KSCHL'.
    PERFORM BDC_FIELD  USING 'BDC_OKCODE' '/00'.
    PERFORM BDC_FIELD  USING 'RV13A-KSCHL' P_KSCHL.
ENDFORM.                    " bdc_selscreen
*&---------------------------------------------------------------------*
*&      Form  display_help
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM display_help .

  CALL FUNCTION 'POPUP_DISPLAY_TEXT'
    EXPORTING
      LANGUAGE             = SY-LANGU
      POPUP_TITLE          = 'Help'
      START_COLUMN         = 10
      START_ROW            = 3
      TEXT_OBJECT          = 'YSE_UPLOAD_PRICES_HELP1'     "  To maintain text use se61
*      HELP_MODAL           = 'X'
*   IMPORTING
*     CANCELLED            =
    EXCEPTIONS
      TEXT_NOT_FOUND       = 1
      OTHERS               = 2
            .
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                    " display_help
*&---------------------------------------------------------------------*
*&      Form  CHECK_DATEFORMAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_DATAB  text
*      -->P_DATBI  text
*      -->P_TABIX  text
*----------------------------------------------------------------------*
FORM CHECK_DATEFORMAT  USING    P_DATAB
                                P_DATBI
                                P_TABIX.
* expected is: 20080320
  CALL FUNCTION 'DATE_CHECK_PLAUSIBILITY'
    EXPORTING
      DATE                            = p_datab
   EXCEPTIONS
     PLAUSIBILITY_CHECK_FAILED       = 1
     OTHERS                          = 2
            .
  IF SY-SUBRC <> 0.
    MESSAGE E218(YSE_SALES_LOG) WITH p_tabix p_datab 'YYYYMMDD'.
  ENDIF.

  CALL FUNCTION 'DATE_CHECK_PLAUSIBILITY'
    EXPORTING
      DATE                            = p_datbi
   EXCEPTIONS
     PLAUSIBILITY_CHECK_FAILED       = 1
     OTHERS                          = 2
            .
  IF SY-SUBRC <> 0.
    MESSAGE E218(YSE_SALES_LOG) WITH p_tabix p_datbi 'YYYYMMDD'.
  ENDIF.

  IF p_datab > p_datbi.
    MESSAGE E219(YSE_SALES_LOG) WITH p_tabix.
  ENDIF.

ENDFORM.                    " CHECK_DATEFORMAT

*Text symbol text£º
*001:Selections
*002:Discount type
*003:Please select a valid option
*004:Price condition type
*005:Ovelapping records exists.Please correct it
*006:Existing cond rec uploaded wrongly. Start date is greate than end date
*007:SOrg - DCh - Div - MatPrGrp - Customer
*008:Sorg - Dch - Div - Cust - PGC
*009:Division / Customer
*010:Sales org./Distr. Chl/Division/Material
*011:SOrg - DCh - Div - MatPrGrp
*012:SOrg - DCh - Div - PGC
*013:Error records downloaded to
*014:c:\priceerror.txt file
*015:Discount type is a requried field
*016:Please use another discount type
*017:Please use another condition type
*018:Unexpected parameter value
*019:Record:
*020:Help
*021:C:\priceerror.txt
*022:For Condition record no:
*023:Start date is:
*024:End date is:
*E00:Error opening dataset, return code:
*I01:Session name
*I02:Open session
*I03:Insert transaction
*I04:Close Session
*I05:Return code =
*I06:Error session created
*S01:Session name
*S02:User
*S03:Keep session
*S04:Lock date
*S05:Processing Mode
*S06:Update Mode
*S07:Generate session
*S08:Call transaction
*S09:Error sessn
*S10:Nodata indicator
*T01:Decimal and date format
*T02:1.234.567,89
*T03:1,234,567.89
*T04:Expected date format:
*T05:YYYYMMDD
*T06:Press F1 for information on structure
*T07:Discount type

*T08:
*Selection text£º
*P_DISCT:        Discount type
*P_HEADER:        First line is header line
*P_KSCHL:        Price condition type
*P_UPFILE:        Upload file
