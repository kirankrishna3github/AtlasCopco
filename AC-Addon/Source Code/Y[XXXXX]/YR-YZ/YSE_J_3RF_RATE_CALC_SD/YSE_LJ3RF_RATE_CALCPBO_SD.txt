*&---------------------------------------------------------------------*
*&  Include           YSE_LJ3RF_RATE_CALCPBO_SD                        *
*&                                                                     *
*&  PAI and PBO modules for selection screen in include                *
*&  LJ3RF_RATE_CALCSEL                                                 *
*&                                                                     *
*&---------------------------------------------------------------------*

************************************************************************
*     At selection-screen output
************************************************************************
AT SELECTION-SCREEN OUTPUT.

  PERFORM rate_calc_pbo.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  PERFORM f4_for_variant.

AT SELECTION-SCREEN.
  PERFORM check_selection_screen.

*&---------------------------------------------------------------------*
*&      Form  rate_calc_pbo
*&---------------------------------------------------------------------*
*       enable/disable controls
*----------------------------------------------------------------------*
FORM rate_calc_pbo.

  DATA: BEGIN OF it_grp OCCURS 0,
          group  LIKE screen-group4,
          active TYPE c,
        END OF it_grp,
        l_mode TYPE c.

*  macro definitions
* check default radio buttons
  DEFINE check_defaults.
    if &1 eq 'X' and &2 eq 'X'.
      &1 = ' '.
    endif.
  END-OF-DEFINITION.

* add control to the group table
  DEFINE add_group.
    it_grp-group  = screen-group4.
    it_grp-active = screen-active.
    append it_grp to it_grp.
  END-OF-DEFINITION.


  SET TITLEBAR '100' OF PROGRAM gc_main_func.

* check defaults
  check_defaults p_rb_lif   p_rb_kun.
  check_defaults p_modpay   p_modclr.
*  check_defaults x_call     b_input.
*  check_defaults pa_remin   pa_prpay.
  check_defaults p_invdat   p_invrat.

  bkpf-waers = p_waers. "N1363895

*  PERFORM check_rstgr CHANGING b_rstgr.

*  validate required parameters for selection mode
*  l_mode = automode.
*  IF l_mode CA gc_auto_mode_sel.
*    IF p_bukrs IS INITIAL OR
*       ( p_rb_lif IS INITIAL     AND p_rb_kun IS INITIAL   ) OR
*       ( NOT p_rb_lif IS INITIAL AND p_lifnr IS INITIAL ) OR
*       ( NOT p_rb_kun IS INITIAL AND p_kunnr IS INITIAL ) OR
*       ( p_amount  IS INITIAL ) OR
*       ( p_waers   IS INITIAL ) OR
*       ( p_clcdat  IS INITIAL ).
*      CLEAR l_mode.
*    ENDIF.
*  ENDIF.

*  IF l_mode NA gc_auto_mode_sel.
*    CLEAR: p_clear.
*  ELSE.
*    CLEAR: b_input.
*    x_call = 'X'.
*  ENDIF.

* Logic of showing controls as follows:
*  1) for manual run:
*     - partner data is shown
*     - if "Select Down Payments" checked then Down Payments and Invoice sections are shown
*     - if "Clear Invoice" checked then "Clearing" section is shown
*  2) for SD
*     - partner data is read-only
*     - down payment section is shown
*     - invoice section is read only
*     - clearing section is shown
  LOOP AT SCREEN.

    " radio buttons
    IF ( screen-name CS 'P_MODPAY' ) OR ( screen-name CS 'P_MODCLR' ) OR
       ( screen-name CS 'P_RB_LIF' ) OR ( screen-name CS 'P_RB_KUN' ).
*     IF l_mode NA gc_auto_mode_sel. " hide for SEL mode
*        screen-active = '1'.
*      ELSE.
        screen-active = '0'.
*      ENDIF.
    ENDIF.

*    IF ( screen-name CS 'P_CLEAR' ).
**      IF l_mode CA gc_auto_mode_sel." show for SEL mode
*        screen-active = '1'.
*      ELSE.
*        screen-active = '0'.
*      ENDIF.
*    ENDIF.

    "****  partner section
*   IF l_mode CA gc_auto_mode_sel.

      IF ( screen-name CS 'P_LIFNR' ).
        screen-input  = '0'.
        IF p_rb_kun = 'X'.
          screen-active = '0'.
        ENDIF.
      ENDIF.

      IF ( screen-name CS 'P_KUNNR' ).
        screen-input  = '0'.
        IF p_rb_lif = 'X'.
          screen-active = '0'.
        ENDIF.
      ENDIF.

      " read-only fields
      IF screen-name CS 'P_BUKRS'  OR
         screen-name CS 'P_AMOUNT' OR
         screen-name CS 'P_WAERS'  OR
         screen-name CS 'P_CLCDAT' .
        screen-input  = '0'.
      ENDIF.
*    ELSE.
*      IF screen-name CS 'P_LIFNR' OR screen-name CS 'P_KUNNR'.
*
*        IF ( p_rb_lif = 'X' AND screen-name CS 'P_LIFNR' ) OR
*           ( p_rb_kun = 'X' AND screen-name CS 'P_KUNNR' ).
*          screen-input = '1'.
*        ELSE.
*          screen-input = '0'.
*        ENDIF.
*      ENDIF.
*
*    ENDIF.

    "****  down payments section
    IF screen-name CS 'P_BUDAT'   OR screen-name CS 'P_ZUONR' OR
       screen-name CS 'P_UMSKZ'   OR screen-name CS 'P_GSBER' OR
       screen-name CS 'P_BELNR'   OR screen-name CS 'P_BLDAT' OR
       screen-name CS 'P_PWAERS'  OR screen-name CS 'P_VARI'.

*     IF l_mode CA gc_auto_mode_sel OR p_modpay EQ 'X'.
        screen-active = '1'.
*     ELSE.
*       screen-active = '0'.
*     ENDIF.
    ENDIF.

    "****  invoice section
    IF screen-name CS 'P_AMOUNT' OR screen-name CS 'P_WAERS' OR
       screen-name CS 'P_INVDAT' OR screen-name CS 'P_INVRAT'.
*     IF l_mode CA gc_auto_mode_sel OR p_modpay EQ 'X'.
        screen-active = '1'.
*     ELSE.
*       screen-active = '0'.
*     ENDIF.
      add_group. " add to process text element
    ENDIF.
    IF screen-name CS 'P_CLCDAT'.
*     IF ( l_mode CA gc_auto_mode_sel OR p_modpay EQ 'X' ).
        screen-active = '1'.
*       IF p_invdat EQ 'X' AND l_mode NA gc_auto_mode_sel.
          screen-input = '1'.
*       ELSE.
*         screen-input = '0'.
*       ENDIF.
*     ELSE.
*       screen-active = '0'.
*     ENDIF.
    ENDIF.
    IF screen-name CS 'P_CLCRAT'.
*     IF ( l_mode CA gc_auto_mode_sel OR p_modpay EQ 'X' ).
        screen-active = '1'.
        IF p_invrat EQ 'X'.
          screen-input = '1'.
        ELSE.
          screen-input = '0'.
        ENDIF.
*     ELSE.
*       screen-active = '0'.
*     ENDIF.
    ENDIF.

*    "****  clearing section
     IF screen-name CS 'X_CALL'   OR screen-name CS 'B_INPUT' OR
        screen-name CS 'B_INV'    OR screen-name CS 'B_BLDAT' OR
        screen-name CS 'B_BUDAT'  OR screen-name CS 'B_BUPEM' OR
        screen-name CS 'B_WAERS'  OR screen-name CS 'B_NAME'  OR
        screen-name CS 'B_GJAHR'.
*
*      IF l_mode NA gc_auto_mode_sel AND p_modclr EQ 'X'.
*        screen-active = '1'.
*      ELSE.
         screen-active = '0'.
*      ENDIF.
*      add_group. " add to process text element
     ENDIF.
*
*    IF screen-name CS 'B_BLART'  OR screen-name CS 'B_RSTGR'  OR
*       screen-name CS 'PA_REMIN' OR screen-name CS 'PA_PRPAY'.
*
*      IF ( l_mode CA gc_auto_mode_sel AND p_clear  EQ 'X' ) OR
*         ( l_mode NA gc_auto_mode_sel AND p_modclr EQ 'X' ).
*        screen-active = '1'.
*      ELSE.
*        screen-active = '0'.
*      ENDIF.
*      add_group. " add to process text element
*    ENDIF.

    MODIFY SCREEN.
  ENDLOOP.

  SORT it_grp BY group.
  DELETE ADJACENT DUPLICATES FROM it_grp.

*  process text elements
  LOOP AT SCREEN.
    READ TABLE it_grp WITH KEY group = screen-group4.
    IF sy-subrc EQ 0.
      screen-active = it_grp-active.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.

** if a user selected "Clear" then try to get the last document
*  IF p_clear EQ 'X' AND b_inv IS INITIAL.
*    PERFORM get_invoice_doc CHANGING b_inv b_gjahr.
*  ENDIF.

* if exchange rate is unset then fill the rate
  IF p_clcrat IS INITIAL OR P_INVDAT = 'X'.
    PERFORM get_invoice_rate.
  ENDIF.

ENDFORM.                    "rate_calc_pbo

*&---------------------------------------------------------------------*
*&      Form  get_invoice_doc
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->PA_INVOICE text
*----------------------------------------------------------------------*
FORM get_invoice_doc
  CHANGING pa_invoice TYPE belnr_d
           pa_gjahr   TYPE gjahr.

*  DATA: l_belnr TYPE bkpf-belnr,
*        l_bukrs TYPE bkpf-bukrs,
*        l_gjahr TYPE bkpf-gjahr,
*        it_bsid TYPE TABLE OF bsid,                         "#EC NEEDED
*        wa_bkpf TYPE bkpf.
*
*  CHECK ( p_rb_kun EQ 'X' ) AND ( NOT p_kunnr IS INITIAL ).
*
*  GET PARAMETER ID 'BLN' FIELD l_belnr.
*  GET PARAMETER ID 'BUK' FIELD l_bukrs.
*  GET PARAMETER ID 'GJR' FIELD l_gjahr.
*
*  IF sy-subrc EQ 0 AND l_bukrs = p_bukrs.
*    " read document items
*    SELECT * FROM bsid
*      INTO TABLE it_bsid
*      WHERE bukrs = p_bukrs         AND
*            kunnr = p_kunnr         AND
*            belnr = l_belnr         AND
*            gjahr = l_gjahr         AND
*            shkzg = 'S'             AND
*            umsks <> 'A'            AND
*            bstat = ''.
*    IF sy-subrc EQ 0.
*      pa_invoice = l_belnr.
*      pa_gjahr   = l_gjahr.
*
*      " read header
*      SELECT SINGLE * FROM bkpf
*        INTO wa_bkpf
*        WHERE bukrs = l_bukrs AND
*              belnr = l_belnr AND
*              gjahr = l_gjahr.
*      IF sy-subrc EQ 0.
*        b_bldat = wa_bkpf-bldat.
*        b_budat = wa_bkpf-budat.
*      ENDIF.
*    ENDIF.
*  ENDIF.

ENDFORM.                    "get_invoice_doc

*&---------------------------------------------------------------------*
*&      Form  get_invoice_rate
*&---------------------------------------------------------------------*
*       get invoice exchange rate
*----------------------------------------------------------------------*
FORM get_invoice_rate.
  DATA: l_waers TYPE t001-waers,
        l_dmbtr TYPE bseg-dmbtr,
        l_wrbtr TYPE bseg-wrbtr,
        ffact   TYPE tcurr-ffact,
        lfact   TYPE tcurr-tfact.

* company, invoice currency and invoice date should be defined
  CHECK NOT p_bukrs  IS INITIAL AND
        NOT p_waers  IS INITIAL AND
        NOT p_clcdat IS INITIAL.

* get company currency
  SELECT SINGLE waers FROM t001 INTO l_waers WHERE bukrs = p_bukrs.
  CHECK sy-subrc IS INITIAL.

*  currency should not match company one
  CHECK l_waers NE p_waers.

* convert to FC
  l_dmbtr = 1000.

  CALL FUNCTION 'CONVERT_TO_FOREIGN_CURRENCY'
    EXPORTING
      date             = p_clcdat
      foreign_currency = p_waers
      local_amount     = l_dmbtr
      local_currency   = l_waers
    IMPORTING
      foreign_amount   = l_wrbtr
    EXCEPTIONS
      OTHERS           = 6.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  CALL FUNCTION 'READ_EXCHANGE_RATE'
    EXPORTING
      date             = p_clcdat
      foreign_currency = p_waers
      local_currency   = l_waers
    IMPORTING
      exchange_rate    = p_clcrat
      foreign_factor   = ffact
      local_factor     = lfact
    EXCEPTIONS
      no_rate_found    = 1
      no_factors_found = 2
      no_spread_found  = 3
      derived_2_times  = 4
      overflow         = 5
      zero_rate        = 6
      OTHERS           = 7.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
       WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*  IF ffact <> 1 OR lfact <> 1.
*    IF l_wrbtr > 0.
*      p_clcrat = l_dmbtr / l_wrbtr.
*    ENDIF.
*  ENDIF.

ENDFORM.                    "get_invoice_rate

*&---------------------------------------------------------------------*
*&      Form  get_default_rstgr
*&---------------------------------------------------------------------*
*       get default difference reason
*----------------------------------------------------------------------*
*      -->P_RSTGR    text
*----------------------------------------------------------------------*
FORM check_rstgr
  CHANGING p_rstgr LIKE df05b-rstgr.

*  IF NOT p_rstgr IS INITIAL AND NOT p_bukrs IS INITIAL.
*    SELECT SINGLE rstgr FROM t053r
*      INTO p_rstgr
*      WHERE bukrs = p_bukrs AND
*            rstgr = p_rstgr.
*    CHECK sy-subrc NE 0.
*    CLEAR p_rstgr.
*  ENDIF.
*
*  IF NOT p_bukrs IS INITIAL.
*    SELECT SINGLE rstgr FROM t053r
*      INTO p_rstgr
*      WHERE bukrs = p_bukrs AND
*            rstgr = '055'.
*
**   if not found then search first avaialble
*    IF NOT sy-subrc IS INITIAL.
*      SELECT SINGLE rstgr FROM t053r
*        INTO p_rstgr
*        WHERE bukrs = p_bukrs AND
*              xausb = ''.                               "#EC CI_GENBUFF
*    ENDIF.
*  ENDIF.

ENDFORM.                    "get_default_rstgr

*&---------------------------------------------------------------------*
*&      Form  f4_for_variant
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f4_for_variant.

  DATA: l_exit(1) TYPE c.

  g_variant-report  = gc_main_repid.
  g_variant-variant = p_vari.
  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      is_variant = g_variant
      i_save     = g_save
    IMPORTING
      e_exit     = l_exit
      es_variant = gx_variant
    EXCEPTIONS
      not_found  = 2.
  IF sy-subrc = 2.
    MESSAGE ID sy-msgid TYPE 'S'
    NUMBER sy-msgno WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    IF l_exit = space.
      p_vari = gx_variant-variant.
    ENDIF.
  ENDIF.

ENDFORM.                    "f4_for_variant

*&---------------------------------------------------------------------*
*&      Form  j3rf_rate_calc_init
*&---------------------------------------------------------------------*
*       initiate variant
*----------------------------------------------------------------------*
FORM j3rf_rate_calc_init.
  CLEAR g_variant.
  g_save               = 'A'.
  g_variant-report     = gc_main_repid.
  gx_variant           = g_variant.
  gx_variant-variant   = p_vari.
  IF p_vari IS INITIAL.
    CALL FUNCTION 'REUSE_ALV_VARIANT_DEFAULT_GET'
    EXPORTING
      i_save     = g_save
    CHANGING
      cs_variant = gx_variant
    EXCEPTIONS
      not_found  = 2.
  IF sy-subrc = 0.
    p_vari = gx_variant-variant.
    ENDIF.
  ENDIF.
ENDFORM.                    "variant_init

*----------------------------------------------------------------------*
*   FORM check_selection_screen                                        *
*----------------------------------------------------------------------*
FORM check_selection_screen.

  PERFORM select_variant.

  IF NOT p_vari IS INITIAL.
    MOVE g_variant TO gx_variant.
    MOVE p_vari TO gx_variant-variant.
    CALL FUNCTION 'REUSE_ALV_VARIANT_EXISTENCE'
      EXPORTING
        i_save      = g_save
      CHANGING
        cs_variant  = gx_variant
      EXCEPTIONS
        wrong_input = 1
        not_found   = 2
        OTHERS      = 3.
    IF sy-subrc = 0.
      g_variant = gx_variant.
    ELSE.
      MESSAGE ID sy-msgid TYPE 'W' NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      CLEAR p_vari.
    ENDIF.
  ENDIF.

ENDFORM.                    "check_selection_screen

*&---------------------------------------------------------------------*
*&      Form  select_variant
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM select_variant.
  CLEAR g_variant.
  g_variant-report  = gc_main_repid.
  g_variant-variant = p_vari.
  g_save            = 'A'.
  gx_variant        = g_variant.
ENDFORM.                    "select_variant

************************************************************************
*     Save exit command
************************************************************************
AT SELECTION-SCREEN ON EXIT-COMMAND.
  PERFORM rc_exit_command.

************************************************************************
*     Save exit for future processing
************************************************************************
FORM rc_exit_command.
  rc_ok_code = sy-ucomm.
ENDFORM.

************************************************************************
*     Show F4 for exchange rate
************************************************************************
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_CLCRAT.
  PERFORM f4_for_clrrat.

FORM f4_for_clrrat.

  DATA: l_dynpprog TYPE D020S-PROG,
        l_dynpnr   TYPE D020S-DNUM,
        l_display  TYPE XFELD,
        l_waers    TYPE t001-waers.

* company, invoice currency and invoice date should be defined
  CHECK NOT p_bukrs  IS INITIAL AND
        NOT p_waers  IS INITIAL AND
        NOT p_clcdat IS INITIAL.

* get company currency
  SELECT SINGLE waers FROM t001 INTO l_waers WHERE bukrs = p_bukrs.
  CHECK sy-subrc IS INITIAL.
*  currency should not match company one
  CHECK l_waers NE p_waers.

  l_dynpprog = sy-repid.
  l_dynpnr   = sy-dynnr.
  l_display  = p_invdat.

  if rateequation-kurstyp is initial.
    rateequation-kurstyp = 'M'.
  endif.
*  if rateequation-conv_date is initial.
    rateequation-conv_date = p_clcdat.
*  endif.

  CALL FUNCTION 'F4_EXCHANGE_RATE'
    EXPORTING
      TYPE_OF_RATE       = rateequation-kurstyp
      DATE               = rateequation-conv_date
      FOREIGN_CURRENCY   = p_waers
      LOCAL_CURRENCY     = l_waers
      FIELDNAME          = 'P_CLCRAT'
      DYNAME             = l_dynpprog
      DYNUMB             = l_dynpnr
      DISPLAY_ONLY       = l_display
    EXCEPTIONS
      INSUFFICIENT_INPUT = 1
      OTHERS             = 2.

ENDFORM.
