*----------------------------------------------------------------------*
***INCLUDE YSE_REN_SALES_FROM_RFL_S0100 .
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Module  0100_STATUS  OUTPUT
*&---------------------------------------------------------------------*
MODULE 0100_status OUTPUT.
  IF p_fu1 EQ gc_char_x.
    SET TITLEBAR 'AVGFLA'.
  ELSE.
    SET TITLEBAR 'INVDIVFY'.
  ENDIF.
  SET PF-STATUS 'STATUS0100'.
ENDMODULE.                 " 0100_STATUS  OUTPUT

*&---------------------------------------------------------------------*
*&      MODULE 0100_PREPARE_SCREEN OUTPUT
*&---------------------------------------------------------------------*
MODULE 0100_prepare_screen OUTPUT.

  PERFORM 0100_build_alv.
ENDMODULE.                 " 0100_PREPARE_SCREEN OUTPUT

*&---------------------------------------------------------------------*
*&      Module 0100_USER_COMMAND INPUT
*&---------------------------------------------------------------------*
MODULE 0100_user_command INPUT.

  CASE okcode.
    WHEN 'BACK' OR 'EXIT'.
      CALL METHOD obj_alv_ov->free.
      FREE obj_alv_ov.
      CALL METHOD obj_cont_ov->free.
      FREE obj_cont_ov.
*      CALL METHOD cl_gui_cfw=>flush.
      LEAVE TO SCREEN 0.

  ENDCASE.

ENDMODULE.                 " 0100_USER_COMMAND INPUT

*&---------------------------------------------------------------------*
*&      Form  0100_BUILD_ALV
*&---------------------------------------------------------------------*
FORM 0100_build_alv.

  DATA:  lv_off TYPE int4.
* START MOVE here from MODULE 0100_prepare_screen OUTPUT. "MOD-004

  CALL METHOD cl_gui_alv_grid=>offline
    RECEIVING
      e_offline = lv_off.

  IF lv_off IS INITIAL.                                     "MOD-004
    IF obj_cont_ov IS INITIAL .
      CREATE OBJECT obj_cont_ov
        EXPORTING
          container_name = 'OVERVIEW'.

    ENDIF.                                                  "MOD-004
  ENDIF.                                                    "MOD-004
  IF obj_alv_ov IS INITIAL.                                 "MOD-004
    CREATE OBJECT obj_alv_ov
      EXPORTING
        i_parent = obj_cont_ov.

    CREATE OBJECT obj_event_hndl_ov.
  ENDIF.
*   Enable Line Selection And Double-Clicking
  SET HANDLER obj_event_hndl_ov->handle_double_click FOR obj_alv_ov.
* END MOVE

* Clear the field catalog table
  REFRESH: gt_fieldcat_ov.

* Fetch the field catalog for structure YSE_RENT_EHRSP_OUTPUT
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active  = ' '
      i_structure_name = 'YSE_RENT_AVGFLA'
    CHANGING
      ct_fieldcat      = gt_fieldcat_ov.

* Modify some of the fields
  LOOP AT gt_fieldcat_ov ASSIGNING <fieldcat>.
    CASE <fieldcat>-fieldname.
*     Set behaviour of field "YRS", depending on the chosen function
      WHEN 'YRS'.
        IF p_fu1 EQ gc_char_x.
          <fieldcat>-do_sum = gc_char_c.   " Gives you mean value
*         <FIELDCAT>-DO_SUM = GC_CHAR_X.   " Gives you sum
        ELSE.
          <fieldcat>-no_out = gc_char_x.
        ENDIF.
*     Set behaviour of field "MTS", depending on the chosen function
      WHEN 'MNT'.
        IF p_fu1 EQ gc_char_x.
          <fieldcat>-do_sum = gc_char_c.   " Gives you mean value
*         <FIELDCAT>-DO_SUM = GC_CHAR_X.   " Gives you sum
        ELSE.
          <fieldcat>-no_out = gc_char_x.
        ENDIF.
*Set behaviour of field "Acquisition value", depending on the chosen
*function
      WHEN 'ACQVL'.
        IF p_fu2 EQ gc_char_x.
          <fieldcat>-do_sum = gc_char_x.   " Gives you sum
        ENDIF.
*Set behaviour of field "Revenue Sales from Hire Fleet" depending on the
*chosen function
      WHEN 'REVRSFL'.
        IF p_fu1 EQ gc_char_x.
          <fieldcat>-no_out = gc_char_x.
        ELSE.
          <fieldcat>-do_sum = gc_char_x.   " Gives you sum
        ENDIF.
*Hide descriptions (except Equip descr), the values can still be shown
*by choosing line "details"
      WHEN 'GAC_DESC' OR 'PGC_DESC' OR 'MAKTX'.
        <fieldcat>-no_out = 'X'.

      WHEN 'CNT'.
        <fieldcat>-do_sum = gc_char_x.
*     WHEN 'EHSTA' OR 'BDSTA'.
*
*       <FIELDCAT>-ICON      = GC_CHAR_X.
    ENDCASE.
  ENDLOOP.

* Set layout variables
* GS_LAYOUT-NO_TOOLBAR = LC_TRUE.
  gs_layout-sel_mode   = 'D'.
  gs_layout-cwidth_opt = gc_char_x.

* Set sort / total options
* General
  gs_fsort_ov-up        = gc_char_x.  " sort ascending
* GAC
  gs_fsort_ov-spos      = '1'.
  gs_fsort_ov-fieldname = 'GAC'.
  APPEND gs_fsort_ov TO gt_fsort_ov.
* PGC
  gs_fsort_ov-spos      = '2'.
  gs_fsort_ov-fieldname = 'PGC'.
  gs_fsort_ov-subtot    = gc_char_x.  " subtotal
  APPEND gs_fsort_ov TO gt_fsort_ov.
* Third sort field depends on function
  gs_fsort_ov-spos      = '3'.
  gs_fsort_ov-subtot    = space.      " subtotal
  IF p_fu1 EQ gc_char_x.
    gs_fsort_ov-fieldname = 'ZUGDT'.
    APPEND gs_fsort_ov TO gt_fsort_ov.
  ELSE.
    gs_fsort_ov-fieldname = 'REVRSFL'.
    gs_fsort_ov-up        = space.
    gs_fsort_ov-down      = gc_char_x.  " sort descending
    APPEND gs_fsort_ov TO gt_fsort_ov.
  ENDIF.





* Display the grid
  CALL METHOD obj_alv_ov->set_table_for_first_display
    EXPORTING
      i_structure_name              = 'YSE_RENT_AVGFLA'
      is_layout                     = gs_layout
    CHANGING
      it_outtab                     = it_avgfla[]
      it_fieldcatalog               = gt_fieldcat_ov
      it_sort                       = gt_fsort_ov
    EXCEPTIONS
      invalid_parameter_combination = 1
      program_error                 = 2
      too_many_lines                = 3
      OTHERS                        = 4.

  IF sy-subrc <> 0.
*     MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*     WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                    " 0100_BUILD_ALV

*&---------------------------------------------------------------------*
*&      Form  0100_DBLCLICK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_E_ROW  text
*      -->P_E_COLUMN  text
*      -->P_ES_ROW_NO  text
*----------------------------------------------------------------------*
FORM 0100_dblclick  USING    p_row
                             p_column
                             p_row_no.

  CASE p_column.
    WHEN 'EQUNR'.
      PERFORM 0100_open_ie03       USING p_row p_column p_row_no.
    WHEN 'ANLN1' OR 'ANLN2'.
      PERFORM 0100_open_as03       USING p_row p_column p_row_no.
  ENDCASE.

ENDFORM.                    " 0100_DBLCLICK

*&---------------------------------------------------------------------*
*&      Form  0100_OPEN_IE03
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM 0100_open_ie03  USING    p_row
                              p_column
                              p_row_no.

  DATA: ls_options      TYPE ctu_params.

* Read the selected entry from GT_EHRSK
  READ TABLE it_avgfla INDEX p_row.
  CHECK sy-subrc EQ 0.
  CHECK it_avgfla-equnr NE space.

  ls_options-nobiend = 'X'.
  ls_options-dismode = 'E'.
  ls_options-updmode = 'S'.

* Clear the BDC tables
  CLEAR: it_bdcdata[], it_bdcmsgs[].

* Prepare the first screen
  PERFORM 9999_bdc_add_screen USING 'SAPMIEQ0' '0100'.
  PERFORM 9999_bdc_add_field  USING 'RM63E-EQUNR' it_avgfla-equnr.
  PERFORM 9999_bdc_add_field  USING 'BDC_OKCODE' '/00'.
* Call the transaction
  CALL TRANSACTION gc_tx_ie03 USING         it_bdcdata
                              OPTIONS  FROM ls_options
                              MESSAGES INTO it_bdcmsgs.

ENDFORM.                    " 0100_OPEN_IE03

*&---------------------------------------------------------------------*
*&      Form  0100_OPEN_AS03
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM 0100_open_as03  USING    p_row
                              p_column
                              p_row_no.

  DATA: ls_options      TYPE ctu_params.

* Read the selected entry from GT_EHRSK
  READ TABLE it_avgfla INDEX p_row.
  CHECK sy-subrc EQ 0.
  CHECK it_avgfla-anln1 NE space.
* CHECK IT_RSFL-ANLN2 NE SPACE.

  ls_options-nobiend = 'X'.
  ls_options-dismode = 'E'.
  ls_options-updmode = 'S'.

* Clear the BDC tables
  CLEAR: it_bdcdata[], it_bdcmsgs[].

* Prepare the first screen
  PERFORM 9999_bdc_add_screen USING 'SAPLAIST' '0100'.
  PERFORM 9999_bdc_add_field  USING 'ANLA-ANLN1' it_avgfla-anln1.
  PERFORM 9999_bdc_add_field  USING 'ANLA-ANLN2' it_avgfla-anln2.
  PERFORM 9999_bdc_add_field  USING 'ANLA-BUKRS' p_bukrs.
  PERFORM 9999_bdc_add_field  USING 'BDC_OKCODE' '/00'.
* Call the transaction
  CALL TRANSACTION gc_tx_as03 USING         it_bdcdata
                              OPTIONS  FROM ls_options
                              MESSAGES INTO it_bdcmsgs.

ENDFORM.                    " 0100_OPEN_AS03

*&---------------------------------------------------------------------*
*&      Form  BDC_ADD_SCREEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM 9999_bdc_add_screen USING p_program p_dynpro.
  CLEAR it_bdcdata.
  it_bdcdata-program  = p_program.
  it_bdcdata-dynpro   = p_dynpro.
  it_bdcdata-dynbegin = gc_char_x.
  APPEND it_bdcdata.
ENDFORM.    " BDC_ADD_SCREEN

*&---------------------------------------------------------------------*
*&      Form  BDC_ADD_FIELD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM 9999_bdc_add_field USING p_fnam p_fval.

  DATA: lv_fval TYPE bdc_fval.

  lv_fval = p_fval.

  IF lv_fval <> gc_char_fs.   " Forward Slash
    CLEAR it_bdcdata.
    it_bdcdata-fnam = p_fnam.
    it_bdcdata-fval = lv_fval.
    APPEND it_bdcdata.
  ENDIF.
ENDFORM.    " BDC_ADD_FIELD

*&---------------------------------------------------------------------*
*&      Form  0100_LOAD_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM 0100_load_data .

* Local variable
  DATA: lv_gac_pgc_ok TYPE c,
        lv_anlcv      LIKE anlcv.

* First steps depend on function chosen
* When Avg Age mode
  IF p_fu1 EQ gc_char_x.

*   Set fiscal year
    p_gjahr = p_datum(4).

* When Invest/Divest mode
  ELSE.

*Determine date range in which we are interested to see (de)activated
*assets
    CONCATENATE p_gjahr '0101' INTO gv_datum.
    gv_datfr = gv_datum.
    CONCATENATE p_gjahr '1231' INTO gv_datum.
    gv_datto = gv_datum.

  ENDIF.

* Get all rental serial numbers
  SELECT      equnr
              sernr
              matnr
         INTO TABLE it_equi
         FROM equi
        WHERE eqtyp EQ 'X'
           OR eqtyp EQ 'Y'.
* Put all rental serial numbers in a range
  gr_equi-sign   = 'I'.
  gr_equi-option = 'EQ'.
  LOOP AT it_equi WHERE NOT sernr IS INITIAL.
    gr_equi-low = it_equi-sernr.
    APPEND gr_equi.
  ENDLOOP.

* Selection on ANLA (assets) depend on function chosen
* When Avg Age mode
  IF p_fu1 EQ gc_char_x.
*Select all assets that were activate on the given date (of the selected
*company code)
    SELECT      anln1
                anln2
                sernr
                zugdt
                deakt
           INTO TABLE it_anla
           FROM anla
          WHERE bukrs EQ p_bukrs
            AND sernr IN gr_equi
            AND zugdt LE p_datum
            AND zugdt NE '00000000'
            AND (    deakt EQ '00000000'
                  OR deakt GE p_datum ).

* When Invest/Divest mode
  ELSE.
*Select all assets that were activated or deactivated in the specified
*fiscal year
    SELECT      anln1
                anln2
                sernr
                zugdt
                deakt
           INTO TABLE it_anla
           FROM anla
          WHERE bukrs EQ p_bukrs
            AND sernr IN gr_equi
            AND (    (      deakt GE gv_datfr
                        AND deakt LE gv_datto )
                  OR (      zugdt GE gv_datfr
                        AND zugdt LE gv_datto ) ).

  ENDIF.
* Put remaining rental serial numbers in a range
  CLEAR: gr_equi, gr_equi[].
  gr_equi-sign   = 'I'.
  gr_equi-option = 'EQ'.
  LOOP AT it_anla.
    gr_equi-low = it_anla-sernr.
    APPEND gr_equi.
  ENDLOOP.

*Remove entries from IT_EQUI for which no match was found with the above
*select clause and conditions
  DELETE it_equi WHERE sernr NOT IN gr_equi.

* Select equipment descriptions
  SELECT      equnr
              eqktx
         INTO TABLE it_eqkt
         FROM eqkt
          FOR ALL ENTRIES IN it_equi
        WHERE equnr EQ it_equi-equnr
          AND spras EQ 'EN'.

* Select material details
  SELECT      matnr
              prdha
         INTO TABLE it_mara
         FROM mara
          FOR ALL ENTRIES IN it_equi
        WHERE matnr EQ it_equi-matnr.

* Select material descriptions
  SELECT      matnr
              maktx
         INTO TABLE it_makt
         FROM makt
          FOR ALL ENTRIES IN it_mara
        WHERE matnr EQ it_mara-matnr
          AND spras EQ 'EN'.

**Select the acquisition values (currency later to be retrieved from
**T093B)
  SELECT       anln1
               anln2
               bwasl
               anbtr
               nafab
          INTO TABLE it_anep
          FROM anep
           FOR ALL ENTRIES IN it_anla
         WHERE bukrs EQ p_bukrs
           AND anln1 EQ it_anla-anln1
           AND anln2 EQ it_anla-anln2
           AND afabe EQ '30'
           AND ( bwasl EQ '130'
               OR bwasl EQ '100'
               OR bwasl EQ 'Y01' ) .

* Select the net book value (currency later to be retrieved from T093B)
*  SELECT       anln1
*               anln2
*               knafa
*               nafag
*               answl
*               kansw
*               nafal
  SELECT *
          INTO TABLE it_anlc
          FROM anlc
           FOR ALL ENTRIES IN it_anla
         WHERE bukrs EQ p_bukrs
           AND anln1 EQ it_anla-anln1
           AND anln2 EQ it_anla-anln2
           AND gjahr EQ p_gjahr
* begin of change MOD-006
*           AND afabe EQ '30'
           and afabe eq '01'
* end of change MOD-006
           AND zujhr EQ ''
           AND zucod EQ ''.

* Perform function dependant selects
  IF p_fu1 EQ gc_char_x.

*Select the english GAC and PGC descriptions for the ones on the
*selection screen
    IF NOT so_gac[] IS INITIAL AND NOT so_pgc[] IS INITIAL.
      SELECT *
             INTO TABLE it_t179
             FROM t179
            WHERE prodh IN so_gac
               OR prodh IN so_pgc.
    ELSEIF NOT so_gac[] IS INITIAL.
      SELECT *
             INTO TABLE it_t179
             FROM t179
            WHERE prodh IN so_gac.
    ELSEIF NOT so_pgc[] IS INITIAL.
      SELECT *
             INTO TABLE it_t179
             FROM t179
            WHERE prodh IN so_pgc.
    ELSE.
      SELECT *
             INTO TABLE it_t179
             FROM t179.
    ENDIF.

  ELSEIF p_fu2 EQ gc_char_x.

*Select the revenue sales from hire fleet (currency later to be
*retrieved from T093B)
    SELECT       anln1
                 anln2
                 erlbt
            INTO TABLE it_anea
            FROM anea
             FOR ALL ENTRIES IN it_anla
           WHERE bukrs EQ p_bukrs
             AND anln1 EQ it_anla-anln1
             AND anln2 EQ it_anla-anln2
             AND gjahr EQ p_gjahr
             AND afabe EQ '30'
             AND zujhr EQ ''
             AND zucod EQ ''.
  ENDIF.

* Select the company code's currency
  SELECT SINGLE waers
           INTO gv_waers
           FROM t093b
          WHERE bukrs EQ p_bukrs
           AND afabe EQ '30'.

* Select all english GAC and PGC descriptions
  SELECT *
         INTO TABLE it_t179t
         FROM t179t
        WHERE spras = gc_spras_en.

* IT_ANLA is the definite list of rental assets
  SORT it_equi  BY sernr.
  SORT it_eqkt  BY equnr.
  SORT it_makt  BY matnr.
  SORT it_mara  BY matnr.
  SORT it_anep  BY anln1 anln2 bwasl.
  SORT it_anlc  BY bukrs anln1 anln2.
  SORT it_anea  BY anln1 anln2.
  SORT it_t179  BY prodh.
  SORT it_t179t BY prodh.

  LOOP AT it_anla.

    CLEAR it_avgfla.
    CLEAR lv_gac_pgc_ok.

*   Copy fields from IT_ANLA
    it_avgfla-anln1 = it_anla-anln1.
    it_avgfla-anln2 = it_anla-anln2.
    it_avgfla-zugdt = it_anla-zugdt.
    it_avgfla-deakt = it_anla-deakt.
    it_avgfla-sernr = it_anla-sernr.
    it_avgfla-waers = gv_waers.

*   Find IT_EQUI entry
    READ TABLE it_equi WITH KEY sernr = it_anla-sernr BINARY SEARCH.
    IF sy-subrc EQ 0.

      it_avgfla-equnr = it_equi-equnr.
      it_avgfla-matnr = it_equi-matnr.

*     Find material GAC/PGC
      READ TABLE it_mara WITH KEY matnr = it_equi-matnr BINARY SEARCH.
      IF sy-subrc EQ 0.

*       Fill GAC code and PGC code
        it_avgfla-pgc = it_mara-prdha.
        it_avgfla-gac = it_mara-prdha(4).

*Check if material's PGC meets selection screen criteria (only for avg
*age/Func1)
        IF p_fu1 EQ gc_char_x.
          READ TABLE it_t179 INTO gs_t179 WITH KEY prodh = it_avgfla-pgc
          BINARY SEARCH.
          IF sy-subrc EQ 0.
            lv_gac_pgc_ok = gc_char_x.
*If not, check if material's GAC meets selection screen criteria
          ELSE.
            READ TABLE it_t179 INTO gs_t179 WITH KEY prodh =
            it_avgfla-gac BINARY SEARCH.
            IF sy-subrc EQ 0.
              lv_gac_pgc_ok = gc_char_x.
            ENDIF.
          ENDIF.
        ELSE.
*       If in function 2 (inv/divest), don't filter on GAC / PGC
          lv_gac_pgc_ok = gc_char_x.
        ENDIF.

*If material's GAC or PGC code meets criteria, find the corresponding
*texts for GAC and PGC
        IF NOT lv_gac_pgc_ok IS INITIAL.
          READ TABLE it_t179t INTO gs_t179t WITH KEY prodh =
          it_avgfla-pgc BINARY SEARCH.
          IF sy-subrc EQ 0.
            it_avgfla-pgc_desc = gs_t179t-vtext.
          ENDIF.
          READ TABLE it_t179t INTO gs_t179t WITH KEY prodh =
          it_avgfla-gac BINARY SEARCH.
          IF sy-subrc EQ 0.
            it_avgfla-gac_desc = gs_t179t-vtext.
          ENDIF.
*       Else skip this asset
        ELSE.
          CONTINUE.
        ENDIF.

*     If material detail not found, skip line
      ELSE.
        CONTINUE.
      ENDIF.

*     Find equipment description
      READ TABLE it_eqkt WITH KEY equnr = it_equi-equnr BINARY SEARCH.
      IF sy-subrc EQ 0.
        it_avgfla-eqktx = it_eqkt-eqktx.
      ENDIF.

*     Find material description
      READ TABLE it_makt WITH KEY matnr = it_equi-matnr BINARY SEARCH.
      IF sy-subrc EQ 0.
        it_avgfla-maktx = it_makt-maktx.
      ENDIF.

*If equipment line not found, it means that material's GAC / PGC can not
*be checked -> skip line
    ELSE.
      CONTINUE.
    ENDIF.
*{Removed Raskin Kevin issue 2615

*   Find acquisition value
*    READ TABLE IT_ANEP WITH KEY ANLN1 = IT_ANLA-ANLN1
*                                ANLN2 = IT_ANLA-ANLN2
*                       BINARY SEARCH.
*    IF SY-SUBRC EQ 0.
*      IT_AVGFLA-ACQVL = IT_ANEP-ANBTR.

*{End remove Raskin Kevin
*    READ TABLE it_anep WITH KEY anln1 = it_anla-anln1
*                                anln2 = it_anla-anln2
*                                bwasl = '130'
*                       BINARY SEARCH.
*    IF sy-subrc EQ 4.
*      READ TABLE it_anep WITH KEY anln1 = it_anla-anln1
*                               anln2 = it_anla-anln2
*                               bwasl = '100'
*                      BINARY SEARCH.
*    ENDIF.
*    LOOP AT  it_anep
*    WHERE anln1 = it_anla-anln1
*    AND   anln2 = it_anla-anln2
*    AND   ( bwasl = '130' OR bwasl EQ '100' ).
*      it_avgfla-acqvl = it_anep-anbtr.
*    ENDLOOP.
*    IF sy-subrc EQ '4'.
*      READ TABLE it_anlc WITH KEY mandt = sy-mandt
*                                  bukrs = p_bukrs
*                                  anln1 = it_anla-anln1
*                                  anln2 = it_anla-anln2
*                         BINARY SEARCH.
*      IF sy-subrc EQ 0.
*        it_avgfla-acqvl = it_anlc-kansw.
*      ENDIF.
*    ENDIF.

*    IF sy-subrc EQ 0.
*      it_avgfla-acqvl = it_anep-anbtr.
*    ENDIF.



*     Calculate net book value (based on acq value - deprec. value)
    READ TABLE it_anlc WITH KEY  mandt = sy-mandt
                                  bukrs = p_bukrs
                                anln1 = it_anla-anln1
                                anln2 = it_anla-anln2
                       BINARY SEARCH.
    IF sy-subrc EQ 0.
*      it_avgfla-acqvl = it_anlc-answl + it_anlc-kansw.
*      it_avgfla-nbval = it_avgfla-acqvl + ( it_anlc-knafa +
*      it_anlc-nafag ).

* When Avg Age mode
*      IF p_fu1 EQ gc_char_x.
*        it_avgfla-nbval = it_avgfla-acqvl +
*           ( it_anlc-knafa + it_anlc-nafag ).
*      ELSE.
*        LOOP AT  it_anep
*        WHERE anln1 = it_anla-anln1
*        AND   anln2 = it_anla-anln2
*        AND   bwasl = 'Y01' .
*          it_avgfla-nbval = it_avgfla-acqvl - ( it_anlc-nafal + it_anep-nafab ) + it_anlc-knafa.
*        ENDLOOP.
*        IF sy-subrc EQ '4'.
*          it_avgfla-nbval = it_avgfla-acqvl - it_anlc-nafal + it_anlc-knafa.
*        ENDIF.
*      ENDIF.

      CLEAR lv_anlcv.
      CALL FUNCTION 'FI_AA_VALUES_CALCULATE'
        EXPORTING
          i_anlc  = it_anlc
        IMPORTING
          e_anlcv = lv_anlcv.
*      it_avgfla-nbval = lv_anlcv-bchwrt_gje.
* begin of change MOD-006
*      it_avgfla-nbval = lv_anlcv-lfd_bchwrt.
      it_avgfla-nbval = lv_anlcv-gja_bchwrt.
* end of change MOD-006
*      it_avgfla-acqvl = lv_anlcv-answl.
      it_avgfla-acqvl = lv_anlcv-kansw +  lv_anlcv-answl.
      IF it_avgfla-acqvl EQ 0.
        it_avgfla-acqvl = lv_anlcv-kansw.
        IF it_avgfla-acqvl  EQ 0.
          READ TABLE it_anep WITH KEY anln1 = it_anla-anln1
                                      anln2 = it_anla-anln2
                             BINARY SEARCH.
          IF sy-subrc EQ 0.
            it_avgfla-acqvl = it_anep-anbtr.
          endif.
          ENDIF.
        ENDIF.
      ENDIF.

*   Calc time in fleet (only for function 1 (Avg Fleet age))
      IF p_fu1 EQ gc_char_x.
*     Months in fleet
*     CALL FUNCTION 'FI_PSO_DAYS_MONTHS_YEARS_GET'  " Function rounds up
        CALL FUNCTION 'MONTHS_BETWEEN_TWO_DATES'
          EXPORTING
            i_datum_bis   = p_datum
            i_datum_von   = it_anla-zugdt
            i_kz_incl_bis = 'X'
          IMPORTING
            e_monate      = it_avgfla-mnt.
        IF NOT it_avgfla-mnt IS INITIAL.
*This function does not take into account the days in the month
          CLEAR v_temp_dat.
          v_temp_dat = p_datum+6(2) - it_anla-zugdt+6(2).
          IF v_temp_dat < 0.
            it_avgfla-mnt = it_avgfla-mnt - 1.
          ENDIF.
        ENDIF.


*      CALL FUNCTION 'HR_AUPBS_MONTH_DAY'      " Function rounds down
*        EXPORTING
*          BEG_DA           = IT_ANLA-ZUGDT
*          END_DA           = P_DATUM
*        IMPORTING
**         NO_DAY           =
*          NO_MONTH         = IT_AVGFLA-MNT.
**         NO_YEAR          =
**         NO_CAL_DAY       =.
**     Years in fleet
        it_avgfla-yrs = it_avgfla-mnt / 12.
      ENDIF.

*Summarize revenue postings (can include reversals) (only for function
*2: divestments)
      IF p_fu2 EQ gc_char_x.
        READ TABLE it_anea WITH KEY anln1 = it_anla-anln1
                                    anln2 = it_anla-anln2
                           BINARY SEARCH.
        IF sy-subrc EQ 0.
          LOOP AT it_anea FROM sy-index.
            CHECK it_anea-anln1 = it_anla-anln1.
            CHECK it_anea-anln2 = it_anla-anln2.
            it_avgfla-revrsfl = it_avgfla-revrsfl + it_anea-erlbt.
          ENDLOOP.
        ENDIF.
      ENDIF.

      MOVE 1 TO it_avgfla-cnt.
      APPEND it_avgfla.
    ENDLOOP.

    IF sy-batch = 'X'.                                      " MOD-004
      PERFORM 0100_build_alv.                               " MOD-004
    ELSE.                                                   " MOD-004
      CALL SCREEN 0100.
    ENDIF.                                                  " MOD-004


  ENDFORM.                    " 0100_LOAD_DATA
*&---------------------------------------------------------------------*
*&      Form  Check_Authorization
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_authorization .

  AUTHORITY-CHECK OBJECT 'F_KNA1_BUK'
                      ID 'BUKRS' FIELD p_bukrs
                      ID 'ACTVT' DUMMY.

  IF sy-subrc = 4.
*   No authorisation to display the data
    MESSAGE ID 'YSE_RENTAL' TYPE 'E' NUMBER '040' WITH p_bukrs.
  ELSEIF sy-subrc <> 0.
*   Error checking authorization.
    MESSAGE ID 'YSE_RENTAL' TYPE 'E' NUMBER '046'.
  ENDIF.

ENDFORM.                    " Check_Authorization
