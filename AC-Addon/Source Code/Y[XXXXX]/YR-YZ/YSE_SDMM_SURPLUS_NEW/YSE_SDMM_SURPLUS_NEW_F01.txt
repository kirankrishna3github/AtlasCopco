*----------------------------------------------------------------------*
*INCLUDE YSE_SDMM_SURPLUS_NEW_F01                                      *
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  SELECT_MATERIALS
*&---------------------------------------------------------------------*
FORM SELECT_MATERIALS.

** Get all material according to selection options
*  SELECT DISTINCT
*              MARA~MATNR MARA~MTART MARA~MATKL MARC~MMSTA MARA~MEINS
*              MARA~PRDHA MAKT~MAKTX MARC~WERKS MARC~DISMM MARC~MAXLZ
*              MARD~LGORT MARC~EISBE MARD~LABST MARD~EINME MARD~INSME
*              MARD~SPEME MARD~RETME MARD~UMLME MARD~KLABS MARD~KEINM
*              MARD~KINSM MARD~KSPEM EORD~LIFNR MARA~BRGEW MARA~GEWEI
*         INTO TABLE GT_MARA
*         FROM MARA
*        INNER JOIN MAKT
*           ON MARA~MATNR EQ MAKT~MATNR
*        INNER JOIN MARC
*           ON MARA~MATNR EQ MARC~MATNR
*        INNER JOIN MARD
*           ON MARA~MATNR EQ MARD~MATNR
*          AND MARC~WERKS EQ MARD~WERKS
*        INNER JOIN EORD
*           ON MARC~MATNR EQ EORD~MATNR
*          AND MARC~WERKS EQ EORD~WERKS
*        WHERE MARA~LVORM EQ SPACE        " NO MAT FLAG FOR DELETION
*          AND MARA~PRDHA IN GR_PRDHA
*          AND MARC~WERKS IN SO_WERKS
*          AND MAKT~SPRAS EQ 'E'
*          AND MARD~LGORT IN SO_LGORT
*          AND EORD~LIFNR IN SO_LIFNR
*          AND EORD~FLIFN EQ 'X'
*          AND MARA~MATNR IN SO_MATNR.
*
*  SORT GT_MARA BY MATNR WERKS LGORT.



* Get all material according to selection options
  SELECT  MATNR
          WERKS
          LGORT
          LABST
          UMLME
          INSME
          EINME
          SPEME
          RETME
          KLABS
          KINSM
          KEINM
          KSPEM
          FROM MARD
          INTO TABLE LT_MARD
          WHERE MATNR IN SO_MATNR
          AND   WERKS IN SO_WERKS
          AND   LGORT IN SO_LGORT.


IF NOT LT_MARD[] IS INITIAL.

SELECT MATNR
*       MTART                 MOD-001
       MATKL
*       MEINS                 MOD-001
*       BRGEW                 MOD-001
       GEWEI
       PRDHA
       FROM MARA
       INTO TABLE LT_MARA
       FOR ALL ENTRIES IN LT_MARD
       WHERE MATNR = LT_MARD-MATNR
       AND LVORM = SPACE
       AND PRDHA IN GR_PRDHA.


  IF NOT LT_MARA[] IS INITIAL.
      SELECT MATNR
             MAKTX
             FROM MAKT
             INTO TABLE LT_MAKT
             FOR ALL ENTRIES IN LT_MARA
             WHERE MATNR = LT_MARA-MATNR
             AND SPRAS =  GC_ENGLISH.
  ENDIF.


SELECT    MATNR
          WERKS
*          MMSTA
*          DISMM
          EISBE
          MAXLZ
          FROM MARC
          INTO TABLE LT_MARC
          FOR ALL ENTRIES IN LT_MARD
          WHERE MATNR = LT_MARD-MATNR
          AND   WERKS = LT_MARD-WERKS.

   IF NOT LT_MARC[] IS INITIAL.
      SELECT   MATNR
               WERKS
               LIFNR
               FLIFN
               FROM EORD
               INTO TABLE LT_EORD
               FOR ALL ENTRIES IN LT_MARC
               WHERE MATNR = LT_MARC-MATNR
               AND   WERKS = LT_MARC-WERKS
               AND   FLIFN = GC_TRUE
               AND   LIFNR IN SO_LIFNR.
   ENDIF.








* Lets move all the data into the GT_MARA table
LOOP AT LT_MARD.

*   Lets move the data from EORD table and check if it satisfies fixed vendor condition.
    CLEAR LT_EORD.
    READ TABLE LT_EORD WITH KEY MATNR = LT_MARD-MATNR
                                WERKS = LT_MARD-WERKS.
     IF SY-SUBRC = 0.
        GT_MARA-LIFNR  = LT_EORD-LIFNR.



* Lets move the data from MARA table
    CLEAR LT_MARA.
    READ TABLE LT_MARA WITH KEY MATNR = LT_MARD-MATNR.
    IF SY-SUBRC = 0.
*      GT_MARA-MTART  = LT_MARA-MTART.      M0D-001
      GT_MARA-MATKL  = LT_MARA-MATKL.
*      GT_MARA-MEINS  = LT_MARA-MEINS.      MOD-001
      GT_MARA-PRDHA  = LT_MARA-PRDHA.
*      GT_MARA-BRGEW  = LT_MARA-BRGEW.      MOD-001
      GT_MARA-GEWEI  = LT_MARA-GEWEI.

*    Lets move the data from MAKT table
            CLEAR LT_MAKT.
            READ TABLE LT_MAKT WITH KEY MATNR = LT_MARD-MATNR.
            IF SY-SUBRC = 0.
              GT_MARA-MAKTX  = LT_MAKT-MAKTX.
            ENDIF.


*    Lets move the data from MARC table
            CLEAR LT_MARC.
            READ TABLE LT_MARC WITH KEY MATNR = LT_MARD-MATNR
                                        WERKS = LT_MARD-WERKS.
            IF SY-SUBRC = 0.
                GT_MARA-MATNR  = LT_MARC-MATNR.
*                GT_MARA-MMSTA  = LT_MARC-MMSTA.
                GT_MARA-WERKS  = LT_MARC-WERKS.
*                GT_MARA-DISMM  = LT_MARC-DISMM.
                GT_MARA-MAXLZ  = LT_MARC-MAXLZ.
                GT_MARA-EISBE  = LT_MARC-EISBE.
            ENDIF.



*   Lets move the data from MARD table
            GT_MARA-LGORT  = LT_MARD-LGORT.
            GT_MARA-LABST  = LT_MARD-LABST.
            GT_MARA-EINME  = LT_MARD-EINME.
            GT_MARA-INSME  = LT_MARD-INSME.
            GT_MARA-SPEME  = LT_MARD-SPEME.
            GT_MARA-RETME  = LT_MARD-RETME.
            GT_MARA-UMLME  = LT_MARD-UMLME.
            GT_MARA-KLABS  = LT_MARD-KLABS.
            GT_MARA-KEINM  = LT_MARD-KEINM.
            GT_MARA-KINSM  = LT_MARD-KINSM.
            GT_MARA-KSPEM  = LT_MARD-KSPEM.


*     Now save the data in the internal table GT_MARA.
      APPEND GT_MARA.
      CLEAR  GT_MARA.


    ELSE.
*     If from MARA,  LVORM and PRODH does not satisfy, do not add it to GT_MARA.
      CONTINUE.
    ENDIF.



   ELSE.
*     If from EORD, fixed vendor does not satisfy, do not add it to GT_MARA.
      CONTINUE.
  ENDIF.



ENDLOOP.
ENDIF.





  SORT GT_MARA BY MATNR WERKS LGORT.

* As we have multiple records of same materials with different vendors
  DELETE ADJACENT DUPLICATES FROM GT_MARA COMPARING MATNR WERKS LGORT.


* Select special stock with customer when StLoc is part of the selection
  IF '1000' IN SO_LGORT.
    SELECT      MATNR WERKS SUM( KULAB )
           FROM MSKU
           INTO TABLE IT_MSKU
          WHERE MATNR IN SO_MATNR
            AND WERKS IN SO_WERKS
            AND SOBKZ  = 'W'
          GROUP BY MATNR WERKS.
    SORT IT_MSKU BY MATNR WERKS.
  ENDIF.

ENDFORM.                    " SELECT_MATERIALS



**&---------------------------------------------------------------------*
**&      Form  PROCESS_DATA
**&---------------------------------------------------------------------*
*FORM PROCESS_DATA.
*
*  SORT GT_ALLOCS  BY MATNR WERKS LGORT.
*
** Process selected materials
*  LOOP AT GT_MARA ASSIGNING <FS_MARA>.
*
**   Copy material details to output table
*    CLEAR GT_MAT_SURPLUS.
*    MOVE-CORRESPONDING <FS_MARA> TO GT_MAT_SURPLUS.
*
**   Split prdha to GAC and PGC
*    GT_MAT_SURPLUS-GAC = <FS_MARA>-PRDHA(4).
*    GT_MAT_SURPLUS-PGC = <FS_MARA>-PRDHA+4(4).
*
*
**   Derivation of PLC
*    IF NOT P_VKORG IS INITIAL.
*      GV_VKORG = P_VKORG.
*    ELSE.
*      CLEAR GT_T001W.
*      READ TABLE GT_T001W WITH KEY WERKS = <FS_MARA>-WERKS.
*      GV_VKORG = GT_T001W-VKORG.
*    ENDIF.
*    SELECT SINGLE PRODH INTO GV_PRODH
*           FROM MVKE
*           WHERE MATNR = <FS_MARA>-MATNR
*             AND VKORG = GV_VKORG
*             AND VTWEG = '01'.
*
*    IF SY-SUBRC = 0.
*      SELECT SINGLE B~SEGMENT INTO GV_PLC_TEMP
*             FROM YSE_PRCTR_DERIV AS P
*             INNER JOIN YSE_PRCTR_BL AS B
*                   ON B~PRCTR = P~PRCTR
*                 WHERE P~VTWEG = '01'
*                   AND P~PGC   = GV_PRODH+4(4).
*
*      LOOP AT IT_PLC WHERE SOUR1_FROM LE GV_PLC_TEMP
*                       AND SOUR1_TO   GE GV_PLC_TEMP
*                       AND VALID_FROM LE SY-DATUM.
*        GT_MAT_SURPLUS-PLC = IT_PLC-TARGET1.
*      ENDLOOP.
*    ENDIF.

*
**   Get material group description
*    READ TABLE GT_MAT_GRP_DESCR WITH KEY MATKL = GT_MAT_SURPLUS-MATKL
*                                BINARY SEARCH.
*    IF SY-SUBRC EQ 0.
*      GT_MAT_SURPLUS-WGBEZ = GT_MAT_GRP_DESCR-WGBEZ.
*    ENDIF.
*
**   Get MRP description
*    READ TABLE GT_MRP_DESCR WITH KEY DISMM = GT_MAT_SURPLUS-DISMM
*                            BINARY SEARCH.
*    IF SY-SUBRC EQ 0.
*      GT_MAT_SURPLUS-DIBEZ = GT_MRP_DESCR-DIBEZ.
*    ENDIF.
*
**   Get material status description
*    READ TABLE GT_MAT_STAT_DESCR WITH KEY MMSTA = GT_MAT_SURPLUS-MMSTA
*                                 BINARY SEARCH.
*    IF SY-SUBRC EQ 0.
*      GT_MAT_SURPLUS-MTSTB = GT_MAT_STAT_DESCR-MTSTB.
*    ENDIF.
*
**   Calculate own stock.
*    GT_MAT_SURPLUS-STOCK_OWN = <FS_MARA>-LABST +
*                               <FS_MARA>-EINME +
*                               <FS_MARA>-INSME +
*                               <FS_MARA>-SPEME +
*                               <FS_MARA>-RETME +
*                               <FS_MARA>-UMLME.
*
**   Standard price
*    READ TABLE IT_T001W WITH KEY WERKS = GT_MAT_SURPLUS-WERKS
*                        BINARY SEARCH.
*    IF SY-SUBRC EQ 0.
*      READ TABLE GT_PRICE WITH KEY MATNR = GT_MAT_SURPLUS-MATNR
*                                   BWKEY = IT_T001W-BWKEY
*                          BINARY SEARCH.
*      IF SY-SUBRC EQ 0.
*        GT_MAT_SURPLUS-STPRS = GT_PRICE-STPRS / GT_PRICE-PEINH.
*        GT_MAT_SURPLUS-VERPR = GT_PRICE-VERPR / GT_PRICE-PEINH.
*      ENDIF.
*    ENDIF.
*
**   Calculate own stock value.
*    GT_MAT_SURPLUS-STOCK_OWNVAL =   GT_MAT_SURPLUS-STOCK_OWN
*                                  * GT_MAT_SURPLUS-STPRS.
*    GT_MAT_SURPLUS-STOCK_OWNVAL_MVG =   GT_MAT_SURPLUS-STOCK_OWN
*                                      * GT_MAT_SURPLUS-VERPR.
*
**   Total stock when StLoc is 1000: own stock + stock at customer
*    CLEAR IT_MSKU.
*    IF GT_MAT_SURPLUS-LGORT = '1000'.
*      READ TABLE IT_MSKU WITH KEY MATNR = GT_MAT_SURPLUS-MATNR
*                                  WERKS = GT_MAT_SURPLUS-WERKS
*                         BINARY SEARCH.
*    ENDIF.
*    GT_MAT_SURPLUS-STOCK_TOT = GT_MAT_SURPLUS-STOCK_OWN + IT_MSKU-KULAB.
**   If total stock is zero, don't keep the line
*    IF GT_MAT_SURPLUS-STOCK_TOT = 0.
*      CONTINUE.
*    ENDIF.
*
**   Calculate total stock value.
*    GT_MAT_SURPLUS-STOCK_TOTVAL =   GT_MAT_SURPLUS-STOCK_TOT
*                                  * GT_MAT_SURPLUS-STPRS.
*    GT_MAT_SURPLUS-STOCK_TOTVAL_MVG =   GT_MAT_SURPLUS-STOCK_TOT
*                                      * GT_MAT_SURPLUS-VERPR.
*
**   Allocated stock
*    CLEAR GT_ALLOCS.
*    READ TABLE GT_ALLOCS WITH KEY MATNR = GT_MAT_SURPLUS-MATNR
*                                  WERKS = GT_MAT_SURPLUS-WERKS
*                                  LGORT = GT_MAT_SURPLUS-LGORT
*                         BINARY SEARCH.
*    GT_MAT_SURPLUS-STOCK_ALLOC = GT_ALLOCS-ALLOC_QUANTITY.
*
**   Calculate available stock
*    GT_MAT_SURPLUS-STOCK_AVAIL = GT_MAT_SURPLUS-LABST -
*                                 GT_MAT_SURPLUS-STOCK_ALLOC.
*
**   Copy currency
*    READ TABLE IT_WAERS WITH KEY WERKS = GT_MAT_SURPLUS-WERKS
*                        BINARY SEARCH.
*    IF SY-SUBRC EQ 0.
*      GT_MAT_SURPLUS-WAERS = IT_WAERS-WAERS.
*    ENDIF.
*
**   Most recent receipt date
*    READ TABLE GT_REC_DAT WITH KEY MATNR = GT_MAT_SURPLUS-MATNR
*                                   WERKS = GT_MAT_SURPLUS-WERKS
*                                   LGORT = GT_MAT_SURPLUS-LGORT
*                          BINARY SEARCH.
*    IF SY-SUBRC EQ 0.
*      GT_MAT_SURPLUS-LAST_REC_DATE = GT_REC_DAT-BUDAT.
*    ENDIF.
*
**   Most recent issue date
*    READ TABLE GT_ISS_DAT WITH KEY MATNR = GT_MAT_SURPLUS-MATNR
*                                   WERKS = GT_MAT_SURPLUS-WERKS
*                                   LGORT = GT_MAT_SURPLUS-LGORT
*                          BINARY SEARCH.
*    IF SY-SUBRC EQ 0.
*      GT_MAT_SURPLUS-LAST_ISS_DATE = GT_ISS_DAT-BUDAT.
*    ENDIF.
*
***   Get 3 months consumption (also needed for stock level in days)
**    PERFORM GET_X_MONTHS_CONSUMPTION USING GV_3_MONTHS_AGO  'QUAN_3_MONTHS'.
***   Get 6 months consumption
**    PERFORM GET_X_MONTHS_CONSUMPTION USING GV_6_MONTHS_AGO  'QUAN_6_MONTHS'.
***   Get 12 months consumption
**    PERFORM GET_X_MONTHS_CONSUMPTION USING GV_12_MONTHS_AGO 'QUAN_12_MONTHS'.
**   Get 3 months consumption (also needed for stock level in days)
*    PERFORM GET_X_MONTHS_CONSUMPTION_NEW USING GV_3_MONTHS_AGO  'QUAN_3_MONTHS'.
**   Get 6 months consumption
*    PERFORM GET_X_MONTHS_CONSUMPTION_NEW USING GV_6_MONTHS_AGO  'QUAN_6_MONTHS'.
**   Get 12 months consumption
*    PERFORM GET_X_MONTHS_CONSUMPTION_NEW USING GV_12_MONTHS_AGO 'QUAN_12_MONTHS'.
*
**   Calculate stock level in days based on last months' consumptions
*    IF GT_MAT_SURPLUS-QUAN_3_MONTHS > 0.
*      GT_MAT_SURPLUS-STOCK_DAYS = 90 * GT_MAT_SURPLUS-LABST /
*                                       GT_MAT_SURPLUS-QUAN_3_MONTHS.
**    ELSEIF GT_MAT_SURPLUS-QUAN_6_MONTHS > 0.
**      GT_MAT_SURPLUS-STOCK_DAYS = 180 * GT_MAT_SURPLUS-LABST /
**                                        GT_MAT_SURPLUS-QUAN_6_MONTHS.
**    ELSEIF GT_MAT_SURPLUS-QUAN_12_MONTHS > 0.
**      GT_MAT_SURPLUS-STOCK_DAYS = 360 * GT_MAT_SURPLUS-LABST /
**                                        GT_MAT_SURPLUS-QUAN_12_MONTHS.
*    ELSE.
*      CALL FUNCTION 'MAXIMAL_VALUE_GET'
*        IMPORTING
*          E_VALUE             = GT_MAT_SURPLUS-STOCK_DAYS
*        EXCEPTIONS
*          TYPE_NOT_SUPPORTED  = 1
*          P_LEN_NOT_SUPPORTED = 2
*          OTHERS              = 3.
*      IF SY-SUBRC NE 0.
*        MESSAGE ID 'YSE_SALES_LOG' TYPE 'E' NUMBER '052' WITH 'STOCK_DAYS'.
*      ENDIF.
*    ENDIF.
*
**   Calculate turnover
*    IF GT_MAT_SURPLUS-QUAN_12_MONTHS NE 0.
*      GT_MAT_SURPLUS-TURNOVER = GT_MAT_SURPLUS-LABST / GT_MAT_SURPLUS-QUAN_12_MONTHS.
*    ELSE.
*      CALL FUNCTION 'MAXIMAL_VALUE_GET'
*        IMPORTING
*          E_VALUE             = GT_MAT_SURPLUS-TURNOVER
*        EXCEPTIONS
*          TYPE_NOT_SUPPORTED  = 1
*          P_LEN_NOT_SUPPORTED = 2
*          OTHERS              = 3.
*      IF SY-SUBRC NE 0.
*        MESSAGE ID 'YSE_SALES_LOG' TYPE 'E' NUMBER '052' WITH 'TURNOVER'.
*      ENDIF.
*    ENDIF.
*
**   Non moving stock Last 12 Months
*    IF NOT GT_MAT_SURPLUS-LAST_ISS_DATE IS INITIAL
*       AND GV_CUR_MINUS_24 LT GT_MAT_SURPLUS-LAST_ISS_DATE
*       AND GV_CUR_MINUS_12 GE GT_MAT_SURPLUS-LAST_ISS_DATE.
*      GT_MAT_SURPLUS-NON_MOVING_12_MONTHS = GT_MAT_SURPLUS-STOCK_TOT.
*    ELSE.
*      GT_MAT_SURPLUS-NON_MOVING_12_MONTHS = 0.
*    ENDIF.
**   Non moving stock Last 24 Months
*    IF NOT GT_MAT_SURPLUS-LAST_ISS_DATE IS INITIAL
*       AND GV_CUR_MINUS_24 GE GT_MAT_SURPLUS-LAST_ISS_DATE.
*      GT_MAT_SURPLUS-NON_MOVING_24_MONTHS = GT_MAT_SURPLUS-STOCK_TOT.
*    ELSE.
*      GT_MAT_SURPLUS-NON_MOVING_24_MONTHS = 0.
*    ENDIF.
*    IF GT_MAT_SURPLUS-LAST_ISS_DATE IS INITIAL.
*      GT_MAT_SURPLUS-NON_MOVING_12_MONTHS = GT_MAT_SURPLUS-STOCK_TOT.
*      GT_MAT_SURPLUS-NON_MOVING_24_MONTHS = GT_MAT_SURPLUS-STOCK_TOT.
*    ENDIF.
*
**   Calculate overstock
*    GT_MAT_SURPLUS-OVERSTOCK =   GT_MAT_SURPLUS-STOCK_TOT
*                               - GT_MAT_SURPLUS-QUAN_12_MONTHS.
*    IF GT_MAT_SURPLUS-OVERSTOCK < 0.  " Only show when positive
*      CLEAR GT_MAT_SURPLUS-OVERSTOCK.
*    ENDIF.
**   Overstock = 0 if consumption over last 12 months is 0 (Issue D088)
*    IF GT_MAT_SURPLUS-QUAN_12_MONTHS = 0.
*      GT_MAT_SURPLUS-OVERSTOCK = 0.
*    ENDIF.
*
**   Calculate <= 6 months qty
*    READ TABLE IT_REC_QTY_6MTH WITH KEY MATNR = GT_MAT_SURPLUS-MATNR
*                                        WERKS = GT_MAT_SURPLUS-WERKS
*                                        LGORT = GT_MAT_SURPLUS-LGORT
*                               BINARY SEARCH.
*    IF SY-SUBRC EQ 0.
*      GT_MAT_SURPLUS-BAL_LESS = IT_REC_QTY_6MTH-MENGE.
*    ENDIF.
*    IF GT_MAT_SURPLUS-BAL_LESS > GT_MAT_SURPLUS-STOCK_OWN.
*      GT_MAT_SURPLUS-BAL_LESS = GT_MAT_SURPLUS-STOCK_OWN.
*    ENDIF.
*
**   Calculate <= 6 months value
*    GT_MAT_SURPLUS-VAL_LESS =   GT_MAT_SURPLUS-BAL_LESS
*                              * GT_MAT_SURPLUS-STPRS.
*    GT_MAT_SURPLUS-VAL_LESS_MVG =   GT_MAT_SURPLUS-BAL_LESS
*                                  * GT_MAT_SURPLUS-VERPR.
*
**   Calculate > 6 months qty
*    GT_MAT_SURPLUS-BAL_MORE =   GT_MAT_SURPLUS-STOCK_TOT
*                              - GT_MAT_SURPLUS-BAL_LESS.
*
**   Calculate <= 6 months value
*    GT_MAT_SURPLUS-VAL_MORE =   GT_MAT_SURPLUS-BAL_MORE
*                              * GT_MAT_SURPLUS-STPRS.
*    GT_MAT_SURPLUS-VAL_MORE_MVG =   GT_MAT_SURPLUS-BAL_MORE
*                                  * GT_MAT_SURPLUS-VERPR.
*

**   Quantity of receipts last 12 months
*    READ TABLE IT_REC_QTY_12MTH WITH KEY MATNR = GT_MAT_SURPLUS-MATNR
*                                         WERKS = GT_MAT_SURPLUS-WERKS
*                                         LGORT = GT_MAT_SURPLUS-LGORT
*                                BINARY SEARCH.
*    IF SY-SUBRC EQ 0.
*      GT_MAT_SURPLUS-QUAN_12_MONTHS_REC = IT_REC_QTY_12MTH-MENGE.
*    ENDIF.

*
**   Transfer price
**   First get purchasing org for plant
*    IF IT_T024W-WERKS NE GT_MAT_SURPLUS-WERKS.
*      CLEAR IT_T024W.
*      READ TABLE IT_T024W WITH KEY WERKS = GT_MAT_SURPLUS-WERKS BINARY SEARCH.
*    ENDIF.
**   If purch org found
*    IF IT_T024W-WERKS EQ GT_MAT_SURPLUS-WERKS.
**     Get actual transfer price
**      READ TABLE IT_EINE WITH KEY MATNR = GT_MAT_SURPLUS-MATNR
**                                  LIFNR = GT_MAT_SURPLUS-LIFNR
**                                  EKORG = IT_T024W-EKORG
**                                  WERKS = GT_MAT_SURPLUS-WERKS
**                         BINARY SEARCH.
**      IF SY-SUBRC EQ 0 AND IT_EINE-PEINH NE 0.
**        GT_MAT_SURPLUS-KBETR = IT_EINE-NETPR / IT_EINE-PEINH.
**      ENDIF.
**     Find condition
*      READ TABLE IT_A017 WITH KEY LIFNR = GT_MAT_SURPLUS-LIFNR
*                                  MATNR = GT_MAT_SURPLUS-MATNR
*                                  EKORG = IT_T024W-EKORG
*                                  WERKS = GT_MAT_SURPLUS-WERKS
*                         BINARY SEARCH.
*      IF SY-SUBRC EQ 0.
**       Transfer price
*        IF IT_A017-KONWA = GT_MAT_SURPLUS-WAERS.
*          GT_MAT_SURPLUS-KBETR = IT_A017-KBETR.
**       If not in CoCo currency, convert the value
*        ELSE.
*          CALL FUNCTION 'CONVERT_AMOUNT_TO_CURRENCY'
*            EXPORTING
*              DATE             = SY-DATUM
*              FOREIGN_CURRENCY = IT_A017-KONWA
*              FOREIGN_AMOUNT   = IT_A017-KBETR
*              LOCAL_CURRENCY   = GT_MAT_SURPLUS-WAERS
*            IMPORTING
*              LOCAL_AMOUNT     = GT_MAT_SURPLUS-KBETR
*            EXCEPTIONS
*              ERROR            = 0
*              OTHERS           = 0.
*        ENDIF.
**       Now express it as unit price
*        IF IT_A017-KPEIN NE 0.
*          GT_MAT_SURPLUS-KBETR = GT_MAT_SURPLUS-KBETR / IT_A017-KPEIN.
*        ENDIF.
*      ENDIF.
*    ENDIF.
*
*    APPEND GT_MAT_SURPLUS.
*  ENDLOOP.
*
*  SORT GT_MAT_SURPLUS BY MATNR WERKS LGORT.
*
*ENDFORM.                    " PROCESS_DATA




*&---------------------------------------------------------------------*
*&      Form  SELECT_OTH_DATA
*&---------------------------------------------------------------------*
FORM SELECT_OTH_DATA.

* Mat grp descr
  SELECT      MATKL WGBEZ
         FROM T023T
         INTO TABLE GT_MAT_GRP_DESCR
        WHERE SPRAS EQ GC_ENGLISH.
  SORT GT_MAT_GRP_DESCR BY MATKL.

** MRP descriptions
*  SELECT DISMM DIBEZ
*      FROM T438T
*      INTO TABLE GT_MRP_DESCR
*     WHERE SPRAS EQ GC_ENGLISH.
*  SORT GT_MRP_DESCR BY DISMM.

** Material status
*  SELECT MMSTA MTSTB
*      FROM T141T
*      INTO TABLE GT_MAT_STAT_DESCR
*     WHERE SPRAS EQ GC_ENGLISH.

ENDFORM.                    " SELECT_OTH_DATA

*&---------------------------------------------------------------------*
*&      Form  SELECT_CURRENCIES
*&---------------------------------------------------------------------*
FORM SELECT_CURRENCIES.

* Get currency for companies linked to selected plants
  SELECT      T001W~WERKS T001~WAERS
         INTO TABLE IT_WAERS
         FROM T001W
        INNER JOIN T001K
           ON T001W~BWKEY EQ T001K~BWKEY
        INNER JOIN T001
           ON T001K~BUKRS EQ T001~BUKRS
        WHERE T001W~WERKS IN SO_WERKS.     " = P_WERKS. "#EC CI_BUFFJOIN

  SORT IT_WAERS BY WERKS.

ENDFORM.                    " SELECT_CURRENCIES

*&---------------------------------------------------------------------*
*&      Form  GET_X_MONTHS_CONSUMPTION_NEW
*&---------------------------------------------------------------------*
FORM GET_X_MONTHS_CONSUMPTION_NEW
          USING LV_STARTDATE LIKE SY-DATUM
                LV_FIELDNAME LIKE LVC_S_FCAT-FIELDNAME.

  DATA:
    LV_ENDDATE   TYPE DATS,
    LV_MENGE     TYPE MENGE_D,
    LV_TABIX     LIKE SY-TABIX.
  FIELD-SYMBOLS:
    <FS_FIELD> TYPE LABST.

  LV_ENDDATE = SY-DATUM.                                    " - 1.

* Position in IT_CONS on first consumption line for current StLoc Mat
  CLEAR IT_CONS.
  READ TABLE IT_CONS WITH KEY MATNR = GT_MAT_SURPLUS-MATNR
                              WERKS = GT_MAT_SURPLUS-WERKS
                              LGORT = GT_MAT_SURPLUS-LGORT
                     BINARY SEARCH.
* While the reads are successfull and as long it's the same StLoc Mat
  WHILE      IT_CONS-MATNR EQ GT_MAT_SURPLUS-MATNR
         AND IT_CONS-WERKS EQ GT_MAT_SURPLUS-WERKS
         AND IT_CONS-LGORT EQ GT_MAT_SURPLUS-LGORT
         AND SY-SUBRC      EQ 0.

*   If movement is of interest depending on the date
    IF IT_CONS-BUDAT BETWEEN LV_STARTDATE AND LV_ENDDATE.
*     Aggregate qty
      LV_MENGE = LV_MENGE + IT_CONS-MENGE.
    ENDIF.

*   Go to next consumption line
    LV_TABIX = SY-TABIX + 1.
    READ TABLE IT_CONS INDEX LV_TABIX.

  ENDWHILE.

  ASSIGN COMPONENT LV_FIELDNAME OF STRUCTURE GT_MAT_SURPLUS TO <FS_FIELD>.
  <FS_FIELD> = LV_MENGE.

ENDFORM.                    " GET_X_MONTHS_CONSUMPTION_NEW

*&---------------------------------------------------------------------*
*&      Form  FILL_GAC_PGC_TABLE
*&---------------------------------------------------------------------*
FORM FILL_GAC_PGC_TABLE.

  DATA: WA_T179 TYPE T179.

* Select all level 2 hierarchy codes from the prodh table
  SELECT *
      FROM T179
      INTO TABLE IT_T179
     WHERE STUFE = '2'.

* Default fields in range
  GR_PRDHA-SIGN   = 'I'.
  GR_PRDHA-OPTION = 'EQ'.

* Loop over hierarchy codes where the first 4 char's fit in S_GAC
  IF NOT SO_GAC IS INITIAL.
    LOOP AT IT_T179 INTO WA_T179 WHERE PRODH(4) IN SO_GAC.
      GR_PRDHA-LOW = WA_T179-PRODH.
      APPEND GR_PRDHA.
    ENDLOOP.
  ENDIF.

* Loop over hierarchy codes where the second 4 char's fit in S_PGC
  IF NOT SO_PGC IS INITIAL.
    LOOP AT IT_T179 INTO WA_T179 WHERE PRODH+4(4) IN SO_PGC.
      GR_PRDHA-LOW = WA_T179-PRODH.
      APPEND GR_PRDHA.
    ENDLOOP.
  ENDIF.

ENDFORM.                    " FILL_GAC_PGC_TABLE

*&---------------------------------------------------------------------*
*&      Form  CHECK_AUTHORIZATION
*&---------------------------------------------------------------------*
FORM CHECK_AUTHORIZATION .

  DATA:
    BEGIN OF LT_WERKS OCCURS 0,
      WERKS LIKE T001W-WERKS,
    END OF LT_WERKS.

  SELECT DISTINCT WERKS
      INTO TABLE LT_WERKS
      FROM T001W
     WHERE WERKS IN SO_WERKS.                            "#EC CI_BYPASS

  LOOP AT LT_WERKS.
    AUTHORITY-CHECK OBJECT 'M_MATE_WRK'
             ID 'ACTVT' DUMMY
             ID 'WERKS' FIELD LT_WERKS-WERKS.   " P_WERKS.

    IF SY-SUBRC = 4.
*     No authorisation to display data from Sales Organisation p_vkorg
      MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '008' WITH LT_WERKS-WERKS.
    ELSEIF SY-SUBRC <> 0.
*     Error checking authorization.
      MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '004'.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " CHECK_AUTHORIZATION

*&---------------------------------------------------------------------*
*&      Form  SELECT_PLANT_VKORG
*&---------------------------------------------------------------------*
FORM SELECT_PLANT_VKORG .

  SELECT      WERKS VKORG
         FROM T001W
         INTO TABLE GT_T001W
        WHERE WERKS IN SO_WERKS.

  SORT GT_T001W BY WERKS.

ENDFORM.                    " SELECT_PLANT_VKORG

*&---------------------------------------------------------------------*
*&      Form  SELECT_OPEN_SALES_ORDERS
*&---------------------------------------------------------------------*
FORM SELECT_OPEN_SALES_ORDERS.

  RANGES:
    LR_LGORT FOR IT_VBAP-LGORT.

* Move provided StLocs to local range and add '   ' when required
  LR_LGORT[] = SO_LGORT[].
  IF '1000' IN SO_LGORT.
    LR_LGORT-SIGN   = 'I'.
    LR_LGORT-OPTION = 'EQ'.
    LR_LGORT-LOW    = '    '.
    APPEND LR_LGORT.
  ENDIF.

** Get sales order quantity
*  SELECT      VBAP~VBELN POSNR MATNR KWMENG WERKS LGORT
*         INTO TABLE IT_VBAP
*         FROM VBAK
*        INNER JOIN VBAP
*           ON VBAK~VBELN = VBAP~VBELN
*        WHERE MATNR IN SO_MATNR
*          AND WERKS IN SO_WERKS
*          AND LGORT IN LR_LGORT
*          AND PSTYV IN SO_PSTYV
*          AND ABGRU EQ SPACE
*          AND VBTYP EQ 'C' .     " Only doc Cat 'Orders'

** Don't continue open sales orders if no rows returned
*  CHECK SY-SUBRC EQ 0.


IF NOT GT_MARA[] IS INITIAL.
* Get sales order quantity
  SELECT VBELN
         POSNR
         MATNR
         KWMENG
         WERKS
         LGORT
         FROM VBAP
         INTO TABLE LT_VBAP
         FOR ALL ENTRIES IN GT_MARA
         WHERE MATNR = GT_MARA-MATNR
          AND WERKS  = GT_MARA-WERKS
          AND LGORT IN LR_LGORT
          AND PSTYV IN SO_PSTYV
          AND ABGRU = SPACE.

    IF NOT LT_VBAP[] IS INITIAL.
     SELECT VBELN
            FROM VBAK
            INTO TABLE LT_VBAK
            FOR ALL ENTRIES IN LT_VBAP
            WHERE VBELN = LT_VBAP-VBELN
            AND VBTYP = GC_C.

    ENDIF.


* Lets move the data into IT_VBAP
LOOP AT LT_VBAP.
        IT_VBAP-VBELN = LT_VBAP-VBELN.
        IT_VBAP-POSNR = LT_VBAP-POSNR.
        IT_VBAP-MATNR = LT_VBAP-MATNR.
        IT_VBAP-KWMENG = LT_VBAP-KWMENG.
        IT_VBAP-WERKS = LT_VBAP-WERKS.
        IT_VBAP-LGORT = LT_VBAP-LGORT.

*  Move only doc Cat 'Orders'
        CLEAR LT_VBAK.
        READ TABLE LT_VBAK WITH KEY VBELN = LT_VBAP-VBELN.
        IF SY-SUBRC = 0.
            APPEND IT_VBAP.
            CLEAR  IT_VBAP.
        ENDIF.
ENDLOOP.

ENDIF.

* Don't continue open sales orders if no rows returned
*  CHECK SY-SUBRC EQ 0.

   CHECK IT_VBAP[] IS NOT INITIAL.

* Add order quantities to allocations table
  SORT IT_VBAP BY MATNR WERKS LGORT.





** Add order quantities to allocations table
*  SORT IT_VBAP BY MATNR WERKS LGORT.
*  LOOP AT IT_VBAP .
**   When the sales item's StLoc is initial, treat it is if it were
**   StLoc 1000
*    IF IT_VBAP-LGORT IS INITIAL.
*      IT_VBAP-LGORT = '1000'.
*    ENDIF.
*    READ TABLE GT_MARA ASSIGNING <FS_MARA>
*                       WITH KEY MATNR = IT_VBAP-MATNR
*                                WERKS = IT_VBAP-WERKS
*                                LGORT = IT_VBAP-LGORT
*                       BINARY SEARCH.
*    IF SY-SUBRC NE 0.
*      DELETE IT_VBAP.
*    ELSE.
*      GT_ALLOCS-LGORT = IT_VBAP-LGORT.
*      GT_ALLOCS-WERKS = IT_VBAP-WERKS.
*      GT_ALLOCS-MATNR = IT_VBAP-MATNR.
*      GT_ALLOCS-ALLOC_QUANTITY = IT_VBAP-KWMENG.
*      COLLECT GT_ALLOCS.
*    ENDIF.
*  ENDLOOP.


  LOOP AT IT_VBAP .
*   When the sales item's StLoc is initial, treat it is if it were
*   StLoc 1000
    IF IT_VBAP-LGORT IS INITIAL.
      IT_VBAP-LGORT = '1000'.
    ENDIF.

      GT_ALLOCS-LGORT = IT_VBAP-LGORT.
      GT_ALLOCS-WERKS = IT_VBAP-WERKS.
      GT_ALLOCS-MATNR = IT_VBAP-MATNR.
      GT_ALLOCS-ALLOC_QUANTITY = IT_VBAP-KWMENG.
      COLLECT GT_ALLOCS.

  ENDLOOP.

** Get delivered quantities for the above selected order items
*  IF NOT IT_VBAP[] IS INITIAL.
*    SELECT      LIPS~VBELN POSNR LIPS~MATNR LGORT LFIMG WERKS
*           INTO TABLE IT_LIPS
*           FROM VBFA
*           JOIN LIPS
*             ON VBFA~VBELN EQ LIPS~VBELN
*            AND VBFA~POSNN EQ LIPS~POSNR
*           JOIN VBUK
*             ON VBFA~VBELN EQ VBUK~VBELN
*            FOR ALL ENTRIES IN IT_VBAP
*          WHERE VBFA~VBELV   EQ IT_VBAP-VBELN
*            AND VBFA~POSNV   EQ IT_VBAP-POSNR
*            AND VBFA~VBTYP_N EQ 'J'  " Deliveries
*            AND VBUK~WBSTK   EQ 'C'.
*  ENDIF.


* Get delivered quantities for the above selected order items
 IF NOT IT_VBAP[] IS INITIAL.

    SELECT VBELV
           POSNV
           VBELN
           POSNN
           FROM VBFA
           INTO TABLE LT_VBFA
           FOR ALL ENTRIES IN IT_VBAP
           WHERE VBELV = IT_VBAP-VBELN
           AND   POSNV = IT_VBAP-POSNR
           AND VBTYP_N = GC_J.                  " Deliveries

    IF NOT  LT_VBFA[] IS INITIAL.
        SELECT  VBELN
                POSNR
                MATNR
                WERKS
                LGORT
                LFIMG
                FROM LIPS
                INTO TABLE LT_LIPS
                FOR ALL ENTRIES IN LT_VBFA
                WHERE VBELN =  LT_VBFA-VBELN
                AND   POSNR =  LT_VBFA-POSNN.


        SELECT  VBELN
                FROM VBUK
                INTO TABLE LT_VBUK
                FOR ALL ENTRIES IN LT_VBFA
                WHERE VBELN =  LT_VBFA-VBELN
                AND   WBSTK = GC_C.

    ENDIF.

*  Lets move the data into IT_LIPS
    LOOP AT LT_LIPS.
          CLEAR LT_VBFA.
          READ TABLE LT_VBFA WITH KEY VBELN =  LT_LIPS-VBELN
                                      POSNN =  LT_LIPS-POSNR.
          IF SY-SUBRC = 0.
             CLEAR LT_VBUK.
             READ TABLE LT_VBUK WITH KEY  VBELN =  LT_VBFA-VBELN.
             IF SY-SUBRC = 0.
               IT_LIPS-VBELN = LT_LIPS-VBELN.
               IT_LIPS-POSNR = LT_LIPS-POSNR.
               IT_LIPS-MATNR = LT_LIPS-MATNR.
               IT_LIPS-WERKS = LT_LIPS-WERKS.
               IT_LIPS-LGORT = LT_LIPS-LGORT.
               IT_LIPS-LFIMG = LT_LIPS-LFIMG.

               APPEND IT_LIPS.
               CLEAR  IT_LIPS.
            ENDIF.
         ENDIF.
    ENDLOOP.

  ENDIF.


* Subtract remaining delivered quantities from allocation table
  LOOP AT IT_LIPS.
    GT_ALLOCS-LGORT          = IT_LIPS-LGORT.
    GT_ALLOCS-WERKS          = IT_LIPS-WERKS.
    GT_ALLOCS-MATNR          = IT_LIPS-MATNR.
    GT_ALLOCS-ALLOC_QUANTITY = IT_LIPS-LFIMG * ( -1 ).
    COLLECT GT_ALLOCS.
  ENDLOOP.

ENDFORM.                    " SELECT_OPEN_SALES_ORDERS

*&---------------------------------------------------------------------*
*&      Form  SELECT_OPEN_RESERVATIONS
*&---------------------------------------------------------------------*
FORM SELECT_OPEN_RESERVATIONS .

*  SELECT      MATNR WERKS LGORT BDMNG ENMNG
*         INTO TABLE IT_RESB
*         FROM RESB
*        WHERE MATNR IN SO_MATNR
*          AND WERKS IN SO_WERKS
*          AND LGORT IN SO_LGORT
*          AND XLOEK EQ SPACE
*          AND XWAOK EQ 'X'.

 SELECT MATNR
         WERKS
         LGORT
         BDMNG
         ENMNG
         FROM RESB
         INTO TABLE IT_RESB
         FOR ALL ENTRIES IN GT_MARA
         WHERE MATNR = GT_MARA-MATNR
          AND  WERKS = GT_MARA-WERKS
          AND  LGORT = GT_MARA-LGORT
          AND  XLOEK = SPACE
          AND  XWAOK = GC_TRUE.



* Add open reservation quantities to allocations table
  SORT IT_RESB BY MATNR.
  LOOP AT IT_RESB.
    IF IT_RESB-LGORT EQ SPACE.
      IT_RESB-LGORT = '1000'.
    ENDIF.



*    READ TABLE GT_MARA ASSIGNING <FS_MARA>
*                       WITH KEY MATNR = IT_RESB-MATNR
*                                WERKS = IT_RESB-WERKS
*                                LGORT = IT_RESB-LGORT
*                       BINARY SEARCH.
*    IF SY-SUBRC NE 0.
*      DELETE IT_RESB.
*    ELSE.



      GT_ALLOCS-MATNR          = IT_RESB-MATNR.
      GT_ALLOCS-WERKS          = IT_RESB-WERKS.
      GT_ALLOCS-LGORT          = IT_RESB-LGORT.
      GT_ALLOCS-ALLOC_QUANTITY = IT_RESB-BDMNG - IT_RESB-ENMNG.
      COLLECT GT_ALLOCS.


*    ENDIF.
  ENDLOOP.

ENDFORM.                    " SELECT_OPEN_RESERVATIONS

*&---------------------------------------------------------------------*
*&      Form  SEND2SPOOL
*&---------------------------------------------------------------------*
FORM SEND2SPOOL .

  DATA:
    FNAM             LIKE RLGRAP-FILENAME,
    IT_DD03L         LIKE DD03L OCCURS 0 WITH HEADER LINE,
    IT_DD04T         LIKE DD04T OCCURS 0 WITH HEADER LINE,
    IT_OUTXLS(4096)  TYPE C OCCURS 0,
    WA_OUTXLS(4096)  TYPE C.

  CONSTANTS:
    C_TAB TYPE C VALUE CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB.

* Get fields of structure 'YSE_SD_SALES_OUT'
  SELECT *
         FROM DD03L
         INTO TABLE IT_DD03L
        WHERE TABNAME = 'YSE_SDMM_SURPLUS_OUTPUT_NEW'.

* Get the descriptions of the fields in the structure
  SELECT *
         FROM DD04T
         INTO TABLE IT_DD04T
          FOR ALL ENTRIES IN IT_DD03L
        WHERE ROLLNAME EQ IT_DD03L-ROLLNAME
          AND DDLANGUAGE EQ 'EN'.

* Build filename
  V_DAT = SY-DATUM.
  V_TIM = SY-UZEIT.
  CONCATENATE '/var/load/' SY-SYSID '/UK/original/YSE_SURPLUS_NEW_'
              USER_NAME '_' V_DAT '_' V_TIM '.TXT'
         INTO FNAM.

* Make the output table ; delimited
  CALL FUNCTION 'SAP_CONVERT_TO_CSV_FORMAT'
    TABLES
      I_TAB_SAP_DATA       = GT_MAT_SURPLUS
    CHANGING
      I_TAB_CONVERTED_DATA = IT_OUTXLS
    EXCEPTIONS
      CONVERSION_FAILED    = 1
      OTHERS               = 2.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

* Open file
  OPEN DATASET FNAM FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.
  IF SY-SUBRC <> 0.
    WRITE 'Error opening file. Action aborted.'(001).
    EXIT.
  ENDIF.

* Write header line
  CLEAR WA_OUTXLS.
  SORT IT_DD03L BY POSITION.
  LOOP AT IT_DD03L.
    READ TABLE IT_DD04T WITH KEY ROLLNAME = IT_DD03L-ROLLNAME.
    IF WA_OUTXLS IS INITIAL.
      WA_OUTXLS = IT_DD04T-REPTEXT.
    ELSE.
      CONCATENATE WA_OUTXLS C_TAB IT_DD04T-REPTEXT INTO WA_OUTXLS.
    ENDIF.
  ENDLOOP.
  TRANSFER WA_OUTXLS TO FNAM.

* Process lines
  LOOP AT IT_OUTXLS INTO WA_OUTXLS.
    REPLACE ALL OCCURRENCES OF ';' IN WA_OUTXLS WITH C_TAB.
    TRANSFER WA_OUTXLS TO FNAM.
  ENDLOOP.

  CLOSE DATASET FNAM.

  WRITE: 'Report output written to file:'(002),
         FNAM.

ENDFORM.                    " SEND2SPOOL

*&---------------------------------------------------------------------*
*&      Form  GET_DATES
*&---------------------------------------------------------------------*
FORM GET_DATES .

* Go 3 months back and put it in GV_3_MONTHS_AGO, then add 1 day to it
  CALL FUNCTION 'MONTH_PLUS_DETERMINE'
    EXPORTING
      MONTHS  = '-3'
      OLDDATE = SY-DATUM
    IMPORTING
      NEWDATE = GV_3_MONTHS_AGO.
  GV_3_MONTHS_AGO = GV_3_MONTHS_AGO + 1.

* Go 6 months back and put it in GV_6_MONTHS_AGO, then add 1 day to it
  CALL FUNCTION 'MONTH_PLUS_DETERMINE'
    EXPORTING
      MONTHS  = '-6'
      OLDDATE = SY-DATUM
    IMPORTING
      NEWDATE = GV_6_MONTHS_AGO.
  GV_6_MONTHS_AGO = GV_6_MONTHS_AGO + 1.

* Go 12 months back and put it in GV_12_MONTHS_AGO, then add 1 day to it
  CALL FUNCTION 'MONTH_PLUS_DETERMINE'
    EXPORTING
      MONTHS  = '-12'
      OLDDATE = SY-DATUM
    IMPORTING
      NEWDATE = GV_12_MONTHS_AGO.
  GV_12_MONTHS_AGO = GV_12_MONTHS_AGO + 1.

* Go 12 months back and put it in GV_CUR_MINUS_12
  CALL FUNCTION 'MONTH_PLUS_DETERMINE'
    EXPORTING
      MONTHS  = '-12'
      OLDDATE = SY-DATUM
    IMPORTING
      NEWDATE = GV_CUR_MINUS_12.

* Go 24 months back and put it in GV_CUR_MINUS_24
  CALL FUNCTION 'MONTH_PLUS_DETERMINE'
    EXPORTING
      MONTHS  = '-24'
      OLDDATE = SY-DATUM
    IMPORTING
      NEWDATE = GV_CUR_MINUS_24.

* Go 6 months back and put it in GV_CUR_MINUS_6
  CALL FUNCTION 'MONTH_PLUS_DETERMINE'
    EXPORTING
      MONTHS  = '-6'
      OLDDATE = SY-DATUM
    IMPORTING
      NEWDATE = GV_CUR_MINUS_6.

ENDFORM.                    " GET_DATES



*&---------------------------------------------------------------------*
*&      Form  SELECT_MSEG_DATA
*&---------------------------------------------------------------------*
FORM SELECT_MSEG_DATA .

*  SELECT      MSEG~MBLNR MSEG~MJAHR ZEILE MATNR WERKS LGORT
*              MENGE MEINS ERFMG ERFME BWART BUDAT
*              EBELN
*         INTO TABLE IT_MSEG
*         FROM MSEG
*         JOIN MKPF
*           ON MSEG~MBLNR EQ MKPF~MBLNR
*          AND MSEG~MJAHR EQ MKPF~MJAHR
*        WHERE MATNR IN SO_MATNR
*          AND WERKS IN SO_WERKS
*          AND LGORT IN SO_LGORT
*          AND BWART IN GR_BWART_ALL.



IF NOT GT_MARA[] IS INITIAL.
SELECT MBLNR
       MJAHR
       ZEILE
       BWART
       MATNR
       WERKS
       LGORT
       MENGE
*       MEINS                MOD-001
       ERFMG
       ERFME
       EBELN
         FROM MSEG
         INTO TABLE LT_MSEG
         FOR ALL ENTRIES IN GT_MARA
         WHERE MATNR = GT_MARA-MATNR
          AND WERKS = GT_MARA-WERKS
          AND LGORT = GT_MARA-LGORT
          AND BWART IN GR_BWART_ALL.


  IF NOT LT_MSEG[] IS INITIAL.
      SELECT  MBLNR
              MJAHR
              BUDAT
              FROM MKPF
              INTO TABLE LT_MKPF
              FOR ALL ENTRIES IN LT_MSEG
              WHERE MBLNR = LT_MSEG-MBLNR
              AND   MJAHR = LT_MSEG-MJAHR.
  ENDIF.

* Now let is move the records to IT_MSEG
LOOP AT LT_MSEG.
       IT_MSEG-MBLNR  = LT_MSEG-MBLNR.
       IT_MSEG-MJAHR  = LT_MSEG-MJAHR.
       IT_MSEG-ZEILE  = LT_MSEG-ZEILE.
       IT_MSEG-MATNR  = LT_MSEG-MATNR.
       IT_MSEG-WERKS  = LT_MSEG-WERKS.
       IT_MSEG-LGORT  = LT_MSEG-LGORT.
       IT_MSEG-MENGE  = LT_MSEG-MENGE.
*       IT_MSEG-MEINS  = LT_MSEG-MEINS.     MOD-001
       IT_MSEG-ERFMG  = LT_MSEG-ERFMG.
       IT_MSEG-ERFME  = LT_MSEG-ERFME.
       IT_MSEG-BWART  = LT_MSEG-BWART.
       IT_MSEG-EBELN  = LT_MSEG-EBELN.


       CLEAR LT_MKPF.
       READ TABLE LT_MKPF WITH KEY MBLNR = LT_MSEG-MBLNR
                                   MJAHR = LT_MSEG-MJAHR.

       IF SY-SUBRC = 0.
         IT_MSEG-BUDAT  = LT_MKPF-BUDAT.
       ENDIF.

       APPEND IT_MSEG.
       CLEAR  IT_MSEG.
ENDLOOP.

ENDIF.



ENDFORM.                    " SELECT_MSEG_DATA



*&---------------------------------------------------------------------*
*&      Form  FILL_BWART_RANGES
*&---------------------------------------------------------------------*
FORM FILL_BWART_RANGES .

  DATA:
    BEGIN OF IT_T156 OCCURS 0,
      BWART LIKE T156-BWART,
    END OF IT_T156,
    LS_BWART_RANGE LIKE LINE OF GR_BWART_ISS.

* Prepare header line for the ranges
  LS_BWART_RANGE-SIGN = 'I'.
  LS_BWART_RANGE-OPTION = 'EQ'.

* Select all valid movement types provided by the user
  SELECT      BWART
         INTO TABLE IT_T156
         FROM T156
        WHERE BWART IN SO_BWART.

* Add the MovtTypes selected by user to GR_BWART_ALL
  LOOP AT IT_T156.
    LS_BWART_RANGE-LOW = IT_T156-BWART.
    APPEND LS_BWART_RANGE TO GR_BWART_ALL.
  ENDLOOP.

* Add the Receipts movt types to appropriate ranges
  LS_BWART_RANGE-LOW = '101'.                             "GR goods receipt
  APPEND LS_BWART_RANGE TO GR_BWART_ALL.
  APPEND LS_BWART_RANGE TO GR_BWART_REC.


  LS_BWART_RANGE-LOW = '651'.                             "GD ret.del.  returns
  APPEND LS_BWART_RANGE TO GR_BWART_ALL.
  APPEND LS_BWART_RANGE TO GR_BWART_REC.


  LS_BWART_RANGE-LOW = '634'.
  APPEND LS_BWART_RANGE TO GR_BWART_ALL.
  APPEND LS_BWART_RANGE TO GR_BWART_REC.

* Add the Issues movt types to appropriate ranges
  LS_BWART_RANGE-LOW = '261'.                             "GI for order
  APPEND LS_BWART_RANGE TO GR_BWART_ALL.
  APPEND LS_BWART_RANGE TO GR_BWART_ISS.


  LS_BWART_RANGE-LOW = '601'.                             "GD goods issue:delvy
  APPEND LS_BWART_RANGE TO GR_BWART_ALL.
  APPEND LS_BWART_RANGE TO GR_BWART_ISS.


  LS_BWART_RANGE-LOW = '633'.
  APPEND LS_BWART_RANGE TO GR_BWART_ALL.
  APPEND LS_BWART_RANGE TO GR_BWART_ISS.


  SORT : GR_BWART_ALL,
         GR_BWART_REC,
         GR_BWART_ISS.

DELETE ADJACENT DUPLICATES FROM GR_BWART_ALL COMPARING ALL FIELDS.

ENDFORM.                    " FILL_BWART_RANGES

*&---------------------------------------------------------------------*
*&      Form  SELECT_SURPLUS_HD
*&---------------------------------------------------------------------*
FORM SELECT_SURPLUS_HD .

  SELECT      *
         INTO TABLE GT_SURPLUS_HD
         FROM YSE_SURPLUS_HD01
        WHERE MATNR IN SO_MATNR
          AND WERKS IN SO_WERKS
          AND LGORT IN SO_LGORT.

ENDFORM.                    " SELECT_SURPLUS_HD




*&---------------------------------------------------------------------*
*&      Form  SELECT_STPRICE
*&---------------------------------------------------------------------*
FORM SELECT_STPRICE .

** Select valuation areas corr to the selected plants from T001W
*  SELECT      WERKS BWKEY
*         FROM T001W
*         INTO TABLE IT_T001W
*        WHERE WERKS IN SO_WERKS.
*  SORT IT_T001W BY WERKS.
*
** Get standard prices for materials from selection screen

**  SELECT      MATNR BWKEY STPRS PEINH ZKDAT
*  SELECT      MATNR BWKEY STPRS PEINH ZKDAT VERPR

*         INTO TABLE GT_PRICE
*         FROM MBEW
*          FOR ALL ENTRIES IN IT_T001W
*        WHERE MATNR IN SO_MATNR
*          AND BWKEY EQ IT_T001W-BWKEY
*          AND BWTAR EQ SPACE.
*  SORT GT_PRICE BY MATNR BWKEY.




* Select valuation areas corr to the selected plants from T001W
  SELECT      WERKS BWKEY
         FROM T001W
         INTO TABLE IT_T001W
        WHERE WERKS IN SO_WERKS.

  SORT IT_T001W BY WERKS.


 LOOP AT  IT_T001W.
  LOOP AT GT_MARA WHERE WERKS = IT_T001W-BWKEY.
       LT_PRICE-MATNR = GT_MARA-MATNR.
       LT_PRICE-BWKEY = IT_T001W-BWKEY.
       APPEND LT_PRICE.
       CLEAR  LT_PRICE.
  ENDLOOP.
ENDLOOP.

SORT LT_PRICE BY MATNR BWKEY.

* Get standard prices for materials from selection screen
  SELECT      MATNR
              BWKEY
              STPRS
              PEINH
              ZKDAT
              VERPR
               INTO TABLE GT_PRICE
               FROM MBEW
               FOR ALL ENTRIES IN LT_PRICE
               WHERE MATNR = LT_PRICE-MATNR
               AND BWKEY = LT_PRICE-BWKEY
               AND BWTAR EQ SPACE.

  SORT GT_PRICE BY MATNR BWKEY.


ENDFORM.                    " SELECT_STPRICE

*&---------------------------------------------------------------------*
*&      Form  GET_SAFETY_STOCK
*&---------------------------------------------------------------------*
FORM GET_SAFETY_STOCK .

* Only consider safety stock if "safety stock indicator" is flagged
  CHECK P_SAF = 'X'.
* Only consider safety stock if storage location includes 1000
* CHECK P_LGORT = '1000'.
  CHECK '1000' IN SO_LGORT.

* Safety stock has already been fetched from MARC, just copy it over into IT_ALLOC_EXT
* Put material with it's safety stock in allocations table
  LOOP AT GT_MARA WHERE LGORT = '1000'.
    GT_ALLOCS-LGORT          = '1000'.
    GT_ALLOCS-MATNR          = GT_MARA-MATNR.
    GT_ALLOCS-WERKS          = GT_MARA-WERKS.
    GT_ALLOCS-ALLOC_QUANTITY = GT_MARA-EISBE.
    COLLECT GT_ALLOCS.
  ENDLOOP.

ENDFORM.                    " GET_SAFETY_STOCK

*&---------------------------------------------------------------------*
*&      Form  SELECT_OPEN_TRANSPORT_REQ
*&---------------------------------------------------------------------*
FORM SELECT_OPEN_TRANSPORT_REQ.

* Only consider open transport req if storage location = 1000
* CHECK P_LGORT = '1000'.
  CHECK '1000' IN SO_LGORT.

*  SELECT      MATNR RESWK MENGE
*         INTO TABLE IT_EBAN
*         FROM EBAN
*        WHERE MATNR IN SO_MATNR
*          AND BSART EQ C_PO_REPLENISHMENT
*          AND PSTYP EQ C_PSTYP_STOCK_TR      "STOCK TRANSFER
*          AND STATU EQ 'N'
*          AND LOEKZ EQ SPACE
*          AND EBAKZ EQ SPACE
*          AND RESWK IN SO_WERKS
*          AND LGORT EQ '1000'.

* SELECT  MATNR
*         RESWK
*         MENGE
*         FROM EBAN
*         INTO TABLE IT_EBAN
*         FOR ALL ENTRIES IN GT_MARA
*         WHERE MATNR = GT_MARA-MATNR
*          AND RESWK  = GT_MARA-WERKS
*          AND BSART  = C_PO_REPLENISHMENT
*          AND PSTYP  = C_PSTYP_STOCK_TR      "STOCK TRANSFER
*          AND STATU  = GC_N
*          AND LOEKZ  = SPACE
*          AND EBAKZ  = SPACE
*          AND LGORT EQ '1000'.



SELECT  MATNR
         RESWK
         MENGE
         FROM EBAN
         INTO TABLE IT_EBAN
         WHERE MATNR IN SO_MATNR
          AND RESWK  IN SO_WERKS
          AND BSART  = C_PO_REPLENISHMENT
          AND PSTYP  = C_PSTYP_STOCK_TR      "STOCK TRANSFER
          AND STATU  = GC_N
          AND LOEKZ  = SPACE
          AND EBAKZ  = SPACE
          AND LGORT EQ '1000'.


* Add open transport req quant's to allocations table
  LOOP AT IT_EBAN.
    READ TABLE GT_MARA  ASSIGNING <FS_MARA>
                        WITH KEY MATNR = IT_EBAN-MATNR
                                 WERKS = IT_EBAN-RESWK
                                 LGORT = '1000'
                        BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      GT_ALLOCS-MATNR = IT_EBAN-MATNR.
      GT_ALLOCS-WERKS = IT_EBAN-RESWK.
      GT_ALLOCS-LGORT = '1000'.
      GT_ALLOCS-ALLOC_QUANTITY = IT_EBAN-MENGE.
      COLLECT GT_ALLOCS.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " SELECT_OPEN_TRANSPORT_REQ

*&---------------------------------------------------------------------*
*&      Form  SELECT_OPEN_TRANSPORT_ORDERS
*&---------------------------------------------------------------------*
FORM SELECT_OPEN_TRANSPORT_ORDERS .

* Only consider open transport orders if storage location = 1000
* CHECK p_lgort = '1000'.
  CHECK '1000' IN SO_LGORT.

** Select from ekpo/ekko
*  SELECT      EKPO~EBELN EBELP MATNR RESWK LGORT MENGE
*         INTO TABLE IT_EKPO
*         FROM EKKO
*         JOIN EKPO
*           ON EKKO~EBELN = EKPO~EBELN
*        WHERE MATNR IN SO_MATNR
*          AND (    BSART EQ 'ZUB1'
*                OR BSART EQ 'ZNB4' )
*          AND RESWK IN SO_WERKS
*          AND EKPO~LOEKZ EQ SPACE.

 SELECT      EKPO~EBELN EBELP MATNR RESWK LGORT MENGE
         INTO TABLE IT_EKPO
         FROM EKKO
         JOIN EKPO
           ON EKKO~EBELN = EKPO~EBELN
*        FOR ALL ENTRIES IN GT_MARA
*        WHERE MATNR = GT_MARA-MATNR
        WHERE MATNR IN SO_MATNR
          AND (    BSART EQ 'ZUB1'
                OR BSART EQ 'ZNB4' )
          AND RESWK IN SO_WERKS
          AND EKPO~LOEKZ EQ SPACE.

* Don't continue open transport orders if no rows returned
  CHECK SY-SUBRC EQ 0.

* Select receipted quantities for the open transport order items
  SELECT EBELN
         EBELP
         MATNR
         MENGE
         BELNR
         BWART
         INTO TABLE IT_EKBE
         FROM EKBE
         FOR ALL ENTRIES IN IT_EKPO
         WHERE EBELN EQ IT_EKPO-EBELN
         AND EBELP EQ IT_EKPO-EBELP
         AND VGABE = GC_6.

* Add transport orders to allocation table
  LOOP AT IT_EKPO.
    READ TABLE GT_MARA ASSIGNING <FS_MARA>
                       WITH KEY MATNR = IT_EKPO-MATNR
                                WERKS = IT_EKPO-RESWK
                                LGORT = '1000'
                       BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      GT_ALLOCS-MATNR          = IT_EKPO-MATNR.
      GT_ALLOCS-WERKS          = IT_EKPO-RESWK.
      GT_ALLOCS-LGORT          = '1000'.
      GT_ALLOCS-ALLOC_QUANTITY = IT_EKPO-MENGE.
      COLLECT GT_ALLOCS.
      LOOP AT IT_EKBE WHERE EBELN EQ IT_EKPO-EBELN
                        AND EBELP EQ IT_EKPO-EBELP.
        IF IT_EKBE-BWART EQ '641'.
          GT_ALLOCS-ALLOC_QUANTITY = IT_EKBE-MENGE * ( -1 ).
        ELSEIF IT_EKBE-BWART EQ '642'.
          GT_ALLOCS-ALLOC_QUANTITY = IT_EKBE-MENGE.
        ENDIF.
        COLLECT GT_ALLOCS.
      ENDLOOP.
    ELSE.
      DELETE IT_EKPO.
    ENDIF.
  ENDLOOP.


ENDFORM.                    " SELECT_OPEN_TRANSPORT_ORDERS

*&---------------------------------------------------------------------*
*&      Form  PROCESS_MSEG_SURPLUS_NEW
*&---------------------------------------------------------------------*
* In this routine, some internal tables will be filled based on the
* data in IT_MSEG and GT_SURPLUS_HD:
* - GT_REC_DAT: first receives all the receipts from IT_MSEG and
*               GT_SURPLUS_HD. Then the less recent dates per
*               Mat/Plt/Stl are thrown away
* - GT_ISS_DAT: first receives all the issues from IT_MSEG and
*               GT_SURPPLUS_HD. Then the less recent dates per
*               Mat/Plt/Stl are thrown away
* - IT_REC_QTY_6MTH: will hold aggregated qty per Mat/Plt/Stl for all
*               receipts in IT_MSEG and GT_SURPLUS_HD
* - IT_REC_QTY_12MTH: will hold aggregated qty per Mat/Plt/Stl for all
*               receipts in IT_MSEG and GT_SURPLUS_HD
*               (exclude stock transports)
* - IT_CONS:    will hold compiled list of IT_MSEG where movement type
*               matches selection criteria and GT_SURPLUS_HD where ZMOVT
*               is 'I'ssue.
*&---------------------------------------------------------------------*
FORM PROCESS_MSEG_SURPLUS_NEW.

  DATA:
    LWA_REC_DAT    LIKE LINE OF GT_REC_DAT,
    LWA_ISS_DAT    LIKE LINE OF GT_ISS_DAT.

* Process all goods movements
  LOOP AT IT_MSEG.
*   If the movement is a receipt
    IF IT_MSEG-BWART IN GR_BWART_REC.
*     Copy line to "receipts" table
      MOVE-CORRESPONDING IT_MSEG TO GT_REC_DAT.
      APPEND GT_REC_DAT.
*     If movement was in the last 6 months, aggregate the "Received qty 6 months"
      IF IT_MSEG-BUDAT GE GV_CUR_MINUS_6.
        MOVE-CORRESPONDING IT_MSEG TO IT_REC_QTY_6MTH.
        COLLECT IT_REC_QTY_6MTH.
      ENDIF.

*     If movement was in the last 12 months, aggregate the "Received qty 12 months"
      IF IT_MSEG-BUDAT GE GV_CUR_MINUS_12.
*       Check if stock transport
        READ TABLE IT_EKKO WITH TABLE KEY EBELN = IT_MSEG-EBELN.
        IF SY-SUBRC NE 0.
          MOVE-CORRESPONDING IT_MSEG TO IT_REC_QTY_12MTH.
          COLLECT IT_REC_QTY_12MTH.
        ENDIF.
      ENDIF.
    ENDIF.
*   If the movement is an issue
    IF IT_MSEG-BWART IN GR_BWART_ISS.
*     Copy line to "Issues" table
      MOVE-CORRESPONDING IT_MSEG TO GT_ISS_DAT.
      APPEND GT_ISS_DAT.
    ENDIF.
*   If the movement matches the selection criteria
    IF IT_MSEG-BWART IN SO_BWART.
*     Copy line to consumption table
      MOVE-CORRESPONDING IT_MSEG TO IT_CONS.
      APPEND IT_CONS.
    ENDIF.
  ENDLOOP.

* Process all movements (historical data)
  LOOP AT GT_SURPLUS_HD.
*   If the movement is a receipt
    IF GT_SURPLUS_HD-ZMOVT EQ 'R'.
*     Copy line to "receipts" table
      MOVE-CORRESPONDING GT_SURPLUS_HD TO GT_REC_DAT.
      APPEND GT_REC_DAT.
*     If movement was in the last 6 months, aggregate the "Received qty 6 months"
      IF GT_SURPLUS_HD-BUDAT GE GV_CUR_MINUS_6.
        MOVE-CORRESPONDING GT_SURPLUS_HD TO IT_REC_QTY_6MTH.
        COLLECT IT_REC_QTY_6MTH.
      ENDIF.

*     If movement was in the last 12 months, aggregate the "Received qty 12 months"
      IF GT_SURPLUS_HD-BUDAT GE GV_CUR_MINUS_12.
        MOVE-CORRESPONDING GT_SURPLUS_HD TO IT_REC_QTY_12MTH.
        COLLECT IT_REC_QTY_12MTH.
      ENDIF.
    ENDIF.
*   If the movement is an issue
    IF GT_SURPLUS_HD-ZMOVT EQ 'I'.
*     Copy line to "Issues" table
      MOVE-CORRESPONDING GT_SURPLUS_HD TO GT_ISS_DAT.
      APPEND GT_ISS_DAT.
*     Copy line to consumption table
      MOVE-CORRESPONDING GT_SURPLUS_HD TO IT_CONS.
      APPEND IT_CONS.
    ENDIF.
  ENDLOOP.

* Sort tables
  SORT:
    GT_REC_DAT      BY MATNR ASCENDING WERKS ASCENDING LGORT ASCENDING BUDAT DESCENDING,
    GT_ISS_DAT      BY MATNR ASCENDING WERKS ASCENDING LGORT ASCENDING BUDAT DESCENDING,
    IT_REC_QTY_6MTH BY MATNR WERKS LGORT,
    IT_REC_QTY_12MTH BY MATNR WERKS LGORT,
    IT_CONS         BY MATNR WERKS LGORT.

* Throw away less recent receipts
  LOOP AT GT_REC_DAT.
    IF     GT_REC_DAT-MATNR EQ LWA_REC_DAT-MATNR
       AND GT_REC_DAT-WERKS EQ LWA_REC_DAT-WERKS
       AND GT_REC_DAT-LGORT EQ LWA_REC_DAT-LGORT.
      DELETE GT_REC_DAT.
      CONTINUE.
    ELSE.
      MOVE-CORRESPONDING GT_REC_DAT TO LWA_REC_DAT.
    ENDIF.
  ENDLOOP.

* Throw away less recent issues
  LOOP AT GT_ISS_DAT.
    IF     GT_ISS_DAT-MATNR EQ LWA_ISS_DAT-MATNR
       AND GT_ISS_DAT-WERKS EQ LWA_ISS_DAT-WERKS
       AND GT_ISS_DAT-LGORT EQ LWA_ISS_DAT-LGORT.
      DELETE GT_ISS_DAT.
      CONTINUE.
    ELSE.
      MOVE-CORRESPONDING GT_ISS_DAT TO LWA_ISS_DAT.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " PROCESS_MSEG_SURPLUS_NEW

**&---------------------------------------------------------------------*
**&      Form  SELECT_TRANSFER_PRICES
**&---------------------------------------------------------------------*
*FORM SELECT_TRANSFER_PRICES .
*
*  SELECT      *
*         INTO TABLE IT_T024W
*         FROM T024W
*        WHERE WERKS IN SO_WERKS.
*  SORT IT_T024W BY WERKS.
*
**  SELECT      EINA~INFNR EINA~MATNR EINA~LIFNR
**              EINE~EKORG EINE~ESOKZ EINE~WERKS
**              EINE~NETPR EINE~PEINH EINE~PRDAT
**         INTO TABLE IT_EINE
**         FROM EINA
**         JOIN EINE
**           ON EINA~INFNR EQ EINE~INFNR
**          FOR ALL ENTRIES IN GT_MARA
**        WHERE EINA~MATNR EQ GT_MARA-MATNR
**          AND EINA~LIFNR EQ GT_MARA-LIFNR
**          AND EINA~LOEKZ EQ SPACE
**          AND EINE~ESOKZ EQ '0'
**          AND EINE~LOEKZ EQ SPACE
**          AND EINE~PRDAT GT SY-DATUM.
**  SORT IT_EINE  BY MATNR LIFNR EKORG WERKS.
*
** Get transfer prices
*  SELECT      KAPPL KSCHL LIFNR MATNR EKORG WERKS ESOKZ DATBI DATAB KNUMH
*         INTO CORRESPONDING FIELDS OF TABLE IT_A017
*         FROM A017
*          FOR ALL ENTRIES IN GT_MARA
*        WHERE KAPPL EQ 'M'
*          AND KSCHL EQ 'PB00'
*          AND LIFNR EQ GT_MARA-LIFNR
*          AND MATNR EQ GT_MARA-MATNR
*          AND DATBI GT SY-DATUM
*          AND ESOKZ EQ '0'.
*
*  SORT IT_A017 BY LIFNR MATNR EKORG WERKS.
*
*  LOOP AT IT_A017.
*    SELECT SINGLE KOPOS KBETR KPEIN KONWA
*             INTO (IT_A017-KOPOS, IT_A017-KBETR, IT_A017-KPEIN, IT_A017-KONWA)
*             FROM KONP
*            WHERE KNUMH EQ IT_A017-KNUMH.
*    MODIFY IT_A017.
*  ENDLOOP.
*
*ENDFORM.                    " SELECT_TRANSFER_PRICES

*&---------------------------------------------------------------------*
*&      Form  SELECT_PO_TYPE
*&---------------------------------------------------------------------*
*       Select purchase order types
*----------------------------------------------------------------------*
FORM SELECT_PO_TYPE .

  CHECK NOT IT_MSEG[] IS INITIAL.

*  SELECT EBELN BSART INTO TABLE IT_EKKO
*         FROM EKKO
*         FOR ALL ENTRIES IN IT_MSEG
*         WHERE EBELN = IT_MSEG-EBELN
*           AND BSART = 'ZUB1'.


SELECT  EBELN
        BSART
        FROM EKKO
        INTO TABLE IT_EKKO
        FOR ALL ENTRIES IN IT_MSEG
        WHERE EBELN = IT_MSEG-EBELN
        AND   BSART = GC_ZUB1.

ENDFORM.                    " SELECT_PO_TYPE

*&---------------------------------------------------------------------*
*&      Form  SELECT_PLC_CODES
*&---------------------------------------------------------------------*
*       Get PLC codes
*----------------------------------------------------------------------*
FORM SELECT_PLC_CODES .

  SELECT * FROM K9RCD11000010 INTO TABLE IT_PLC.

ENDFORM.                    " SELECT_PLC_CODES




*&---------------------------------------------------------------------*
*&      Form  PROCESS_DATA_NEW
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM PROCESS_DATA_NEW .

SORT GT_ALLOCS  BY MATNR WERKS LGORT.


* Get the data product hierarchy from MVKE.
    IF NOT GT_MARA[] IS INITIAL.
    SELECT MATNR
           VKORG
           PRODH
           FROM MVKE
           INTO TABLE LT_MVKE
           FOR ALL ENTRIES IN GT_MARA
           WHERE MATNR = GT_MARA-MATNR
             AND VTWEG = GC_01.

    IF NOT LT_MVKE[] IS INITIAL.
      LOOP AT LT_MVKE.
        LT_MVKE-PGC =  LT_MVKE-PRODH+4(4).
        MODIFY LT_MVKE TRANSPORTING PGC.
      ENDLOOP.

    SELECT PGC
           PRCTR
           FROM YSE_PRCTR_DERIV
           INTO TABLE LT_YSE_PRCTR_DERIV
           FOR ALL ENTRIES IN LT_MVKE
           WHERE PGC = LT_MVKE-PGC
           AND   VTWEG = GC_01.

     IF NOT LT_YSE_PRCTR_DERIV[] IS INITIAL.
    SELECT PRCTR
           SEGMENT
           FROM YSE_PRCTR_BL
           INTO TABLE LT_YSE_PRCTR_BL
           FOR ALL ENTRIES IN LT_YSE_PRCTR_DERIV
           WHERE PRCTR = LT_YSE_PRCTR_DERIV-PRCTR.
     ENDIF.
   ENDIF.
ENDIF.



* Process selected materials
  LOOP AT GT_MARA ASSIGNING <FS_MARA>.

*   Copy material details to output table
    CLEAR GT_MAT_SURPLUS.
    MOVE-CORRESPONDING <FS_MARA> TO GT_MAT_SURPLUS.


*   Calculate own stock.
    GT_MAT_SURPLUS-STOCK_OWN = <FS_MARA>-LABST +
                               <FS_MARA>-EINME +
                               <FS_MARA>-INSME +
                               <FS_MARA>-SPEME +
                               <FS_MARA>-RETME +
                               <FS_MARA>-UMLME.


*   Total stock when StLoc is 1000: own stock + stock at customer
    CLEAR IT_MSKU.
    IF GT_MAT_SURPLUS-LGORT = '1000'.
      READ TABLE IT_MSKU WITH KEY MATNR = GT_MAT_SURPLUS-MATNR
                                  WERKS = GT_MAT_SURPLUS-WERKS.
*                         BINARY SEARCH.
    ENDIF.

*   Calculate the total stock value
    GT_MAT_SURPLUS-STOCK_TOT = GT_MAT_SURPLUS-STOCK_OWN + IT_MSKU-KULAB.
*   If total stock is zero, don't keep the line
    IF GT_MAT_SURPLUS-STOCK_TOT = 0.
      CONTINUE.
    ENDIF.




*   Standard price
    READ TABLE IT_T001W WITH KEY WERKS = GT_MAT_SURPLUS-WERKS
                        BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      READ TABLE GT_PRICE WITH KEY MATNR = GT_MAT_SURPLUS-MATNR
                                   BWKEY = IT_T001W-BWKEY.
*                          BINARY SEARCH.
      IF SY-SUBRC EQ 0.
        GT_MAT_SURPLUS-STPRS = GT_PRICE-STPRS / GT_PRICE-PEINH.
        GT_MAT_SURPLUS-VERPR = GT_PRICE-VERPR / GT_PRICE-PEINH.
      ENDIF.
    ENDIF.

*   Calculate own stock value.
    GT_MAT_SURPLUS-STOCK_OWNVAL =   GT_MAT_SURPLUS-STOCK_OWN
                                  * GT_MAT_SURPLUS-STPRS.

*   Begin of MOD-001.
*    GT_MAT_SURPLUS-STOCK_OWNVAL_MVG =   GT_MAT_SURPLUS-STOCK_OWN
*                                      * GT_MAT_SURPLUS-VERPR.
*   End   of MOD-001.


*   Calculate total stock value.
    GT_MAT_SURPLUS-STOCK_TOTVAL =   GT_MAT_SURPLUS-STOCK_TOT
                                  * GT_MAT_SURPLUS-STPRS.
*   Begin of MOD-001.
*    GT_MAT_SURPLUS-STOCK_TOTVAL_MVG =   GT_MAT_SURPLUS-STOCK_TOT
*                                      * GT_MAT_SURPLUS-VERPR.
*   End   of MOD-001.

*   Allocated stock
    CLEAR GT_ALLOCS.
    READ TABLE GT_ALLOCS WITH KEY MATNR = GT_MAT_SURPLUS-MATNR
                                  WERKS = GT_MAT_SURPLUS-WERKS
                                  LGORT = GT_MAT_SURPLUS-LGORT
                         BINARY SEARCH.
    GT_MAT_SURPLUS-STOCK_ALLOC = GT_ALLOCS-ALLOC_QUANTITY.

*   Calculate available stock
    GT_MAT_SURPLUS-STOCK_AVAIL = GT_MAT_SURPLUS-LABST -
                                 GT_MAT_SURPLUS-STOCK_ALLOC.





*   Split prdha to GAC and PGC
    GT_MAT_SURPLUS-GAC = <FS_MARA>-PRDHA(4).
    GT_MAT_SURPLUS-PGC = <FS_MARA>-PRDHA+4(4).

*   Derivation of PLC
    IF NOT P_VKORG IS INITIAL.
      GV_VKORG = P_VKORG.
    ELSE.
      CLEAR GT_T001W.
      READ TABLE GT_T001W WITH KEY WERKS = <FS_MARA>-WERKS.
      GV_VKORG = GT_T001W-VKORG.
    ENDIF.


*    SELECT SINGLE PRODH INTO GV_PRODH
*           FROM MVKE
*           WHERE MATNR = <FS_MARA>-MATNR
*             AND VKORG = GV_VKORG
*             AND VTWEG = '01'.


    CLEAR LT_MVKE.
    READ TABLE LT_MVKE WITH KEY MATNR = <FS_MARA>-MATNR
                                VKORG = GV_VKORG
                                BINARY SEARCH.

    IF SY-SUBRC = 0.
      GV_PRODH = LT_MVKE-PRODH.
*      SELECT SINGLE B~SEGMENT INTO GV_PLC_TEMP
*             FROM YSE_PRCTR_DERIV AS P
*             INNER JOIN YSE_PRCTR_BL AS B
*                   ON B~PRCTR = P~PRCTR
*                 WHERE P~VTWEG = '01'
*                   AND P~PGC   = GV_PRODH+4(4).



      CLEAR LT_YSE_PRCTR_DERIV.
      READ TABLE LT_YSE_PRCTR_DERIV WITH KEY PGC = GV_PRODH+4(4).
      IF SY-SUBRC = 0.
             CLEAR LT_YSE_PRCTR_BL.
             READ TABLE LT_YSE_PRCTR_BL WITH KEY PRCTR = LT_YSE_PRCTR_DERIV-PRCTR.
             IF SY-SUBRC = 0.
                GV_PLC_TEMP = LT_YSE_PRCTR_BL-SEGMENT.
                LOOP AT IT_PLC WHERE SOUR1_FROM LE GV_PLC_TEMP
                                 AND SOUR1_TO   GE GV_PLC_TEMP
                                 AND VALID_FROM LE SY-DATUM.
                  GT_MAT_SURPLUS-PLC = IT_PLC-TARGET1.
                ENDLOOP.
            ENDIF.
     ENDIF.
 ENDIF.






*   Get material group description
    READ TABLE GT_MAT_GRP_DESCR WITH KEY MATKL = GT_MAT_SURPLUS-MATKL.
*                                BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      GT_MAT_SURPLUS-WGBEZ = GT_MAT_GRP_DESCR-WGBEZ.
    ENDIF.

**   Get MRP description
*    READ TABLE GT_MRP_DESCR WITH KEY DISMM = GT_MAT_SURPLUS-DISMM
*                            BINARY SEARCH.
*    IF SY-SUBRC EQ 0.
*      GT_MAT_SURPLUS-DIBEZ = GT_MRP_DESCR-DIBEZ.
*    ENDIF.

**   Get material status description
*    READ TABLE GT_MAT_STAT_DESCR WITH KEY MMSTA = GT_MAT_SURPLUS-MMSTA
*                                 BINARY SEARCH.
*    IF SY-SUBRC EQ 0.
*      GT_MAT_SURPLUS-MTSTB = GT_MAT_STAT_DESCR-MTSTB.
*    ENDIF.





*   Copy currency
    READ TABLE IT_WAERS WITH KEY WERKS = GT_MAT_SURPLUS-WERKS.
*                        BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      GT_MAT_SURPLUS-WAERS = IT_WAERS-WAERS.
    ENDIF.

*   Most recent receipt date
    READ TABLE GT_REC_DAT WITH KEY MATNR = GT_MAT_SURPLUS-MATNR
                                   WERKS = GT_MAT_SURPLUS-WERKS
                                   LGORT = GT_MAT_SURPLUS-LGORT
                          BINARY SEARCH.
    IF SY-SUBRC EQ 0.
*   Begin of MOD-001.
*      GT_MAT_SURPLUS-LAST_REC_DATE = GT_REC_DAT-BUDAT.

      CALL FUNCTION 'FORMAT_DATE_4_OUTPUT'
        EXPORTING
          DATIN         =  GT_REC_DAT-BUDAT
          FORMAT        =  'YYYY-MM-DD'
       IMPORTING
         DATEX         =   GT_MAT_SURPLUS-LAST_REC_DATE .


*      WRITE GT_REC_DAT-BUDAT TO LV_LAST_REC_DATE DDMMYY.
*      GT_MAT_SURPLUS-LAST_REC_DATE+0(2) = LV_LAST_REC_DATE+4(2) .
*      GT_MAT_SURPLUS-LAST_REC_DATE+2(1) = '-'.
*      GT_MAT_SURPLUS-LAST_REC_DATE+3(2) = LV_LAST_REC_DATE+2(2) .
*      GT_MAT_SURPLUS-LAST_REC_DATE+5(1) = '-'.
*      GT_MAT_SURPLUS-LAST_REC_DATE+6(2) = LV_LAST_REC_DATE+0(2).
*      GT_MAT_SURPLUS-LAST_REC_DATE+8(1) = '.'.                    "For excel formatting

*      CLEAR LV_LAST_REC_DATE.
*   End   of MOD-001.
    ENDIF.

*   Most recent issue date
    READ TABLE GT_ISS_DAT WITH KEY MATNR = GT_MAT_SURPLUS-MATNR
                                   WERKS = GT_MAT_SURPLUS-WERKS
                                   LGORT = GT_MAT_SURPLUS-LGORT
                          BINARY SEARCH.
    IF SY-SUBRC EQ 0.
*   Begin of MOD-001.
*      GT_MAT_SURPLUS-LAST_ISS_DATE = GT_ISS_DAT-BUDAT.

     CALL FUNCTION 'FORMAT_DATE_4_OUTPUT'
        EXPORTING
          DATIN         =  GT_ISS_DAT-BUDAT
          FORMAT        =  'YYYY-MM-DD'
       IMPORTING
         DATEX         =   GT_MAT_SURPLUS-LAST_ISS_DATE.

      GV_LAST_ISS_DATE = GT_ISS_DAT-BUDAT.


*      WRITE GT_ISS_DAT-BUDAT TO LV_LAST_ISS_DATE DDMMYY.
*
*      GT_MAT_SURPLUS-LAST_ISS_DATE+0(2) = LV_LAST_ISS_DATE+4(2) .
*      GT_MAT_SURPLUS-LAST_ISS_DATE+2(1) = '-'.
*      GT_MAT_SURPLUS-LAST_ISS_DATE+3(2) = LV_LAST_ISS_DATE+2(2) .
*      GT_MAT_SURPLUS-LAST_ISS_DATE+5(1) = '-'.
*      GT_MAT_SURPLUS-LAST_ISS_DATE+6(2) = LV_LAST_ISS_DATE+0(2).
*      GT_MAT_SURPLUS-LAST_ISS_DATE+8(1) = '.'.                    "For excel formatting



*      CONCATENATE LV_LAST_ISS_DATE+4(2) '-' LV_LAST_ISS_DATE+2(2) '-' LV_LAST_ISS_DATE+0(2)
*      INTO GT_MAT_SURPLUS-LAST_ISS_DATE.


*      CLEAR LV_LAST_ISS_DATE.
*   End   of MOD-001.
    ENDIF.



**  Check if the receipts date is more than issue date. In this case some returns have happened like movement type 262
*IF GT_MAT_SURPLUS-LAST_REC_DATE > GT_MAT_SURPLUS-LAST_ISS_DATE.
*   CLEAR GT_MAT_SURPLUS-LAST_ISS_DATE.
*ENDIF.



    PERFORM GET_X_MONTHS_CONSUMPTION_NEW USING GV_3_MONTHS_AGO  'QUAN_3_MONTHS'.
*   Get 6 months consumption
    PERFORM GET_X_MONTHS_CONSUMPTION_NEW USING GV_6_MONTHS_AGO  'QUAN_6_MONTHS'.
*   Get 12 months consumption
    PERFORM GET_X_MONTHS_CONSUMPTION_NEW USING GV_12_MONTHS_AGO 'QUAN_12_MONTHS'.

*   Calculate stock level in days based on last months' consumptions
    IF GT_MAT_SURPLUS-QUAN_3_MONTHS > 0.
      GT_MAT_SURPLUS-STOCK_DAYS = 90 * GT_MAT_SURPLUS-LABST /
                                       GT_MAT_SURPLUS-QUAN_3_MONTHS.

    ELSE.
      CALL FUNCTION 'MAXIMAL_VALUE_GET'
        IMPORTING
          E_VALUE             = GT_MAT_SURPLUS-STOCK_DAYS
        EXCEPTIONS
          TYPE_NOT_SUPPORTED  = 1
          P_LEN_NOT_SUPPORTED = 2
          OTHERS              = 3.
      IF SY-SUBRC NE 0.
        MESSAGE ID 'YSE_SALES_LOG' TYPE 'E' NUMBER '052' WITH 'STOCK_DAYS'.
      ENDIF.
    ENDIF.


**   Calculate turnover
*    IF GT_MAT_SURPLUS-QUAN_12_MONTHS NE 0.
*      GT_MAT_SURPLUS-TURNOVER = GT_MAT_SURPLUS-LABST / GT_MAT_SURPLUS-QUAN_12_MONTHS.
*    ELSE.
*      CALL FUNCTION 'MAXIMAL_VALUE_GET'
*        IMPORTING
*          E_VALUE             = GT_MAT_SURPLUS-TURNOVER
*        EXCEPTIONS
*          TYPE_NOT_SUPPORTED  = 1
*          P_LEN_NOT_SUPPORTED = 2
*          OTHERS              = 3.
*      IF SY-SUBRC NE 0.
*        MESSAGE ID 'YSE_SALES_LOG' TYPE 'E' NUMBER '052' WITH 'TURNOVER'.
*      ENDIF.
*    ENDIF.


*   Non moving stock Last 12 Months
*   Begin of MOD-001.
*    IF NOT GT_MAT_SURPLUS-LAST_ISS_DATE IS INITIAL
*       AND GV_CUR_MINUS_24 LT GT_MAT_SURPLUS-LAST_ISS_DATE
*       AND GV_CUR_MINUS_12 GE GT_MAT_SURPLUS-LAST_ISS_DATE.

    IF NOT GV_LAST_ISS_DATE  IS INITIAL
       AND GV_CUR_MINUS_24 LT GV_LAST_ISS_DATE
       AND GV_CUR_MINUS_12 GE GV_LAST_ISS_DATE.
*   End   of MOD-001.
      GT_MAT_SURPLUS-NON_MOVING_12_MONTHS = GT_MAT_SURPLUS-STOCK_TOT.
    ELSE.
      GT_MAT_SURPLUS-NON_MOVING_12_MONTHS = 0.
    ENDIF.
*   Non moving stock Last 24 Months
*   Begin of MOD-001.
*    IF NOT GT_MAT_SURPLUS-LAST_ISS_DATE IS INITIAL
*       AND GV_CUR_MINUS_24 GE GT_MAT_SURPLUS-LAST_ISS_DATE.

    IF NOT GV_LAST_ISS_DATE  IS INITIAL
       AND GV_CUR_MINUS_24 GE GV_LAST_ISS_DATE.
*   End   of MOD-001.
      GT_MAT_SURPLUS-NON_MOVING_24_MONTHS = GT_MAT_SURPLUS-STOCK_TOT.
    ELSE.
      GT_MAT_SURPLUS-NON_MOVING_24_MONTHS = 0.
    ENDIF.
*   Begin of MOD-001.
*    IF GT_MAT_SURPLUS-LAST_ISS_DATE IS INITIAL.
    IF GV_LAST_ISS_DATE  IS INITIAL.
*   End   of MOD-001.
      GT_MAT_SURPLUS-NON_MOVING_12_MONTHS = GT_MAT_SURPLUS-STOCK_TOT.
      GT_MAT_SURPLUS-NON_MOVING_24_MONTHS = GT_MAT_SURPLUS-STOCK_TOT.
    ENDIF.

*   Calculate overstock
    GT_MAT_SURPLUS-OVERSTOCK =   GT_MAT_SURPLUS-STOCK_TOT
                               - GT_MAT_SURPLUS-QUAN_12_MONTHS.
    IF GT_MAT_SURPLUS-OVERSTOCK < 0.  " Only show when positive
      CLEAR GT_MAT_SURPLUS-OVERSTOCK.
    ENDIF.
*   Overstock = 0 if consumption over last 12 months is 0 (Issue D088)
    IF GT_MAT_SURPLUS-QUAN_12_MONTHS = 0.
      GT_MAT_SURPLUS-OVERSTOCK = 0.
    ENDIF.

*   Calculate <= 6 months qty
    READ TABLE IT_REC_QTY_6MTH WITH KEY MATNR = GT_MAT_SURPLUS-MATNR
                                        WERKS = GT_MAT_SURPLUS-WERKS
                                        LGORT = GT_MAT_SURPLUS-LGORT
                               BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      GT_MAT_SURPLUS-BAL_LESS = IT_REC_QTY_6MTH-MENGE.
    ENDIF.
    IF GT_MAT_SURPLUS-BAL_LESS > GT_MAT_SURPLUS-STOCK_OWN.
      GT_MAT_SURPLUS-BAL_LESS = GT_MAT_SURPLUS-STOCK_OWN.
    ENDIF.

*   Calculate <= 6 months value
    GT_MAT_SURPLUS-VAL_LESS =   GT_MAT_SURPLUS-BAL_LESS
                              * GT_MAT_SURPLUS-STPRS.
    GT_MAT_SURPLUS-VAL_LESS_MVG =   GT_MAT_SURPLUS-BAL_LESS
                                  * GT_MAT_SURPLUS-VERPR.

*   Calculate > 6 months qty
    GT_MAT_SURPLUS-BAL_MORE =   GT_MAT_SURPLUS-STOCK_TOT
                              - GT_MAT_SURPLUS-BAL_LESS.

**   Calculate <= 6 months value
*    GT_MAT_SURPLUS-VAL_MORE =   GT_MAT_SURPLUS-BAL_MORE
*                              * GT_MAT_SURPLUS-STPRS.
*    GT_MAT_SURPLUS-VAL_MORE_MVG =   GT_MAT_SURPLUS-BAL_MORE
*                                  * GT_MAT_SURPLUS-VERPR.


*   Quantity of receipts last 12 months
    READ TABLE IT_REC_QTY_12MTH WITH KEY MATNR = GT_MAT_SURPLUS-MATNR
                                         WERKS = GT_MAT_SURPLUS-WERKS
                                         LGORT = GT_MAT_SURPLUS-LGORT
                                BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      GT_MAT_SURPLUS-QUAN_12_MONTHS_REC = IT_REC_QTY_12MTH-MENGE.
    ENDIF.



**   Transfer price
**   First get purchasing org for plant
*    IF IT_T024W-WERKS NE GT_MAT_SURPLUS-WERKS.
*      CLEAR IT_T024W.
*      READ TABLE IT_T024W WITH KEY WERKS = GT_MAT_SURPLUS-WERKS BINARY SEARCH.
*    ENDIF.
**   If purch org found
*    IF IT_T024W-WERKS EQ GT_MAT_SURPLUS-WERKS.
*
**     Find condition
*      READ TABLE IT_A017 WITH KEY
*                                  LIFNR = GT_MAT_SURPLUS-LIFNR
*                                  MATNR = GT_MAT_SURPLUS-MATNR
*                                  EKORG = IT_T024W-EKORG
*                                  WERKS = GT_MAT_SURPLUS-WERKS
*                         BINARY SEARCH.
*      IF SY-SUBRC EQ 0.
**       Transfer price
*        IF IT_A017-KONWA = GT_MAT_SURPLUS-WAERS.
*          GT_MAT_SURPLUS-KBETR = IT_A017-KBETR.
**       If not in CoCo currency, convert the value
*        ELSE.
*          CALL FUNCTION 'CONVERT_AMOUNT_TO_CURRENCY'
*            EXPORTING
*              DATE             = SY-DATUM
*              FOREIGN_CURRENCY = IT_A017-KONWA
*              FOREIGN_AMOUNT   = IT_A017-KBETR
*              LOCAL_CURRENCY   = GT_MAT_SURPLUS-WAERS
*            IMPORTING
*              LOCAL_AMOUNT     = GT_MAT_SURPLUS-KBETR
*            EXCEPTIONS
*              ERROR            = 0
*              OTHERS           = 0.
*        ENDIF.
**       Now express it as unit price
*        IF IT_A017-KPEIN NE 0.
*          GT_MAT_SURPLUS-KBETR = GT_MAT_SURPLUS-KBETR / IT_A017-KPEIN.
*        ENDIF.
*      ENDIF.
*    ENDIF.



    APPEND GT_MAT_SURPLUS.
*  Begin of MOD-001
   CLEAR GV_LAST_ISS_DATE.
*  End of MOD-001
  ENDLOOP.

  SORT GT_MAT_SURPLUS BY MATNR WERKS LGORT.



ENDFORM.                    " PROCESS_DATA_NEW
