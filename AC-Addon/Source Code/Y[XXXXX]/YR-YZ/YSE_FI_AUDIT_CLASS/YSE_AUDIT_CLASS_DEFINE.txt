*&---------------------------------------------------------------------*
*&  Include           YSE_AUDIT_CLASS_DEFINE
*&---------------------------------------------------------------------*
************************************************************************
* CLASSES    DEFINE                                                    *
************************************************************************

CLASS lcl_anda_common DEFINITION.
  PUBLIC SECTION.
************************************************************************
*   PUBLIC TYPES                                                       *
************************************************************************
    TYPES:
      BEGIN OF ty_alv_output,
          uname       TYPE agr_users-uname,     "User Name
          name_text   TYPE adrp-name_text,      "Full name
          c_agr_name  TYPE agr_users-agr_name,  "Composite role
          c_text      TYPE agr_texts-text,      "Composite role name
          s_agr_name  TYPE agr_users-agr_name,  "Single role
          s_text      TYPE agr_texts-text,      "Single role name
          gltgv       TYPE usr02-gltgv,         "Valid from
          gltgb       TYPE usr02-gltgb,         "Valid to
          from_dat    TYPE agr_users-from_dat,  "from date
          to_dat      TYPE agr_users-to_dat,    "to date
        END OF ty_alv_output,

      BEGIN OF ty_texts,
        name          TYPE char20,
        num           TYPE char3,
        content       TYPE string,
      END OF ty_texts,

      BEGIN OF ty_fname,
          bname       TYPE usr21-bname,
          persnumber  TYPE usr21-persnumber,
          name_text   TYPE adrp-name_text,
      END OF ty_fname.

************************************************************************
*   PUBLIC CONSTANTS
************************************************************************
    CONSTANTS:
      BEGIN OF message_type,
         error       TYPE c VALUE 'E',
      END OF message_type,
      cons_x         TYPE c VALUE 'X',
      cons_a         TYPE c VALUE 'A',
      cons_callback_routine TYPE slis_formname VALUE 'USER_COMMAND'.

************************************************************************
*   PUBLIC DATA                                                        *
************************************************************************
    DATA: mt_texts_x    TYPE STANDARD TABLE OF ty_texts,
          mt_texts_y    TYPE STANDARD TABLE OF ty_texts,
          mt_texts_z    TYPE STANDARD TABLE OF ty_texts.
************************************************************************
*   PUBLIC METHODS                                                     *
************************************************************************
    METHODS: constructor,
             read_text  IMPORTING iv_name TYPE char20
                        RETURNING value(ev_text) TYPE string,
             show_progress_percent
                        IMPORTING iv_percentage TYPE i
                                  iv_text       TYPE string.
  PRIVATE SECTION.
************************************************************************
*   PRIVATE METHODS                                                    *
************************************************************************
    METHODS:  init_text,
              fill_text_name
                IMPORTING iv_textname   TYPE char20
                          iv_indicator  TYPE char1.
************************************************************************
*   PRIVATE DATA                                                       *
************************************************************************
    DATA: mv_max(3)       TYPE n,
          mv_index_x(2)   TYPE n,
          mv_index_y(2)   TYPE n,
          mv_index_z(2)   TYPE n.

ENDCLASS.                    "lcl_anda_common DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_init DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_init DEFINITION INHERITING FROM lcl_anda_common.
*----------------------------------------------------------------------*
*            PUBLIC SECTION
*----------------------------------------------------------------------*
  PUBLIC SECTION.


************************************************************************
*   PUBLIC METHODS                                                     *
************************************************************************
    METHODS: constructor,
             display,
             check_parameter,
             set_parameter,
             f4_for_variant,
             set_invisible_para IMPORTING iv_fieldname TYPE char32.
************************************************************************
*   PUBLIC DATA                                                        *
************************************************************************
    DATA: mv_save       TYPE c,
          ms_disvar     TYPE disvariant.
*----------------------------------------------------------------------*
*            PROTECTED SECTION
*----------------------------------------------------------------------*
  PROTECTED SECTION.
    DATA: mrg_invisible     TYPE RANGE OF char32,
          mr_data           TYPE REF TO lcl_data.
*----------------------------------------------------------------------*
*            PRIVATE SECTION
*----------------------------------------------------------------------*

ENDCLASS.                    "lcl_init DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_init_oo DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_init_oo DEFINITION INHERITING FROM lcl_init.
*----------------------------------------------------------------------*
*            PUBLIC SECTION
*----------------------------------------------------------------------*
  PUBLIC SECTION.
************************************************************************
*   PUBLIC METHODS                                                     *
************************************************************************
    METHODS:  constructor
                IMPORTING iv_dynnr  TYPE sydynnr
                          iv_repid  TYPE syrepid
                          iv_top    TYPE yse_sequen OPTIONAL, "NUMC 3
              pbo,
              handle_double_click_tl
                FOR EVENT double_click OF cl_gui_alv_grid
                IMPORTING e_row e_column es_row_no sender,
              handle_double_click_tr
                FOR EVENT double_click OF cl_gui_alv_grid
                IMPORTING e_row e_column es_row_no sender,
              handle_double_click_bm
                FOR EVENT doubleclicked OF cl_calendar_control_schedule
                IMPORTING e_row e_col,
              refresh,
              set_parameter REDEFINITION,
              check_parameter REDEFINITION,
              display REDEFINITION.
************************************************************************
*   PUBLIC DATA                                                        *
************************************************************************
    DATA: mr_dock_top         TYPE REF TO cl_gui_docking_container,
          mr_dock_bottom      TYPE REF TO cl_gui_docking_container,
          mr_top_splitter  TYPE REF TO cl_gui_splitter_container,
          mr_bottom_splitter  TYPE REF TO cl_gui_splitter_container,
          mr_dock_lft         TYPE REF TO cl_gui_docking_container,
          mr_dock_rgt          TYPE REF TO cl_gui_docking_container,
          mr_dock_btm          TYPE REF TO cl_gui_docking_container,
          mr_container_top_left TYPE REF TO cl_gui_container,
          mr_container_top_right TYPE REF TO cl_gui_container,
          mr_container_bottom    TYPE REF TO cl_gui_container,
          mr_top_left_content    TYPE REF TO cl_gui_alv_grid,
          mr_top_right_content   TYPE REF TO cl_gui_alv_grid,
          mr_bottom_alvtree      TYPE REF TO cl_gui_alv_tree_simple,
          mr_bottom_content TYPE REF TO cl_calendar_control_schedule.

*----------------------------------------------------------------------*
*            PRIVATE SECTION
*----------------------------------------------------------------------*
  PRIVATE SECTION.
************************************************************************
*   PRIVATE DATA                                                       *
************************************************************************
*    methods:               pbo.
    DATA: mv_init               TYPE abap_bool,
          mv_dynnr              TYPE sydynnr,
          mv_repid              TYPE syrepid,
          mv_top                TYPE  i,
          mv_bottom             TYPE  i,
          mv_btm_type           TYPE char10 VALUE 'TREE',
          mt_bdc_tab_pfcg       TYPE TABLE OF bdcdata,
          ms_layout_topleft     TYPE  lvc_s_layo,
          ms_layout_topright    TYPE  lvc_s_layo,
          ms_variant_tl         TYPE  disvariant,
          ms_variant_tr         TYPE disvariant,
          mt_fcat_tl            TYPE lvc_t_fcat,
          mt_fcat_tr            TYPE lvc_t_fcat,
          mt_topleft_alvdata    TYPE  STANDARD TABLE OF ty_alv_output,
          mt_topright_alvdata
                           TYPE STANDARD TABLE OF yse_singlerole_tcode.
************************************************************************
*   PRIVATE METHODS                                                    *
************************************************************************
    METHODS:  get_display_data,
              set_layout,
              set_bdc_pfcg IMPORTING iv_fieldval TYPE bdc_fval,
              register_handlers,
              generate_fcats,
              display_alv.

    "load_handlers.
ENDCLASS.                    "lcl_init DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_init_noo DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_init_noo DEFINITION INHERITING FROM lcl_init.
*----------------------------------------------------------------------*
*            PUBLIC SECTION
*----------------------------------------------------------------------*
  PUBLIC SECTION.
************************************************************************
*   PUBLIC METHODS                                                     *
************************************************************************
    METHODS: constructor,
             check_parameter REDEFINITION,
             init_screen_8000,
             user_command_8000,
             set_parameter REDEFINITION,
             display REDEFINITION.
************************************************************************
*   PUBLIC DATA                                                        *
************************************************************************
*----------------------------------------------------------------------*
*            PRIVATE SECTION
*----------------------------------------------------------------------*
  PRIVATE SECTION.
************************************************************************
*   PRIVATE DATA                                                       *
************************************************************************
    DATA: mt_alvdata    TYPE  STANDARD TABLE OF ty_alv_output,
          mv_container  TYPE scrfname VALUE 'G_CONTAINER',
          ms_alvdata    TYPE ty_alv_output,
          mv_col(10)    TYPE n,
          mv_callback   TYPE slis_formname,
          ms_layout     TYPE slis_layout_alv,
          mt_fieldcat   TYPE slis_t_fieldcat_alv,
          mt_agr_users  TYPE STANDARD TABLE OF agr_users,
          mt_agr_texts  TYPE STANDARD TABLE OF agr_texts,
          mt_tcode      TYPE STANDARD TABLE OF yse_singlerole_tcode,
          mt_fname      TYPE STANDARD TABLE OF ty_fname,
          mt_agr_agrs   TYPE STANDARD TABLE OF agr_agrs,
          mr_custom_container TYPE REF TO cl_gui_custom_container,
          mr_alv_grid   TYPE REF TO cl_gui_alv_grid,
          save_ok       TYPE sy-ucomm,
          mt_usr02      TYPE STANDARD TABLE OF usr02.
************************************************************************
*   PRIVATE METHODS                                                    *
************************************************************************
    METHODS:
          alv_layout_set,
          alv_others_set,
          alv_fieldcat_set,
          alv_prop_set,
          show_alv,
          get_alv_data,
          add_field  "Add field to field catalog
            IMPORTING  iv_fieldname       TYPE slis_fieldname
                       iv_len             TYPE dd03p-outputlen
                       iv_descr           TYPE dd03p-scrtext_l
                       iv_hotsp           TYPE char1.
ENDCLASS.                    "lcl_init_noo DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_data DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_data DEFINITION INHERITING FROM lcl_anda_common.
*----------------------------------------------------------------------*
*            PUBLIC SECTION
*----------------------------------------------------------------------*
  PUBLIC SECTION.
************************************************************************
*   PUBLIC DATA                                                        *
************************************************************************
    DATA: mt_selection_screen TYPE STANDARD TABLE OF rsparams,
          mt_alvdata          TYPE  STANDARD TABLE OF ty_alv_output,
          mt_tcode            TYPE STANDARD TABLE OF yse_singlerole_tcode.


************************************************************************
*   PUBLIC METHODS                                                     *
************************************************************************
    METHODS:  constructor,
              get_data.

*----------------------------------------------------------------------*
*            PRIVATE SECTION
*----------------------------------------------------------------------*
  PRIVATE SECTION.
************************************************************************
*   PRIVATE DATA                                                       *
************************************************************************
    DATA: ms_alvdata    TYPE lcl_init=>ty_alv_output,
          mt_agr_users  TYPE STANDARD TABLE OF agr_users,
          mt_agr_texts  TYPE STANDARD TABLE OF agr_texts,
          mt_fname      TYPE STANDARD TABLE OF lcl_init=>ty_fname,
          mt_agr_agrs   TYPE STANDARD TABLE OF agr_agrs,
          mt_usr02      TYPE STANDARD TABLE OF usr02.

************************************************************************
*   PRIVATE METHODS                                                    *
************************************************************************
    METHODS: get_data_agr_users,
            generate_alv_data,
            get_agr_info.
ENDCLASS.                    "lcl_data DEFINITION

************************************************************************
* CLASSES    Implementation                                            *
************************************************************************

CLASS lcl_anda_common IMPLEMENTATION.

  METHOD constructor.
    mv_max = '99'.
    init_text( ).
  ENDMETHOD.                    "constructor

  METHOD show_progress_percent.  "Show process percentage
    IF sy-batch IS INITIAL.
      CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
        EXPORTING
          percentage = iv_percentage
          text       = iv_text.
    ELSE.
      MESSAGE i001(00) WITH iv_text.
    ENDIF.

  ENDMETHOD.                    "show_progress_percent

  METHOD init_text.

    DATA: ls_text TYPE ty_texts,
          lv_x    TYPE i,
          lv_y    TYPE i,
          lv_z    TYPE i.

    CALL METHOD me->fill_text_name  EXPORTING:
      iv_textname = 'OUT_OF_RANGE'           iv_indicator = 'X',"X01
      iv_textname = 'UNAME'                  iv_indicator = 'X',"X02
      iv_textname = 'NAME_TEXT'              iv_indicator = 'X',"X03
      iv_textname = 'C_AGR_NAME'             iv_indicator = 'X',"X04
      iv_textname = 'C_TEXT'                 iv_indicator = 'X',"X05
      iv_textname = 'S_AGR_NAME'             iv_indicator = 'X',"X06
      iv_textname = 'S_TEXT'             iv_indicator = 'X',"X07
      iv_textname = 'FROM_DAT'               iv_indicator = 'X',"X08
      iv_textname = 'TO_DAT'                 iv_indicator = 'X',"X09
      iv_textname = 'NO_DATA'                iv_indicator = 'X',"X10
      iv_textname = 'ALV_PROPERTY'           iv_indicator = 'X',"X11
      iv_textname = 'SHOW_ALV'               iv_indicator = 'X',"X12
      iv_textname = 'SCREEN_OBL_CHECK'       iv_indicator = 'X',"X13
      iv_textname = 'ALV_BEGIN'              iv_indicator = 'X',"X14
      iv_textname = 'TOPLEFT_TITLE'          iv_indicator = 'X',"X15
      iv_textname = 'TOPRIGHT_TITLE'         iv_indicator = 'X',"X16
      iv_textname = 'BEGIN_ALV_DATA'         iv_indicator = 'X',"X17
      iv_textname = 'SCREEN_PERCENT'         iv_indicator = 'X',"X18
      iv_textname = 'A'                      iv_indicator = 'X'."Xxx

  ENDMETHOD.                    "init_text

  METHOD fill_text_name.

    DATA: ls_text TYPE ty_texts,
          lv_textname TYPE char10.
    FIELD-SYMBOLS: <lfs_text> TYPE ANY.
    CLEAR ls_text.
    ls_text-name = iv_textname.
    CASE iv_indicator.
      WHEN 'X'.
        mv_index_x = mv_index_x + 1.
        CONCATENATE 'X' mv_index_x INTO ls_text-num.
        CONCATENATE 'TEXT-' ls_text-num INTO lv_textname.
        ASSIGN (lv_textname) TO <lfs_text>.
        IF <lfs_text> IS ASSIGNED.
          ls_text-content =  <lfs_text> .
        ELSE.
          ls_text-content =  lv_textname .
        ENDIF.
        APPEND ls_text TO mt_texts_x.
        UNASSIGN <lfs_text>.
      WHEN 'Y'.
        mv_index_y = mv_index_y + 1.
        CONCATENATE 'X' mv_index_y INTO ls_text-num.
        CONCATENATE 'TEXT-' ls_text-num INTO lv_textname.
        ASSIGN (lv_textname) TO <lfs_text>.
        IF <lfs_text> IS ASSIGNED.
          ls_text-content =  <lfs_text> .
        ELSE.
          ls_text-content =  lv_textname .
        ENDIF.
        APPEND ls_text TO mt_texts_y.
        UNASSIGN <lfs_text>.
      WHEN 'Z'.
        mv_index_z = mv_index_z + 1.
        CONCATENATE 'X' mv_index_z INTO ls_text-num.
        CONCATENATE 'TEXT-' ls_text-num INTO lv_textname.
        ASSIGN (lv_textname) TO <lfs_text>.
        IF <lfs_text> IS ASSIGNED.
          ls_text-content =  <lfs_text> .
        ELSE.
          ls_text-content =  lv_textname .
        ENDIF.
        APPEND ls_text TO mt_texts_z.
        UNASSIGN <lfs_text>.
      WHEN OTHERS.
    ENDCASE.
    APPEND ls_text TO mt_texts_x.
  ENDMETHOD.                    "fill_text_name

  METHOD read_text.
    DATA: ls_texts TYPE ty_texts,
          lt_texts  TYPE STANDARD TABLE OF ty_texts.

    APPEND LINES OF mt_texts_x TO lt_texts.
    APPEND LINES OF mt_texts_y  TO lt_texts.
    APPEND LINES OF mt_texts_z  TO lt_texts.

    READ TABLE lt_texts INTO ls_texts
       WITH KEY name = iv_name.
    IF sy-subrc = 0.
      ev_text = ls_texts-content.
    ENDIF.
    REFRESH: lt_texts.
  ENDMETHOD.                    "read_text

ENDCLASS.                    "lcl_anda_common IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_init IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_init IMPLEMENTATION.
  METHOD constructor.
    super->constructor( ).
    CREATE OBJECT mr_data.
  ENDMETHOD.                    "constructor

  METHOD set_invisible_para.
    DATA: lr_invisible LIKE LINE OF   mrg_invisible.
    lr_invisible-sign     = 'I'.
    lr_invisible-option   = 'CP'.
    CONCATENATE '*' iv_fieldname '*' INTO lr_invisible-low.
    APPEND lr_invisible TO mrg_invisible.
  ENDMETHOD.                    "set_invisible_para

  METHOD f4_for_variant.
    DATA: ls_disvar TYPE disvariant,
           lv_exit   TYPE c.

    ls_disvar-report = sy-repid.

    CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
      EXPORTING
        is_variant    = ls_disvar
        i_save        = mv_save
      IMPORTING
        e_exit        = lv_exit
        es_variant    = ms_disvar
      EXCEPTIONS
        not_found     = 1
        program_error = 2
        OTHERS        = 3.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ELSE.
      IF lv_exit = space.
        p_vari = ms_disvar-variant.
      ENDIF.
    ENDIF.
  ENDMETHOD.                    "f4_for_variant

  METHOD set_parameter.
    LOOP AT SCREEN.
      IF screen-group1 = 'M1' AND screen-name IN mrg_invisible.
        screen-invisible = '0'.
        screen-active    = '1'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
    CHECK mrg_invisible IS NOT INITIAL.
    LOOP AT SCREEN.
      IF screen-group1 = 'M1' AND screen-name IN mrg_invisible.
        screen-invisible = '1'.
        screen-active    = '0'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.                    "set_parameter

  METHOD display.               "Display the sreen
    IF s_rname IS INITIAL AND s_uname IS INITIAL.
      DATA: lv_text TYPE string.
      lv_text = lr_init->read_text( iv_name = 'SCREEN_OBL_CHECK' ).
      MESSAGE e001(00) WITH lv_text." DISPLAY LIKE message_type-error.
*      LEAVE LIST-PROCESSING.
    ENDIF.
    "Do nothing in the farther class
  ENDMETHOD.                    "DISPLAY

  METHOD check_parameter.
  ENDMETHOD.                    "check_parameter

ENDCLASS.                    "lcl_init IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_init_oo IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_init_oo IMPLEMENTATION.

  METHOD constructor.
    DATA: lv_value1 TYPE string.
    super->constructor( ).
    mv_init     = abap_false.
    mv_dynnr    = iv_dynnr.
    mv_repid    = iv_repid.
    IF iv_top > 100 OR iv_top < 0.
      lv_value1 = read_text( iv_name = 'OUT_OF_RANGE' ).
      MESSAGE e001(00) WITH lv_value1.
    ENDIF.
    IF iv_top = 0.
      mv_top  = 100.
    ELSE.
      mv_top  = iv_top.
    ENDIF.
    mv_bottom   = 100 - mv_top.
  ENDMETHOD.                    "constructor

  METHOD check_parameter.
    super->check_parameter( ).
  ENDMETHOD.                    "check_parameter

  METHOD set_parameter.
    CALL METHOD set_invisible_para
      EXPORTING: iv_fieldname = 'P_VARI'.
    super->set_parameter( ).
  ENDMETHOD.                    "set_parameter

  METHOD handle_double_click_tl.
    DATA: ls_alvdata TYPE ty_alv_output,
          lv_fv   TYPE bdc_fval.
    READ TABLE mt_topleft_alvdata INTO ls_alvdata INDEX e_row-index.
    IF sy-subrc = 0.
      lv_fv = ls_alvdata-c_agr_name.
      CASE e_column-fieldname.
        WHEN 'UNAME'.
          SET PARAMETER ID 'XUS' FIELD ls_alvdata-uname.
          CALL TRANSACTION 'SU01' AND SKIP FIRST SCREEN.
        WHEN 'C_AGR_NAME'.
          set_bdc_pfcg( iv_fieldval = lv_fv ).
          CALL TRANSACTION 'PFCG'
            USING mt_bdc_tab_pfcg
            MODE 'A'
            UPDATE 'A'.
        WHEN 'S_AGR_NAME'.
          set_bdc_pfcg( iv_fieldval = lv_fv ).
          CALL TRANSACTION 'PFCG'
            USING mt_bdc_tab_pfcg
            MODE 'A'
            UPDATE 'A'.
        WHEN OTHERS.
      ENDCASE.
    ENDIF.
  ENDMETHOD.                    "handle_double_click_tl

  METHOD handle_double_click_tr.
  ENDMETHOD.                    "handle_double_click_tr

  METHOD handle_double_click_bm.
    message 'TEST' TYPE 'I'.
  ENDMETHOD.                    "handle_double_click_bm

  METHOD display.
    super->display( ).
    CALL SCREEN mv_dynnr.
  ENDMETHOD.                    "DISPLAY

  METHOD set_bdc_pfcg.

    DATA: ls_bdc_tab TYPE bdcdata.
    REFRESH: mt_bdc_tab_pfcg.

    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
      USING:
        'SAPLPRGN_TREE'  '0121' 'X' '' '' CHANGING ls_bdc_tab.
    APPEND ls_bdc_tab TO mt_bdc_tab_pfcg.

    CLEAR: ls_bdc_tab.
    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
      USING:
        ''  '' '' 'BDC_CURSOR' 'AGR_NAME_NEU' CHANGING ls_bdc_tab.
    APPEND ls_bdc_tab TO mt_bdc_tab_pfcg.

    CLEAR: ls_bdc_tab.
    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
      USING:
        ''  '' '' 'AGR_NAME_NEU'  iv_fieldval
                                      CHANGING ls_bdc_tab.
    APPEND ls_bdc_tab TO mt_bdc_tab_pfcg.

  ENDMETHOD.                    "set_bdc_pfcg

  METHOD pbo.
    DATA: lv_message TYPE string.
*    load_handlers( ).
*   5   Create the Frame of screen
    IF mr_dock_top IS INITIAL AND mr_dock_bottom IS INITIAL.
*     5.1 Spliter the screen to 3 parts: top main bottom
*     5.1.1 Create top dock
      IF mv_top > 0.
        IF NOT mv_top BETWEEN 5 AND 95.
*         Field definitions
          lv_message = read_text( iv_name = 'SCREEN_PERCENT' ).
          MESSAGE S001(00) DISPLAY LIKE 'E'.
          LEAVE LIST-PROCESSING.
        ENDIF.
        CREATE OBJECT mr_dock_top
          EXPORTING
            repid = mv_repid
            dynnr = mv_dynnr
            side  = cl_gui_docking_container=>dock_at_top
            ratio = mv_top.
      ENDIF.
*     5.1.2 Create bottom dock
      IF mv_bottom > 0.
        CREATE OBJECT mr_dock_bottom
          EXPORTING
            repid = mv_repid
            dynnr = mv_dynnr
            side  = cl_gui_docking_container=>dock_at_bottom
            ratio = mv_bottom.

      ENDIF.
*     5.2.1 Create and spliter top screen
      IF mv_top > 0.
        CREATE OBJECT mr_top_splitter
          EXPORTING
            parent  = mr_dock_top
            rows    = 1
            columns = 2.
        IF  cl_gui_alv_grid=>offline( ) IS INITIAL.
          mr_container_top_left
              = mr_top_splitter->get_container(  row = 1 column = 1 ).
          mr_container_top_right
              = mr_top_splitter->get_container(  row = 1 column = 2 ).
        ELSE.
*          mr_dock_lft
*              = mr_top_splitter->get_container(  row = 1 column = 1 ).
*          mr_dock_rgt
*              = mr_top_splitter->get_container(  row = 1 column = 2 ).
        ENDIF.

      ENDIF.
*     5.2.2 Create and spliter bottom screen
      IF mv_bottom > 0 .
        CREATE OBJECT mr_bottom_splitter
          EXPORTING
            parent  = mr_dock_bottom
            rows    = 1
            columns = 1.
        IF  cl_gui_alv_grid=>offline( ) IS INITIAL.
          mr_container_bottom
              = mr_bottom_splitter->get_container(  row = 1 column = 1 ).
        ELSE.
*          mr_dock_btm
*              = mr_bottom_splitter->get_container(  row = 1 column = 1 ).
        endif.
      ENDIF.

*     5.3.1 Create content of top
      IF mv_top > 0.
        CREATE OBJECT mr_top_left_content
          EXPORTING
            i_parent = mr_container_top_left.
        CREATE OBJECT mr_top_right_content
          EXPORTING
            i_parent = mr_container_top_right.
      ENDIF.

*     5.3.2 Create content of bottom
      IF mv_bottom > 0.
        CASE mv_btm_type.
          WHEN 'TREE'.
            CREATE OBJECT mr_bottom_alvtree
              EXPORTING
                i_parent = mr_container_bottom.
          WHEN 'CAL'.
            CREATE OBJECT mr_bottom_content
              EXPORTING
                i_parent = mr_container_bottom.
          WHEN OTHERS.
        ENDCASE.
      ENDIF.
    ENDIF.

*   6. Register_handleers
    register_handlers( ).

*   7.generate fieldcats
    generate_fcats( ).

*   8. Set display layout
    set_layout( ).

*   8. GET DATA
    get_display_data( ).

*   9. display ALV
    display_alv( ).


  ENDMETHOD.                    "pbo

  METHOD display_alv.
    IF mr_top_left_content IS NOT INITIAL.
      mr_top_left_content->set_table_for_first_display(
        EXPORTING
          is_variant                    = ms_variant_tl
          is_layout                     = ms_layout_topleft
          i_save                        = cons_a
        CHANGING
          it_fieldcatalog               = mt_fcat_tl
          it_outtab                     = mt_topleft_alvdata
        EXCEPTIONS
          invalid_parameter_combination = 1
          program_error                 = 2
          too_many_lines                = 3 ).
      IF sy-subrc <> 0.
        RETURN.
      ENDIF.
    ENDIF.

    IF mr_top_right_content IS NOT INITIAL.
      mr_top_right_content->set_table_for_first_display(
        EXPORTING
          is_variant                    = ms_variant_tr
          is_layout                     = ms_layout_topright
          i_save                        = cons_a
        CHANGING
          it_fieldcatalog               = mt_fcat_tr
          it_outtab                     = mt_topright_alvdata
        EXCEPTIONS
          invalid_parameter_combination = 1
          program_error                 = 2
          too_many_lines                = 3 ).
      IF sy-subrc <> 0.
        RETURN.
      ENDIF.
    ENDIF.

    IF mr_bottom_content IS NOT INITIAL.
      data:  lt_info_table TYPE LVC_T_INFO,
             lt_data       TYPE LVC_T_DATA.
      mr_bottom_content->display(
        EXPORTING I_VIEW = 'A'
                  I_INFO_TABLE = lt_info_table
                  I_TITLE = 'This is a test'
                  I_NUM_COLS = '3'
        CHANGING c_data_table = lt_data ).
    ENDIF.

    IF mr_bottom_alvtree IS NOT INITIAL.
      DATA: lt_list_comm TYPE slis_t_listheader,
            ls_list_comm TYPE slis_listheader,
            ls_sort      TYPE lvc_s_sort,
            lt_sort      TYPE lvc_t_sort.

      ls_list_comm-typ = 'H'.
      ls_list_comm-info = 'User and roles display in hierarchy mode'(X18).
      APPEND ls_list_comm to lt_list_comm.

      ls_sort-spos = 1.
      ls_sort-fieldname = 'UNAME'.
      ls_sort-up = 'X'.
      ls_sort-subtot = 'X'.
      APPEND ls_sort TO lt_sort.

      ls_sort-spos = 2.
      ls_sort-fieldname = 'C_AGR_NAME'.
      ls_sort-up = 'X'.
      ls_sort-subtot = 'X'.
      APPEND ls_sort TO lt_sort.

      ls_sort-spos = 3.
      ls_sort-fieldname = 'S_AGR_NAME'.
      ls_sort-up = 'X'.
      ls_sort-subtot = 'X'.
      APPEND ls_sort TO lt_sort.

      mr_bottom_alvtree->set_table_for_first_display(
        EXPORTING it_list_commentary = lt_list_comm
                  i_structure_name   = 'YSE_USER_ROLE'
        CHANGING  it_sort = lt_sort
                  it_outtab = mt_topleft_alvdata  ).
      mr_bottom_alvtree->expand_tree( EXPORTING i_level = 1 ).
    ENDIF.

  ENDMETHOD.                    "display_alv

  METHOD set_layout.
    DATA: lv_text TYPE string.
*   SET_TOPLEFT
    CLEAR: lv_text.
    lv_text = read_text( iv_name = 'TOPLEFT_TITLE').
    ms_layout_topleft-grid_title = lv_text.
    ms_layout_topleft-zebra      = cons_x.
    ms_layout_topleft-cwidth_opt = cons_x.
    ms_layout_topleft-detailinit = cons_x.
    ms_layout_topleft-sel_mode = 'A'.
*    ms_layout_topleft-edit = cons_x.
    ms_variant_tl-report  = sy-repid.
    ms_variant_tl-handle = 'USER_ROLE'.

    CLEAR: lv_text.
    lv_text = read_text( iv_name = 'TOPRIGHT_TITLE').
    ms_layout_topright-grid_title = lv_text.
    ms_layout_topright-zebra      = cons_x.
    ms_layout_topright-cwidth_opt = cons_x.
    ms_layout_topright-detailinit = cons_x.
    ms_layout_topright-sel_mode = 'D'.
    ms_variant_tr-report  = sy-repid.
    ms_variant_tr-handle = 'ROLE_TCODE'.

  ENDMETHOD.                    "set_layout

  METHOD get_display_data.
    mr_data->get_data( ).
    mt_topleft_alvdata    = mr_data->mt_alvdata.
    mt_topright_alvdata   = mr_data->mt_tcode.
  ENDMETHOD.                    "get_display_data

  METHOD register_handlers.

    IF mr_top_left_content IS NOT INITIAL.
      SET HANDLER
       me->handle_double_click_tl FOR mr_top_left_content.
    ENDIF.
    IF mr_top_right_content IS NOT INITIAL.
      SET HANDLER
       me->handle_double_click_tr FOR mr_top_right_content.
    ENDIF.
    IF mr_bottom_content IS NOT INITIAL.
      SET HANDLER
       me->handle_double_click_bm FOR mr_bottom_content.
    ENDIF.


  ENDMETHOD.                    "register_handlers

  METHOD generate_fcats.

    REFRESH: mt_fcat_tl, mt_fcat_tr.

    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
      EXPORTING
        i_structure_name       = 'YSE_USER_ROLE'
      CHANGING
        ct_fieldcat            = mt_fcat_tl
      EXCEPTIONS
        inconsistent_interface = 1
        program_error          = 2.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
      EXPORTING
        i_structure_name       = 'YSE_SINGLEROLE_TCODE'
      CHANGING
        ct_fieldcat            = mt_fcat_tr
      EXCEPTIONS
        inconsistent_interface = 1
        program_error          = 2.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

  ENDMETHOD.                    "generate_fcats

  METHOD refresh.
    IF  mv_top > 0.

    ENDIF.
  ENDMETHOD.                    "refresh
ENDCLASS.                    "lcl_init_oo IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_init_noo IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_init_noo IMPLEMENTATION.

  METHOD constructor.
    super->constructor( ).
*   initialize the internal table,workareas and variables
    REFRESH:
      mt_alvdata,
      mt_fieldcat.

    CLEAR:
      ms_alvdata,
      ms_disvar,
      ms_layout,
      mv_col,
      mv_save,
      mv_callback.

    mv_save = cons_a .
*   Set default alv layout
    ms_disvar-report = sy-repid.
    CALL FUNCTION 'REUSE_ALV_VARIANT_DEFAULT_GET'
      EXPORTING
        i_save        = mv_save
      CHANGING
        cs_variant    = ms_disvar
      EXCEPTIONS
        wrong_input   = 1
        not_found     = 2
        program_error = 3
        OTHERS        = 4.
    IF sy-subrc = 0.
      p_vari = ms_disvar-variant.
    ENDIF.
  ENDMETHOD.                    "constructor

  METHOD check_parameter.
    DATA: ls_disvar TYPE disvariant,
          lv_text   TYPE string.

    IF p_vari IS NOT INITIAL.
      ls_disvar = ms_disvar.
      ls_disvar-variant = p_vari.
      CALL FUNCTION 'REUSE_ALV_VARIANT_EXISTENCE'
        EXPORTING
          i_save        = mv_save
        CHANGING
          cs_variant    = ls_disvar
        EXCEPTIONS
          wrong_input   = 1
          not_found     = 2
          program_error = 3
          OTHERS        = 4.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ELSE.
        ms_disvar = ms_disvar.
      ENDIF.
    ENDIF.

  ENDMETHOD.                    "check_parameter

  METHOD set_parameter.

    CALL METHOD set_invisible_para
      EXPORTING: iv_fieldname = 'P_TOP'.
    super->set_parameter( ).
  ENDMETHOD.                    "set_parameter

  METHOD user_command_8000.
    CASE sy-ucomm.
      WHEN 'BACK'.
        LEAVE LIST-PROCESSING.
        SET SCREEN 0.
      WHEN 'EXIT'.
        LEAVE LIST-PROCESSING.
        LEAVE PROGRAM.
      WHEN 'CANC'.
        LEAVE LIST-PROCESSING.
        SET SCREEN 0.
      WHEN OTHERS.
        WRITE: 'others'.
    ENDCASE.
  ENDMETHOD.                    "user_command_8000

  METHOD init_screen_8000.
    IF mr_custom_container IS INITIAL.
      DATA: lt_sort TYPE lvc_t_sort,
            ls_sort TYPE lvc_s_sort,
            lt_tcode_fcat TYPE lvc_t_fcat,
            ls_tcode_fcat TYPE lvc_s_fcat.
      CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
        EXPORTING
          i_structure_name       = 'YSE_SINGLEROLE_TCODE'
        CHANGING
          ct_fieldcat            = lt_tcode_fcat
        EXCEPTIONS
          inconsistent_interface = 1
          program_error          = 2.
      IF sy-subrc <> 0.
        RETURN.
      ENDIF.

      DO 3 TIMES.
        ls_sort-spos = sy-index.
        READ TABLE lt_tcode_fcat INTO ls_tcode_fcat INDEX sy-index.
        IF sy-subrc = 0.
          ls_sort-fieldname = ls_tcode_fcat-fieldname.
          ls_sort-up = 'X'.
          APPEND ls_sort TO lt_sort.
        ENDIF.
      ENDDO.

      CREATE OBJECT mr_custom_container
        EXPORTING
          container_name = mv_container.

      CREATE OBJECT mr_alv_grid
        EXPORTING
          i_parent = mr_custom_container.

      CALL METHOD mr_alv_grid->set_table_for_first_display
        EXPORTING
          i_structure_name = 'YSE_SINGLEROLE_TCODE'
        CHANGING
          it_outtab        = mt_tcode
          it_sort          = lt_sort.
    ENDIF.
  ENDMETHOD.                    "INIT_SCREEN_8000

  METHOD alv_layout_set.  "LAYOUT set
    CLEAR: ms_layout.
    ms_layout-zebra = cons_x. "ALV lines cross-color display
    ms_layout-colwidth_optimize = cons_x.
    "Auto optimize column width
    ms_layout-detail_popup = cons_x.
    "Show detail screen
  ENDMETHOD.                    "alv_layout_set

  METHOD alv_others_set . "Set Others
    mv_callback = cons_callback_routine.
  ENDMETHOD.                    " ALV_OTHERS_SET

  METHOD alv_fieldcat_set.  "alv_prop_set

    DATA: lv_desc TYPE char40.
    CLEAR: mv_col,lv_desc.
*   Field definitions
    lv_desc = read_text( iv_name = 'UNAME' ).
    add_field( iv_fieldname = 'UNAME'             iv_len = '12'
               iv_descr     = lv_desc             iv_hotsp = 'X' ).

    CLEAR: lv_desc.
    lv_desc = read_text( iv_name = 'NAME_TEXT').
    add_field( iv_fieldname = 'NAME_TEXT'         iv_len = '80'
               iv_descr     = lv_desc             iv_hotsp = '' ).

    CLEAR: lv_desc.
    lv_desc = read_text( iv_name = 'C_AGR_NAME' ).
    add_field( iv_fieldname = 'C_AGR_NAME'        iv_len = '30'
               iv_descr     = lv_desc             iv_hotsp = 'X' ).

    CLEAR: lv_desc.
    lv_desc = read_text( iv_name = 'C_TEXT' ).
    add_field( iv_fieldname = 'C_TEXT'            iv_len = '80'
               iv_descr     = lv_desc             iv_hotsp = '' ).

    CLEAR: lv_desc.
    lv_desc = read_text( iv_name = 'S_AGR_NAME' ).
    add_field( iv_fieldname = 'S_AGR_NAME'        iv_len = '30'
               iv_descr     = lv_desc             iv_hotsp = 'X' ).

    CLEAR: lv_desc.
    lv_desc = read_text( iv_name = 'S_TEXT' ).
    add_field( iv_fieldname = 'S_TEXT'        iv_len = '80'
               iv_descr     = lv_desc             iv_hotsp = '' ).

    CLEAR: lv_desc.
    lv_desc = read_text( iv_name = 'FROM_DAT' ).
    add_field( iv_fieldname = 'FROM_DAT'          iv_len = '8'
               iv_descr     = lv_desc             iv_hotsp = '' ).

    CLEAR: lv_desc.
    lv_desc = read_text( iv_name = 'TO_DAT' ).
    add_field( iv_fieldname = 'TO_DAT'            iv_len = '8'
               iv_descr     = lv_desc             iv_hotsp = '' ).

  ENDMETHOD.                    "alv_fieldcat_set

  METHOD add_field. "Add field to field catalog

    DATA:
       ls_fieldcat TYPE slis_fieldcat_alv.

    mv_col = mv_col + 1.

    CLEAR ls_fieldcat.
    ls_fieldcat-col_pos    = mv_col.
    ls_fieldcat-fieldname  = iv_fieldname.
    ls_fieldcat-outputlen  = iv_len.
    ls_fieldcat-seltext_l  = iv_descr.
    ls_fieldcat-seltext_m  = iv_descr.
    ls_fieldcat-seltext_s  = iv_descr.
    ls_fieldcat-fix_column = 'X'.
    ls_fieldcat-emphasize  = 'X'.
    ls_fieldcat-hotspot    = iv_hotsp.

*   Suppress leading zeros for the material number
    IF iv_fieldname = 'MATNR'.
      ls_fieldcat-edit_mask = '==MATN1'.
    ENDIF.

    APPEND ls_fieldcat TO mt_fieldcat.

  ENDMETHOD.                    "add_field

  METHOD alv_prop_set.    "* alv property set
    me->alv_fieldcat_set( ).
    me->alv_layout_set( ).
    me->alv_others_set( ).
  ENDMETHOD.                    "alv_prop_set

  METHOD display.
    DATA: lv_text TYPE string.
    super->display( ).
    CLEAR: lv_text.
    lv_text = read_text( iv_name = 'ALV_BEGIN').
    show_progress_percent( EXPORTING iv_text = lv_text
                                     iv_percentage = '30' ).
    get_alv_data( ).
    CLEAR: lv_text.
    lv_text = read_text( iv_name = 'ALV_PROPERTY').
    show_progress_percent( iv_text = lv_text
                           iv_percentage = '80' ).
    alv_prop_set( ).
    show_alv( ).
  ENDMETHOD.                    "DISPLAY

  METHOD get_alv_data.
    mr_data->get_data( ).
    mt_alvdata = mr_data->mt_alvdata.
    mt_tcode   = mr_data->mt_tcode.
  ENDMETHOD.                    "get_alv_data

  METHOD show_alv.
    DATA: lv_lines(10)  TYPE c,
          lv_text       TYPE string.

    IF mt_alvdata IS INITIAL.
      CLEAR: lv_text.
      lv_text = read_text( iv_name = 'NO_DATA').
      MESSAGE s000(yse_sales_log) WITH lv_text
        DISPLAY LIKE message_type-error.
      LEAVE LIST-PROCESSING.
    ENDIF.

    CLEAR: lv_text.
    DESCRIBE TABLE mt_alvdata LINES lv_lines.
    lv_text = read_text( iv_name = 'SHOW_ALV').
    REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH  lv_lines.
    show_progress_percent(  iv_text       = lv_text
                            iv_percentage = 90 ).

    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
      EXPORTING
        i_callback_program       = sy-repid
        i_callback_pf_status_set = 'FRM_MY_STATUS'
        i_callback_user_command  = mv_callback
        is_layout                = ms_layout
        it_fieldcat              = mt_fieldcat
        i_save                   = mv_save
        is_variant               = ms_disvar
      TABLES
        t_outtab                 = mt_alvdata
      EXCEPTIONS
        program_error            = 1
        OTHERS                   = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDMETHOD.                    "show_alv

ENDCLASS.                    "lcl_init_noo IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_data IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_data IMPLEMENTATION.

  METHOD constructor.
    super->constructor( ).
    CALL FUNCTION 'RS_REFRESH_FROM_SELECTOPTIONS'
      EXPORTING
        curr_report     = sy-repid
      TABLES
        selection_table = mt_selection_screen
      EXCEPTIONS
        not_found       = 1
        no_report       = 2
        OTHERS          = 3.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

  ENDMETHOD.                    "constructor

  METHOD get_data.
    get_data_agr_users( ).
    get_agr_info( ).
    generate_alv_data( ).
  ENDMETHOD.                    "get_alv_data

  METHOD generate_alv_data.

    TYPES: BEGIN OF lyse_singlerole_tcode,
            agr_name    TYPE agr_name,
            tcode       TYPE tcode,
           END OF lyse_singlerole_tcode.
    DATA: ls_agr_users  TYPE  agr_users,
          ls_agr_texts  TYPE  agr_texts,
          ls_agr_text2  TYPE  agr_texts,
          ls_fname      TYPE  ty_fname,
          ls_agr_agrs   TYPE  agr_agrs,
          ls_usr02      TYPE  usr02,
          ls_tcode      TYPE  yse_singlerole_tcode,
          ls_transaction  TYPE agr_tcodes,
          lv_text       TYPE string,
          lt_tmp_tcode  TYPE STANDARD TABLE OF
                        lyse_singlerole_tcode,
          ls_tmp_tcode  TYPE lyse_singlerole_tcode,
          lt_tstct      TYPE  STANDARD TABLE OF tstct,
          ls_tstct      TYPE  tstct,
          lt_transaction  TYPE STANDARD TABLE OF agr_tcodes,
          lt_alvdata    TYPE STANDARD TABLE OF lcl_init=>ty_alv_output,
          ls_alvdata    TYPE  lcl_init=>ty_alv_output.

    lv_text = read_text( iv_name = 'BEGIN_ALV_DATA' ).
    show_progress_percent(  iv_text = lv_text
                            iv_percentage = '70' ).

    LOOP AT mt_agr_users INTO ls_agr_users.
      CLEAR:  ls_agr_texts  ,
              ls_tcode,
              ls_fname      ,
              ls_agr_agrs   ,
              ls_usr02      ,
              ls_alvdata    .
      ls_alvdata-uname       = ls_agr_users-uname.     "User Name
      READ TABLE mt_fname INTO ls_fname
        WITH KEY bname = ls_agr_users-uname.
      IF sy-subrc = 0.
        ls_alvdata-name_text = ls_fname-name_text.      "Full name
      ENDIF.
      READ TABLE mt_usr02 INTO ls_usr02
        WITH KEY bname = ls_agr_users-uname.
      IF sy-subrc = 0.
        ls_alvdata-gltgv   = ls_usr02-gltgv.             "Valid from
        ls_alvdata-gltgb   = ls_usr02-gltgb.             "Valid to
      ENDIF.
      ls_alvdata-from_dat = ls_agr_users-from_dat.
      ls_alvdata-to_dat = ls_agr_users-to_dat.
      READ TABLE mt_agr_texts INTO ls_agr_texts
        WITH KEY agr_name = ls_agr_users-agr_name.
      LOOP AT mt_agr_agrs INTO ls_agr_agrs
          WHERE agr_name = ls_agr_users-agr_name.
        ls_alvdata-c_agr_name  = ls_agr_users-agr_name.  "Composite role
        ls_alvdata-c_text      = ls_agr_texts-text.      "Composite role name
        ls_alvdata-s_agr_name  = ls_agr_agrs-child_agr.  "Single role
        CLEAR: ls_agr_text2.
        READ TABLE mt_agr_texts INTO ls_agr_text2
          WITH KEY agr_name = ls_agr_agrs-child_agr.
        ls_alvdata-s_text  = ls_agr_text2-text.      "Single role name
        APPEND ls_alvdata TO mt_alvdata.
      ENDLOOP.
      IF sy-subrc <> 0.
        ls_alvdata-s_agr_name  = ls_agr_users-agr_name.  "Single role
        ls_alvdata-s_text  = ls_agr_texts-text.      "Single role name
        APPEND ls_alvdata TO mt_alvdata.
      ENDIF.
    ENDLOOP.
    IF mt_alvdata IS NOT INITIAL.
      APPEND LINES OF mt_alvdata TO lt_alvdata.
      SORT lt_alvdata BY s_agr_name.
      DELETE ADJACENT DUPLICATES FROM lt_alvdata COMPARING  s_agr_name.
    ENDIF.
    CHECK lt_alvdata IS NOT INITIAL.
    SELECT *
      FROM agr_tcodes
      INTO TABLE lt_transaction
      FOR ALL ENTRIES IN lt_alvdata
      WHERE agr_name = lt_alvdata-s_agr_name.
    CHECK lt_transaction IS NOT INITIAL.
    SORT lt_transaction BY tcode.

    DELETE ADJACENT DUPLICATES FROM lt_transaction
      COMPARING tcode.
    LOOP AT lt_transaction INTO ls_transaction.
      ls_tmp_tcode-agr_name = ls_transaction-agr_name.
      ls_tmp_tcode-tcode = ls_transaction-tcode.
      APPEND ls_tmp_tcode TO lt_tmp_tcode.
    ENDLOOP.
    IF lt_tmp_tcode IS NOT INITIAL.
      SELECT *
        FROM tstct
        INTO TABLE lt_tstct
        FOR ALL ENTRIES IN lt_tmp_tcode
        WHERE sprsl = sy-langu
        AND tcode = lt_tmp_tcode-tcode.
    ENDIF.
    SORT lt_tstct.
    LOOP AT lt_transaction INTO ls_transaction.
      CLEAR: ls_tcode.
      ls_tcode-agr_name = ls_transaction-agr_name.
      ls_tcode-tcode    = ls_transaction-tcode.
      CONDENSE ls_transaction-tcode.
      READ TABLE lt_tstct INTO ls_tstct
        WITH KEY tcode = ls_transaction-tcode
        BINARY SEARCH.
      ls_tcode-texts = ls_tstct-ttext.
      APPEND ls_tcode TO mt_tcode.
    ENDLOOP.

  ENDMETHOD.                    "generate_alv_data

  METHOD get_agr_info.
    IF mt_agr_users IS NOT INITIAL.
      SELECT *
        FROM agr_texts
        INTO TABLE mt_agr_texts
        FOR ALL ENTRIES IN mt_agr_users
        WHERE agr_name = mt_agr_users-agr_name
          AND spras    = 'E'.
      SELECT *
        FROM agr_agrs
        INTO TABLE mt_agr_agrs
        FOR ALL ENTRIES IN mt_agr_users
        WHERE agr_name = mt_agr_users-agr_name.
      CHECK mt_agr_agrs IS NOT INITIAL.
      SELECT *
        FROM agr_texts
        APPENDING TABLE mt_agr_texts
        FOR ALL ENTRIES IN mt_agr_agrs
        WHERE agr_name = mt_agr_agrs-child_agr
          AND spras    = 'E'.
      SORT mt_agr_texts.
      DELETE ADJACENT DUPLICATES FROM mt_agr_texts.
    ENDIF.
  ENDMETHOD.                    "get_agr_info

  METHOD get_data_agr_users.

    SORT mt_selection_screen.

    SELECT *
      FROM agr_users
      INTO TABLE mt_agr_users
      WHERE agr_name IN s_rname
        AND uname IN s_uname.
    IF sy-subrc = 0.
      SELECT  usr21~bname
              usr21~persnumber
              adrp~name_text
        FROM usr21 INNER JOIN adrp
          ON usr21~persnumber = adrp~persnumber
        INTO TABLE mt_fname
        FOR ALL ENTRIES IN mt_agr_users
        WHERE usr21~bname = mt_agr_users-uname.
      SELECT *
        FROM usr02
        INTO TABLE mt_usr02
        FOR ALL ENTRIES IN mt_agr_users
        WHERE bname = mt_agr_users-uname.
    ENDIF.

  ENDMETHOD.                    "get_data_agr_users
ENDCLASS.                    "lcl_data IMPLEMENTATION
