*=======================================================================
*       Druckprogramm: Interne Belege
*=======================================================================


*=======================================================================
*       Das Programm includiert
*
*       RFKORI00 Datendeklaration
*       RFKORI04 Datendeklaration
*       RFKORI25 Interne Belege
*       RFKORI70 Leseroutinen
*       RFKORI80 Leseroutinen
*       RFKORI81 Leseroutinen
*       RFKORI90 Allgemeine Unterroutinen
*       RFKORI91 Routinen f¨¹r Extract
*       RFKORI92 Allgemeine Unterroutinen
*       RFKORI93 Allgemeine Unterroutinen f¨¹r Messages und Protokoll
*       RFKORIEX User-Exits f¨¹r Korrespondenz
*=======================================================================


*=======================================================================
*       Report-Header
*=======================================================================
REPORT rfkord30 MESSAGE-ID fb
                NO STANDARD PAGE HEADING.

*=======================================================================
*       Datenteil
*=======================================================================
INCLUDE yse_rfkori00.
INCLUDE yse_rfkori04.
*INCLUDE RFKORI04.

*-----------------------------------------------------------------------
*       Tables (RFKORI00)
*-----------------------------------------------------------------------

*-----------------------------------------------------------------------
*       Datenfelder f¨¹r den Report RFKORD00
*
*       Teil 1 : Einzelfelder (RFKORI00)
*       Teil 2 : Strukturen (RFKORI00)
*       Teil 3 : Interne Tabellen (RFKORI00)
*       Teil 4 : Konstanten (RFKORI00)
*       Teil 5 : Field-Symbols
*       Teil 6 : Select-Options und Parameter
*       Teil 7 : Field-Groups
*-----------------------------------------------------------------------

*-----------------------------------------------------------------------
*       Teil 5 : Field-Symbols
*-----------------------------------------------------------------------

*-----------------------------------------------------------------------
*       Teil 6 : Select-Options und Parameter
*-----------------------------------------------------------------------

begin_of_block 2.
PARAMETERS:     rforid   LIKE rfpdo1-allgevfo.

PARAMETERS:     sortvk   LIKE rfpdo1-kordvarb.

PARAMETERS:     dspras   LIKE rfpdo1-kord30as.
PARAMETERS:     danzzl   LIKE adrs-anzzl DEFAULT '3'.
end_of_block 2.
begin_of_block 8.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(30) text-110.
SELECTION-SCREEN POSITION POS_LOW.
PARAMETERS      tddest   LIKE tsp01-rqdest VISIBLE LENGTH 11.
SELECTION-SCREEN POSITION POS_HIGH.
PARAMETERS      rimmd    LIKE rfpdo2-f140immd DEFAULT ' '.
SELECTION-SCREEN COMMENT 61(15) text-111.
SELECTION-SCREEN END OF LINE.
PARAMETERS:     prdest   LIKE tsp01-rqdest VISIBLE LENGTH 11.
end_of_block 8.
begin_of_block 4.
SELECT-OPTIONS: rbukrs   FOR  bkorm-bukrs,
                rkoart   FOR  bkorm-koart NO-DISPLAY,
                rkonto   FOR  bkorm-konto NO-DISPLAY,
                rbelnr   FOR  bkorm-belnr,
                rgjahr   FOR  bkorm-gjahr.

PARAMETERS:     rxbkor   LIKE rfpdo-kordbkor.
PARAMETERS:     revent   LIKE bkorm-event.
SELECT-OPTIONS: rusnam   FOR  bkorm-usnam.
SELECT-OPTIONS: rdatum   FOR  bkorm-datum.
SELECT-OPTIONS: ruzeit   FOR  bkorm-uzeit.
SELECT-OPTIONS: rerldt   FOR  bkorm-erldt.
PARAMETERS:     rxtsub   LIKE xtsubm NO-DISPLAY.
PARAMETERS:     rxkont   LIKE xkont NO-DISPLAY,
                rxbelg   LIKE xbelg NO-DISPLAY,
                ranzdt   LIKE anzdt NO-DISPLAY,
                rkauto   TYPE c     NO-DISPLAY,
                rsimul   TYPE c     NO-DISPLAY,
                rpdest   LIKE syst-pdest NO-DISPLAY.

PARAMETERS:     rindko   LIKE rfpdo1-kordindk.
PARAMETERS:     rspras   LIKE rf140-spras.
PARAMETERS:     title    LIKE rfpdo1-allgline.
end_of_block 4.
*-----------------------------------------------------------------------
*       Teil 7 : Field-Groups
*-----------------------------------------------------------------------

*=======================================================================
*       Vor dem Selektionsbild
*=======================================================================

*-----------------------------------------------------------------------
*       Initialization
*-----------------------------------------------------------------------
INITIALIZATION.
  get_frame_title: 2, 4, 8.

*=======================================================================
*       Hauptablauf
*=======================================================================

*-----------------------------------------------------------------------
*       Eingabenkonvertierung und Eingabenpr¨¹fung
*-----------------------------------------------------------------------
AT SELECTION-SCREEN.
  PERFORM check_eingabe.

*-----------------------------------------------------------------------
*       Start-of-Selection
*-----------------------------------------------------------------------
  SET BLANK LINES ON.

START-OF-SELECTION.
  save_repid    = 'RFKORD30'.
  rf140-repid   = 'RFKORD30'.
  IF NOT rxbkor IS INITIAL.
    save_event  = revent.
    save_rxbkor = rxbkor.
  ENDIF.
  save_forid    = rforid.
* SAVE_TKOID    = RTKOID.
  save_tddest   = tddest.
  save_prdest   = prdest.
  save_pdest    = rpdest.
  save_rxtsub   = rxtsub.
  save_rimmd    = rimmd.
  save_dspras   = dspras.
  save_anzzl    = danzzl.
* IF SORTKZ =  '1'
* OR SORTKZ =  '2'.
* ELSE.
*   SORTKZ = '1'.
* ENDIF.
* SAVE_SORT     = SORTKZ.
  save_sortvk  = sortvk.
  CLEAR hlp_t021m_k.
  IF NOT save_sortvk  IS INITIAL.
    PERFORM sort_felder USING 'K' 'B'.
  ENDIF.
  save_rsimul = rsimul.
  kautofl = rkauto.
  CLEAR xbkorm.
  CLEAR countp.
  CLEAR   hbukrs.
  REFRESH hbukrs.
  LOOP AT rbukrs.
    MOVE-CORRESPONDING rbukrs TO hbukrs.
    APPEND hbukrs.
  ENDLOOP.
  IF NOT rxtsub IS INITIAL.
    PERFORM prot_import.
  ENDIF.
  PERFORM message_init.
  PERFORM currency_check_for_process USING save_repid.
  IF  alwcheck IS INITIAL
  AND NOT alwlines IS INITIAL.
    LOOP AT alw_bukrs.
      IF alw_bukrs-bukrs IN rbukrs.
        alwcheck = 'X'.
      ENDIF.
    ENDLOOP.
  ENDIF.

*-----------------------------------------------------------------------
*       Datenselektion
*-----------------------------------------------------------------------
  IF t048-event NE save_event.
    PERFORM read_t048.
  ENDIF.
  IF NOT rxbkor IS INITIAL.
    PERFORM fill_selection_bkorm.
    sortid = '4'.
    PERFORM read_bkorm.
  ELSE.
    PERFORM selection_ohne_bkorm.
  ENDIF.

*-----------------------------------------------------------------------
*       End-of-Selection
*-----------------------------------------------------------------------
END-OF-SELECTION.

*-------Daten extrahiert ?----------------------------------------------
  IF xextra IS INITIAL.
    PERFORM message_no_selection.
  ELSE.
*-----------------------------------------------------------------------
*       Sortierung
*-----------------------------------------------------------------------
    SORT BY hdbukrs sortk1  sortk2  sortk3  sortk4  sortk5  hdkoart
            hdkonto hdbelgj hdkoar2 hdkont2 hdusnam hddatum hduzeit.

*-----------------------------------------------------------------------
*       Ausgabe
*-----------------------------------------------------------------------

    PERFORM interne_belege.

  ENDIF.

*=======================================================================
*       TOP-OF-PAGE
*=======================================================================
TOP-OF-PAGE.

  PERFORM batch-heading(rsbtchh0).
  ULINE.

*=======================================================================
*       Interne Perform-Routinen
*=======================================================================

*-----------------------------------------------------------------------
*       Interne Belege Formulardruck
*-----------------------------------------------------------------------
  INCLUDE yse_rfkori25.
*INCLUDE RFKORI25.

*-----------------------------------------------------------------------
*       Leseroutinen
*-----------------------------------------------------------------------
  INCLUDE yse_rfkori70.
*INCLUDE RFKORI70.

*-----------------------------------------------------------------------
*       Leseroutinen
*-----------------------------------------------------------------------
  INCLUDE yse_rfkori80.
  INCLUDE yse_rfkori81.
*INCLUDE RFKORI81.

*-----------------------------------------------------------------------
*       Allgemeine Unterroutinen
*-----------------------------------------------------------------------
  INCLUDE yse_rfkori90b.
  INCLUDE yse_rfkori92.

*-----------------------------------------------------------------------
*       Routinen f¨¹r Extract
*-----------------------------------------------------------------------
  INCLUDE yse_rfkori91.

*-----------------------------------------------------------------------
*       Allgemeine Unterroutinen f¨¹r Messages und Protokoll
*-----------------------------------------------------------------------
  INCLUDE yse_rfkori93.

*-----------------------------------------------------------------------
*       User-Exits f¨¹r Korrespondenz
*-----------------------------------------------------------------------
*NCLUDE RFKORIEX.

*-----------------------------------------------------------------------
*       FORM ANALYSE_UND_AUSGABE
*-----------------------------------------------------------------------
FORM analyse_und_ausgabe.
*     CLEAR XKAUSG.
  CLEAR xnach.
  IF  NOT save_belnr IS INITIAL
  AND NOT save_gjahr IS INITIAL.
    IF save_belnr CO '* '.
      CLEAR hbkormkey.
      CLEAR herdata.
      hbkormkey-bukrs = hdbukrs.
      hbkormkey-koart = hdkoart.
      hbkormkey-konto = hdkonto.
      hbkormkey-belnr = save_belnr.
      hbkormkey-gjahr = save_gjahr.
      CONDENSE hbkormkey.
      herdata-usnam = hdusnam.
      herdata-datum = hddatum.
      herdata-uzeit = hduzeit.
      CLEAR fimsg.
      fimsg-msort = '    '. fimsg-msgid = 'FB'.
      fimsg-msgty = 'I'.
      fimsg-msgno = '294'.
      fimsg-msgv1 = save_event.
      fimsg-msgv2 = hbkormkey.
      fimsg-msgv3 = herdata.
      PERFORM message_append.
      xkausg = 'X'.
    ELSE.
      CLEAR xprint.
      CLEAR   hbkpf.
      REFRESH hbkpf.
      PERFORM read_bkpf.
      APPEND hbkpf.
      IF sy-subrc = 0.
*           IF BKPF-BSTAT = 'V'
        IF bkpf-bstat = 'W'
        OR bkpf-bstat = 'Z'
        OR bkpf-bstat = 'A'.
          CLEAR fimsg.
          fimsg-msort = '    '. fimsg-msgid = 'FB'.
          fimsg-msgty = 'I'.
          fimsg-msgno = '856'.
          fimsg-msgv1 = bkpf-bstat.
          fimsg-msgv2 = bkpf-bukrs.
          fimsg-msgv3 = bkpf-belnr.
          fimsg-msgv4 = bkpf-gjahr.
          PERFORM message_append.
          xkausg = 'X'.
        ELSE.
          CLEAR save_budat.
          rf140-title = title.

          PERFORM interne_belege_ausgeben.
        ENDIF.
      ELSE.
        CLEAR fimsg.
        fimsg-msort = '    '. fimsg-msgid = 'FB'.
        fimsg-msgty = 'I'.
        fimsg-msgno = '547'.
        fimsg-msgv1 = save_bukrs.
        fimsg-msgv2 = save_belnr.
        fimsg-msgv3 = save_gjahr.
        PERFORM message_append.
        xkausg = 'X'.
      ENDIF.
    ENDIF.
  ELSE.
    CLEAR hbkormkey.
    CLEAR herdata.
    hbkormkey-bukrs = hdbukrs.
    hbkormkey-koart = hdkoart.
    hbkormkey-konto = hdkonto.
    hbkormkey-belnr = save_belnr.
    hbkormkey-gjahr = save_gjahr.
    CONDENSE hbkormkey.
    herdata-usnam = hdusnam.
    herdata-datum = hddatum.
    herdata-uzeit = hduzeit.
    CLEAR fimsg.
    fimsg-msort = '    '. fimsg-msgid = 'FB'.
    fimsg-msgty = 'I'.
    fimsg-msgno = '294'.
    fimsg-msgv1 = save_event.
    fimsg-msgv2 = hbkormkey.
    fimsg-msgv3 = herdata.
    PERFORM message_append.
    xkausg = 'X'.
  ENDIF.
ENDFORM.                    "ANALYSE_UND_AUSGABE

*-----------------------------------------------------------------------
*       FORM CHECK_EINGABE
*-----------------------------------------------------------------------
FORM check_eingabe.
  DESCRIBE TABLE rerldt LINES erllines.
  IF NOT erllines IS INITIAL.
    IF  erllines    = '1'
    AND rerldt-low  IS INITIAL
    AND rerldt-high IS INITIAL.
      CLEAR xerdt.
    ELSE.
      xerdt = 'X'.
    ENDIF.
  ELSE.
    CLEAR xerdt.
  ENDIF.
  IF NOT rxtsub   IS INITIAL.
    print = 'X'.
  ELSE.
    IF sy-batch IS INITIAL.
      IF sscrfields-ucomm EQ 'PRIN'.    "no difference between starting
        sscrfields-ucomm = 'ONLI'.     "with F8 or F13
*     IF SY-UCOMM = 'PRIN'.
*        SY-UCOMM = 'ONLI'.
        print = 'X'.
        xonli = 'X'.
      ENDIF.
    ELSE.
*     IF SY-UCOMM = 'PRIN'.
      print = 'X'.
*     ENDIF.
    ENDIF.
  ENDIF.

  IF    NOT sy-batch IS INITIAL
  OR  (     sy-batch IS INITIAL
  AND   (   sscrfields-ucomm = 'PRIN'
  OR        sscrfields-ucomm = 'ONLI' ) ).
* AND   (   SY-UCOMM = 'PRIN'
* OR        SY-UCOMM = 'ONLI' ) ).

    IF rxbkor IS INITIAL.
      IF sy-batch IS INITIAL.
        IF  NOT rindko IS INITIAL
        AND rspras IS INITIAL.
*         IF SY-BATCH IS INITIAL.
          SET CURSOR FIELD 'RSPRAS'.
*         ENDIF.
          MESSAGE e490.
        ENDIF.
      ELSE.
        IF  NOT rindko IS INITIAL.
          MESSAGE e499.
        ENDIF.
      ENDIF.
*     IF  NOT REVENT IS INITIAL
*     AND     RINDKO IS INITIAL.
*       IF SY-BATCH IS INITIAL.
*         SET CURSOR FIELD 'REVENT'.
*       ENDIF.
*       MESSAGE W451.
*     ENDIF.
      IF revent IS INITIAL.
        IF sy-batch IS INITIAL.
          SET CURSOR FIELD 'REVENT'.
        ENDIF.
        MESSAGE e450.
      ENDIF.
      DESCRIBE TABLE rerldt LINES erllines.
      IF NOT erllines IS INITIAL.
        IF sy-batch IS INITIAL.
          SET CURSOR FIELD 'RERLDT-LOW'.
        ENDIF.
        MESSAGE w452.
      ENDIF.
      DESCRIBE TABLE rusnam LINES usrlines.
      IF NOT usrlines IS INITIAL.
        IF sy-batch IS INITIAL.
          SET CURSOR FIELD 'RUSNAM-LOW'.
        ENDIF.
        MESSAGE w478.
      ENDIF.
      DESCRIBE TABLE rdatum LINES datlines.
      IF NOT datlines IS INITIAL.
        IF sy-batch IS INITIAL.
          SET CURSOR FIELD 'RDATUM-LOW'.
        ENDIF.
        MESSAGE w479.
      ENDIF.
      DESCRIBE TABLE ruzeit LINES timlines.
      IF NOT timlines IS INITIAL.
        IF sy-batch IS INITIAL.
          SET CURSOR FIELD 'RUZEIT-LOW'.
        ENDIF.
        MESSAGE w480.
      ENDIF.
    ELSE.
      IF  NOT rindko IS INITIAL
      AND NOT rspras IS INITIAL.
        IF sy-batch IS INITIAL.
          SET CURSOR FIELD 'RSPRAS'.
        ENDIF.
        MESSAGE e491.
      ENDIF.

      IF revent IS INITIAL.
        IF sy-batch IS INITIAL.
          SET CURSOR FIELD 'REVENT'.
        ENDIF.
        MESSAGE e450.
      ENDIF.

      IF NOT revent IS INITIAL.
        CLEAR t048.
        SELECT SINGLE * FROM t048
          WHERE event = revent.

        IF sy-subrc =  0.
          CASE t048-anzdt.
            WHEN '0'.
              IF NOT t048-xkont IS INITIAL.
                IF sy-batch IS INITIAL.
                  SET CURSOR FIELD 'REVENT'.
                ENDIF.
                MESSAGE e463 WITH revent.
              ENDIF.
            WHEN OTHERS.
              IF sy-batch IS INITIAL.
                SET CURSOR FIELD 'REVENT'.
              ENDIF.
              MESSAGE e462 WITH revent.
          ENDCASE.
        ELSE.
          IF sy-batch IS INITIAL.
            SET CURSOR FIELD 'REVENT'.
          ENDIF.
          MESSAGE e460 WITH revent.
        ENDIF.
      ENDIF.
    ENDIF.

    IF sortvk IS INITIAL.
      IF sy-batch IS INITIAL.
        SET CURSOR FIELD 'SORTVK'.
      ENDIF.
      MESSAGE e830.
    ELSE.
      SELECT SINGLE * FROM t021m
        WHERE progn = 'RFKORD*'
        AND   anwnd = 'KORB'
        AND   srvar = sortvk.
      IF sy-subrc NE 0.
        IF sy-batch IS INITIAL.
          SET CURSOR FIELD 'SORTVK'.
        ENDIF.
        MESSAGE e832 WITH sortvk.
      ENDIF.
    ENDIF.

    IF  NOT rindko IS INITIAL
    AND revent IS INITIAL.
      IF sy-batch IS INITIAL.
        SET CURSOR FIELD 'REVENT'.
      ENDIF.
      MESSAGE e450.
    ENDIF.

    IF  NOT rindko IS INITIAL
    AND NOT revent IS INITIAL.
      IF t048-event NE revent.
        SELECT SINGLE * FROM t048
          WHERE event = revent.
        IF sy-subrc NE 0.
          IF sy-batch IS INITIAL.
            SET CURSOR FIELD 'REVENT'.
          ENDIF.
          MESSAGE e460 WITH revent.
        ENDIF.
      ENDIF.
      IF t048-xspra IS INITIAL.
        IF sy-batch IS INITIAL.
          SET CURSOR FIELD 'RINDKO'.
        ENDIF.
        MESSAGE e500 WITH revent.
      ENDIF.
    ENDIF.

    IF  rindko IS INITIAL
    AND NOT revent IS INITIAL.
      IF t048-event NE revent.
        SELECT SINGLE * FROM t048
          WHERE event = revent.
        IF sy-subrc NE 0.
          IF sy-batch IS INITIAL.
            SET CURSOR FIELD 'REVENT'.
          ENDIF.
          MESSAGE e460 WITH revent.
        ENDIF.
      ENDIF.
      IF NOT t048-xspra IS INITIAL.
        IF sy-batch IS INITIAL.
          SET CURSOR FIELD 'RINDKO'.
        ENDIF.
        MESSAGE e501 WITH revent.
      ENDIF.
    ENDIF.

    IF NOT tddest IS INITIAL.
      SELECT SINGLE * FROM tsp03
        WHERE padest EQ tddest.
      IF sy-subrc NE 0.
        IF sy-batch IS INITIAL.
          SET CURSOR FIELD 'TDDEST'.
        ENDIF.
        MESSAGE e441 WITH tddest.
      ENDIF.
    ENDIF.

  ENDIF.
  IF rxtsub IS INITIAL.
    DESCRIBE TABLE rdatum LINES datlines.
    IF NOT datlines IS INITIAL.
      PERFORM check_date.
    ENDIF.
    DESCRIBE TABLE ruzeit LINES timlines.
    IF NOT timlines IS INITIAL.
      PERFORM check_time.
    ENDIF.
  ENDIF.
ENDFORM.                    "CHECK_EINGABE

*----------------------------------------------------------------------*
* FORM FORM_START_IB
*----------------------------------------------------------------------*
FORM form_start_ib.

  IF xopen = 'Y'.
    CLEAR form.
    form = t001f-fornr.
    save_form = t001f-fornr.
    startpage = 'IB_FIRST'.
    language = save_langu.
*   FLKFORM = 'Z'.
    CLEAR flspras.

    PERFORM form_start USING save_form language 'IB_FIRST'.
*   CALL FUNCTION 'START_FORM'
*                    EXPORTING  FORM      = SAVE_FORM
*                               LANGUAGE  = LANGUAGE
*                               STARTPAGE = 'IB_FIRST'
*                    IMPORTING  LANGUAGE  = LANGUAGE
*                    EXCEPTIONS FORM      = 5.
**                              UNENDED   = 7
**                              UNOPENED  = 3.
**                              IF SY-SUBRC = '3'.
**                                PERFORM MESSAGE_UNOPENED.
**                              ENDIF.
    IF sy-subrc = '5'.
      MESSAGE e229 WITH t001f-fornr
                        'IB_FIRST'.
    ENDIF.
*                               IF SY-SUBRC = '7'.
*                                 PERFORM MESSAGE_UNENDED.
*                               ENDIF.
    IF sy-subrc = '0'.
      IF language NE save_langu.
*       IF SAVE_DSPRAS IS INITIAL.
*         IF SAVE_LANGU NE SY-LANGU.
*           IF LANGUAGE NE SY-LANGU.
*             PERFORM FORM_END.
*             LANGUAGE = SY-LANGU.
*             CALL FUNCTION 'START_FORM'
*                              EXPORTING  FORM      = SAVE_FORM
*                                         LANGUAGE  = LANGUAGE
*                                         STARTPAGE = 'IB_FIRST'
*                              IMPORTING  LANGUAGE  = LANGUAGE
*                              EXCEPTIONS FORM      = 5.
**                                        UNENDED   = 7
**                                        UNOPENED  = 3.
**                                      IF SY-SUBRC = '3'.
**                                        PERFORM MESSAGE_UNOPENED.
**                                      ENDIF.
*                                       IF SY-SUBRC = '5'.
**                                        MESSAGE E412 WITH KNB1-BUKRS.
*                                       ENDIF.
**                                      IF SY-SUBRC = '7'.
**                                        PERFORM MESSAGE_UNENDED.
**                                      ENDIF.
*
*                               IF SY-SUBRC = '0'.
*                                 XSTART = 'J'.
*                                 IF LANGUAGE NE SY-LANGU.
*                                   FLSPRAS = ' '.
**                                 PERFORM MESSAGE_LANGUAGE.
*                                 ENDIF.
*                               ENDIF.
*           ELSE.
*             XSTART = 'J'.
*             FLSPRAS = ' '.
**            PERFORM MESSAGE_LANGUAGE.
*           ENDIF.            "language <> sy
*         ELSE.
*           XSTART = 'J'.
*           FLSPRAS = ' '.
**          PERFORM MESSAGE_LANGUAGE.
*         ENDIF.            "save_langu <> sy
*       ELSE.
*         IF SAVE_LANGU NE T001-SPRAS.
*           IF LANGUAGE NE T001-SPRAS.
*             PERFORM FORM_END.
*             LANGUAGE = T001-SPRAS.
*             CALL FUNCTION 'START_FORM'
*                              EXPORTING  FORM      = SAVE_FORM
*                                         LANGUAGE  = LANGUAGE
*                                         STARTPAGE = 'IB_FIRST'
*                              IMPORTING  LANGUAGE  = LANGUAGE
*                              EXCEPTIONS FORM      = 5.
**                                        UNENDED   = 7
**                                        UNOPENED  = 3.
**                                      IF SY-SUBRC = '3'.
**                                        PERFORM MESSAGE_UNOPENED.
**                                      ENDIF.
*                                       IF SY-SUBRC = '5'.
**                                        MESSAGE E412 WITH KNB1-BUKRS.
*                                       ENDIF.
**                                      IF SY-SUBRC = '7'.
**                                        PERFORM MESSAGE_UNENDED.
**                                      ENDIF.
*
*                               IF SY-SUBRC = '0'.
*                                 XSTART = 'J'.
*                                 IF LANGUAGE NE T001-SPRAS.
*                                   FLSPRAS = ' '.
**                                 PERFORM MESSAGE_LANGUAGE.
*                                 ENDIF.
*                               ENDIF.
*           ELSE.
*             XSTART = 'J'.
*             FLSPRAS = ' '.
**            PERFORM MESSAGE_LANGUAGE.
*           ENDIF.            "language <> t001-spras
*         ELSE.
*           XSTART = 'J'.
*           FLSPRAS = ' '.
**          PERFORM MESSAGE_LANGUAGE.
**        ENDIF.            "save_langu <> t001-spras
*       ENDIF.
        xstart = 'J'.     "language <> save_langu
        flspras = ' '.
        CLEAR fimsg.
        fimsg-msort = '    '. fimsg-msgid = 'FB'.
        fimsg-msgty = 'I'.
        fimsg-msgno = '559'.
        fimsg-msgv1 = save_form.
        fimsg-msgv2 = save_langu.
        fimsg-msgv3 = language.
        PERFORM message_append.
      ELSE.               "language =  save_langu
        xstart = 'J'.
      ENDIF.              "language <> save_langu
    ELSE.
      CLEAR xstart.
    ENDIF.                "sy-subrc
  ENDIF.                  "xopen
ENDFORM.                    "FORM_START_IB

*-----------------------------------------------------------------------
*       FORM INIT_BELEGZEILE
*-----------------------------------------------------------------------
FORM init_belegzeile.
  CLEAR adrs.
  CLEAR *adrs.
  CLEAR addr.

  CLEAR anla.
  CLEAR anlt.

  CLEAR aufk.

  CLEAR bnka.
  CLEAR *bnka.

  CLEAR bsec.
  CLEAR bsed.

  CLEAR cobl.
  CLEAR cepct.
  CLEAR *cepct.
  CLEAR cskt.

  CLEAR dd07l.
  CLEAR dd07t.

  CLEAR kna1.
  CLEAR *kna1.
  CLEAR knbk.

  CLEAR lfa1.
  CLEAR *lfa1.
  CLEAR lfbk.

  CLEAR makt.

  CLEAR ska1.
* CLEAR *SKA1.
  CLEAR skat.
  CLEAR *skat.

  CLEAR t001w.
  CLEAR *t005.
  CLEAR t007s.
  CLEAR t008t.
  CLEAR t012.
  CLEAR t012k.
  CLEAR t015l.
  CLEAR t031t.
  CLEAR t035t.
  CLEAR t036t.
  CLEAR t040a.
  CLEAR t040t.
  CLEAR t042z.
  CLEAR t042h.
  CLEAR t046t.
  CLEAR t047n.
  CLEAR t057t.
  CLEAR t059u.
  CLEAR t059p.
  CLEAR t059q.
  CLEAR t059z.
  CLEAR t059zt.
  CLEAR t074t.
  CLEAR t156t.
  CLEAR t856t.
  CLEAR t880.
  CLEAR t8jvt.
  CLEAR t8jjt.
  CLEAR t8jft.
  CLEAR tabwt.
  CLEAR tbslt.
  CLEAR tgsbt.
  CLEAR *tgsbt.
  CLEAR tka01.
  CLEAR ttxjt.
* CLEAR Tzb0t.

  CLEAR save_anln1.
  CLEAR save_anln2.
  CLEAR save_anbwa.
  CLEAR save_aufnr.
  CLEAR save_bankl.
  CLEAR save_bankn.
  CLEAR save_banks.
  CLEAR save_bewar.
  CLEAR save_blnkz.
  CLEAR save_buzei.
  CLEAR save_bschl.
  CLEAR save_bvtyp.
  CLEAR save_bwtar.
  CLEAR save_dbakz.
  CLEAR save_egrup.
  CLEAR save_fdgrp.
  CLEAR save_fdlev.
  CLEAR save_gsber.
  CLEAR save_hbkid.
  CLEAR save_koart.
  CLEAR save_kokrs.
  CLEAR save_kostl.
  CLEAR save_kunnr.
  CLEAR save2_land1.
  CLEAR save_lifnr.
  CLEAR save_lzbkz.
  CLEAR save_maber.
  CLEAR save_mansp.
  CLEAR save_matnr.
  CLEAR save_mwskz.
  CLEAR save_mschl.
  CLEAR save_prctr.
  CLEAR save_qsskz.
  CLEAR save_recid.
  CLEAR save_subrc.
  CLEAR save_txtnr.
  CLEAR save_txjcd.
  CLEAR save_umskz.
  CLEAR save_vbewa.
  CLEAR save_vbund.
  CLEAR save_vname.
  CLEAR save_werks.
  CLEAR save_wevwv.
  CLEAR save_wstat.
  CLEAR save_wstkz.
  CLEAR save_zlsch.
  CLEAR save_zlspr.

  CLEAR rf140-bezblpos.
  CLEAR rf140-bezbstat.
  CLEAR rf140-bezkoart.
  CLEAR rf140-bezshkzg.
  CLEAR rf140-bezxauto.
  CLEAR rf140-bezxcpdd.
  CLEAR rf140-bezmwskz.
* CLEAR RF140-BEZMWSK1.
* CLEAR RF140-BEZMWSK2.
* CLEAR RF140-BEZMWSK3.
  CLEAR rf140-bezwmwkz.
  CLEAR rf140-bezwgbkz.

  CLEAR rf140-hwaer.
  CLEAR rf140-hwaer2.
  CLEAR rf140-hwaer3.
  CLEAR rf140-hwaer4.
  CLEAR rf140-hwaer5.
  CLEAR rf140-hwaer6.
  CLEAR rf140-hwaer7.
  CLEAR rf140-hwaer8.
  CLEAR rf140-hwaer9.
  CLEAR rf140-hwaer10.
  CLEAR rf140-hwaer11.
  CLEAR rf140-hwaer12.
  CLEAR rf140-hwaer13.
  CLEAR rf140-hwaer14.
  CLEAR rf140-hwaer15.
  CLEAR rf140-hwaer16.
  CLEAR rf140-hwaer17.
  CLEAR rf140-hwaer18.
  CLEAR rf140-waers.
  CLEAR rf140-waers2.
  CLEAR rf140-waers3.
  CLEAR rf140-waers4.
  CLEAR rf140-waers5.
  CLEAR rf140-waers6.
  CLEAR rf140-waers7.

  CLEAR rf140-banks.
  CLEAR rf140-bankl.
  CLEAR rf140-erdat.
  CLEAR rf140-ernam.
  CLEAR rf140-banka.
  CLEAR rf140-provz.
  CLEAR rf140-stras.
  CLEAR rf140-ort01.
  CLEAR rf140-swift.
  CLEAR rf140-bgrup.
  CLEAR rf140-xpgro.
  CLEAR rf140-loevm.
  CLEAR rf140-bnklz.

  CLEAR rf140-banks2.
  CLEAR rf140-bankl2.
  CLEAR rf140-bankn2.
  CLEAR rf140-bkont2.
  CLEAR rf140-erdat2.
  CLEAR rf140-ernam2.
  CLEAR rf140-banka2.
  CLEAR rf140-provz2.
  CLEAR rf140-stras2.
  CLEAR rf140-ort012.
  CLEAR rf140-swift2.
  CLEAR rf140-bgrup2.
  CLEAR rf140-xpgro2.
  CLEAR rf140-loevm2.
  CLEAR rf140-bnklz2.

  CLEAR rf140-regul.
  CLEAR rf140-zfbdw.
  CLEAR rf140-zfbda.
ENDFORM.                    "INIT_BELEGZEILE

*-----------------------------------------------------------------------
*       FORM INTERNE_BELEGE
*-----------------------------------------------------------------------
FORM interne_belege.


  PERFORM get_printer_parameters.
  LOOP.
    AT NEW hdbukrs.
      save_bukrs = hdbukrs.
      IF NOT rxtsub IS INITIAL.
        mbukrs = hdbukrs.
      ENDIF.
      PERFORM read_t001.
      PERFORM find_bukrs_adresse.
      PERFORM save_bukrs_adresse.                   "f¨¹r Formularausgabe
      PERFORM read_t001f.
*     PERFORM READ_T001G.

      IF rindko IS INITIAL.
        IF save_dspras IS INITIAL.
          save_langu = t001-spras.
        ELSE.
          save_langu = sy-langu.
        ENDIF.
      ENDIF.
      CLEAR save_ktopl.
      save_ktopl = t001-ktopl.
      PERFORM read_t004.
      CLEAR save_land1.
      save_land1 = t001-land1.
      PERFORM read_t005.
      CLEAR save_kalsm.
      save_kalsm = t005-kalsm.
      CLEAR countp.
      IF NOT rsimul IS INITIAL.
        CLEAR   hbkorm.
        REFRESH hbkorm.
      ENDIF.
*     PERFORM form_open.
      xknid = ' '.
    ENDAT.

    AT NEW hduzeit.
*     CLEAR   HBKDF.
*     REFRESH HBKDF.
      CLEAR   hbkpf.   "note 307463
      REFRESH hbkpf.   "note 307463
      CLEAR   hbseg.
      REFRESH hbseg.
      CLEAR   hkna1.
      REFRESH hkna1.
      CLEAR   hknb1.
      REFRESH hknb1.
      CLEAR   hlfa1.
      REFRESH hlfa1.
      CLEAR   hlfb1.
      REFRESH hlfb1.
      CLEAR   hskat.
      REFRESH hskat.
      CLEAR rf140-usnam.
      CLEAR save_belnr.
      CLEAR save_gjahr.
    ENDAT.

    AT daten.
      rf140-usnam = hdusnam.                   "Daten der Anforderung
      rf140-adate = hddatum.                   "ggf. abweichend von
      rf140-azeit = hduzeit.                   "SYST Daten des Drucks
      IF t048-xbukr IS INITIAL.
        save_bukrs = hdbukrs.
      ELSE.
        save_bukrs = dabbukr.
      ENDIF.
      save_belnr = dabelnr.
      save_gjahr = dagjahr.
      IF NOT rindko IS INITIAL.
        CLEAR rf140-tdname.
        CLEAR rf140-tdid.
        CLEAR rf140-tdspras.
        rf140-tdname  = paramet+22(40).
        rf140-tdspras = paramet+62(1).
        save_langu    = paramet+62(1).
      ENDIF.
    ENDAT.

    AT END OF hduzeit.
*-------Analyse und Ausgabe-------------------------------------------*
      CLEAR xkausg.
      PERFORM fill_bkorm.
      PERFORM form_open.
      PERFORM analyse_und_ausgabe.
      PERFORM form_close.

*-------BKORM Fortschreibung------------------------------------------*
      IF NOT xbkorm IS INITIAL.
        IF rsimul IS INITIAL.
          PERFORM updata_bkorm.
        ELSE.
          PERFORM updata_bkorm_store.
        ENDIF.
      ELSE.
        PERFORM message_output.
      ENDIF.
    ENDAT.

    AT END OF hdbukrs.
*     PERFORM form_close.
      IF  NOT rsimul          IS INITIAL
      AND NOT itcpp-tddevice  IS INITIAL
      AND NOT itcpp-tdspoolid IS INITIAL.
        PERFORM updata_bkorm_2.
      ENDIF.
    ENDAT.
  ENDLOOP.

  PERFORM delete_text.

  PERFORM message_check.
  IF sy-subrc = 0.
    PERFORM message_print.
  ENDIF.

  IF NOT rxtsub IS INITIAL.
    PERFORM prot_export.
  ELSE.
    IF rsimul IS INITIAL.
      save_proid = 'KORD'.
      PERFORM prot_print.
    ELSE.
      PERFORM prot_export.
    ENDIF.
  ENDIF.
ENDFORM.                    "INTERNE_BELEGE

*-----------------------------------------------------------------------
*       FORM INTERNE_BELEGE_AUSGEBEN
*-----------------------------------------------------------------------
FORM interne_belege_ausgeben.

*-------Pr¨¹fen ob buchungskreis¨¹bergreifender Vorgang-------------------
  save_bvorg = bkpf-bvorg.
  PERFORM pruefen_bvorg.

  IF save_bvorg IS INITIAL.
    IF bkpf-bstat = 'D'.
      PERFORM read_bkdf.
      IF sy-subrc NE 0.
        CLEAR fimsg.
        fimsg-msort = '    '. fimsg-msgid = 'FB'. fimsg-msgty = 'I'.
        fimsg-msgno = '547'.
        fimsg-msgv1 = save_bukrs.
        fimsg-msgv2 = save_belnr.
        fimsg-msgv3 = save_gjahr.
        PERFORM message_append.
        xkausg = 'X'.
      ENDIF.
    ELSE.
      CLEAR bkdf.
    ENDIF.
    IF bkpf-bstat = 'V'.
      PERFORM read_prel_document.
      PERFORM read_vbseg.
    ENDIF.
  ENDIF.

  IF bkpf-bstat <> 'V'.                          "<<< insert ALRK148260
    PERFORM read_bseg.
  ENDIF.                                         "<<< insert ALRK148260

  IF  NOT save_bvorg IS INITIAL
  AND NOT t048-xbukr IS INITIAL.
    save2_bukrs = save_bukrs.
    save2_belnr = save_belnr.
    save2_gjahr = save_gjahr.
    PERFORM bvorg_bkpf.
    PERFORM save_bseg.
    PERFORM bvorg_bseg.
    PERFORM restore_bseg.
  ENDIF.

  IF sy-subrc = '0'.
*   CLEAR SAVE_BLART.
*   SAVE_BLART = BKPF-BLART.
*   PERFORM READ_T003T.
    LOOP AT hbseg.
      CLEAR save_koart.
      save_koart = hbseg-koart.
      save_bukrs = hbseg-bukrs.
      IF save_koart = 'D'.
       CONCATENATE hbseg-bukrs hbseg-belnr hbseg-gjahr hbseg-buzei INTO
       wtext.
*        W_ZTERM = HBSEG-ZTERM.
*        SELECT SINGLE VTEXT INTO W_VTEXT
*          FROM TVZBT
*          WHERE SPRAS = 'EN'
*          AND   ZTERM = W_ZTERM.
        w_kunnr = hbseg-kunnr.
        SELECT SINGLE adrnr INTO w_adrnr
          FROM kna1 WHERE kunnr = w_kunnr.
        save_kunnr = hbseg-kunnr.
        PERFORM pruefen_hkna1.
        IF xvorh IS INITIAL.
          PERFORM read_kna1.
          IF sy-subrc NE 0.
            xkausg = 'X'.
          ENDIF.
          MOVE-CORRESPONDING kna1 TO hkna1.
          APPEND hkna1.
        ENDIF.
*        begin insert
        w_zterm = hbseg-zterm.
        SELECT SINGLE vtext INTO w_vtext
          FROM tvzbt
     WHERE spras = hkna1-spras
          AND   zterm = w_zterm.
*      end insert

        PERFORM pruefen_hknb1.
        IF xvorh IS INITIAL.
          PERFORM read_knb1.
          IF sy-subrc NE 0.
            xkausg = 'X'.
          ENDIF.
          MOVE-CORRESPONDING knb1 TO hknb1.
          APPEND hknb1.
        ENDIF.
        IF NOT hbseg-filkd IS INITIAL.
          save_kunnr = hbseg-filkd.
          PERFORM pruefen_hkna1.
          IF xvorh IS INITIAL.
            PERFORM read_kna1.
            IF sy-subrc NE 0.
              xkausg = 'X'.
            ENDIF.
            MOVE-CORRESPONDING kna1 TO hkna1.
            APPEND hkna1.
          ENDIF.
          PERFORM pruefen_hknb1.
          IF xvorh IS INITIAL.
            PERFORM read_knb1.
            IF sy-subrc NE 0.
              xkausg = 'X'.
            ENDIF.
            MOVE-CORRESPONDING knb1 TO hknb1.
            APPEND hknb1.
          ENDIF.
        ENDIF.
      ENDIF.
      IF save_koart = 'K'.
        save_lifnr = hbseg-lifnr.
        PERFORM pruefen_hlfa1.
        IF xvorh IS INITIAL.
          PERFORM read_lfa1.
          IF sy-subrc NE 0.
            xkausg = 'X'.
          ENDIF.
          MOVE-CORRESPONDING lfa1 TO hlfa1.
          APPEND hlfa1.
        ENDIF.
        PERFORM pruefen_hlfb1.
        IF xvorh IS INITIAL.
          PERFORM read_lfb1.
          IF sy-subrc NE 0.
            xkausg = 'X'.
          ENDIF.
          MOVE-CORRESPONDING lfb1 TO hlfb1.
          APPEND hlfb1.
        ENDIF.
        IF NOT hbseg-filkd IS INITIAL.
          save_lifnr = hbseg-filkd.
          PERFORM pruefen_hlfa1.
          IF xvorh IS INITIAL.
            PERFORM read_lfa1.
            IF sy-subrc NE 0.
              xkausg = 'X'.
            ENDIF.
            MOVE-CORRESPONDING lfa1 TO hlfa1.
            APPEND hlfa1.
          ENDIF.
          PERFORM pruefen_hlfb1.
          IF xvorh IS INITIAL.
            PERFORM read_lfb1.
            IF sy-subrc NE 0.
              xkausg = 'X'.
            ENDIF.
            MOVE-CORRESPONDING lfb1 TO hlfb1.
            APPEND hlfb1.
          ENDIF.
        ENDIF.
      ENDIF.
*     IF SAVE_KOART = 'S'.
*       SAVE_SAKNR = HBSEG-HKONT.
*       PERFORM PRUEFEN_HSKAT.
*       IF XVORH IS INITIAL.
*         PERFORM READ_SKAT.
*         MOVE-CORRESPONDING SKAT TO HSKAT.
*         APPEND HSKAT.
*       ENDIF.
*       IF HBSEG-SAKNR NE HBSEG-HKONT.
*         IF NOT HBSEG-SAKNR IS INITIAL.
*           SAVE_SAKNR = HBSEG-SAKNR.
*           PERFORM PRUEFEN_HSKAT.
*           IF XVORH IS INITIAL.
*             PERFORM READ_SKAT.
*             MOVE-CORRESPONDING SKAT TO HSKAT.
*             APPEND HSKAT.
*           ENDIF.
*         ENDIF.
*       ENDIF.
*     ENDIF.
    ENDLOOP.

    IF xkausg IS INITIAL.
      PERFORM ausgabe_interner_beleg.
    ENDIF.
  ELSE.
    CLEAR fimsg.
    fimsg-msort = '    '. fimsg-msgid = 'FB'. fimsg-msgty = 'I'.
    fimsg-msgno = '554'.
    fimsg-msgv1 = save_bukrs.
    fimsg-msgv2 = save_belnr.
    fimsg-msgv3 = save_gjahr.
    PERFORM message_append.
    xkausg = 'X'.
  ENDIF.

ENDFORM.                    "INTERNE_BELEGE_AUSGEBEN

*-----------------------------------------------------------------------
*       FORM SELECTION_OHNE_BKORM
*-----------------------------------------------------------------------
FORM selection_ohne_bkorm.
  SELECT * FROM bkpf
    WHERE bukrs IN rbukrs
    AND   belnr IN rbelnr
    AND   gjahr IN rgjahr.

    CLEAR save_bbukr.
    IF NOT t048-xbukr IS INITIAL.
      save_bbukr = bkpf-bukrs.
      CALL FUNCTION 'CORRESPONDENCE_GET_LEADING_CC'
        EXPORTING
          i_bukrs = bkpf-bukrs
        IMPORTING
          e_bukrs = save_bukrs.
    ELSE.
      save_bukrs = bkpf-bukrs.
    ENDIF.
    IF rindko IS INITIAL.
*     IF SAVE_SORT = '2'.
*       SORT1(16)   = HBKPF-XBLNR.
*       SORT1+16(4) = HBKPF-GJAHR.
*     ENDIF.
      PERFORM sortierung USING 'K' 'B' ' '.
      PERFORM extract_beleg.
    ELSE.
      CLEAR hhead.
      hhead-hdbukrs       = save_bukrs.
      hhead-hdkoart       = ' '.
      hhead-hdkonto       = '          '.
      hhead-hdbelgj(4)    = bkpf-gjahr.
      hhead-hdbelgj+4(10) = bkpf-belnr.
      hhead-hdusnam       = sy-uname.
      hhead-hddatum       = sy-datum.
      hhead-hduzeit       = sy-uzeit.
      hhead-dabelnr       = bkpf-belnr.
      hhead-dagjahr       = bkpf-gjahr.
      IF NOT t048-xbukr IS INITIAL.
        hhead-dabbukr = save_bbukr.
      ELSE.
        hhead-dabbukr = '    '.
      ENDIF.
*       IF SAVE_SORT = '2'.
*         HHEAD-SORT1(16)   = HBKPF-XBLNR.
*         HHEAD-SORT1+16(4) = HBKPF-GJAHR.
*       ENDIF.
      PERFORM sortierung USING 'K' 'B' ' '.
      hhead-sortk1 = sortk1.
      hhead-sortk2 = sortk2.
      hhead-sortk3 = sortk3.
      hhead-sortk4 = sortk4.
      hhead-sortk5 = sortk5.
      APPEND hhead.

      htexterf = 'X'.
    ENDIF.
  ENDSELECT.
  IF NOT htexterf IS INITIAL.
    SORT hhead.
    LOOP AT hhead.
      CLEAR   hfunktion.
      CLEAR   htdname.
      CLEAR   htdspras.
      CLEAR   htheader.
      CLEAR   htlines.
      REFRESH htlines.

      CALL FUNCTION 'CORRESPONDENCE_TEXT'
        EXPORTING
          i_bukrs        = hhead-hdbukrs
          i_event        = revent
          i_spras        = rspras
        IMPORTING
          e_function     = hfunktion
          e_tdname       = htdname
          e_tdspras      = htdspras
          e_thead        = htheader
        TABLES
          lines          = htlines
        EXCEPTIONS
          no_event_found = 02
          no_spras       = 06.

      CASE sy-subrc.
        WHEN 0.
          CASE hfunktion.
            WHEN ' '.
              MESSAGE e500 WITH revent.
            WHEN '1'.
*-------Headerfelder f¨¹r Extract ---------------------------------------
              hdbukrs = hhead-hdbukrs.
*             SORT1   = HHEAD-SORT1.
              hdkoart = hhead-hdkoart.
              hdkonto = hhead-hdkonto.
              hdbelgj = hhead-hdbelgj.
              hdusnam = hhead-hdusnam.
              hddatum = hhead-hddatum.
              hduzeit = hhead-hduzeit.
              sortk1  = hhead-sortk1.
              sortk2  = hhead-sortk2.
              sortk3  = hhead-sortk3.
              sortk4  = hhead-sortk4.
              sortk5  = hhead-sortk5.

*-------Datenfelder f¨¹r Extract-----------------------------------------
              extract(1)    = 'X'.
              dabelnr       = hhead-dabelnr.
              dagjahr       = hhead-dagjahr.
              dabbukr       = hhead-dabbukr.
              xbkorm        = ' '.

              CALL FUNCTION 'SAVE_TEXT'
                   EXPORTING
                        header          = htheader
*                       INSERT          = 'X'
                        savemode_direct = 'X'
                    IMPORTING
                        newheader       = htheader
                    TABLES
                        lines           = htlines.
*                   EXCEPTIONS
*                       ID              = 01
*                       LANGUAGE        = 02
*                       NAME            = 03
*                       OBJECT          = 04.

              CLEAR hthead.
              MOVE-CORRESPONDING htheader TO hthead.
              APPEND hthead.

              paramet+22(40) = htdname.
              paramet+62(1)  = htdspras.

              PERFORM extract.
            WHEN OTHERS.
              MESSAGE i807 WITH hhead-hdbukrs
                                hhead-dabelnr hhead-dagjahr.
          ENDCASE.
        WHEN 2.
          MESSAGE e806 WITH hhead-hdbukrs revent.
        WHEN 6.
          MESSAGE e511 WITH rspras.
      ENDCASE.
    ENDLOOP.
  ENDIF.
  CLEAR   hhead.
  REFRESH hhead.
ENDFORM.                    "SELECTION_OHNE_BKORM
*&---------------------------------------------------------------------*
*&      Form  get_smartform
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_smartform USING v_fname l_bukrs l_event.

  CLEAR v_fname.
  SELECT SINGLE fname INTO v_fname FROM yse_fi_smartform
             WHERE bukrs = l_bukrs
               AND programm = sy-cprog
               AND event    = l_event.

ENDFORM.                    " get_smartform
*&---------------------------------------------------------------------*
*&      Form  fill_bseg_or
*&---------------------------------------------------------------------*
*  get the othor original invoices
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM fill_bseg_or USING wa_fi_plcorinv STRUCTURE yse_fi_plcorinv.

  DATA: l_bukrs TYPE bukrs,
        l_gjahr TYPE gjahr,
        l_belnr TYPE belnr_d,
        it_fi_plcorinv TYPE STANDARD TABLE OF yse_fi_plcorinv.

*from latest original invoice
  APPEND wa_fi_plcorinv TO it_fi_plcorinv.


*  READ TABLE bseg_or INTO wa_bseg_or INDEX 1.

  CLEAR: l_bukrs, l_gjahr, l_belnr.
  l_bukrs    = wa_fi_plcorinv-bukrs.
  l_gjahr    = wa_fi_plcorinv-gjahr.
  l_belnr    = wa_fi_plcorinv-belnr.


  DO.
    CLEAR wa_fi_plcorinv.
    SELECT SINGLE * FROM yse_fi_plcorinv INTO wa_fi_plcorinv
      WHERE bukrs   = l_bukrs
        AND coryear = l_gjahr
        AND corinv  = l_belnr.
    IF sy-subrc = 0.
      l_bukrs    = wa_fi_plcorinv-bukrs.
      l_gjahr    = wa_fi_plcorinv-gjahr.
      l_belnr    = wa_fi_plcorinv-belnr.
      APPEND wa_fi_plcorinv TO it_fi_plcorinv.
      CLEAR wa_fi_plcorinv.
    ELSE.
      EXIT.
    ENDIF.
  ENDDO.


  CLEAR wa_bseg_or.
  SELECT * FROM bseg INTO TABLE it_bseg_or
           FOR ALL ENTRIES IN it_fi_plcorinv
           WHERE belnr = it_fi_plcorinv-belnr
             AND gjahr = it_fi_plcorinv-gjahr
             AND bukrs = it_fi_plcorinv-bukrs
             AND koart <> 'D'
             AND buzid = ' '.

ENDFORM.                    " fill_bseg_or
*&---------------------------------------------------------------------*
*&      Form  set_copy_or_original_flag
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_copy_or_original_flag .

  DATA: l_belnr TYPE belnr_d.

  CLEAR ls_repeat.

  SELECT SINGLE belnr INTO l_belnr FROM  yse_fi_invoices
         WHERE  bukrs  = bkpf-bukrs
         AND    gjahr  = bkpf-gjahr
         AND    belnr  = bkpf-belnr.

  IF sy-subrc = 0.
    ls_repeat = 'X'.
  ENDIF.

ENDFORM.                    " set_copy_or_original_flag
*&---------------------------------------------------------------------*
*&      Form  update_repeat_table
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM update_repeat_table .

  DATA: wa_fi_invoices TYPE yse_fi_invoices.

  CLEAR wa_fi_invoices.
  wa_fi_invoices-bukrs = bkpf-bukrs.
  wa_fi_invoices-gjahr = bkpf-gjahr.
  wa_fi_invoices-belnr = bkpf-belnr.
  INSERT yse_fi_invoices FROM wa_fi_invoices.
  COMMIT WORK.

ENDFORM.                    " update_repeat_table
*&---------------------------------------------------------------------*
*&      Form  get_printer_parameters
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_printer_parameters .

  DATA:
*"             VALUE(ARCHIVE_INDEX) TYPE  TOA_DARA OPTIONAL
*"             VALUE(ARCHIVE_INDEX_TAB) TYPE  TSFDARA OPTIONAL
  archive_parameters TYPE  arc_params,
*control_parameters TYPE  ssfctrlop,
  mail_appl_obj TYPE  swotobjid,
  mail_recipient TYPE  swotobjid,
  mail_sender TYPE  swotobjid,
*output_options TYPE  ssfcompop,
  user_settings TYPE  tdbool,
  %result_op TYPE ssfcresop,
  %variant TYPE tdvariant,
  job_output_options TYPE  ssfcresop,
  %input     TYPE ssfcompin.

  user_settings =  'X'.

  if  revent = 'ZAP09'.
    archive_parameters-sap_object = 'BKPF'.
    archive_parameters-ar_object = 'ZFIOINVOIC'.
  endif.

  CALL FUNCTION 'SSF_CREATE_COMPOSER_INPUT'
    EXPORTING
      archive_parameters = archive_parameters
      user_settings      = user_settings
      mail_sender        = mail_sender
      mail_recipient     = mail_recipient
      mail_appl_obj      = mail_appl_obj
      output_options     = output_options
      control_parameters = control_parameters
    IMPORTING
      input              = %input.

  IF output_options-xsfcmode = space.
    %input-xsf        = ' '.
    %input-xsfoutmode = ' '.
    %input-xsfoutdev  = ' '.
    %input-xsfaction  = ' '.
    %input-xsfformat  = ' '.
  ENDIF.
  CALL FUNCTION 'SSFCOMP_OPEN'
    EXPORTING
      input  = %input
    IMPORTING
      RESULT = %result_op
    EXCEPTIONS
      OTHERS = 1.
  IF sy-subrc <> 0.
    %variant = space.
*  PERFORM %raise.
  ENDIF.
  job_output_options = %result_op.

  MOVE-CORRESPONDING %result_op TO output_options.

  control_parameters-device = 'PRINTER'.
  control_parameters-no_dialog = 'X'.
  output_options-tddest = %result_op-tddest.
  control_parameters-preview = %result_op-tdpreview.
  control_parameters-no_open = 'X'.

ENDFORM.                    " get_printer_parameters

*Text symbol text£º
*110:Output to printer
*111:Print Immediately
*200:Log
*201:Overview of generated output requests
*202:CC Correspondence                             Spool No./Fax ID Title/Fax No.                       .. Output Pages..
*203:Name is Missing in Logon Language
*204:Internal Document

*205:Error list
*Selection text£º
*DANZZL:        Number of Lines in Address
*DSPRAS:        Print in logon language
*PRDEST:        Log to printer
*RBELNR:        Document number
*RBLART:        Document Type
*RBUKRS:        Company code
*RDATUM:        Date of request
*RERLDT:        Repeat printing from
*REVENT:        Correspondence
*RFORID:        Form set
*RGJAHR:        Fiscal year
*RINDKO:        Individual correspondence
*RSPRAS:        Language key
*RUNAME:        Entered By
*RUSNAM:        User
*RUZEIT:        Time of request
*RXBKOR:        Data from trigger table
*SORTKZ:        Sorting of Output
*SORTVK:        Sort Var. for Internal Docs
*TDDEST:        Output to printer
*TITLE:        Additional header
