*----------------------------------------------------------------------*
***INCLUDE YSE_RU_FI_INVOICE_F01 .
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  initialization
*&---------------------------------------------------------------------*
*       Perform the necessary initialization actions
*----------------------------------------------------------------------*
FORM initialization .

*.. Local variables
  DATA: ls_log    TYPE bal_s_log.

  ls_log-object = 'YSE_RU_FI_INVOICE'.

*.. Create application log
  CALL FUNCTION 'BAL_LOG_CREATE'
    EXPORTING
      i_s_log                 = ls_log
    IMPORTING
      e_log_handle            = gv_handle
    EXCEPTIONS
      log_header_inconsistent = 1
      OTHERS                  = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " initialization

*eject
*&---------------------------------------------------------------------*
*&      Form  select_equipments
*&---------------------------------------------------------------------*
*       Select the relevant equipment information
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM select_BSID.

data: lv_sav_belnr TYPE BELNR.

clear gt_bsid_tmp[].
clear gt_bsid_tmp2[].
  SELECT belnr vbeln gjahr xref2 bldat zuonr
        INTO CORRESPONDING FIELDS OF TABLE gt_bsid_tmp
   FROM bsid
   WHERE BLART EQ 'RU'
     AND UMSKZ EQ 'A'
     AND BUKRS EQ 'MRUA'
     AND BUDAT in S_BUDAT.
SORT gt_bsid_tmp by belnr xref2 zuonr bldat vbeln.
DELETE ADJACENT DUPLICATES FROM gt_bsid_tmp COMPARING belnr.

  SELECT belnr sum( dmbtr ) FROM bsid
        INTO TABLE gt_bsid_tmp2
   WHERE BLART EQ 'RU'
     AND UMSKZ EQ 'A'
     AND BUKRS EQ 'MRUA'
     AND BUDAT in S_BUDAT
  GROUP BY belnr.

  loop at gt_bsid_tmp.
  loop at gt_bsid_tmp2
    where belnr = gt_bsid_tmp-belnr.
    gt_bsid_tmp-dmbtr = gt_bsid_tmp2-dmbtr.
    MODIFY gt_bsid_tmp transporting dmbtr.
  endloop.
  endloop.

SORT gt_bsid_tmp by bldat.

  if p_rub = 'X'.

    loop at gt_bsid_tmp.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = gt_bsid_tmp-xref2
          IMPORTING
            OUTPUT = gt_bsid_tmp-xref2.
      gt_bsid_tmp-xref2 =  gt_bsid_tmp-xref2+2(10).

      clear gt_bsid.
      clear lv_waerk.
      clear lv_xblnr.
      select  single waerk xblnr from vbak into (lv_waerk, lv_xblnr)
        where vbeln = gt_bsid_tmp-xref2
             and waerk = 'RUB'.

      if sy-subrc eq 0.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = gt_bsid_tmp-xref2
          IMPORTING
            OUTPUT = gt_bsid_tmp-xref2.

        select single printed from yse_printno into gt_bsid-printed
          where xref2 = gt_bsid_tmp-xref2 and belnr = gt_bsid_tmp-belnr.
        move-corresponding gt_bsid_tmp to gt_bsid.
        gt_bsid-waerk = lv_waerk.
        gt_bsid-xblnr = lv_xblnr.
        append gt_bsid.
      else.
        if gt_bsid_tmp-xref2 is initial.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = gt_bsid_tmp-xref2
            IMPORTING
              OUTPUT = gt_bsid_tmp-xref2.
          gt_bsid-printed = 0.
          gt_bsid-msg = text-A01.
          move-corresponding gt_bsid_tmp to gt_bsid.
          append gt_bsid.
        endif.
      endif.
    endloop.

  else. " foreign currency
    loop at gt_bsid_tmp.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = gt_bsid_tmp-xref2
          IMPORTING
            OUTPUT = gt_bsid_tmp-xref2.
      gt_bsid_tmp-xref2 =  gt_bsid_tmp-xref2+2(10).

      clear gt_bsid.
      clear lv_waerk.
      clear lv_xblnr.
      select  single waerk xblnr from vbak into (lv_waerk, lv_xblnr)
        where vbeln = gt_bsid_tmp-xref2
             and waerk <> 'RUB'.

      if sy-subrc eq 0.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = gt_bsid_tmp-xref2
          IMPORTING
            OUTPUT = gt_bsid_tmp-xref2.
        select single printed from yse_printno into gt_bsid-printed
          where xref2 = gt_bsid_tmp-xref2 and belnr = gt_bsid_tmp-belnr.
        move-corresponding gt_bsid_tmp to gt_bsid.
        gt_bsid-waerk = lv_waerk.
        gt_bsid-xblnr = lv_xblnr.
        append gt_bsid.
      else.
        if gt_bsid_tmp-xref2 is initial.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = gt_bsid_tmp-xref2
            IMPORTING
              OUTPUT = gt_bsid_tmp-xref2.
          gt_bsid-printed = 0.
          gt_bsid-msg = text-A01.
          move-corresponding gt_bsid_tmp to gt_bsid.
          append gt_bsid.
        endif.
      endif.
    endloop.
  endif.

* Add additional fields to internal table
  LOOP AT gt_bsid.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = gt_bsid-xref2
      IMPORTING
        OUTPUT = gt_bsid-xref2.

    MODIFY gt_bsid.
  ENDLOOP.
ENDFORM.                    " select_equipments

*eject
*&---------------------------------------------------------------------*
*&      Form  output_list_bsid
*&---------------------------------------------------------------------*
*       Output the equipment list
*----------------------------------------------------------------------*
FORM output_list_bsid.

*.. Local variables
  DATA: ls_layout TYPE slis_layout_alv,
        ls_grid   TYPE lvc_s_glay,
        ls_events TYPE slis_alv_event.

  DATA: lt_events TYPE slis_t_event,
        lt_event_exits TYPE slis_t_event_exit,
        lt_fieldcat TYPE slis_t_fieldcat_alv.

*.. Fill events
  REFRESH lt_events.
  if P_FOR = 'X'.
    ls_events-name = 'USER_COMMAND'.
    ls_events-form = 'USER_COMMAND_FOR'.
  else.
    ls_events-name = 'USER_COMMAND'.
    ls_events-form = 'USER_COMMAND_RUB'.
  endif.
  APPEND ls_events TO lt_events.
  if P_FOR = 'X'.
    ls_events-name = 'PF_STATUS_SET'.
    ls_events-form = 'PF_STATUS_SET_FOR'.
  else.
    ls_events-name = 'PF_STATUS_SET'.
    ls_events-form = 'PF_STATUS_SET_RUB'.
  endif.
  APPEND ls_events TO lt_events.
  ls_events-name = 'TOP_OF_PAGE'.
  ls_events-form = 'TOP_OF_PAGE_BSID'.
  APPEND ls_events TO lt_events.
  ls_events-form = ls_events-name = 'END_OF_LIST'.
  APPEND ls_events TO lt_events.

*.. Define layout
  CLEAR ls_layout.
  ls_layout-box_fieldname        = 'SELECTED'.  "field for checkbox
  ls_layout-get_selinfos         = g_x. "show selection screen
  ls_layout-detail_popup         = g_x. "show detail via popup
  ls_layout-detail_initial_lines = g_x. "all fields in detail
  ls_layout-zebra                = g_x. "striped pattern
  ls_layout-info_fieldname       = 'COLOR'.

*.. Define grid settings
* ls_grid-coll_end_l = gc_charx.

*.. Prepare field catalog
  DATA : ls_fcat TYPE slis_fieldcat_alv,
         ls_sort TYPE slis_sortinfo_alv.
**---------------------------downpayment Doc----------------------------*
  ls_fcat-fieldname = 'ZUONR'.
  ls_fcat-seltext_l = 'Downpayment Doc'.
  ls_fcat-col_pos  = 3.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '20'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Quotation Doc----------------------------*
  ls_fcat-fieldname = 'XBLNR'.
  ls_fcat-seltext_l = 'Quotation Doc'.
  ls_fcat-col_pos  = 4.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '20'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Total Amount of Doc----------------------------*
  ls_fcat-fieldname = 'DMBTR'.
  ls_fcat-seltext_l = 'Total Amount of Doc'.
  ls_fcat-col_pos  = 5.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '30'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.

**---------------------------printed----------------------------*
  ls_fcat-fieldname = 'PRINTED'.
  ls_fcat-seltext_l = ls_fcat-seltext_m = ls_fcat-seltext_s = 'Printed'.
  ls_fcat-col_pos  = 7.
  ls_fcat-inttype = 'N'.
  ls_fcat-outputlen = '3'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------message-------------------------------*
  ls_fcat-fieldname = 'MSG'.
  ls_fcat-seltext_l = ls_fcat-seltext_m = ls_fcat-seltext_s = 'Message'.
  ls_fcat-col_pos  = 8.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '25'.
  ls_sort-spos = 1.
  ls_sort-fieldname = ls_fcat-fieldname.
  ls_sort-up = 'X'.
  APPEND ls_sort TO gt_sort.
*  ls_fcat-seltext_l = 'Document No'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat,
         ls_sort.

  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'YSE_INV_RU'
      i_client_never_display = 'X'
    CHANGING
      ct_fieldcat            = lt_fieldcat
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*.. Call ALV grid output
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program = 'YSE_RU_FI_INVOICE'
      i_structure_name   = 'YSE_INV_RU'
*      i_grid_settings    = ls_grid
      is_layout          = ls_layout
      i_save             = 'A'
      it_fieldcat        = lt_fieldcat
      it_events          = lt_events
      it_sort            = gt_sort
    TABLES
      t_outtab           = gt_bsid
    EXCEPTIONS
      program_error      = 1
      OTHERS             = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " output_list_bsid

*eject
*&---------------------------------------------------------------------*
*&      Form  add_message_to_log
*&---------------------------------------------------------------------*
*       Add a generated message to the application log
*----------------------------------------------------------------------*
FORM add_message_to_log .

*.. Local variables
  DATA: ls_msg TYPE bal_s_msg.

  MOVE-CORRESPONDING syst TO ls_msg.
  CALL FUNCTION 'BAL_LOG_MSG_ADD'
    EXPORTING
*     I_LOG_HANDLE              =
      i_s_msg                   = ls_msg
*   IMPORTING
*     E_S_MSG_HANDLE            =
*     E_MSG_WAS_LOGGED          =
*     E_MSG_WAS_DISPLAYED       =
    EXCEPTIONS
      log_not_found             = 1
      msg_inconsistent          = 2
      log_is_full               = 3
      OTHERS                    = 4
            .
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*.. Flag log as having entries
  IF gv_log IS INITIAL.
    gv_log = gc_charx.
  ENDIF.

ENDFORM.                    " add_message_to_log


FORM select_BSAD.

data: lv_sav_belnr TYPE BELNR.

clear gt_BSAD_tmp[].
clear gt_BSAD_tmp2[].
  SELECT belnr vbeln xref2 gjahr bldat zuonr
        INTO CORRESPONDING FIELDS OF TABLE gt_BSAD_tmp
   FROM BSAD
   WHERE BLART EQ 'RU'
     AND UMSKZ EQ 'A'
     AND BUKRS EQ 'MRUA'
     AND BUDAT in S_BUDAT.
SORT gt_BSAD_tmp by belnr xref2 zuonr bldat vbeln.
DELETE ADJACENT DUPLICATES FROM gt_BSAD_tmp COMPARING belnr.

  SELECT belnr sum( dmbtr ) FROM BSAD
        INTO TABLE gt_BSAD_tmp2
   WHERE BLART EQ 'RU'
     AND UMSKZ EQ 'A'
     AND BUKRS EQ 'MRUA'
     AND BUDAT in S_BUDAT
  GROUP BY belnr.

  loop at gt_BSAD_tmp.
  loop at gt_BSAD_tmp2
    where belnr = gt_BSAD_tmp-belnr.
    gt_BSAD_tmp-dmbtr = gt_BSAD_tmp2-dmbtr.
    MODIFY gt_BSAD_tmp transporting dmbtr.
  endloop.
  endloop.

SORT gt_BSAD_tmp by bldat.

  if p_rub = 'X'.

    loop at gt_BSAD_tmp.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = gt_BSAD_tmp-xref2
          IMPORTING
            OUTPUT = gt_BSAD_tmp-xref2.
      gt_BSAD_tmp-xref2 =  gt_BSAD_tmp-xref2+2(10).

      clear gt_BSAD.
      clear lv_waerk.
      clear lv_xblnr.
      select  single waerk xblnr from vbak into (lv_waerk, lv_xblnr)
        where vbeln = gt_BSAD_tmp-xref2
             and waerk = 'RUB'.

      if sy-subrc eq 0.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = gt_BSAD_tmp-xref2
          IMPORTING
            OUTPUT = gt_BSAD_tmp-xref2.

        select single printed from yse_printno into gt_BSAD-printed
          where xref2 = gt_BSAD_tmp-xref2 and belnr = gt_BSAD_tmp-belnr.
        move-corresponding gt_BSAD_tmp to gt_BSAD.
        gt_BSAD-waerk = lv_waerk.
        gt_BSAD-xblnr = lv_xblnr.
        append gt_BSAD.
      else.
        if gt_BSAD_tmp-xref2 is initial.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = gt_BSAD_tmp-xref2
            IMPORTING
              OUTPUT = gt_BSAD_tmp-xref2.
          gt_BSAD-printed = 0.
          gt_BSAD-msg = text-A01.
          move-corresponding gt_BSAD_tmp to gt_BSAD.
          append gt_BSAD.
        endif.
      endif.
    endloop.

  else. " foreign currency
    loop at gt_BSAD_tmp.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = gt_BSAD_tmp-xref2
          IMPORTING
            OUTPUT = gt_BSAD_tmp-xref2.
      gt_BSAD_tmp-xref2 =  gt_BSAD_tmp-xref2+2(10).

      clear gt_BSAD.
      clear lv_waerk.
      clear lv_xblnr.
      select  single waerk xblnr from vbak into (lv_waerk, lv_xblnr)
        where vbeln = gt_BSAD_tmp-xref2
             and waerk <> 'RUB'.

      if sy-subrc eq 0.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = gt_BSAD_tmp-xref2
          IMPORTING
            OUTPUT = gt_BSAD_tmp-xref2.
        select single printed from yse_printno into gt_BSAD-printed
          where xref2 = gt_BSAD_tmp-xref2 and belnr = gt_BSAD_tmp-belnr.
        move-corresponding gt_BSAD_tmp to gt_BSAD.
        gt_BSAD-waerk = lv_waerk.
        gt_BSAD-xblnr = lv_xblnr.
        append gt_BSAD.
      else.
        if gt_BSAD_tmp-xref2 is initial.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = gt_BSAD_tmp-xref2
            IMPORTING
              OUTPUT = gt_BSAD_tmp-xref2.
          gt_BSAD-printed = 0.
          gt_BSAD-msg = text-A01.
          move-corresponding gt_BSAD_tmp to gt_BSAD.
          append gt_BSAD.
        endif.
      endif.
    endloop.
  endif.

* Add additional fields to internal table
  LOOP AT gt_BSAD.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = gt_BSAD-xref2
      IMPORTING
        OUTPUT = gt_BSAD-xref2.

    MODIFY gt_BSAD.
  ENDLOOP.
ENDFORM.                    " select_equipments

*eject
*&---------------------------------------------------------------------*
*&      Form  output_list_BSAD
*&---------------------------------------------------------------------*
*       Output the equipment list
*----------------------------------------------------------------------*
FORM output_list_BSAD.

*.. Local variables
  DATA: ls_layout TYPE slis_layout_alv,
        ls_grid   TYPE lvc_s_glay,
        ls_events TYPE slis_alv_event.

  DATA: lt_events TYPE slis_t_event,
        lt_event_exits TYPE slis_t_event_exit,
        lt_fieldcat TYPE slis_t_fieldcat_alv.

*.. Fill events
  REFRESH lt_events.
  if P_FOR = 'X'.
    ls_events-name = 'USER_COMMAND'.
    ls_events-form = 'USER_COMMAND_FOR'.
  else.
    ls_events-name = 'USER_COMMAND'.
    ls_events-form = 'USER_COMMAND_RUB'.
  endif.
  APPEND ls_events TO lt_events.
  if P_FOR = 'X'.
    ls_events-name = 'PF_STATUS_SET'.
    ls_events-form = 'PF_STATUS_SET_FOR'.
  else.
    ls_events-name = 'PF_STATUS_SET'.
    ls_events-form = 'PF_STATUS_SET_RUB'.
  endif.
  APPEND ls_events TO lt_events.
  ls_events-name = 'TOP_OF_PAGE'.
  ls_events-form = 'TOP_OF_PAGE_BSAD'.
  APPEND ls_events TO lt_events.
  ls_events-form = ls_events-name = 'END_OF_LIST'.
  APPEND ls_events TO lt_events.

*.. Define layout
  CLEAR ls_layout.
  ls_layout-box_fieldname        = 'SELECTED'.  "field for checkbox
  ls_layout-get_selinfos         = g_x. "show selection screen
  ls_layout-detail_popup         = g_x. "show detail via popup
  ls_layout-detail_initial_lines = g_x. "all fields in detail
  ls_layout-zebra                = g_x. "striped pattern
  ls_layout-info_fieldname       = 'COLOR'.

*.. Define grid settings
* ls_grid-coll_end_l = gc_charx.

*.. Prepare field catalog
  DATA : ls_fcat TYPE slis_fieldcat_alv,
         ls_sort TYPE slis_sortinfo_alv.
**---------------------------downpayment Doc----------------------------*
  ls_fcat-fieldname = 'ZUONR'.
  ls_fcat-seltext_l = 'Downpayment Doc'.
  ls_fcat-col_pos  = 3.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '20'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Quotation Doc----------------------------*
  ls_fcat-fieldname = 'XBLNR'.
  ls_fcat-seltext_l = 'Quotation Doc'.
  ls_fcat-col_pos  = 4.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '20'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Total Amount of Doc----------------------------*
  ls_fcat-fieldname = 'DMBTR'.
  ls_fcat-seltext_l = 'Total Amount of Doc'.
  ls_fcat-col_pos  = 5.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '30'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.

**---------------------------printed----------------------------*
  ls_fcat-fieldname = 'PRINTED'.
  ls_fcat-seltext_l = ls_fcat-seltext_m = ls_fcat-seltext_s = 'Printed'.
  ls_fcat-col_pos  = 7.
  ls_fcat-inttype = 'N'.
  ls_fcat-outputlen = '3'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------message-------------------------------*
  ls_fcat-fieldname = 'MSG'.
  ls_fcat-seltext_l = ls_fcat-seltext_m = ls_fcat-seltext_s = 'Message'.
  ls_fcat-col_pos  = 8.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '25'.
  ls_sort-spos = 1.
  ls_sort-fieldname = ls_fcat-fieldname.
  ls_sort-up = 'X'.
  APPEND ls_sort TO gt_sort.
*  ls_fcat-seltext_l = 'Document No'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat,
         ls_sort.

  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'YSE_INV_RU'
      i_client_never_display = 'X'
    CHANGING
      ct_fieldcat            = lt_fieldcat
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*.. Call ALV grid output
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program = 'YSE_RU_FI_INVOICE'
      i_structure_name   = 'YSE_INV_RU'
*      i_grid_settings    = ls_grid
      is_layout          = ls_layout
      i_save             = 'A'
      it_fieldcat        = lt_fieldcat
      it_events          = lt_events
      it_sort            = gt_sort
    TABLES
      t_outtab           = gt_BSAD
    EXCEPTIONS
      program_error      = 1
      OTHERS             = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " output_list_BSAD
