REPORT yse_rvador01_sf LINE-COUNT 100 MESSAGE-ID vn.

TABLES: vbdka,                         "Headerview
        vbdpa,                         "Itemview
        nast.

TYPES: BEGIN OF t_change,
         banfn LIKE vbep-banfn,
         bnfpo LIKE vbep-bnfpo,
         mbdat LIKE vbep-mbdat,
         vbeln LIKE vbep-vbeln.
TYPES: END OF t_change.

DATA: wa_change TYPE t_change.
DATA: wa_items  LIKE bapieban.
DATA: wa_it     LIKE bapiebanv.

DATA: i_change  TYPE STANDARD TABLE OF t_change.
DATA: i_items   LIKE STANDARD TABLE OF bapieban.
DATA: i_it_old  LIKE STANDARD TABLE OF bapiebanv.
DATA: i_it_new  LIKE STANDARD TABLE OF bapiebanv.
DATA: i_ret     LIKE STANDARD TABLE OF bapireturn.

** - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DATA: retcode   LIKE sy-subrc.         "Returncode
DATA: xscreen(1) TYPE c.               "Output on printer or screen


*&---------------------------------------------------------------------*
*&      Form  ENTRY
*&---------------------------------------------------------------------*
FORM entry USING return_code TYPE i
                 us_screen TYPE c.
  DATA: lf_retcode TYPE sy-subrc.

* Ordernumber -> NAST-OBJKY
* Since urgent transport of other issue is required, temporarily disabled this functionality
  EXIT.

  CLEAR retcode.
  xscreen = us_screen.
  PERFORM processing_sf  USING us_screen
                      CHANGING lf_retcode.
  IF retcode NE 0.
    return_code = 1.
  ELSE.
    return_code = 0.
  ENDIF.

ENDFORM.                    "ENTRY


*&---------------------------------------------------------------------*
*&      Form  processing_sf
*&---------------------------------------------------------------------*
FORM processing_sf USING proc_screen
                   CHANGING cf_retcode.

  DATA: v_go_on,
        v_change.
  DATA: v_reqnr   LIKE bapieban-preq_no.
  DATA: v_tabix   LIKE sy-tabix.
  DATA: v_vbeln   LIKE vbep-vbeln.

  CLEAR:   wa_change, v_vbeln.
  REFRESH: i_change.

  v_vbeln = nast-objky.

** Schedule lines with material available date -> Link with SO
  SELECT  banfn bnfpo mbdat vbeln
      FROM vbep
      INTO TABLE i_change
      WHERE vbeln = v_vbeln
       AND  etenr = '0001'.

  DELETE i_change WHERE banfn IS INITIAL.
  SORT i_change.

  LOOP AT i_change INTO wa_change.
    AT NEW banfn.
      CLEAR v_go_on.
      CLEAR v_change.
      v_reqnr = wa_change-banfn.

      REFRESH: i_items, i_ret, i_it_new, i_ret.

      CALL FUNCTION 'BAPI_REQUISITION_GETDETAIL'
        EXPORTING
          number            = v_reqnr
        TABLES
          requisition_items = i_items
          return            = i_ret.

      READ TABLE i_ret WITH KEY type = 'E' TRANSPORTING NO FIELDS .
      IF sy-subrc EQ 0.
**> Error log table? None of the lines with this PReq number need to be processed
*      wa_log-banfn = wa_change-banfn.
*      APPEND wa_log TO i_error.
*      CLEAR wa_log.
        CONTINUE.
      ELSE.
        v_go_on = 'X'.
      ENDIF.

      REFRESH: i_ret.
      LOOP AT i_items INTO wa_items.
        MOVE-CORRESPONDING wa_items TO wa_it.
        APPEND wa_it TO i_it_old[].
        APPEND wa_it TO i_it_new[].
        CLEAR wa_it.
      ENDLOOP.
    ENDAT.

    IF v_go_on = 'X'.
      READ TABLE i_it_new INTO wa_it WITH KEY preq_item = wa_change-bnfpo.
      IF sy-subrc EQ 0.
        v_tabix = sy-tabix.
        IF wa_it-deliv_date NE wa_change-mbdat.
          wa_it-deliv_date = wa_change-mbdat.
          MODIFY i_it_new FROM wa_it INDEX v_tabix TRANSPORTING deliv_date.
          v_change = 'X'.
        ENDIF.
      ENDIF.

      AT END OF banfn.
        IF v_change = 'X'.

*        IF p_test IS INITIAL.
          CALL FUNCTION 'BAPI_REQUISITION_CHANGE'
            EXPORTING
              number                = v_reqnr
            TABLES
              requisition_items_old = i_it_old
              requisition_items_new = i_it_new
              return                = i_ret.
          READ TABLE i_ret WITH KEY type = 'E' TRANSPORTING NO FIELDS .
          IF sy-subrc EQ 0.
**> Errorlog table
*            wa_log-banfn = wa_change-banfn.
*            APPEND wa_log TO i_error.
*            CLEAR wa_log.
*        EXIT.
          ELSE.
*            wa_log-banfn = wa_change-banfn.
*            APPEND wa_log TO i_log.
*            CLEAR wa_log.
          ENDIF.
        ELSE.
*          wa_log-banfn = wa_change-banfn.
*          APPEND wa_log TO i_log.
*          CLEAR wa_log.
*        ENDIF.
        ENDIF.
      ENDAT.
    ENDIF.
  ENDLOOP.

  cf_retcode = 0.


ENDFORM.                    " processing_sf

*Selection text£º
*XSCREEN:        Output on screen (x=yes)
