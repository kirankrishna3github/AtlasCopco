*&---------------------------------------------------------------------*
*&  Include           YSE_INST_BASE_REPORTS_F01                        *
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  SET_ICON
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_ADRFL  text
*      -->P_AD_ICON  text
*      -->P_TEXT_AD0  text
*      -->P_TEXT_AD1  text
*----------------------------------------------------------------------*
form set_icon  using    p_actfl    type flag
                            p_icon     type c
                            p_text_off type c
                            p_text_on  type c.
  if p_actfl eq 'X'.
    call function 'ICON_CREATE'
      exporting
        name   = 'ICON_CHECKED'
        info   = p_text_on
      importing
        result = p_icon
      exceptions
        others = 1.
  else.
    call function 'ICON_CREATE'
      exporting
        name   = 'ICON_INCOMPLETE'
        info   = p_text_off
      importing
        result = p_icon
      exceptions
        others = 1.
  endif.




endform.                    " SET_ICON
*&---------------------------------------------------------------------*
*&      Form  ADRESS_SEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
form adress_sel .
  data: lt_selopt_old like gt_selopt_tab,    "local sel opt table to store old values
        lv_lines type i.
*If you have used address select options, but this resulted in no entries, the system will empty the
*search help screen which isn't handy if you want to check which values you used that resulted in no entries.
*Therefore check the memory if the gt_selopt_tab is initial. If any address select options were entered, these will
*also be stored in the memory
  if gt_selopt_tab[] is initial.
    import gt_selopt_tab from memory id 'ZGT_SELOPT_TAB'.
    if p_adrfl is initial.  "If the icon field is empty but gt_selopt_tab isn't, these are old values taken from the memory
      "eg execute report, exit and execute again. This would result in old address select options in the memory
      "in this case delete old entries and clear memory
      clear lv_lines.
      describe table gt_selopt_tab lines lv_lines.
      if not lv_lines is initial.
        clear gt_selopt_tab[].
        free memory id 'ZGT_SELOPT_TAB'.
      endif.
    endif.
  endif.

  clear gs_shlp.
  call function 'F4_SELECT_SEARCH_HELP'
    exporting
      shlpname_in    = c_shlpname
    importing
      shlp_out       = gs_shlp
    exceptions
      invalid_hotkey = 1
      internal_error = 2
      others         = 3.

  if sy-subrc ne 0.
* error handling
  endif.
  lt_selopt_old = gt_selopt_tab.    "Fill old values sel opt, this to prevent loss of data when cancel or close button of search help is used

  clear gt_selopt_tab.
  call function 'F4_ENTER_SELECTIONS_LIGHT'
    exporting
      shlp              = gs_shlp
    tables
      selopt_tab        = gt_selopt_tab
    exceptions
      invalid_arguments = 1
      internal_error    = 2
      others            = 3.
  if sy-subrc ne 0.
* error handling
  endif.
  case sy-ucomm.
    when 'GOON'.    "When continue was choosen in the search help, gt_selopt_tab contains the new, good values
      export gt_selopt_tab[] to memory id 'ZGT_SELOPT_TAB'.    "These new values also have to be exported to the memory, explenation above
    when others.    "When cancel or close is choosen, we have to place the values from before the search help into gt_selopt_tab
      gt_selopt_tab = lt_selopt_old.
  endcase.

*If no address sel options have been selected, clear flag, else set flag
  clear lv_lines.
  describe table gt_selopt_tab lines lv_lines.
  if lv_lines is initial.
    p_adrfl = '-'.
  else.
    p_adrfl = 'X'.
  endif.
endform.                    " ADRESS_SEL
*&---------------------------------------------------------------------*
*&  Form  select_equi_by_address
*&---------------------------------------------------------------------*
*   This form will select the euquipments by address selection criteria
*
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
form select_equi_by_address tables p_lt_equnr_addr.
*Int table with fields to select with function module and address select options
  data lt_fields like ddshoutfld occurs 0 with header line.
  lt_fields-fieldname = 'EQUNR'.
  append lt_fields.
*Internal table for returning euqnrs from function module with address select options
  data: lt_equnr_tab type standard table of ty_equnr.
*If search help structure is initial, fill it.
  if gs_shlp is initial.
    call function 'F4_SELECT_SEARCH_HELP'
      exporting
        shlpname_in    = c_shlpname
      importing
        shlp_out       = gs_shlp
      exceptions
        invalid_hotkey = 1
        internal_error = 2
        others         = 3.
  endif.
  if gt_selopt_tab is initial.
    import gt_selopt_tab from memory id 'ZGT_SELOPT_TAB'.
  endif.
*Function module that will select the euqnrs by using the address select options entered in the
*address search help
  call function 'F4_SELECT_FROM_SEARCH_HELP'
    exporting
      shlp                 = gs_shlp
    tables
      selopt_tab           = gt_selopt_tab
      fields               = lt_fields
      values               = lt_equnr_tab
    exceptions
      invalid_shlpname     = 1
      invalid_values_table = 2
      internal_error       = 3
      others               = 4.

  if sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  else.  "If no error, fill returning parameter
    p_lt_equnr_addr[] = lt_equnr_tab[].
  endif.
endform.                    " select_equi_by_address
*&---------------------------------------------------------------------*
*&      Form  select_equi_by_partner
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_EQUNR  text
*----------------------------------------------------------------------*
form select_equi_by_partner  tables   p_lt_equnr.

  ranges lr_obtyp for ihpa-obtyp.

  data: lt_objnr type table of j_objnr.

  data: begin of ls_ionra.
          include structure ionra.
  data: end of ls_ionra.

  ranges: lr_equnr for equi-equnr.

  field-symbols: <fs_objnr> type j_objnr.

*Partner object types for equipment and serial number*
  lr_obtyp-sign   = 'I'.
  lr_obtyp-option = 'EQ'.
  lr_obtyp-low    = 'IEQ'.
  append lr_obtyp.
  lr_obtyp-low    = 'ISE'.
  append lr_obtyp.

*Select the object nr(s) from the plant maintenance partners table for the entered partner
  select objnr from ihpa into table lt_objnr
                     where parnr = p_parnr
                     and   parvw = p_parvw
                     and   obtyp in lr_obtyp
                     and kzloesch = ' '.

*Loop over the found object numbers and get the equipment number
  loop at lt_objnr assigning <fs_objnr>.
*Get the equipment number with the object number
    call function 'OBJECT_KEY_GET'
      exporting
        i_objnr = <fs_objnr>
      importing
        e_ionra = ls_ionra
      exceptions
        others  = 1.
    if sy-subrc is initial.
      append ls_ionra-equnr to p_lt_equnr.
    endif.

  endloop.
endform.                    " select_equi_by_partner
*&---------------------------------------------------------------------*
*&      Form  check_partner
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
form check_partner .
  data: l_parnr like p_parnr,
        l_parvw like p_parvw.

  if not p_parnr is initial and not p_parvw is initial.
*If partner number and function have been entered, check if number is existing and convert to internal format
    l_parnr = p_parnr.
    l_parvw = p_parvw.

    call function 'PM_PARTNER_LENGTH'
         exporting
              parnr_imp              =  l_parnr
              parvw                  =  l_parvw
*               NRART                  =
         importing
              parnr_exp              =  l_parnr
*               NRART_EXP              =
         exceptions
              parvw_and_nrart_inital = 01
              invalid_parvw          = 02.

    case sy-subrc.
      when 0.
        p_parnr = l_parnr.
      when 2.
        set cursor field 'P_PARVW'.
        message e002(yse_inst_base_rep) with p_parvw.            "Partnerfunction invalid
    endcase.

  elseif p_parvw is initial and not p_parnr is initial.
    set cursor field 'P_PARVW'.
    message e003(yse_inst_base_rep).                "Partnerfunction missing
  elseif p_parnr is initial and not p_parvw is initial.
    set cursor field 'P_PARNR'.
    message e004(yse_inst_base_rep).                "Partnernumber missing
  endif.

endform.                    " check_partner
*&---------------------------------------------------------------------*
*&      Form  check_result_equnr
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_EQUNR  text
*      <--P_LV_SUBRC  text
*----------------------------------------------------------------------*
form check_result_equnr  tables    p_lt_equnr
                         changing p_lv_subrc.
  data: lv_lines type i.
  ranges: lr_equnr for equi-equnr.

  lr_equnr[] = so_equnr[].
  clear so_equnr.refresh so_equnr.

  field-symbols: <fs_equnr> type ty_equnr.


  clear lv_lines.
  describe table p_lt_equnr lines lv_lines.
  if lv_lines is initial.       "If no euqnrs imported, fill result parameter and exit subroutine
    p_lv_subrc = 4.
  else.    "Append the found euqnrs to the so_equnr range which will be used in the main select
    so_equnr-sign   = 'I'.
    so_equnr-option = 'EQ'.
    loop at p_lt_equnr assigning <fs_equnr>.
      clear so_equnr-low.
      if lr_equnr[] is initial.
        so_equnr-low = <fs_equnr>-equnr.
        append so_equnr.
      else.
        check <fs_equnr>-equnr in lr_equnr[].
        so_equnr-low = <fs_equnr>-equnr.
        append so_equnr.
      endif.
    endloop.
  endif.    "No equnrs found

endform.                    " check_result_equnr
*&---------------------------------------------------------------------*
*&      Form  select_equi_by_status_profile
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_EQUNR  text
*----------------------------------------------------------------------*
form select_equi_by_status_profile  tables   p_lt_equnr.

  field-symbols: <fs_equnr>,
                 <fs_obj> type jsto_pre,
                 <fs_sel_obj> type jsto_pre.

  data: begin of lt_objnr occurs 0.
          include structure jsto_pre.
  data: end of lt_objnr.

  data: lt_objnr_temp type standard table of jsto_pre,
        ls_objnr type jsto_pre.
  data: lv_field_name(16) value 'SO_EQUNR-LOW',
        lv_status_selected type flg_sel.

  data: begin of ls_obj_tmp,
          ty(2) type c,
          equnr(20) type c,
        end of ls_obj_tmp.

  clear lt_objnr.
  refresh lt_objnr.

*The function module used to check the status profile needs a list of objects,
*therefore we first check if the current list is empty. If so we have to select all equipments

  if so_equnr[] is initial.  "No equipments found yet, so select all
*    SELECT EQUNR FROM V_EQUI
*             INTO TABLE LT_OBJNR
*             WHERE DATAB IN GR_DATAB
*             AND   DATBI IN GR_DATBI.
    select equnr from v_equi
              into corresponding fields of table gt_equnr
                        where equnr in so_equnr
                        and   datab in gr_datab
                        and   datbi in gr_datbi
                        and   eqktx in so_eqktx
                        and   matnr in so_matnr
                        and   sernr in so_sernr
                        and   auldt in so_auldt
                        and   inbdt in so_inbdt
                        and   tplnr in so_strno
                        and   iwerk in so_iwerk
                        and   ingrp in so_ingrp
                        and   gewrk in gr_gewrk.


  else.    "Else append all selected equnrs so far to obj table
    assign (lv_field_name) to <fs_equnr>.

    loop at so_equnr.
      ls_objnr-objnr = <fs_equnr>.
      append ls_objnr to lt_objnr.
    endloop.
  endif.

  check not lt_objnr[] is initial.
  loop at lt_objnr assigning <fs_obj>.
    concatenate 'IE' <fs_obj>-objnr into <fs_obj>-objnr.
  endloop.

  lt_objnr_temp[] = lt_objnr[].

  call function 'STATUS_CHECK_BY_SELSCHEM_MULTI'
    exporting
      selschem               = p_selsch
    importing
      status_objects_deleted = lv_status_selected
    tables
      objnr_tab              = lt_objnr
    exceptions
      no_stat_scheme         = 01.



  if not lv_status_selected is initial.
    sort lt_objnr.
    loop at lt_objnr_temp assigning <fs_obj>.
      move  <fs_obj>-objnr to ls_obj_tmp.
      read table lt_objnr with key objnr = ls_obj_tmp-equnr binary search assigning <fs_sel_obj>.
      if sy-subrc eq 0.
        append ls_obj_tmp-equnr to p_lt_equnr.
*          else.
*            delete p_lt_equnr.
      endif.
    endloop.
  else.
    loop at lt_objnr_temp assigning <fs_obj>.
      move  <fs_obj>-objnr to ls_obj_tmp.
      append ls_obj_tmp-equnr to p_lt_equnr.
    endloop.
  endif.


endform.                    " select_equi_by_status_profile
*&---------------------------------------------------------------------*
*&      Form  select_equi_by_status
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
form select_equi_by_status.

*This subroutine will check if there are any equipments selected in the main select, that have to be removed
*when considering including and/or excluding statusses.

  field-symbols: <fs_equnr> type ty_equnr,
                 <fs_obj> type jsto_pre,
                 <fs_status> type jstat.

  data: lv_field_name(16) value 'SO_EQUNR-LOW'.

  data: begin of lt_objnr occurs 0.
          include structure jsto_pre.
  data: end of lt_objnr.


  data: lt_status type standard table of jstat.

  data: ls_objnr type jsto_pre.

  data: begin of lt_status_text occurs 20,
          txt04  like tj02t-txt04.
  data: end of lt_status_text.

  data: begin of ls_obj_tmp,
          ty(2) type c,
          equnr(20) type c,
        end of ls_obj_tmp.
  data: begin of lt_obj_temp occurs 0,
          equnr type equnr,
        end of lt_obj_temp.

  data: delete_wa type jsto_pre.


  clear lt_objnr.
  refresh lt_objnr.


  check not gt_equnr[] is initial.

*Obj has to be started with object type indicators 'IE' in this case for equipment
  loop at gt_equnr assigning <fs_equnr>.
    concatenate 'IE' <fs_equnr>-equnr into ls_objnr-objnr.
    append ls_objnr to lt_objnr.
  endloop.

*Loop over the objects we have to check, read all statusses and compare with select options
  loop at lt_objnr assigning <fs_obj>.
    move <fs_obj> to delete_wa.
    clear lt_status[].
    call function 'STATUS_READ'
      exporting
        objnr            = <fs_obj>-objnr
        only_active      = c_mark
      tables
        status           = lt_status
      exceptions
        object_not_found = 1
        others           = 2.
    if sy-subrc <> 0.
      " error handling
    endif.
*Get status description
    clear lt_status_text[].
    loop at lt_status assigning <fs_status>.
      call function 'STATUS_NUMBER_CONVERSION'
        exporting
          language           = sy-langu
          objnr              = <fs_obj>-objnr
          status_number      = <fs_status>-stat
        importing
          txt04              = lt_status_text-txt04
        exceptions
          insufficient_input = 1
          object_not_found   = 2
          status_not_found   = 3
          stsma_not_found    = 4
          others             = 5.

      if sy-subrc eq 0.
        append lt_status_text.
      endif.

    endloop.

    if not so_stai1 is initial.    "Check if any including statusses have been entered, if this status isn't found, remove from list
      loop at so_stai1.
        read table lt_status_text with key txt04 = so_stai1-low.
        if sy-subrc ne 0.
          delete table lt_objnr from delete_wa.
          continue.
        endif.
      endloop.

    endif.      "Check if any including statusses have been entered, if found remove from list

    if not so_stae1 is initial.    "Check if any excluding statusses have been entered
      loop at so_stae1.
        read table lt_status_text with key txt04 = so_stae1-low.
        if sy-subrc eq 0.
          delete table lt_objnr from delete_wa.
          continue.
        endif.
      endloop.

    endif.
  endloop.

  loop at lt_objnr assigning <fs_obj>.
    move <fs_obj> to ls_obj_tmp.
    append ls_obj_tmp-equnr to lt_obj_temp.
  endloop.

*Now clean up the global result internal table taking into account the status result
  loop at gt_equnr assigning <fs_equnr>.
    read table lt_obj_temp with key equnr = <fs_equnr>-equnr.
    if sy-subrc ne 0.
      delete table gt_equnr from <fs_equnr>.
    endif.
  endloop.

endform.                    " select_equi_by_status
*&---------------------------------------------------------------------*
*&      Form  check_main_workcenter
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
form check_main_workcenter .
  data: begin of lt_objid_tab occurs 1,
          objid like crhd-objid,
        end of lt_objid_tab.

  select objid from crhd into table lt_objid_tab
                 where arbpl in so_gewrk
                   and werks in so_swerk.

  check sy-subrc eq 0.

  gr_gewrk-sign = 'I'.
  gr_gewrk-option = 'EQ'.
  loop at lt_objid_tab.
    gr_gewrk-low = lt_objid_tab-objid.
    append gr_gewrk.
  endloop.


endform.                    " check_main_workcenter
*&---------------------------------------------------------------------*
*&      Form  select_equi_by_contract_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_EQUNR  text
*----------------------------------------------------------------------*
form select_equi_by_contract_data  tables   p_lt_equnr type tty_equnr.

  types: begin of lty_viveda,
          vbeln type vbeln,
          auart type auart,
          erdat type erdat,
          erzet type erzet,
          matkl type matkl,
          vbegdat type vbdat_veda,
          venddat type vndat_veda,
          equnr type equnr,
         end of lty_viveda.

  data: lt_viveda type standard table of lty_viveda,
        lt_viser type standard table of lty_viveda,
        ls_viser type lty_viveda,
        ls_equnr type ty_equnr.


  field-symbols: <fs_viveda> like line of lt_viveda.

*First select all contract related data from vbak and veda

  select vbak~vbeln vbak~auart vbak~erdat vbak~erzet vbap~matkl veda~vbegdat veda~venddat
    into corresponding fields of table lt_viveda
    from vbak inner join veda
    on vbak~vbeln eq veda~vbeln
    inner join vbap on vbap~vbeln eq vbak~vbeln
      where vbak~auart in so_auart
      and veda~vbegdat in so_vbegd
      and veda~venddat in so_vendd
      and vbap~matkl in so_matkl.


  check sy-subrc eq 0.

*If contracts have been found, select the corresponding equipments

  loop at lt_viveda assigning <fs_viveda>.
    select equnr into ls_viser-equnr from viser02
      where sdaufnr eq <fs_viveda>-vbeln
        and equnr in so_equnr
        and objvw <> 'A'
        and taser = 'SER02'.

      move: <fs_viveda>-vbeln to ls_viser-vbeln,
            <fs_viveda>-auart to ls_viser-auart,
            <fs_viveda>-erdat to ls_viser-erdat,
            <fs_viveda>-erzet to ls_viser-erzet,
            <fs_viveda>-vbegdat to ls_viser-vbegdat,
            <fs_viveda>-venddat to ls_viser-venddat.

      append ls_viser to lt_viser.

    endselect.
  endloop.

  check sy-subrc eq 0.

  sort lt_viser by equnr ascending erdat descending erzet descending.


*Now fill the returning table with the last created contract
  loop at lt_viser into ls_viser.
    at new equnr.
      move-corresponding ls_viser to ls_equnr.
      append ls_equnr to p_lt_equnr.
      append ls_equnr to gt_contract_data.
    endat.
  endloop.


endform.                    " select_equi_by_contract_data
*&---------------------------------------------------------------------*
*&      Form  change_serv_fields
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
form change_serv_fields .

  loop at screen.
    if screen-group1 = 'SER'.
      if p_no_ser is initial.
        screen-input = '0'.
      else.
        screen-input = '1'.
      endif.
      modify screen.
    endif.
  endloop.


endform.                    " change_serv_fields
*&---------------------------------------------------------------------*
*&      Form  exclude_serviced_equipments
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
form exclude_serviced_equipments .
  clear: gr_ex_equnr[].

*  perform deduct_service_equip using ' '.    "Deduct current under service equipments
  perform deduct_current_under_service.
*  PERFORM DEDUCT_SERVICE_EQUIP USING 'X'.    "Deduct completed serviced equipments



endform.                    " exclude_serviced_equipments
*&---------------------------------------------------------------------*
*&      Form  CHECK_SELSCHEM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_<TASK>_OBJNR  text
*      <--P_L_FLAG  text
*----------------------------------------------------------------------*
form check_selschem using p_objnr changing p_flag.
  data: selschem like tj48t-selid.
  call function 'STATUS_CHECK_BY_SELSCHEM'
    exporting
      objnr          = p_objnr
      selid          = selschem
    importing
      fullfill       = p_flag
    exceptions
      no_stat_tab    = 1
      no_stat_scheme = 2
      others         = 3.
endform.                               " CHECK_SELSCHEMA
*&---------------------------------------------------------------------*
*&      Form  FILL_OBJECT_TAB
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_<TASK>  text
*      -->P_<CONF>  text
*----------------------------------------------------------------------*
form fill_object_tab using i_task type viauf_afvc_iflos    "note 444874
                           i_conf type afru.
  data: idx type i,
        wa like object_tab,
        l_vornr like afvc-vornr.
* get status
  perform get_status
       using
            i_task-objnr.
* if cancel
  if not i_conf-stzhl is initial.
    i_conf-idaur = ( -1 ) * i_conf-idaur.
    i_conf-odaur = ( -1 ) * i_conf-odaur.
    i_conf-ofmnw = ( -1 ) * i_conf-ofmnw.
    i_conf-ismnw = ( -1 ) * i_conf-ismnw.
  endif.
  clear object_tab.                                         "N212796
  move-corresponding i_task to object_tab.
  move-corresponding i_conf to object_tab.

* Systemstatus neu ermitteln                                    N310055
  perform get_status using i_task-objnr.

* sub-operation ?
  if not i_task-sumnr is initial.
    object_tab-uvorn = i_task-vornr.
    select single vornr into l_vornr from afvc
      where aufpl = i_task-aufpl
      and   aplzl = i_task-sumnr.
    object_tab-vornr = l_vornr.
  else.
    clear object_tab-uvorn.
  endif.

* name of employee and personal area
  if not object_tab-pernr is initial.
    call function 'RP_CHECK_PERNR'
      exporting
        beg               = sy-datum
        pnr               = object_tab-pernr
      importing
        name              = object_tab-name
        persa             = object_tab-persa
      exceptions
        data_fault        = 1
        person_not_active = 2
        person_unknown    = 3
        exit_fault        = 4
        pernr_missing     = 5
        date_missing      = 6
        others            = 7.
  endif.

  if not i_conf-ismnu is initial and
     i_conf-ismne ne i_conf-ismnu.
    call function 'UNIT_CONVERSION_SIMPLE'
      exporting
        input    = i_conf-ismnw
        unit_in  = i_conf-ismne
        unit_out = i_conf-ismnu
      importing
        output   = object_tab-ismnw.
    object_tab-ismne = i_conf-ismnu.
  endif.

  if not i_conf-ofmnu is initial and
      i_conf-ofmne ne i_conf-ofmnu.
    call function 'UNIT_CONVERSION_SIMPLE'
      exporting
        input    = i_conf-ofmnw
        unit_in  = i_conf-ofmne
        unit_out = i_conf-ofmnu
      importing
        output   = object_tab-ofmnw.
    object_tab-ofmne = i_conf-ofmnu.
  endif.

  perform get_arbpl using i_conf-arbid object_tab-iarbpl.
  perform get_arbpl using i_task-arbid object_tab-parbpl.

  object_tab-werki = i_conf-werks.
  object_tab-pwerk = i_task-werks.

* conversion exit func. loc.
  write i_task-tplnr_int to object_tab-tplnr.    "note 444874

  if not i_conf-stzhl is initial.
    read table object_tab into wa with key rueck = i_conf-rueck
                                         rmzhl = i_conf-stzhl.
    if sy-subrc = 0.
      idx = sy-tabix + 1.
      insert object_tab index idx.
    else.
      append object_tab.
    endif.
  else.
    append object_tab.
  endif.

endform.                               " FILL_OBJECT_TAB
*&---------------------------------------------------------------------*
*&      Form  GET_STATUS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_I_TASK_OBJNR  text
*----------------------------------------------------------------------*
form get_status using    p_objnr.
  data: sttxt like rihafvr-sttxt,      " system status
        ustxt like rihafvr-ustxt.      " user status

  call function 'STATUS_TEXT_EDIT'
       exporting
*           CLIENT            = SY-MANDT
            flg_user_stat     = 'X'
            objnr             = p_objnr
*           ONLY_ACTIVE       = 'X'
            spras             = sy-langu
       importing
*           ANW_STAT_EXISTING =
*           E_STSMA           =
            line              = sttxt
            user_line         = ustxt
       exceptions
            object_not_found  = 1
            others            = 2.

  move sttxt to object_tab-sttxt.
  move ustxt to object_tab-ustxt.
endform.                               " GET_STATUS
*&---------------------------------------------------------------------*
*&      Form  GET_ARBPL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_I_CONF_ARBID  text
*      -->P_OBJECT_TAB_IARBPL  text
*----------------------------------------------------------------------*
form get_arbpl using    arbid type cr_objid
               changing arbpl type arbpl.

  data:
    l_crhd like crhd.

  read table gt_crhd into l_crhd
    with key objid = arbid
    binary search.

  arbpl = l_crhd-arbpl.

endform.                               " GET_ARBPL
*&---------------------------------------------------------------------*
*&      Form  deduct_in_process
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
form deduct_service_equip using p_flag.
  types: begin of ls_aufrueck_type,
         aufnr type aufnr,
         rueck type co_rueck,
       end of ls_aufrueck_type.

  data: lt_conf type standard table of afru,
        ls_crid     type crid,
        lt_crid     type crid_tab,
        ls_aufrueck type ls_aufrueck_type,
        lt_aufrueck type table of ls_aufrueck_type,
        lt_task type standard table of viauf_afvc_iflos,
        lt_jsto_pre type standard table of jsto_pre,
        l_jsto_pre  type jsto_pre,
        l_flag.

  ranges:lr_iedd for afru-iedd,
         lr_werks for rihafvr-werki,
         lr_rueck for afru-rueck.





  field-symbols: <conf> type afru,
                 <task> type viauf_afvc_iflos.

  if p_flag is initial.    "Select currently under service items
    clear gr_iphas.
    gr_iphas-option = 'EQ'.
    gr_iphas-sign = 'I'.
    gr_iphas-low = '2'.
    append gr_iphas.

    clear lr_werks.
    move so_swerk[] to lr_werks[].      "Use maintenance plant to filter on this plant

  else.                    "Select completed since p_date items

    move so_swerk[] to lr_werks[].      "Use maintenance plant to filter on this plant

    clear gr_iphas.
* technically completet
    gr_iphas-option = 'EQ'.
    gr_iphas-sign = 'I'.
    gr_iphas-low = '3'.
    append gr_iphas.
* deletion flag
    gr_iphas-low = '4'.
    append gr_iphas.
* completed
    gr_iphas-low = '6'.
    append gr_iphas.


    clear lr_iedd.
    lr_iedd-sign = 'I'.
    lr_iedd-option = 'GE'.
    lr_iedd-low = p_date.
    append lr_iedd.
  endif.

  select * from afru into table lt_conf
    where rueck in lr_rueck
       and  werks in lr_werks
       and iedd in lr_iedd.


  if not lt_conf[] is initial.

*--- delete duplicates for SELECT & fill workcente prefetch table
    ls_crid-objty = 'A'.
    loop at lt_conf assigning <conf>.
      ls_aufrueck-aufnr = <conf>-aufnr.
      ls_aufrueck-rueck = <conf>-rueck.
      collect ls_aufrueck into lt_aufrueck.
      ls_crid-objid = <conf>-arbid.
      collect ls_crid into lt_crid.
    endloop.

    select * from viauf_afvc
    into corresponding fields of table lt_task              "note 444874
       for all entries in lt_aufrueck
       where aufnr = lt_aufrueck-aufnr
         and rueck = lt_aufrueck-rueck
         and iphas in gr_iphas.

    loop at lt_task assigning <task>.
      l_jsto_pre-objnr = <task>-objnr.
      append l_jsto_pre to lt_jsto_pre.
      ls_crid-objid = <task>-arbid.
      collect ls_crid into lt_crid.
    endloop.

    call function 'STATUS_PRE_READ'
      tables
        jsto_pre_tab = lt_jsto_pre.

  endif.

  if not lt_task[] is initial.
    read table lt_task index 1 assigning <task>.
  else.
    exit.
  endif.

  select * from crhd into table gt_crhd
           for all entries in lt_crid
           where objty = lt_crid-objty
           and   objid = lt_crid-objid.

  sort gt_crhd by objid.

  sort lt_task by rueck.

  loop at lt_conf assigning <conf>.
    if <conf>-rueck ne <task>-rueck.
      read table lt_task with key rueck =                  " note 186488
                         <conf>-rueck assigning <task>     " note 186488
                         binary search." note 186488

      if sy-subrc ne 0. " no order found with given selection criterias
        continue.
      endif.
    endif.

    perform check_selschem
           using
                <task>-objnr
           changing
                 l_flag.

    if not l_flag = 'X'.
      continue.
    endif.

    <task>-tplnr_int = <task>-tplnr.

    perform fill_object_tab
         using
              <task>
              <conf>.

*    LOOP AT SO_EQUNR WHERE LOW EQ OBJECT_TAB-EQUNR
*                     and sign eq 'I'.
*
*    ENDLOOP.
*    if sy-subrc eq 0.
*      delete so_equnr where LOW EQ OBJECT_TAB-EQUNR.
*      SO_EQUNR-SIGN = 'E'.
*      SO_EQUNR-OPTION = 'EQ'.
*      SO_EQUNR-LOW = OBJECT_TAB-EQUNR.
*      APPEND SO_EQUNR.
*    else.
    loop at gr_ex_equnr where low eq object_tab-equnr.
    endloop.
    if sy-subrc ne 0.
      gr_ex_equnr-sign = 'E'.
      gr_ex_equnr-option = 'EQ'.
      gr_ex_equnr-low = object_tab-equnr.
      append gr_ex_equnr.
    endif.
*    ENDIF.

  endloop.

endform.                    " deduct_in_process
*&---------------------------------------------------------------------*
*&      Form  select_pgc_materials
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
form select_pgc_materials changing p_lv_subrc.
**declare local table to store materials selected with the PGC, wich then will be used in the main select
*  DATA: BEGIN OF LT_MATNR OCCURS 0,
*          MATNR TYPE MATNR,
*        END OF LT_MATNR.
*  FIELD-SYMBOLS: <FS_MATNR> LIKE LINE OF LT_MATNR.
*
*  SELECT MATNR FROM MARA
*      INTO TABLE LT_MATNR
*      WHERE matnr in so_matnr
*        and PRDHA  IN SO_PRDHA.
*
*  IF NOT SY-SUBRC EQ 0.
*    P_LV_SUBRC = 4.
*    EXIT.
*  ENDIF.
*
*  SO_MATNR-SIGN = 'I'.
*  SO_MATNR-OPTION = 'EQ'.
*  LOOP AT LT_MATNR ASSIGNING <FS_MATNR>.
*    SO_MATNR-LOW = <FS_MATNR>-MATNR.
*    APPEND SO_MATNR.
*  ENDLOOP.

endform.                    " select_pgc_materials
*&---------------------------------------------------------------------*
*&      Form  get_partner
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_<FS_EQUNR>_SHIP  text
*      -->P_<FS_EQUNR>_OBJNR  text
*----------------------------------------------------------------------*
form get_partner  using    p_partner type i_parnr
                           p_type type parvw
                           p_objnr type j_objnr.
  select single parnr
    from ihpa
    into p_partner
    where objnr eq p_objnr
    and parvw eq p_type
    and kzloesch ne 'X'.

endform.                    " get_partner
*&---------------------------------------------------------------------*
*&      Form  create_fieldcat
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
form create_fieldcat .

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'EQUNR'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 18.
  ls_fieldcat-coltext = 'Equi. Nr.'(020).
  ls_fieldcat-tooltip = 'Click on equipment to see details'(090).
  ls_fieldcat-fix_column = 'X'.
  ls_fieldcat-emphasize = 'X'.
** Begin INS IVA 02/07/2007 Issuenr 2209
  ls_fieldcat-no_zero = 'X'.
** End INS IVA 02/07/2007


  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'SERNR'.
  ls_fieldcat-outputlen = 18.
  ls_fieldcat-coltext = 'Serial Nr.'(021).
  ls_fieldcat-fix_column = 'X'.
  ls_fieldcat-emphasize = 'X'.
** Begin INS IVA 02/07/2007 Issuenr 2209
  ls_fieldcat-no_zero = 'X'.
** End INS IVA 02/07/2007

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'MATNR'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 18.
  ls_fieldcat-coltext = 'Material Nr.'(022).
  ls_fieldcat-tooltip = 'Click on Material Nr. to see details'(091).
  ls_fieldcat-fix_column = 'X'.
  ls_fieldcat-emphasize = 'X'.
** Begin INS IVA 02/07/2007 Issuenr 2209
  ls_fieldcat-no_zero = 'X'.
** End INS IVA 02/07/2007

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'EQKTX'.
  ls_fieldcat-outputlen = 25.
  ls_fieldcat-coltext = 'Material Descr.'(023).
  ls_fieldcat-fix_column = 'X'.
  ls_fieldcat-emphasize = 'X'.

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'PRDHA'.
  ls_fieldcat-outputlen = 8.
  ls_fieldcat-coltext = 'PGC'(024).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'VKORG'.
  ls_fieldcat-outputlen = 7.
  ls_fieldcat-coltext = 'Sls. Org.'(025).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'VKBUR'.
  ls_fieldcat-outputlen = 6.
  ls_fieldcat-coltext = 'Sls. off.'(026).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'VKGRP'.
  ls_fieldcat-outputlen = 6.
  ls_fieldcat-coltext = 'Sls. grp'(027).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'SPART'.
  ls_fieldcat-outputlen = 3.
  ls_fieldcat-coltext = 'Div.'(028).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'VTWEG'.
  ls_fieldcat-outputlen = 7.
  ls_fieldcat-coltext = 'Distr.Ch.'(029).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'BUKRS'.
  ls_fieldcat-outputlen = 5.
  ls_fieldcat-coltext = 'CCo.'(030).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'SWERK'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'Maint. plant'(031).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'IWERK'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'Planning plant'(032).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'INGRP'.
  ls_fieldcat-outputlen = 8.
  ls_fieldcat-coltext = 'Planner Grp.'(033).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'ARBPL'.
  ls_fieldcat-outputlen = 8.
  ls_fieldcat-coltext = 'Main Wrkc.'(034).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'TPLNR'.
  ls_fieldcat-outputlen = 16.
  ls_fieldcat-coltext = 'Func. Loc.'(035).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'SHIP'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-no_convext = 'X'.
  ls_fieldcat-datatype = 'CHAR'.
  ls_fieldcat-coltext = 'Ship-to'(036).

  append ls_fieldcat to lt_fieldcat.

**************************************************
  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'SHIP_NAME'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 25.
  ls_fieldcat-coltext = 'Ship-to name'(063).

  append ls_fieldcat to lt_fieldcat.
***************************************************
* Begin of Insert Mod-001.
  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'SHIP_ADDR'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 45.
  ls_fieldcat-coltext = 'Ship-to address'.

  append ls_fieldcat to lt_fieldcat.
***************************************************
*  End of Insert Mod-001.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'SOLD'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-no_convext = 'X'.
  ls_fieldcat-coltext = 'Sold-to'(037).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'SOLD_NAME'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 25.
  ls_fieldcat-coltext = 'Sold-to name'(064).

  append ls_fieldcat to lt_fieldcat.

* Begin of Insert Mod-001.
  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'SOLD_ADDR'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 45.
  ls_fieldcat-coltext = 'Sold-to address'.

  append ls_fieldcat to lt_fieldcat.
*  End of Insert Mod-001.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'PAYER'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-no_convext = 'X'.
  ls_fieldcat-coltext = 'Payer'(038).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'PAYER_NAME'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 25.
  ls_fieldcat-coltext = 'Payer name'(065).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'BILL'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-no_convext = 'X'.
  ls_fieldcat-coltext = 'Bill-to'(039).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'BILL_NAME'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 25.
  ls_fieldcat-coltext = 'Bill-to name'(066).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'DISTRI'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'Distributor'(040).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'DISTRI_NAME'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 25.
  ls_fieldcat-coltext = 'Distributor name'(041).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'END'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'End customer'(042).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'END_NAME'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 25.
  ls_fieldcat-coltext = 'End customer name'(043).

  append ls_fieldcat to lt_fieldcat.


  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'OWNER'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'Owner'(044).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'SALES_REP_SALES'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'Sales Rep sales'(045).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'SALES_REP_SERV'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'Sales Rep. services'(046).


  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'ERDAT'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'Registration date'(047).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'DATAB'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'Valid from date'(048).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'DATBI'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'Valid to date'(049).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'ANSDT'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'Delivery date'(050).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'INBDT'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'Start up date'(051).

  append ls_fieldcat to lt_fieldcat.



  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'VBELN'.
  ls_fieldcat-hotspot = 'X'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'Contract'(052).
  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'AUART'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'Contract type'(053).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'VBEGDAT'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'Start of contract'(054).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'VENDDAT'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'End of contract'(055).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'SY_STAT'.
  ls_fieldcat-outputlen = 15.
  ls_fieldcat-coltext = 'System status'(056).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'US_STAT'.
  ls_fieldcat-outputlen = 15.
  ls_fieldcat-coltext = 'User status'(057).

  append ls_fieldcat to lt_fieldcat.

** Begin of INS IVB 02/07/2007 issueno 2209
  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'CUST_WAR_B'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'Customer warranty begin'(058).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'CUST_WAR_E'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'Customer warranty end'(059).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'VEND_WAR_B'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'Vendor warranty begin'(060).

  append ls_fieldcat to lt_fieldcat.

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'VEND_WAR_E'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'Vendor warranty end'(061).

  append ls_fieldcat to lt_fieldcat.

** End of INS IVB 02/07/2007   issueno 2209

  clear ls_fieldcat.
  ls_fieldcat-fieldname = 'MATKL'.
  ls_fieldcat-outputlen = 10.
  ls_fieldcat-coltext = 'Material group'(062).

  append ls_fieldcat to lt_fieldcat.
* Begin of insertion MOD-004
  ls_fieldcat-fieldname = 'INVNR'.
  ls_fieldcat-outputlen = 25.
  ls_fieldcat-coltext = 'Inventory number'(067).
  append ls_fieldcat to lt_fieldcat.

  ls_fieldcat-fieldname = 'MSGRP'.
  ls_fieldcat-outputlen = 8.
  ls_fieldcat-coltext = 'Room'(068).
  append ls_fieldcat to lt_fieldcat.
* End of insertion MOD-004


endform.                    " create_fieldcat
*&---------------------------------------------------------------------*
*&      Form  get_statusses
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
form get_statusses .

  data: lv_objnr type j_objnr,
        lv_sy_stat type bsvx-sttxt,
        lv_us_stat type bsvx-sttxt.



*Read statusses
  call function 'STATUS_TEXT_EDIT'
    exporting
      objnr                   = <fs_equnr>-objnr
      flg_user_stat           = 'X'
      only_active             = 'X'
      spras                   = sy-langu
*    BYPASS_BUFFER           = ' '
   importing
*    ANW_STAT_EXISTING       =
*    E_STSMA                 =
     line                    = lv_sy_stat
     user_line               = lv_us_stat
*    STONR                   =
   exceptions
     object_not_found        = 1
     others                  = 2
            .
  check sy-subrc eq 0.
  move: lv_sy_stat to <fs_equnr>-sy_stat,
        lv_us_stat to <fs_equnr>-us_stat.

endform.                    " get_statusses
*&---------------------------------------------------------------------*
*&      Form  select_contract_data_by_equinr
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
form select_contract_data_by_equinr .
  data: begin of lt_vbak occurs 100,
          erdat type erdat,
          erzet type erzet,
          sdaufnr type vbeln,
          auart type auart,
          vbegdat type vbdat_veda,
          venddat type vndat_veda,
        end of lt_vbak.

  data: lv_count type i.

  field-symbols: <fs_vbak> like line of lt_vbak.

*select all sales docs for current equnr
  select sdaufnr from viser02 into corresponding fields of table lt_vbak
                       where equnr eq <fs_equnr>-equnr
                       and objvw = 'K'.
*                       AND TASER = 'SER02'.

  check sy-subrc eq 0.
  collect lt_vbak.
*Get contract details for every contract
  loop at lt_vbak assigning <fs_vbak>.

    select single auart erdat erzet from vbak into (<fs_vbak>-auart, <fs_vbak>-erdat, <fs_vbak>-erzet)
      where auart in so_auart
      and vbeln eq <fs_vbak>-sdaufnr
      and vbtyp eq 'G'.
    if sy-subrc eq 0.
      select single vbegdat venddat from veda into (<fs_vbak>-vbegdat, <fs_vbak>-venddat)
        where vbeln eq <fs_vbak>-sdaufnr.
    else.
      delete table lt_vbak from <fs_vbak>.
    endif.
  endloop.
*Get last created contract and add to main internal table
  describe table lt_vbak lines lv_count.
  check lv_count > 0.
  sort lt_vbak by erdat descending erzet descending.
  read table lt_vbak assigning <fs_vbak> index 1.
  move:  <fs_vbak>-auart to <fs_equnr>-auart,
         <fs_vbak>-sdaufnr to <fs_equnr>-vbeln,
         <fs_vbak>-vbegdat to <fs_equnr>-vbegdat,
         <fs_vbak>-venddat to <fs_equnr>-venddat.

endform.                    " select_contract_data_by_equinr
*&---------------------------------------------------------------------*
*&      Form  get_partner_name
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_<FS_EQUNR>_DISTRI  text
*----------------------------------------------------------------------*
form get_partner_name  using    pl_parnr
                                p_parn_name.
* Begin of Insert Mod-001.
*  SELECT SINGLE name1 FROM kna1 INTO p_parn_name
*    WHERE kunnr EQ pl_parnr.
* Begin of Insert Mod-002.
  clear : v_parn_name1,
          v_parn_name2,
          p_parn_name.
*  End of Insert Mod-002.
  select single name1 name2 from kna1 into (v_parn_name1, v_parn_name2)
    where kunnr eq pl_parnr.

  concatenate v_parn_name1 v_parn_name2 into p_parn_name.  "SEPARATED BY SPACE.
*  End of Insert Mod-001.
endform.                    " get_partner_name
*&---------------------------------------------------------------------*
*&      Form  SELECT_EQUI_BY_cust_war
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_EQUNR  text
*----------------------------------------------------------------------*
form select_equi_by_cust_war  tables   p_lt_equnr type tty_equnr.

  select equi~equnr
into corresponding fields of table p_lt_equnr
from equi inner join bgmkobj
on equi~objnr = bgmkobj~j_objnr
  where bgmkobj~gaart = '1'
  and equnr in so_equnr
  and bgmkobj~gwldt in so_gwldo
  and bgmkobj~gwlen in so_gwleo.

endform.                    " SELECT_EQUI_BY_cust_war
*&---------------------------------------------------------------------*
*&      Form  SELECT_EQUI_BY_vend_war
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_EQUNR  text
*----------------------------------------------------------------------*
form select_equi_by_vend_war  tables   p_lt_equnr type tty_equnr.

  select equi~equnr
into corresponding fields of table p_lt_equnr
from equi inner join bgmkobj
on equi~objnr = bgmkobj~j_objnr
  where bgmkobj~gaart = '2'
  and bgmkobj~gwldt in so_gwldi
  and bgmkobj~gwlen in so_gwlei.

endform.                    " SELECT_EQUI_BY_vend_war
*&---------------------------------------------------------------------*
*&      Form  SELECT_EQUI_BY_STATUS_PROFILE2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_EQUNR  text
*----------------------------------------------------------------------*
form select_equi_by_status_profile2  tables   p_lt_equnr .

  data: begin of lt_objnr occurs 0.
          include structure jsto_pre.
  data: end of lt_objnr.

  data: ls_objnr type jsto_pre,
        lv_status_selected type flg_sel.

  data: lt_equnr type standard table of ty_equnr.

  field-symbols: <fs_objnr> type jsto_pre.

  clear lt_objnr.
  refresh lt_objnr.

*The function module used to check the status profile needs a list of objects so loop over our current equnrs and append objnr to local table used by FM,
  loop at gt_equnr assigning <fs_equnr>.
    ls_objnr-objnr = <fs_equnr>-objnr.
    append ls_objnr to lt_objnr.
  endloop.



  call function 'STATUS_CHECK_BY_SELSCHEM_MULTI'
    exporting
      selschem               = p_selsch
    importing
      status_objects_deleted = lv_status_selected
    tables
      objnr_tab              = lt_objnr
    exceptions
      no_stat_scheme         = 01.



  if not lv_status_selected is initial.      "Indicates if any objects have been deleted
    move gt_equnr[] to lt_equnr[].           "Move current found equnrs to temp table
    clear gt_equnr[].                        "Clear current found equnr global table
    loop at lt_objnr assigning <fs_objnr>.   "Loop over objnr's that haven't been deleted
      read table lt_equnr                    "Read full detail line of current objnr from temp table
        assigning <fs_equnr>
        with key objnr = <fs_objnr>-objnr.
      if sy-subrc eq 0.                      "If detail ine found in temp table
        append <fs_equnr> to gt_equnr.       "Append detail line again to global equnr table, this way only the ones that
        "haven't been deleted are still in the table
      endif.
    endloop.

  endif.


endform.                    " SELECT_EQUI_BY_STATUS_PROFILE2
*&---------------------------------------------------------------------*
*&      Form  deduct_current_under_service
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
form deduct_current_under_service .
  data: begin of lt_equnr occurs 0,
          equnr type equnr,
        end of lt_equnr.

  field-symbols: <fs_equnr> like line of lt_equnr.

  ranges: lr_iphas for viauf_afvc-iphas,
          lr_iedd for viauf_afvc-iedd.
*Select all currently under service orders (released)
  clear: lr_iphas[],
         lr_iedd[].

  move: 'I' to lr_iphas-sign,
        'EQ' to lr_iphas-option,
        '2' to lr_iphas-low.

  append lr_iphas.

  move: '3' to lr_iphas-low.
  append lr_iphas.
  move: '4' to lr_iphas-low.
  append lr_iphas.
  move: '6' to lr_iphas-low.
  append lr_iphas.

  move: 'I' to lr_iedd-sign,
        'LE' to lr_iedd-option,
        p_date to lr_iedd-low.
  append lr_iedd.

  select equnr from viauf_afvc into table lt_equnr
    where equnr in so_equnr
    and sermat in so_matnr
    and serialnr in so_sernr
    and tplnr in so_strno
    and iwerk in so_iwerk
    and swerk in so_swerk
    and ingpr in so_ingrp
    and iphas in lr_iphas
    and iedd in lr_iedd.

  delete adjacent duplicates from lt_equnr.

  gr_ex_equnr-sign = 'E'.
  gr_ex_equnr-option = 'EQ'.

  loop at lt_equnr assigning <fs_equnr>.
    gr_ex_equnr-low = <fs_equnr>-equnr.
    append gr_ex_equnr.
  endloop.




endform.                    " deduct_current_under_service

*&---------------------------------------------------------------------*
*&      Form  select_warranty_dates
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_<FS_EQUNR>_OBJNR  text
*      -->P_<FS_EQUNR>_CUST_WAR_B  text
*      -->P_<FS_EQUNR>_CUST_WAR_E  text
*      -->P_<FS_EQUNR>_VEND_WAR_B  text
*      -->P_<FS_EQUNR>_VEND_WAR_E  text
*----------------------------------------------------------------------*
form select_warranty_dates  using    p_objnr
                                     p_cust_war_b
                                     p_cust_war_e
                                     p_vend_war_b
                                     p_vend_war_e.


  select single gwldt gwlen
    into (p_cust_war_b, p_cust_war_e)
    from bgmkobj
    where j_objnr = p_objnr
      and gaart = '1'.

  select single gwldt gwlen
    into (p_vend_war_b, p_vend_war_e)
    from bgmkobj
    where j_objnr = p_objnr
      and gaart = '2'.


endform.                    " select_warranty_dates
*&---------------------------------------------------------------------*
*&      Form  alv_display
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form alv_display.
  data: lt_alv_filedcat type slis_t_fieldcat_alv,
        ls_alv_fieldcat type slis_fieldcat_alv,
        ls_fieldcat type lvc_s_fcat.

  perform create_fieldcat.

  loop at lt_fieldcat into ls_fieldcat.
*  ls_alv_fieldcat-_pos       = lv_pos.
  ls_alv_fieldcat-fieldname     = ls_fieldcat-fieldname.
  ls_alv_fieldcat-seltext_s     = ls_fieldcat-coltext.
  ls_alv_fieldcat-seltext_m     = ls_fieldcat-coltext.
  ls_alv_fieldcat-seltext_l     = ls_fieldcat-coltext.
  ls_alv_fieldcat-ddictxt       = 'M'.
  append ls_alv_fieldcat to lt_alv_filedcat.
  endloop.

  call function 'REUSE_ALV_GRID_DISPLAY'
   exporting
*   I_INTERFACE_CHECK                 = ' '
*   I_BYPASSING_BUFFER                = ' '
*   I_BUFFER_ACTIVE                   = ' '
     i_callback_program                = 'YSE_AM_INST_BASE_REPORTS'
*   I_CALLBACK_PF_STATUS_SET          = ' '
*   I_CALLBACK_USER_COMMAND           = ' '
*   I_CALLBACK_TOP_OF_PAGE            = ' '
*   I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*   I_CALLBACK_HTML_END_OF_LIST       = ' '
*   I_STRUCTURE_NAME                  =
*   I_BACKGROUND_ID                   = ' '
*   I_GRID_TITLE                      =
*   I_GRID_SETTINGS                   =
*   IS_LAYOUT                         =
      it_fieldcat                       = lt_alv_filedcat
*   IT_EXCLUDING                      =
*   IT_SPECIAL_GROUPS                 =
*   IT_SORT                           =
*   IT_FILTER                         =
*   IS_SEL_HIDE                       =
*   I_DEFAULT                         = 'X'
*   I_SAVE                            = ' '
*   IS_VARIANT                        =
*   IT_EVENTS                         =
*   IT_EVENT_EXIT                     =
*   IS_PRINT                          =
*   IS_REPREP_ID                      =
*   I_SCREEN_START_COLUMN             = 0
*   I_SCREEN_START_LINE               = 0
*   I_SCREEN_END_COLUMN               = 0
*   I_SCREEN_END_LINE                 = 0
*   I_HTML_HEIGHT_TOP                 = 0
*   I_HTML_HEIGHT_END                 = 0
*   IT_ALV_GRAPHICS                   =
*   IT_HYPERLINK                      =
*   IT_ADD_FIELDCAT                   =
*   IT_EXCEPT_QINFO                   =
*   IR_SALV_FULLSCREEN_ADAPTER        =
* IMPORTING
*   E_EXIT_CAUSED_BY_CALLER           =
*   ES_EXIT_CAUSED_BY_USER            =
    tables
      t_outtab                          = gt_equnr
* EXCEPTIONS
*   PROGRAM_ERROR                     = 1
*   OTHERS                            = 2
            .
  if sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  endif.

endform.                    "alv_display
