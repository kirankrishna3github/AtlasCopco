************************************************************************
* Change History Log                                                   *
*----------------------------------------------------------------------*
*Mod. no.|  Date    | Name           | Correction Number  | Change     *
*----------------------------------------------------------------------*
*MOD-004 |14/09/2015| Anda Wu        | CD1K986808         |MSG0000044420
*&---------------------------------------------------------------------*
*&  Include           YSE_SD_DTC_AUTOMATION_02_EV                      *
*&---------------------------------------------------------------------*
START-OF-SELECTION.
*Select all relevant sales docs/purchase req's/purchase order's

*  select vepvg~vbeln vepvg~vstel vepvg~ledat vepvg~kunwe
*         ekkn~ebeln ekkn~ebelp ekkn~vbelp
*         ekko~lifnr ekko~ekorg
*         vbap~werks vbap~matnr
*         marc~sernp
*    into corresponding fields of table gt_sales
*    from vepvg
*     inner join ekkn
*     on vepvg~vbeln = ekkn~vbeln
*     inner join ekko
*     on ekko~ebeln = ekkn~ebeln
*     inner join ekes
*     on ekes~ebeln = ekkn~ebeln
*     and ekes~ebelp = ekkn~ebelp
*     inner join vbap
*     on vbap~posnr = ekkn~vbelp
*     and vbap~vbeln = ekkn~vbeln
*     inner join yse_em_plant
*     on yse_em_plant~werks = vbap~werks
*     inner join marc
*     on marc~matnr = vbap~matnr
*     and marc~werks = vbap~werks
*     where vepvg~vstel in so_vstel
*     and vepvg~auart in so_auart
*     and vepvg~ledat <= p_due
*     and ekes~ebtyp = 'LA'
*
*     and vepvg~vbeln in so_vbeln.

*select   vbep~vbeln  vbep~edatu
*         ekkn~ebeln ekkn~ebelp ekkn~vbelp
*         ekko~lifnr ekko~ekorg
*         vbap~werks vbap~matnr vbap~vstel
*         marc~sernp
*    into corresponding fields of table gt_sales
*    from vbak
*      inner join vbuk on
*      vbak~vbeln = vbuk~vbeln
*      inner join vbep
*      on vbuk~vbeln = vbep~vbeln
*     inner join ekkn
*     on vbep~vbeln = ekkn~vbeln
*     and vbep~vbeln = ekkn~vbelp
*     inner join ekko
*     on ekko~ebeln = ekkn~ebeln
*     inner join ekes
*     on ekes~ebeln = ekkn~ebeln
*     and ekes~ebelp = ekkn~ebelp
*     inner join vbap
*     on vbap~posnr = ekkn~vbelp
*     and vbap~vbeln = ekkn~vbeln
*     inner join yse_em_plant
*     on yse_em_plant~werks = vbap~werks
*     inner join marc
*     on marc~matnr = vbap~matnr
*     and marc~werks = vbap~werks
*     where vbap~vstel in so_vstel
*     and vbak~auart in so_auart
*     and vbep~edatu <= p_due
*     and vbep~BMENG > 0
*     and ekes~ebtyp = 'LA'
*     and vbak~vbeln in so_vbeln
*     and vbuk~lfstk <> 'C'.

*select vbep~vbeln vbep~posnr vbep~edatu
*       vbap~werks vbap~matnr

  DATA:
    lv_condition TYPE string.
* Build condition dynamically (depending on chosen option on selection screen)
  CONCATENATE    'vbap~vstel in so_vstel'
             'and vbak~auart in so_auart'
        INTO lv_condition SEPARATED BY space.
  IF p_cdd NE space.
    CONCATENATE     lv_condition
               'and vbep~edatu <= p_due'
          INTO lv_condition SEPARATED BY space.
  ELSEIF p_mad NE space.
    CONCATENATE     lv_condition
               'and vbep~MBDAT <= p_due'
          INTO lv_condition SEPARATED BY space.
  ENDIF.
  CONCATENATE      lv_condition
              'and vbak~vbeln in so_vbeln'
              'and vbak~vkorg in so_vkorg'
              'and vbep~BMENG > 0'
              'and ekes~ebtyp = ''LA'''
              'and vbup~lfsta <> ''C'''
         INTO lv_condition SEPARATED BY space.

  SELECT   vbak~vbeln
           vbup~lfsta
           vbep~posnr vbep~edatu
           vbap~werks vbap~matnr vbap~vstel
           marc~sernp
           ekkn~ebeln ekkn~ebelp
           ekko~lifnr ekko~ekorg
* begin of insert MOD-001
           ekko~bukrs
* end of insert MOD-001

           INTO CORRESPONDING FIELDS OF TABLE gt_sales

           FROM vbak INNER JOIN vbep
             ON vbak~vbeln = vbep~vbeln
           INNER JOIN vbup
             ON vbup~vbeln = vbep~vbeln
             AND vbup~posnr = vbep~posnr
           INNER JOIN vbap
             ON vbep~vbeln = vbap~vbeln
             AND vbep~posnr = vbap~posnr
           INNER JOIN marc
             ON vbap~matnr = marc~matnr
             AND vbap~werks = marc~werks
           INNER JOIN ekkn
             ON vbap~vbeln = ekkn~vbeln
             AND vbap~posnr = ekkn~vbelp
           INNER JOIN ekes
             ON ekkn~ebeln = ekes~ebeln
             AND ekkn~ebelp = ekes~ebelp
           INNER JOIN ekko
             ON ekko~ebeln = ekes~ebeln

           WHERE (lv_condition).




  IF sy-subrc NE 0.
    IF sy-batch IS INITIAL.
      MESSAGE s000(yse_sdmm_dtc02).
      EXIT.
    ELSE.
      WRITE: 'No items selected'.                           "#EC *
      EXIT.
    ENDIF.
  ENDIF.

END-OF-SELECTION.

  DELETE ADJACENT DUPLICATES FROM gt_sales COMPARING vbeln posnr.

*Sort by vendor.
  SORT gt_sales BY vbeln posnr.
******begin of MOD-004 INSERT
  DATA: lt_dtc_branch TYPE STANDARD TABLE OF yse_branch_dtc,
        ls_dtc_branch TYPE yse_branch_dtc.
  SELECT *
    FROM yse_branch_dtc
    INTO TABLE lt_dtc_branch.
  ls_dtc_branch-werks = 'CN91'.
  APPEND ls_dtc_branch TO lt_dtc_branch.
  CLEAR: ls_dtc_branch.
  ls_dtc_branch-werks = 'CN93'.
  APPEND ls_dtc_branch TO lt_dtc_branch.
******END of MOD-004 INSERT
*Exclude all irelevant vendors
  LOOP AT gt_sales ASSIGNING <fs_sales>.
*Check if it is a relevant vendor
    IF NOT gt_ex_vendors[] IS INITIAL.
      READ TABLE gt_ex_vendors ASSIGNING <fs_ex_vend>
        WITH KEY ekorg = <fs_sales>-ekorg
            lifnr = <fs_sales>-lifnr.
******begin of MOD-004 MOD
*******begin of MOD-003 MOD
**      if sy-subrc eq 0 and <fs_sales>-werks <> 'CN91'."CD1K973202
      IF sy-subrc EQ 0 .
*******END of MOD-003 MOD
        READ TABLE lt_dtc_branch TRANSPORTING NO FIELDS
         WITH KEY werks = <fs_sales>-werks.
        IF sy-subrc <> 0.
          DELETE gt_sales WHERE ekorg = <fs_sales>-ekorg
                          AND lifnr = <fs_sales>-lifnr.
          CONTINUE.
        ENDIF.


      ELSE.

        IF  <fs_sales>-ekorg = 'CN07'.
          DELETE gt_sales WHERE ekorg = <fs_sales>-ekorg
                          AND lifnr = <fs_sales>-lifnr.
          CONTINUE.
        ENDIF.
      ENDIF.
******END of MOD-004 MOD
    ELSE.

      SELECT * FROM yse_sd_vend_llab APPENDING TABLE gt_ex_vendors
        WHERE ekorg EQ <fs_sales>-ekorg
        AND lifnr EQ <fs_sales>-lifnr.
******begin of MOD-004 MOD
*******begin of MOD-003 MOD
**      if sy-subrc eq 0 and <fs_sales>-werks <> 'CN91'."CD1K973202
      IF sy-subrc EQ 0 .
*******END of MOD-003 MOD
        READ TABLE lt_dtc_branch TRANSPORTING NO FIELDS
         WITH KEY werks = <fs_sales>-werks.
        IF sy-subrc <> 0.
          DELETE gt_sales WHERE ekorg = <fs_sales>-ekorg
                          AND lifnr = <fs_sales>-lifnr.
          CONTINUE.
        ENDIF.
      ELSE.
        IF  <fs_sales>-ekorg = 'CN07'.
          DELETE gt_sales WHERE ekorg = <fs_sales>-ekorg
                          AND lifnr = <fs_sales>-lifnr.
          CONTINUE.
        ENDIF.
      ENDIF.
******END of MOD-004 MOD
    ENDIF.
  ENDLOOP.

  DESCRIBE TABLE gt_sales LINES gv_count.

  IF gv_count = 0.
    IF sy-batch IS INITIAL.
      MESSAGE s001(yse_sdmm_dtc02).
      EXIT.
    ELSE.
      WRITE: 'No sales documents found for involved vendors'. "#EC *
      EXIT.
    ENDIF.
  ENDIF.


*Now we can start processing the sales orders
  LOOP AT gt_sales ASSIGNING <fs_sales>.
    AT NEW vbeln.
      CLEAR: gt_sales_sernr[],
             gt_request[],
             gt_items[],
             gt_return[],
             gt_sernr[].
      LOOP AT gt_sales ASSIGNING <fs_to_do>
            WHERE vbeln EQ <fs_sales>-vbeln.
        PERFORM get_sernrs_of_so_stock.
*Start filling the sales order line item tables to process all line items together per sales order afterwards
        PERFORM fill_processing_tables.
      ENDLOOP.
*Once all line items of current order are processed, create delivery.
      CALL FUNCTION 'BAPI_DELIVERYPROCESSING_EXEC'
        TABLES
          request      = gt_request
          createditems = gt_items
          return       = gt_return.

*Check if any erros occured
      LOOP AT gt_return ASSIGNING <fs_return>
        WHERE type = 'E'.
        WRITE: / <fs_sales>-vbeln, <fs_sales>-posnr, <fs_return>-message.
      ENDLOOP.
******MOD-003 Begain***************************************************
      IF gt_items IS INITIAL AND sy-subrc EQ 0.
*      if sy-subrc eq 0.  "If errors, exit current loop
******MOD-003 End******************************************************
        CONTINUE.
      ELSE.
*       TVO 21/01/2008 -- Since in a below step (FM SD_DELIVERY_UPDATE_PICKING_1)
*       SAP standard wants to delete and re-add the serial numbers, the serial
*       numbers added by BADI YCL_IM_SE_SDMM_DEL_CRE_SP first need to be commited
*       (otherwise, a dump occurs)
        COMMIT WORK AND WAIT.
      ENDIF.
      CLEAR: gt_return[].
*Perform picking of quantity with sernrs
      CLEAR: gt_vbpok, gs_vbkok.
      LOOP AT gt_items ASSIGNING <fs_items>.
        MOVE: <fs_items>-document_numb TO gs_vbkok-vbeln_vl.

        MOVE: <fs_items>-document_numb TO gs_vbpok-vbeln_vl,
              <fs_items>-document_item TO gs_vbpok-posnr_vl,
              <fs_items>-quantity_sales_uom TO gs_vbpok-pikmg,
              <fs_items>-document_numb TO gs_vbpok-vbeln,
              <fs_items>-document_item TO gs_vbpok-posnn.



        APPEND gs_vbpok TO gt_vbpok.
*Assign sernrs to delivery item if any sernr found
        LOOP AT gt_sernr ASSIGNING <fs_sernr>.
          LOOP AT gt_request INTO gs_request WHERE document_numb = <fs_sernr>-rfbel
                                             AND document_item = <fs_sernr>-rfpos.
            LOOP AT gt_items INTO gs_items WHERE id = gs_request-id.
              MOVE: gs_items-document_numb TO <fs_sernr>-rfbel,
                    gs_items-document_item TO <fs_sernr>-rfpos.
            ENDLOOP.
          ENDLOOP.
        ENDLOOP.
      ENDLOOP.
      IF sy-subrc EQ 0.


        CALL FUNCTION 'SD_DELIVERY_UPDATE_PICKING_1'
          EXPORTING
            vbkok_wa        = gs_vbkok
            it_sernr_update = gt_sernr
          TABLES
            vbpok_tab       = gt_vbpok.
        IF sy-subrc EQ 0.                                   "#EC *
          COMMIT WORK AND WAIT.
        ELSE.
          WRITE: / 'Error during picking, no goods issue'.  "#EC *
          CONTINUE.
        ENDIF.

*Next post goods issue
        MOVE: <fs_items>-document_numb TO gv_del,
              <fs_items>-document_numb TO gs_header-deliv_numb,
              <fs_items>-document_numb TO gs_control-deliv_numb,
              'X' TO gs_control-post_gi_flg.

        CLEAR: gt_return.

* begin of insert MOD-001
*...... Check posting date in valid period
        CONCATENATE sy-datum <fs_sales>-bukrs INTO gv_input.
        CALL FUNCTION 'CONVERSION_EXIT_YPSTD_INPUT'
          EXPORTING
            input     = gv_input
          IMPORTING
            output    = gv_wadat
          EXCEPTIONS
            not_found = 1
            OTHERS    = 2.

        CLEAR: gt_return[], ls_deadlines, lt_deadlines[].
        ls_deadlines-deliv_numb = gv_del.
        ls_deadlines-timetype = 'WSHDRWADTI '.
        CONVERT DATE gv_wadat TIME sy-uzeit
                   INTO TIME STAMP ls_deadlines-timestamp_utc TIME ZONE sy-zonlo.
        APPEND ls_deadlines TO lt_deadlines.
* end of insert MOD-001

        CALL FUNCTION 'BAPI_OUTB_DELIVERY_CONFIRM_DEC'
          EXPORTING
            header_data    = gs_header
            header_control = gs_control
            delivery       = gv_del
          TABLES
* begin of change MOD-001
*           RETURN         = gt_return.
            return           = gt_return
            header_deadlines = lt_deadlines.

*Check if any erros occured
        LOOP AT gt_return ASSIGNING <fs_return>
          WHERE type = 'E'.
          WRITE: / <fs_sales>-vbeln, <fs_sales>-posnr, <fs_return>-message.
        ENDLOOP.

        IF sy-subrc EQ 0.  "If errors, exit current loop
          CONTINUE.
        ELSE.  "Delivery create, picking and goods issue was succesfull
          WRITE: / 'Delivery creation, picking and goods issue was succesfull for sales order ',<fs_sales>-vbeln. "#EC *
        ENDIF.

        COMMIT WORK AND WAIT.

      ELSE.  "No delivery to pick
        WRITE: / 'No delivery to pick and issue for sales order ', <fs_sales>-vbeln. "#EC *
      ENDIF.
    ENDAT.

  ENDLOOP.
