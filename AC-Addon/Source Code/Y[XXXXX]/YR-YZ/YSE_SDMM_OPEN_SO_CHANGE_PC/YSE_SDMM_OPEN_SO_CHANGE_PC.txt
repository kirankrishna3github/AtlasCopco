*----------------------------------------------------------------------
* PROGRAM ID           : YSE_SDMM_OPEN_SO_CHANGE_PC                    *
* PROGRAM TITLE        : Coversion of Open SO                          *
* AUTHOR               : Uzzawal Vemparala                             *
* DATE                 : 12/11/2009                                    *
* DEVELOPMENT ID       : CR1149 Part A                                 *
* CHANGE REQUEST NUMBER:                                               *
* PROGRAM DESCRIPTION  :                                               *
*----------------------------------------------------------------------*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
* MOD. NO.|  DATE    | NAME     |CORRECTION NUMBER| CHANGE REFERENCE # *
*----------------------------------------------------------------------*
REPORT  yse_sdmm_open_so_change_pc NO STANDARD PAGE HEADING
                             LINE-SIZE 200.
TABLES: vbak , vbup , vbap ,mara.

*- SELECTION SCREEN---------------------------------------------------
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
SELECT-OPTIONS s_vkorg    FOR  vbak-vkorg OBLIGATORY.
SELECT-OPTIONS s_vtweg    FOR  vbak-vtweg.
SELECT-OPTIONS s_vbeln    FOR  vbak-vbeln.
SELECT-OPTIONS s_auart    FOR  vbak-auart.
SELECT-OPTIONS s_erdat    FOR  vbap-erdat.
SELECTION-SCREEN END OF BLOCK b1 .

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE text-001.
SELECTION-SCREEN BEGIN OF line .
SELECTION-SCREEN: COMMENT 20(65) text-002.
SELECTION-SCREEN END OF line.
SELECTION-SCREEN END OF BLOCK b2 .


*--- Constants
CONSTANTS:
  c_value(10)  TYPE c              VALUE 'Values',
  c_u(1) TYPE c   VALUE 'U',
  c_x(1) TYPE c   VALUE 'X'.

*- Internal tables ---------------------------------------------------
DATA : BEGIN OF it_vbak_vbap OCCURS 0,
       vbeln LIKE vbap-vbeln,
       posnr LIKE vbap-posnr,
       matnr like vbap-matnr,
       vtweg LIKE vbak-vtweg,
       prodh LIKE mara-prdha,
       END OF it_vbak_vbap.

DATA : BEGIN OF it_vbup OCCURS 0,
       vbeln LIKE vbup-vbeln,
       posnr LIKE vbup-posnr,
       END OF it_vbup.

DATA : BEGIN OF it_mara OCCURS 0,
       matnr LIKE mara-matnr,
       prdha LIKE mara-prdha,
       END OF it_mara.

DATA : BEGIN OF it_output OCCURS 0,
       vbeln LIKE vbap-vbeln,
       posnr LIKE vbap-posnr,
       vtweg LIKE vbak-vtweg,
       prodh LIKE vbap-prodh,
       END OF it_output.

DATA : wa_vbak_vbap LIKE it_vbak_vbap,
       wa_vbup LIKE it_vbup,
       wa_output LIKE it_output,
       wa_mara like it_mara,
       v_pgc LIKE yse_prctr_deriv-pgc,
       v_prctr LIKE yse_prctr_deriv-prctr.

field-symbols : <fs_prdha> like it_vbak_vbap.

*&---------------------------------------------------------------------*
*&     Data Declarations
*&---------------------------------------------------------------------*
DATA: BEGIN OF ls_order_header_inx.
        INCLUDE STRUCTURE bapisdh1x.
DATA: END   OF ls_order_header_inx.

DATA:   ls_order_item_in TYPE bapisditm.
DATA:   lt_order_item_in TYPE crmt_bapisditm_t.
DATA:   ls_order_item_inx TYPE bapisditmx.
DATA:   lt_order_item_inx TYPE crmt_bapisditmx_t.

* Return
DATA:  lt_return TYPE STANDARD TABLE OF bapiret2,
       ls_return  TYPE bapiret2,
       et_messages TYPE BAPIRET2_T.

DATA : i_bapiret2 TYPE STANDARD TABLE OF bapiret2
                      INITIAL SIZE 0 WITH HEADER LINE.
*&---------------------------------------------------------------------*
*&     START-OF-SELECTION
*&---------------------------------------------------------------------*
START-OF-SELECTION.

  PERFORM: initialize_data,
           select_data,
           process_data.

*&---------------------------------------------------------------------*
*&      Form  INITIALIZE_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM initialize_data .
  CLEAR : wa_vbak_vbap, wa_vbup.
ENDFORM.                    " INITIALIZE_DATA
*&---------------------------------------------------------------------*
*&      Form  SELECT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM select_data .

  SELECT p~vbeln p~posnr p~matnr k~vtweg
             INTO TABLE it_vbak_vbap
               FROM vbak AS k INNER JOIN vbap AS p
                 ON k~vbeln = p~vbeln
                 WHERE k~vbeln IN s_vbeln
                   AND k~vkorg IN s_vkorg
                   AND k~auart IN s_auart
                   AND k~vtweg IN s_vtweg
                   AND p~erdat IN s_erdat.
  IF sy-subrc = 0.
    SORT it_vbak_vbap BY vbeln posnr.
  ENDIF.
*
if not it_vbak_vbap[] IS INITIAL.
 select matnr prdha from mara
               into table it_mara
                 FOR ALL ENTRIES IN it_vbak_vbap
                 where matnr = it_vbak_vbap-matnr.
 if sy-subrc = 0.
   sort it_mara by matnr.
 endif.
endif.
*
loop at it_vbak_vbap assigning <fs_prdha>.
 clear wa_mara.
 read table it_mara into wa_mara with key matnr = <fs_prdha>-matnr.
 if sy-subrc = 0.
   <fs_prdha>-prodh = wa_mara-prdha.
 endif.
endloop.
*
  CHECK NOT it_vbak_vbap[] IS INITIAL.
  SELECT vbeln posnr FROM vbup
              INTO TABLE it_vbup
               FOR ALL ENTRIES IN it_vbak_vbap
               WHERE vbeln = it_vbak_vbap-vbeln
                 AND posnr = it_vbak_vbap-posnr
                 and gbsta = 'A'.
  IF sy-subrc = 0.
    SORT it_vbup BY vbeln posnr.
  ENDIF.
*
  LOOP AT it_vbup INTO wa_vbup.
    CLEAR wa_vbak_vbap.
    READ TABLE it_vbak_vbap INTO wa_vbak_vbap WITH KEY vbeln = wa_vbup-vbeln
                                                       posnr = wa_vbup-posnr.
    IF sy-subrc = 0.
      wa_output-vbeln = wa_vbak_vbap-vbeln.
      wa_output-posnr = wa_vbak_vbap-posnr.
      wa_output-vtweg = wa_vbak_vbap-vtweg.
      wa_output-prodh = wa_vbak_vbap-prodh.
      APPEND wa_output TO it_output  .
      CLEAR wa_output.
    ENDIF.
  ENDLOOP.
ENDFORM.                    " SELECT_DATA
*&---------------------------------------------------------------------*
*&      Form  PROCESS_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM process_data .
  LOOP AT it_output INTO wa_output.
    CLEAR : v_pgc , v_prctr.

*  Updateflag in the headerrecord:
    ls_order_header_inx-updateflag = c_u.

*   LOOP AT it_vbap.
    ls_order_item_inx-updateflag = c_x.
*     Itemnumber
    ls_order_item_in-itm_number = wa_output-posnr.
    ls_order_item_inx-itm_number = wa_output-posnr.

    v_pgc = wa_output-prodh+4(4).
    SELECT SINGLE prctr INTO v_prctr
                FROM yse_prctr_deriv
                     WHERE vtweg = wa_output-vtweg
                         AND pgc   = v_pgc.
    IF sy-subrc = 0.
* Profit center
      ls_order_item_in-profit_ctr = v_prctr.
    ENDIF.
    ls_order_item_inx-profit_ctr = c_x.

    APPEND ls_order_item_in TO lt_order_item_in.
    APPEND ls_order_item_inx TO lt_order_item_inx.
*    ENDLOOP.

    CALL FUNCTION 'BAPI_SALESORDER_CHANGE'
      EXPORTING
        salesdocument    = wa_output-vbeln
        order_header_inx = ls_order_header_inx
      TABLES
        return           = i_bapiret2
        order_item_in    = lt_order_item_in
        order_item_inx   = lt_order_item_inx.
*
  COMMIT WORK .
  WAIT UP TO 1 SECONDS.
ENDLOOP.

* - DISPLAY ERROR LOG
  IF NOT i_bapiret2[] IS INITIAL.
    PERFORM write_errorlist.
    Perform count_all.
  ENDIF.

ENDFORM.                    " PROCESS_DATA
*&---------------------------------------------------------------------*
*&      Form  WRITE_ERRORLIST
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form WRITE_ERRORLIST .
  CLEAR i_bapiret2.

* WRITE ALL THE BAPI ERRORS

  LOOP AT i_bapiret2 WHERE type = 'E'.
    write: / wa_output-vbeln.
    WRITE: /001 i_bapiret2-type,
            006 i_bapiret2-id,
            028 i_bapiret2-number,
            035 i_bapiret2-message,
            074 i_bapiret2-log_no,
            096 i_bapiret2-log_msg_no,
            104 i_bapiret2-message_v1,
            121 i_bapiret2-message_v2,
            138 i_bapiret2-message_v3,
            155 i_bapiret2-message_v4,
            172 i_bapiret2-parameter,
            206 i_bapiret2-row,
            218 i_bapiret2-field,
            250 i_bapiret2-system.
  ENDLOOP.
  WRITE: /001 sy-uline.

endform.                    " WRITE_ERRORLIST
*&---------------------------------------------------------------------*
*&      Form  COUNT_ALL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form COUNT_ALL .
data : v_count type i.

  LOOP AT i_bapiret2 WHERE type = 'S'.
    v_count = v_count + 1.
  endloop.

  write :/5 'Number of records successfully updated:-' , v_count.
  clear v_count.
endform.                    " COUNT_ALL

*Text symbol text£º

*002:Note : - This report needs to be executed in Background only .
*Selection text£º
*S_AUART:        Sales Order Type
*S_ERDAT:        Creation Date ( Item Level )
*S_VBELN:        Sales Order No.
*S_VKORG:        Sales Org.
*S_VTWEG:        Distribution Channel
