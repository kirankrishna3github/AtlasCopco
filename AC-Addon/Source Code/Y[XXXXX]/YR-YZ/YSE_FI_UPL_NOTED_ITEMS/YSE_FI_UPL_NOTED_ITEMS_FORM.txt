*&---------------------------------------------------------------------*
*&  Include           YSE_FI_UPL_NOTEDITEMS_FORMS                      *
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  READ_FILE
*&---------------------------------------------------------------------*
FORM read_file.
  DATA : w_filename TYPE string.
* Get file name
  SELECT SINGLE *
         FROM usr01
         WHERE bname = sy-uname.

  w_filename = p_fname.

* Load data from file into internal table
  IF p_one = 'X'.

    CALL FUNCTION 'GUI_UPLOAD'
      EXPORTING
        filename                = w_filename
        filetype                = 'ASC'
        has_field_separator     = 'X'
      TABLES
        data_tab                = i_data1
      EXCEPTIONS
        file_open_error         = 1
        file_read_error         = 2
        no_batch                = 3
        gui_refuse_filetransfer = 4
        invalid_type            = 5
        no_authority            = 6
        unknown_error           = 7
        bad_data_format         = 8
        header_not_allowed      = 9
        separator_not_allowed   = 10
        header_too_long         = 11
        unknown_dp_error        = 12
        access_denied           = 13
        dp_out_of_memory        = 14
        disk_full               = 15
        dp_timeout              = 16
        OTHERS                  = 17.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

* Delete first row from file if user indicated that a header line is
* included
    IF p_header = 'X'.
      DELETE i_data1 INDEX 1.
    ENDIF.

    PERFORM copy_data.

  ELSE.

* Load data from file into internal table
    CALL FUNCTION 'GUI_UPLOAD'
      EXPORTING
        filename                = w_filename
        filetype                = 'ASC'
        has_field_separator     = 'X'
      TABLES
        data_tab                = i_data
      EXCEPTIONS
        file_open_error         = 1
        file_read_error         = 2
        no_batch                = 3
        gui_refuse_filetransfer = 4
        invalid_type            = 5
        no_authority            = 6
        unknown_error           = 7
        bad_data_format         = 8
        header_not_allowed      = 9
        separator_not_allowed   = 10
        header_too_long         = 11
        unknown_dp_error        = 12
        access_denied           = 13
        dp_out_of_memory        = 14
        disk_full               = 15
        dp_timeout              = 16
        OTHERS                  = 17.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

* Delete first row from file if user indicated that a header line is
* included
    IF p_header = 'X'.
      DELETE i_data INDEX 1.
    ENDIF.
  ENDIF.

* Convert data if required
  IF p_point = 'X' AND usr01-dcpfm <> 'X'.
    PERFORM convert_into_comma.
  ELSEIF p_comma = 'X' AND usr01-dcpfm = 'X'.
    PERFORM convert_into_point.
  ENDIF.

  PERFORM change_date.

ENDFORM.                    " READ_FILE

*&---------------------------------------------------------------------*
*&      Form  CREATE_BATCH_INPUT
*&---------------------------------------------------------------------*
FORM create_batch_input .
*  Date conversions
  DATA : wl_date(8) TYPE c.
  LOOP AT i_data.
    CLEAR wl_date.
    CASE usr01-datfm.
      WHEN '1'.
        wl_date = i_data-bldat.
        i_data-bldat+0(2) = wl_date+0(2).
        i_data-bldat+2(2) = wl_date+2(2).
        i_data-bldat+4(4) = wl_date+4(4).
        CONCATENATE i_data-bldat+0(2) i_data-bldat+2(2) i_data-bldat+4(4) INTO i_data-bldat_1 SEPARATED BY '.'.
        wl_date = i_data-budat.
        i_data-budat+0(2) = wl_date+0(2).
        i_data-budat+2(2) = wl_date+2(2).
        i_data-budat+4(4) = wl_date+4(4).
        CONCATENATE i_data-budat+0(2) i_data-budat+2(2) i_data-budat+4(4) INTO i_data-budat_1 SEPARATED BY '.'.
        wl_date = i_data-zfbdt.
        i_data-zfbdt+0(2) = wl_date+0(2).
        i_data-zfbdt+2(2) = wl_date+2(2).
        i_data-zfbdt+4(4) = wl_date+4(4).
        CONCATENATE i_data-zfbdt+0(2) i_data-zfbdt+2(2) i_data-zfbdt+4(4) INTO i_data-zfbdt_1 SEPARATED BY '.'.
        wl_date = i_data-vatdate.
        i_data-vatdate+0(2) = wl_date+0(2).
        i_data-vatdate+2(2) = wl_date+2(2).
        i_data-vatdate+4(4) = wl_date+4(4).
        IF i_data-bukrs = 'MRUA'.
          i_data-vatdate_1 = ' '.
        ELSE.
          CONCATENATE i_data-vatdate+0(2) i_data-vatdate+2(2) i_data-vatdate+4(4) INTO i_data-vatdate_1 SEPARATED BY '.'.
        ENDIF.
      WHEN '2' OR '3'.
        wl_date = i_data-bldat.
        i_data-bldat+0(2) = wl_date+0(2).
        i_data-bldat+2(2) = wl_date+2(2).
        i_data-bldat+4(4) = wl_date+4(4).
        CONCATENATE i_data-bldat+0(2) i_data-bldat+2(2) i_data-bldat+4(4) INTO i_data-bldat_1 SEPARATED BY '.'.
        wl_date = i_data-budat.
        i_data-budat+0(2) = wl_date+0(2).
        i_data-budat+2(2) = wl_date+2(2).
        i_data-budat+4(4) = wl_date+4(4).
        CONCATENATE i_data-budat+0(2) i_data-budat+2(2) i_data-budat+4(4) INTO i_data-budat_1 SEPARATED BY '.'.
        wl_date = i_data-zfbdt.
        i_data-zfbdt+0(2) = wl_date+0(2).
        i_data-zfbdt+2(2) = wl_date+2(2).
        i_data-zfbdt+4(4) = wl_date+4(4).
        CONCATENATE i_data-zfbdt+0(2) i_data-zfbdt+2(2) i_data-zfbdt+4(4) INTO i_data-zfbdt_1 SEPARATED BY '.'.
        wl_date = i_data-vatdate.
        i_data-vatdate+0(2) = wl_date+0(2).
        i_data-vatdate+2(2) = wl_date+2(2).
        i_data-vatdate+4(4) = wl_date+4(4).
        IF i_data-bukrs = 'MRUA'.
          i_data-vatdate_1 = ' '.
        ELSE.
          CONCATENATE i_data-vatdate+0(2) i_data-vatdate+2(2) i_data-vatdate+4(4) INTO i_data-vatdate_1 SEPARATED BY '.'.
        ENDIF.
    ENDCASE.
    MODIFY i_data TRANSPORTING bldat_1 budat_1 zfbdt_1 vatdate_1.
  ENDLOOP.

* Call Batch Input session method for F-47 transaction
* Open Batch Input

  PERFORM open_group.

* Insert Batch Input
  LOOP AT i_data.
    PERFORM bdc_dynpro      USING 'SAPMF05A' '0112'.

    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '/00'.
    PERFORM bdc_field       USING 'BKPF-BLDAT'
                                  i_data-bldat_1.
    PERFORM bdc_field       USING 'BKPF-BLART'
                                  i_data-blart.
    PERFORM bdc_field       USING 'BKPF-BUKRS'
                                  i_data-bukrs.
    PERFORM bdc_field       USING 'BKPF-BUDAT'
                                  i_data-budat_1.
    PERFORM bdc_field       USING 'BKPF-MONAT'
                                  i_data-monat.
    PERFORM bdc_field       USING 'BKPF-WAERS'
                                  i_data-waers.
    PERFORM bdc_field       USING 'BKPF-XBLNR'
                                  i_data-xblnr.
    PERFORM bdc_field       USING 'BKPF-BKTXT'
                                  i_data-bktxt.
    PERFORM bdc_field       USING 'RF05A-PARGB'
                                  i_data-pargb.
    PERFORM bdc_field       USING 'BKPF-VATDATE'
                                  i_data-vatdate_1.
    PERFORM bdc_field       USING 'RF05A-NEWKO'
                                  i_data-newko.
    PERFORM bdc_field       USING 'RF05A-ZUMSK'
                                  i_data-zumsk.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '/00'.
    PERFORM bdc_dynpro      USING 'SAPMF05A' '0304'.

    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '/00'.
    PERFORM bdc_field       USING 'BSEG-WRBTR'
                                  i_data-wrbtr.
    PERFORM bdc_field       USING 'BSEG-WMWST'
                                  i_data-wmwst.
    PERFORM bdc_field       USING 'BSEG-MWSKZ'
                                  i_data-mwskz.
    PERFORM bdc_field       USING 'RF05A-XMWST'
                                  i_data-xmwst.
    PERFORM bdc_field       USING 'BSEG-ZFBDT'
                                  i_data-zfbdt_1.
    PERFORM bdc_field       USING 'BSEG-ZLSPR'
                                  i_data-zlspr.
    PERFORM bdc_field       USING 'BSEG-ZLSCH'
                                  i_data-zlsch.
    PERFORM bdc_field       USING 'BSEG-ZBD1P'
                                  i_data-zbd1p.
    PERFORM bdc_field       USING 'BSEG-WSKTO'
                                  i_data-wskto.
    PERFORM bdc_field       USING 'BSEG-EBELN'
                                  i_data-ebeln.
    PERFORM bdc_field       USING 'BSEG-PRCTR'
                                  i_data-prctr.
    PERFORM bdc_field       USING 'BSEG-ZUONR'
                                  i_data-zuonr.
    PERFORM bdc_field       USING 'BSEG-SGTXT'
                                  i_data-sgtxt.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '=ZK'.
    PERFORM bdc_dynpro      USING 'SAPMF05A' '0332'.
    PERFORM bdc_field       USING 'BDC_CURSOR'
                                  'BSEG-BVTYP'.
    PERFORM bdc_field       USING 'BSEG-BVTYP'
                                  i_data-bvtyp.
    PERFORM bdc_field       USING 'BSEG-HBKID'
                                  i_data-hbkid.
    PERFORM bdc_field       USING 'BSEG-XREF1'
                                  i_data-xref1.
    PERFORM bdc_field       USING 'BSEG-XREF2'
                                  i_data-xref2.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '=BU'.
    PERFORM bdc_transaction USING 'F-47'.

    CLEAR: bdcdata.
    REFRESH: bdcdata[].
  ENDLOOP.

* Closing Batch Input
  PERFORM close_group.
  PERFORM release_bdc. "+MOD-001
* Call Transaction Method
   IF SESSION IS INITIAL. "+MOD-001
* Declare local variable
  DATA: gv_mode(1)     TYPE c VALUE 'N'.
* Clear and refresh local internal table
  REFRESH: bdcdata[].
  CLEAR: bdcdata.
*  Begin of Insertion by MOD-001
  DELETE ADJACENT DUPLICATES FROM i_messtab COMPARING ALL FIELDS.
  WRITE:/ 'List of error messages:'(009) COLOR COL_NEGATIVE.
*  End of Insertion by MOD-001
* Peform Call transaction method

  LOOP AT i_data.
    PERFORM bdc_dynpro      USING 'SAPMF05A' '0112'.

    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '/00'.
    PERFORM bdc_field       USING 'BKPF-BLDAT'
                                  i_data-bldat_1.
    PERFORM bdc_field       USING 'BKPF-BLART'
                                  i_data-blart.
    PERFORM bdc_field       USING 'BKPF-BUKRS'
                                  i_data-bukrs.
    PERFORM bdc_field       USING 'BKPF-BUDAT'
                                  i_data-budat_1.
    PERFORM bdc_field       USING 'BKPF-MONAT'
                                  i_data-monat.
    PERFORM bdc_field       USING 'BKPF-WAERS'
                                  i_data-waers.
    PERFORM bdc_field       USING 'BKPF-XBLNR'
                                  i_data-xblnr.
    PERFORM bdc_field       USING 'BKPF-BKTXT'
                                  i_data-bktxt.
    PERFORM bdc_field       USING 'RF05A-PARGB'
                                  i_data-pargb.
    PERFORM bdc_field       USING 'BKPF-VATDATE'
                                  i_data-vatdate_1.
    PERFORM bdc_field       USING 'RF05A-NEWKO'
                                  i_data-newko.
    PERFORM bdc_field       USING 'RF05A-ZUMSK'
                                  i_data-zumsk.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '/00'.
    PERFORM bdc_dynpro      USING 'SAPMF05A' '0304'.

    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '/00'.
    PERFORM bdc_field       USING 'BSEG-WRBTR'
                                  i_data-wrbtr.
    PERFORM bdc_field       USING 'BSEG-WMWST'
                                  i_data-wmwst.
    PERFORM bdc_field       USING 'BSEG-MWSKZ'
                                  i_data-mwskz.
    PERFORM bdc_field       USING 'RF05A-XMWST'
                                  i_data-xmwst.
    PERFORM bdc_field       USING 'BSEG-ZFBDT'
                                  i_data-zfbdt_1.
    PERFORM bdc_field       USING 'BSEG-ZLSPR'
                                  i_data-zlspr.
    PERFORM bdc_field       USING 'BSEG-ZLSCH'
                                  i_data-zlsch.
    PERFORM bdc_field       USING 'BSEG-ZBD1P'
                                  i_data-zbd1p.
    PERFORM bdc_field       USING 'BSEG-WSKTO'
                                  i_data-wskto.
    PERFORM bdc_field       USING 'BSEG-EBELN'
                                  i_data-ebeln.
    PERFORM bdc_field       USING 'BSEG-PRCTR'
                                  i_data-prctr.
    PERFORM bdc_field       USING 'BSEG-ZUONR'
                                  i_data-zuonr.
    PERFORM bdc_field       USING 'BSEG-SGTXT'
                                  i_data-sgtxt.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '=ZK'.
    PERFORM bdc_dynpro      USING 'SAPMF05A' '0332'.
    PERFORM bdc_field       USING 'BDC_CURSOR'
                                  'BSEG-BVTYP'.
    PERFORM bdc_field       USING 'BSEG-BVTYP'
                                  i_data-bvtyp.
    PERFORM bdc_field       USING 'BSEG-HBKID'
                                  i_data-hbkid.
    PERFORM bdc_field       USING 'BSEG-XREF1'
                                  i_data-xref1.
    PERFORM bdc_field       USING 'BSEG-XREF2'
                                  i_data-xref2.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '=BU'.
    CALL TRANSACTION 'F-47' USING bdcdata
                            MODE  gv_mode
                            UPDATE 'S'
                            MESSAGES INTO i_messtab. "+MOD-001
*     Begin of Insertion by MOD-001
    IF sy-subrc = 0.
*    Do Nothing.
    ELSE.
      NEW-LINE.
      LOOP AT i_messtab INTO wa_messtab WHERE msgtyp = 'E'.
        CALL FUNCTION 'FORMAT_MESSAGE'
          EXPORTING
            id        = wa_messtab-msgid
            lang      = sy-langu
            no        = wa_messtab-msgnr
          IMPORTING
            msg       = wa_errors-message
          EXCEPTIONS
            not_found = 1
            OTHERS    = 2.
        IF sy-subrc <> 0.
* DO NOTHING
        ENDIF.
        CONCATENATE lv_message_01
                    wa_errors-message
                    wa_messtab-msgv1
                    INTO lv_message_01
                                  SEPARATED BY space.
        CLEAR wa_messtab.
      ENDLOOP.
      CONCATENATE lv_message_01
                  lc_str01
                  i_data-xblnr
             INTO lv_message_01 SEPARATED BY space.
        WRITE / : lv_message_01.
        CLEAR lv_message_01.
      REFRESH: i_messtab[].
    ENDIF.
*  End of Insertion by MOD-001
    CLEAR: bdcdata.
    REFRESH: bdcdata[].
  ENDLOOP.
ENDIF.  "+MOD-001
ENDFORM.                    " CREATE_BATCH_INPUT

*&---------------------------------------------------------------------*
*&      Form  CONVERT_INTO_COMMA
*&---------------------------------------------------------------------*
FORM convert_into_comma.

  LOOP AT i_data.
    REPLACE ALL OCCURRENCES OF '.' IN i_data-wrbtr WITH '/'.
    REPLACE ALL OCCURRENCES OF ',' IN i_data-wrbtr WITH '.'.
    REPLACE ALL OCCURRENCES OF '/' IN i_data-wrbtr WITH ','.
    REPLACE ALL OCCURRENCES OF '.' IN i_data-wmwst WITH '/'.
    REPLACE ALL OCCURRENCES OF ',' IN i_data-wmwst WITH '.'.
    REPLACE ALL OCCURRENCES OF '/' IN i_data-wmwst WITH ','.
    MODIFY i_data INDEX sy-tabix.
  ENDLOOP.

ENDFORM.                    " CONVERT_INTO_COMMA
*&---------------------------------------------------------------------*
*&      FORM  CONVERT_INTO_POINT
*&---------------------------------------------------------------------*
FORM convert_into_point.

  LOOP AT i_data.
    REPLACE ALL OCCURRENCES OF ',' IN i_data-wrbtr WITH '/'.
    REPLACE ALL OCCURRENCES OF '.' IN i_data-wrbtr WITH ','.
    REPLACE ALL OCCURRENCES OF '/' IN i_data-wrbtr WITH '.'.
    REPLACE ALL OCCURRENCES OF ',' IN i_data-wmwst WITH '/'.
    REPLACE ALL OCCURRENCES OF '.' IN i_data-wmwst WITH ','.
    REPLACE ALL OCCURRENCES OF '/' IN i_data-wmwst WITH '.'.
    MODIFY i_data INDEX sy-tabix.
  ENDLOOP.

ENDFORM.                    " CONVERT_INTO_POINT

*&---------------------------------------------------------------------*
*&      Form  CHANGE_DATE
*&---------------------------------------------------------------------*
FORM change_date.

  DATA : wl_date(8) TYPE c.

  LOOP AT i_data.

    CASE usr01-datfm.
      WHEN '1'.

        wl_date = i_data-bldat.
        i_data-bldat+0(2) = wl_date+6(2).
        i_data-bldat+2(2) = wl_date+4(2).
        i_data-bldat+4(4) = wl_date+0(4).

        wl_date = i_data-budat.
        i_data-budat+0(2) = wl_date+6(2).
        i_data-budat+2(2) = wl_date+4(2).
        i_data-budat+4(4) = wl_date+0(4).

        wl_date = i_data-zfbdt.
        i_data-zfbdt+0(2) = wl_date+6(2).
        i_data-zfbdt+2(2) = wl_date+4(2).
        i_data-zfbdt+4(4) = wl_date+0(4).

        wl_date = i_data-vatdate.
        i_data-vatdate+0(2) = wl_date+6(2).
        i_data-vatdate+2(2) = wl_date+4(2).
        i_data-vatdate+4(4) = wl_date+0(4).

      WHEN '2' OR '3'.
        wl_date = i_data-bldat.
        i_data-bldat+0(2) = wl_date+4(2).
        i_data-bldat+2(2) = wl_date+6(2).
        i_data-bldat+4(4) = wl_date+0(4).

        wl_date = i_data-budat.
        i_data-budat+0(2) = wl_date+4(2).
        i_data-budat+2(2) = wl_date+6(2).
        i_data-budat+4(4) = wl_date+0(4).

        wl_date = i_data-zfbdt.
        i_data-zfbdt+0(2) = wl_date+4(2).
        i_data-zfbdt+2(2) = wl_date+6(2).
        i_data-zfbdt+4(4) = wl_date+0(4).

        wl_date = i_data-vatdate.
        i_data-vatdate+0(2) = wl_date+4(2).
        i_data-vatdate+2(2) = wl_date+6(2).
        i_data-vatdate+4(4) = wl_date+0(4).

    ENDCASE.
    MODIFY i_data TRANSPORTING bldat budat zfbdt vatdate.

  ENDLOOP.

ENDFORM.                    " CHANGE_DATE

*&---------------------------------------------------------------------*
*&      Form  copy_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM copy_data.

  REFRESH i_data.
  CLEAR i_data.

  LOOP AT i_data1.
    MOVE-CORRESPONDING i_data1 TO i_data.
    APPEND i_data.
    CLEAR i_data.
  ENDLOOP.

* delete empty lines
  LOOP AT i_data.
    IF i_data-blart IS INITIAL.
      DELETE i_data.
    ENDIF.
  ENDLOOP.

ENDFORM.                    "copy_data
*&---------------------------------------------------------------------*
*&      Form  BDC_DYNPRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0315   text
*      -->P_0316   text
*----------------------------------------------------------------------*
FORM bdc_dynpro  USING program dynpro.
  CLEAR bdcdata.
  bdcdata-program  = program.
  bdcdata-dynpro   = dynpro.
  bdcdata-dynbegin = 'X'.
  APPEND bdcdata.
ENDFORM.                    " BDC_DYNPRO
*&---------------------------------------------------------------------*
*&      Form  BDC_FIELD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0320   text
*      -->P_I_DATA_ZUMSK  text
*----------------------------------------------------------------------*
FORM bdc_field  USING  fnam fval.
  IF fval <> nodata.
    CLEAR bdcdata.
    bdcdata-fnam = fnam.
    bdcdata-fval = fval.
    APPEND bdcdata.
  ENDIF.
ENDFORM.                    " BDC_FIELD
*&---------------------------------------------------------------------*
*&      Form  BDC_TRANSACTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0470   text
*----------------------------------------------------------------------*
FORM bdc_transaction  USING tcode.
  DATA: l_mstring(480).
  DATA: l_subrc LIKE sy-subrc.
* batch input session
  IF session = 'X'.
    CALL FUNCTION 'BDC_INSERT'
      EXPORTING
        tcode     = tcode
      TABLES
        dynprotab = bdcdata.
    IF smalllog <> 'X'.
      WRITE: / 'BDC_INSERT'(i03),
               tcode,
               'returncode:'(i05),
               sy-subrc,
               'RECORD:',
               sy-index.
    ENDIF.
  ENDIF.
ENDFORM.                    " BDC_TRANSACTION
*&---------------------------------------------------------------------*
*&      Form  OPEN_GROUP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM open_group .
  IF session = 'X'.
    SKIP.
    WRITE: /(20) 'Create group'(i01), 'NOTED_ITEMS'.
    SKIP.
*   open batchinput group
    CALL FUNCTION 'BDC_OPEN_GROUP'
      EXPORTING
        client   = sy-mandt
        group    = 'NOTED_ITEMS'
        user     = user
        keep     = keep
        holddate = holddate.
    WRITE: /(30) 'BDC_OPEN_GROUP'(i02),
            (12) 'returncode:'(i05),
                 sy-subrc.
  ENDIF.
ENDFORM.                    " OPEN_GROUP

*&---------------------------------------------------------------------*
*&      Form  CLOSE_GROUP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM close_group .
  IF session = 'X'.
*   close batchinput group
    CALL FUNCTION 'BDC_CLOSE_GROUP'.
    WRITE: /(30) 'BDC_CLOSE_GROUP'(i04),
            (12) 'returncode:'(i05),
                 sy-subrc.
  ELSE.
    IF e_group_opened = 'X'.
      CALL FUNCTION 'BDC_CLOSE_GROUP'.
      WRITE: /.
      WRITE: /(30) 'Fehlermappe wurde erzeugt'(i06).
      e_group_opened = ' '.
    ENDIF.
  ENDIF.
ENDFORM.                    " CLOSE_GROUP
*    Begin of Insertion by MOD-001
FORM release_bdc.
  CALL FUNCTION 'JOB_OPEN'
    EXPORTING
      jobname                = lv_name
    IMPORTING
      JOBCOUNT               = lv_number
    EXCEPTIONS
      CANT_CREATE_JOB        = 1
      INVALID_JOB_DATA       = 2
      JOBNAME_MISSING        = 3
      OTHERS                 = 4.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    SUBMIT rsbdcsub WITH mappe EQ p_sess
                    WITH von   EQ sy-datum
                    WITH bis   EQ sy-datum
                    VIA JOB lv_name NUMBER lv_number
                    AND RETURN.

    CALL FUNCTION 'JOB_CLOSE'
        EXPORTING
           jobcount                          = lv_number
           jobname                           = lv_name
           STRTIMMED                         = 'X'
        EXCEPTIONS
           CANT_START_IMMEDIATE              = 1
           INVALID_STARTDATE                 = 2
           JOBNAME_MISSING                   = 3
           JOB_CLOSE_FAILED                  = 4
           JOB_NOSTEPS                       = 5
           JOB_NOTEX                         = 6
           LOCK_FAILED                       = 7
           INVALID_TARGET                    = 8
           OTHERS                            = 9.

      IF sy-subrc <> 0.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
              WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.
ENDIF.
ENDFORM.
*End of Insertion by MOD-001
