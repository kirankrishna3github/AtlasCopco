* PROGRAM TITLE        : AM: Create Z5/X5 Notifications                *
* AUTHOR               : Geert Rutten                                  *
* DATE                 : 21/10/2008                                    *
* DEVELOPMENT ID       : All-CR0300                                    *
*                                                                      *
* CHANGE REQUEST NUMBER: CD1K944136                                    *
* PROGRAM DESCRIPTION: Depending on the next visit date coming from the*
* MAM it will create Z5/X5 notifications in batch                      *
*----------------------------------------------------------------------*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
* MOD. NO.|  DATE      | NAME     |CORRECTION NUMBER| CHANGE REFERENCE *
*----------------------------------------------------------------------*
*
************************************************************************

REPORT  YSE_CRE_NOTIF_Z5_X5.


tables: afru,afih,yam_Z5X5.


SELECTION-SCREEN : BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
SELECT-OPTIONS: s_aufnr FOR afru-aufnr .
SELECT-OPTIONS: s_ersda FOR afru-ersda .
SELECT-OPTIONS: s_werks FOR afru-werks.
SELECTION-SCREEN: END OF BLOCK b1.

TYPES: BEGIN OF struct_Z5X5,
       MANDT      TYPE sy-mandt,
       aufnr      TYPE AFRU-AUFNR,
       ersda      TYPE AFRU-ERSDA,
       RUECK      TYPE AFRU-RUECK,
       RMZHL      TYPE AFRU-RMZHL,
       EQUNR      TYPE AFIH-EQUNR,
       LTXA1      TYPE AFRU-LTXA1,
       WERKS      TYPE AFRU-WERKS,
       NOTIF      TYPE C,
       END OF struct_Z5X5.

DATA: wa_z5x5 TYPE struct_z5x5.

DATA: GV_OBJNR LIKE JEST-OBJNR.
DATA: l_bukrs TYPE BUKRS.
DATA: gv_ctam TYPE C.

DATA: gt_msgtab TYPE TABLE OF bdcmsgcoll WITH HEADER LINE.
DATA: g_qmnum           TYPE qmnum,
      g_mode(1)         type c value 'N'.
DATA: i_bdcdata LIKE bdcdata OCCURS 0 WITH HEADER LINE,
      i_Z5X5 LIKE YAM_Z5X5 OCCURS 0 WITH HEADER LINE,
      struct_bdcdata TYPE bdcdata.

DATA: it_Z5X5 LIKE YAM_Z5X5 OCCURS 0 WITH HEADER LINE.

DATA: BEGIN OF gt_equi OCCURS 0,
        aufnr TYPE aufnr,
        bukrs LIKE iloa-bukrs,
        qmart type qmart,
      END OF gt_equi.

DATA: BEGIN OF gt_ok OCCURS 0,
        qmnum TYPE qmnum,
        aufnr TYPE aufnr,
      END OF gt_ok.

DATA: BEGIN OF gt_messtab OCCURS 0,
   tcode TYPE bdc_tcode,
   dyname TYPE bdc_module,
   dynumb TYPE bdc_dynnr,
   msgtyp TYPE bdc_mart,
   msgspra TYPE bdc_spras,
   msgid TYPE bdc_mid,
   msgnr TYPE bdc_mnr,
   msgv1 TYPE bdc_vtext1,
   msgv2 TYPE bdc_vtext1,
   msgv3 TYPE bdc_vtext1,
   msgv4 TYPE bdc_vtext1,
   env TYPE   bdc_akt,
   fldname TYPE fnam_____4,
   aufnr TYPE aufnr,
 END OF gt_messtab.

DATA:  g_numnotifcr      TYPE i.              "notification numberr

CONSTANTS : c_trans        LIKE tstc-tcode   VALUE 'IW51',
            c_qmart        TYPE qmart        VALUE 'Z5',
            c_qmart_SEED   TYPE qmart        VALUE 'X5',
            c_priok        like VIQMEL-priok VALUE '5'.






*---------------------------------------------------------------------*
* Initialization                                                      *
*---------------------------------------------------------------------*
INITIALIZATION.

  REFRESH : gt_messtab,
            gt_ok.


START-OF-SELECTION.

PERFORM selec_orders.


FORM selec_orders.

* Select Confirmations data with confirmation text "NVD"
* and write them in table YAM_Z5X5

  SELECT aufnr rueck rmzhl ersda ltxa1 werks
       INTO   (i_Z5X5-YAUFNR, i_Z5X5-YRUECK, i_Z5X5-YRMZHL,
               i_Z5X5-YERSDA, i_Z5X5-YLTXA1, i_Z5X5-YWERKS)
       FROM afru
       WHERE aufnr IN s_aufnr and
             werks in s_werks and
             ersda in s_ersda and
             ltxa1 like 'NVD%'.
  endselect.

IF i_Z5X5[] IS NOT INITIAL.

SORT i_Z5X5 BY YAUFNR.

LOOP AT i_Z5X5.

* if order not found in YAM_Z5X5 add it to the table

   select single * from yam_Z5X5
          where Yaufnr = i_Z5X5-YAUFNR.
   IF sy-subrc NE 0.
          wa_Z5X5-MANDT = sy-mandt.
          wa_Z5X5-aufnr = i_Z5X5-YAUFNR.
          wa_Z5X5-ersda = i_Z5X5-YERSDA.
          wa_Z5X5-RUECK = i_Z5X5-YRUECK.
          wa_Z5X5-RMZHL = i_Z5X5-YRMZHL.
          wa_Z5X5-WERKS = i_Z5X5-YWERKS.
          wa_Z5X5-LTXA1 = i_Z5X5-YLTXA1+3(15).
          wa_Z5X5-NOTIF = ' '.
        SELECT single equnr from afih into wa_Z5X5-EQUNR
                                  where aufnr = i_Z5X5-YAUFNR.

          INSERT INTO yam_Z5X5 VALUES wa_Z5X5.
    ELSE.
     continue.
    ENDIF.

ENDLOOP.

* Read all orders of tabel YAM_Z5X5
* for which no notification has been created yet and check if the
* order is TECO or CLOSED... If TECO or CLOSED -> create notification
* and write a 'X'

  SELECT * FROM YAM_Z5X5
       INTO CORRESPONDING FIELDS OF it_Z5X5
       WHERE YNOTIF <> 'X'.
* ENDSELECT.

* OP AT it_Z5X5.

* Check if order is closed or TECO
    CONCATENATE 'OR' it_Z5X5-YAUFNR INTO GV_OBJNR.
    CALL FUNCTION 'STATUS_CHECK'
      EXPORTING
        OBJNR                   = GV_OBJNR
        STATUS                  = 'I0045'
      EXCEPTIONS
        OBJECT_NOT_FOUND        = 1
        STATUS_NOT_ACTIVE       = 2
        OTHERS                  = 3.

    IF SY-SUBRC NE 0.
      CALL FUNCTION 'STATUS_CHECK'
        EXPORTING
          OBJNR                   = GV_OBJNR
          STATUS                  = 'I0046'
        EXCEPTIONS
          OBJECT_NOT_FOUND        = 1
          STATUS_NOT_ACTIVE       = 2
          OTHERS                  = 3.

      IF SY-SUBRC NE 0.
        continue. " not TECO or CLOSE
      ENDIF.
    ENDIF.

* Creation of notification
Perform crea_notif.

* Indicate notification is created
it_Z5X5-YNOTIF = 'X'.
MODIFY it_Z5X5.

ENDSELECT.
ENDIF.  " i_Z5X5 is not initial (no NVD records selected)
ENDFORM.


FORM crea_notif.

  PERFORM bdc_filldata.

  REFRESH gt_msgtab.
  CALL TRANSACTION c_trans USING i_bdcdata MODE g_mode UPDATE 'S'
  MESSAGES INTO gt_msgtab.
  IF sy-subrc NE 0.
    LOOP AT gt_msgtab.
      MOVE-CORRESPONDING gt_msgtab TO gt_messtab.
      MOVE it_Z5X5-Yaufnr TO gt_messtab-aufnr.
      APPEND gt_messtab.
      CLEAR gt_messtab.
    ENDLOOP.
  ELSE.
    GET PARAMETER ID 'IQM' FIELD g_qmnum.
    MOVE g_qmnum TO gt_ok-qmnum.
    MOVE it_Z5X5-yaufnr TO gt_ok-aufnr.
    APPEND gt_ok.
    CLEAR gt_ok.
    g_numnotifcr = g_numnotifcr + 1.
  ENDIF.

  REFRESH i_bdcdata.
ENDFORM.            "crea_notif.

FORM bdc_filldata .
*first screen
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPLIQS0' '0100' 'X' ' ' ' '
                     CHANGING struct_bdcdata.
  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Check if SEED or AM
  select single bukrs into l_bukrs
    from YAM_CTAM_CCODES where bukrs = it_Z5X5-Ywerks.

  if sy-subrc = 0.
    gv_ctam = 'Z5'.
  else.
    gv_ctam = 'X5'.
  endif.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'RIWO00-QMART'
                                      gv_ctam
                     CHANGING struct_bdcdata.
  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '/00'
                      CHANGING struct_bdcdata.
  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

*basic data


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPLIQS0' '7200' 'X' ' ' ' '
                     CHANGING struct_bdcdata.
  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                  USING: '' '' '' 'VIQMEL-QMTXT' c_priok "p_qmtxt
                  CHANGING struct_bdcdata.
  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                  USING: '' '' '' 'VIQMEL-PRIOK' c_priok
                  CHANGING struct_bdcdata.
  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                  USING: '' '' '' 'VIQMEL-STRMN' c_priok
                  CHANGING struct_bdcdata.
  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                  USING: '' '' '' 'RIWO1-EQUNR' it_Z5X5-Yequnr
                  CHANGING struct_bdcdata.
  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

ENDFORM.        "bdc_filldata

*Text symbol text£º
*001:CREATE Z5/X5 NOTIFICATION
*T02:SE : Create FSE notifications
*T03:Number of equipments requested  :
*T04:Number of notifications created :
*T05:Succesfully created notifications
*T06:No notification created for following equipments
*T07:Equipment          Serial             Notification

*T08:Equipment          Serial             Error description
*Selection text£º
*S_AUFNR:D       .
*S_ERSDA:D       .
*S_WERKS:D       .
