*&---------------------------------------------------------------------*
*& Report  YSE_OTC_DW_ORLOG
*&
*&---------------------------------------------------------------------*
*& NOTE ! Table ZTDWINPUT needs to be updated (via SE16) with TAX and COST
*&        parameters.
*&---------------------------------------------------------------------*

REPORT  YSE_OTC_DW_ORLOG.

TABLES: ztdworlog.

TYPES: BEGIN OF ts_dw_orlog,

    objectclas TYPE cdhdr-objectclas,
    objectid   TYPE cdhdr-objectid,
    changenr   TYPE cdhdr-changenr,
    vbeln      TYPE ztdworlog-vbeln, " Pri
    posnr      TYPE ztdworlog-posnr, " Pri
    tstamps    TYPE ztdworlog-tstamps, " Pri
    chngind    TYPE ztdworlog-chngind, " Pri
    linetype   TYPE ztdworlog-linetype, " Pri
    knumv      TYPE ztdworlog-knumv,

    sortno     TYPE ztdworlog-sortno,
    sortord    TYPE ztdworlog-sortord,
    create_c   TYPE ztdworlog-create_c,
    modif_m    TYPE ztdworlog-modif_m,
    tabkey     TYPE ztdworlog-tabkey,
    date_c     TYPE ztdworlog-date_c,
    time_c     TYPE ztdworlog-time_c,
    date_m     TYPE ztdworlog-date_m,
    time_m     TYPE ztdworlog-time_m,
    unit_old   TYPE ztdworlog-unit_old,
    unit_new   TYPE ztdworlog-unit_new,
    cuky_old   TYPE ztdworlog-cuky_old,
    cuky_new   TYPE ztdworlog-cuky_new,
    value_new  TYPE ztdworlog-value_new,
    value_old  TYPE ztdworlog-value_old,
    kwmeng     TYPE ztdworlog-kwmeng,
    zmeng     TYPE vbap-zmeng,

    netwr      TYPE ztdworlog-netwr,
    kzwi1      TYPE ztdworlog-kzwi1,
    kzwi4      TYPE ztdworlog-kzwi4,
    kzwi3      TYPE vbap-kzwi3,
    kzwi6      TYPE vbap-kzwi6,
    waerk      TYPE ztdworlog-waerk,
    matnr      TYPE ztdworlog-matnr,
    prodh      TYPE ztdworlog-prodh,
    umvkz      TYPE ztdworlog-umvkz,
    umvkn      TYPE ztdworlog-umvkn,
    meins      TYPE ztdworlog-meins,
    vkorg      TYPE ztdworlog-vkorg,
    BUKRS_VF   TYPE ztdworlog-BUKRS_VF,
    ORDER_TYPE TYPE ztdworlog-ORDER_TYPE,
    COST       TYPE ztdworlog-COST,
    TAX   TYPE ztdworlog-TAX,
    creation_date TYPE ztdworlog-creation_date,
    creation_time TYPE ztdworlog-creation_time,
    creation_name TYPE ztdworlog-creation_name,

    stdcost         TYPE ztdworlog-stdcost,
    stdcost_waers   TYPE ztdworlog-stdcost_waers,
*    stdcost1        TYPE ztdworlog-stdcost1,
*    stdcost_waers1  TYPE ztdworlog-stdcost_waers1,
*    stdcost2        TYPE ztdworlog-stdcost2,
*    stdcost_waers2  TYPE ztdworlog-stdcost_waers2,

    r_curr_old TYPE ztdworlog-r_curr_old,
    r_curr_new TYPE ztdworlog-r_curr_new,
    r_qty      TYPE ztdworlog-r_qty,
    r_value    TYPE ztdworlog-r_value,
    r_date     TYPE ztdworlog-r_date,
    r_time     TYPE ztdworlog-r_time,
    SOURCE     TYPE ztdworlog-SOURCE,

 END OF ts_dw_orlog,

 BEGIN OF ts_dw_orlog_res,

*    objectclas TYPE cdhdr-objectclas,
*    objectid   TYPE cdhdr-objectid,
*    changenr   TYPE cdhdr-changenr,
    vbeln      TYPE ztdworlog-vbeln, " Pri
    posnr      TYPE ztdworlog-posnr, " Pri
    tstamps    TYPE ztdworlog-tstamps, " Pri
    chngind    TYPE ztdworlog-chngind, " Pri
    linetype   TYPE ztdworlog-linetype, " Pri
    knumv      TYPE ztdworlog-knumv,

    sortno     TYPE ztdworlog-sortno,
    sortord    TYPE ztdworlog-sortord,
    create_c   TYPE ztdworlog-create_c,
    modif_m    TYPE ztdworlog-modif_m,
    tabkey     TYPE ztdworlog-tabkey,
    date_c     TYPE ztdworlog-date_c,
    time_c     TYPE ztdworlog-time_c,
    date_m     TYPE ztdworlog-date_m,
    time_m     TYPE ztdworlog-time_m,
    unit_old   TYPE ztdworlog-unit_old,
    unit_new   TYPE ztdworlog-unit_new,
    cuky_old   TYPE ztdworlog-cuky_old,
    cuky_new   TYPE ztdworlog-cuky_new,
    value_new  TYPE ztdworlog-value_new,
    value_old  TYPE ztdworlog-value_old,
    kwmeng     TYPE ztdworlog-kwmeng,
    netwr      TYPE ztdworlog-netwr,
    kzwi1      TYPE ztdworlog-kzwi1,
    kzwi4      TYPE ztdworlog-kzwi4,
    waerk      TYPE ztdworlog-waerk,
    matnr      TYPE ztdworlog-matnr,
    prodh      TYPE ztdworlog-prodh,
    umvkz      TYPE ztdworlog-umvkz,
    umvkn      TYPE ztdworlog-umvkn,
    meins      TYPE ztdworlog-meins,
    vkorg      TYPE ztdworlog-vkorg,
    BUKRS_VF   TYPE ztdworlog-BUKRS_VF,
    ORDER_TYPE TYPE ztdworlog-ORDER_TYPE,
    COST       TYPE ztdworlog-COST,
    TAX   TYPE ztdworlog-TAX,

    creation_date TYPE ztdworlog-creation_date,
    creation_time TYPE ztdworlog-creation_time,
    creation_name TYPE ztdworlog-creation_name,

    stdcost         TYPE ztdworlog-stdcost,
    stdcost_waers   TYPE ztdworlog-stdcost_waers,
*    stdcost1        TYPE ztdworlog-stdcost1,
*    stdcost_waers1  TYPE ztdworlog-stdcost_waers1,
*    stdcost2        TYPE ztdworlog-stdcost2,
*    stdcost_waers2  TYPE ztdworlog-stdcost_waers2,



    r_curr_old TYPE ztdworlog-r_curr_old,
    r_curr_new TYPE ztdworlog-r_curr_new,
    r_qty      TYPE ztdworlog-r_qty,
    r_value    TYPE ztdworlog-r_value,
    r_date     TYPE ztdworlog-r_date,
    r_time     TYPE ztdworlog-r_time,
    SOURCE     TYPE ztdworlog-SOURCE,

 END OF ts_dw_orlog_res,


 BEGIN OF ts_dw_stdcost,

    stdcost TYPE ztdworlog-stdcost,
    stdcost_waers TYPE ztdworlog-stdcost_waers,
*    stdcost1 TYPE ztdworlog-stdcost1,
*    stdcost_waers1 TYPE ztdworlog-stdcost_waers1,
*    stdcost2 TYPE ztdworlog-stdcost2,
*    stdcost_waers2 TYPE ztdworlog-stdcost_waers2,
 END OF ts_dw_stdcost.

*     work
DATA: lt_dw_orlog_wk TYPE STANDARD TABLE OF ts_dw_orlog,
      wa_dw_orlog_wk TYPE ts_dw_orlog,
      wa_dw_orlog_wk1 TYPE ts_dw_orlog,
      wa_dw_orlog_wk2 TYPE ts_dw_orlog,
      wa_dw_stdcost_wk TYPE ts_dw_stdcost,


*     result
      lt_dw_orlog_rt TYPE STANDARD TABLE OF ztdworlog,
      wa_dw_orlog_rt TYPE ztdworlog,


      wa_dw_orlog_wk_c TYPE ts_dw_orlog_res,
      wa_dw_orlog_wk_m TYPE ts_dw_orlog_res,
      wa_dw_orlog_wk_e TYPE ts_dw_orlog_res,

*     NEEDERS
      wa_statnr(15) TYPE n,
      wa_kwmeng     TYPE ztdworlog-kwmeng,
      wa_zmeng      TYPE vbap-zmeng,

      wa_tstamps    TYPE string,
      wa_sort_1     TYPE string,
      wa_sort_2     TYPE string,
      wa_chngind_1  TYPE ztdworlog-chngind,
      wa_chngind_2  TYPE ztdworlog-chngind,
      wa_dw_orlog_trash TYPE ts_dw_orlog_res,
      wa_value_temp  TYPE ztdworlog-value_old.
.

SELECTION-SCREEN BEGIN OF BLOCK bl2 WITH FRAME.
SELECT-OPTIONS: so_date FOR ztdworlog-date_m,
                so_vbeln FOR ztdworlog-vbeln.
PARAMETERS:     del_date      LIKE ztdworlog-date_m OBLIGATORY.




SELECTION-SCREEN END OF BLOCK bl2.

START-OF-SELECTION.

* delete rows from table before adding the same rows *

  DELETE FROM ztdworlog

   WHERE
      ztdworlog~date_m IN so_date
  AND ztdworlog~vbeln IN so_vbeln.


* delete rows in the beginning of incomming orders  *
* this will avoid to big table, try to keep as much *
* order lines a possible                            *
* if

  DELETE FROM ztdworlog

   WHERE
      ztdworlog~date_m LT del_date.


* Part 1 Look in change log and pick out intersting rows
*        Sort them in a special order


  SELECT

  cdhdr~objectclas
  cdhdr~objectid
  cdhdr~objectid AS vbeln
  cdhdr~changenr
  cdhdr~udate AS date_m
  cdhdr~utime AS time_m

 INTO CORRESPONDING FIELDS OF wa_dw_orlog_wk
 FROM  cdhdr

 WHERE
     cdhdr~objectclas = 'VERKBELEG'
 AND cdhdr~tcode = 'VA02'
 AND cdhdr~udate IN so_date
 AND cdhdr~objectid IN so_vbeln.

    CONVERT DATE wa_dw_orlog_wk-date_m TIME wa_dw_orlog_wk-time_m
    INTO TIME STAMP wa_dw_orlog_wk-tstamps TIME ZONE sy-zonlo.

* Pick up interesting changes


* C = complete canceled line 'C' AS CHNGIND sortno = '3'

    SELECT

           cdpos~tabkey
           cdpos~unit_old
           cdpos~unit_new
           cdpos~cuky_old
           cdpos~cuky_new
           cdpos~value_new
           cdpos~value_old



    INTO CORRESPONDING FIELDS OF wa_dw_orlog_wk
    FROM  cdpos
    WHERE

        cdpos~objectclas = wa_dw_orlog_wk-objectclas
    AND cdpos~objectid  = wa_dw_orlog_wk-objectid
    AND cdpos~changenr  = wa_dw_orlog_wk-changenr
    AND cdpos~tabname = 'VBAP'
    AND cdpos~fname = 'ABGRU'.
*    AND cdpos~value_new NE ''.

      wa_dw_orlog_wk-posnr = wa_dw_orlog_wk-tabkey+13(6).


      MOVE-CORRESPONDING wa_dw_orlog_wk TO wa_dw_orlog_rt.

      wa_dw_orlog_rt-chngind = 'C'.
      wa_dw_orlog_rt-sortno = '3'.
      wa_dw_orlog_rt-r_qty = 9999999999.
      wa_dw_orlog_rt-r_value = 9999999999.
      wa_dw_orlog_rt-SOURCE = 'L'.


      INSERT ztdworlog FROM wa_dw_orlog_rt.

    ENDSELECT.


* Q = quantitychanged   'Q' AS CHNGIND sortno = '1'

    SELECT

           cdpos~tabkey
           cdpos~unit_old
           cdpos~unit_new
           cdpos~cuky_old
           cdpos~cuky_new
           cdpos~value_new
           cdpos~value_old



    INTO CORRESPONDING FIELDS OF wa_dw_orlog_wk
    FROM  cdpos
    WHERE

        cdpos~objectclas = wa_dw_orlog_wk-objectclas
    AND cdpos~objectid  = wa_dw_orlog_wk-objectid
    AND cdpos~changenr  = wa_dw_orlog_wk-changenr
    AND cdpos~tabname = 'VBEP'
    AND cdpos~fname = 'WMENG'
    AND cdpos~value_new NE 0.

      wa_dw_orlog_wk-posnr = wa_dw_orlog_wk-tabkey+13(6).
      MOVE-CORRESPONDING wa_dw_orlog_wk TO wa_dw_orlog_rt.

      wa_dw_orlog_rt-chngind = 'Q'.
      wa_dw_orlog_rt-sortno = '1'.
      wa_dw_orlog_rt-r_qty = 9999999999.
      wa_dw_orlog_rt-r_value = 9999999999.
      wa_dw_orlog_rt-SOURCE = 'L'.

      INSERT ztdworlog FROM wa_dw_orlog_rt.

    ENDSELECT.


* P = Price adjustment   'P' AS CHNGIND sortno = '2'

    SELECT

           cdpos~tabkey
           cdpos~unit_old
           cdpos~unit_new
           cdpos~cuky_old
           cdpos~cuky_new
           cdpos~value_new
           cdpos~value_old



    INTO CORRESPONDING FIELDS OF wa_dw_orlog_wk
    FROM  cdpos
    WHERE

        cdpos~objectclas = wa_dw_orlog_wk-objectclas
    AND cdpos~objectid  = wa_dw_orlog_wk-objectid
    AND cdpos~changenr  = wa_dw_orlog_wk-changenr
    AND cdpos~tabname = 'VBAP'
    AND cdpos~fname = 'CMPRE'.

      wa_dw_orlog_wk-posnr = wa_dw_orlog_wk-tabkey+13(6).
      MOVE-CORRESPONDING wa_dw_orlog_wk TO wa_dw_orlog_rt.



      wa_dw_orlog_rt-chngind = 'P'.
      wa_dw_orlog_rt-sortno = '2'.
      wa_dw_orlog_rt-r_qty = 9999999999.
      wa_dw_orlog_rt-r_value = 9999999999.
      wa_dw_orlog_rt-SOURCE = 'L'.

      INSERT ztdworlog FROM wa_dw_orlog_rt.

    ENDSELECT.


* D = deleted row   'D' AS CHNGIND can only be used to clean up
* in DW environment sortno = '4'

    SELECT

           cdpos~tabkey
           cdpos~unit_old
           cdpos~unit_new
           cdpos~cuky_old
           cdpos~cuky_new
           cdpos~value_new
           cdpos~value_old



    INTO CORRESPONDING FIELDS OF wa_dw_orlog_wk
    FROM  cdpos
    WHERE

        cdpos~objectclas = wa_dw_orlog_wk-objectclas
    AND cdpos~objectid  = wa_dw_orlog_wk-objectid
    AND cdpos~changenr  = wa_dw_orlog_wk-changenr
    AND cdpos~tabname = 'VBAP'
    AND cdpos~fname = 'KEY'
    AND cdpos~chngind = 'D'.

      wa_dw_orlog_wk-posnr = wa_dw_orlog_wk-tabkey+13(6).
      wa_dw_orlog_wk-value_new = 0.
      MOVE-CORRESPONDING wa_dw_orlog_wk TO wa_dw_orlog_rt.


      wa_dw_orlog_rt-chngind = 'D'.
      wa_dw_orlog_rt-sortno = '4'.

      INSERT ztdworlog FROM wa_dw_orlog_rt.

    ENDSELECT.

  ENDSELECT.

  REFRESH lt_dw_orlog_wk.


* Now we have a fresh table which include vbeln och posnr in the right
* fields. Now time to add in the qty from the sales order.

  REFRESH lt_dw_orlog_wk.
  CLEAR wa_dw_orlog_wk.


* add on info from sales order


  SELECT z~vbeln z~posnr v~kwmeng v~zmeng v~netwr
         v~kzwi1 v~kzwi4 v~kzwi3 v~kzwi6 v~erdat AS date_c v~erzet AS time_c
         v~waerk v~matnr v~prodh v~umvkz v~umvkn
         v~vrkme AS meins
*        v~werks AS vkorg WRONG below is right
         k~vkorg
         k~BUKRS_VF i~ORDER_TYPE i~COST i~TAX
         k~knumv
         k~erdat AS creation_date
         k~erzet AS creation_time
         k~ernam AS creation_name




         INTO CORRESPONDING FIELDS OF TABLE lt_dw_orlog_wk

   FROM vbap AS v

   INNER JOIN vbak AS k ON
      k~vbeln = v~vbeln


  INNER JOIN ztdworlog AS z ON
      z~vbeln = v~vbeln
  AND z~posnr = v~posnr
  AND z~linetype <> 'C'
  LEFT OUTER JOIN ZTDWINPUT AS i ON
      k~BUKRS_VF = i~BUKRS_VF
  AND k~AUART = i~ORDER_TYPE
  WHERE
      z~date_m IN so_date
  AND z~vbeln IN so_vbeln.


  LOOP AT lt_dw_orlog_wk INTO wa_dw_orlog_wk.
* aviod 0 div.
    wa_kwmeng = wa_dw_orlog_wk-kwmeng.
    IF wa_dw_orlog_wk-kwmeng = 0.
      wa_kwmeng = 1.
    ENDIF.

    wa_zmeng = wa_dw_orlog_wk-zmeng.
    IF wa_dw_orlog_wk-zmeng = 0.
      wa_zmeng = 1.
    ENDIF.

    wa_dw_orlog_wk-stdcost = 0.
    wa_dw_orlog_wk-stdcost_waers = ''.

    CLEAR wa_dw_stdcost_wk.

    PERFORM get_stdcosts
              USING wa_dw_orlog_wk
              CHANGING wa_dw_stdcost_wk.
    MOVE-CORRESPONDING wa_dw_stdcost_wk TO wa_dw_orlog_wk.

    IF wa_dw_orlog_wk-ORDER_TYPE = 'ZC01'
      OR wa_dw_orlog_wk-ORDER_TYPE = 'ZO01'.
* fix for getting the right values for service orders
      wa_dw_orlog_wk-netwr =  wa_dw_orlog_wk-netwr / wa_zmeng.
      wa_dw_orlog_wk-kzwi1 =  ( wa_dw_orlog_wk-kzwi6 + wa_dw_orlog_wk-kzwi3 ) / wa_zmeng.
      wa_dw_orlog_wk-kwmeng = wa_dw_orlog_wk-zmeng.

    ELSE.
      wa_dw_orlog_wk-netwr =  wa_dw_orlog_wk-netwr / wa_kwmeng.
      wa_dw_orlog_wk-kzwi1 =  wa_dw_orlog_wk-kzwi1 / wa_kwmeng.
      wa_dw_orlog_wk-kzwi4 =  wa_dw_orlog_wk-kzwi4 / wa_kwmeng.

    ENDIF.







    UPDATE ztdworlog
      SET
      kwmeng = wa_dw_orlog_wk-kwmeng
      netwr = wa_dw_orlog_wk-netwr
      kzwi1 = wa_dw_orlog_wk-kzwi1
      kzwi4 = wa_dw_orlog_wk-kzwi4
      date_c = wa_dw_orlog_wk-date_c
      time_c = wa_dw_orlog_wk-time_c
      waerk = wa_dw_orlog_wk-waerk
      matnr = wa_dw_orlog_wk-matnr
      prodh = wa_dw_orlog_wk-prodh
      umvkz = wa_dw_orlog_wk-umvkz
      umvkn = wa_dw_orlog_wk-umvkn
      meins  = wa_dw_orlog_wk-meins
      vkorg  = wa_dw_orlog_wk-vkorg
      BUKRS_VF = wa_dw_orlog_wk-BUKRS_VF
      ORDER_TYPE = wa_dw_orlog_wk-ORDER_TYPE
      COST = wa_dw_orlog_wk-COST
      TAX = wa_dw_orlog_wk-TAX
      knumv = wa_dw_orlog_wk-knumv
      creation_date = wa_dw_orlog_wk-creation_date
      creation_time = wa_dw_orlog_wk-creation_time
      creation_name = wa_dw_orlog_wk-creation_name
      stdcost = wa_dw_orlog_wk-stdcost
      stdcost_waers  = wa_dw_orlog_wk-stdcost_waers
      source = 'L'
*     stdcost1 = wa_dw_orlog_wk-stdcost1
*      stdcost_waers1 = wa_dw_orlog_wk-stdcost_waers1
*      stdcost2 = wa_dw_orlog_wk-stdcost2
*      stdcost_waers2 = wa_dw_orlog_wk-stdcost_waers2


      WHERE
          vbeln = wa_dw_orlog_wk-vbeln
      AND posnr = wa_dw_orlog_wk-posnr.
  ENDLOOP.


* To find the first row marked as C
* the M row is created the same time as the C row.
* Several M can exists but omny one C
* all C and M are removed and recreated each night
* to simplyfy re-runs of the table
* sortno is important in order to get rows right
* when values will move between rows.

  REFRESH lt_dw_orlog_wk.
  CLEAR wa_dw_orlog_wk.

  UPDATE ztdworlog
   SET create_c = ''.
  UPDATE ztdworlog
   SET modif_m = ''.

*  wa_sort_1 = '012345678901234529991201095123'.
  wa_sort_1 = '0123456789012345'.




  SELECT vbeln posnr sortno MIN( tstamps ) AS tstamps
   INTO CORRESPONDING FIELDS OF TABLE lt_dw_orlog_wk
   FROM ztdworlog
   WHERE linetype <> 'C'
  GROUP BY vbeln posnr sortno
  ORDER BY vbeln posnr sortno.

  SORT lt_dw_orlog_wk BY vbeln ASCENDING posnr ASCENDING tstamps ASCENDING
                         sortno ASCENDING.

  LOOP AT lt_dw_orlog_wk INTO wa_dw_orlog_wk.

    wa_tstamps = wa_dw_orlog_wk-tstamps.



    CONCATENATE wa_dw_orlog_wk-vbeln wa_dw_orlog_wk-posnr
    INTO wa_sort_2.
    .

    IF wa_sort_1 <> wa_sort_2.

      UPDATE ztdworlog
        SET create_c = 'C' "Create
        WHERE
            vbeln = wa_dw_orlog_wk-vbeln
        AND posnr = wa_dw_orlog_wk-posnr
        AND tstamps = wa_dw_orlog_wk-tstamps
        AND sortno = wa_dw_orlog_wk-sortno
        AND linetype <> 'C'.


      UPDATE ztdworlog
      SET modif_m = 'M' "Modify
      WHERE
          vbeln = wa_dw_orlog_wk-vbeln
      AND posnr = wa_dw_orlog_wk-posnr
      AND tstamps = wa_dw_orlog_wk-tstamps
      AND linetype <> 'C'.

      .

      wa_sort_1 = wa_sort_2.

    ENDIF.

  ENDLOOP.


* Known probelms, row combinations
*
* __________
* C first   = cancel
* Q next    = qty change
* = three rows in one month
*
* __________
* P  first  = price adj
* C  A      = cancel
* P	     = price adj
* C  A      = cancel
* P	     = price adj
* C  A      = cancel
*
*


*Part 2 Make the sales line complete

* Sort file and remove C rows
* after eachother on same order and posno.

  REFRESH lt_dw_orlog_wk.
  CLEAR wa_dw_orlog_wk.

  wa_sort_1 = '0123456789012345X'.


  SELECT vbeln posnr tstamps sortno chngind
    INTO CORRESPONDING FIELDS OF TABLE lt_dw_orlog_wk
      FROM ztdworlog
      WHERE linetype <> 'C'.

  SORT lt_dw_orlog_wk BY vbeln ASCENDING posnr ASCENDING
                        tstamps ASCENDING sortno ASCENDING.

  LOOP AT lt_dw_orlog_wk INTO wa_dw_orlog_wk.

    wa_tstamps = wa_dw_orlog_wk-tstamps.

    CONCATENATE wa_dw_orlog_wk-vbeln wa_dw_orlog_wk-posnr
                wa_dw_orlog_wk-chngind
    INTO wa_sort_2.

    IF wa_sort_1 = wa_sort_2.

      IF wa_dw_orlog_wk-chngind = 'C'.

*        DELETE FROM ztdworlog
*        WHERE
*            vbeln = wa_dw_orlog_wk-vbeln
*        AND posnr = wa_dw_orlog_wk-posnr
*        AND tstamps = wa_dw_orlog_wk-tstamps
*        AND chngind  = wa_dw_orlog_wk-chngind.

      ENDIF.
      wa_sort_1 = wa_sort_2.
    ELSE.
      wa_sort_1 = wa_sort_2.

    ENDIF.
  ENDLOOP.


* In the part below no M = made rows shall be affected

* Sort forward on sortno and move som values to the row below
* Q = 1 moves to next row when P and C
* P = 2 moves to next row when C and Q

  DATA: wa_big TYPE ztdworlog-r_qty,
        wa_small TYPE ztdworlog-r_qty,
        wa_syspos TYPE sy-fdpos.

  REFRESH lt_dw_orlog_wk.
  CLEAR wa_dw_orlog_wk.

  wa_sort_1 = '0123456789012345'.
  wa_chngind_1 = 'X'.

  SELECT vbeln posnr tstamps sortno chngind " sort values
         value_old value_new cuky_old cuky_new   " change values
    INTO CORRESPONDING FIELDS OF TABLE lt_dw_orlog_wk
      FROM ztdworlog
      WHERE linetype <> 'C'.

  SORT lt_dw_orlog_wk BY vbeln ASCENDING posnr ASCENDING
                        tstamps ASCENDING sortno ASCENDING.

  LOOP AT lt_dw_orlog_wk INTO wa_dw_orlog_wk2.

*    wa_tstamps = wa_dw_orlog_wk-tstamps.

    CONCATENATE wa_dw_orlog_wk2-vbeln wa_dw_orlog_wk2-posnr
    INTO wa_sort_2.
    wa_chngind_2 = wa_dw_orlog_wk2-chngind.

    IF wa_sort_1 = wa_sort_2.

      IF ( wa_chngind_1 = 'Q' AND wa_chngind_2 = 'P' )
          OR ( wa_chngind_1 = 'Q' AND  wa_chngind_2 = 'C' ).

        MOVE wa_dw_orlog_wk1-value_new TO wa_dw_orlog_wk1-r_qty.


*    then uppdatera rad 2 i DB

        UPDATE ztdworlog
*                   In value_new both prices and quantities are stored
       SET r_qty = wa_dw_orlog_wk1-r_qty
           sortord = 'A'
       WHERE
           vbeln = wa_dw_orlog_wk2-vbeln
       AND posnr = wa_dw_orlog_wk2-posnr
       AND tstamps = wa_dw_orlog_wk2-tstamps
       AND chngind = wa_dw_orlog_wk2-chngind
       AND linetype <> 'C'.

*    Change the comp. value
        wa_sort_1 = wa_sort_2.
        wa_dw_orlog_wk1 = wa_dw_orlog_wk2.
        wa_chngind_1 = wa_chngind_2.

      ELSEIF ( wa_chngind_1 = 'P' AND wa_chngind_2 = 'Q' )
              OR ( wa_chngind_1 = 'P' AND wa_chngind_2 = 'C' ).

        MOVE wa_dw_orlog_wk1-value_new TO wa_dw_orlog_wk1-r_value.



*    then uppdatera rad 2 i DB

        UPDATE ztdworlog
*                   In value_new both prices and quantities are stored
        SET r_value = wa_dw_orlog_wk1-r_value
            r_curr_old = wa_dw_orlog_wk1-cuky_old
            r_curr_new = wa_dw_orlog_wk1-cuky_new
            sortord = 'A'

        WHERE
            vbeln = wa_dw_orlog_wk2-vbeln
        AND posnr = wa_dw_orlog_wk2-posnr
        AND tstamps = wa_dw_orlog_wk2-tstamps
        AND chngind = wa_dw_orlog_wk2-chngind
        AND linetype <> 'C'.

*    Change the comp. value
        wa_sort_1 = wa_sort_2.
        wa_dw_orlog_wk1 = wa_dw_orlog_wk2.
        wa_chngind_1 = wa_chngind_2.


      ELSE.

*    Change the comp. value
        wa_sort_1 = wa_sort_2.
        wa_dw_orlog_wk1 = wa_dw_orlog_wk2.
        wa_chngind_1 = wa_chngind_2.

      ENDIF.

    ELSE.

*    Change the comp. value
      wa_sort_1 = wa_sort_2.
      wa_dw_orlog_wk1 = wa_dw_orlog_wk2.
      wa_chngind_1 = wa_chngind_2.

    ENDIF.

  ENDLOOP.


  SORT lt_dw_orlog_wk BY vbeln ASCENDING posnr ASCENDING
                       tstamps DESCENDING sortno DESCENDING.

  LOOP AT lt_dw_orlog_wk INTO wa_dw_orlog_wk2.

*    wa_tstamps = wa_dw_orlog_wk-tstamps.

    CONCATENATE wa_dw_orlog_wk2-vbeln wa_dw_orlog_wk2-posnr
    INTO wa_sort_2.
    wa_chngind_2 = wa_dw_orlog_wk2-chngind.

    IF wa_sort_1 = wa_sort_2.

*
* when sorted row 1 P eller C
*             row 2 Q *

      IF ( wa_chngind_1 = 'Q' AND wa_chngind_2 = 'P' )
          OR ( wa_chngind_1 = 'Q' AND  wa_chngind_2 = 'C' ).

        MOVE wa_dw_orlog_wk1-value_old TO wa_dw_orlog_wk1-r_qty.


*    then uppdatera rad 2 i DB

        UPDATE ztdworlog
*                   In value_new both prices and quantities are stored

       SET r_qty = wa_dw_orlog_wk1-r_qty
           sortord = 'D'

       WHERE
           vbeln = wa_dw_orlog_wk2-vbeln
       AND posnr = wa_dw_orlog_wk2-posnr
       AND tstamps = wa_dw_orlog_wk2-tstamps
       AND chngind = wa_dw_orlog_wk2-chngind
       AND linetype <> 'C'.

*    Change the comp. value
        wa_sort_1 = wa_sort_2.
        wa_dw_orlog_wk1 = wa_dw_orlog_wk2.
        wa_chngind_1 = wa_chngind_2.
*
* when sorted row 1 Q
*             row 2 P
*
      ELSEIF ( wa_chngind_1 = 'P' AND wa_chngind_2 = 'Q' ).
*             OR ( wa_chngind_1 = 'P' AND wa_chngind_2 = 'C' ).

        MOVE wa_dw_orlog_wk1-value_old TO wa_dw_orlog_wk1-r_value.



*    then uppdatera rad 2 i DB

        UPDATE ztdworlog
*                   In value_new both prices and quantities are stored
        SET r_value = wa_dw_orlog_wk1-r_value
            r_curr_old = wa_dw_orlog_wk1-cuky_old
            r_curr_new = wa_dw_orlog_wk1-cuky_new
            sortord = 'D'

        WHERE
            vbeln = wa_dw_orlog_wk2-vbeln
        AND posnr = wa_dw_orlog_wk2-posnr
        AND tstamps = wa_dw_orlog_wk2-tstamps
        AND chngind = wa_dw_orlog_wk2-chngind
        AND linetype <> 'C'.

*    Change the comp. value
        wa_sort_1 = wa_sort_2.
        wa_dw_orlog_wk1 = wa_dw_orlog_wk2.
        wa_chngind_1 = wa_chngind_2.


      ELSE.

*    Change the comp. value
        wa_sort_1 = wa_sort_2.
        wa_dw_orlog_wk1 = wa_dw_orlog_wk2.
        wa_chngind_1 = wa_chngind_2.

      ENDIF.

    ELSE.

*    Change the comp. value
      wa_sort_1 = wa_sort_2.
      wa_dw_orlog_wk1 = wa_dw_orlog_wk2.
      wa_chngind_1 = wa_chngind_2.

    ENDIF.

  ENDLOOP.


* Part 3 = fill the r_xxx fields with the right value
*  set indicator on linetype
*   C = Created = real order line (comes from chngind = C)
*   M = made by program = first adjust line (comes from chngind = C)
*   E = Event created = other adjust lines
*


  SELECT *
     INTO CORRESPONDING FIELDS OF TABLE lt_dw_orlog_wk
       FROM ztdworlog
       WHERE linetype <> 'C'
         AND date_m IN so_date
         AND vbeln IN so_vbeln.


  LOOP AT lt_dw_orlog_wk INTO wa_dw_orlog_wk.

    CASE wa_dw_orlog_wk-create_c.
* The row is the create order line !
      WHEN 'C'.

        CASE wa_dw_orlog_wk-chngind.
          WHEN 'P'.
* Create the C row for Price adj.

            MOVE-CORRESPONDING wa_dw_orlog_wk TO wa_dw_orlog_wk_c.

            IF wa_dw_orlog_wk_c-r_curr_old = ''.
              wa_dw_orlog_wk_c-r_curr_old = wa_dw_orlog_wk_c-cuky_old.
            ENDIF.

            IF wa_dw_orlog_wk_c-r_curr_new = ''.
              wa_dw_orlog_wk_c-r_curr_new = wa_dw_orlog_wk_c-cuky_new.
            ENDIF.



            IF wa_dw_orlog_wk_c-r_qty = 9999999999.
              wa_dw_orlog_wk_c-r_qty = wa_dw_orlog_wk_c-kwmeng.
            ENDIF.

            IF wa_dw_orlog_wk_c-r_value = 9999999999.
              MOVE wa_dw_orlog_wk_c-value_old
                 TO wa_dw_orlog_wk_c-r_value.
            ENDIF.

            wa_dw_orlog_wk_c-r_date = wa_dw_orlog_wk_c-date_c.
            wa_dw_orlog_wk_c-r_time = wa_dw_orlog_wk_c-time_c.

            CONVERT DATE wa_dw_orlog_wk_c-date_c
                    TIME wa_dw_orlog_wk_c-time_c
            INTO TIME STAMP wa_dw_orlog_wk_c-tstamps TIME ZONE sy-zonlo.



            SELECT SINGLE vbeln posnr tstamps chngind linetype create_c
                  INTO CORRESPONDING FIELDS OF wa_dw_orlog_trash
                   FROM ztdworlog

                  WHERE
                      vbeln = wa_dw_orlog_wk_c-vbeln
                  AND posnr = wa_dw_orlog_wk_c-posnr
                  AND tstamps = wa_dw_orlog_wk_c-tstamps
                  AND chngind = wa_dw_orlog_wk_c-chngind
                  AND create_c = wa_dw_orlog_wk_c-create_c.

            CASE sy-subrc.
              WHEN 4.
                wa_dw_orlog_wk_c-linetype = 'C'.
                INSERT ztdworlog FROM wa_dw_orlog_wk_c.
              WHEN 0.
                UPDATE ztdworlog FROM wa_dw_orlog_wk_c.

                UPDATE ztdworlog
                 SET linetype = 'C' "Created
                 WHERE
                    vbeln = wa_dw_orlog_wk_c-vbeln
                AND posnr = wa_dw_orlog_wk_c-posnr
                AND tstamps = wa_dw_orlog_wk_c-tstamps
                AND chngind = wa_dw_orlog_wk_c-chngind
                AND create_c = wa_dw_orlog_wk_c-create_c.

            ENDCASE.

* Make the M row for Price adj.

            MOVE-CORRESPONDING wa_dw_orlog_wk TO wa_dw_orlog_wk_m.


            IF wa_dw_orlog_wk_m-r_curr_old = ''.
              wa_dw_orlog_wk_m-r_curr_old = wa_dw_orlog_wk_m-cuky_old.
            ENDIF.

            IF wa_dw_orlog_wk_m-r_curr_new = ''.
              wa_dw_orlog_wk_m-r_curr_new = wa_dw_orlog_wk_m-cuky_new.
            ENDIF.

            IF wa_dw_orlog_wk_m-r_qty = 9999999999.
              wa_dw_orlog_wk_m-r_qty = wa_dw_orlog_wk_m-kwmeng.
            ENDIF.

            wa_value_temp  =  wa_dw_orlog_wk_m-value_new
                                        -  wa_dw_orlog_wk_m-value_old.

            IF wa_dw_orlog_wk_m-r_value = 9999999999.
              MOVE wa_value_temp
                 TO wa_dw_orlog_wk_m-r_value.
            ENDIF.

            wa_dw_orlog_wk_m-r_date = wa_dw_orlog_wk_m-date_m.
            wa_dw_orlog_wk_m-r_time = wa_dw_orlog_wk_m-time_m.


            SELECT SINGLE vbeln posnr tstamps chngind linetype create_c
                  INTO CORRESPONDING FIELDS OF wa_dw_orlog_trash
                   FROM ztdworlog

                  WHERE
                      vbeln = wa_dw_orlog_wk_m-vbeln
                  AND posnr = wa_dw_orlog_wk_m-posnr
                  AND tstamps = wa_dw_orlog_wk_m-tstamps
                  AND chngind = wa_dw_orlog_wk_m-chngind
                  AND create_c = wa_dw_orlog_wk_m-create_c.

            CASE sy-subrc.
              WHEN 4.
                wa_dw_orlog_wk_m-linetype = 'M'.
                INSERT ztdworlog FROM wa_dw_orlog_wk_m.
              WHEN 0.
                UPDATE ztdworlog FROM wa_dw_orlog_wk_m.

                UPDATE ztdworlog
                  SET linetype = 'M' "Made
                  WHERE
                     vbeln = wa_dw_orlog_wk_m-vbeln
                 AND posnr = wa_dw_orlog_wk_m-posnr
                 AND tstamps = wa_dw_orlog_wk_m-tstamps
                 AND chngind = wa_dw_orlog_wk_m-chngind
                 AND create_c = wa_dw_orlog_wk_m-create_c.



            ENDCASE.

          WHEN 'C'.

* Create the C row for a Canceled line


            MOVE-CORRESPONDING wa_dw_orlog_wk TO wa_dw_orlog_wk_c.

            IF wa_dw_orlog_wk_c-r_curr_old = ''.
              wa_dw_orlog_wk_c-r_curr_old = wa_dw_orlog_wk_c-waerk.
            ENDIF.

            IF wa_dw_orlog_wk_c-r_curr_new = ''.
              wa_dw_orlog_wk_c-r_curr_new = wa_dw_orlog_wk_c-waerk.
            ENDIF.

            IF wa_dw_orlog_wk_c-r_qty = 9999999999.
              wa_dw_orlog_wk_c-r_qty = wa_dw_orlog_wk_c-kwmeng.
            ENDIF.
            IF wa_dw_orlog_wk_c-value_new = ''.
*       no Z status then the M line will be positive (not a normal case)
              wa_dw_orlog_wk_c-r_qty =  wa_dw_orlog_wk_c-r_qty * -1.
            ENDIF.

            IF wa_dw_orlog_wk_c-r_value = 9999999999.
              wa_dw_orlog_wk_c-r_value = wa_dw_orlog_wk_c-netwr.
            ENDIF.

            wa_dw_orlog_wk_c-r_date = wa_dw_orlog_wk_c-date_c.
            wa_dw_orlog_wk_c-r_time = wa_dw_orlog_wk_c-time_c.

            CONVERT DATE wa_dw_orlog_wk_c-date_c
                    TIME wa_dw_orlog_wk_c-time_c
            INTO TIME STAMP wa_dw_orlog_wk_c-tstamps TIME ZONE sy-zonlo.



            SELECT SINGLE vbeln posnr tstamps chngind linetype create_c
                  INTO CORRESPONDING FIELDS OF wa_dw_orlog_trash
                   FROM ztdworlog

                  WHERE
                      vbeln = wa_dw_orlog_wk_c-vbeln
                  AND posnr = wa_dw_orlog_wk_c-posnr
                  AND tstamps = wa_dw_orlog_wk_c-tstamps
                  AND chngind = wa_dw_orlog_wk_c-chngind
                  AND create_c = wa_dw_orlog_wk_c-create_c.

            CASE sy-subrc.
              WHEN 4.
                wa_dw_orlog_wk_c-linetype = 'C'.
                INSERT ztdworlog FROM wa_dw_orlog_wk_c.
              WHEN 0.
                UPDATE ztdworlog FROM wa_dw_orlog_wk_c.

                UPDATE ztdworlog
                 SET linetype = 'C' "Created
                 WHERE
                    vbeln = wa_dw_orlog_wk_c-vbeln
                AND posnr = wa_dw_orlog_wk_c-posnr
                AND tstamps = wa_dw_orlog_wk_c-tstamps
                AND chngind = wa_dw_orlog_wk_c-chngind
                AND create_c = wa_dw_orlog_wk_c-create_c.

            ENDCASE.

* Make the M row for a Canceled line

            MOVE-CORRESPONDING wa_dw_orlog_wk TO wa_dw_orlog_wk_m.

            IF wa_dw_orlog_wk_m-r_curr_old = ''.
              wa_dw_orlog_wk_m-r_curr_old = wa_dw_orlog_wk_m-waerk.
            ENDIF.

            IF wa_dw_orlog_wk_m-r_curr_new = ''.
              wa_dw_orlog_wk_m-r_curr_new = wa_dw_orlog_wk_m-waerk.
            ENDIF.

            IF wa_dw_orlog_wk_m-r_qty = 9999999999.
              wa_dw_orlog_wk_m-r_qty = wa_dw_orlog_wk_m-kwmeng.
            ENDIF.

            IF wa_dw_orlog_wk_m-value_new <> ''.
*               value_new has Z status then the M line will be negative
              wa_dw_orlog_wk_m-r_qty =  wa_dw_orlog_wk_m-r_qty * -1.
            ENDIF.

            IF wa_dw_orlog_wk_m-r_value = 9999999999.
              wa_dw_orlog_wk_m-r_value = wa_dw_orlog_wk_m-netwr.
            ENDIF.

            wa_dw_orlog_wk_m-r_date = wa_dw_orlog_wk_m-date_m.
            wa_dw_orlog_wk_m-r_time = wa_dw_orlog_wk_m-time_m.


            SELECT SINGLE vbeln posnr tstamps chngind linetype create_c
                  INTO CORRESPONDING FIELDS OF wa_dw_orlog_trash
                   FROM ztdworlog

                  WHERE
                      vbeln = wa_dw_orlog_wk_m-vbeln
                  AND posnr = wa_dw_orlog_wk_m-posnr
                  AND tstamps = wa_dw_orlog_wk_m-tstamps
                  AND chngind = wa_dw_orlog_wk_m-chngind
                  AND create_c = wa_dw_orlog_wk_m-create_c.

            CASE sy-subrc.
              WHEN 4.
                wa_dw_orlog_wk_m-linetype = 'M'.
                INSERT ztdworlog FROM wa_dw_orlog_wk_m.
              WHEN 0.
                UPDATE ztdworlog FROM wa_dw_orlog_wk_m.

                UPDATE ztdworlog
                  SET linetype = 'M' "Made
                  WHERE
                     vbeln = wa_dw_orlog_wk_m-vbeln
                 AND posnr = wa_dw_orlog_wk_m-posnr
                 AND tstamps = wa_dw_orlog_wk_m-tstamps
                 AND chngind = wa_dw_orlog_wk_m-chngind
                 AND create_c = wa_dw_orlog_wk_m-create_c.
            ENDCASE.


          WHEN 'Q'.

* Create the C row for Quantity changed.

            MOVE-CORRESPONDING wa_dw_orlog_wk TO wa_dw_orlog_wk_c.

            IF wa_dw_orlog_wk_c-r_curr_old = ''.
              wa_dw_orlog_wk_c-r_curr_old = wa_dw_orlog_wk_c-waerk.
            ENDIF.

            IF wa_dw_orlog_wk_c-r_curr_new = ''.
              wa_dw_orlog_wk_c-r_curr_new = wa_dw_orlog_wk_c-waerk.
            ENDIF.

            IF wa_dw_orlog_wk_c-r_qty = 9999999999.
              MOVE wa_dw_orlog_wk_c-value_old
                TO wa_dw_orlog_wk_c-r_qty.
            ENDIF.

            IF wa_dw_orlog_wk_c-r_value = 9999999999.
              wa_dw_orlog_wk_c-r_value = wa_dw_orlog_wk_c-netwr.
            ENDIF.

            wa_dw_orlog_wk_c-r_date = wa_dw_orlog_wk_c-date_c.
            wa_dw_orlog_wk_c-r_time = wa_dw_orlog_wk_c-time_c.

            CONVERT DATE wa_dw_orlog_wk_c-date_c
                    TIME wa_dw_orlog_wk_c-time_c
            INTO TIME STAMP wa_dw_orlog_wk_c-tstamps TIME ZONE sy-zonlo.



            SELECT SINGLE vbeln posnr tstamps chngind linetype create_c
                  INTO CORRESPONDING FIELDS OF wa_dw_orlog_trash
                   FROM ztdworlog

                  WHERE
                      vbeln = wa_dw_orlog_wk_c-vbeln
                  AND posnr = wa_dw_orlog_wk_c-posnr
                  AND tstamps = wa_dw_orlog_wk_c-tstamps
                  AND chngind = wa_dw_orlog_wk_c-chngind
                  AND create_c = wa_dw_orlog_wk_c-create_c.

            CASE sy-subrc.
              WHEN 4.
                wa_dw_orlog_wk_c-linetype = 'C'.
                INSERT ztdworlog FROM wa_dw_orlog_wk_c.
              WHEN 0.
                UPDATE ztdworlog FROM wa_dw_orlog_wk_c.

                UPDATE ztdworlog
                 SET linetype = 'C' "Created
                 WHERE
                    vbeln = wa_dw_orlog_wk_c-vbeln
                AND posnr = wa_dw_orlog_wk_c-posnr
                AND tstamps = wa_dw_orlog_wk_c-tstamps
                AND chngind = wa_dw_orlog_wk_c-chngind
                AND create_c = wa_dw_orlog_wk_c-create_c.

            ENDCASE.

* Make the M row for Quantity changed.

            MOVE-CORRESPONDING wa_dw_orlog_wk TO wa_dw_orlog_wk_m.


            IF wa_dw_orlog_wk_m-r_curr_old = ''.
              wa_dw_orlog_wk_m-r_curr_old = wa_dw_orlog_wk_m-waerk.
            ENDIF.

            IF wa_dw_orlog_wk_m-r_curr_new = ''.
              wa_dw_orlog_wk_m-r_curr_new = wa_dw_orlog_wk_m-waerk.
            ENDIF.

            wa_value_temp  =  wa_dw_orlog_wk_m-value_new
                              -  wa_dw_orlog_wk_m-value_old.

            IF wa_dw_orlog_wk_m-r_qty = 9999999999.
              MOVE wa_value_temp
                TO wa_dw_orlog_wk_m-r_qty.
            ENDIF.

            IF wa_dw_orlog_wk_m-r_value = 9999999999.
              wa_dw_orlog_wk_m-r_value = wa_dw_orlog_wk_m-netwr.
            ENDIF.

            wa_dw_orlog_wk_m-r_date = wa_dw_orlog_wk_m-date_m.
            wa_dw_orlog_wk_m-r_time = wa_dw_orlog_wk_m-time_m.


            SELECT SINGLE vbeln posnr tstamps chngind linetype create_c
                  INTO CORRESPONDING FIELDS OF wa_dw_orlog_trash
                   FROM ztdworlog

                  WHERE
                      vbeln = wa_dw_orlog_wk_m-vbeln
                  AND posnr = wa_dw_orlog_wk_m-posnr
                  AND tstamps = wa_dw_orlog_wk_m-tstamps
                  AND chngind = wa_dw_orlog_wk_m-chngind
                  AND create_c = wa_dw_orlog_wk_m-create_c.

            CASE sy-subrc.
              WHEN 4.
                wa_dw_orlog_wk_m-linetype = 'M'.
                INSERT ztdworlog FROM wa_dw_orlog_wk_m.
              WHEN 0.
                UPDATE ztdworlog FROM wa_dw_orlog_wk_m.

                UPDATE ztdworlog
                  SET linetype = 'M' "Made
                  WHERE
                     vbeln = wa_dw_orlog_wk_m-vbeln
                 AND posnr = wa_dw_orlog_wk_m-posnr
                 AND tstamps = wa_dw_orlog_wk_m-tstamps
                 AND chngind = wa_dw_orlog_wk_m-chngind
                 AND create_c = wa_dw_orlog_wk_m-create_c.



            ENDCASE.



        ENDCASE.

        CLEAR wa_dw_orlog_wk_c.
        CLEAR wa_dw_orlog_wk_m.


      WHEN OTHERS.
* When create_c <> C = not first row

        CASE wa_dw_orlog_wk-chngind.
          WHEN 'P'.

* Fix the E = event row for a Price Adj.

            MOVE-CORRESPONDING wa_dw_orlog_wk TO wa_dw_orlog_wk_e.


            IF wa_dw_orlog_wk_e-r_curr_old = ''.
              wa_dw_orlog_wk_e-r_curr_old = wa_dw_orlog_wk_e-cuky_old.
            ENDIF.

            IF wa_dw_orlog_wk_e-r_curr_new = ''.
              wa_dw_orlog_wk_e-r_curr_new = wa_dw_orlog_wk_e-cuky_new.
            ENDIF.

            IF wa_dw_orlog_wk_e-r_qty = 9999999999.
              wa_dw_orlog_wk_e-r_qty = wa_dw_orlog_wk_e-kwmeng.
            ENDIF.

            wa_value_temp =  wa_dw_orlog_wk_e-value_new
                                  -  wa_dw_orlog_wk_e-value_old.

            IF wa_dw_orlog_wk_e-r_value = 9999999999.
              MOVE wa_value_temp
                 TO wa_dw_orlog_wk_e-r_value.
            ENDIF.

            wa_dw_orlog_wk_e-r_date = wa_dw_orlog_wk_e-date_m.
            wa_dw_orlog_wk_e-r_time = wa_dw_orlog_wk_e-time_m.

            SELECT SINGLE vbeln posnr tstamps chngind linetype create_c
                  INTO CORRESPONDING FIELDS OF wa_dw_orlog_trash
                   FROM ztdworlog

                  WHERE
                      vbeln = wa_dw_orlog_wk_e-vbeln
                  AND posnr = wa_dw_orlog_wk_e-posnr
                  AND tstamps = wa_dw_orlog_wk_e-tstamps
                  AND chngind = wa_dw_orlog_wk_e-chngind
                  AND create_c = wa_dw_orlog_wk_e-create_c.

            CASE sy-subrc.
              WHEN 4.

                wa_dw_orlog_wk_e-linetype = 'E'.
                INSERT ztdworlog FROM wa_dw_orlog_wk_e.
              WHEN 0.
                UPDATE ztdworlog FROM wa_dw_orlog_wk_e.

                UPDATE ztdworlog
                SET linetype = 'E' "Event
                WHERE
                   vbeln = wa_dw_orlog_wk_e-vbeln
               AND posnr = wa_dw_orlog_wk_e-posnr
               AND tstamps = wa_dw_orlog_wk_e-tstamps
               AND chngind = wa_dw_orlog_wk_e-chngind
               AND create_c = wa_dw_orlog_wk_e-create_c.


            ENDCASE.





          WHEN 'C'.

* Fix the E = event row for a Canceled line

            MOVE-CORRESPONDING wa_dw_orlog_wk TO wa_dw_orlog_wk_e.


            IF wa_dw_orlog_wk_e-r_curr_old = ''.
              wa_dw_orlog_wk_e-r_curr_old = wa_dw_orlog_wk_e-waerk.
            ENDIF.

            IF wa_dw_orlog_wk_e-r_curr_new = ''.
              wa_dw_orlog_wk_e-r_curr_new = wa_dw_orlog_wk_e-waerk.
            ENDIF.

            IF wa_dw_orlog_wk_e-r_qty = 9999999999.
              wa_dw_orlog_wk_e-r_qty = wa_dw_orlog_wk_e-kwmeng.
            ENDIF.
            IF wa_dw_orlog_wk_e-value_new <> ''.
*               value_new has Z status then the M line will be negative
              wa_dw_orlog_wk_e-r_qty =  wa_dw_orlog_wk_e-r_qty * -1.
            ENDIF.



            IF wa_dw_orlog_wk_e-r_value = 9999999999.
              wa_dw_orlog_wk_e-r_value = wa_dw_orlog_wk_e-netwr.
            ENDIF.

            wa_dw_orlog_wk_e-r_date = wa_dw_orlog_wk_e-date_m.
            wa_dw_orlog_wk_e-r_time = wa_dw_orlog_wk_e-time_m.

            SELECT SINGLE vbeln posnr tstamps chngind linetype create_c
                  INTO CORRESPONDING FIELDS OF wa_dw_orlog_trash
                   FROM ztdworlog

                  WHERE
                      vbeln = wa_dw_orlog_wk_e-vbeln
                  AND posnr = wa_dw_orlog_wk_e-posnr
                  AND tstamps = wa_dw_orlog_wk_e-tstamps
                  AND chngind = wa_dw_orlog_wk_e-chngind
                  AND create_c = wa_dw_orlog_wk_e-create_c.

            CASE sy-subrc.
              WHEN 4.

                wa_dw_orlog_wk_e-linetype = 'E'.
                INSERT ztdworlog FROM wa_dw_orlog_wk_e.
              WHEN 0.
                UPDATE ztdworlog FROM wa_dw_orlog_wk_e.

                UPDATE ztdworlog
                SET linetype = 'E' "Event
                WHERE
                   vbeln = wa_dw_orlog_wk_e-vbeln
               AND posnr = wa_dw_orlog_wk_e-posnr
               AND tstamps = wa_dw_orlog_wk_e-tstamps
               AND chngind = wa_dw_orlog_wk_e-chngind
               AND create_c = wa_dw_orlog_wk_e-create_c.


            ENDCASE.


          WHEN 'Q'.

* Fix the E = event row for a Quantity changed.

            MOVE-CORRESPONDING wa_dw_orlog_wk TO wa_dw_orlog_wk_e.


            IF wa_dw_orlog_wk_e-r_curr_old = ''.
              wa_dw_orlog_wk_e-r_curr_old = wa_dw_orlog_wk_e-waerk.
            ENDIF.

            IF wa_dw_orlog_wk_e-r_curr_new = ''.
              wa_dw_orlog_wk_e-r_curr_new = wa_dw_orlog_wk_e-waerk.
            ENDIF.


            wa_value_temp  =  wa_dw_orlog_wk_e-value_new
                              -  wa_dw_orlog_wk_e-value_old.

            IF wa_dw_orlog_wk_e-r_qty = 9999999999.
              MOVE wa_value_temp
                TO wa_dw_orlog_wk_e-r_qty.
            ENDIF.

            IF wa_dw_orlog_wk_e-r_value = 9999999999.
              wa_dw_orlog_wk_e-r_value = wa_dw_orlog_wk_e-netwr.
            ENDIF.


            wa_dw_orlog_wk_e-r_date = wa_dw_orlog_wk_e-date_m.
            wa_dw_orlog_wk_e-r_time = wa_dw_orlog_wk_e-time_m.

            SELECT SINGLE vbeln posnr tstamps chngind linetype create_c
                  INTO CORRESPONDING FIELDS OF wa_dw_orlog_trash
                   FROM ztdworlog

                  WHERE
                      vbeln = wa_dw_orlog_wk_e-vbeln
                  AND posnr = wa_dw_orlog_wk_e-posnr
                  AND tstamps = wa_dw_orlog_wk_e-tstamps
                  AND chngind = wa_dw_orlog_wk_e-chngind
                  AND create_c = wa_dw_orlog_wk_e-create_c.

            CASE sy-subrc.
              WHEN 4.

                wa_dw_orlog_wk_e-linetype = 'E'.
                INSERT ztdworlog FROM wa_dw_orlog_wk_e.
              WHEN 0.
                UPDATE ztdworlog FROM wa_dw_orlog_wk_e.

                UPDATE ztdworlog
                SET linetype = 'E' "Event
                WHERE
                   vbeln = wa_dw_orlog_wk_e-vbeln
               AND posnr = wa_dw_orlog_wk_e-posnr
               AND tstamps = wa_dw_orlog_wk_e-tstamps
               AND chngind = wa_dw_orlog_wk_e-chngind
               AND create_c = wa_dw_orlog_wk_e-create_c.


            ENDCASE.



        ENDCASE.

        CLEAR wa_dw_orlog_wk_e.

    ENDCASE.

  ENDLOOP.

  .





*&---------------------------------------------------------------------*
*&      Form  get_stdcosts
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->VALUE(LS_DW_ORSTAT_WK)  text
*      -->LS_DW_STDCOST           text
*----------------------------------------------------------------------*
FORM get_stdcosts
     USING value(wa_dw_orlog_wk)  TYPE ts_dw_orlog
     CHANGING wa_dw_stdcost_wk TYPE ts_dw_stdcost.

  DATA:  ls_konv TYPE konv.
  CLEAR ls_konv.
  CLEAR wa_dw_stdcost_wk.


  SELECT SINGLE
             konv~kbetr
             konv~kwert
             konv~kpein
             konv~waers
             INTO CORRESPONDING FIELDS OF ls_konv
 FROM konv
WHERE konv~knumv = wa_dw_orlog_wk-knumv
  AND konv~kposn = wa_dw_orlog_wk-posnr
  AND konv~kappl = 'V'
  AND konv~kschl = wa_dw_orlog_wk-COST.


  IF sy-subrc = 0.
    IF wa_dw_orlog_wk-ORDER_TYPE = 'ZC01'
      OR wa_dw_orlog_wk-ORDER_TYPE = 'ZO01'.
      wa_dw_stdcost_wk-stdcost = ls_konv-kwert / wa_zmeng.
      wa_dw_stdcost_wk-stdcost_waers = ls_konv-waers.
    ELSE.
      wa_dw_stdcost_wk-stdcost = ls_konv-kbetr.
      wa_dw_stdcost_wk-stdcost_waers = ls_konv-waers.
    ENDIF.

  ELSE.
    wa_dw_stdcost_wk-stdcost = 0.
    wa_dw_stdcost_wk-stdcost_waers = ''.

  ENDIF.

* ZPK1

*  CLEAR ls_konv.
*  SELECT SINGLE konv~kbetr
*                konv~kpein
*                konv~waers
*                INTO CORRESPONDING FIELDS OF ls_konv
*    FROM konv
*   WHERE konv~knumv = wa_dw_orlog_wk-knumv
*     AND konv~kposn = wa_dw_orlog_wk-posnr
*     AND konv~kappl = 'V'
*     AND konv~kschl = 'ZPK1'.
*
*  IF sy-subrc = 0.
*    wa_dw_stdcost_wk-stdcost1 = ls_konv-kbetr.
*    wa_dw_stdcost_wk-stdcost_waers1 = ls_konv-waers.
*  ELSEIF
*    wa_dw_stdcost_wk-stdcost1 = 0.
*    wa_dw_stdcost_wk-stdcost_waers1 = ''.
*  ENDIF.

* ZPK2

*  CLEAR ls_konv.
*  SELECT SINGLE konv~kbetr
*                konv~kpein
*                konv~waers
*                INTO CORRESPONDING FIELDS OF ls_konv
*    FROM konv
*   WHERE konv~knumv = wa_dw_orlog_wk-knumv
*     AND konv~kposn = wa_dw_orlog_wk-posnr
*     AND konv~kappl = 'V'
*     AND konv~kschl = 'ZPK2'.

*  IF sy-subrc = 0.
*    wa_dw_stdcost_wk-stdcost2 = ls_konv-kbetr.
*    wa_dw_stdcost_wk-stdcost_waers2 = ls_konv-waers.
*  ELSEIF
*    wa_dw_stdcost_wk-stdcost2 = 0.
*    wa_dw_stdcost_wk-stdcost_waers2 = ''.

*  ENDIF.
ENDFORM.                    "get_stdcosts
