*&---------------------------------------------------------------------*
*&  Include           YSE_RENT_PLBRD_F02                               *
*&---------------------------------------------------------------------*

*---------------------------------------------------------------------*
*       FORM PREPARE_CHART_DATA                                       *
*---------------------------------------------------------------------*
*       Daten zusammenstellen                                         *
*---------------------------------------------------------------------*
FORM PREPARE_CHART_DATA.

* Define charts - Context specific
  PERFORM CREATE_CHARTS.

* Define table lines on the charts and corresponding nodes - Context specific
  PERFORM CREATE_TABLE_LINES.

* Save the starting position
  CALL FUNCTION 'BARC_LOGIC'
    TABLES
      all_boxes     = all_boxes
      all_box_vals  = all_box_vals
      all_links     = all_links
      all_link_vals = all_link_vals
      all_nodes     = all_nodes
      all_node_vals = all_node_vals
      all_positions = all_positions
      boxes         = boxes
      box_vals      = box_vals
      deletions     = deletions
      links         = links
      link_vals     = link_vals
      nodes         = nodes
      node_vals     = node_vals
      positions     = positions.

  status_text = text-002.
  stat = sgrc_const-stat_1. "Open Window, Transfer Data, Wait for Input

ENDFORM.                               "PREPARE_CHART_DATA

*---------------------------------------------------------------------*
*       FORM CREATE_TIME_AXIS                                         *
*---------------------------------------------------------------------*
*       Define time axis                                              *
*---------------------------------------------------------------------*
FORM CREATE_TIME_AXIS.

  DATA: LV_BEGDAT(20) TYPE C,
        LV_ENDDAT(20) TYPE C,
        LV_SECDAT(20) TYPE C,
        LV_BEGDATDT   LIKE SY-DATUM,
        LV_ENDDATDT   LIKE SY-DATUM.

* Add on a few days at each end of the timeframe provided by the user
  LV_BEGDATDT = P_BEGDAT - 5.
  LV_ENDDATDT = P_ENDDAT + 5.
* Format the dates with dots and a ; at the end
  WRITE LV_BEGDATDT TO LV_BEGDAT.
  WRITE LV_ENDDATDT TO LV_ENDDAT.
  CONCATENATE LV_BEGDAT ';' INTO LV_BEGDAT.
  CONCATENATE LV_ENDDAT ';' INTO LV_ENDDAT.

* Define time axes with start and enddate
  CALL FUNCTION 'BARC_SET_TIME_AXIS'
    EXPORTING
      START = LV_BEGDAT
      END   = LV_ENDDAT.

* size : width of 1 unit (see above)
* Unit : 5 = Week, 6 = Day

* Define introducing section of the time axis
  CALL FUNCTION 'BARC_ADD_SECTION'
    EXPORTING
      SIZE  = 10   " 1 unit (here it's day) will have a size of 10
      START = LV_BEGDAT
      UNIT  = '6'   " 5 = week, 6 = day
    IMPORTING
      ID    = SECTION1.

* Format the start date for the main section
  WRITE P_BEGDAT TO LV_SECDAT.
  CONCATENATE LV_SECDAT ';' INTO LV_SECDAT.
* Define main section of the time axis
  CALL FUNCTION 'BARC_ADD_SECTION'
    EXPORTING
      SIZE  = 40    " 1 unit (here it's day) will have a size of 40
      START = LV_SECDAT
      UNIT  = '6'   " 6 = day
    IMPORTING
      ID    = SECTION2.

* Format the start date for the trailing section
  LV_BEGDATDT = P_ENDDAT + 1.
  WRITE LV_BEGDATDT TO LV_SECDAT.
  CONCATENATE LV_SECDAT ';' INTO LV_SECDAT.
* Define trailing section of the time axis
  CALL FUNCTION 'BARC_ADD_SECTION'
    EXPORTING
      SIZE  = 10    " 1 unit (here it's day) will have a size 10
      START = LV_SECDAT
      UNIT  = '6'   " 6 = day
    IMPORTING
      ID    = SECTION3.

ENDFORM.                               "form CREATE_TIME_AXIS

*----------------------------------------------------------------------*
*       Form  CREATE_CALENDAR
*----------------------------------------------------------------------*
*       Define calender                                                *
*----------------------------------------------------------------------*
FORM CREATE_CALENDAR.

  DATA: TO1      LIKE BCTIMEOBJ-ID,
        TO2      LIKE BCTIMEOBJ-ID,
        INT1     LIKE BCINTERVAL-ID,
        PROF1    LIKE BCTIMEPROF-ID,
        VAL      LIKE BCVALS-VAL.

* Create a new calendar
  CALL FUNCTION 'BARC_ADD_CALENDAR'
    IMPORTING
      ID = CALENDAR1.

* Define weekends to have different colour
* Create a time object for every saturday
  CALL FUNCTION 'BARC_ADD_TIME_OBJECT'
    EXPORTING
      FL              = BC_CONST-DAY_IN_WEEK
      R_VAL           = BC_CONST-SATURDAY
      TIMEOBJECT_TYPE = BC_CONST-RECURRENT
    IMPORTING
      ID              = TO1.
* Create a time object for every sunday
  CALL FUNCTION 'BARC_ADD_TIME_OBJECT'
    EXPORTING
      FL              = BC_CONST-DAY_IN_WEEK
      R_VAL           = BC_CONST-SUNDAY
      TIMEOBJECT_TYPE = BC_CONST-RECURRENT
    IMPORTING
      ID              = TO2.

* Create a time profile
  CALL FUNCTION 'BARC_ADD_TIME_PROFILE'
    EXPORTING
      TIMEPROF_TYPE = BC_CONST-WEEK
    IMPORTING
      ID            = PROF1.
* Add the saturdays to the timeprofile
  WRITE TO1 TO VAL.
  CALL FUNCTION 'BARC_SET_TIME_PROFILE_ATTRIB'
    EXPORTING
      FL  = BC_CONST-ADD_NW_TIME
      ID  = PROF1
      VAL = VAL.
* Add the sundays to the timeprofile
  WRITE TO2 TO VAL.
  CALL FUNCTION 'BARC_SET_TIME_PROFILE_ATTRIB'
    EXPORTING
      FL  = BC_CONST-ADD_NW_TIME
      ID  = PROF1
      VAL = VAL.

* Add the profile (weekends) to the calendar
  WRITE PROF1 TO VAL.
  CALL FUNCTION 'BARC_SET_CALENDAR_ATTRIB'
    EXPORTING
      FL  = BC_CONST-ADD_PROFILE
      ID  = CALENDAR1
      VAL = VAL.

* Define Holiday
* Create a time object for the start of the holiday
  CALL FUNCTION 'BARC_ADD_TIME_OBJECT'
    EXPORTING
      U_VAL = '20.03.1999'
    IMPORTING
      ID    = TO1.
* Create a time object for the end of the holiday
  CALL FUNCTION 'BARC_ADD_TIME_OBJECT'
    EXPORTING
      U_VAL = '10.04.1999'
    IMPORTING
      ID    = TO2.

* Create an interval for the holiday
  CALL FUNCTION 'BARC_ADD_INTERVAL'
    IMPORTING
      ID = INT1.

* Add start to interval
  WRITE TO1 TO VAL.
  CALL FUNCTION 'BARC_SET_INTERVAL_ATTRIB'
    EXPORTING
      FL  = BC_CONST-INTERVAL_START
      ID  = INT1
      VAL = VAL.
* Add end to interval
  WRITE TO2 TO VAL.
  CALL FUNCTION 'BARC_SET_INTERVAL_ATTRIB'
    EXPORTING
      FL  = BC_CONST-INTERVAL_END
      ID  = INT1
      VAL = VAL.

* Add interval (holiday) to the calendar
  WRITE INT1 TO VAL.
  CALL FUNCTION 'BARC_SET_CALENDAR_ATTRIB'
    EXPORTING
      FL  = BC_CONST-UNIQUE_INTERVAL
      ID  = CALENDAR1
      VAL = VAL.

ENDFORM.                               " CREATE_CALENDAR

*---------------------------------------------------------------------*
*       FORM CREATE_CHARTS                                            *
*---------------------------------------------------------------------*
* Define the charts within the OCX                                    *
*---------------------------------------------------------------------*
FORM CREATE_CHARTS.

* Define the top chart, depending on the status field P_ST
  CASE GV_ST.
    WHEN GC_ST_MD.
      PERFORM CREATE_CHART_TOP_MD.
    WHEN GC_ST_EQ.
      PERFORM CREATE_CHART_TOP_EQ.
    WHEN OTHERS.
*     Should never occur
  ENDCASE.

* Define the bottom chart, depending on the status field P_SB
  CASE GV_SB.
    WHEN GC_SB_DO.
      PERFORM CREATE_CHART_BOT_DO.
    WHEN GC_SB_IT.
      PERFORM CREATE_CHART_BOT_IT.
    WHEN OTHERS.
*     Should never occur
  ENDCASE.

ENDFORM.                               "FORM CREATE_CHARTS

*---------------------------------------------------------------------*
*       FORM CREATE_CHART_TOP_MD                                      *
*---------------------------------------------------------------------*
* Define the TOP chart within the OCX to display models               *
*---------------------------------------------------------------------*
FORM CREATE_CHART_TOP_MD.

  DATA: VAL LIKE BCVALS-VAL.

* Create "Models" Chart (TOP)
  CALL FUNCTION 'BARC_ADD_CHART'
    EXPORTING
      COLUMN_ANZ = 2
      INDEX      = 1
      SIZE       = 410
      CHART_TYPE = '00'
    IMPORTING
      ID         = CHART1
    EXCEPTIONS
      INV_WINID  = 01.

** Chart Title ("Models") - Define Box
*  ACT_BOX_ID = ACT_BOX_ID + 1.
*  BOXES-ID         = ACT_BOX_ID.
*  BOXES-TYPE       = BC_CONST-BORDER_BOX.
*  BOXES-CHART_ID   = CHART1.
*  BOXES-FORM_TYPE  = 'T1'.   " Form/shape type 'Chart Title'
*  BOXES-COLOR_TYPE = 'T0'.
*  APPEND BOXES.
** Chart Title ("Models") - Define Box Values - 'Hover' Value
*  BOX_VALS-ID  = BOXES-ID.
*  BOX_VALS-FL  = '0'.
*  BOX_VALS-VAL = TEXT-201.    " Models
*  APPEND BOX_VALS.
** Chart Title ("Models") - Add Box Id To Chart As "Chart_border_box
*  WRITE BOXES-ID TO VAL.
*  CONDENSE VAL NO-GAPS.
*  CALL FUNCTION 'BARC_SET_CHART_ATTRIB'
*    EXPORTING
*      FL  = BC_CONST-CHART_BORDER_BOX
*      ID  = CHART1
*      VAL = VAL.

* Table Title ("Models") - Define box
  ACT_BOX_ID = ACT_BOX_ID + 1.
  BOXES-ID         = ACT_BOX_ID.
  BOXES-TYPE       = BC_CONST-ROW_BOX.
  BOXES-CHART_ID   = CHART1.
  BOXES-FORM_TYPE  = 'B2'.    " Form/shape type '2 columns'
  BOXES-COLOR_TYPE = 'B0'.
  APPEND BOXES.
* Table Title ("Models") - Define Box Values - Title
  BOX_VALS-ID  = BOXES-ID.
  BOX_VALS-FL  = '0'.
  BOX_VALS-VAL = TEXT-201.     " 'Models'
  APPEND BOX_VALS.
* Table Title ("Models") - Define Box Values - Title
  BOX_VALS-ID  = BOXES-ID.
  BOX_VALS-FL  = '2'.
  BOX_VALS-VAL = TEXT-201.     " 'Models'
  APPEND BOX_VALS.
* Table Title ("Models") - Add Box Id To The Positions Table
  POSITIONS-OBJ_ID     = BOXES-ID.
  POSITIONS-OBJ_TYPE   = BC_CONST-BOX_OBJECT.
  POSITIONS-CHART_ID   = CHART1.
  POSITIONS-ROW_NUMBER = 0.
  APPEND POSITIONS.
* Table Title ("Models") - Add Box Id To Chart As Chart_title_box
  WRITE BOXES-ID TO VAL.
  CALL FUNCTION 'BARC_SET_CHART_ATTRIB'
    EXPORTING
      ID  = CHART1
      FL  = BC_CONST-CHART_TITLE_BOX
      VAL = VAL.
* Shift lines when multiple lines are drag-dropped
  CALL FUNCTION 'BARC_SET_CHART_ATTRIB'
    EXPORTING
      ID  = CHART1
      FL  = BC_CONST-MULTI_LINE_CONFIRM
      VAL = BC_CONST-X.

* Set The Width Of The Columns
  CALL FUNCTION 'BARC_SET_COLUMN_WIDTH'
    EXPORTING
      CHART_ID = CHART1
      INDEX    = 1
      WIDTH    = 600.
* Set The Width Of The Columns
  CALL FUNCTION 'BARC_SET_COLUMN_WIDTH'
    EXPORTING
      CHART_ID = CHART1
      INDEX    = 2
      WIDTH    = 6000.

  PERFORM CREATE_RIBBON_GRID USING CHART1.

ENDFORM.                               "CREATE_CHART_TOP_MD

*---------------------------------------------------------------------*
*       FORM CREATE_CHART_TOP_EQ                                      *
*---------------------------------------------------------------------*
* Define the TOP chart within the OCX to display models               *
*---------------------------------------------------------------------*
FORM CREATE_CHART_TOP_EQ.

  DATA: VAL LIKE BCVALS-VAL.

* Create "Models" Chart (TOP)
  CALL FUNCTION 'BARC_ADD_CHART'
    EXPORTING
      COLUMN_ANZ = 5
      INDEX      = 1
      SIZE       = 410
      CHART_TYPE = '00'
    IMPORTING
      ID         = CHART1
    EXCEPTIONS
      INV_WINID  = 01.

** Chart Title ("Models") - Define Box
*  ACT_BOX_ID = ACT_BOX_ID + 1.
*  BOXES-ID         = ACT_BOX_ID.
*  BOXES-TYPE       = BC_CONST-BORDER_BOX.
*  BOXES-CHART_ID   = CHART1.
*  BOXES-FORM_TYPE  = 'T1'.   " Form/shape type 'Chart Title'
*  BOXES-COLOR_TYPE = 'T0'.
*  APPEND BOXES.
** Chart Title ("Models") - Define Box Values - 'Hover' Value
*  BOX_VALS-ID  = BOXES-ID.
*  BOX_VALS-FL  = '0'.
*  BOX_VALS-VAL = TEXT-201.    " Models
*  APPEND BOX_VALS.
** Chart Title ("Models") - Add Box Id To Chart As "Chart_border_box
*  WRITE BOXES-ID TO VAL.
*  CONDENSE VAL NO-GAPS.
*  CALL FUNCTION 'BARC_SET_CHART_ATTRIB'
*    EXPORTING
*      FL  = BC_CONST-CHART_BORDER_BOX
*      ID  = CHART1
*      VAL = VAL.

* Table Title ("Models") - Define box
  ACT_BOX_ID = ACT_BOX_ID + 1.
  BOXES-ID         = ACT_BOX_ID.
  BOXES-TYPE       = BC_CONST-ROW_BOX.
  BOXES-CHART_ID   = CHART1.
  BOXES-FORM_TYPE  = 'B2'.    " Form/shape type '8 columns'
  BOXES-COLOR_TYPE = 'B0'.
  APPEND BOXES.
* Table Title ("Models") - Define Box Values - Title
  BOX_VALS-ID  = BOXES-ID.
  BOX_VALS-FL  = '0'.
  BOX_VALS-VAL = TEXT-916.     " 'Models'
  APPEND BOX_VALS.
* Table Title ("Models") - Define Box Values - Title
  BOX_VALS-ID  = BOXES-ID.
  BOX_VALS-FL  = '2'.
  BOX_VALS-VAL = TEXT-916.     " 'Models'
  APPEND BOX_VALS.
* Table Title ("Models") - Define Box Values - Title
  BOX_VALS-ID  = BOXES-ID.
  BOX_VALS-FL  = '3'.
  BOX_VALS-VAL = TEXT-931.     " 'Owning CC'
  APPEND BOX_VALS.
* Table Title ("Models") - Define Box Values - Title
  BOX_VALS-ID  = BOXES-ID.
  BOX_VALS-FL  = '4'.
  BOX_VALS-VAL = TEXT-932.     " 'Current Location'
  APPEND BOX_VALS.
* Table Title ("Models") - Define Box Values - Title
  BOX_VALS-ID  = BOXES-ID.
  BOX_VALS-FL  = '5'.
  BOX_VALS-VAL = TEXT-933.     " 'Current Status'
  APPEND BOX_VALS.
* Table Title ("Models") - Add Box Id To The Positions Table
  POSITIONS-OBJ_ID     = BOXES-ID.
  POSITIONS-OBJ_TYPE   = BC_CONST-BOX_OBJECT.
  POSITIONS-CHART_ID   = CHART1.
  POSITIONS-ROW_NUMBER = 0.
  APPEND POSITIONS.
* Table Title ("Models") - Add Box Id To Chart As Chart_title_box
  WRITE BOXES-ID TO VAL.
  CALL FUNCTION 'BARC_SET_CHART_ATTRIB'
    EXPORTING
      ID  = CHART1
      FL  = BC_CONST-CHART_TITLE_BOX
      VAL = VAL.
* Shift lines when multiple lines are drag-dropped
  CALL FUNCTION 'BARC_SET_CHART_ATTRIB'
    EXPORTING
      ID  = CHART1
      FL  = BC_CONST-MULTI_LINE_CONFIRM
      VAL = BC_CONST-X.

* Set The Width Of The Columns
  CALL FUNCTION 'BARC_SET_COLUMN_WIDTH'
    EXPORTING
      CHART_ID = CHART1
      INDEX    = 1
      WIDTH    = 600.
* Set The Width Of The Columns
  CALL FUNCTION 'BARC_SET_COLUMN_WIDTH'
    EXPORTING
      CHART_ID = CHART1
      INDEX    = 2
      WIDTH    = 6000.

  PERFORM CREATE_RIBBON_GRID USING CHART1.

ENDFORM.                               "CREATE_CHART_TOP_EQ

*---------------------------------------------------------------------*
*       FORM CREATE_CHART_BOT_DO                                      *
*---------------------------------------------------------------------*
* Define the bottom chart within the OCX to display documents         *
*---------------------------------------------------------------------*
FORM CREATE_CHART_BOT_DO.

  DATA: VAL LIKE BCVALS-VAL.

* Create "Documents" Chart (BOTTOM)
  CALL FUNCTION 'BARC_ADD_CHART'
    EXPORTING
      COLUMN_ANZ = 2
      INDEX      = 2
      SIZE       = 90
      CHART_TYPE = '00'
    IMPORTING
      ID         = CHART2
    EXCEPTIONS
      INV_WINID  = 01.

** Chart Title ("Documents") - Define Box
*  ACT_BOX_ID = ACT_BOX_ID + 1.
*  BOXES-ID         = ACT_BOX_ID.
*  BOXES-TYPE       = BC_CONST-BORDER_BOX.
*  BOXES-CHART_ID   = CHART2.
*  BOXES-FORM_TYPE  = 'T1'.   " Form/shape type 'Chart Title'
*  BOXES-COLOR_TYPE = 'T0'.
*  APPEND BOXES.
** Chart Title ("Documents") - Define Box Values - Title
*  BOX_VALS-ID  = BOXES-ID.
*  BOX_VALS-FL  = '0'.
*  BOX_VALS-VAL = TEXT-203.   " Documents
*  APPEND BOX_VALS.
** Chart Title ("Documents") - Add Box Id To Chart As "Chart_border_box
*  WRITE BOXES-ID TO VAL.
*  CONDENSE VAL NO-GAPS.
*  CALL FUNCTION 'BARC_SET_CHART_ATTRIB'
*    EXPORTING
*      FL  = BC_CONST-CHART_BORDER_BOX
*      ID  = CHART2
*      VAL = VAL.

* Table Title ("Documents") - Define box
  ACT_BOX_ID = ACT_BOX_ID + 1.
  BOXES-ID         = ACT_BOX_ID.
  BOXES-TYPE       = BC_CONST-ROW_BOX.
  BOXES-CHART_ID   = CHART2.
  BOXES-FORM_TYPE  = 'B2'.
  BOXES-COLOR_TYPE = 'B0'.
  APPEND BOXES.
* Table Title ("Documents") - Define Box Values - Title
  BOX_VALS-ID  = BOXES-ID.
  BOX_VALS-FL  = '0'.
  BOX_VALS-VAL = TEXT-203.   " Documents
  APPEND BOX_VALS.
* Chart Title ("Documents") - Define Box Values - Cell Value For Column 1
  BOX_VALS-FL  = '2'.
  BOX_VALS-VAL = TEXT-203.   " Documents
  APPEND BOX_VALS.
* Table Title ("Documents") - Add The Box To The Positions Table
  POSITIONS-OBJ_ID     = BOXES-ID.
  POSITIONS-OBJ_TYPE   = BC_CONST-BOX_OBJECT.
  POSITIONS-CHART_ID   = CHART2.
  POSITIONS-ROW_NUMBER = 0.
  APPEND POSITIONS.
* Table Title ("Documents") - Add Box Id To Chart As Chart_title_box
  WRITE BOXES-ID TO VAL.
  CALL FUNCTION 'BARC_SET_CHART_ATTRIB'
    EXPORTING
      ID  = CHART2
      FL  = BC_CONST-CHART_TITLE_BOX
      VAL = VAL.
* Shift lines when multiple lines are drag-dropped
  CALL FUNCTION 'BARC_SET_CHART_ATTRIB'
    EXPORTING
      ID  = CHART2
      FL  = BC_CONST-MULTI_LINE_CONFIRM
      VAL = BC_CONST-X.

* Set The Width Of The Columns
  CALL FUNCTION 'BARC_SET_COLUMN_WIDTH'
    EXPORTING
      CHART_ID = CHART2
      INDEX    = 1
      WIDTH    = 600.
* Set The Width Of The Columns
  CALL FUNCTION 'BARC_SET_COLUMN_WIDTH'
    EXPORTING
      CHART_ID = CHART2
      INDEX    = 2
      WIDTH    = 6000.

  PERFORM CREATE_RIBBON_GRID USING CHART2.

ENDFORM.                               "CREATE_CHART_BOT_DO

*---------------------------------------------------------------------*
*       FORM CREATE_CHART_BOT_IT                                      *
*---------------------------------------------------------------------*
* Define the bottom chart within the OCX to display documents AND items
*---------------------------------------------------------------------*
FORM CREATE_CHART_BOT_IT.

  DATA: VAL LIKE BCVALS-VAL.

* Create "Documents" Chart (BOTTOM)
  CALL FUNCTION 'BARC_ADD_CHART'
    EXPORTING
      COLUMN_ANZ = 3
      INDEX      = 2
      SIZE       = 90
      CHART_TYPE = '00'
    IMPORTING
      ID         = CHART2
    EXCEPTIONS
      INV_WINID  = 01.

** Chart Title ("Documents") - Define Box
*  ACT_BOX_ID = ACT_BOX_ID + 1.
*  BOXES-ID         = ACT_BOX_ID.
*  BOXES-TYPE       = BC_CONST-BORDER_BOX.
*  BOXES-CHART_ID   = CHART2.
*  BOXES-FORM_TYPE  = 'T1'.   " Form/shape type 'Chart Title'
*  BOXES-COLOR_TYPE = 'T0'.
*  APPEND BOXES.
** Chart Title ("Documents") - Define Box Values - Title
*  BOX_VALS-ID  = BOXES-ID.
*  BOX_VALS-FL  = '0'.
*  BOX_VALS-VAL = TEXT-203.   " Documents
*  APPEND BOX_VALS.
** Chart Title ("Documents") - Add Box Id To Chart As "Chart_border_box
*  WRITE BOXES-ID TO VAL.
*  CONDENSE VAL NO-GAPS.
*  CALL FUNCTION 'BARC_SET_CHART_ATTRIB'
*    EXPORTING
*      FL  = BC_CONST-CHART_BORDER_BOX
*      ID  = CHART2
*      VAL = VAL.

* Table Title ("Documents") - Define box
  ACT_BOX_ID = ACT_BOX_ID + 1.
  BOXES-ID         = ACT_BOX_ID.
  BOXES-TYPE       = BC_CONST-ROW_BOX.
  BOXES-CHART_ID   = CHART2.
  BOXES-FORM_TYPE  = 'B2'.
  BOXES-COLOR_TYPE = 'B0'.
  APPEND BOXES.
* Table Title ("Documents") - Define Box Values - Title
  BOX_VALS-ID  = BOXES-ID.
  BOX_VALS-FL  = '0'.
  BOX_VALS-VAL = TEXT-203.   " Documents
  APPEND BOX_VALS.
* Chart Title ("Documents") - Define Box Values - Cell Value For Column 1
  BOX_VALS-FL  = '2'.
  BOX_VALS-VAL = TEXT-203.   " Documents
  APPEND BOX_VALS.
* Chart Title ("Quantity") - Define Box Values - Cell Value For Column 2
  BOX_VALS-FL  = '3'.
  BOX_VALS-VAL = TEXT-910.   " Quantity
  APPEND BOX_VALS.
* Table Title ("Documents") - Add The Box To The Positions Table
  POSITIONS-OBJ_ID     = BOXES-ID.
  POSITIONS-OBJ_TYPE   = BC_CONST-BOX_OBJECT.
  POSITIONS-CHART_ID   = CHART2.
  POSITIONS-ROW_NUMBER = 0.
  APPEND POSITIONS.
* Table Title ("Documents") - Add Box Id To Chart As Chart_title_box
  WRITE BOXES-ID TO VAL.
  CALL FUNCTION 'BARC_SET_CHART_ATTRIB'
    EXPORTING
      ID  = CHART2
      FL  = BC_CONST-CHART_TITLE_BOX
      VAL = VAL.
* Shift lines when multiple lines are drag-dropped
  CALL FUNCTION 'BARC_SET_CHART_ATTRIB'
    EXPORTING
      ID  = CHART2
      FL  = BC_CONST-MULTI_LINE_CONFIRM
      VAL = BC_CONST-X.

* Set The Width Of The Columns
  CALL FUNCTION 'BARC_SET_COLUMN_WIDTH'
    EXPORTING
      CHART_ID = CHART2
      INDEX    = 1
      WIDTH    = 600.
* Set The Width Of The Columns
  CALL FUNCTION 'BARC_SET_COLUMN_WIDTH'
    EXPORTING
      CHART_ID = CHART2
      INDEX    = 2
      WIDTH    = 6000.

  PERFORM CREATE_RIBBON_GRID USING CHART2.

ENDFORM.                               "CREATE_CHART_BOT_IT

*---------------------------------------------------------------------*
*       FORM CREATE_RIBBON_GRID                                       *
*---------------------------------------------------------------------*
* Define Ribbons and grids
*---------------------------------------------------------------------*
FORM CREATE_RIBBON_GRID USING P_CHART.

* Create Ribbons For Each Section
* Ribbons Are Time Scales To Be Defined For Every Time Axis Per Chart And Section.
* The Time Scales Are Presented Underneath One Another
  CALL FUNCTION 'BARC_ADD_RIBBON'  " Add A Ribbon For Section1 Displaying The Days ('5')
    EXPORTING
      CHART_ID   = P_CHART
      COLOR_TYPE = 'R3'
      SECTION_ID = SECTION1
      UNIT       = '5'.
  CALL FUNCTION 'BARC_ADD_RIBBON'  " Add A Ribbon For Section2 Displaying The Days ('5')
    EXPORTING
      CHART_ID   = P_CHART
      COLOR_TYPE = '00'
      SECTION_ID = SECTION2
      UNIT       = '5'.
  CALL FUNCTION 'BARC_ADD_RIBBON'  " Add A Ribbon For Section2 Displaying The Months ('3')
    EXPORTING
      CHART_ID   = P_CHART
      COLOR_TYPE = 'R2'
      SECTION_ID = SECTION2
      UNIT       = '3'.
  CALL FUNCTION 'BARC_ADD_RIBBON'  " Add A Ribbon For Section3 Displaying The Days ('5')
    EXPORTING
      CHART_ID   = P_CHART
      COLOR_TYPE = 'R3'
      SECTION_ID = SECTION3
      UNIT       = '5'.

* Visualize The Calendar's Weekends And Holidays For Each Section
  CALL FUNCTION 'BARC_ADD_GRID'
    EXPORTING
      CALENDAR_ID = CALENDAR1
      CHART_ID    = P_CHART
      COLOR_TYPE  = 'R3'
      SECTION_ID  = SECTION1
      GRID_TYPE   = BC_CONST-CALENDAR_GRID.
  CALL FUNCTION 'BARC_ADD_GRID'
    EXPORTING
      CALENDAR_ID = CALENDAR1
      CHART_ID    = P_CHART
      COLOR_TYPE  = '00'
      SECTION_ID  = SECTION2
      GRID_TYPE   = BC_CONST-CALENDAR_GRID.
  CALL FUNCTION 'BARC_ADD_GRID'
    EXPORTING
      CALENDAR_ID = CALENDAR1
      CHART_ID    = P_CHART
      COLOR_TYPE  = 'R3'
      SECTION_ID  = SECTION3
      GRID_TYPE   = BC_CONST-CALENDAR_GRID.

ENDFORM. " CREATE_RIBBON_GRID

*---------------------------------------------------------------------*
*      Form  CREATE_TABLE_LINES
*---------------------------------------------------------------------*
* Create the table lines depending on the stati
*----------------------------------------------------------------------*
FORM CREATE_TABLE_LINES.

* Define the table lines etc for top chart, depending on the status field P_ST
  CASE GV_ST.
    WHEN GC_ST_MD.
      PERFORM CREATE_TABLE_LINES_TOP_MD.
    WHEN GC_ST_EQ.
      PERFORM CREATE_TABLE_LINES_TOP_EQ.
    WHEN OTHERS.
*     Should never occur
  ENDCASE.

* Define the table lines etc for bottom chart, depending on the status field P_SB
  PERFORM CREATE_TABLE_LINES_BOT.

ENDFORM.                    " CREATE_TABLE_LINES

*---------------------------------------------------------------------*
*       FORM CREATE_TABLE_LINES_TOP_MD                                *
*---------------------------------------------------------------------*
*  Define the table lines for the top chart displaying models
*---------------------------------------------------------------------*
FORM CREATE_TABLE_LINES_TOP_MD.

* Reset row counter for the top part
  CLEAR GV_ROW_CTR_TOP.
* Loop over the materials/equipments that were selected
  LOOP AT IT_MATEQ.
*** FIRST CREATE THE MODEL LINE ***
*   Increment the row counter
    GV_ROW_CTR_TOP   = GV_ROW_CTR_TOP + 1.
*   Increment the box id
    ACT_BOX_ID       = ACT_BOX_ID + 1.
*   Create a new box for the table line
    BOXES-ID         = ACT_BOX_ID.
    BOXES-TYPE       = BC_CONST-ROW_BOX.
    BOXES-CHART_ID   = CHART1.
    BOXES-FORM_TYPE  = 'B8'.
    BOXES-COLOR_TYPE = 'L1'.
    APPEND BOXES.
*   Enter the box's hover value
    BOX_VALS-ID  = BOXES-ID.
    BOX_VALS-FL  = '0'.
    BOX_VALS-VAL = IT_MATEQ-MATNR.
    APPEND BOX_VALS.
*   Enter the model
    BOX_VALS-FL  = '2'.
    BOX_VALS-VAL = IT_MATEQ-MAKTX.
    APPEND BOX_VALS.
*   Enter the linetype (not shown on chart)
    BOX_VALS-FL  = '9'.
    BOX_VALS-VAL = GC_BCLT_MD.
    APPEND BOX_VALS.
*   Enter the key part 1 for the line (not shown on chart)
    BOX_VALS-FL  = '10'.
    BOX_VALS-VAL = IT_MATEQ-MATNR.
    APPEND BOX_VALS.
*   Add the box to the positions table
    POSITIONS-OBJ_ID     = BOXES-ID.
    POSITIONS-OBJ_TYPE   = BC_CONST-BOX_OBJECT.
    POSITIONS-CHART_ID   = BOXES-CHART_ID.
    POSITIONS-ROW_NUMBER = GV_ROW_CTR_TOP.
    APPEND POSITIONS.
*** THEN CREATE THE "Available" LINE ***
*   Increment the row counter
    GV_ROW_CTR_TOP   = GV_ROW_CTR_TOP + 1.
*   Increment the box id
    ACT_BOX_ID       = ACT_BOX_ID + 1.
*   Create a new box for the table line
    BOXES-ID         = ACT_BOX_ID.
    BOXES-TYPE       = BC_CONST-ROW_BOX.
    BOXES-CHART_ID   = CHART1.
    BOXES-FORM_TYPE  = 'B9'.
    BOXES-COLOR_TYPE = 'L2'.
    APPEND BOXES.
*   Enter the box's hover value
    BOX_VALS-ID  = BOXES-ID.
    BOX_VALS-FL  = '0'.
    WRITE IT_MATEQ-MAKTX TO BOX_VALS-VAL.
    APPEND BOX_VALS.
*   Enter the model
    BOX_VALS-FL  = '2'.
    BOX_VALS-VAL = TEXT-903.  " 'Available'
    APPEND BOX_VALS.
*   Add the box to the positions table
    POSITIONS-OBJ_ID     = BOXES-ID.
    POSITIONS-OBJ_TYPE   = BC_CONST-BOX_OBJECT.
    POSITIONS-CHART_ID   = BOXES-CHART_ID.
    POSITIONS-ROW_NUMBER = GV_ROW_CTR_TOP.
    APPEND POSITIONS.
*   Create the nodes for this model's "Available" line
    PERFORM CREATE_TABLE_NODES_TOP_MD USING 'AV'.
*** FINALLY CREATE THE "Soft Reservation" LINE ***
*   Increment the row counter
    GV_ROW_CTR_TOP   = GV_ROW_CTR_TOP + 1.
*   Increment the box id
    ACT_BOX_ID       = ACT_BOX_ID + 1.
*   Create a new box for the table line
    BOXES-ID         = ACT_BOX_ID.
    BOXES-TYPE       = BC_CONST-ROW_BOX.
    BOXES-CHART_ID   = CHART1.
    BOXES-FORM_TYPE  = 'B9'.
    BOXES-COLOR_TYPE = 'L2'.
    APPEND BOXES.
*   Enter the box's hover value
    BOX_VALS-ID  = BOXES-ID.
    BOX_VALS-FL  = '0'.
    WRITE IT_MATEQ-MAKTX TO BOX_VALS-VAL.
    APPEND BOX_VALS.
*   Enter the model
    BOX_VALS-FL  = '2'.
    BOX_VALS-VAL = TEXT-904.  " 'Soft Reservation'
    APPEND BOX_VALS.
*   Add the box to the positions table
    POSITIONS-OBJ_ID     = BOXES-ID.
    POSITIONS-OBJ_TYPE   = BC_CONST-BOX_OBJECT.
    POSITIONS-CHART_ID   = BOXES-CHART_ID.
    POSITIONS-ROW_NUMBER = GV_ROW_CTR_TOP.
    APPEND POSITIONS.
*   Create the nodes for this model's "Soft reservation" line
    PERFORM CREATE_TABLE_NODES_TOP_MD USING 'SR'.
  ENDLOOP.

ENDFORM.                               "form CREATE_TABLE_LINES_TOP_MD

*---------------------------------------------------------------------*
*       FORM CREATE_TABLE_LINES_TOP_EQ                                *
*---------------------------------------------------------------------*
*  Define the table lines for the top chart displaying equipments
*---------------------------------------------------------------------*
FORM CREATE_TABLE_LINES_TOP_EQ.

  DATA: LV_FORM_TYPE  TYPE BCFORMTYP,
        LV_COLOR_TYPE TYPE BCFARBTYP,
        LV_KEYVAL     TYPE BCVALSVAL,
        LV_MAKTX      TYPE BCVALSVAL,
        LV_MODEL      TYPE BCVALSVAL,
        IT_AVAIL_LOC  LIKE IT_AVAIL OCCURS 0 WITH HEADER LINE.

* Reset row counter for the top part
  CLEAR GV_ROW_CTR_TOP.

* Added this step: "sort" IT_AVAIL so that e.g. contracts get priority over
* service orders
* Copy the whole availability table
  IT_AVAIL_LOC[] = IT_AVAIL[].
* Remove model/mat lines from the local copy and equipm. from the global table
  DELETE IT_AVAIL     WHERE LEVEL EQ 'EQ'.
  DELETE IT_AVAIL_LOC WHERE LEVEL NE 'EQ'.
* Add the equipment lines to the global table again, following priority
* First the contracts
  LOOP AT IT_AVAIL_LOC WHERE AUART(3) = GC_AUART_CONT
                          OR AUART    = GC_AUART_XREN.
    APPEND IT_AVAIL_LOC TO IT_AVAIL.
  ENDLOOP.
  DELETE IT_AVAIL_LOC  WHERE AUART(3) = GC_AUART_CONT
                          OR AUART    = GC_AUART_XREN.
* Then service orders
  LOOP AT IT_AVAIL_LOC WHERE AUART    = GC_AUART_ZAM1
                          OR AUART    = GC_AUART_ZAM2.
    APPEND IT_AVAIL_LOC TO IT_AVAIL.
  ENDLOOP.
  DELETE IT_AVAIL_LOC WHERE AUART    = GC_AUART_ZAM1
                         OR AUART    = GC_AUART_ZAM2.
* Then deliveries
  LOOP AT IT_AVAIL_LOC WHERE AUART    = GC_AUART_DELV
                          OR AUART    = GC_AUART_DELR.
    APPEND IT_AVAIL_LOC TO IT_AVAIL.
  ENDLOOP.
  DELETE IT_AVAIL_LOC WHERE AUART    = GC_AUART_DELV
                         OR AUART    = GC_AUART_DELR.
* Then the rest (shouldn't be anything left)
  APPEND LINES OF IT_AVAIL_LOC TO IT_AVAIL.
* End of extra step ******************************

* Loop over the materials/equipments that were selected
  LOOP AT IT_MATEQ.
*   Increment the row counter
    GV_ROW_CTR_TOP   = GV_ROW_CTR_TOP + 1.
*   Increment the box id
    ACT_BOX_ID       = ACT_BOX_ID + 1.
*   Set the form type and color type depending on the level being displayed
    CASE IT_MATEQ-LEVEL.
      WHEN 'EQ'.
        LV_FORM_TYPE  = 'B8'.
        LV_COLOR_TYPE = 'L2'.
*       LV_KEYVAL     = IT_MATEQ-EQUNR
        LV_KEYVAL     = IT_MATEQ-SERNR.
        CONCATENATE LV_MODEL '/' IT_MATEQ-SERNR INTO LV_MAKTX SEPARATED BY SPACE.
        SHIFT LV_MAKTX RIGHT BY 6 PLACES.
      WHEN 'MT'.
        LV_FORM_TYPE  = 'B9'.
        LV_COLOR_TYPE = 'L3'.
        LV_KEYVAL     = IT_MATEQ-MATNR.
        LV_MAKTX      = IT_MATEQ-MAKTX.
        SHIFT LV_MAKTX RIGHT BY 3 PLACES.
      WHEN 'MD'.
        LV_FORM_TYPE  = 'B9'.
        LV_COLOR_TYPE = 'L1'.
        LV_KEYVAL     = IT_MATEQ-MATNR.
        LV_MAKTX      = IT_MATEQ-MAKTX.
      ENDCASE.
*   Create a new box for the table line
    BOXES-ID         = ACT_BOX_ID.
    BOXES-TYPE       = BC_CONST-ROW_BOX.
    BOXES-CHART_ID   = CHART1.
    BOXES-FORM_TYPE  = LV_FORM_TYPE.
    BOXES-COLOR_TYPE = LV_COLOR_TYPE.
    APPEND BOXES.
*   Enter the box's hover value
    BOX_VALS-ID  = BOXES-ID.
    BOX_VALS-FL  = '0'.
    BOX_VALS-VAL = IT_MATEQ-MATNR.
    APPEND BOX_VALS.
*   Enter the model / equipment description (shown in the table)
    BOX_VALS-FL  = '2'.
    BOX_VALS-VAL = LV_MAKTX.
    APPEND BOX_VALS.
*   Only for equipments
    IF IT_MATEQ-LEVEL = 'EQ'.
*     Enter the equipment's Owning CoCo (shown in the table)
      BOX_VALS-FL  = '3'.
      BOX_VALS-VAL = IT_MATEQ-BUKRS.
      APPEND BOX_VALS.
*     Enter the equipment's Current location (shown in the table)
      BOX_VALS-FL  = '4'.
      BOX_VALS-VAL = IT_MATEQ-LOCAT.
      APPEND BOX_VALS.
*     Enter the equipment's Current status (shown in the table)
      BOX_VALS-FL  = '5'.
      BOX_VALS-VAL = IT_MATEQ-STAT.
      APPEND BOX_VALS.
    ENDIF.
*   Enter the linetype (not shown on chart)
    BOX_VALS-FL  = '9'.
    BOX_VALS-VAL = IT_MATEQ-LEVEL.
    APPEND BOX_VALS.
*   Enter the key part 1 for the line (not shown on chart)
    BOX_VALS-FL  = '10'.
    BOX_VALS-VAL = LV_KEYVAL.
    APPEND BOX_VALS.
*   Add the box to the positions table
    POSITIONS-OBJ_ID     = BOXES-ID.
    POSITIONS-OBJ_TYPE   = BC_CONST-BOX_OBJECT.
    POSITIONS-CHART_ID   = BOXES-CHART_ID.
    POSITIONS-ROW_NUMBER = GV_ROW_CTR_TOP.
    APPEND POSITIONS.
*   Draw nodes only for Models and Equipments
    IF IT_MATEQ-LEVEL = GC_BCLT_MD.
*     If we just added a model line: create the nodes for this model's soft reservations
      PERFORM CREATE_TABLE_NODES_TOP_MD USING 'SR'.
*     Save the model name (will be added at the front of the equipment description)
      LV_MODEL = LV_MAKTX.
    ELSEIF IT_MATEQ-LEVEL = GC_BCLT_EQ.
*     If we just added an eqpt line: create the nodes for this eqpt's actual allocations
      PERFORM CREATE_TABLE_NODES_TOP_EQ.
    ENDIF.
  ENDLOOP.

ENDFORM.                               "form CREATE_TABLE_LINES_TOP_EQ

*---------------------------------------------------------------------*
*       FORM CREATE_TABLE_LINES_BOT                                   *
*---------------------------------------------------------------------*
*  Define the table lines for the bottom chart displaying documents
*---------------------------------------------------------------------*
FORM CREATE_TABLE_LINES_BOT.

* Variable holding the form type to be used for documents
  DATA: LV_DOC_FORM_TYPE TYPE BCFORMTYP,  " The form type (shape) that should be used on document level
        LV_BCLT(4)       TYPE C,          " The barchart line type for the item depends on the AUART
        LV_INT           TYPE I.          " Temporary integer (to move quantity to)

* Determine the form type for documents
  CASE GV_SB.
    WHEN GC_SB_DO.
      LV_DOC_FORM_TYPE = 'B8'.
    WHEN GC_SB_IT.
      LV_DOC_FORM_TYPE = 'B9'.
    WHEN OTHERS.
*     Should never occur
  ENDCASE.

* Reset row counter for the top part
  CLEAR GV_ROW_CTR_BOT.
* Loop over the documents that were selected
  LOOP AT IT_DOCUM.
*** FIRST CREATE THE DOCUMENT LINE ***
*   Increment the row counter
    GV_ROW_CTR_BOT = GV_ROW_CTR_BOT + 1.
*   Increment the box id
    ACT_BOX_ID       = ACT_BOX_ID + 1.
*   Create a new box for the table line
    BOXES-ID         = ACT_BOX_ID.
    BOXES-TYPE       = BC_CONST-ROW_BOX.
    BOXES-CHART_ID   = CHART2.
    BOXES-FORM_TYPE  = LV_DOC_FORM_TYPE.
    BOXES-COLOR_TYPE = 'L1'.
    APPEND BOXES.
*   Enter the box's hover value
    BOX_VALS-ID  = BOXES-ID.
    BOX_VALS-FL  = '0'.
    BOX_VALS-VAL = IT_DOCUM-VBELN.
    APPEND BOX_VALS.
*   Enter the document
    BOX_VALS-FL  = '2'.
    BOX_VALS-VAL = IT_DOCUM-VBELN.    " BSTKD
    APPEND BOX_VALS.
*   Enter the linetype (not shown on chart)
    BOX_VALS-FL  = '9'.
    BOX_VALS-VAL = IT_DOCUM-AUART.
    APPEND BOX_VALS.
*   Enter the key part 1 for the line (not shown on chart)
    BOX_VALS-FL  = '10'.
    BOX_VALS-VAL = IT_DOCUM-VBELN.
    APPEND BOX_VALS.
*   Add the box to the positions table
    POSITIONS-OBJ_ID     = BOXES-ID.
    POSITIONS-OBJ_TYPE   = BC_CONST-BOX_OBJECT.
    POSITIONS-CHART_ID   = BOXES-CHART_ID.
    POSITIONS-ROW_NUMBER = GV_ROW_CTR_BOT.
    APPEND POSITIONS.
*** WHEN IN DOCUMENT MODE: DRAW NODE ***
    IF GV_SB = GC_SB_DO.
      PERFORM CREATE_TABLE_NODE_BOT USING IT_DOCUM-BEGDAT
                                          IT_DOCUM-ENDDAT
                                          IT_DOCUM-LOCAT.
*** WHEN IN ITEM MODE, CREATE THE ITEM LINES***
    ELSE.
*     Determine the barchart line type for the items of this document
      CASE IT_DOCUM-AUART.
        WHEN GC_AUART_QUOT.
          LV_BCLT = GC_BCLT_QI.
        WHEN GC_AUART_ENQU.
          LV_BCLT = GC_BCLT_EI.
      ENDCASE.
*     Loop through the items for the current document
      LOOP AT IT_ITEMS WHERE VBELN = IT_DOCUM-VBELN.
*       Increment the row counter
        GV_ROW_CTR_BOT = GV_ROW_CTR_BOT + 1.
*       Increment the box id
        ACT_BOX_ID       = ACT_BOX_ID + 1.
*       Create a new box for the table line
        BOXES-ID         = ACT_BOX_ID.
        BOXES-TYPE       = BC_CONST-ROW_BOX.
        BOXES-CHART_ID   = CHART2.
        BOXES-FORM_TYPE  = 'B8'.
        BOXES-COLOR_TYPE = 'L2'.
        APPEND BOXES.
*       Enter the box's hover value
        BOX_VALS-ID  = BOXES-ID.
        BOX_VALS-FL  = '0'.
        BOX_VALS-VAL = IT_ITEMS-MAKTX.
        APPEND BOX_VALS.
*       Enter the model
        BOX_VALS-FL  = '2'.
        BOX_VALS-VAL = IT_ITEMS-MAKTX.
        APPEND BOX_VALS.
*       Enter the quantity
        BOX_VALS-FL  = '3'.
        LV_INT = IT_ITEMS-KWMENG.
        WRITE LV_INT TO BOX_VALS-VAL LEFT-JUSTIFIED.
*        BOX_VALS-VAL = IT_ITEMS-KWMENG.
        APPEND BOX_VALS.
*       Enter the linetype (not shown on chart)
        BOX_VALS-FL  = '9'.
        BOX_VALS-VAL = LV_BCLT.
        APPEND BOX_VALS.
*       Enter the key part 1 for the line (not shown on chart)
        BOX_VALS-FL  = '10'.
        BOX_VALS-VAL = IT_ITEMS-VBELN.
        APPEND BOX_VALS.
*       Enter the key part 2 for the line (not shown on chart)
        BOX_VALS-FL  = '11'.
        BOX_VALS-VAL = IT_ITEMS-POSNR.
        APPEND BOX_VALS.
*       Add the box to the positions table
        POSITIONS-OBJ_ID     = BOXES-ID.
        POSITIONS-OBJ_TYPE   = BC_CONST-BOX_OBJECT.
        POSITIONS-CHART_ID   = BOXES-CHART_ID.
        POSITIONS-ROW_NUMBER = GV_ROW_CTR_BOT.
        APPEND POSITIONS.
***     DRAW NODE FOR ITEM ***
        PERFORM CREATE_TABLE_NODE_BOT USING IT_ITEMS-BEGDAT
                                            IT_ITEMS-ENDDAT
                                            IT_ITEMS-LOCAT.
      ENDLOOP.
    ENDIF.

  ENDLOOP.

ENDFORM.    "  CREATE_TABLE_LINES_BOT

*---------------------------------------------------------------------*
*      Form  CREATE_TABLE_NODES_TOP_MD
*---------------------------------------------------------------------*
* Create the nodes for corresponding table line for the top chart, models
*---------------------------------------------------------------------*
FORM CREATE_TABLE_NODES_TOP_MD USING P_MODE. " AV = Available
                                             " SR = Soft reservation
  DATA: LV_BEGDAT(40) TYPE C,
        LV_ENDDAT(40) TYPE C,
        LV_DATE       LIKE SY-DATUM,
        LV_DISVAL(40) TYPE C, " Value to be displayed for a node
        LV_HOVVAL(40) TYPE C, " Value to be displayed for a node when hovering
        LV_LAYER(2)   TYPE C,
        LV_AVAILC(40) TYPE C, " Character field for the available nr of machines
        LV_SOFTRC(40) TYPE C, " Character field for the soft res'd nr of machines
        LV_QUANTC(40) TYPE C. " Character field for the actual nr of machines

* Loop through the availability table of the current material
  LOOP AT IT_AVAIL WHERE MATNR = IT_MATEQ-MATNR.
*   Prepare the value and color to be displayed
    LV_QUANTC = IT_MATEQ-QUANT.
    CONDENSE LV_QUANTC NO-GAPS.
    IF P_MODE = 'AV'.
      LV_AVAILC = IT_AVAIL-AVAIL.
      CONDENSE LV_AVAILC NO-GAPS.
      CONCATENATE LV_AVAILC '/' LV_QUANTC INTO LV_DISVAL.
      CONCATENATE IT_MATEQ-MAKTX TEXT-907 LV_DISVAL TEXT-909   " 'Model ./. Available'
             INTO LV_HOVVAL SEPARATED BY SPACE.
      LV_LAYER = '92'.
    ELSE.
      LV_SOFTRC = IT_AVAIL-SOFTR.
      CONDENSE LV_SOFTRC NO-GAPS.
      CONCATENATE LV_SOFTRC '/' LV_QUANTC INTO LV_DISVAL.
      CONCATENATE IT_MATEQ-MAKTX TEXT-907 LV_DISVAL TEXT-908   " 'Model ./. Soft reserved'
             INTO LV_HOVVAL SEPARATED BY SPACE.
      IF IT_AVAIL-SOFTR > IT_MATEQ-QUANT.
        LV_LAYER = '93'.
      ELSE.
        LV_LAYER = '92'.
      ENDIF.
    ENDIF.
*   Write the dates to char fields
    WRITE IT_AVAIL-BEGDAT TO LV_BEGDAT.
    LV_DATE = IT_AVAIL-BEGDAT + 1.
    WRITE LV_DATE TO LV_ENDDAT.
    CONCATENATE LV_BEGDAT ';00:00:00;' INTO LV_BEGDAT.
    CONCATENATE LV_ENDDAT ';00:00:00;' INTO LV_ENDDAT.
*   Increment the node ID
    ACT_NODE_ID = ACT_NODE_ID + 1.
*   Create a new node
    NODES-ID         = ACT_NODE_ID.
    NODES-CHART_ID   = CHART1.
    APPEND NODES.
*   Add values to the node
    NODE_VALS-ID       = NODES-ID.
    NODE_VALS-CHART_ID = NODES-CHART_ID.
*   Add value: hover value
    NODE_VALS-FL       = '0'.
    NODE_VALS-VAL      = LV_HOVVAL.
    APPEND NODE_VALS.
*   Add value: startdate of node
    NODE_VALS-FL       = '1'.
    NODE_VALS-VAL      = LV_BEGDAT.
    APPEND NODE_VALS.
*   Add value: enddate of node
    NODE_VALS-FL       = '2'.
    NODE_VALS-VAL      = LV_ENDDAT.
    APPEND NODE_VALS.
*   Add value: contents to be shown on node
    NODE_VALS-FL       = '4'.
    NODE_VALS-VAL      = LV_DISVAL.
    APPEND NODE_VALS.
*   Add value: layer (graph. element) for the node
    NODE_VALS-FL  = BC_CONST-ADD_LAYER.
    NODE_VALS-VAL = LV_LAYER.
    APPEND NODE_VALS.
*   Add the node to the positions table
    POSITIONS-OBJ_ID     = NODES-ID.
    POSITIONS-OBJ_TYPE   = BC_CONST-NODE_OBJECT.
    POSITIONS-CHART_ID   = NODES-CHART_ID.
    POSITIONS-ROW_NUMBER = GV_ROW_CTR_TOP.
    APPEND POSITIONS.

  ENDLOOP.

ENDFORM.                    " CREATE_TABLE_NODES_TOP_MD

*---------------------------------------------------------------------*
*      Form  CREATE_TABLE_NODES_TOP_EQ
*---------------------------------------------------------------------*
* Create the nodes for corresponding table line for the top chart, Equipments
*---------------------------------------------------------------------*
FORM CREATE_TABLE_NODES_TOP_EQ.

  DATA: LV_BEGDAT(40) TYPE C,
        LV_ENDDAT(40) TYPE C,
        LV_LAYER      TYPE BCVALSVAL.

* Loop through the availability table of the current equipment
  LOOP AT IT_AVAIL WHERE EQUNR = IT_MATEQ-EQUNR.
*   Write the dates to char fields
    WRITE IT_AVAIL-BEGDAT TO LV_BEGDAT.
    WRITE IT_AVAIL-ENDDAT TO LV_ENDDAT.
    CONCATENATE LV_BEGDAT ';00:00:00;' INTO LV_BEGDAT.
    CONCATENATE LV_ENDDAT ';23:59:59;' INTO LV_ENDDAT.
*   Determine the node color depending on the status
    CASE IT_AVAIL-STAT.
      WHEN 'HR'.          " Hard reservation
        LV_LAYER = '97'.   " Light Blue
      WHEN 'OR'.          " On rent (currently)
        LV_LAYER = '95'.   " Blue
      WHEN 'MR'.          " Maintenance/Repair
        LV_LAYER = '96'.   " Orange
      WHEN 'TR'.          " Transport
        LV_LAYER = '87'.   " Yellow
    ENDCASE.
*   Increment the node ID
    ACT_NODE_ID = ACT_NODE_ID + 1.
*   Create a new node
    NODES-ID         = ACT_NODE_ID.
    NODES-CHART_ID   = CHART1.
    APPEND NODES.
*   Add values to the node
    NODE_VALS-ID       = NODES-ID.
    NODE_VALS-CHART_ID = NODES-CHART_ID.
*   Add value: hover value
    NODE_VALS-FL       = '0'.
    NODE_VALS-VAL      = IT_AVAIL-VBELN.
    APPEND NODE_VALS.
*   Add value: startdate of node
    NODE_VALS-FL       = '1'.
    NODE_VALS-VAL      = LV_BEGDAT.
    APPEND NODE_VALS.
*   Add value: enddate of node
    NODE_VALS-FL       = '2'.
    NODE_VALS-VAL      = LV_ENDDAT.
    APPEND NODE_VALS.
*   Add value: contents to be shown on node
    NODE_VALS-FL       = '4'.
    NODE_VALS-VAL      = IT_AVAIL-LOCAT.
    APPEND NODE_VALS.
*   Add value: the document type (not visible, but is required when a node is doubleclicked)
    NODE_VALS-FL       = '9'.
    NODE_VALS-VAL      = IT_AVAIL-AUART.
    APPEND NODE_VALS.
*   Add value: layer (graph. element) for the node
    NODE_VALS-FL  = BC_CONST-ADD_LAYER.
    NODE_VALS-VAL = LV_LAYER.
    APPEND NODE_VALS.
*   Add the node to the positions table
    POSITIONS-OBJ_ID     = NODES-ID.
    POSITIONS-OBJ_TYPE   = BC_CONST-NODE_OBJECT.
    POSITIONS-CHART_ID   = NODES-CHART_ID.
    POSITIONS-ROW_NUMBER = GV_ROW_CTR_TOP.
    APPEND POSITIONS.

  ENDLOOP.

ENDFORM.                    " CREATE_TABLE_NODES_TOP_EQ

*---------------------------------------------------------------------*
*       FORM CREATE_TABLE_NODES_BOT                                   *
*---------------------------------------------------------------------*
* Create the nodes for corresponding table line for the bottom chart, documents
*---------------------------------------------------------------------*
FORM CREATE_TABLE_NODE_BOT USING P_BEGDAT
                                 P_ENDDAT
                                 P_LOCAT.

DATA: LV_BEGDAT(40) TYPE C,
      LV_ENDDAT(40) TYPE C.

* Prepare the dates in text format
  WRITE P_BEGDAT TO LV_BEGDAT.
  CONCATENATE LV_BEGDAT ';00:00:00;' INTO LV_BEGDAT.
  WRITE P_ENDDAT TO LV_ENDDAT.
  CONCATENATE LV_ENDDAT ';23:59:59;' INTO LV_ENDDAT.

* Increment the node ID
  ACT_NODE_ID = ACT_NODE_ID + 1.
* Create a new node
  NODES-ID         = ACT_NODE_ID.
  NODES-CHART_ID   = CHART2.
  APPEND NODES.
* Add values to the node
  NODE_VALS-ID       = NODES-ID.
  NODE_VALS-CHART_ID = NODES-CHART_ID.
* Add value: hover value
  NODE_VALS-FL       = '0'.
  NODE_VALS-VAL      = P_LOCAT.
  APPEND NODE_VALS.
* Add value: startdate of node
  NODE_VALS-FL       = '1'.
  NODE_VALS-VAL      = LV_BEGDAT.
  APPEND NODE_VALS.
* Add value: enddate of node
  NODE_VALS-FL       = '2'.
  NODE_VALS-VAL      = LV_ENDDAT.
  APPEND NODE_VALS.
* Add value: contents to be shown on node
  NODE_VALS-FL       = '4'.
  NODE_VALS-VAL      = P_LOCAT.
  APPEND NODE_VALS.
* Add value: layer (graph. element) for the node
  NODE_VALS-FL       = BC_CONST-ADD_LAYER.
  NODE_VALS-VAL      = '94'.
  APPEND NODE_VALS.
* Add the node to the positions table
  POSITIONS-OBJ_ID     = NODES-ID.
  POSITIONS-OBJ_TYPE   = BC_CONST-NODE_OBJECT.
  POSITIONS-CHART_ID   = NODES-CHART_ID.
  POSITIONS-ROW_NUMBER = GV_ROW_CTR_BOT.
  APPEND POSITIONS.

ENDFORM.                               "CREATE_TABLE_NODES_BOT

*&---------------------------------------------------------------------*
*&      Form  DELETE_CHART_DATA
*&---------------------------------------------------------------------*
* reset the data tables used to feed the barchart control(s)
*----------------------------------------------------------------------*
FORM DELETE_CHART_DATA.

  CLEAR: NODE_VALS[],
         NODE_VALS,
         NODES[],
         NODES,
         BOX_VALS[],
         BOX_VALS,
         BOXES[],
         BOXES,
         POSITIONS[],
         POSITIONS,
         ACT_BOX_ID,
         ACT_NODE_ID.

ENDFORM.                    " DELETE_CHART_DATA

*&---------------------------------------------------------------------*
*&      Form  DELETE_CHARTCONTROL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM DELETE_CHARTCONTROL .

* Clean up
  CALL FUNCTION 'BARC_GRAPHIC_PAI'
    EXPORTING
      CONTROL_HANDLE     = GV_BARC_OCX_HNDL
      AT_CONTROL_DESTROY = SGRC_CONST-YES.

* Destroy control
  CALL FUNCTION 'CONTROL_DESTROY'
    CHANGING
      H_CONTROL = GV_BARC_OCX_HNDL
    EXCEPTIONS
      OTHERS    = 1.

ENDFORM.                    " DELETE_CHARTCONTROL

*&---------------------------------------------------------------------*
*&      Form  REFRESH_CHARTS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM REFRESH_CHARTS.

* First save the rental basket
  PERFORM SB_SAVE.

* Select the data again based on the original selection criteria and display modus
  PERFORM DELETE_SOURCE_DATA.
  PERFORM LOAD_DATA.

* Reset the charts
  PERFORM DELETE_CHARTCONTROL.
  PERFORM DELETE_CHART_DATA.

* Perpare the charts again
  PERFORM CREATE_CHARTCONTROL.
  PERFORM PREPARE_CHART_DATA.

  CALL FUNCTION 'BARC_GRAPHIC_PBO'
    EXPORTING
      ABAP_CMD       = ABAP_CMD
      CONFIRM        = 'X'
      PROFILE        = GRAPH_PROFILE
      STAT           = STAT
      STATUS_TEXT    = STATUS_TEXT
      CONTROL_HANDLE = GV_BARC_OCX_HNDL  "F#R OCX-UMSTELLUNG
    TABLES
      BOXES          = BOXES
      BOX_VALS       = BOX_VALS
      DELETIONS      = DELETIONS
      LINKS          = LINKS
      LINK_VALS      = LINK_VALS
      NODES          = NODES
      NODE_VALS      = NODE_VALS
      POSITIONS      = POSITIONS
    EXCEPTIONS
      ERR_IN_PROFILE = 1
      INV_PROFILE    = 2
      INV_WINID      = 3.

ENDFORM.                    " REFRESH_CHARTS
