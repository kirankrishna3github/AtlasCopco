*----------------------------------------------------------------------*
***INCLUDE YSE_RENT_PLBRD_F03 .
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  GET_LINES_SELECTED
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM GET_LINES_SELECTED .

  CLEAR: IT_BOXES_BOT[], IT_BOXES_BOT, IT_BOXES_TOP[], IT_BOXES_TOP.

  STAT = SGRC_CONST-STAT_4.            "Wait for input

* Tell the barchart that you want to read the selected items from the charts
  CALL FUNCTION 'BARC_GRAPHIC_PBO'
    EXPORTING
      ABAP_CMD       = 'SEL'
      STAT           = STAT
      CONTROL_HANDLE = GV_BARC_OCX_HNDL.

* Collect the selected items
  CALL FUNCTION 'BARC_GRAPHIC_PAI'
    EXPORTING
      control_handle = GV_barc_ocx_HNDL  "f¨¹r Umstellung auf OCX
    IMPORTING
      graph_cmd      = graph_cmd
      graph_cmd_info = graph_cmd_info
      gr_sel_field   = gr_sel_field
      layer_type     = layer_kind
      settings       = settings
      symboltype     = symboltype
    TABLES
      boxes          = boxes
    EXCEPTIONS
      inv_winid      = 1.

* Split the selected lines in 2 tables: one for the top chart, one for the bottom chart
  LOOP AT BOXES.
    IF BOXES-CHART_ID = 1.
      APPEND BOXES TO IT_BOXES_TOP.
    ELSEIF BOXES-CHART_ID = 2.
      APPEND BOXES TO IT_BOXES_BOT.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " GET_LINES_SELECTED

*&---------------------------------------------------------------------*
*&      Form  GET_MATEQ_SELECTED
*&---------------------------------------------------------------------*
* P_MODE is to specify which lines you expect selected and should be
* either MD or EQ
*----------------------------------------------------------------------*
FORM GET_MATEQ_SELECTED USING P_MODE.

  DATA:  WA_MATEQ   TYPE GT_MATEQ,
         LV_LINES   TYPE I.

  CLEAR: IT_MATEQ_SEL[], IT_MATEQ_SEL.

* There should be at least 1 entry in IT_BOXES_TOP (otherwise the user has selected nothing)
  DESCRIBE TABLE IT_BOXES_TOP LINES LV_LINES.
  IF LV_LINES = 0.
    MESSAGE E030.
  ENDIF.

* Loop over the lines which were selected from chart 1
  LOOP AT IT_BOXES_TOP.
*   Read the line type of the current line
    READ TABLE ALL_BOX_VALS WITH KEY ID = IT_BOXES_TOP-ID
                                     FL = 9.
*   If a line was selected that doesn't have linetype ...
    IF SY-SUBRC <> 0.
      MESSAGE E026.
*   If a line was selected that is of a linetype different then expected ...
    ELSEIF NOT ALL_BOX_VALS-VAL = P_MODE.
      MESSAGE E026.
    ENDIF.

*   If the line which is being processed is of the expected type, read the key field of the line
    READ TABLE ALL_BOX_VALS WITH KEY ID = IT_BOXES_TOP-ID
                                     FL = 10.
*   If the key field wasn't found, ...
    IF SY-SUBRC <> 0.
      MESSAGE E027.
    ENDIF.

*   Add the key field to the materials that should be added to the doc
    IT_MATEQ_SEL-LEVEL = P_MODE.
    IF P_MODE = GC_BCLT_EQ.
*      The value stored on field 10 used to be the equnr for equipment lines, now it's sernr
*      IT_MATEQ_SEL-EQUNR = ALL_BOX_VALS-VAL.
*      READ TABLE IT_MATEQ INTO WA_MATEQ WITH KEY LEVEL = GC_BCLT_EQ
*                                                 EQUNR = IT_MATEQ_SEL-EQUNR.
*      IF SY-SUBRC = 0.
*        IT_MATEQ_SEL-MAKTX = WA_MATEQ-MAKTX.
*        IT_MATEQ_SEL-MATNR = WA_MATEQ-MATNR.
*      ENDIF.
      IT_MATEQ_SEL-SERNR = ALL_BOX_VALS-VAL.
      READ TABLE IT_MATEQ INTO WA_MATEQ WITH KEY LEVEL = GC_BCLT_EQ
                                                 SERNR = IT_MATEQ_SEL-SERNR.
      IF SY-SUBRC = 0.
        IT_MATEQ_SEL-MAKTX = WA_MATEQ-MAKTX.
        IT_MATEQ_SEL-MATNR = WA_MATEQ-MATNR.
        IT_MATEQ_SEL-EQUNR = WA_MATEQ-EQUNR.
      ENDIF.
    ELSE.
      IT_MATEQ_SEL-MATNR = ALL_BOX_VALS-VAL.
      READ TABLE IT_MATEQ INTO WA_MATEQ WITH KEY LEVEL = GC_BCLT_MD
                                                 MATNR = IT_MATEQ_SEL-MATNR.
      IF SY-SUBRC = 0.
        IT_MATEQ_SEL-MAKTX = WA_MATEQ-MAKTX.
      ENDIF.
    ENDIF.
    APPEND IT_MATEQ_SEL.

  ENDLOOP.      " IT_BOXES_TOP

ENDFORM.                    " GET_MATEQ_SELECTED

*&---------------------------------------------------------------------*
*&      Form  GET_DITEM_SELECTED
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM GET_DITEM_SELECTED USING P_MODE.

  DATA: LV_ROWCNT TYPE I.

* Check the rowcount of selected lines in chart 2
  DESCRIBE TABLE IT_BOXES_BOT LINES LV_ROWCNT.
* If more then 1 line selected, ...
  IF LV_ROWCNT > 1.
    MESSAGE E028.
  ELSEIF LV_ROWCNT < 1.
    MESSAGE E028.
  ENDIF.

* Read the selected line from chart 2
  READ TABLE IT_BOXES_BOT.
* Read the line type of the selected line
  READ TABLE ALL_BOX_VALS WITH KEY ID = IT_BOXES_BOT-ID
                                   FL = 9.
* If a line was selected that doesn't have linetype, ...
  IF SY-SUBRC <> 0.
    MESSAGE E029.
* If a line was selected that has a linetype different from the expexted
  ELSEIF NOT ( ALL_BOX_VALS-VAL = P_MODE ).
    MESSAGE E029.
  ENDIF.

* If the line which is being processed is of a good type, read the key field of the current line as the document number
  READ TABLE ALL_BOX_VALS WITH KEY ID = IT_BOXES_BOT-ID
                                   FL = 10.
* If the key field wasn't found, ...
  IF SY-SUBRC <> 0.
    MESSAGE E027.
  ENDIF.
  WA_DOCIT_SEL-VBELN = ALL_BOX_VALS-VAL.

* Read the second key field of the current line as the item number
  READ TABLE ALL_BOX_VALS WITH KEY ID = IT_BOXES_BOT-ID
                                   FL = 11.
* If the key field wasn't found, ...
  IF SY-SUBRC <> 0.
    MESSAGE E027.
  ENDIF.
  WA_DOCIT_SEL-POSNR = ALL_BOX_VALS-VAL.

ENDFORM.                    " GET_DITEM_SELECTED

*&---------------------------------------------------------------------*
*&      Form  BDC_ADD_SCREEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM BDC_ADD_SCREEN USING P_PROGRAM P_DYNPRO.
  CLEAR IT_BDCDATA.
  IT_BDCDATA-PROGRAM  = P_PROGRAM.
  IT_BDCDATA-DYNPRO   = P_DYNPRO.
  IT_BDCDATA-DYNBEGIN = GC_CHAR_X.
  APPEND IT_BDCDATA.
ENDFORM.    " BDC_ADD_SCREEN

*&---------------------------------------------------------------------*
*&      Form  BDC_ADD_FIELD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM BDC_ADD_FIELD USING P_FNAM P_FVAL.
  IF P_FVAL <> GC_CHAR_FS.   " Forward Slash
    CLEAR IT_BDCDATA.
    IT_BDCDATA-FNAM = P_FNAM.
    IT_BDCDATA-FVAL = P_FVAL.
    APPEND IT_BDCDATA.
  ENDIF.
ENDFORM.    " BDC_ADD_FIELD

*&---------------------------------------------------------------------*
*&      Form  SB_XFER2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SB_XFER2 USING P_MODE.
* P_MODE is to specify which lines you expect selected and should be either MD or EQ

  DATA: LV_AUART   TYPE AUART,
        WA_VBAP    LIKE VBAP,
        WA_MATEQ   TYPE GT_MATEQ.

* Read the selected lines from the barchart
  PERFORM GET_LINES_SELECTED.

* Read the equipments/models selected
  PERFORM GET_MATEQ_SELECTED USING P_MODE.

* Read the selected item (first determine the type you expect for the document to which
* the selected item belongs)
  IF P_MODE = GC_BCLT_MD.
    LV_AUART = GC_BCLT_EI.
  ELSE.
    LV_AUART = GC_BCLT_QI.
  ENDIF.
  PERFORM GET_DITEM_SELECTED USING LV_AUART.
* The details for the selected line should already exist in IT_ITEMS which is filled in LOAD_SINGLE_DOC
  READ TABLE IT_ITEMS WITH KEY VBELN = WA_DOCIT_SEL-VBELN
                               POSNR = WA_DOCIT_SEL-POSNR.
* Check that it's a rental item that is being put in the rental basket
  IF SY-SUBRC NE 0.
    " should never occur
  ELSEIF GV_AUART_V = GC_AUART_ENQU AND IT_ITEMS-PSTYV NE 'ZREN' AND IT_ITEMS-PSTYV NE 'AFTX'.
    MESSAGE E022 WITH IT_ITEMS-POSNR IT_ITEMS-MATNR IT_ITEMS-PSTYV.
  ELSEIF GV_AUART_V = GC_AUART_QUOT AND IT_ITEMS-PSTYV NE 'ZREN'.
    MESSAGE E022 WITH IT_ITEMS-POSNR IT_ITEMS-MATNR IT_ITEMS-PSTYV.
  ENDIF.

* For every selected model / equipment, fill a line in the shopping basket
* First get the document items details (they are repeated for every selected model/equipment)
  CLEAR IT_RPB_SB.

  READ TABLE IT_ITEMS WITH KEY VBELN = WA_DOCIT_SEL-VBELN
                               POSNR = WA_DOCIT_SEL-POSNR.
* Set the document item details (common for the new shopping basket lines)
  IT_RPB_SB-VBELV   = IT_ITEMS-VBELN.
  IT_RPB_SB-POSNV   = IT_ITEMS-POSNR.
  IT_RPB_SB-MATNRV  = IT_ITEMS-MATNR.
  IT_RPB_SB-KWMENG  = IT_ITEMS-KWMENG.
  IT_RPB_SB-VRKME   = IT_ITEMS-VRKME.
  IT_RPB_SB-GRPOS   = IT_ITEMS-GRPOS.
  IT_RPB_SB-ARKTXV  = IT_ITEMS-MAKTX.
  IT_RPB_SB-SELIN   = SPACE.
  IT_RPB_SB-MANDT   = SY-MANDT.
  IT_RPB_SB-VBTYP_V = LV_AUART.
  IT_RPB_SB-VBELN   = SPACE.
  IT_RPB_SB-VBTYP_N = SPACE.
* Now process the replacing models / equipments
  LOOP AT IT_MATEQ_SEL.
    GV_SB_COUNTER = GV_SB_COUNTER + 1.
    IT_RPB_SB-COUNTER = GV_SB_COUNTER.
    IT_RPB_SB-POSNN   = SPACE.        " field not used
    IT_RPB_SB-MATNRN  = IT_MATEQ_SEL-MATNR.
    IT_RPB_SB-EQUNR   = IT_MATEQ_SEL-EQUNR.
    IT_RPB_SB-SERNR   = IT_MATEQ_SEL-SERNR.
    IT_RPB_SB-ARKTXN  = IT_MATEQ_SEL-MAKTX.
    APPEND IT_RPB_SB.
  ENDLOOP.                            " IT_MATEQ_SEL.

* Make sure the table is sorted and the counters are refreshed
  PERFORM SB_RENUMBER.

* Issue success message (Item added to rental basket)
  MESSAGE S023.

ENDFORM.                                                    " SB_XFER2

*&---------------------------------------------------------------------*
*&      Form  SB_SAVE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SB_SAVE.

  TABLES: YSE_RPB_SB.

  DELETE FROM YSE_RPB_SB WHERE VBELV = P_VBELN.

  LOOP AT IT_RPB_SB.
    MOVE-CORRESPONDING IT_RPB_SB TO YSE_RPB_SB.
    INSERT YSE_RPB_SB.
  ENDLOOP. " IT_RPB_SB

  COMMIT WORK.

ENDFORM.                    " SB_SAVE

*&---------------------------------------------------------------------*
*&      Form  SB_CLEAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SB_CLEAR .

  DELETE FROM YSE_RPB_SB WHERE VBELV = P_VBELN.

  CLEAR: IT_RPB_SB, IT_RPB_SB[].

ENDFORM.                    " SB_CLEAR

*&---------------------------------------------------------------------*
*&      Form  SB_RENUMBER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SB_RENUMBER.

  DATA: LV_CTR   TYPE ZCOUNTER,
        LV_POSNV TYPE POSNV.

  SORT IT_RPB_SB BY POSNV COUNTER.

  LOOP AT IT_RPB_SB.
    IF IT_RPB_SB-POSNV NE LV_POSNV.
      LV_POSNV = IT_RPB_SB-POSNV.
      LV_CTR   = 1.
    ELSE.
      LV_CTR   = LV_CTR + 1.
    ENDIF.
    IT_RPB_SB-COUNTER = LV_CTR.
    MODIFY IT_RPB_SB.
  ENDLOOP.

ENDFORM.                    " SB_RENUMBER

*&---------------------------------------------------------------------*
*&      Form  CREATE_SDOC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM CREATE_SDOC.

* Local variables
  DATA: LV_VBELN                   TYPE VBELN,      " New document's number
        LV_DEBITOR                 TYPE KUNNR,      " Customer to be used for adding serial numbers
        LV_ITM_NUMBER              TYPE POSNR,      " Position counter
        LV_BAPI                    TYPE STRING,     " Name of the doc creation bapi
        LV_LOG_HANDLE              TYPE BALLOGHNDL, " BAL_LOG_CREATE - Application
        LV_MSGNO                   TYPE SYMSGNO,
        LV_PARM1                   TYPE SYMSGV,
        LV_PARM2                   TYPE SYMSGV,
        LV_ANZSN                   TYPE ANZSN,
        LV_FREETXT(255)            TYPE C,
        LV_ERROR                   TYPE C,
        LV_WARNING                 TYPE C,
        LV_DAYS                    TYPE BUTAG,
        LV_WERKS                   TYPE WERKS_EXT,
        LV_LAGER                   TYPE LGORT_D,

* Local working areas
        WA_BAPI_VIEW               TYPE ORDER_VIEW,            " BAPISDORDER_GETDETAILEDLIST - ucture to hold the views you want to request of an order
        WA_SALESDOCUMENTS          TYPE SALES_KEY,             " BAPISDORDER_GETDETAILEDLIST - List of orders to be read
        WA_ORDER_HEADERS_OUT       TYPE BAPISDHD,              " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_ITEMS_OUT         TYPE BAPISDIT,              " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_SCHEDULES_OUT     TYPE BAPISDHEDU,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_PARTNERS_OUT      TYPE BAPISDPART,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_CONDITIONS_OUT    TYPE BAPISDCOND,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_BUSINESS_OUT      TYPE BAPISDBUSI,            " BAPISDORDER_GETDETAILEDLIST - Required For Payment Terms, Pricing Date Etc...
        WA_ORDER_ADDRESS_OUT       TYPE BAPISDCOAD,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_STATUSHEADERS_OUT TYPE BAPISDHDST,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_STATUSITEMS_OUT   TYPE BAPISDITST,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_COND_HEAD         TYPE BAPICONDHD,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_COND_ITEM         TYPE BAPICONDIT,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_COND_QTY_SCALE    TYPE BAPICONDQS,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_COND_VAL_SCALE    TYPE BAPICONDVS,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_CONTRACTS_OUT     TYPE BAPISDCNTR,            " BAPISDORDER_GETDETAILEDLIST - Required For Contract Start Date, Val Per.Cat Etc.        WA_ORDER_TEXTHEADERS_OUT   TYPE BAPISDTEHD,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_TEXTLINES_OUT     TYPE BAPITEXTLI,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_FLOWS_OUT         TYPE BAPISDFLOW,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_CFGS_CUREFS_OUT   TYPE BAPICUREFM,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_CFGS_CUCFGS_OUT   TYPE BAPICUCFGM,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_CFGS_CUINS_OUT    TYPE BAPICUINSM,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_CFGS_CUPRTS_OUT   TYPE BAPICUPRTM,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_CFGS_CUVALS_OUT   TYPE BAPICUVALM,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_CFGS_CUBLBS_OUT   TYPE BAPICUBLBM,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_CFGS_CUVKS_OUT    TYPE BAPICUVKM,             " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_BILLINGPLANS_OUT  TYPE BAPISDBPL,             " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_BILLINGDATES_OUT  TYPE BAPISDBPLD,            " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_CREDITCARDS_OUT   TYPE BAPICCARDM,            " BAPISDORDER_GETDETAILEDLIST -
        WA_EXTENSIONOUT            TYPE BAPIPAREX,             " BAPISDORDER_GETDETAILEDLIST -
        WA_ORDER_HEADER_IN         TYPE BAPISDHD1,             " BAPI_SALESORDER_CREATEFROMDAT2 -
        WA_ORDER_PARTNERS          TYPE BAPIPARNR,             " BAPI_SALESORDER_CREATEFROMDAT2 -
        WA_LOGIC_SWITCH            TYPE BAPISDLS,              " BAPI_SALESORDER_CREATEFROMDAT2 - To specify that pricing should be carried out keeping manual conditions
        WA_ORDER_ITEMS_IN          TYPE BAPISDITM,             " BAPI_SALESORDER_CREATEFROMDAT2 -
        WA_ORDER_SCHEDULES_IN      TYPE BAPISCHDL,             " BAPI_SALESORDER_CREATEFROMDAT2 -
        WA_ORDER_CONDITIONS_IN     TYPE BAPICOND,              " BAPI_SALESORDER_CREATEFROMDAT2 -
        WA_ORDER_CONTRACT_IN       TYPE BAPICTR,               " BAPI_SALESORDER_CREATEFROMDAT2 -
        WA_RETURN                  TYPE BAPIRET2,              " BAPI_SALESORDER_CREATEFROMDAT2 - To process messages
        WA_ENDRESULT               TYPE BAPIRET2,              " To collect endresult in
        WA_S_LOG                   TYPE BAL_S_LOG,             " BAL_LOG_CREATE - To send application log header
        WA_NEW_LOGNUMBERS          TYPE BAL_S_LGNM,            " BAL_DB_SAVE - to receive the sense-making log numbers
        WA_SERNR_DATA              TYPE BAPE_VBAP,
        WA_SERNR_DATAX             TYPE BAPE_VBAP,

* Local tables
        LT_SALESDOCUMENTS          TYPE TABLE OF SALES_KEY,    " BAPISDORDER_GETDETAILEDLIST - List of orders to be read
        LT_ORDER_HEADERS_OUT       TYPE TABLE OF BAPISDHD,     " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_ITEMS_OUT         TYPE TABLE OF BAPISDIT,     " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_SCHEDULES_OUT     TYPE TABLE OF BAPISDHEDU,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_PARTNERS_OUT      TYPE TABLE OF BAPISDPART,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_CONDITIONS_OUT    TYPE TABLE OF BAPISDCOND,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_BUSINESS_OUT      TYPE TABLE OF BAPISDBUSI,   " BAPISDORDER_GETDETAILEDLIST - Required For Payment Terms, Pricing Date Etc...
        LT_ORDER_ADDRESS_OUT       TYPE TABLE OF BAPISDCOAD,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_STATUSHEADERS_OUT TYPE TABLE OF BAPISDHDST,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_STATUSITEMS_OUT   TYPE TABLE OF BAPISDITST,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_COND_HEAD         TYPE TABLE OF BAPICONDHD,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_COND_ITEM         TYPE TABLE OF BAPICONDIT,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_COND_QTY_SCALE    TYPE TABLE OF BAPICONDQS,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_COND_VAL_SCALE    TYPE TABLE OF BAPICONDVS,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_CONTRACTS_OUT     TYPE TABLE OF BAPISDCNTR,   " BAPISDORDER_GETDETAILEDLIST - Required For Contract Start Date, Val Per.Cat Etc.
        LT_ORDER_TEXTHEADERS_OUT   TYPE TABLE OF BAPISDTEHD,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_TEXTLINES_OUT     TYPE TABLE OF BAPITEXTLI,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_FLOWS_OUT         TYPE TABLE OF BAPISDFLOW,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_CFGS_CUREFS_OUT   TYPE TABLE OF BAPICUREFM,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_CFGS_CUCFGS_OUT   TYPE TABLE OF BAPICUCFGM,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_CFGS_CUINS_OUT    TYPE TABLE OF BAPICUINSM,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_CFGS_CUPRTS_OUT   TYPE TABLE OF BAPICUPRTM,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_CFGS_CUVALS_OUT   TYPE TABLE OF BAPICUVALM,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_CFGS_CUBLBS_OUT   TYPE TABLE OF BAPICUBLBM,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_CFGS_CUVKS_OUT    TYPE TABLE OF BAPICUVKM,    " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_BILLINGPLANS_OUT  TYPE TABLE OF BAPISDBPL,    " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_BILLINGDATES_OUT  TYPE TABLE OF BAPISDBPLD,   " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_CREDITCARDS_OUT   TYPE TABLE OF BAPICCARDM,   " BAPISDORDER_GETDETAILEDLIST -
        LT_EXTENSIONOUT            TYPE TABLE OF BAPIPAREX,    " BAPISDORDER_GETDETAILEDLIST -
        LT_ORDER_PARTNERS          TYPE TABLE OF BAPIPARNR,    " BAPI_SALESORDER_CREATEFROMDAT2 -
        LT_ORDER_ITEMS_IN          TYPE TABLE OF BAPISDITM,    " BAPI_SALESORDER_CREATEFROMDAT2 -
        LT_ORDER_SCHEDULES_IN      TYPE TABLE OF BAPISCHDL,    " BAPI_SALESORDER_CREATEFROMDAT2 -
        LT_ORDER_CONDITIONS_IN     TYPE TABLE OF BAPICOND,     " BAPI_SALESORDER_CREATEFROMDAT2 -
        LT_ORDER_CONTRACT_IN       TYPE TABLE OF BAPICTR,      " BAPI_SALESORDER_CREATEFROMDAT2 -
        LT_RETURN                  TYPE TABLE OF BAPIRET2,     " BAPI_SALESORDER_CREATEFROMDAT2 - To receive any messages
        LT_NEW_LOGNUMBERS          TYPE BAL_T_LGNM,            " BAL_DB_SAVE - to receive the sense-making log numbers
        LT_LOG_HANDLE              TYPE BAL_T_LOGH,            " BAL_DB_SAVE - to pass the logs to be saved
        LT_EXTENSIONIN             TYPE STANDARD TABLE OF BAPIPAREX WITH HEADER LINE.

* One temporary table required to maintain relation between new items on the contract and the serial number that should come on it
  DATA: BEGIN OF WA_SERNR,
          POSNR TYPE POSNR,
          EQUNR TYPE EQUNR,
          SERNR TYPE GERNR,
          MATNR TYPE MATNR,
          MAKTX TYPE MAKTX,
        END OF WA_SERNR,
        LT_SERNR LIKE TABLE OF WA_SERNR,
        BEGIN OF LT_POSNR OCCURS 0,
          POSNR LIKE VBAP-POSNR,
        END OF LT_POSNR.

  FIELD-SYMBOLS:
    <FS_SERNR> LIKE LINE OF LT_SERNR.

* In case of contract, have the user be more specific (ZQP, ZQP1, ZQP2)
  IF GV_AUART_N = GC_AUART_CONT.
    CALL SCREEN 203 STARTING AT 10 10 ENDING AT 40 14.
*   If user clicked cancel -> exit the creation
    IF SY-UCOMM = 'CANC'.
      EXIT.
    ELSEIF RB_ZQP EQ GC_CHAR_X.
      GV_AUART_N = GC_AUART_CONT.
*   ELSEIF RB_ZQP1 EQ GC_CHAR_X.
*     GV_AUART_N = GC_AUART_CNDP.
    ELSEIF RB_ZRIB EQ GC_CHAR_X.
      GV_AUART_N = GC_AUART_XREN.
    ELSEIF RB_ZQP2 EQ GC_CHAR_X.
      GV_AUART_N = GC_AUART_CNMB.
    ENDIF.
  ENDIF.

* Define the views you want to read from the originating document
  WA_BAPI_VIEW-HEADER       = GC_CHAR_X.
  WA_BAPI_VIEW-ITEM         = GC_CHAR_X.
  WA_BAPI_VIEW-SDSCHEDULE   = GC_CHAR_X.
  WA_BAPI_VIEW-PARTNER      = GC_CHAR_X.
  WA_BAPI_VIEW-SDCOND       = GC_CHAR_X.
  WA_BAPI_VIEW-BUSINESS     = GC_CHAR_X.
  WA_BAPI_VIEW-ADDRESS      = GC_CHAR_X.
  WA_BAPI_VIEW-STATUS_H     = GC_CHAR_X.
  WA_BAPI_VIEW-STATUS_I     = GC_CHAR_X.
  WA_BAPI_VIEW-SDCOND_ADD   = GC_CHAR_X.
  WA_BAPI_VIEW-CONTRACT     = GC_CHAR_X.
  WA_BAPI_VIEW-TEXT         = GC_CHAR_X.
  WA_BAPI_VIEW-FLOW         = GC_CHAR_X.
  WA_BAPI_VIEW-CONFIGURE    = GC_CHAR_X.
  WA_BAPI_VIEW-BILLPLAN     = GC_CHAR_X.
  WA_BAPI_VIEW-CREDCARD     = GC_CHAR_X.
  WA_BAPI_VIEW-INCOMP_LOG   = GC_CHAR_X.

* Create application log
  WA_S_LOG-EXTNUMBER = P_VBELN.
  WA_S_LOG-OBJECT    = 'YSE_RPB'.
  WA_S_LOG-ALDATE    = SY-DATLO.
  WA_S_LOG-ALTIME    = SY-TIMLO.
  WA_S_LOG-ALUSER    = SY-UNAME.
  CALL FUNCTION 'BAL_LOG_CREATE'
    EXPORTING
      I_S_LOG      = WA_S_LOG
    IMPORTING
      E_LOG_HANDLE = LV_LOG_HANDLE.

* Define document to be read (enquiry or quotation)
  APPEND P_VBELN TO LT_SALESDOCUMENTS.

* Read the originating document (enuiry or quotation)
  CALL FUNCTION 'BAPISDORDER_GETDETAILEDLIST'
    EXPORTING
      I_BAPI_VIEW             = WA_BAPI_VIEW
    TABLES
      SALES_DOCUMENTS         = LT_SALESDOCUMENTS
      ORDER_HEADERS_OUT       = LT_ORDER_HEADERS_OUT
      ORDER_ITEMS_OUT         = LT_ORDER_ITEMS_OUT
      ORDER_SCHEDULES_OUT     = LT_ORDER_SCHEDULES_OUT
      ORDER_PARTNERS_OUT      = LT_ORDER_PARTNERS_OUT
      ORDER_CONDITIONS_OUT    = LT_ORDER_CONDITIONS_OUT
      ORDER_BUSINESS_OUT      = LT_ORDER_BUSINESS_OUT
      ORDER_ADDRESS_OUT       = LT_ORDER_ADDRESS_OUT
      ORDER_STATUSHEADERS_OUT = LT_ORDER_STATUSHEADERS_OUT
      ORDER_STATUSITEMS_OUT   = LT_ORDER_STATUSITEMS_OUT
      ORDER_COND_HEAD         = LT_ORDER_COND_HEAD
      ORDER_COND_ITEM         = LT_ORDER_COND_ITEM
      ORDER_COND_QTY_SCALE    = LT_ORDER_COND_QTY_SCALE
      ORDER_COND_VAL_SCALE    = LT_ORDER_COND_VAL_SCALE
      ORDER_CONTRACTS_OUT     = LT_ORDER_CONTRACTS_OUT
      ORDER_TEXTHEADERS_OUT   = LT_ORDER_TEXTHEADERS_OUT
      ORDER_TEXTLINES_OUT     = LT_ORDER_TEXTLINES_OUT
      ORDER_FLOWS_OUT         = LT_ORDER_FLOWS_OUT
      ORDER_CFGS_CUREFS_OUT   = LT_ORDER_CFGS_CUREFS_OUT
      ORDER_CFGS_CUCFGS_OUT   = LT_ORDER_CFGS_CUCFGS_OUT
      ORDER_CFGS_CUINS_OUT    = LT_ORDER_CFGS_CUINS_OUT
      ORDER_CFGS_CUPRTS_OUT   = LT_ORDER_CFGS_CUPRTS_OUT
      ORDER_CFGS_CUVALS_OUT   = LT_ORDER_CFGS_CUVALS_OUT
      ORDER_CFGS_CUBLBS_OUT   = LT_ORDER_CFGS_CUBLBS_OUT
      ORDER_CFGS_CUVKS_OUT    = LT_ORDER_CFGS_CUVKS_OUT
      ORDER_BILLINGPLANS_OUT  = LT_ORDER_BILLINGPLANS_OUT
      ORDER_BILLINGDATES_OUT  = LT_ORDER_BILLINGDATES_OUT
      ORDER_CREDITCARDS_OUT   = LT_ORDER_CREDITCARDS_OUT
      EXTENSIONOUT            = LT_EXTENSIONOUT.

* Fill the header of the follow-up document based on originating doc
  IF NOT LT_ORDER_HEADERS_OUT[] IS INITIAL.
    READ TABLE LT_ORDER_HEADERS_OUT INTO WA_ORDER_HEADERS_OUT INDEX 1.
*   Save the debitor (to be used when adding serial numbers)
    LV_DEBITOR = WA_ORDER_HEADERS_OUT-SOLD_TO.
*   Move corresponding Source -> Target doc
    MOVE-CORRESPONDING WA_ORDER_HEADERS_OUT TO WA_ORDER_HEADER_IN.
*   Fill Document flow detail for header
    WA_ORDER_HEADER_IN-REFOBJTYPE = GV_REFOBJTYP.
    WA_ORDER_HEADER_IN-REFOBJKEY  = P_VBELN.
    WA_ORDER_HEADER_IN-REF_DOC    = P_VBELN.
    WA_ORDER_HEADER_IN-REFDOC_CAT = GV_VBTYP_V.
    WA_ORDER_HEADER_IN-REFDOCTYPE = GV_AUART_V.
*   Fill Target doc specific fields which cannot be sourced from source document
    WA_ORDER_HEADER_IN-SD_DOC_CAT = GV_VBTYP_N.
    WA_ORDER_HEADER_IN-DOC_TYPE   = GV_AUART_N.
    WA_ORDER_HEADER_IN-WBS_ELEM   = SPACE.
*   Fill Target doc specific fields which have different field names
    WA_ORDER_HEADER_IN-DLVSCHDUSE = WA_ORDER_HEADERS_OUT-DLVSCHEDUS.
*   If no "valid-to" date, default today's date + 1 month
    IF WA_ORDER_HEADER_IN-QT_VALID_T IS INITIAL.
      CALL FUNCTION 'NUMBER_OF_DAYS_PER_MONTH_GET'
        EXPORTING
          PAR_MONTH = SY-DATUM+4(2)
          PAR_YEAR  = SY-DATUM(4)
        IMPORTING
          PAR_DAYS  = LV_DAYS.
      WA_ORDER_HEADER_IN-QT_VALID_T = SY-DATUM + LV_DAYS - 1.
*     Log a message of this default in the application log
      CONCATENATE TEXT-950 WA_ORDER_HEADER_IN-QT_VALID_T INTO LV_FREETXT SEPARATED BY SPACE.
      PERFORM BAL_ADD_FT USING LV_LOG_HANDLE LV_FREETXT 'I'.
    ENDIF.
*   Copy the business data to the header (things like paymnt terms, incoterms, etc.).
*   Items' bus data is handled when processing LT_ORDER_ITEMS_OUT
    READ TABLE LT_ORDER_BUSINESS_OUT INTO WA_ORDER_BUSINESS_OUT WITH KEY ITM_NUMBER = 0.
    IF SY-SUBRC = 0.
      MOVE-CORRESPONDING WA_ORDER_BUSINESS_OUT TO WA_ORDER_HEADER_IN.
    ENDIF.
*   Copy the contract data of the header
*   Item's contract data is handled when processing LT_ORDER_ITEMS_OUT
    READ TABLE LT_ORDER_CONTRACTS_OUT INTO WA_ORDER_CONTRACTS_OUT WITH KEY ITM_NUMBER = 0.
    IF SY-SUBRC = 0.
*     Move corresponding Source -> Target Contract data
      MOVE-CORRESPONDING WA_ORDER_CONTRACTS_OUT TO WA_ORDER_CONTRACT_IN.
*     Fill Target contract data specific fields (different field names in source and target)
      WA_ORDER_CONTRACT_IN-CON_ST_DAT = WA_ORDER_CONTRACTS_OUT-CONTSTADAT.
      WA_ORDER_CONTRACT_IN-CON_EN_DAT = WA_ORDER_CONTRACTS_OUT-CONTENDDAT.
*     Write header contract data
      APPEND WA_ORDER_CONTRACT_IN TO LT_ORDER_CONTRACT_IN.
    ENDIF.
  ENDIF.

* Copy partner data from originating to follow-up document
  LOOP AT LT_ORDER_PARTNERS_OUT INTO WA_ORDER_PARTNERS_OUT.
    MOVE-CORRESPONDING WA_ORDER_PARTNERS_OUT TO WA_ORDER_PARTNERS.
    WA_ORDER_PARTNERS-PARTN_NUMB   = WA_ORDER_PARTNERS_OUT-CUSTOMER.
    APPEND WA_ORDER_PARTNERS TO LT_ORDER_PARTNERS.
  ENDLOOP. " LT_ORDER_PARTNERS_OUT

* Copy header conditions to follow up document
  LOOP AT LT_ORDER_CONDITIONS_OUT INTO WA_ORDER_CONDITIONS_OUT
                       WHERE ITM_NUMBER  IS INITIAL
                       AND NOT COND_TYPE IS INITIAL.
    CLEAR WA_ORDER_CONDITIONS_IN.
    MOVE-CORRESPONDING WA_ORDER_CONDITIONS_OUT TO WA_ORDER_CONDITIONS_IN.
    WA_ORDER_CONDITIONS_IN-COND_UNIT = WA_ORDER_CONDITIONS_OUT-COND_D_UNT.
    APPEND WA_ORDER_CONDITIONS_IN TO LT_ORDER_CONDITIONS_IN.
  ENDLOOP.

* For all items in originating document
  LOOP AT LT_ORDER_ITEMS_OUT INTO WA_ORDER_ITEMS_OUT.
*   Fill Document flow detail for the item
    CLEAR:
      WA_ORDER_ITEMS_IN-PLANT,
      WA_ORDER_ITEMS_IN-STORE_LOC.
    WA_ORDER_ITEMS_IN-REF_DOC    = P_VBELN.
    WA_ORDER_ITEMS_IN-REF_DOC_IT = WA_ORDER_ITEMS_OUT-ITM_NUMBER.
    WA_ORDER_ITEMS_IN-REF_DOC_CA = WA_ORDER_HEADERS_OUT-SD_DOC_CAT.
*   Copy the item details to the follow up item
*   WA_ORDER_ITEMS_IN-ITEM_CATEG = WA_ORDER_ITEMS_OUT-ITEM_CATEG.    " Item category for new items must be automatically determined by CREATE bapi.
*   WA_ORDER_ITEMS_IN-PLANT      = WA_ORDER_ITEMS_OUT-PLANT.         " See logic below for filling the plant
*   WA_ORDER_ITEMS_IN-TARGET_QTY = 1.                                " Doesn't seem to have impact on Enq -> Quo
    WA_ORDER_ITEMS_IN-TARGET_QU  = WA_ORDER_ITEMS_OUT-TARGET_QU.
    WA_ORDER_ITEMS_IN-DLVSCHDUSE = WA_ORDER_ITEMS_OUT-DLVSCHEDUS.
*   Find the business data for the item (paymnt terms, incoterms, etc.)
    READ TABLE LT_ORDER_BUSINESS_OUT INTO WA_ORDER_BUSINESS_OUT WITH KEY ITM_NUMBER = WA_ORDER_ITEMS_OUT-ITM_NUMBER.
*   If found, copy them to the item
    IF SY-SUBRC = 0.
      MOVE-CORRESPONDING WA_ORDER_BUSINESS_OUT TO WA_ORDER_ITEMS_IN.
    ENDIF.
*   Prepare a contract data line for the item
    READ TABLE LT_ORDER_CONTRACTS_OUT INTO WA_ORDER_CONTRACTS_OUT WITH KEY ITM_NUMBER = WA_ORDER_ITEMS_OUT-ITM_NUMBER.
    IF SY-SUBRC = 0.
      MOVE-CORRESPONDING WA_ORDER_CONTRACTS_OUT TO WA_ORDER_CONTRACT_IN.
      WA_ORDER_CONTRACT_IN-CON_ST_DAT = WA_ORDER_CONTRACTS_OUT-CONTSTADAT.
      WA_ORDER_CONTRACT_IN-CON_EN_DAT = WA_ORDER_CONTRACTS_OUT-CONTENDDAT.
    ELSE.
      CLEAR WA_ORDER_CONTRACT_IN.
    ENDIF.
*   Determine the item number within the new document
    IF LV_ITM_NUMBER IS INITIAL OR WA_ORDER_ITEMS_OUT-ITM_NUMBER > LV_ITM_NUMBER.
      LV_ITM_NUMBER = WA_ORDER_ITEMS_OUT-ITM_NUMBER.
    ENDIF.
*   If item category is Rental, process the corresponding entries in the rental basket
*   Mind that Quotation items category AGTX (free text) are not rental items according to
*   the below IF conditions, while Enquiry item category AFTX (free text) potentially are
*   rental items ...
    IF WA_ORDER_ITEMS_OUT-ITEM_CATEG = 'ZREN' OR ( WA_ORDER_ITEMS_OUT-ITEM_CATEG = 'AFTX' AND GV_AUART_V = GC_AUART_ENQU ).
*     Process all the models/equipments that are linked to this item by the rental basket
      LOOP AT IT_RPB_SB WHERE POSNV = WA_ORDER_ITEMS_OUT-ITM_NUMBER.
        WA_ORDER_ITEMS_IN-ITM_NUMBER = LV_ITM_NUMBER.
        WA_ORDER_ITEMS_IN-MATERIAL   = IT_RPB_SB-MATNRN.
*       Copy the material description if the material number doesn't change from doc to follow up doc
        IF WA_ORDER_ITEMS_IN-MATERIAL = WA_ORDER_ITEMS_OUT-MATERIAL.
          WA_ORDER_ITEMS_IN-SHORT_TEXT = WA_ORDER_ITEMS_OUT-SHORT_TEXT.
        ELSE.
          CLEAR WA_ORDER_ITEMS_IN-SHORT_TEXT.
        ENDIF.
*       When new doc is contract, overrule the item's (rental equipment's) plant, if the
*       equipments current FuncLoc is a depot
        IF GV_AUART_N(3) = GC_AUART_CONT  " For all contract types (ZQP, ZQP1, ZQP2), default the plant
           OR GV_AUART_N = GC_AUART_XREN. "                         and ZRIB
*         Read the plant from Equipment master
          SELECT SINGLE B_WERK B_LAGER
                   INTO (LV_WERKS, LV_LAGER)
                   FROM EQBS
                  WHERE EQUNR EQ IT_RPB_SB-EQUNR.
          IF SY-SUBRC EQ 0.
            WA_ORDER_ITEMS_IN-PLANT     = LV_WERKS.
            WA_ORDER_ITEMS_IN-STORE_LOC = LV_LAGER.
          ENDIF.
*       When new doc is not contract, copy the plant from source (enquiry) item
        ELSE.
          WA_ORDER_ITEMS_IN-PLANT      = WA_ORDER_ITEMS_OUT-PLANT.
        ENDIF.
*       Append the item
        APPEND WA_ORDER_ITEMS_IN TO LT_ORDER_ITEMS_IN.

*       When new doc is contract, take note of the relation itemno / serial number
        IF GV_AUART_N(3) = GC_AUART_CONT  " For all contract types (ZQP,ZQP1,ZQP2) save the relation serial number/item
           OR GV_AUART_N = GC_AUART_XREN. "                         and ZRIB
*         Take note of the relation between the final item number and the serial number (will be processed later)
          WA_SERNR-POSNR = LV_ITM_NUMBER.
          WA_SERNR-EQUNR = IT_RPB_SB-EQUNR.
          WA_SERNR-SERNR = IT_RPB_SB-SERNR.
          WA_SERNR-MATNR = IT_RPB_SB-MATNRN.
          CALL FUNCTION 'YSE_REN_ADD_SERNR_ARKTX'
            EXPORTING
              ARKTX_IN  = WA_ORDER_ITEMS_OUT-SHORT_TEXT
              SERIAL_NR = IT_RPB_SB-SERNR
            IMPORTING
              ARKTX_OUT = WA_SERNR-MAKTX.
          APPEND WA_SERNR TO LT_SERNR.
        ENDIF.

*       Create schedule lines for the new item
        LOOP AT LT_ORDER_SCHEDULES_OUT INTO WA_ORDER_SCHEDULES_OUT
                          WHERE ITM_NUMBER = WA_ORDER_ITEMS_OUT-ITM_NUMBER.
*         Set the new item number
          WA_ORDER_SCHEDULES_IN-ITM_NUMBER = LV_ITM_NUMBER.
*         In case new doc is quotation, just copy the quantity
          IF GV_AUART_N = GC_AUART_QUOT.
            WA_ORDER_SCHEDULES_IN-REQ_QTY    = WA_ORDER_SCHEDULES_OUT-REQ_QTY.
*         In case new doc is contract and quantity is given in quot, set the quant to 1
          ELSEIF ( GV_AUART_N(3) = GC_AUART_CONT
                   OR GV_AUART_N = GC_AUART_XREN )
                 AND WA_ORDER_SCHEDULES_OUT-REQ_QTY <> 0.
            WA_ORDER_SCHEDULES_IN-REQ_QTY    = 1.
*         In case new doc is contract and no quantity is given in quot, set the quant to 0
          ELSEIF ( GV_AUART_N(3) = GC_AUART_CONT
                   OR GV_AUART_N = GC_AUART_XREN )
                 AND WA_ORDER_SCHEDULES_OUT-REQ_QTY = 0.
            WA_ORDER_SCHEDULES_IN-REQ_QTY    = 0.
          ENDIF.
          WA_ORDER_SCHEDULES_IN-SCHED_LINE = WA_ORDER_SCHEDULES_OUT-SCHED_LINE.
          APPEND  WA_ORDER_SCHEDULES_IN TO LT_ORDER_SCHEDULES_IN.
        ENDLOOP.

*       Create conditions for the new item
        LOOP AT LT_ORDER_CONDITIONS_OUT INTO WA_ORDER_CONDITIONS_OUT
                             WHERE ITM_NUMBER = WA_ORDER_ITEMS_OUT-ITM_NUMBER
                             AND NOT COND_TYPE IS INITIAL.
          CLEAR WA_ORDER_CONDITIONS_IN.
          MOVE-CORRESPONDING WA_ORDER_CONDITIONS_OUT TO WA_ORDER_CONDITIONS_IN.
          WA_ORDER_CONDITIONS_IN-ITM_NUMBER = LV_ITM_NUMBER.
          WA_ORDER_CONDITIONS_IN-COND_UNIT = WA_ORDER_CONDITIONS_OUT-COND_D_UNT.
          APPEND WA_ORDER_CONDITIONS_IN TO LT_ORDER_CONDITIONS_IN.
        ENDLOOP.

*       Append contract data lines if there was one in the originating document
        IF NOT WA_ORDER_CONTRACT_IN IS INITIAL.
          WA_ORDER_CONTRACT_IN-ITM_NUMBER = LV_ITM_NUMBER.
          APPEND WA_ORDER_CONTRACT_IN TO LT_ORDER_CONTRACT_IN.
        ENDIF.

        LV_ITM_NUMBER = LV_ITM_NUMBER + 10.

      ENDLOOP.  " IT_RPB_SB WHERE POSNV = WA_ORDER_ITEMS_IN-ITM_NUMBER.

*     If rental item not mapped in rental basket (loop wasn't run through)
      IF SY-SUBRC NE 0.

*       In case new doc is quot, copy as much as possible information to follow up doc
        IF GV_AUART_N = GC_AUART_QUOT.
          WA_ORDER_ITEMS_IN-ITM_NUMBER = LV_ITM_NUMBER.
          WA_ORDER_ITEMS_IN-MATERIAL   = WA_ORDER_ITEMS_OUT-MATERIAL.
*         Copy the material description
          WA_ORDER_ITEMS_IN-SHORT_TEXT = WA_ORDER_ITEMS_OUT-SHORT_TEXT.
          WA_ORDER_ITEMS_IN-PLANT      = WA_ORDER_ITEMS_OUT-PLANT.
*         Append the item
          APPEND WA_ORDER_ITEMS_IN TO LT_ORDER_ITEMS_IN.

*         Create schedule lines for the new item
          LOOP AT LT_ORDER_SCHEDULES_OUT INTO WA_ORDER_SCHEDULES_OUT
                            WHERE ITM_NUMBER = WA_ORDER_ITEMS_OUT-ITM_NUMBER.
*           Set the new item number
            WA_ORDER_SCHEDULES_IN-ITM_NUMBER = LV_ITM_NUMBER.
            WA_ORDER_SCHEDULES_IN-REQ_QTY    = WA_ORDER_SCHEDULES_OUT-REQ_QTY.
            WA_ORDER_SCHEDULES_IN-SCHED_LINE = WA_ORDER_SCHEDULES_OUT-SCHED_LINE.
            APPEND  WA_ORDER_SCHEDULES_IN TO LT_ORDER_SCHEDULES_IN.
          ENDLOOP.

*         Create conditions for the new item
          LOOP AT LT_ORDER_CONDITIONS_OUT INTO WA_ORDER_CONDITIONS_OUT
                               WHERE ITM_NUMBER = WA_ORDER_ITEMS_OUT-ITM_NUMBER
                               AND NOT COND_TYPE IS INITIAL.
            CLEAR WA_ORDER_CONDITIONS_IN.
            MOVE-CORRESPONDING WA_ORDER_CONDITIONS_OUT TO WA_ORDER_CONDITIONS_IN.
            WA_ORDER_CONDITIONS_IN-ITM_NUMBER = LV_ITM_NUMBER.
            WA_ORDER_CONDITIONS_IN-COND_UNIT = WA_ORDER_CONDITIONS_OUT-COND_D_UNT.
            APPEND WA_ORDER_CONDITIONS_IN TO LT_ORDER_CONDITIONS_IN.
          ENDLOOP.

*         Append contract data lines if there was one in the originating document
          IF NOT WA_ORDER_CONTRACT_IN IS INITIAL.
            WA_ORDER_CONTRACT_IN-ITM_NUMBER = LV_ITM_NUMBER.
            APPEND WA_ORDER_CONTRACT_IN TO LT_ORDER_CONTRACT_IN.
          ENDIF.

          LV_ITM_NUMBER = LV_ITM_NUMBER + 10.

*       If new document is contract, report that one of the rental items wasn't mapped
        ELSE.
*         Log a message of this default in the application log
          LV_FREETXT = TEXT-965.
          REPLACE '&' IN LV_FREETXT WITH WA_ORDER_ITEMS_OUT-ITM_NUMBER.
          PERFORM BAL_ADD_FT USING LV_LOG_HANDLE LV_FREETXT 'W'.
          LV_WARNING = GC_CHAR_X.   " Message number determination below doesn't know
          " about this warning -> user possible isn't informed on this
        ENDIF.

      ENDIF.

*   If not a rental item, just append as is with the position number in place
    ELSE.  " WA_ORDER_ITEMS_OUT-ITEM_CATEG = 'ZREN' OR ( WA_ORDER_ITEMS_OUT-ITEM_CATEG = 'AFTX' AND GV_AUART_V = GC_AUART_ENQU ).

      WA_ORDER_ITEMS_IN-ITM_NUMBER = LV_ITM_NUMBER.
      WA_ORDER_ITEMS_IN-MATERIAL   = WA_ORDER_ITEMS_OUT-MATERIAL.
      WA_ORDER_ITEMS_IN-SHORT_TEXT = WA_ORDER_ITEMS_OUT-SHORT_TEXT.
      IF     WA_ORDER_ITEMS_OUT-ITEM_CATEG EQ 'ZBPS'
          OR WA_ORDER_ITEMS_OUT-ITEM_CATEG EQ 'ZBP1'
          OR WA_ORDER_ITEMS_OUT-ITEM_CATEG EQ 'ZBP2'.
        WA_ORDER_ITEMS_IN-ITEM_CATEG = WA_ORDER_ITEMS_OUT-ITEM_CATEG.
      ENDIF.
      APPEND WA_ORDER_ITEMS_IN TO LT_ORDER_ITEMS_IN.
      CLEAR WA_ORDER_ITEMS_IN-ITEM_CATEG.

*     Create schedule lines for the new item
      LOOP AT LT_ORDER_SCHEDULES_OUT INTO WA_ORDER_SCHEDULES_OUT
                        WHERE ITM_NUMBER = WA_ORDER_ITEMS_OUT-ITM_NUMBER.
        WA_ORDER_SCHEDULES_IN-ITM_NUMBER = LV_ITM_NUMBER.
        WA_ORDER_SCHEDULES_IN-REQ_QTY    = WA_ORDER_SCHEDULES_OUT-REQ_QTY.
        WA_ORDER_SCHEDULES_IN-SCHED_LINE = WA_ORDER_SCHEDULES_OUT-SCHED_LINE.
        APPEND  WA_ORDER_SCHEDULES_IN TO LT_ORDER_SCHEDULES_IN.
      ENDLOOP.

*     Create conditions for the new item
      LOOP AT LT_ORDER_CONDITIONS_OUT INTO WA_ORDER_CONDITIONS_OUT
                           WHERE ITM_NUMBER = WA_ORDER_ITEMS_OUT-ITM_NUMBER
                           AND NOT COND_TYPE IS INITIAL.
        CLEAR WA_ORDER_CONDITIONS_IN.
        MOVE-CORRESPONDING WA_ORDER_CONDITIONS_OUT TO WA_ORDER_CONDITIONS_IN.
        WA_ORDER_CONDITIONS_IN-ITM_NUMBER = LV_ITM_NUMBER.
        WA_ORDER_CONDITIONS_IN-COND_UNIT = WA_ORDER_CONDITIONS_OUT-COND_D_UNT.
        APPEND WA_ORDER_CONDITIONS_IN TO LT_ORDER_CONDITIONS_IN.
      ENDLOOP.

      LV_ITM_NUMBER = LV_ITM_NUMBER + 10.

    ENDIF. " WA_ORDER_ITEMS_OUT-ITEM_CATEG = 'ZREN' OR ( WA_ORDER_ITEMS_OUT-ITEM_CATEG = 'AFTX' AND GV_AUART_V = GC_AUART_ENQU ).

  ENDLOOP.    " LT_ORDER_ITEMS_OUT INTO WA_ORDER_ITEMS_OUT.

* Fill logic switch
* WA_LOGIC_SWITCH-PRICING = 'C'. " Copy manual pricing elements and redetermine the others
  WA_LOGIC_SWITCH-PRICING = 'G'. " Copy pricing elements unchanged and redetermine taxes (see issue 2544)

* In case of a contract: check if serial numbers not used in other contract (overlapping in time).
  IF ( GV_AUART_N(3) = GC_AUART_CONT
       OR GV_AUART_N = GC_AUART_XREN )
     AND NOT LT_SERNR[] IS INITIAL.
    PERFORM CHECK_SERNRS TABLES LT_ORDER_ITEMS_IN
                                LT_ORDER_CONTRACT_IN
                                LT_SERNR
                         USING  LV_LOG_HANDLE
                                WA_ORDER_HEADER_IN.
  ENDIF.

* Clear document number
  CLEAR LV_VBELN.

* Call the BAPI
*---------------------------------------------------------------------*
*  Insert Raskin Kevin                                                *
*  We will pass field zzsernr via the extension in internal table which
*  later on in the user exit YSE_COPY_SERNR2TOBJ wil be used to add it*
*  to the rental line item                                            *
*---------------------------------------------------------------------*
  IF ( GV_AUART_N(3) = GC_AUART_CONT
       OR GV_AUART_N = GC_AUART_XREN )
      AND NOT LT_SERNR[] IS INITIAL AND LV_ERROR IS INITIAL.  "Add sernr's to items for contracts

    LOOP AT LT_SERNR ASSIGNING <FS_SERNR>.
      WA_SERNR_DATA-VBELN   = SPACE.
      WA_SERNR_DATA-POSNR   = <FS_SERNR>-POSNR.
      WA_SERNR_DATA-ZZGRUND = SPACE.
      WA_SERNR_DATA-ZZEINDT = SPACE.
      WA_SERNR_DATA-ZZSERNR = <FS_SERNR>-SERNR.
      WA_SERNR_DATA-ZZEQUNR = <FS_SERNR>-EQUNR.
      MOVE:
        WA_SERNR_DATA TO LT_EXTENSIONIN-VALUEPART1,  "#EC ENHOK
        'BAPE_VBAP'   TO LT_EXTENSIONIN-STRUCTURE.   "#EC ENHOK
      APPEND LT_EXTENSIONIN.

      WA_SERNR_DATAX-VBELN = SPACE.
      WA_SERNR_DATAX-POSNR = <FS_SERNR>-POSNR.
      WA_SERNR_DATAX-ZZGRUND = SPACE.
      WA_SERNR_DATAX-ZZEINDT = SPACE.
      WA_SERNR_DATAX-ZZSERNR = 'X'.
      WA_SERNR_DATAX-ZZEQUNR = 'X'.
      MOVE:
        WA_SERNR_DATAX TO LT_EXTENSIONIN-VALUEPART1, "#EC ENHOK
        'BAPE_VBAPX'   TO LT_EXTENSIONIN-STRUCTURE.  "#EC ENHOK
      APPEND LT_EXTENSIONIN.

      LT_POSNR-POSNR = <FS_SERNR>-POSNR.
      APPEND LT_POSNR.

    ENDLOOP.
*   Export a list of items to memory to indicate the userexit has to use our sernr in vbap as technical object
    EXPORT LT_POSNR TO MEMORY ID 'YSE_RPB_ADD_ZZSERNR'.
  ELSE.
    CLEAR LT_EXTENSIONIN[].
  ENDIF.
*---------------------------------------------------------------------*
*  End insert Raskin Kevin                                            *
*  We will pass field zzsernr via the extension in internal table which
*  later on in the user exit YSE_COPY_SERNR2TOBJ wil be used to add it*
*  to the rental line item                                            *
*---------------------------------------------------------------------*

  CALL FUNCTION 'YSE_BAPI_SALDOC_CREATEFROMDAT2'
    EXPORTING
      SALES_HEADER_IN               = WA_ORDER_HEADER_IN
      LOGIC_SWITCH                  = WA_LOGIC_SWITCH
      BUSINESS_OBJECT               = GV_NEWOBJTYP
    IMPORTING
      SALESDOCUMENT_EX              = LV_VBELN
    TABLES
      RETURN                        = LT_RETURN
      SALES_ITEMS_IN                = LT_ORDER_ITEMS_IN
      SALES_PARTNERS                = LT_ORDER_PARTNERS
      SALES_SCHEDULES_IN            = LT_ORDER_SCHEDULES_IN
      SALES_CONDITIONS_IN           = LT_ORDER_CONDITIONS_IN
      SALES_CONTRACT_IN             = LT_ORDER_CONTRACT_IN
*--------------------------------------------------------------------*
*  Insert Raskin Kevin                                               *
*  pass extension internal table to bapi to use sernr as technical obj
*--------------------------------------------------------------------*
      extensionin                   = LT_EXTENSIONIN.
*--------------------------------------------------------------------*
*  End insert Raskin Kevin                                           *
*  pass extension internal table to bapi to use sernr as technical obj
*--------------------------------------------------------------------*

  LV_MSGNO = 9.

* Check if Document Saved
  READ TABLE LT_RETURN INTO WA_RETURN WITH KEY TYPE   = 'S'
                                               ID     = 'V1'
                                               NUMBER = 311.
  IF SY-SUBRC = 0.
    LV_MSGNO = LV_MSGNO + 1.
    LV_PARM1 = LV_VBELN.
    GV_DOC_CREATED = GC_CHAR_X.
  ENDIF.
* Check if any warnings occured
  READ TABLE LT_RETURN INTO WA_RETURN WITH KEY TYPE = 'W'.
  IF SY-SUBRC = 0.
    LV_WARNING = GC_CHAR_X.
    LV_MSGNO   = LV_MSGNO + 2.
  ENDIF.
* Check if any errors occured
  READ TABLE LT_RETURN INTO WA_RETURN WITH KEY TYPE = 'E'.
  IF SY-SUBRC = 0.
    LV_ERROR = GC_CHAR_X.
    LV_MSGNO = LV_MSGNO + 4.
  ENDIF.

* Commit the transaction
  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      WAIT = GC_CHAR_X.

* For every message returned by the BAPI, issue a message in the application log
  PERFORM BAL_ADD_LT_RETURN TABLES LT_RETURN
                            USING  LV_LOG_HANDLE.

* Now - in case of a contract - start adding the serial numbers to the items
  IF ( GV_AUART_N(3) = GC_AUART_CONT
       OR GV_AUART_N = GC_AUART_XREN )
     AND NOT LT_SERNR[] IS INITIAL AND LV_ERROR IS INITIAL.
*    LOOP AT LT_SERNR INTO WA_SERNR.
*     Prepare sernr assignment for current item
*     Add serial number to the item
*      CALL FUNCTION 'SERNR_ADD_TO_AU'
*        EXPORTING
*          SERNR                       = WA_SERNR-SERNR
*          PROFILE                     = GC_SERNP_0005
*          MATERIAL                    = WA_SERNR-MATNR
*          QUANTITY                    = 1
*          DOCUMENT                    = LV_VBELN
*          ITEM                        = WA_SERNR-POSNR
*          DEBITOR                     = LV_DEBITOR
*          VBTYP                       = GV_VBTYP_N     " should be 'C'   ~ Order
*          SD_AUART                    = GV_AUART_N     " should be 'ZQP' ~ Rental contract
*          SD_POSTYP                   = GC_PSTYV_ZMVN  " = Rental item ZQP
*        IMPORTING
*           ANZSN                       = LV_ANZSN
**          ZEILEN_ID                   = LV_ZIEID
**          SERIAL_COMMIT               = LV_SECMT
*        EXCEPTIONS
*          KONFIGURATIONS_ERROR        = 1
*          SERIALNUMBER_ERRORS         = 2
*          SERIALNUMBER_WARNINGS       = 3
*          NO_PROFILE_OPERATION        = 4
*          OTHERS                      = 5.
**     If an error occured for this specific serial number, log an entry for it
*      IF SY-SUBRC <> 0.
*        CONCATENATE TEXT-961     "Failed to assign sernr
*                    WA_SERNR-SERNR
*                    TEXT-962     "to item
*                    WA_SERNR-POSNR
*               INTO LV_FREETXT
*                    SEPARATED BY SPACE.
*        PERFORM BAL_ADD_FT USING LV_LOG_HANDLE LV_FREETXT 'E'.
**       Make sure an error message is shown with the log handle
*        IF LV_ERROR IS INITIAL.
*          LV_ERROR = GC_CHAR_X.
*          LV_MSGNO = LV_MSGNO + 4.
*        ENDIF.
**     Otherwise, also update S502 and VBAP with the equipment number (the above FM does not trigger the SalesOrder userexits)
*      ELSE.
*    UPDATE YSE_RENT_SME
*         SET ZZEQUNR = WA_SERNR-EQUNR
*             ZZSERNR = WA_SERNR-SERNR
*       WHERE VKORG = WA_ORDER_HEADER_IN-SALES_ORG
*         AND VTWEG = WA_ORDER_HEADER_IN-DISTR_CHAN
*         AND AUART = WA_ORDER_HEADER_IN-DOC_TYPE
*         AND VBELN = LV_VBELN
*         AND POSNR = WA_SERNR-POSNR.
*    COMMIT WORK.
*       This update on VBAP is evaluated and considered safe since
*         The contract is new and is only just saved
*         ARKTX   : no functionality is based on this field (just a description)
*         ZZEQUNR : custom field
*         ZZSERNR : custom field
*         ANZSN   : the functionality based on this field has been investigated and the importing
*                   thing is that were the FM 'SERNR_ADD_TO_AU' is used in SAP standard, VBAP (working area)
*                   is immediately updated with ANZSN = LV_ANZSN. This is also the behaviour in
*                   MV45AF0F_FCODE_POTO when calling SERIALPROFILE_CHECK.
*        UPDATE VBAP
*             SET ARKTX   = WA_SERNR-MAKTX
*                 ZZEQUNR = WA_SERNR-EQUNR
*                 ZZSERNR = WA_SERNR-SERNR
*                 ANZSN   = LV_ANZSN
*           WHERE VBELN = LV_VBELN
*             AND POSNR = WA_SERNR-POSNR.
  ENDIF.
*    ENDLOOP. " LT_SERNR

* Have the serial number checked
  CALL FUNCTION 'SERIALPROFILE_CHECK'
    EXPORTING
      OPERATION            = VRGNG_SDAP
    EXCEPTIONS
      KONFIGURATIONS_ERROR = 1
      NO_AUTOMATIC         = 2
      OTHERS               = 3.
* If an error occured posting the sernr's, log an entry for it
  IF SY-SUBRC <> 0.
    CONCATENATE TEXT-964   "Failed to check serial numbers for document
                LV_VBELN
           INTO LV_FREETXT
                SEPARATED BY SPACE.
    PERFORM BAL_ADD_FT USING LV_LOG_HANDLE LV_FREETXT 'E'.
*   Make sure an error message is shown with the log handle
    IF LV_ERROR IS INITIAL.
      LV_ERROR = GC_CHAR_X.
      LV_MSGNO = LV_MSGNO + 4.
    ENDIF.
  ENDIF.

**   Post the sernr's
*    CALL FUNCTION 'IWOL_WV_POST_OBJECT_LIST'
*      EXPORTING
*        I_SDAUFNR            = LV_VBELN
*      EXCEPTIONS
*        NO_OBJECT_LIST       = 1
*        OTHER_ERRORS         = 2
*        OTHERS               = 3.
* ! Following check has been disabled since the FM seems to return 1 even when save worked. !
* ! ------------------------------------------------------------------------------
**   If an error occured posting the sernr's, log an entry for it
*    IF SY-SUBRC <> 0.
*      CONCATENATE TEXT-963   "Failed to save serial numbers for document
*                  LV_VBELN
*             INTO LV_FREETXT
*                  SEPARATED BY SPACE.
*      PERFORM BAL_ADD_FT USING LV_LOG_HANDLE LV_FREETXT 'E'.
**     Make sure an error message is shown with the log handle
*      IF LV_ERROR IS INITIAL.
*        LV_ERROR = GC_CHAR_X.
*        LV_MSGNO = LV_MSGNO + 4.
*      ENDIF.
*    ENDIF.
*   Commit


*ENDIF.  " GV_AUART_N = GC_AUART_CONT.

* Save application log to database
  APPEND LV_LOG_HANDLE TO LT_LOG_HANDLE.
  CALL FUNCTION 'BAL_DB_SAVE'
    EXPORTING
      I_SAVE_ALL       = 'X'
      I_T_LOG_HANDLE   = LT_LOG_HANDLE
    IMPORTING
      E_NEW_LOGNUMBERS = LT_NEW_LOGNUMBERS
    EXCEPTIONS
      LOG_NOT_FOUND    = 1
      SAVE_NOT_ALLOWED = 2
      NUMBERING_ERROR  = 3
      OTHERS           = 4.

* Put application log number in message parameter
  READ TABLE LT_NEW_LOGNUMBERS INTO WA_NEW_LOGNUMBERS INDEX 1.
  IF LV_PARM1 IS INITIAL.
    LV_PARM1 = P_VBELN.
  ELSE.
    LV_PARM2 = P_VBELN.
  ENDIF.

* Set global parameter for YSE_REN_PLBRD_BAL to pick up when user clicks the message about
* to be shown
  SET PARAMETER ID 'YSE_REN_PLBRD_BAL' FIELD P_VBELN.

* Issue message with status and the external application log ID
  MESSAGE ID 'YSE_RENTAL' TYPE 'S' NUMBER LV_MSGNO WITH LV_PARM1 LV_PARM2.

* If document was created
  IF NOT GV_DOC_CREATED IS INITIAL.
*   Clear the shopping basket
    PERFORM SB_CLEAR.

*   Open the created document
    IF GV_AUART_N = GC_AUART_QUOT.
      PERFORM BDC_LOAD_QUOT USING LV_VBELN GC_CHAR_X WA_ORDER_HEADERS_OUT-PURCH_NO.
    ELSE.
      PERFORM BDC_LOAD_CONT USING LV_VBELN GC_CHAR_X WA_ORDER_HEADERS_OUT-PURCH_NO.
    ENDIF.

*   Return to planning board
    SET SCREEN 0.
    LEAVE SCREEN.

  ENDIF.
ENDFORM.                    " CREATE_SDOC

*&---------------------------------------------------------------------*
*&      Form  BAL_ADD_FT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM BAL_ADD_FT  USING    P_LOG_HANDLE P_FREETXT P_MSGTY.

  CALL FUNCTION 'BAL_LOG_MSG_ADD_FREE_TEXT'
    EXPORTING
      I_LOG_HANDLE     = P_LOG_HANDLE
      I_MSGTY          = P_MSGTY
      I_TEXT           = P_FREETXT
    EXCEPTIONS
      LOG_NOT_FOUND    = 1
      MSG_INCONSISTENT = 2
      LOG_IS_FULL      = 3
      OTHERS           = 4.

ENDFORM.                    " BAL_ADD_FT

*&---------------------------------------------------------------------*
*&      Form  BAL_ADD_LT_RETURN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM BAL_ADD_LT_RETURN TABLES PT_RETURN STRUCTURE BAPIRET2
                       USING  PV_LOG_HANDLE.

  DATA: WA_S_MSG TYPE BAL_S_MSG.  " BAL_LOG_CREATE - To send application message

  LOOP AT PT_RETURN.
    MOVE PT_RETURN-TYPE       TO WA_S_MSG-MSGTY.
    MOVE PT_RETURN-ID         TO WA_S_MSG-MSGID.
    MOVE PT_RETURN-NUMBER     TO WA_S_MSG-MSGNO.
    MOVE PT_RETURN-MESSAGE_V1 TO WA_S_MSG-MSGV1.
    MOVE PT_RETURN-MESSAGE_V2 TO WA_S_MSG-MSGV2.
    MOVE PT_RETURN-MESSAGE_V3 TO WA_S_MSG-MSGV3.
    MOVE PT_RETURN-MESSAGE_V4 TO WA_S_MSG-MSGV4.

    CALL FUNCTION 'BAL_LOG_MSG_ADD'
      EXPORTING
        I_LOG_HANDLE     = PV_LOG_HANDLE
        I_S_MSG          = WA_S_MSG
      EXCEPTIONS
        LOG_NOT_FOUND    = 1
        MSG_INCONSISTENT = 2
        LOG_IS_FULL      = 3
        OTHERS           = 4.

  ENDLOOP.  " PT_RETURN

ENDFORM.                    " BAL_ADD_LT_RETURN

*&---------------------------------------------------------------------*
*&      Form  BDC_LOAD_CONT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM BDC_LOAD_CONT USING    P_VBELN P_FORCE_INCLOG P_PURCH_NO.

*  We replaced the batch input with call transaction because the bdc prevented
*  delivery and billing from within the sales document, it always jumped back to
*  the planning board

*  DATA: LS_OPTIONS      TYPE CTU_PARAMS.

*  LS_OPTIONS-NOBIEND = 'X'.
*  LS_OPTIONS-DISMODE = 'E'.
*  LS_OPTIONS-UPDMODE = 'S'.

* Check that user has full authorization
  IF GV_AUTHF IS INITIAL.
    MESSAGE E051 WITH P_VKORG.
  ENDIF.

** Clear the BDC tables
*  CLEAR: IT_BDCDATA[], IT_BDCMSGS[].
*
** Prepare the first screen of VA42 (Change contract)
*  PERFORM BDC_ADD_SCREEN USING GC_BDCPRG_SAPMV45A '0102'.
*  PERFORM BDC_ADD_FIELD  USING 'VBAK-VBELN' P_VBELN.
*  PERFORM BDC_ADD_FIELD  USING 'BDC_OKCODE' '/00'.
** If we should force incompletion log
*  IF P_FORCE_INCLOG NE SPACE.
*    PERFORM BDC_ADD_SCREEN USING GC_BDCPRG_SAPMV45A '4001'.
*    PERFORM BDC_ADD_FIELD  USING 'VBKD-BSTKD' GC_CHAR_X.
*    PERFORM BDC_ADD_FIELD  USING 'BDC_OKCODE' '/00'.
*    PERFORM BDC_ADD_SCREEN USING GC_BDCPRG_SAPMV45A '4001'.
*    PERFORM BDC_ADD_FIELD  USING 'VBKD-BSTKD' P_PURCH_NO.
*    PERFORM BDC_ADD_FIELD  USING 'BDC_OKCODE' '/00'.
*  ENDIF.

*Set the parameter id for contracts
  SET PARAMETER ID 'KTN' FIELD P_VBELN.
* Call the transaction to change contract
  CALL TRANSACTION GC_TX_VA42 and skip first screen.

*                              USING         IT_BDCDATA
*                              OPTIONS  FROM LS_OPTIONS
*                              MESSAGES INTO IT_BDCMSGS.

ENDFORM.                    " BDC_LOAD_CONT

*&---------------------------------------------------------------------*
*&      Form  BDC_LOAD_DELV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM BDC_LOAD_DELV USING P_VBELN.

  DATA: LS_OPTIONS      TYPE CTU_PARAMS.

  LS_OPTIONS-NOBIEND = 'X'.
  LS_OPTIONS-DISMODE = 'E'.
  LS_OPTIONS-UPDMODE = 'S'..

* Clear the BDC tables
  CLEAR: IT_BDCDATA[], IT_BDCMSGS[].

* Prepare the first screen of VL02N (Change delivery)
  PERFORM BDC_ADD_SCREEN USING GC_BDCPRG_SAPMV50A '4004'.
  PERFORM BDC_ADD_FIELD  USING 'LIKP-VBELN' P_VBELN.
  PERFORM BDC_ADD_FIELD  USING 'BDC_OKCODE' '/00'.
* Call the transaction to change a delivery
  CALL TRANSACTION GC_TX_VL02N USING         IT_BDCDATA
                               OPTIONS  FROM LS_OPTIONS
                               MESSAGES INTO IT_BDCMSGS.

ENDFORM.                    " BDC_LOAD_DELV

*&---------------------------------------------------------------------*
*&      Form  BDC_LOAD_QUOT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM BDC_LOAD_QUOT USING P_VBELN P_FORCE_INCLOG P_PURCH_NO.

*  We replaced the batch input with call transaction because the bdc prevented
*  delivery and billing from within the sales document, it always jumped back to
*  the planning board

*  DATA: LS_OPTIONS      TYPE CTU_PARAMS.
*
*  LS_OPTIONS-NOBIEND = 'X'.
*  LS_OPTIONS-DISMODE = 'E'.
*  LS_OPTIONS-UPDMODE = 'S'.
*
** Clear the BDC tables
*  CLEAR: IT_BDCDATA[], IT_BDCMSGS[].
*
** Prepare the first screen of VA22 (Change quotation)
*  PERFORM BDC_ADD_SCREEN USING GC_BDCPRG_SAPMV45A '0102'.
*  PERFORM BDC_ADD_FIELD  USING 'VBAK-VBELN' P_VBELN.
*  PERFORM BDC_ADD_FIELD  USING 'BDC_OKCODE' '/00'.
** If we should force incompletion log
*  IF P_FORCE_INCLOG NE SPACE.
*    PERFORM BDC_ADD_SCREEN USING GC_BDCPRG_SAPMV45A '4001'.
*    PERFORM BDC_ADD_FIELD  USING 'VBKD-BSTKD' GC_CHAR_X.
*    PERFORM BDC_ADD_FIELD  USING 'BDC_OKCODE' '/00'.
*    PERFORM BDC_ADD_SCREEN USING GC_BDCPRG_SAPMV45A '4001'.
*    PERFORM BDC_ADD_FIELD  USING 'VBKD-BSTKD' P_PURCH_NO.
*    PERFORM BDC_ADD_FIELD  USING 'BDC_OKCODE' '/00'.
*  ENDIF.
*Set the parameter id for contracts
  SET PARAMETER ID 'AGN' FIELD P_VBELN.

* Call the transaction to change a quotation
  CALL TRANSACTION GC_TX_VA22 AND SKIP FIRST SCREEN.

*                              USING         IT_BDCDATA
*                              OPTIONS  FROM LS_OPTIONS
*                              MESSAGES INTO IT_BDCMSGS.

ENDFORM.                    " BDC_LOAD_QUOT

*&---------------------------------------------------------------------*
*&      Form  BDC_LOAD_SVOR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM BDC_LOAD_SVOR  USING    P_VBELN.

  DATA: LS_OPTIONS      TYPE CTU_PARAMS.

  LS_OPTIONS-NOBIEND = 'X'.
  LS_OPTIONS-DISMODE = 'E'.
  LS_OPTIONS-UPDMODE = 'S'.

* Clear the BDC tables
  CLEAR: IT_BDCDATA[], IT_BDCMSGS[].

* Prepare the first screen of IW32
  PERFORM BDC_ADD_SCREEN USING GC_BDCPRG_SAPLCOIH '0101'.
  PERFORM BDC_ADD_FIELD  USING 'CAUFVD-AUFNR' P_VBELN.
  PERFORM BDC_ADD_FIELD  USING 'BDC_OKCODE' '/00'.
* Call the transaction IW32
  CALL TRANSACTION GC_TX_IW32 USING         IT_BDCDATA
                              OPTIONS  FROM LS_OPTIONS
                              MESSAGES INTO IT_BDCMSGS.

ENDFORM.                    " BDC_LOAD_SVOR

*&---------------------------------------------------------------------*
*&      Form  BDC_LOAD_EQPT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM BDC_LOAD_EQPT  USING    P_SERNR.

  DATA: LS_OPTIONS      TYPE CTU_PARAMS,
        LV_EQUNR        TYPE EQUNR,
        LV_MATNR        TYPE MATNR.

* Find the matnr that we have against this serial number (sernr in itself is not unique)
  READ TABLE IT_EQUNR WITH KEY SERNR = P_SERNR.
  IF SY-SUBRC = 0.
    LV_MATNR = IT_EQUNR-MATNR.
  ENDIF.

* Find the corresponding equipment number for the serial number
  SELECT SINGLE EQUNR INTO LV_EQUNR
         FROM EQUI
        WHERE MATNR = LV_MATNR
          AND SERNR = P_SERNR.
* Check that it's a valid serial number
  CHECK SY-SUBRC EQ 0.

  LS_OPTIONS-NOBIEND = 'X'.
  LS_OPTIONS-DISMODE = 'E'.
  LS_OPTIONS-UPDMODE = 'S'.

* Clear the BDC tables
  CLEAR: IT_BDCDATA[], IT_BDCMSGS[].

* Prepare the first screen of IE02
  PERFORM BDC_ADD_SCREEN USING GC_BDCPRG_SAPMIEQ0 '0100'.
  PERFORM BDC_ADD_FIELD  USING 'RM63E-EQUNR' LV_EQUNR.
  PERFORM BDC_ADD_FIELD  USING 'BDC_OKCODE' '/00'.
* Call the transaction IE02
  CALL TRANSACTION GC_TX_IE03 USING         IT_BDCDATA
                              OPTIONS  FROM LS_OPTIONS
                              MESSAGES INTO IT_BDCMSGS.

ENDFORM.                    " BDC_LOAD_EQPT

*&---------------------------------------------------------------------*
*&      Form  BDC_LOAD_MATL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM BDC_LOAD_MATL  USING    P_MATNR.

  DATA: LS_OPTIONS      TYPE CTU_PARAMS.

  LS_OPTIONS-NOBIEND = 'X'.
  LS_OPTIONS-DISMODE = 'E'.
  LS_OPTIONS-UPDMODE = 'S'.

* Clear the BDC tables
  CLEAR: IT_BDCDATA[], IT_BDCMSGS[].

* Prepare the first screen of mm02
  PERFORM BDC_ADD_SCREEN USING GC_BDCPRG_SAPLMGMM '0060'.
  PERFORM BDC_ADD_FIELD  USING 'RMMG1-MATNR' P_MATNR.
  PERFORM BDC_ADD_FIELD  USING 'BDC_OKCODE' '=ENTR'.
* Call the transaction mm02
  CALL TRANSACTION GC_TX_MM03 USING         IT_BDCDATA
                              OPTIONS  FROM LS_OPTIONS
                              MESSAGES INTO IT_BDCMSGS.

ENDFORM.                    " BDC_LOAD_MATL

*&---------------------------------------------------------------------*
*&      Form  BDC_LOAD_SLG1
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM BDC_LOAD_SLG1 .

  DATA: LS_OPTIONS      TYPE CTU_PARAMS,
        LV_DATE         TYPE SYDATUM,
        LV_DATET        TYPE BALDATE.

  LS_OPTIONS-NOBIEND = 'X'.
  LS_OPTIONS-DISMODE = 'E'.
  LS_OPTIONS-UPDMODE = 'S'.

* Clear the BDC tables
  CLEAR: IT_BDCDATA[], IT_BDCMSGS[].

* Get log files for the document starting 1 month ago
  CALL FUNCTION 'BKK_ADD_MONTH_TO_DATE'
    EXPORTING
      MONTHS  = -1
      OLDDATE = SY-DATUM
    IMPORTING
      NEWDATE = LV_DATE.
  LV_DATE = LV_DATE + 1.
  WRITE LV_DATE TO LV_DATET.

* Prepare the first screen of SLG1 (Application Log)
  PERFORM BDC_ADD_SCREEN USING GC_BDCPRG_SAPLSLG3 '0100'.
  PERFORM BDC_ADD_FIELD  USING 'BALHDR-OBJECT'    'YSE_RPB'.
  PERFORM BDC_ADD_FIELD  USING 'BALHDR-EXTNUMBER' P_VBELN.
  PERFORM BDC_ADD_FIELD  USING 'BALHDR-ALDATE'    LV_DATET.
  PERFORM BDC_ADD_FIELD  USING 'BDC_OKCODE' '=SELE'.
* Call the transaction for application log
  CALL TRANSACTION GC_TX_SLG1 USING         IT_BDCDATA
                              OPTIONS  FROM LS_OPTIONS
                              MESSAGES INTO IT_BDCMSGS.

ENDFORM.                    " BDC_LOAD_SLG1

*&---------------------------------------------------------------------*
*&      Form  SH_XFER2DOC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SH_XFER2DOC.

  DATA: LV_LINES TYPE I.

* Read the selected lines from the barchart
  PERFORM GET_LINES_SELECTED.

* Read the equipments/models selected, depending on status top (which in turn was determined depending on ...)
  IF GV_ST = GC_ST_EQ.
    PERFORM GET_MATEQ_SELECTED USING GC_BCLT_EQ.
  ELSE.
    PERFORM GET_MATEQ_SELECTED USING GC_BCLT_MD.
  ENDIF.

* Check that there is just 1 equipment selected
  DESCRIBE TABLE IT_MATEQ_SEL LINES LV_LINES.
  IF LV_LINES NE 1.
    MESSAGE E019.
  ENDIF.

* Read the only line available
  READ TABLE IT_MATEQ_SEL INDEX 1.

* Export parameters: material and serial number
  EXPORT MATNR FROM IT_MATEQ_SEL-MATNR TO MEMORY ID GC_MID_MATNR.
  IF GV_ST = GC_ST_EQ.
    EXPORT SERNR FROM IT_MATEQ_SEL-SERNR TO MEMORY ID GC_MID_SERNR.
  ENDIF.

* Exit the planning board
* PERFORM EXIT_BC.
  PERFORM DELETE_CHARTCONTROL.
  SET SCREEN 0.
  LEAVE PROGRAM.

ENDFORM.                    " SH_XFER2DOC

*&---------------------------------------------------------------------*
*&      Form  CHECK_SERNRS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM CHECK_SERNRS  TABLES   PT_ORDER_ITEMS_IN    STRUCTURE BAPISDITM
                            PT_ORDER_CONTRACT_IN STRUCTURE BAPICTR
                            PT_SERNR
                   USING    PV_LOG_HANDLE
                            PA_ORDER_HEADER_IN   STRUCTURE BAPISDHD1.

  DATA: BEGIN OF WA_SERNR,
          POSNR           TYPE POSNR,
          EQUNR           TYPE EQUNR,
          SERNR           TYPE GERNR,
          MATNR           TYPE MATNR,
          MAKTX           TYPE MAKTX,
        END OF WA_SERNR,
        XVBAP             TYPE TABLE OF VBAPVB   WITH HEADER LINE,
        XVBAK             TYPE VBAK,
        LT_RETURN         TYPE TABLE OF BAPIRET2 WITH HEADER LINE,
        LT_SERNR          LIKE TABLE OF WA_SERNR,
        LT_LOG_HANDLE     TYPE BAL_T_LOGH.

* Copy PT_SERNR to a structured table
  LOOP AT PT_SERNR INTO WA_SERNR.
    APPEND WA_SERNR TO LT_SERNR.
  ENDLOOP.

* Fill XVBAK
  XVBAK-AUART = PA_ORDER_HEADER_IN-DOC_TYPE.

* Fill XVBAP (we only have to copy the Rental items - ITEM_CATEG for the new items has to be
*                                                     redetermined by create-bapi, so can't use it)
  LOOP AT PT_ORDER_ITEMS_IN.
*   Find the related serial number
    READ TABLE LT_SERNR INTO WA_SERNR WITH KEY POSNR      = PT_ORDER_ITEMS_IN-ITM_NUMBER.
    IF SY-SUBRC = 0.
*     Find the contract data for the item
      READ TABLE PT_ORDER_CONTRACT_IN   WITH KEY ITM_NUMBER = PT_ORDER_ITEMS_IN-ITM_NUMBER.
*     If not found for the item, take the header's contract data
      IF SY-SUBRC NE 0.
        READ TABLE PT_ORDER_CONTRACT_IN WITH KEY ITM_NUMBER = '000000'.
      ENDIF.
*     Fill the XVBAP fields
      XVBAP-PSTYV    = 'ZMVN'.   " PT_ORDER_ITEMS_IN-ITEM_CATEG.
      XVBAP-UPDKZ    = 'I'.
      XVBAP-POSNR    = PT_ORDER_ITEMS_IN-ITM_NUMBER.
      XVBAP-ZZSERNR  = WA_SERNR-SERNR.
      XVBAP-ZZEQUNR  = WA_SERNR-EQUNR.
      XVBAP-ZZBEGDAT = PT_ORDER_CONTRACT_IN-CON_ST_DAT.
      XVBAP-ZZENDDAT = PT_ORDER_CONTRACT_IN-CON_EN_DAT.
*     Append XVBAP
      APPEND XVBAP.
    ENDIF.  " SY-SUBRC = 0
  ENDLOOP.  " AT PT_ORDER_ITEMS_IN.

* Check whether the item's serial numbers are used in an overlapping contractitem
  CALL FUNCTION 'YSE_UE_MV45A_CHECK_UPD_SME'
    EXPORTING
      UPD_MODE = 'C'
    TABLES
      XVBAP    = XVBAP
      RETURN   = LT_RETURN
    CHANGING
      XVBAK    = XVBAK.

* If messages in LT_RETURN, have them listed in the application log
  IF NOT LT_RETURN[] IS INITIAL.
*   Add LT_RETURN to application log
    PERFORM BAL_ADD_LT_RETURN TABLES LT_RETURN
                              USING  PV_LOG_HANDLE.
*   Save application log to database
    APPEND PV_LOG_HANDLE TO LT_LOG_HANDLE.
    CALL FUNCTION 'BAL_DB_SAVE'
      EXPORTING
        I_SAVE_ALL             = 'X'
        I_T_LOG_HANDLE         = LT_LOG_HANDLE
*      IMPORTING
*        E_NEW_LOGNUMBERS       = LT_NEW_LOGNUMBERS
      EXCEPTIONS
        LOG_NOT_FOUND          = 1
        SAVE_NOT_ALLOWED       = 2
        NUMBERING_ERROR        = 3
        OTHERS                 = 4.

*   Issue an error message to stop the process
    MESSAGE E031.

  ENDIF. " NOT LT_RETURN[] IS INITIAL.

ENDFORM.                    " CHECK_SERNRS
