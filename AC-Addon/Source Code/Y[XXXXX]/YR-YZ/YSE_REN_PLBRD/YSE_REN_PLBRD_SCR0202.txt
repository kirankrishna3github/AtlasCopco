*----------------------------------------------------------------------*
***INCLUDE YSE_REN_PLBRD_SCR0202 .
*----------------------------------------------------------------------*

************************************************************************
* CLASS    C_EVENT_RECEIVER
* DEFINITION
************************************************************************
CLASS C_EVENT_RECEIVER DEFINITION.
* THE CLASS IS USED TO TEST THE EVENTS RAISED BY THE CL_GUI_PICTURE
* CLASS
  PUBLIC SECTION.
    METHODS EVENT_HANDLER_PICTURE_DBLCLICK
            FOR EVENT PICTURE_DBLCLICK OF CL_GUI_PICTURE
            IMPORTING MOUSE_POS_X MOUSE_POS_Y SENDER.
    METHODS EVENT_HANDLER_CONTEXT_MENU
            FOR EVENT CONTEXT_MENU OF CL_GUI_PICTURE
            IMPORTING SENDER.
    METHODS EVENT_HANDLER_CONTEXT_MENU_SEL
            FOR EVENT CONTEXT_MENU_SELECTED OF CL_GUI_PICTURE
            IMPORTING FCODE SENDER.
  ENDCLASS.

************************************************************************
* GLOBAL DATA DECLARATIONS
************************************************************************
DATA PICTURE_CONTROL_1 TYPE REF TO CL_GUI_PICTURE.
DATA CONTAINER_1 TYPE REF TO CL_GUI_CUSTOM_CONTAINER.
DATA EVENT_TAB TYPE CNTL_SIMPLE_EVENTS.
DATA EVENT_TAB_LINE TYPE CNTL_SIMPLE_EVENT.
DATA EVENT_RECEIVER  TYPE REF TO C_EVENT_RECEIVER.
DATA URL  TYPE CNDP_URL.                " URL-FIELD IN SCREEN 202

************************************************************************
* CLASS   c_event_receiver
* IMPLEMENTATION
************************************************************************
CLASS C_EVENT_RECEIVER IMPLEMENTATION.

************************************************************************
* CLASS   c_event_receiver
* METHOD  event_handler_picture_dblclick
************************************************************************
  METHOD EVENT_HANDLER_PICTURE_DBLCLICK.
*        for event picture_dblclick of c_picture_control
*        importing mouse_pos_x mouse_pos_y.
    DATA POS_X(5) TYPE C.
    DATA POS_Y(5) TYPE C.
    POS_X = MOUSE_POS_X.
    POS_Y = MOUSE_POS_Y.

    IF SENDER = PICTURE_CONTROL_1.
      MESSAGE I000(0K) WITH
        'DOUBLECLICK' 'UPPER PICTURE' POS_X POS_Y. "#EC NOTEXT
    ELSE.
      MESSAGE I000(0K) WITH
        'DOUBLECLICK' 'LOWER PICTURE' POS_X POS_Y. "#EC NOTEXT
    ENDIF.
  ENDMETHOD.

************************************************************************
* CLASS   c_event_receiver
* METHOD  event_handler_context_menu
************************************************************************
  METHOD EVENT_HANDLER_CONTEXT_MENU.
    DATA MENU TYPE REF TO CL_CTMENU.
    CREATE OBJECT MENU.
    CALL METHOD MENU->ADD_FUNCTION EXPORTING
      FCODE = TEXT-001
      TEXT = TEXT-001.
    CALL METHOD MENU->ADD_FUNCTION EXPORTING
      FCODE = TEXT-002
      TEXT = TEXT-002.
    CALL METHOD MENU->ADD_FUNCTION EXPORTING
      FCODE = TEXT-003
      TEXT = TEXT-003.
    CALL METHOD MENU->ADD_FUNCTION EXPORTING
      FCODE = TEXT-004
      TEXT = TEXT-004.
    CALL METHOD MENU->ADD_FUNCTION EXPORTING
      FCODE = TEXT-005
      TEXT = TEXT-005.

    CALL METHOD SENDER->DISPLAY_CONTEXT_MENU
      EXPORTING CONTEXT_MENU = MENU.
  ENDMETHOD.

************************************************************************
* CLASS   c_event_receiver
* METHOD  event_handler_context_menu_sel
************************************************************************
  METHOD EVENT_HANDLER_CONTEXT_MENU_SEL.
    DATA DISPLAY_MODE TYPE I.
    IF FCODE = TEXT-001.
      DISPLAY_MODE = CL_GUI_PICTURE=>DISPLAY_MODE_NORMAL.
    ENDIF.
    IF FCODE = TEXT-002.
      DISPLAY_MODE = CL_GUI_PICTURE=>DISPLAY_MODE_STRETCH.
    ENDIF.
    IF FCODE = TEXT-003.
      DISPLAY_MODE = CL_GUI_PICTURE=>DISPLAY_MODE_FIT.
    ENDIF.
    IF FCODE = TEXT-004.
      DISPLAY_MODE = CL_GUI_PICTURE=>DISPLAY_MODE_NORMAL_CENTER.
    ENDIF.
    IF FCODE = TEXT-005.
      DISPLAY_MODE = CL_GUI_PICTURE=>DISPLAY_MODE_FIT_CENTER.
    ENDIF.
    CALL METHOD SENDER->SET_DISPLAY_MODE
         EXPORTING DISPLAY_MODE = DISPLAY_MODE.

  ENDMETHOD.

ENDCLASS.

*&---------------------------------------------------------------------*
*&      Module  0202_SET_STATUS  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE 0202_SET_PF-STATUS OUTPUT.

  SET PF-STATUS 'RPBLEGEND'.
  SET TITLEBAR  '003'.

ENDMODULE.                 " 0202_SET_STATUS  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  0202_PBO  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE 0202_PBO OUTPUT.

* Copy of program SAP_PICTURE_DEMO

* The picture displayed, should explain following colors
*  'TREE3COL'. " Grey Blue Light
*  'BLUE'.     " Blue
*  'BROWN_2'.  " Orange
*  'YELLOW'.   " Yellow
*  'CYAN'      " Cyan (automatically ...)

* If picture control is still initial.
  IF PICTURE_CONTROL_1 IS INITIAL.

* Create control
    CREATE OBJECT CONTAINER_1
        EXPORTING CONTAINER_NAME = 'PICTURE_CONTROL_1'.
    CREATE OBJECT PICTURE_CONTROL_1 EXPORTING PARENT = CONTAINER_1.

* Register the events
    EVENT_TAB_LINE-EVENTID = CL_GUI_PICTURE=>EVENTID_PICTURE_DBLCLICK.
    APPEND EVENT_TAB_LINE TO EVENT_TAB.
    EVENT_TAB_LINE-EVENTID = CL_GUI_PICTURE=>EVENTID_CONTEXT_MENU.
    APPEND EVENT_TAB_LINE TO EVENT_TAB.
    EVENT_TAB_LINE-EVENTID = CL_GUI_PICTURE=>EVENTID_CONTEXT_MENU_SELECTED.
    APPEND EVENT_TAB_LINE TO EVENT_TAB.

    CALL METHOD PICTURE_CONTROL_1->SET_REGISTERED_EVENTS
      EXPORTING
        EVENTS = EVENT_TAB.

* Create the event_receiver object and set the handlers for the events
* of the picture controls
    CREATE OBJECT EVENT_RECEIVER.
    SET HANDLER EVENT_RECEIVER->EVENT_HANDLER_PICTURE_DBLCLICK
                FOR PICTURE_CONTROL_1.
    SET HANDLER EVENT_RECEIVER->EVENT_HANDLER_CONTEXT_MENU
                FOR PICTURE_CONTROL_1.
    SET HANDLER EVENT_RECEIVER->EVENT_HANDLER_CONTEXT_MENU_SEL
                FOR PICTURE_CONTROL_1.

* Set the display mode to 'normal' (0)
    CALL METHOD PICTURE_CONTROL_1->SET_DISPLAY_MODE
         EXPORTING DISPLAY_MODE = CL_GUI_PICTURE=>DISPLAY_MODE_NORMAL.

* Set 3D Border
* CALL METHOD PICTURE_CONTROL_1->SET_3D_BORDER
*    EXPORTING BORDER = 1.

* new async implementation since 4.6C
  CALL FUNCTION 'DP_PUBLISH_WWW_URL'
    EXPORTING
*     OBJID                       = 'HTMLCNTL_TESTHTM2_SAP_AG'
      OBJID                       = 'YSE_RPB_LEGEND'
      LIFETIME                    = CNDP_LIFETIME_TRANSACTION
    IMPORTING
      URL                         = URL
    EXCEPTIONS
      OTHERS                      = 1.

* Load the picture by using the url generated by the data provider.
    IF SY-SUBRC = 0.
      CALL METHOD PICTURE_CONTROL_1->LOAD_PICTURE_FROM_URL_ASYNC
         EXPORTING URL = URL.
    ENDIF.

  ENDIF.

ENDMODULE.                 " 0202_PBO  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  0202_USER_COMMAND  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE 0202_OK_CODE INPUT.

  IF SY-UCOMM = 'ENTR' OR SY-UCOMM = 'BACK'.
    LEAVE TO SCREEN 0.
  ENDIF.

ENDMODULE.                 " 0202_USER_COMMAND  INPUT
