*&---------------------------------------------------------------------*
*&  Include           YSE_RENT_PLBRD_F01                               *
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  CHECK_WIN32
*&---------------------------------------------------------------------*
* Check that the client is on a win32 platform
*----------------------------------------------------------------------*
FORM check_win32 .

  DATA:     ws(4) TYPE c.

  CONSTANTS: lc_workstation(2) TYPE c VALUE 'WS',
             lc_win32(5)       TYPE c VALUE 'WN32'.

  CALL FUNCTION 'WS_QUERY'
    EXPORTING
      query          = lc_workstation
    IMPORTING
      return         = ws
    EXCEPTIONS
      inv_query      = 1
      no_batch       = 2
      frontend_error = 3
      OTHERS         = 4.

  IF NOT sy-subrc IS INITIAL OR ws <> lc_win32.
    MESSAGE e025.
  ENDIF.

ENDFORM.                    " CHECK_WIN32

*&---------------------------------------------------------------------*
*&      Form  CREATE_CHARTCONTROL
*&---------------------------------------------------------------------*
* Prepare a barchart control
*----------------------------------------------------------------------*
FORM create_chartcontrol.

  gv_repid = sy-repid.

  CALL FUNCTION 'BARCHART_CREATE'
    EXPORTING
      owner_repid = gv_repid
      dynnr       = gc_dynnr
    CHANGING
      handle      = gv_barc_ocx_hndl.

* Activate customizing modus (Wizards)
  CALL FUNCTION 'BARC_SET_OPTIONS'
    EXPORTING
      customize  = sgrc_const-no
" This allows the user to change the chart layout upon doubleclicking on
" it
      editinline = sgrc_const-no. " not sure what this does

* Graphics profile - this has major impact on the look and feel, even
* behaviour of the chart !!!
  graph_profile-prf_gruppe = gc_gruppe.
  graph_profile-prf_name   = gc_name.
  graph_profile-prf_index  = gc_index.

* Define time axis
  PERFORM create_time_axis.

* Define calendar (weekend, holidays etc.)
  PERFORM create_calendar.

ENDFORM.                    " PREPARE_CHARTCONTROL

*&---------------------------------------------------------------------*
*&      Form  SC_SET_ITEM_PROP
*&---------------------------------------------------------------------*
*Update the item properties on the selection screen (upon selecting a
*new item
*----------------------------------------------------------------------*
FORM selscr_set_item_prop .

  DATA lv_lines TYPE i.

* Set the read only details of the item
  CHECK p_posnr = it_vbap-posnr.
  p_pmatnr = it_vbap-matnr.
  p_pkwmen = it_vbap-kwmeng.
  p_pvrkme = it_vbap-vrkme.
  p_pgrpos = it_vbap-grpos.
  p_parktx = it_vbap-arktx.

* Fill the model with the material number that sits in the item
  CLEAR: so_model, so_model[].
  IF it_vbap-matnr IS NOT INITIAL.
    so_model-sign   = 'I'.
    so_model-option = 'EQ'.
    so_model-low    = it_vbap-matnr.
    APPEND so_model.
  ENDIF.

ENDFORM.                    " SELSCR_SET_ITEM_PROP

*&---------------------------------------------------------------------*
*&      Form  SELSCR_CLEAR_CHARS
*&---------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
FORM selscr_clear_chars .

  CLEAR: so_press,
         so_press[],
         so_capac,
         so_capac[],
         p_cpoilf,
         p_cpdiel,
         p_cpmobi,
         p_cpafcl,
         p_cprefi,
         p_cpgenr,
         p_cpexfu,
         p_cpdryr,
         so_volt,
         so_volt[],
         so_freq,
         so_freq[],
         so_powr,
         so_powr[],
         so_amps,
         so_amps[],
         p_gnsile,
         p_gnmobi,
         p_gnexfu,
         p_gnskid,
         p_gnpara,
         p_gnasta,
         p_gnrsta,
         p_gnrmon,
         p_gnpcon.

ENDFORM.                    " SELSCR_CLEAR_CHARS

*&---------------------------------------------------------------------*
*&      Form  SELSCR_SET_PARAM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM selscr_set_param .

  DATA: lv_vbeln TYPE vbeln.

* Check if valid document number
  SELECT SINGLE vbeln
           INTO lv_vbeln
           FROM vbak
          WHERE vbeln = p_vbeln.
* If valid, save it in parameter ID
  IF sy-subrc = 0.
*   Doc number should be saved in other parameter ID depending on which
*   radiobutton is active
    IF     p_docenq NE space.
      SET PARAMETER ID 'AFN' FIELD p_vbeln.
      " See include FV45KF0V_VBAK-VBELN_GET_PARAME
    ELSEIF p_docquo NE space.
      SET PARAMETER ID 'AGN' FIELD p_vbeln.
      " See include FV45KF0V_VBAK-VBELN_GET_PARAME
    ENDIF.
  ENDIF.

* Also save the other parameters
* Sage Sales organization
  SET PARAMETER ID 'VKO' FIELD p_vkorg.
* Distribution Channel
  SET PARAMETER ID 'VTW' FIELD p_vtweg.
* Sales Office (if not blank)
  IF NOT p_vkbur IS INITIAL.
    SET PARAMETER ID 'VKB' FIELD p_vkbur.
  ENDIF.


ENDFORM.                    " SELSCR_SET_PARAM

*&---------------------------------------------------------------------*
*&      Form  LOAD_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM load_data.

* Load the depot information
  PERFORM load_dept.

* If a document number was provided
  IF NOT p_vbeln IS INITIAL.
*   Make sure that the items will be displayed
    gv_sb = gc_sb_it.
*   Load the doc (and item details). This form will also set
*   GV_ST and GV_SB
    PERFORM load_single_doc.
* If Planning board is called as search help (a document number cannot
* be provided)
  ELSEIF NOT gv_sh IS INITIAL.
*   In case of search help for Quotation item
*   IF SY-TCODE(3) = 'VA2'.
    IF gv_trvog = '2'.
      gv_sb = gc_sb_do.
      gv_st = gc_st_md.
*   In case of search help for Contract item
*   ELSEIF SY-TCODE(3) = 'VA4'.
    ELSEIF gv_trvog = '4'.
      gv_sb = gc_sb_do.
      gv_st = gc_st_eq.
*   In case of search help for Enquiry item
*   ELSEIF SY-TCODE(3) = 'VA1'.
    ELSEIF gv_trvog = '1'.
      gv_sb = gc_sb_do.
      gv_st = gc_st_md.
    ENDIF.
  ELSE.
*   Make sure that the items of the documents will not be displayed
*   (only the documents)
    gv_sb = gc_sb_do.
*   In case the radiobutton "Quotation" is selected
    IF NOT p_docquo IS INITIAL.
*     Show the equipments
      gv_st = gc_st_eq.
    ELSE.
*     Show the models
      gv_st = gc_st_md.
    ENDIF.
  ENDIF.

* Get the equipments based on charact for the plant and comp.code and
* models specified on sel.screen
  PERFORM load_equi.
* Get the availabilit of the equipments etc.
  PERFORM load_avly.

ENDFORM.                    " LOAD_DATA

*&---------------------------------------------------------------------*
*&      Form  DELETE_SOURCE_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM delete_source_data.

  CLEAR: it_equnr, it_equnr[], it_matnr, it_matnr[], it_model,
  it_model[],
         gr_equnr, gr_equnr[], gr_matnr, gr_matnr[], gr_model,
         gr_model[],
*        IT_CLS_CHARLIST, IT_CLS_CHARLIST[],
         it_mateq, it_mateq[], it_avail, it_avail[].

ENDFORM.                    " DELETE_SOURCE_DATA

*&---------------------------------------------------------------------*
*&      Form  LOAD_DOCS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM load_single_doc.

  DATA: lv_adrnr   TYPE adrnr,
        lv_city    TYPE ad_city1,
        lv_country TYPE land1.

* Clear the document and items table
  CLEAR: it_docum[], it_docum, it_items[], it_items, it_rpb_sb[],
  it_rpb_sb.

* Find the document type and PO number (descr)
  SELECT SINGLE auart vbeln bstnk
           INTO (it_docum-auart, it_docum-vbeln, it_docum-bstkd)
           FROM vbak
          WHERE vbeln = p_vbeln.
* Set document types in some global variables
  gv_auart_v = it_docum-auart.
  CASE gv_auart_v.
    WHEN gc_auart_enqu.
      gv_auart_n = gc_auart_quot. " Succeeding document type is contract
      gv_vbtyp_v = 'A'.      " Preceding doc in the flow is of type Enq.
      gv_vbtyp_n = 'B'.      " Succeding doc in the flow is of type Quot
      gv_refobjtyp = 'BUS2030'.   " Reference object type is enquiry
      gv_newobjtyp = 'BUS2031'.   " Follow up object type is quotation
      gv_st        = gc_st_md.    " Make sure models are shown
    WHEN gc_auart_quot.
      gv_auart_n = gc_auart_cont. " Succeding document type is contract
      " For now, no need to further define
      " the type of contract (MB, DP)
      gv_vbtyp_v = 'B'.           " Preceding doc in flow is type Quot
      gv_vbtyp_n = 'C'.           " Succeding doc in flow is type Order
      gv_refobjtyp = 'BUS2031'.   " Reference object type is quotation
      gv_newobjtyp = 'BUS2032'.   " Follow up object type is contract
      gv_st        = gc_st_eq.    " Make sure equipments are shown
  ENDCASE.

* Get the contract dates
  SELECT SINGLE vbegdat venddat
           INTO (it_docum-begdat, it_docum-enddat)
           FROM veda
          WHERE vbeln = p_vbeln
            AND vposn = space.
* Get the address... mind that there is an indicator which says whether
* to take the master data or the document address
  SELECT SINGLE adrnr
           INTO lv_adrnr
           FROM vbpa
          WHERE vbeln = p_vbeln
            AND posnr = space
            AND parvw = 'WE'.
* Get the country and city for the address
  SELECT SINGLE city1 country
           INTO (lv_city, lv_country)
           FROM adrc
          WHERE addrnumber = lv_adrnr
            AND date_from  < sy-datum
            AND date_to    > sy-datum.
* Compose the label to be displayed as "Location" on the doc's chart box
  CONCATENATE lv_country '-' lv_city INTO it_docum-locat.
* Append the completed line
  APPEND it_docum.

* Get the item
  SELECT SINGLE vbeln posnr matnr arktx kwmeng vrkme grpos pstyv
           INTO (it_items-vbeln, it_items-posnr,  it_items-matnr,
                 it_items-maktx, it_items-kwmeng, it_items-vrkme,
                 it_items-grpos, it_items-pstyv)
           FROM vbap
          WHERE vbeln = p_vbeln
            AND posnr = p_posnr.
* Copy the location of the items from the document
  it_items-locat = it_docum-locat.
* Get the contract dates for the items
  SELECT SINGLE vbegdat venddat
           INTO (it_items-begdat, it_items-enddat)
           FROM veda
          WHERE vbeln = p_vbeln
            AND vposn = p_posnr.
* If contract dates not explicitely maintained on item level, copy dates
* from header
  IF sy-subrc <> 0.
    it_items-begdat = it_docum-begdat.
    it_items-enddat = it_docum-enddat.
  ENDIF.
* Append the completed line
  APPEND it_items.

* Load the Shopping basket for this order
  SELECT * FROM yse_rpb_sb
           INTO CORRESPONDING FIELDS OF TABLE it_rpb_sb
          WHERE vbelv = p_vbeln.

* Load the maximum item counter for a specific posnr
  SELECT MAX( counter )
           FROM yse_rpb_sb
           INTO gv_sb_counter
          WHERE vbelv = p_vbeln
            AND posnv = p_posnr.

ENDFORM.                    " LOAD_DOCS

*&---------------------------------------------------------------------*
*&      Form  LOAD_EQUI
*&---------------------------------------------------------------------*
* This form will compile a list of equipments, materials and models.
* For this, the following steps will be taken:
*   - Always first query the classification system
*   - Then filter out the equipments that don't have the correct
*     maint.plant or comp.code
*   - For the remaining equipments, go find the models (materials have
*     been found already in prev. step
*   - When a quotation is being converted to a contract, check that the
*     model is still in the list
*----------------------------------------------------------------------*
FORM load_equi.

* Translate the values chosen on the selection screen to lines in the
* table IT_CLS_CHARLIST
* PERFORM PREPARE_SEARCH_CLS.
* --> the above step is now executed earlier because not everyone is
* allowed to execute planning board using characteristics

* Use the table IT_CLS_CHARLIST to query the Class. System, result will
* be in IT_EQUNR
  PERFORM search_cls.
* Search the equipment master view (like ITOB) to restrict
* PERFORM SEARCH_EMVIEW.
  PERFORM search_emview_new.
* Search the transactional data to find eqps that are cross-rented
  PERFORM search_smedat.
* Find the models corresponding to the Equipments materials
  PERFORM search_models.
* Reduce the modelset so that it's limited to the list given by the user
  PERFORM reduce_models.
* Complete Equipments data (Owning Coco, Current Location)
  PERFORM load_equi_detail.

ENDFORM.                    " LOAD_EQUI

*&---------------------------------------------------------------------*
*&      Form  PREPARE_CLS_SEARCH
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM prepare_search_cls.

  CLEAR: it_cls_charlist[], it_cls_charlist.

* If the Compressor Characteristics flag is set
  IF NOT p_clcomp IS INITIAL.
    IF NOT so_press IS INITIAL.
      it_cls_charlist-char  = gc_cls_com_pressr.
      it_cls_charlist-typ   = 'R'.   " range
      it_cls_charlist-from  = so_press-low.
      IF so_press-high IS INITIAL.
        it_cls_charlist-to  = so_press-low.
      ELSE.
        it_cls_charlist-to  = so_press-high.
      ENDIF.
      it_cls_charlist-atfor = 'NUM'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT so_capac IS INITIAL.
      it_cls_charlist-char  = gc_cls_com_capacy.
      it_cls_charlist-typ   = 'R'.   " range
      it_cls_charlist-from  = so_capac-low.
      IF so_capac-high IS INITIAL.
        it_cls_charlist-to  = so_capac-low.
      ELSE.
        it_cls_charlist-to  = so_capac-high.
      ENDIF.
      it_cls_charlist-atfor = 'NUM'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT p_cpoilf IS INITIAL.
      it_cls_charlist-char  = gc_cls_com_oilfre. " Oil Free/Injected
      it_cls_charlist-typ   = 'S'.               " single value
      it_cls_charlist-val   = p_cpoilf.
      it_cls_charlist-atfor = 'CHAR'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT p_cpdiel IS INITIAL.
      it_cls_charlist-char  = gc_cls_com_diesel. " Diesel/Electric
      it_cls_charlist-typ   = 'S'.               " single value
      it_cls_charlist-val   = p_cpdiel.
      it_cls_charlist-atfor = 'CHAR'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT p_cpmobi IS INITIAL.
      it_cls_charlist-char  = gc_cls_com_mobile. " Mobile/stationary
      it_cls_charlist-typ   = 'S'.               " single value
      it_cls_charlist-val   = p_cpmobi.
      it_cls_charlist-atfor = 'CHAR'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT p_cpafcl IS INITIAL.
      it_cls_charlist-char  = gc_cls_com_aftrcl. " After cooler built in
      it_cls_charlist-typ   = 'S'.               " single value
      it_cls_charlist-val   = p_cpafcl.
      it_cls_charlist-atfor = 'CHAR'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT p_cprefi IS INITIAL.
      it_cls_charlist-char  = gc_cls_com_refine. " Refinery Equipment
      it_cls_charlist-typ   = 'S'.               " single value
      it_cls_charlist-val   = p_cprefi.
      it_cls_charlist-atfor = 'CHAR'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT p_cpgenr IS INITIAL.
      it_cls_charlist-char  = gc_cls_com_genert. " Generator built-in
      it_cls_charlist-typ   = 'S'.               " single value
      it_cls_charlist-val   = p_cpgenr.
      it_cls_charlist-atfor = 'CHAR'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT p_cpexfu IS INITIAL.
      it_cls_charlist-char  = gc_cls_com_exfuel. " External Fuel Conn.
      it_cls_charlist-typ   = 'S'.               " single value
      it_cls_charlist-val   = p_cpexfu.
      it_cls_charlist-atfor = 'CHAR'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT p_cpdryr IS INITIAL.
      it_cls_charlist-char  = gc_cls_com_dryer.  " External Fuel Conn.
      it_cls_charlist-typ   = 'S'.               " single value
      it_cls_charlist-val   = p_cpdryr.
      it_cls_charlist-atfor = 'CHAR'.
      APPEND it_cls_charlist.
    ENDIF.
  ENDIF.

  IF NOT p_clgenr IS INITIAL.
    IF NOT so_volt IS INITIAL.
      it_cls_charlist-char  = gc_cls_gen_voltag.
      it_cls_charlist-typ   = 'R'.   " range
      it_cls_charlist-from  = so_volt-low.
      IF so_volt-high IS INITIAL.
        it_cls_charlist-to  = so_volt-low.
      ELSE.
        it_cls_charlist-to  = so_volt-high.
      ENDIF.
      it_cls_charlist-atfor = 'NUM'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT so_freq IS INITIAL.
      it_cls_charlist-char  = gc_cls_gen_freqcy.
      it_cls_charlist-typ   = 'R'.   " range
      it_cls_charlist-from  = so_freq-low.
      IF so_freq-high IS INITIAL.
        it_cls_charlist-to  = so_freq-low.
      ELSE.
        it_cls_charlist-to  = so_freq-high.
      ENDIF.
      it_cls_charlist-atfor = 'NUM'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT so_powr IS INITIAL.
      it_cls_charlist-char  = gc_cls_gen_power.
      it_cls_charlist-typ   = 'R'.   " range
      it_cls_charlist-from  = so_powr-low.
      IF so_powr-high IS INITIAL.
        it_cls_charlist-to  = so_powr-low.
      ELSE.
        it_cls_charlist-to  = so_powr-high.
      ENDIF.
      it_cls_charlist-atfor = 'NUM'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT so_amps IS INITIAL.
      it_cls_charlist-char  = gc_cls_gen_pamps.
      it_cls_charlist-typ   = 'R'.   " range
      it_cls_charlist-from  = so_amps-low.
      IF so_amps-high IS INITIAL.
        it_cls_charlist-to  = so_amps-low.
      ELSE.
        it_cls_charlist-to  = so_amps-high.
      ENDIF.
      it_cls_charlist-atfor = 'NUM'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT p_gnsile IS INITIAL.
      it_cls_charlist-char  = gc_cls_gen_silofr.
      it_cls_charlist-typ   = 'S'.               " single value
      it_cls_charlist-val   = p_gnsile.
      it_cls_charlist-atfor = 'CHAR'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT p_gnmobi IS INITIAL.
      it_cls_charlist-char  = gc_cls_gen_mobile.
      it_cls_charlist-typ   = 'S'.               " single value
      it_cls_charlist-val   = p_gnmobi.
      it_cls_charlist-atfor = 'CHAR'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT p_gnexfu IS INITIAL.
      it_cls_charlist-char  = gc_cls_gen_exfuel.
      it_cls_charlist-typ   = 'S'.               " single value
      it_cls_charlist-val   = p_gnexfu.
      it_cls_charlist-atfor = 'CHAR'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT p_gnskid IS INITIAL.
      it_cls_charlist-char  = gc_cls_gen_skidft.
      it_cls_charlist-typ   = 'S'.               " single value
      it_cls_charlist-val   = p_gnskid.
      it_cls_charlist-atfor = 'CHAR'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT p_gnpara IS INITIAL.
      it_cls_charlist-char  = gc_cls_gen_paropr.
      it_cls_charlist-typ   = 'S'.               " single value
      it_cls_charlist-val   = p_gnpara.
      it_cls_charlist-atfor = 'CHAR'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT p_gnasta IS INITIAL.
      it_cls_charlist-char  = gc_cls_gen_astart.
      it_cls_charlist-typ   = 'S'.               " single value
      it_cls_charlist-val   = p_gnasta.
      it_cls_charlist-atfor = 'CHAR'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT p_gnrsta IS INITIAL.
      it_cls_charlist-char  = gc_cls_gen_rstart.
      it_cls_charlist-typ   = 'S'.               " single value
      it_cls_charlist-val   = p_gnrsta.
      it_cls_charlist-atfor = 'CHAR'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT p_gnrmon IS INITIAL.
      it_cls_charlist-char  = gc_cls_gen_rmonit.
      it_cls_charlist-typ   = 'S'.               " single value
      it_cls_charlist-val   = p_gnrmon.
      it_cls_charlist-atfor = 'CHAR'.
      APPEND it_cls_charlist.
    ENDIF.
    IF NOT p_gnpcon IS INITIAL.
      it_cls_charlist-char  = gc_cls_gen_powcon.
      it_cls_charlist-typ   = 'S'.               " single value
      it_cls_charlist-val   = p_gnpcon.
      it_cls_charlist-atfor = 'CHAR'.
      APPEND it_cls_charlist.
    ENDIF.
  ENDIF.

ENDFORM.                    " PREPARE_SEARCH_CLS

*&---------------------------------------------------------------------*
*&      Form  SEARCH_CLS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM search_cls.

  DATA:
    lv_atinn     TYPE string,
    BEGIN OF it_cls_atwrt OCCURS 0,         " Characteristic values
      atflv      TYPE atflv,
      atwrt      TYPE atwrt,
      atzhl      TYPE atzhl,
      atcod      TYPE atcod,
    END OF it_cls_atwrt,
*   Object Types
    it_cls_otyp  TYPE mcls_r_tabelle       OCCURS 0 WITH HEADER LINE,
*   Selection Criteria
    it_cls_crit  TYPE comw                 OCCURS 0 WITH HEADER LINE,
*   Characteristics
    it_cls_char  TYPE clsel_r_atinn        OCCURS 0 WITH HEADER LINE,
*   Search Objects
    it_cls_objc  TYPE clsel_search_objects OCCURS 0 WITH HEADER LINE.

  IF NOT it_cls_charlist IS INITIAL.

*   Set the Object type that needs querying, ie we want to search
*   "Material" classification
    it_cls_otyp-sign       = 'I'.
    it_cls_otyp-option     = 'EQ'.
    it_cls_otyp-low        = 'EQUI'.
    " MARA for materials, EQUI for equipments
    APPEND it_cls_otyp.

*   Loop over the characteristics that need querying
    LOOP AT it_cls_charlist.
*     Get the key for a the characteristic that you wish to query
      CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
        EXPORTING
          input  = it_cls_charlist-char
        IMPORTING
          output = lv_atinn.

*     Set the characteristic that you need to find some specific
*     value(s) for
      it_cls_char-sign   = 'I'.
      it_cls_char-option = 'EQ'.
      it_cls_char-low    = lv_atinn.
      APPEND it_cls_char.

*     Get the keys for the characteristic value(s) that you are
*     interested in
      IF it_cls_charlist-typ = 'S'.  " When single value
        SELECT atwrt atzhl atcod
          INTO CORRESPONDING FIELDS OF TABLE it_cls_atwrt
          FROM cawn
         WHERE atinn = lv_atinn
           AND atwrt = it_cls_charlist-val.

*       For every key value that you're interested in
        LOOP AT it_cls_atwrt.
*         Add it to the selection criteria as an allowed value
          it_cls_crit-atinn = lv_atinn.
          CLEAR it_cls_crit-atflv.
          CLEAR it_cls_crit-atflb.
          it_cls_crit-atwrt = it_cls_atwrt-atwrt.
          it_cls_crit-atzhl = it_cls_atwrt-atzhl.
          it_cls_crit-atcod = it_cls_atwrt-atcod.
          it_cls_crit-slcod = it_cls_atwrt-atcod.
          it_cls_crit-statu = 'H'.
          it_cls_crit-atfor = it_cls_charlist-atfor.
          APPEND it_cls_crit.
        ENDLOOP.  " AT IT_CLS_ATWRT.

      ELSE.

*       Add it to the selection criteria as an allowed range
        it_cls_crit-atinn = lv_atinn.
        CLEAR it_cls_crit-atwrt.
        it_cls_crit-atflv = it_cls_charlist-from.
        it_cls_crit-atflb = it_cls_charlist-to.
*       IT_CLS_CRIT-ATZHL = IT_CLS_ATWRT-ATZHL.
        it_cls_crit-slcod = 2.   " use range (more details in ATCOD)
        it_cls_crit-atcod = 3.
        " range (ATFLV - deviation) -> (ATLFB + deviation) is considered
        it_cls_crit-statu = 'H'.
        it_cls_crit-atfor = it_cls_charlist-atfor.
        APPEND it_cls_crit.

      ENDIF. " IT_CLS_CHARLIST-TYP = 'S'.

    ENDLOOP.    " AT IT_CLS_CHARLIST.

*   Launch the classification search
    CALL FUNCTION 'CLSC_SEARCH_IN_CLASSTYPE'
      EXPORTING
        i_classtype              = gc_klart
        i_keydate                = sy-datum
        i_language               = sy-langu
        i_status_free            = 'X'
        i_max_hits               = 9999
      TABLES
        i_r_objecttypes_tab      = it_cls_otyp
        i_selection_criteria_tab = it_cls_crit
        i_r_characteristics_tab  = it_cls_char
        e_objects_tab            = it_cls_objc
      EXCEPTIONS
        no_objects_found         = 1
        insufficient_criteria    = 2
        OTHERS                   = 3.

*   If no errors reported
    IF sy-subrc = 0.
*     Include all the equipment numbers in a range of equipments
      gr_equnr-sign   = 'I'.
      gr_equnr-option = 'EQ'.
      LOOP AT it_cls_objc.
        gr_equnr-low = it_cls_objc-object.
        APPEND gr_equnr.
      ENDLOOP.  " IT_CLS_OBJC.
    ENDIF.   " SY-SUBRC = 0.

*   Remove any possible duplicates from the equipment range
    SORT gr_equnr.
    DELETE ADJACENT DUPLICATES FROM gr_equnr.

  ENDIF.   " NOT IT_CLS_CHARLIST IS INITIAL.

ENDFORM.                    " SEARCH_CLS

*&---------------------------------------------------------------------*
*&      Form  SELSCR_PREPARE_COMBO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM selscr_prepare_combo USING p_pname p_chname.

  DATA:
    BEGIN OF wa_ddval OCCURS 0, "Source:TYPE-POOLS : VRM. (Type VRM_VALU
      key(40) TYPE c,
      text(80) TYPE c,
    END OF wa_ddval,
    it_ddval LIKE TABLE OF wa_ddval,
    lv_atinn TYPE atinn.

  CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
    EXPORTING
      input  = p_chname
    IMPORTING
      output = lv_atinn.

* Append the values from customizing
  SELECT cawn~atwrt AS key cawnt~atwtb AS text
      APPENDING TABLE it_ddval
      FROM cawn
      JOIN cawnt
        ON cawn~atinn = cawnt~atinn
       AND cawn~atzhl = cawnt~atzhl
       AND cawn~adzhl = cawnt~adzhl
     WHERE cawn~atinn = lv_atinn
       AND cawnt~spras = 'EN'.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id              = p_pname
      values          = it_ddval
    EXCEPTIONS
      id_illegal_name = 1
      OTHERS          = 2.

ENDFORM.                    " SELSCR_PREPARE_COMBO

*&---------------------------------------------------------------------*
*&      Form  SEARCH_EMVIEW
*&---------------------------------------------------------------------*
* Search Equipment Master View (like ITOB)
*----------------------------------------------------------------------*
FORM search_emview .

  RANGES: gr_werks FOR gt_rent_depot-werks.
  DATA: BEGIN OF it_equnr_temp OCCURS 0,
          equnr TYPE equnr,
          matnr TYPE matnr,
          sernr TYPE gernr,
          shtxt TYPE ktx01,
          iloan TYPE iloan,
          werks TYPE werks_d,
        END OF it_equnr_temp.
*  DATA: BEGIN OF IT_ILOAN_TEMP OCCURS 0,
*          ILOAN TYPE ILOAN,
*          VKORG TYPE VKORG,
*          VKBUR TYPE VKBUR,
*        END OF IT_ILOAN_TEMP.
  DATA: BEGIN OF i_equi OCCURS 0,
          equnr TYPE equnr,
        END OF i_equi.

* Move the found plants from YSE_RENT_DEPOT into a range.
  IF NOT ( gt_rent_depot[] IS INITIAL ).
    gr_werks-sign   = 'I'.
    gr_werks-option = 'EQ'.
    LOOP AT gt_rent_depot.
      MOVE gt_rent_depot-werks TO gr_werks-low.
      APPEND gr_werks.
    ENDLOOP.
  ENDIF.

* In case characteristics have been provided by the user
  IF NOT it_cls_charlist IS INITIAL.

*   Only search Equipment master data tables if the classif search
*   returned a result
    IF NOT gr_equnr IS INITIAL.

*     Select equinrs which are "Rental" into internal table (based on
*     equipment category)
      SELECT equnr INTO TABLE i_equi
                   FROM equi
                  WHERE eqtyp = 'Y'
                     OR eqtyp = 'X'.
*     Remove from this result the equinrs which were not also returned
*     by class. search
      DELETE i_equi WHERE equnr NOT IN gr_equnr.

*     If any rental equipments remain (combined select on eq.categ. and
*     class.)
      IF NOT ( i_equi[] IS INITIAL ).

*       Select on join temporarily leaving out ILOA
        SELECT      equi~equnr
                    equi~matnr
                    equi~sernr
                    eqkt~eqktx  AS shtxt
                    equz~iloan
                    eqbs~b_werk AS werks
               FROM equi
               JOIN equz
                 ON equi~equnr = equz~equnr
               JOIN eqkt
                 ON equi~equnr = eqkt~equnr
               JOIN eqbs
                 ON equi~equnr = eqbs~equnr
               INTO TABLE it_equnr_temp
                FOR ALL ENTRIES IN i_equi
              WHERE equi~equnr EQ i_equi-equnr
                AND equz~datbi EQ '99991231'
                AND eqkt~spras EQ 'EN'.
*       Remove entries which don't have a material number
        DELETE it_equnr_temp WHERE matnr EQ space.
*       If any entries remain, select the corresponding ILOA lines
*        IF NOT ( IT_EQUNR_TEMP[] IS INITIAL ).
*          SELECT     ILOAN
*                     VKORG
*                     VKBUR
*                INTO TABLE IT_ILOAN_TEMP
*                FROM ILOA
*                 FOR ALL ENTRIES IN IT_EQUNR_TEMP
*               WHERE ILOAN = IT_EQUNR_TEMP-ILOAN.
*          SORT IT_ILOAN_TEMP.
*        ENDIF.
*       Combine the 2 temporary tables into IT_EQUNR.
        LOOP AT it_equnr_temp.
*         If the plant is not part of the depots
          IF NOT ( it_equnr_temp-werks IN gr_werks ).
            CONTINUE.
**           Check if the SalesOrg of the equi is the one selected on
**           the selection screen
*            READ TABLE IT_ILOAN_TEMP
*                     WITH KEY ILOAN = IT_EQUNR_TEMP-ILOAN
*                     BINARY SEARCH.
*            IF SY-SUBRC EQ 0.
*              IF IT_ILOAN_TEMP-VKORG NE P_VKORG.
*                CONTINUE.
**             If sales office is filled in!
*              ELSEIF NOT ( P_VKBUR IS INITIAL ) AND
*                           IT_ILOAN_TEMP-VKBUR NE P_VKBUR.
*                CONTINUE.
*              ENDIF.
*            ELSE.
*              CONTINUE.
*            ENDIF.
*          ELSE.
          ENDIF.
          MOVE-CORRESPONDING it_equnr_temp TO it_equnr.
          APPEND it_equnr.
        ENDLOOP.
      ENDIF.
    ENDIF. " NOT GR_EQUNR IS INITIAL. " Cl. search has returned a result

* If user did not enter any characteristics
  ELSE.

*   Select equinrs which are "Rental" into internal table (based on
*   equipment category)
    SELECT equnr INTO TABLE i_equi
                 FROM equi
                WHERE eqtyp = 'Y'
                   OR eqtyp = 'X'.

    SELECT      equi~equnr
                equi~matnr
                equi~sernr
                eqkt~eqktx  AS shtxt
                equz~iloan
                eqbs~b_werk AS werks
           FROM equi
           JOIN equz
             ON equi~equnr = equz~equnr
           JOIN eqkt
             ON equi~equnr = eqkt~equnr
           JOIN eqbs
             ON equi~equnr = eqbs~equnr
           INTO TABLE it_equnr_temp
            FOR ALL ENTRIES IN i_equi
          WHERE equi~equnr EQ i_equi-equnr
            AND equz~datbi EQ '99991231'
            AND eqkt~spras EQ 'EN'.
*   Remove entries which don't have a material number
    DELETE it_equnr_temp WHERE matnr EQ space.
*   If any entries remain, select the corresponding ILOA lines
*    IF NOT ( IT_EQUNR_TEMP[] IS INITIAL ).
*      SELECT     ILOAN
*                 VKORG
*                 VKBUR
*            INTO TABLE IT_ILOAN_TEMP
*            FROM ILOA
*             FOR ALL ENTRIES IN IT_EQUNR_TEMP
*           WHERE ILOAN = IT_EQUNR_TEMP-ILOAN.
*      SORT IT_ILOAN_TEMP.
*    ENDIF.

*   Combine the 2 temporary tables into IT_EQUNR.
    LOOP AT it_equnr_temp.
*     If the plant is not part of the depots
      IF NOT ( it_equnr_temp-werks IN gr_werks ).
        CONTINUE.
*       Check if the SalesOrg of the equi is the one selected on the
*       selection screen
*       READ TABLE IT_ILOAN_TEMP WITH KEY ILOAN = IT_EQUNR_TEMP-ILOAN
*                                BINARY SEARCH.
*       IF SY-SUBRC EQ 0.
*         IF IT_ILOAN_TEMP-VKORG NE P_VKORG.
*           CONTINUE.
**        If sales office is filled in!
*         ELSEIF NOT ( P_VKBUR IS INITIAL ) AND
*                    IT_ILOAN_TEMP-VKBUR NE P_VKBUR.
*           CONTINUE.
*         ENDIF.
*       ELSE.
*         CONTINUE.
*       ENDIF.
*     ELSE.
      ENDIF.
      MOVE-CORRESPONDING it_equnr_temp TO it_equnr.
      APPEND it_equnr.
    ENDLOOP.

  ENDIF. " NOT IT_CLS_CHARLIST IS INITIAL.

* Sort the equipment table and remove duplicates
  SORT it_equnr.
  DELETE ADJACENT DUPLICATES FROM it_equnr.

ENDFORM.                    " SEARCH_EMVIEW

*&---------------------------------------------------------------------*
*&      Form  SEARCH_EMVIEW_NEW
*&---------------------------------------------------------------------*
* Search Equipment Master View (like ITOB)
*----------------------------------------------------------------------*
FORM search_emview_new.

  RANGES: gr_werks FOR gt_rent_depot-werks.
  DATA:
    BEGIN OF i_equi OCCURS 0,
      equnr TYPE equnr,
    END OF i_equi,
    BEGIN OF lt_equi OCCURS 0,
      equnr LIKE equi-equnr,
      matnr LIKE equi-matnr,
      sernr LIKE equi-sernr,
    END OF lt_equi,
    BEGIN OF lt_eqkt OCCURS 0,
      equnr LIKE eqkt-equnr,
      shtxt LIKE eqkt-eqktx,
    END OF lt_eqkt,
    BEGIN OF lt_eqbs OCCURS 0,
      equnr LIKE eqbs-equnr,
      werks LIKE eqbs-b_werk,
    END OF lt_eqbs.

* Move the found plants from YSE_RENT_DEPOT into a range.
  IF NOT ( gt_rent_depot[] IS INITIAL ).
    gr_werks-sign   = 'I'.
    gr_werks-option = 'EQ'.
    LOOP AT gt_rent_depot.
      MOVE gt_rent_depot-werks TO gr_werks-low.
      APPEND gr_werks.
    ENDLOOP.
  ENDIF.

* In case characteristics have been provided by the user
  IF NOT it_cls_charlist IS INITIAL.

*   Only search Equipment master data tables if the classif search
*   returned a result
    CHECK NOT gr_equnr IS INITIAL.
*   Select equinrs which are "Rental" into internal table (based on
*   equipment category)
    SELECT equnr INTO TABLE i_equi
                 FROM equi
                WHERE eqtyp = 'Y'
                   OR eqtyp = 'X'.
*   Remove from this result the equinrs which were not also returned
*   by class. search
    DELETE i_equi WHERE equnr NOT IN gr_equnr.

* If user did not enter any characteristics
  ELSE.

*   Select equinrs which are "Rental" into internal table (based on
*   equipment category)
    SELECT equnr INTO TABLE i_equi
                 FROM equi
                WHERE eqtyp = 'Y'
                   OR eqtyp = 'X'.

  ENDIF. " NOT IT_CLS_CHARLIST IS INITIAL.

* If any rental equipments remain (combined select on eq.categ. and
* class.)
  IF NOT ( i_equi[] IS INITIAL ).

*   Get equipment master data
    SELECT      equnr matnr sernr
           FROM equi
           INTO TABLE lt_equi
            FOR ALL ENTRIES IN i_equi
          WHERE equnr EQ i_equi-equnr.
    SELECT      equnr eqktx AS shtxt
           FROM eqkt
           INTO TABLE lt_eqkt
            FOR ALL ENTRIES IN i_equi
          WHERE equnr EQ i_equi-equnr
            AND spras EQ 'EN'.
    SELECT      equnr b_werk AS werks
           FROM eqbs
           INTO TABLE lt_eqbs
            FOR ALL ENTRIES IN i_equi
          WHERE equnr EQ i_equi-equnr.
    SORT:
      lt_equi BY equnr,
      lt_eqkt BY equnr,
      lt_eqbs BY equnr.

*   Combine 3 temp tables into IT_EQUNR
    LOOP AT lt_equi.
*     Don't keep entries which don't have a material number
      CHECK lt_equi-matnr NE space.
*     Get description
      READ TABLE lt_eqkt WITH KEY equnr = lt_equi-equnr BINARY SEARCH.
      CHECK sy-subrc EQ 0.
*     Get stock information (plant)
      READ TABLE lt_eqbs WITH KEY equnr = lt_equi-equnr BINARY SEARCH.
      CHECK sy-subrc EQ 0.
*     Check if the plant is part of the depots
      CHECK lt_eqbs-werks IN gr_werks.
*     Keep equipment
      MOVE-CORRESPONDING lt_equi TO it_equnr.
      MOVE-CORRESPONDING lt_eqkt TO it_equnr.
      MOVE-CORRESPONDING lt_eqbs TO it_equnr.
      APPEND it_equnr.
    ENDLOOP.
  ENDIF.

* Sort the equipment table and remove duplicates
  SORT it_equnr.
  DELETE ADJACENT DUPLICATES FROM it_equnr.

ENDFORM.                    " SEARCH_EMVIEW_NEW

*&---------------------------------------------------------------------*
*&      Form  SEARCH_SMEDAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM search_smedat .

* In case characteristics have been provided by the user
  IF NOT it_cls_charlist IS INITIAL.

*   Only search for cross rented equipment if the classif search
*   returned a result
    IF NOT gr_equnr IS INITIAL.

*     Select additional EQUNR's from YSE_RENT_MSE
      SELECT     yse_rent_sme~zzequnr AS equnr
                 yse_rent_sme~zzsernr AS sernr
                 eqkt~eqktx           AS shtxt
                 yse_rent_sme~matnr
            FROM yse_rent_sme
            JOIN eqkt
              ON yse_rent_sme~zzequnr = eqkt~equnr
       APPENDING table it_equnr
             FOR ALL ENTRIES IN gt_rent_depot
           WHERE yse_rent_sme~zzequnr IN gr_equnr
             AND eqkt~spras = 'EN'
*            AND YSE_RENT_SME~VKORG EQ P_VKORG
*            AND YSE_RENT_SME~VKBUR EQ GT_RENT_DEPOT-VKBUR
             AND yse_rent_sme~kunnr EQ gt_rent_depot-kunnr
             AND yse_rent_sme~kunnr NE space
             AND yse_rent_sme~angdt LE sy-datum
             AND yse_rent_sme~bnddt GE sy-datum.

    ENDIF. " NOT GR_EQUNR IS INITIAL. " Class search has returned result

* If user did not enter any characteristics
  ELSE.

*   Select additional EQUNR's from YSE_RENT_MSE
    SELECT     yse_rent_sme~zzequnr AS equnr
               yse_rent_sme~zzsernr AS sernr
               eqkt~eqktx           AS shtxt
               yse_rent_sme~matnr
          FROM yse_rent_sme
          JOIN eqkt
            ON yse_rent_sme~zzequnr = eqkt~equnr
     APPENDING table it_equnr
           FOR ALL ENTRIES IN gt_rent_depot
         WHERE eqkt~spras = 'EN'
*          AND YSE_RENT_SME~VKORG EQ P_VKORG
*          AND YSE_RENT_SME~VKBUR EQ GT_RENT_DEPOT-VKBUR
           AND yse_rent_sme~kunnr EQ gt_rent_depot-kunnr
           AND yse_rent_sme~kunnr NE space
           AND yse_rent_sme~angdt LE sy-datum
           AND yse_rent_sme~bnddt GE sy-datum.

  ENDIF. " NOT IT_CLS_CHARLIST IS INITIAL.

* Sort the equipment table and remove duplicates
  SORT it_equnr.
  DELETE ADJACENT DUPLICATES FROM it_equnr.

* Build a list of all the materials used in the equipments
  LOOP AT it_equnr.
    it_matnr-matnr = it_equnr-matnr.
    APPEND it_matnr.
  ENDLOOP.
* Sort the material table and remove duplicates
  SORT it_matnr.
  DELETE ADJACENT DUPLICATES FROM it_matnr.

ENDFORM.                    " SEARCH_SMEDAT

*&---------------------------------------------------------------------*
*&      Form  LOAD_EQUI_DETAIL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM load_equi_detail .

  CONSTANTS: lc_sobkz_w TYPE c VALUE 'W'. " Special stock indicator:
  " consignment stock
* begin of insertion MOD-001
  CONSTANTS : c_re_pgc_rerent(18) VALUE 'RE_PGC_RERENT'.
  DATA : gv_objek     TYPE char18,
         gv_equnr     TYPE vbap-zzequnr,
         gv_atinn     TYPE atinn,
         gv_atwrt     TYPE atwrt.
* end of insertion MOD-001
  DATA: BEGIN OF lt_iloa OCCURS 0,
          equnr TYPE equnr,
          bukrs TYPE bukrs,
        END OF lt_iloa,
        BEGIN OF lt_eqbs OCCURS 0,
          equnr TYPE equnr,
          werks TYPE werks_d,
          kunnr TYPE kunnr,
          sobkz TYPE sobkz,
        END OF lt_eqbs,
        lt_eqbs_w LIKE lt_eqbs OCCURS 0 WITH HEADER LINE,
        lt_eqbs_o LIKE lt_eqbs OCCURS 0 WITH HEADER LINE,
        BEGIN OF lt_kna1 OCCURS 0,
          kunnr TYPE kunnr,
          land1 TYPE land1_gp,
          ort01 TYPE ort01_gp,
        END OF lt_kna1,
        BEGIN OF lt_t001w OCCURS 0,
          werks TYPE werks_d,
          land1 TYPE land1,
          ort01 TYPE ort01,
        END OF lt_t001w.

* Select the company code for all equipments from the "Organization" tab
* (mind that most of the equipments have been selected on company code
* but not all, that's why only now this detail is selected)
  IF NOT ( it_equnr[] IS INITIAL ).
    SELECT       equz~equnr
                 iloa~bukrs
            INTO CORRESPONDING FIELDS OF TABLE lt_iloa
            FROM equz
            JOIN iloa
              ON iloa~iloan = equz~iloan
             FOR ALL entries IN it_equnr
           WHERE equz~equnr EQ it_equnr-equnr
             AND equz~datbi GE sy-datum
             AND equz~datab LE sy-datum.
  ENDIF.
* Select Plant, customer and special stock indicator from "Serial data -
* Stock information" for all equipments
  IF NOT ( it_equnr[] IS INITIAL ).
    SELECT       equnr
                 b_werk AS werks
                 kunnr
                 sobkz
            INTO CORRESPONDING FIELDS OF TABLE lt_eqbs
            FROM eqbs
             FOR ALL ENTRIES IN it_equnr
           WHERE eqbs~equnr EQ it_equnr-equnr.
  ENDIF.
* Equi's in consignment have another "Current location" selection, so
* put them in diff int table
  SORT lt_eqbs BY sobkz.
  LOOP AT lt_eqbs.
    IF lt_eqbs-sobkz EQ lc_sobkz_w.
      APPEND lt_eqbs TO lt_eqbs_w.
    ELSE.
      APPEND lt_eqbs TO lt_eqbs_o.
    ENDIF.
  ENDLOOP.

* Select Cntry and City for the eqpmnts in consignment (at custsite)
  IF NOT (  lt_eqbs_w[] IS INITIAL ).
    SELECT       kunnr
                 land1
                 ort01
            INTO CORRESPONDING FIELDS OF TABLE lt_kna1
            FROM kna1
             FOR ALL ENTRIES IN lt_eqbs_w
           WHERE kna1~kunnr EQ lt_eqbs_w-kunnr.
  ENDIF.
* Select country and city for the equipments sitting in a plant
  SELECT       werks
               land1
               ort01
          INTO CORRESPONDING FIELDS OF TABLE lt_t001w
          FROM t001w
           FOR ALL ENTRIES IN lt_eqbs_o
         WHERE t001w~werks EQ lt_eqbs_o-werks.

* Now complete the equipments with location and CoCo details
  LOOP AT it_equnr.
*   Read equipment's CoCo
    READ TABLE lt_iloa WITH KEY equnr = it_equnr-equnr.
*   If found
    IF sy-subrc EQ 0.
*     Complete the company code
      it_equnr-bukrs = lt_iloa-bukrs.
* begin of insertion MOD-001
      IF ( it_equnr-bukrs = 'GMIX' or it_equnr-bukrs is initial ).
        CLEAR : gv_objek, gv_atinn, gv_atwrt.
        gv_equnr = it_equnr-equnr.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = gv_equnr
          IMPORTING
            output = gv_objek.

        CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
          EXPORTING
            input  = c_re_pgc_rerent
          IMPORTING
            output = gv_atinn.

        SELECT SINGLE atwrt INTO gv_atwrt FROM ausp
          WHERE atinn = gv_atinn
            AND objek = gv_objek.
        IF sy-subrc = 0.
          it_equnr-bukrs = gv_atwrt.
        ENDIF.
      ENDIF.
* end of insertion MOD-001
    ENDIF.

*   Read equipment's stock info
    READ TABLE lt_eqbs WITH KEY equnr = it_equnr-equnr.
*   If found
    IF sy-subrc EQ 0.
*     Now complete the current location
*     In case of consignment, use customer data
      IF lt_eqbs-sobkz = lc_sobkz_w.
*       Find the customer's country and city
        READ TABLE lt_kna1 WITH KEY kunnr = lt_eqbs-kunnr.
*       If found, concatenate into equipments "current location"
        IF sy-subrc EQ 0.
          CONCATENATE lt_kna1-land1 '-' lt_kna1-ort01 INTO
          it_equnr-locat SEPARATED BY space.
        ENDIF.
*     In case equipment not in consignment, use plant data
      ELSE.
*       Find the plant's country and city
        READ TABLE lt_t001w WITH KEY werks = lt_eqbs-werks.
*       If found, concatenate into equipments "current location"
        IF sy-subrc EQ 0.
          CONCATENATE lt_t001w-land1 '-' lt_t001w-ort01 INTO
          it_equnr-locat SEPARATED BY space.
        ENDIF.
      ENDIF.
    ENDIF.

*   Modify the changes
    MODIFY it_equnr.

  ENDLOOP.

ENDFORM.                    " LOAD_EQUI_DETAIL

*&---------------------------------------------------------------------*
*&      Form  SEARCH_MODELS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM search_models .

* Table to hold material/model descriptions
  DATA: BEGIN OF it_makt OCCURS 0,
          matnr TYPE matnr,
          maktx TYPE maktx,
        END OF it_makt,
* Table to hold Material / Model relation (pr ref mat)
        BEGIN OF it_mvke OCCURS 0,
          matnr TYPE matnr,
          pmatn TYPE pmatn,
        END OF it_mvke.

* Fetch the pricing reference materials (or the "models") from MVKE
  IF NOT it_matnr[] IS INITIAL.
    SELECT matnr pmatn
            FROM mvke
            INTO TABLE it_mvke
             FOR ALL ENTRIES IN it_matnr
           WHERE matnr = it_matnr-matnr
             AND vkorg = p_vkorg
             AND vtweg = p_vtweg.
  ENDIF.

* Fetch the descriptions for the materials from MAKT
  IF NOT it_matnr[] IS INITIAL.
    SELECT matnr maktx
             FROM makt
             INTO TABLE it_makt
              FOR ALL ENTRIES IN it_matnr
            WHERE matnr = it_matnr-matnr
              AND spras = 'EN'.
  ENDIF.
* Fetch the description for the models from MAKT
  IF NOT it_mvke[] IS INITIAL.
    SELECT matnr maktx
             FROM makt
        APPENDING TABLE it_makt
              FOR ALL ENTRIES IN it_mvke
            WHERE matnr = it_mvke-pmatn
              AND spras = 'EN'.
  ENDIF.
* Remove duplicates from the descriptions table
  SORT it_makt.
  DELETE ADJACENT DUPLICATES FROM it_makt.

* Loop at materials
  LOOP AT it_matnr.
*   Find the description of the material
    READ TABLE it_makt WITH KEY matnr = it_matnr-matnr.
    IF sy-subrc EQ 0.
      it_matnr-maktx = it_makt-maktx.
    ENDIF.

*   Find the corresponding model (pricing reference material)
    READ TABLE it_mvke WITH KEY matnr = it_matnr-matnr.
    IF sy-subrc EQ 0.
      it_matnr-model = it_mvke-pmatn.
    ENDIF.

*   If no model exists, then the model is the material itself.
    IF it_matnr-model = space.
      it_matnr-model = it_matnr-matnr.
    ENDIF.
    MODIFY it_matnr.
*   Fill a model line as well
    it_model-model = it_matnr-model.
    IF it_model-model = it_matnr-matnr.
      it_model-maktx = it_matnr-maktx.
    ELSE.
*     Find the description of the model
      READ TABLE it_makt WITH KEY matnr = it_model-model.
      IF sy-subrc EQ 0.
        it_model-maktx = it_makt-maktx.
      ENDIF.
    ENDIF.
    APPEND it_model.
  ENDLOOP.

* Sort the model table and remove duplicates
  SORT it_model.
  DELETE ADJACENT DUPLICATES FROM it_model.

ENDFORM.                    " SEARCH_MODELS

*&---------------------------------------------------------------------*
*&      Form  REDUCE_MODELS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM reduce_models.

  IF NOT so_model IS INITIAL.
    LOOP AT it_model WHERE model NOT IN so_model.
      LOOP AT it_matnr WHERE model = it_model-model.
        LOOP AT it_equnr WHERE matnr = it_matnr-matnr.
          DELETE gr_equnr WHERE low = it_equnr-equnr.
          DELETE it_equnr.
        ENDLOOP.  " IT_EQUNR
        DELETE it_matnr.
      ENDLOOP.    " IT_MATNR
      DELETE it_model.
    ENDLOOP.      " IT_MODEL.
  ENDIF.

* Fill a global range with all models
  CLEAR: gr_model, gr_model[].
  gr_model-sign = 'I'.
  gr_model-option = 'EQ'.
  LOOP AT it_model.
    gr_model-low = it_model-model.
    APPEND gr_model.
  ENDLOOP. " IT_MODEL
  SORT gr_model.
  DELETE ADJACENT DUPLICATES FROM gr_model.
* Fill a global range with all material numbers
  CLEAR: gr_matnr, gr_matnr[].
  gr_matnr-sign = 'I'.
  gr_matnr-option = 'EQ'.
  LOOP AT it_matnr.
    gr_matnr-low = it_matnr-matnr.
    APPEND gr_matnr.
  ENDLOOP. " IT_MATNR
  SORT gr_matnr.
  DELETE ADJACENT DUPLICATES FROM gr_matnr.
* Refresh the global range with all equipments (it may be empty if no
* class used, or it may have been reduced after restricting the models
* on CoCo, Plant, modelNr
  CLEAR: gr_equnr, gr_equnr[].
  gr_equnr-sign = 'I'.
  gr_equnr-option = 'EQ'.
  LOOP AT it_equnr.
    gr_equnr-low = it_equnr-equnr.
    APPEND gr_equnr.
  ENDLOOP. " IT_EQUNR
  SORT gr_equnr.
  DELETE ADJACENT DUPLICATES FROM gr_equnr.

ENDFORM.                    " REDUCE_MODELS

*&---------------------------------------------------------------------*
*&      Form  LOAD_DEPT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM load_dept .

  CLEAR: gt_rent_depot, gt_rent_depot[].

* Get the rental depots (and their funct. location)
  IF p_vkbur IS INITIAL.
    SELECT * FROM yse_rent_depot
         INTO TABLE gt_rent_depot
        WHERE vkorg = p_vkorg.
    IF sy-subrc <> 0.
      MESSAGE e020 WITH p_vkorg 'YSE_RENT_DEPOT'.
    ENDIF.
  ELSE.
    SELECT * FROM yse_rent_depot
         INTO TABLE gt_rent_depot
        WHERE vkorg = p_vkorg
          AND vkbur = p_vkbur.
    IF sy-subrc <> 0.
      MESSAGE e021 WITH p_vkorg p_vkbur 'YSE_RENT_DEPOT'.
    ENDIF.
  ENDIF.

ENDFORM.                    " LOAD_DEPT

*&---------------------------------------------------------------------*
*&      Form  LOAD_AVLY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM load_avly.

  DATA:
    lv_date      LIKE p_begdat,
    lv_enddat    LIKE p_begdat,
    lv_tabix     TYPE sytabix,
    lv_index     TYPE syindex,
    lv_quant     TYPE i,
    BEGIN OF lt_equnr OCCURS 0,
      equnr      TYPE equnr,
    END OF lt_equnr,
    it_s502_eq_local
                 TYPE TABLE OF yse_rent_sme WITH HEADER LINE,
    it_s502_eq   TYPE TABLE OF yse_rent_sme WITH HEADER LINE,
    it_s502_md   TYPE TABLE OF yse_rent_sme WITH HEADER LINE,
    it_s502_mt   TYPE TABLE OF yse_rent_sme WITH HEADER LINE,
    it_avail_tmp TYPE TABLE OF gt_avail WITH HEADER LINE.

  CLEAR: it_mateq, it_mateq[].

* PREPARE A TEMPLATE TABLE FOR THE AVAILABILITY ***
* ********************************************* ***
  lv_date = p_begdat.
  WHILE NOT lv_date > p_enddat.
    it_avail_tmp-begdat = lv_date.
    APPEND it_avail_tmp.
    lv_date = lv_date + 1.
  ENDWHILE.

* PREPARE THE IT_MATEQ TABLE ***
* ************************** ***
* Loop on the model table
  LOOP AT it_model.
*   Set the level
    it_mateq-level = 'MD'.
*   Set description, material number and reset quantity
    it_mateq-maktx = it_model-maktx.
    it_mateq-matnr = it_model-model.
    it_mateq-quant = 0.
    lv_quant = 0.
    APPEND it_mateq.
    lv_tabix = sy-tabix.
*   Loop at the material table
    LOOP AT it_matnr WHERE model = it_model-model.
*     If in Equipment view, add the material to the to-be-displayed list
*     in IT_MATEQ
      IF gv_st = gc_st_eq.
*       Set the level
        it_mateq-level = 'MT'.
        it_mateq-maktx = it_matnr-maktx.
        it_mateq-matnr = it_matnr-matnr.
        it_mateq-quant = 0.
        APPEND it_mateq.
      ENDIF.
*     Loop at the equipment table
      LOOP AT it_equnr WHERE matnr = it_matnr-matnr.
*       For every equipment, increment the quantity for the model
        lv_quant       = lv_quant + 1.
*       If in Equipment view, add the equipment to the to-be-displayed
*       list in IT_MATEQ
        IF gv_st = gc_st_eq.
*         Set the level
          it_mateq-level = 'EQ'.
          it_mateq-maktx = it_equnr-shtxt.
          it_mateq-matnr = it_equnr-matnr.
          it_mateq-equnr = it_equnr-equnr.
          it_mateq-sernr = it_equnr-sernr.
          it_mateq-bukrs = it_equnr-bukrs.
          it_mateq-locat = it_equnr-locat.
          it_mateq-quant = 0.
          APPEND it_mateq.
        ENDIF.
      ENDLOOP. " IT_EQUNR
    ENDLOOP.   " IT_MATNR
*   Update the Material-Equipment line for the model with the actual
*   quantity
    READ TABLE it_mateq INDEX lv_tabix.
    it_mateq-quant = lv_quant.
    MODIFY it_mateq INDEX lv_tabix.

*   PREPARE THE IT_AVAIL TABLE ***
*   ************************** ***
*   Start preparing the availability lines for this model: for every
*   day in the displayed timeframe, create a line for this model with
*   full availability and no soft reservations
    it_avail_tmp-level = 'MD'.
    it_avail_tmp-matnr = it_model-model.
    it_avail_tmp-avail = it_mateq-quant.
    it_avail_tmp-softr = 0.

    MODIFY it_avail_tmp TRANSPORTING level matnr avail softr
                               WHERE equnr IS INITIAL.

    APPEND LINES OF it_avail_tmp TO it_avail.

  ENDLOOP.     " IT_MODEL

* GET ACTUALS TO FINALIZE IT_AVAIL TABLE ***
* ************************************** ***
* Load the hard reservations for the equipments in the date range that
* interests us
  SELECT * FROM yse_rent_sme
        INTO TABLE it_s502_eq
       WHERE zzequnr IN gr_equnr
         AND vkorg = p_vkorg
         AND vtweg = p_vtweg
         AND ( (     angdt GE p_begdat
                 AND angdt LE p_enddat )
            OR (     bnddt GE p_begdat
                 AND bnddt LE p_enddat )
            OR (     angdt LT p_begdat
                 AND bnddt GT p_enddat ) ).             "#EC CI_NOFIRST
* Load the soft reservations for the models
  SELECT * FROM yse_rent_sme
        INTO TABLE it_s502_md
       WHERE auart EQ gc_auart_quot
         AND matnr IN gr_model
*         AND VKORG = P_VKORG
*         AND VTWEG = P_VTWEG
         AND ( (     angdt GE p_begdat
                 AND angdt LE p_enddat )
            OR (     bnddt GE p_begdat
                 AND bnddt LE p_enddat )
            OR (     angdt LT p_begdat
                 AND bnddt GT p_enddat ) ).             "#EC CI_NOFIRST
* Load the soft reservations for the materials
  SELECT * FROM yse_rent_sme
        INTO TABLE it_s502_mt
       WHERE auart EQ gc_auart_quot
         AND matnr IN gr_matnr
*         AND VKORG = P_VKORG
*         AND VTWEG = P_VTWEG
         AND ( (     angdt GE p_begdat
                 AND angdt LE p_enddat )
            OR (     bnddt GE p_begdat
                 AND bnddt LE p_enddat )
            OR (     angdt LT p_begdat
                 AND bnddt GT p_enddat ) ).             "#EC CI_NOFIRST

* FINALIZE IT_AVAIL TABLE ***
* *********************** ***
  SORT it_avail BY level matnr begdat.
  SORT it_equnr BY equnr.
  SORT it_matnr BY matnr.

* If Status Top is Model, then update the models availability based on
* the hard reservations etc.
  IF gv_st = gc_st_md.
*   Process the hard reservations to update the availability of models
    LOOP AT it_s502_eq WHERE auart(3) EQ gc_auart_cont
                          OR auart    EQ gc_auart_xren.
*     Find the model related to the equipment
      READ TABLE it_equnr WITH KEY equnr = it_s502_eq-zzequnr BINARY
      SEARCH.
      READ TABLE it_matnr WITH KEY matnr = it_equnr-matnr     BINARY
      SEARCH.
*     Set the start date
      PERFORM compare_dates USING p_begdat it_s502_eq-angdt 'GT'
      CHANGING lv_date.
*     Set the end date
      PERFORM compare_dates USING p_enddat it_s502_eq-bnddt 'LT'
      CHANGING lv_enddat.
*     Find position of the start of the period for the current model
      READ TABLE it_avail WITH KEY level  = 'MD'
                                   matnr  = it_matnr-model
                                   begdat = lv_date
                          BINARY SEARCH.
      MOVE sy-tabix TO lv_index.
*     Loop through the avail table until we reach a date that is later
*     then the period's enddate
      LOOP AT it_avail FROM lv_index.
        IF it_avail-begdat > lv_enddat OR it_avail-level NE 'MD' OR
        it_avail-matnr NE it_matnr-model.
          EXIT.
        ENDIF.
*       Diminish availability for that equipment/date
        it_avail-avail = it_avail-avail - 1.
        MODIFY TABLE it_avail.
      ENDLOOP.
    ENDLOOP.
* If Status Top is Equipment, then use the reservations to complete
* IT_AVAIL with additional lines on Equipment level
  ELSEIF gv_st = gc_st_eq.
*   Set the level
    it_avail-level = 'EQ'.
    LOOP AT it_s502_eq.
      it_avail-matnr  = it_s502_eq-matnr.
      it_avail-equnr  = it_s502_eq-zzequnr.
      it_avail-sernr  = it_s502_eq-zzsernr.
      it_avail-begdat = it_s502_eq-angdt.
      it_avail-enddat = it_s502_eq-bnddt.
      it_avail-locat  = it_s502_eq-zzse_loc.
      it_avail-auart  = it_s502_eq-auart.
      it_avail-vbeln  = it_s502_eq-vbeln.
*     Set indicator which will be used to determine color of node
      CASE it_s502_eq-auart.
        WHEN gc_auart_cont OR gc_auart_xren OR gc_auart_cndp OR
        gc_auart_cnmb.
          IF sy-datum GE it_s502_eq-angdt AND sy-datum LE
          it_s502_eq-bnddt.
            it_avail-stat = 'OR'. " On Rent
          ELSE.
            it_avail-stat = 'HR'. " Hard reservation
          ENDIF.
        WHEN gc_auart_zam1 OR gc_auart_zam2.
          it_avail-stat = 'MR'.   " Maintenance/repair
        WHEN gc_auart_delv OR gc_auart_delr.
          it_avail-stat = 'TR'.   " Transport
      ENDCASE.
      APPEND it_avail.
*     If the current S502 entry covers today, update the equipments
*     "Current Status" in IT_MATEQ
      IF sy-datum GE it_s502_eq-angdt AND sy-datum LE it_s502_eq-bnddt.
*       Read IT_MATEQ for the current equipment
        READ TABLE it_mateq WITH KEY equnr = it_s502_eq-zzequnr.
        IF sy-subrc EQ 0.
*         Set "Current status" depending on the document type of this
*         <reservation>
          CASE it_s502_eq-auart.
            WHEN gc_auart_cont OR gc_auart_cndp OR gc_auart_cnmb.
              it_mateq-stat = 'OnRent'.         " On Rent
            WHEN gc_auart_xren.
              it_mateq-stat = 'CrossRnt'.       " Cross Rent
            WHEN gc_auart_zam1 OR gc_auart_zam2.
              it_mateq-stat = 'Maint/Repair'.   " Maintenance/repair
            WHEN gc_auart_delv OR gc_auart_delr.
              it_mateq-stat = 'InTransp'.       " Transport
          ENDCASE.
          MODIFY it_mateq FROM it_mateq INDEX sy-tabix.
        ENDIF.
      ENDIF.
    ENDLOOP.   " IT_S502_EQ
  ENDIF.

* Update current status where necessary *******************************
* Current status should already have been set depending on the already
* selected hard reservations. Those hard reservations have been selected
* based on the period of the selection screen. If that period doesn't
* cover "today", we should first try by selecting additional hard reser.
* for the concerned equipments
  IF sy-datum LT p_begdat OR sy-datum GT p_enddat.
*   Put equipment numbers without current status in local table
    LOOP AT it_mateq WHERE level EQ 'EQ' AND stat EQ space.
      lt_equnr-equnr = it_mateq-equnr.
      APPEND lt_equnr.
    ENDLOOP.

*   If any, select additional hard reservations for these eq's.
    DESCRIBE TABLE lt_equnr LINES sy-tfill.
    IF NOT sy-tfill IS INITIAL.

      SELECT * FROM yse_rent_sme
            INTO TABLE it_s502_eq_local
             FOR ALL ENTRIES IN lt_equnr
           WHERE zzequnr EQ lt_equnr-equnr
*             AND IT_MATEQ-EQUNR EQ SPACE
             AND vkorg   EQ p_vkorg
             AND vtweg   EQ p_vtweg
             AND angdt   LE sy-datum
             AND bnddt   GE sy-datum.                   "#EC CI_NOFIRST

      IF sy-subrc EQ 0.
        LOOP AT it_s502_eq_local.

*         Read IT_MATEQ for the current equipment
          READ TABLE it_mateq WITH KEY equnr = it_s502_eq_local-zzequnr.
          IF sy-subrc EQ 0.
*           Set "Current status" depending on the document type of this
*           <reservation>
            CASE it_s502_eq_local-auart.
              WHEN gc_auart_cont OR gc_auart_cndp OR gc_auart_cnmb.
                it_mateq-stat = 'OnRent'.         " On Rent
              WHEN gc_auart_xren.
                it_mateq-stat = 'CrossRnt'.       " Cross Rent
              WHEN gc_auart_zam1 OR gc_auart_zam2.
                it_mateq-stat = 'Maint/Repair'.   " Maintenance/repair
              WHEN gc_auart_delv OR gc_auart_delr.
                it_mateq-stat = 'InTransp'.       " Transport
            ENDCASE.
            MODIFY it_mateq FROM it_mateq INDEX sy-tabix.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDIF.

  ENDIF.

* Where (still) no CurrStatus was determined based on hard reservations,
* set the status to available
  it_mateq-stat = 'Available'.     " Available
  MODIFY it_mateq TRANSPORTING stat
                         WHERE stat IS INITIAL.

  SORT it_avail BY level matnr begdat.

* Process the soft reservations on the level of materials to update the
* SR of models
  LOOP AT it_s502_mt.
*   Find the model related to the equipment
    READ TABLE it_matnr WITH KEY matnr = it_s502_mt-matnr.
*   Set the start date
    PERFORM compare_dates USING p_begdat it_s502_mt-angdt 'GT' CHANGING
    lv_date.
*   Set the end date
    PERFORM compare_dates USING p_enddat it_s502_mt-bnddt 'LT' CHANGING
    lv_enddat.
*   Find position of the start of the period for the current model
    READ TABLE it_avail WITH KEY level  = 'MD'
                                 matnr  = it_matnr-model
                                 begdat = lv_date
                        BINARY SEARCH.
    MOVE sy-tabix TO lv_index.
*   Loop through the avail table until we reach a date that is later
*   then the period's enddate
    LOOP AT it_avail FROM lv_index.
      IF it_avail-begdat > lv_enddat OR it_avail-level NE 'MD' OR
      it_avail-matnr NE it_matnr-model.
        EXIT.
      ENDIF.
*     Add softreservation for that model/date
      it_avail-softr = it_avail-softr + it_s502_mt-kwmeng.
      MODIFY TABLE it_avail.
    ENDLOOP.
  ENDLOOP.

* Process the soft reservations on the level of models to update the SR
* of models
  LOOP AT it_s502_md.
*   Set the start date
    PERFORM compare_dates USING p_begdat it_s502_md-angdt 'GT' CHANGING
    lv_date.
*   Set the end date
    PERFORM compare_dates USING p_enddat it_s502_md-bnddt 'LT' CHANGING
    lv_enddat.
*   Find position of the start of the period for the current model
    READ TABLE it_avail WITH KEY level  = 'MD'
                                 matnr  = it_s502_md-matnr
                                 begdat = lv_date
                        BINARY SEARCH.
    MOVE sy-tabix TO lv_index.
*   Loop through the avail table until we reach a date that is later
*   then the period's enddate
    LOOP AT it_avail FROM lv_index.
      IF it_avail-begdat > lv_enddat OR it_avail-level NE 'MD' OR
      it_avail-matnr NE it_matnr-model.
        EXIT.
      ENDIF.
*     Add softreservation for that model/date
      it_avail-softr = it_avail-softr + it_s502_md-kwmeng.
      MODIFY TABLE it_avail.
    ENDLOOP.
  ENDLOOP.

ENDFORM.                    " LOAD_AVLY

*&---------------------------------------------------------------------*
*&      Form  COMPARE_DATES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM compare_dates  USING    p_date1
                             p_date2
                             p_operand
                    CHANGING p_dater.

  DATA: lv_dategt LIKE sy-datum,
        lv_datelt LIKE sy-datum.

  IF p_date1 GT p_date2.
    lv_dategt = p_date1.
    lv_datelt = p_date2.
  ELSE.
    lv_datelt = p_date1.
    lv_dategt = p_date2.
  ENDIF.

  IF p_operand = 'GT'.
    p_dater = lv_dategt.
  ELSE.
    p_dater = lv_datelt.
  ENDIF.

ENDFORM.                    " COMPARE_DATES

*&---------------------------------------------------------------------*
*&      Form  CHECK_TRIGGER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM check_trigger .

* Assume the program is triggered as search help
  gv_sh = gc_char_x.

* If transaction coDe is YSE_RPB, clear the "search help" flag
  IF sy-tcode = gc_tx_rpb.
    CLEAR gv_sh.
  ENDIF. " SY-TCODE

ENDFORM.                    " CHECK_TRIGGER

*&---------------------------------------------------------------------*
*&      Form  SELSCR_RESET
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM selscr_reset .

  p_vbeln = space.
  p_posnr = space.

  CONSTANTS:
   lc_mid_begdt(13) TYPE c VALUE 'YSE_RPB_BEGDT', " Name of the memory id to which the begdat will be exported
   lc_mid_enddt(13) TYPE c VALUE 'YSE_RPB_ENDDT', " Name of the memory id to which the enddat will be exported
   lc_mid_trvog(13) TYPE c VALUE 'YSE_RPB_TRVOG'. " Name of the memory id to which the transaction grp will be ...

  DATA: lv_now     LIKE sy-datum,
        lv_date    LIKE sy-datum,
        lv_mont(2) TYPE c,
        lv_year(4) TYPE c.

* In case planning board is used as search help, fetch contract dates
* from SAPLV45W (subscreen/program of SAPMV45A)
  IF gv_sh NE space.
*   Read memory variables
    IMPORT begdat TO p_begdat FROM MEMORY ID lc_mid_begdt.
    IMPORT begdat TO p_enddat FROM MEMORY ID lc_mid_enddt.
    IMPORT trvog  TO gv_trvog FROM MEMORY ID lc_mid_trvog.
    IF p_enddat IS INITIAL.
      CALL FUNCTION 'RE_ADD_MONTH_TO_DATE'
        EXPORTING
          months  = 1
          olddate = p_begdat
        IMPORTING
          newdate = p_enddat.
    ENDIF.
  ELSE.
*   Take current date in a local variable.
    lv_now = sy-datum.
*   Put the first of the current month in the "Start date"
    CONCATENATE lv_now(6) '01' INTO lv_date.
    p_begdat = lv_date.
*   Take out the current month
    lv_mont = lv_now+4(2).
*   If it's the last month of the year, go to the first month of next yr
    IF lv_mont = 12.
      lv_mont = 1.
      lv_year = lv_now(4).
      lv_year = lv_year + 1.
*   Else, just go to the next month of this year
    ELSE.
      lv_year = lv_now(4).
      lv_mont = lv_mont + 1.
    ENDIF.
*   Padd the month with a zero at the front if required
    IF lv_mont < 10.
      CONCATENATE '0' lv_mont INTO lv_mont.
    ENDIF.
*   Compose a date which is the first of the month following the current
*   (be it next year or not)
    CONCATENATE lv_year lv_mont '01' INTO lv_date.
*   Subtract 1 of the date calculated, and you now have the end of the
*   current month
    lv_date = lv_date - 1.
*   Put the end of the current month in the "end date"
    p_enddat = lv_date.
  ENDIF.

ENDFORM.                    " SELSCR_RESET

*&---------------------------------------------------------------------*
*&      Form  CHECK_AUTH
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM check_auth .

  DATA:
    BEGIN OF lt_matnr OCCURS 0,
      matnr TYPE matnr,
    END OF lt_matnr.

* The next step used to be part of "LOAD_EQUI", but since not everyone
* is allowed to run the planning board with characteristics, this
* preparation is already done to see if action is allowed
  PERFORM prepare_search_cls.

* If user doesn't have full authorization
  IF gv_authf IS INITIAL.
*   If user is planning to request Quotation view (equipments)
    IF   p_docquo NE space OR
*      ( NOT GV_SH IS INITIAL AND SY-TCODE(3) = 'VA4').
       ( NOT gv_sh IS INITIAL AND gv_trvog = '4').
      MESSAGE e066 WITH p_vkorg.
    ENDIF.
*   Yet characteristics are provided
    IF NOT it_cls_charlist[] IS INITIAL.
*     Error message
      MESSAGE e049 WITH p_vkorg.
    ENDIF.
*   Or no model was given (user tries to see the whole fleet)
    IF so_model IS INITIAL.
*     Error message
      MESSAGE e050 WITH p_vkorg.
*   Or multiple models fit the selection criterium for model
    ELSE.
      SELECT      matnr
             INTO TABLE lt_matnr
             FROM mara
            WHERE matnr IN so_model.
      IF sy-dbcnt NE 1.
        MESSAGE e050 WITH p_vkorg.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    " CHECK_AUTH
