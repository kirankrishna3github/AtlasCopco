*&---------------------------------------------------------------------*
*& Report  YSE_FICO_AGEING_BALANCE_BUS_AR                              *
*&                                                                     *
*&---------------------------------------------------------------------*
*&                                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*

REPORT  yse_fico_ageing_balance_bus_ar  MESSAGE-ID yse_fico .

********************************************************************
*Program ID           : YSE_FICO_AGEING_BALANCE_BUS_AR
*Program Title        : Ageing balance by business area
*Author               : Andr¨¦ Blommaert
*Date                 : 06.2.2007

*Change Request Number: CD1K910170-06022007-SE_REP-D129-Ageing balance
*                        by business area
*Description         : The purpose of this program is to show an open
*                      item list per division and to store them into an
*                       external table for BW processing
*==================================================================*
* Copied From         : (Cloned Program)
* Title               : (Program Title)
* Other Related obj   : (Object names)

*==================================================================*
* Change History Log

*------------------------------------------------------------------*
*Mod. no.|  Date    | Name           | Correction Number  | Change
*Reference #  *
*------------------------------------------------------------------*
*MOD-001 |11/05/2009| M.Jacobs | CD1K948170       | NEWGL
*------------------------------------------------------------------*
*MOD-002 |17/06/2009| Uzzawal  | CD1K948779       | CR0874
*                                CD1K948783,CD1K948787,CD1K948789
*                                CD1K948791
*------------------------------------------------------------------*
*MOD-003 |24/06/2009| Uzzawal  | CD1K948900      | CR0874-Extension
*  Duplication in line items display to be corrected.
*------------------------------------------------------------------*
*MOD-004 |26/06/2009| Uzzawal  | CD1K948955     | CR0874-Extension
*------------------------------------------------------------------*
*MOD-005 |27/05/2010| Uzzawal  | CD1K956897     | CR1339
*------------------------------------------------------------------*
*MOD-006 |22/07/2010| L.Mertens| CD1K958263     | CR1238
*------------------------------------------------------------------*
*MOD-007 |25/08/2010| Uzzawal  | CD1K958751     | CR1286
*------------------------------------------------------------------*
*MOD-008 |25/10/2010| G.Rutten | CD1K960432     | CR1026
*------------------------------------------------------------------*
*------------------------------------------------------------------*
*MOD-009 |25/11/2010| G.Rutten | CD1K961296     | CR1733
*------------------------------------------------------------------*
*MOD-010 |11/01/2011| G.Rutten | CD1K962271     | CR1814
*------------------------------------------------------------------*
*MOD-011 |11/01/2011| Nanda .S | CD1K962728     | CR1923
*------------------------------------------------------------------*
*MOD-012 |18/02/2011| Nanda .S | CD1K963118     | CR1923
*------------------------------------------------------------------*
*MOD-013 |20/06/2011| Nanda .S | CD1K965787     | CR1923
*------------------------------------------------------------------*
*MOD-014 |27/06/2011| Geert R. | CD1K966010     | CR1735
*------------------------------------------------------------------*
*MOD-015 |16/08/2011| Nanda .S | CD1K967235     | CR1923
*------------------------------------------------------------------*
*MOD-016 |17/12/2011| Nanda .S | CD1K969409     | CR1923
*------------------------------------------------------------------*
*MOD-017 |31/05/2012| Nanda .S | CD1K972012     | CR2538
*------------------------------------------------------------------*
*MOD-018 |08/02/2013| Nanda .S | CD1K975073     | CR2745
*------------------------------------------------------------------*


INCLUDE yse_fico_ageing_top.
*
*****************************
* SELECTION SCREEN
****************************


SELECTION-SCREEN BEGIN OF BLOCK 1 WITH FRAME TITLE text-001.
" General selection
SELECT-OPTIONS:
s_kunnr FOR kna1-kunnr ,        " Customer number
*{Insert Raskin Kevin
s_ktokd FOR kna1-ktokd,                        "Customer Account Group
*End insert Raskin Kevin}
s_umskz FOR bsid-umskz ,        " Special G/L indicator
s_rstgr FOR bsid-rstgr.                         " Reason Code
* begin of insertion MOD-001
SELECT-OPTIONS: ssegment FOR faglflexa-segment.
* end of insertion MOD-001
PARAMETERS:
p_bukrs LIKE bsid-bukrs OBLIGATORY,   " Company code
*P_gjahr LIKE bsid-gjahr OBLIGATORY,    " Fiscal year
*p_monat LIKE bsid-monat OBLIGATORY.    " Fiscal period
p_keydat LIKE bsid-budat OBLIGATORY.
* begin of insertion MOD-016
PARAMETERS: P_VKBUR LIKE VBAK-VKBUR.
* end of insertion MOD-016
SELECTION-SCREEN END OF BLOCK 1.


SELECTION-SCREEN BEGIN OF BLOCK 2 WITH FRAME TITLE text-002.
" Further selection
* Begin of delete MOD-008
* PARAMETER: p_extr AS CHECKBOX.      " Extract for BW
* End of delete MOD-008
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 01(30) text-003.  " Due date sorted list
SELECTION-SCREEN POSITION POS_LOW.
PARAMETERS: rastbis1(1) DEFAULT '0'  .
PARAMETERS: rastbis2(5) DEFAULT '1-30'.
PARAMETERS: rastbis3(8) DEFAULT '31-60'.
PARAMETERS: rastbis4(8) DEFAULT '61-90'.
* Begin of change MOD-010
* PARAMETERS: rastbis5(8) DEFAULT '91-720'.
PARAMETERS: rastbis5(8) DEFAULT '91-365'.
* End of change MOD-010
* Begin of insert MOD-010
PARAMETERS: rastbis6(9) DEFAULT '366-720'.
* End of insert MOD-010

SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN END OF BLOCK 2.


* Begin of delete MOD-008
*SELECTION-SCREEN BEGIN OF BLOCK 3 WITH FRAME TITLE text-004.
*" Delete old data
*PARAMETERS: p_del AS CHECKBOX,      " Delete old data
*p_date LIKE bsid-budat  .     " Prior to
*
*SELECTION-SCREEN END OF BLOCK 3.
* End of delete MOD-008
*>>>>>> Start of MOD-005 EXTUVE
SELECTION-SCREEN BEGIN OF BLOCK 4 WITH FRAME TITLE text-s08.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT (30) text-s06.
SELECTION-SCREEN POSITION POS_LOW.
PARAMETERS: rb_sel1 RADIOBUTTON GROUP sel DEFAULT 'X'.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT (32) text-s07.
SELECTION-SCREEN POSITION POS_LOW.
PARAMETERS: rb_sel2 RADIOBUTTON GROUP sel.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN SKIP.
SELECTION-SCREEN END OF BLOCK 4.
*>>>>>> End of MOD-005 EXTUVE

*** Begin MOD-008
SELECTION-SCREEN BEGIN OF BLOCK 5 WITH FRAME TITLE text-s09.
PARAMETER: lv_check AS CHECKBOX.
PARAMETERS: p_postd TYPE budat.
PARAMETERS: p_rpostd TYPE budat.
SELECTION-SCREEN END OF BLOCK 5.

DATA: gv_date like bsid-budat,
      gv_error type c.


DATA:
      period like t009b-poper,
      year like bkpf-gjahr.
*** End MOD-008


*==========================================
* begin of deletion MOD-001
*SELECTION-SCREEN BEGIN OF BLOCK 4 WITH FRAME TITLE TEXT-008.
*          " Read Allocation Data
*
*PARAMETERS: P_PCA AS CHECKBOX.      " Read allocated data
*SELECT-OPTIONS:
*S_RRCTY FOR GLPCA-RRCTY.        " Record Type
*PARAMETERS:
*P_RVERS LIKE GLPCA-RVERS DEFAULT '0' OBLIGATORY,
*P_KOKRS LIKE GLPCA-KOKRS DEFAULT '1000' OBLIGATORY,
*P_RYEAR LIKE GLPCA-RYEAR.
*
*SELECT-OPTIONS:
*S_POPER FOR GLPCA-POPER,
*S_RPRCTR FOR GLPCA-RPRCTR,
*S_RACCT FOR GLPCA-RACCT.
*
*PARAMETERS:
*P_ACTIV LIKE GLPCA-ACTIV DEFAULT 'PCAD' OBLIGATORY.
*  .
*
*SELECTION-SCREEN END OF BLOCK 4.
* end of deletion MOD-001

*****************************
* AT SELECTION SCREEN
****************************
AT SELECTION-SCREEN.

  PERFORM check_authorization.

* Begin of delete MOD-008
*  IF NOT p_extr IS INITIAL.
**Issue 2 warnings to start with
**Check transaction F.5D split breakdown has been executed
*
**    MESSAGE w002(yse_fico).              "MOD-004 29.06.2009
*
**Data in table YSE_ACCREC_AGING (BW reporing) has been overwritten
*    MESSAGE w003(yse_fico).
*  ENDIF.
*
*  IF p_del = 'X'.
*    IF p_date IS INITIAL.
*      MESSAGE e008(yse_fico).
*    ENDIF.
*  ENDIF.
* End of delete MOD-008

*** Begin MOD-008
   IF lv_check = 'X'.
     IF p_postd IS INITIAL.
      MESSAGE e027(yse_fico).
     ENDIF.
   ENDIF.

   IF lv_check = 'X'.
     IF p_rpostd IS INITIAL.
      MESSAGE e028(yse_fico).
     ENDIF.
   ENDIF.

 IF lv_check = 'X'.
   IF p_rpostd <= p_postd.
     MESSAGE e029(yse_fico).
   ENDIF.
 ENDIF.

 IF lv_check = 'X'.
* check if the posting and reverse posting date in an open period
  gv_date = p_postd.

  call function 'FI_PERIOD_DETERMINE'
     exporting
          i_budat = gv_date
          i_bukrs = p_bukrs
     importing
          e_gjahr = year
          e_poper = period.

    CALL FUNCTION 'FI_PERIOD_CHECK'
      EXPORTING
        i_bukrs                = p_bukrs   " Company Code
        i_gjahr                = year  " This is we got from FM used above
        i_koart                = '+'
        i_konto                = '+'
        i_monat                = period   " This is we got from FM used above
     EXCEPTIONS
       error_period           = 1
       error_period_acc       = 2
       invalid_input          = 3
       OTHERS                 = 4.

  IF sy-subrc <> 0.
     MESSAGE e030(yse_fico).
  ENDIF.

  clear gv_date.
    gv_date = p_rpostd.

  call function 'FI_PERIOD_DETERMINE'
     exporting
          i_budat = gv_date
          i_bukrs = p_bukrs
     importing
          e_gjahr = year
          e_poper = period.

    CALL FUNCTION 'FI_PERIOD_CHECK'
      EXPORTING
        i_bukrs                = p_bukrs   " Company Code
        i_gjahr                = year  " This is we got from FM used above
        i_koart                = '+'
        i_konto                = '+'
        i_monat                = period   " This is we got from FM used above
     EXCEPTIONS
       error_period           = 1
       error_period_acc       = 2
       invalid_input          = 3
       OTHERS                 = 4.

  IF sy-subrc <> 0.
     MESSAGE e031(yse_fico).
  ENDIF.
  ENDIF.

*** End MOD-008

* begin of deletion MOD-001
*  IF NOT P_PCA IS INITIAL.
**Check some mandatory fields
**Profit center
*    IF S_RPRCTR[] IS INITIAL.
*      MESSAGE E020(YSE_FICO).
*    ENDIF.
*
*    IF P_RYEAR IS INITIAL.
*      MESSAGE E021(YSE_FICO).
*      SET CURSOR FIELD P_RYEAR.
*    ENDIF.
*
*  ENDIF.
* end of deletion MOD-001

*****************************
* START-OF-SELECTION
****************************

START-OF-SELECTION.

* Don't execute when in background
*  IF NOT SY-BATCH IS INITIAL.
*    WRITE TEXT-007.
*    EXIT.
*  ENDIF.

*  PERFORM find_last_day_period  CHANGING P_KEYDAT.

  PERFORM find_period USING p_keydat
                      CHANGING wa_monat
                               wa_gjahr.

  PERFORM find_company_code_currency CHANGING wa_waers.

*{Insert Raskin Kevin
  PERFORM find_customers TABLES it_customers2.
*End insert Raskin Kevin}


  PERFORM find_open_items_at_last_day TABLES it_bsid
                                             it_customers2.


*{Delete Raskin Kevin
*  PERFORM find_customer_names TABLES it_customers
*                                     it_customers2
*                                     it_bsid.
*End delete Raskin Kevin}

*When program F.5D ¡°Calculate Balance Sheet Adjustment¡± has been
*executed the open items of customers split per profit center is stored
*in table BFOD_A.

  PERFORM find_splitted_open_items TABLES it_bsid
                                          it_bfod_a.


  PERFORM adjust_splitted_amounts TABLES it_bfod_a
                                         it_bfod_ab.

  PERFORM adjust_open_items_if_splitted TABLES it_bfod_a
                                               it_bsid
                                               it_bsid2.

  PERFORM get_last_due_dates CHANGING wa_last_2
                                      wa_last_3
                                      wa_last_4
                                      wa_last_5
* Begin of insert MOD-010
                                      wa_last_6.
* End of insert MOD-010




  PERFORM calculate_due_ageing TABLES it_bsid2
                                      it_customers2
                                      it_output
                               USING p_keydat
                                     wa_last_2
                                      wa_last_3
                                      wa_last_4
                                      wa_last_5
* Begin of insert MOD-010
                                      wa_last_6.
* End of insert MOD-010                                      .

*** Begin MOD-008
*** Summarize table it_output by segment into it_summ
LOOP at it_output into wa_output.
* Begin of change MOD-010
*  move-corresponding wa_output to it_summ.
    it_summ-segment = wa_output-segment.
    it_summ-rast1 = wa_output-rast1.
    it_summ-rast2 = wa_output-rast2.
    it_summ-rast3 = wa_output-rast3.
    it_summ-rast4 = wa_output-rast4.
    it_summ-rast5 = wa_output-rast5 + wa_output-rast6.
    it_summ-rast6 = wa_output-rast7.
* End of change MOD-010
* Begin of insert MOD-013
    IT_SUMM-RAST8 = WA_OUTPUT-RAST8.
* End   of insert MOD-013
  collect it_summ.
ENDLOOP.

if lv_check = 'X'.


      PERFORM reposting TABLES it_summ.
  if gv_error = 'N'.
      PERFORM reverse_reposting TABLES it_summ.
  endif.
endif.
*** End MOD-008

*Allocation box
* begin of deletion MOD-001
*  IF P_PCA EQ 'X'.
**  it_output_1[] = it_output[].
**We will add entries to the table
*    PERFORM GET_ALLOCATED TABLES IT_OUTPUT.
*  ENDIF.
* end of deletion MOD-001



******************************
* END-OF-SELECTION
****************************

END-OF-SELECTION.


* 200 FOR OUTPUT ALV
  IF NOT sy-batch IS INITIAL.
*Program has been executed in the background
    PERFORM alv_background.
  ELSE.
*Foreground processing
*P.S. a call screen statement will cause a dump when executing 'in
*background'
    CALL SCREEN 200.
  ENDIF.


* Begin of delete MOD-008
*  IF p_extr EQ 'X'.
** refill table for BW upload
*    DELETE FROM yse_accrec_aging
**{ Change K Raskin
*    WHERE bukrs EQ p_bukrs AND keydate = p_keydat.
*    "Changed by K Raskin issue 3093, bldat = p_keydat.
**} End change K Raskin
*    COMMIT WORK AND WAIT.
*
*    LOOP AT it_output INTO wa_output.
*
*      MOVE-CORRESPONDING wa_output TO it_yse_accrec_aging.
*      MOVE wa_monat TO it_yse_accrec_aging-monat.
*      MOVE wa_gjahr TO it_yse_accrec_aging-gjahr.
*      it_yse_accrec_aging-bukrs = p_bukrs.
**CHANGE CURRENCY TO COMPANY CODE WAERS
*      it_yse_accrec_aging-waers = wa_waers.
*      it_yse_accrec_aging-keydate = p_keydat.
*      COLLECT it_yse_accrec_aging.
*
*    ENDLOOP.
*
*    SORT it_yse_accrec_aging.
*
*    MODIFY yse_accrec_aging FROM TABLE it_yse_accrec_aging.
*
*    COMMIT WORK.
*
*
*  ENDIF.
*
*
*  IF p_del = 'X'.
*
*    DELETE FROM yse_accrec_aging
*     WHERE bukrs EQ p_bukrs AND keydate < p_date.
*
*    COMMIT WORK AND WAIT.
*
*
*
*  ENDIF.
* End of delete MOD-008

**&---------------------------------------------------------------------
**
**&      Form  find_last_day_period
**&---------------------------------------------------------------------
**
**       text
**----------------------------------------------------------------------
**
**      <--P_P_KEYDAT  text
**----------------------------------------------------------------------
**
*FORM find_last_day_period  CHANGING p_P_KEYDAT.
*
*  DATA: lv_monat(3) TYPE n.
*
** FIND FISCAL YEAR VARIANT
*
*  SELECT SINGLE periv INTO wa_periv
*  FROM t001
*  WHERE bukrs = p_bukrs.
*
*  MOVE p_monat TO lv_monat.
*
*  CALL FUNCTION 'LAST_DAY_IN_PERIOD_GET'
*    EXPORTING
*      i_gjahr              = p_gjahr
**     I_MONMIT             = 00
*      i_periv              = wa_periv
*      i_poper              = lv_monat
*    IMPORTING
*      e_date               = p_P_KEYDAT
*    EXCEPTIONS
*      input_false          = 1
*      t009_notfound        = 2
*      OTHERS               = 4
*            .
*  IF sy-subrc <> 0.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF.
*
*
*ENDFORM.                    " find_last_day_period
*&---------------------------------------------------------------------*
*&      Form  find_open_items_at_last_day
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_BSID  text
*----------------------------------------------------------------------*
FORM find_open_items_at_last_day  TABLES   p_it_bsid STRUCTURE bsid
                                           p_it_customers2 STRUCTURE
                                           wa_customers.

  DATA: lv_xblnr2 type bkpf-xblnr.     " + MOD-006
  DATA: lv_dwaers type bkpf-waers.     " + MOD-006
  DATA: lv_kursf  type bkpf-kursf.     " + MOD-006
  DATA: lv_cwaers type t001-waers.     " + MOD-006

  SELECT bukrs gjahr monat kunnr blart belnr
          buzei bldat shkzg dmbtr wrbtr waers
         zfbdt zbd1t zbd2t zbd3t rebzg rebzt
         vbeln xref2                          " + MOD-006
         RSTGR                                " + MOD-013
         INTO CORRESPONDING FIELDS OF TABLE it_bsid
         FROM bsid
         FOR ALL ENTRIES IN p_it_customers2      "Added by Raskin Kevin
         WHERE bukrs = p_bukrs
         AND kunnr = p_it_customers2-kunnr      "Changed by Raskin Kevin
         AND umskz IN s_umskz
         AND rstgr IN s_rstgr
         AND budat <= p_keydat.

* If clearing of an open item has been performed in the new period of an
*item posted into previous periods than this needs to be taken into
*account meaning the item was an open item at the key date.

  SELECT bukrs gjahr monat kunnr blart belnr buzei bldat shkzg dmbtr
         wrbtr zfbdt zbd1t zbd2t zbd3t rebzg rebzt
         vbeln xref2                          " + MOD-006
         APPENDING CORRESPONDING FIELDS OF TABLE it_bsid
         FROM bsad
         FOR ALL ENTRIES IN p_it_customers2      "Added by Raskin Kevin
         WHERE bukrs = p_bukrs
         AND kunnr = p_it_customers2-kunnr      "Changed by Raskin Kevin
         AND umskz IN s_umskz
         AND rstgr IN s_rstgr
         AND budat <= p_keydat
         AND augdt > p_keydat.

  SORT it_bsid  .

*>>>>>>>>>>> Begin of Insert EXTUVE MOD-002
** begin of insertion MOD-001
*  LOOP AT it_bsid.
*    clear lv_docln.
*    concatenate '000' it_bsid-buzei into lv_docln.
*    SELECT SINGLE segment INTO it_bsid-segment FROM faglflexa
*      WHERE ryear EQ it_bsid-gjahr
*        AND docnr EQ it_bsid-belnr
*        AND rldnr EQ c_rldnr
*        AND rbukrs EQ it_bsid-bukrs
*        AND docln EQ lv_docln.
*    IF sy-subrc = 0.
*      MODIFY it_bsid.
*    ENDIF.
*    IF NOT it_bsid-segment IN ssegment.
*      DELETE it_bsid.
*    ENDIF.
*  ENDLOOP.
** end of insertion MOD-001
*
  FIELD-SYMBOLS : <fs-bsid> LIKE it_bsid.
  LOOP AT it_bsid ASSIGNING <fs-bsid>.
    CLEAR lv_docln.
    CONCATENATE '000' <fs-bsid>-buzei INTO lv_docln.
    <fs-bsid>-docln = lv_docln.
  ENDLOOP.
*
*CHECK NOT IT_BSID[] IS INITIAL.
*SELECT ryear docnr rldnr rbukrs hsl segment buzei bschl
*        into CORRESPONDING FIELDS OF TABLE  it_faglflexa
*            from faglflexa
*              for all entries in it_bsid
*                 where ryear = it_bsid-gjahr
*                   and docnr = it_bsid-belnr
*                   and rldnr = c_rldnr
*                   and rbukrs = it_bsid-bukrs
*                   and bschl = '01'.
*if sy-subrc = 0.
*  sort it_faglflexa by ryear docnr segment.
*endif.
*>>>>>>>>>> Begin of MOD-004
  CHECK NOT it_bsid[] IS INITIAL.
  SELECT ryear docnr rldnr rbukrs hsl wsl segment buzei bschl
        APPENDING CORRESPONDING FIELDS OF TABLE it_faglflexa
            FROM faglflexa
              FOR ALL ENTRIES IN it_bsid
                 WHERE ryear = it_bsid-gjahr
                   AND rldnr = c_rldnr
                   AND rbukrs = it_bsid-bukrs
                   AND belnr = it_bsid-belnr
                   AND buzei  = it_bsid-buzei    "MOD-004
                   AND segment in ssegment.      "CR1268
*                   and docln  = it_bsid-docln.  "MOD-004
** Begin of change MOD-018
*  IF sy-subrc = 0.
*    SORT it_faglflexa BY ryear docnr segment.
*  ENDIF.
** End of change MOD-018
*>>>>>>>>>> End of MOD-004
*
*>>>>>>>>>> Start of MOD-005 EXTUVE
  DATA : wa_bsid1 LIKE it_bsid,
         v_tabix TYPE sy-tabix.
  LOOP AT it_faglflexa INTO wa_faglflexa.
   if rb_sel1 = 'X'.
    CLEAR wa_bsid1.
    READ TABLE it_bsid INTO wa_bsid1 WITH KEY bukrs =
    wa_faglflexa-rbukrs
                                              gjahr = wa_faglflexa-ryear
                                              belnr = wa_faglflexa-docnr
                                              buzei = wa_faglflexa-buzei
                                              .
    IF sy-subrc = 0.
*>>> Start of insert EXTUVE CR1286
    IF wa_bsid1-SHKZG = 'H'.
       wa_bsid1-dmbtr = wa_bsid1-dmbtr * ( -1 ).
    endif.
* Begin of insert MOD-008
    IF wa_bsid1-SHKZG = 'H'.
       wa_bsid1-wrbtr = wa_bsid1-wrbtr * ( -1 ).
    endif.
* End of insert MOD-008
*>>> End  of insert EXTUVE CR1286
*
      IF wa_bsid1-dmbtr = wa_faglflexa-hsl.
        wa_bsid1-segment = wa_faglflexa-segment.
        APPEND wa_bsid1 TO it_bsid .
        CLEAR wa_bsid1.
      ELSE.
        AT END OF segment.
          wa_bsid1-segment = wa_faglflexa-segment.
          wa_bsid1-dmbtr   = wa_faglflexa-hsl.
          APPEND wa_bsid1 TO it_bsid .
          CLEAR wa_bsid1.
        ENDAT.
      ENDIF.
    ENDIF.
    elseif rb_sel2 = 'X'.
    CLEAR wa_bsid1.
    READ TABLE it_bsid INTO wa_bsid1 WITH KEY bukrs =
    wa_faglflexa-rbukrs
                                              gjahr = wa_faglflexa-ryear
                                              belnr = wa_faglflexa-docnr
                                              buzei = wa_faglflexa-buzei
                                              .
    IF sy-subrc = 0.
*>>> Start of insert EXTUVE CR1286
    IF wa_bsid1-SHKZG = 'H'.
       wa_bsid1-wrbtr = wa_bsid1-wrbtr * ( -1 ).
    endif.
*>>> End  of insert EXTUVE CR1286
      IF wa_bsid1-wrbtr = wa_faglflexa-wsl.
        wa_bsid1-segment = wa_faglflexa-segment.
        APPEND wa_bsid1 TO it_bsid .
        CLEAR wa_bsid1.
      ELSE.
        AT END OF segment.
          wa_bsid1-segment = wa_faglflexa-segment.
          wa_bsid1-wrbtr   = wa_faglflexa-wsl.
          APPEND wa_bsid1 TO it_bsid .
          CLEAR wa_bsid1.
        ENDAT.
      ENDIF.
    ENDIF.
    endif.
  ENDLOOP.
*>>>>>>>>>> End of MOD-005 EXTUVE
  DELETE it_bsid WHERE segment = space.
  DELETE ADJACENT DUPLICATES FROM it_bsid COMPARING ALL FIELDS.
  " MOD-004
*>>>>>>>>>>> End of Insert EXTUVE MOD-002

* begin of insert MOD-006
  CHECK NOT it_bsid[] IS INITIAL.
  LOOP AT it_bsid.
*.. invoice reference:
    IF it_bsid-rebzg IS INITIAL AND
       it_bsid-rebzt IS INITIAL.
      it_bsid-rebzg = it_bsid-belnr.
      modify it_bsid transporting rebzg.
    ENDIF.

*.. Fill fields from header
    SELECT SINGLE xblnr waers kursf
      INTO (lv_xblnr2, lv_dwaers, lv_kursf)
      FROM bkpf WHERE belnr = it_bsid-belnr
                  AND bukrs = it_bsid-bukrs
                  AND gjahr = it_bsid-gjahr.

    IF sy-subrc = 0.
      move lv_xblnr2 to it_bsid-xblnr2.
      move lv_dwaers to it_bsid-dwaers.
      move lv_kursf  to it_bsid-kursf.
      modify it_bsid TRANSPORTING xblnr2 dwaers kursf.
    ENDIF.

*.. Fill company currency
    SELECT SINGLE waers INTO lv_cwaers
      FROM t001 WHERE bukrs = it_bsid-bukrs.

    IF sy-subrc = 0.
      move lv_cwaers to it_bsid-cwaers.
      modify it_bsid TRANSPORTING cwaers.
    ENDIF.

* Begin of Change MOD-014
*.. For clearing-documents: take baselinedate of the RV/DR/DG documents
*.. if more documents involved, take the most recent baselinedate
*    IF it_bsid-blart = 'AB'.
*      REFRESH it_clear.
*      SELECT zfbdt zbd1t zbd2t zbd3t belnr
*        INTO CORRESPONDING FIELDS OF TABLE it_clear
*        FROM bsad WHERE bukrs eq it_bsid-bukrs
*                    AND kunnr eq it_bsid-kunnr
*                    AND augbl eq it_bsid-belnr
*                    AND shkzg eq it_bsid-shkzg
*                    AND blart in ('RV', 'DR', 'DG')
*        ORDER BY zfbdt DESCENDING.
*
*      IF NOT it_clear[] IS INITIAL.
*        READ TABLE it_clear INDEX 1.
*        IF sy-subrc = 0.
*          move it_clear-zfbdt to it_bsid-zfbdt.
*          move it_clear-belnr to it_bsid-rebzg.
*          move it_clear-zbd1t to it_bsid-zbd1t.
*          move it_clear-zbd2t to it_bsid-zbd2t.
*          move it_clear-zbd3t to it_bsid-zbd3t.
*          modify it_bsid TRANSPORTING zfbdt zbd1t zbd2t zbd3t rebzg.
*        ENDIF.
*      ENDIF.
*    endif.
* End of Change MOD-014
  ENDLOOP.

* end of insert MOD-006

ENDFORM.                    " find_open_items_at_last_day
*&---------------------------------------------------------------------*
*&      Form  FIND_SPLITTED_OPEN_ITEMS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_BSID  text
*      -->P_IT_BFOD_A  text
*----------------------------------------------------------------------*
FORM find_splitted_open_items  TABLES   p_it_bsid STRUCTURE bsid
                                      p_it_bfod_a STRUCTURE bfod_a.

  READ TABLE  p_it_bsid INDEX 1.
  CHECK sy-subrc EQ 0.
  SELECT bukrs belnr buzei auzei gjahr dmbtr shkzg
 INTO CORRESPONDING FIELDS OF  TABLE p_it_bfod_a
 FROM bfod_a
 FOR ALL ENTRIES IN p_it_bsid
 WHERE belnr EQ p_it_bsid-belnr
 AND  buzei EQ p_it_bsid-buzei
 AND gjahr EQ p_it_bsid-gjahr
 AND  bukrs EQ p_bukrs.

  SORT p_it_bfod_a.

ENDFORM.                    " FIND_SPLITTED_OPEN_ITEMS
*&---------------------------------------------------------------------*
*&      Form  ADJUST_SPLITTED_AMOUNTS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_BFOD_A  text
*      -->P_IT_BFOD_AB  text
*----------------------------------------------------------------------*
FORM adjust_splitted_amounts  TABLES   p_it_bfod_a STRUCTURE bfod_a
  p_it_bfod_ab STRUCTURE bfod_ab.

  READ TABLE p_it_bfod_a INDEX 1.
  CHECK sy-subrc EQ 0.

  SELECT bukrs belnr buzei auzei gjahr bdiffx
  INTO CORRESPONDING FIELDS OF TABLE p_it_bfod_ab
  FROM bfod_ab
  FOR ALL ENTRIES IN p_it_bfod_a
  WHERE bukrs EQ p_it_bfod_a-bukrs
  AND belnr EQ p_it_bfod_a-belnr
  AND buzei EQ p_it_bfod_a-buzei
  AND auzei EQ p_it_bfod_a-auzei
  AND gjahr EQ wa_gjahr.


* ADJUST SPLITTED AMOUNTS
  LOOP AT p_it_bfod_a.


    IF  p_it_bfod_a-shkzg = 'H'.
      p_it_bfod_a-dmbtr = p_it_bfod_a-dmbtr * ( -1 ).
    ENDIF.

    READ TABLE p_it_bfod_ab WITH KEY bukrs = p_it_bfod_a-bukrs
                                     belnr = p_it_bfod_a-belnr
                                     gjahr = p_it_bfod_a-gjahr
                                     buzei = p_it_bfod_a-buzei
                                     auzei = p_it_bfod_a-auzei.

    IF sy-subrc EQ 0.

*Added by Christophe Geerts (Quickfix)
*--------------------------------------
      IF  p_it_bfod_a-shkzg = 'H'.
        p_it_bfod_ab-bdiffx = p_it_bfod_ab-bdiffx * ( -1 ).
      ENDIF.
*--------------------------------------

      p_it_bfod_a-dmbtr = p_it_bfod_a-dmbtr + p_it_bfod_ab-bdiffx.

    ENDIF.

    MODIFY p_it_bfod_a.


  ENDLOOP.






ENDFORM.                    " ADJUST_SPLITTED_AMOUNTS
*&---------------------------------------------------------------------*
*&      Form  ADJUST_OPEN_ITEMS_IF_SPLITTED
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_BFOD_A  text
*      -->P_IT_BSID  text
*----------------------------------------------------------------------*
FORM adjust_open_items_if_splitted  TABLES   p_it_bfod_a
                                      STRUCTURE bfod_a
                                             p_it_bsid
                                      STRUCTURE it_bsid
                                             p_it_bsid2
                                      STRUCTURE it_bsid.



  LOOP AT p_it_bsid.

*>>>>> Begin of Changes MOD-004
*    IF  p_it_bsid-shkzg = 'H'.
*      p_it_bsid-dmbtr = p_it_bsid-dmbtr * ( -1 ).
*
*    ENDIF.
*>>>>> End of Changes MOD-004

    READ TABLE p_it_bfod_a  INTO wa_bfod_a
                      WITH KEY bukrs =  p_it_bsid-bukrs
                               belnr =  p_it_bsid-belnr
                               gjahr =  p_it_bsid-gjahr
                               buzei =  p_it_bsid-buzei.

    IF sy-subrc EQ 0.
      MOVE-CORRESPONDING p_it_bsid TO p_it_bsid2.
*      p_it_bsid2-dmbtr = wa_bfod_a-dmbtr.       "MOD-003

      p_it_bsid2-auzei = wa_bfod_a-auzei.
*      SHIFT  wa_bfod_a-prctr LEFT DELETING LEADING '0'.
*      p_it_bsid2-gsber = wa_bfod_a-prctr.
      p_it_bsid2-shkzg = wa_bfod_a-shkzg.

      APPEND p_it_bsid2.
*>>>>>>>>>>> Begin of EXTUVE MOD-003
*      LOOP AT p_it_bfod_a
*      WHERE belnr EQ wa_bfod_a-belnr
*        AND auzei NE wa_bfod_a-auzei
*        AND buzei = wa_bfod_a-buzei
*        AND gjahr = wa_bfod_a-gjahr.
*
*        MOVE-CORRESPONDING p_it_bsid TO p_it_bsid2.
*        p_it_bsid2-dmbtr = p_it_bfod_a-dmbtr.
*        p_it_bsid2-auzei = p_it_bfod_a-auzei.
**        SHIFT p_it_bfod_a-prctr LEFT DELETING LEADING '0'.
**        p_it_bsid2-gsber = p_it_bfod_a-prctr.
*        p_it_bsid2-shkzg = p_it_bfod_a-shkzg.
*
*        APPEND p_it_bsid2.
*
*      ENDLOOP.
*>>>>>>>>>>> End of EXTUVE MOD-003


    ELSE.
      MOVE-CORRESPONDING p_it_bsid TO p_it_bsid2.
      APPEND p_it_bsid2.

    ENDIF.

  ENDLOOP.




ENDFORM.                    " ADJUST_OPEN_ITEMS_IF_SPLITTED
*&---------------------------------------------------------------------*
*&      Form  calculate_due_ageing
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_BSID2  text
*      -->P_P_KEYDAT  text
*----------------------------------------------------------------------*
FORM calculate_due_ageing  TABLES   p_it_bsid2 STRUCTURE  it_bsid2
                                    p_it_customers
                                    STRUCTURE  wa_customers
                                    p_it_output STRUCTURE wa_output
                           USING    p_p_keydat
                                    p_last_2
                                    p_last_3
                                    p_last_4
                                    p_last_5
* Begin of insert MOD-010
                                    p_last_6.
* End of insert MOD-010

  DATA: lv_faede LIKE faede,
  lv_days_overdue TYPE i,
  lv_currency TYPE currency,  "
  lv_ukurs TYPE ukurs_curr,
  lv_ukurs1 TYPE ukurs_curr,
* Begin of insert MOD-009
  lv_vkorg TYPE vkorg,
  lv_vtweg TYPE vtweg,
  lv_spart TYPE spart,
  lv_vbeln TYPE vbeln,
  lv_vbelv TYPE vbelv,
  lv_bzirk TYPE bzirk,
  lv_vkbur TYPE vkbur,
  lv_vkgrp TYPE vkgrp,
  lv_xref2 TYPE xref2.
* End of insert MOD-009


  LOOP AT p_it_bsid2.


    MOVE-CORRESPONDING p_it_bsid2 TO lv_faede.
    lv_faede-koart = 'D'.
    CALL FUNCTION 'DETERMINE_DUE_DATE'
      EXPORTING
        i_faede                          = lv_faede
*     I_GL_FAEDE                       =
      IMPORTING
        e_faede                          = lv_faede
      EXCEPTIONS
       account_type_not_supported       = 1
        OTHERS                           = 2
              .
    IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

    p_it_bsid2-netdt = lv_faede-netdt.

    MOVE-CORRESPONDING p_it_bsid2 TO p_it_output.



*   p_it_output-prctr = p_it_bsid2-gsber.

*    IF p_P_KEYDAT <= lv_faede-netdt.


*   ELSE.


    IF rb_sel1 = 'X'.

      lv_days_overdue = p_p_keydat - p_it_bsid2-netdt.
* Begin of insert MOD-016
*       Begin of insert MOD-013
*          IF P_IT_BSID2-RSTGR <> C_05.
*       End   of insert MOD-013
* End   of insert MOD-016
      IF lv_days_overdue <= 0.
        p_it_output-rast1 = p_it_bsid2-dmbtr.

      ELSEIF lv_days_overdue <= p_last_2.

        p_it_output-rast2 = p_it_bsid2-dmbtr.
      ELSEIF lv_days_overdue <= p_last_3.
        p_it_output-rast3 = p_it_bsid2-dmbtr.
      ELSEIF lv_days_overdue <= p_last_4.
        p_it_output-rast4 = p_it_bsid2-dmbtr.
      ELSEIF lv_days_overdue <= p_last_5.
        p_it_output-rast5 = p_it_bsid2-dmbtr.
* Begin of insert MOD-010
      ELSEIF lv_days_overdue <= p_last_6.
       p_it_output-rast6 = p_it_bsid2-dmbtr.
* End of insert MOD-010
      ELSE.

*   Begin of insert MOD-016
             IF P_IT_BSID2-RSTGR <> C_05.

*     Begin of change MOD-010
*            p_it_output-rast6 = p_it_bsid2-dmbtr.
              p_it_output-rast7 = p_it_bsid2-dmbtr.
*     End of change MOD-010
*          ENDIF.
*     Begin of insert MOD-013
             ELSE.                    " When reason code is 05 - court cases
*              IF LV_DAYS_OVERDUE > P_LAST_6.
               P_IT_OUTPUT-RAST8 = P_IT_BSID2-DMBTR.
            ENDIF.
     ENDIF.
*       End   of insert MOD-013
*   End   of insert MOD-016


    ELSEIF rb_sel2 = 'X'.
*>>>>.START OF MOD-005 EXTUVE
      CLEAR lv_currency.
      CALL FUNCTION 'FTI_COMPANY_CODE_CURRENCY_GET'
        EXPORTING
          i_bukrs       =  p_it_bsid2-bukrs
        IMPORTING
          e_waers       = lv_currency
*     E_LAND1       =
                .
*    if  p_it_bsid2-waers ne 'USD'.
      CLEAR : lv_ukurs.
      SELECT SINGLE ukurs INTO lv_ukurs FROM tcurr
                       WHERE kurst = 'EURV'
                         AND fcurr = lv_currency
                         AND tcurr = p_it_bsid2-waers.
*    else.
*      CLEAR : lv_ukurs.
*      SELECT SINGLE ukurs INTO lv_ukurs FROM tcurr
*                       WHERE kurst = 'M'
*                         AND fcurr = lv_currency
*                         AND tcurr = p_it_bsid2-waers.
*    endif.
      IF sy-subrc = 0 .
        lv_days_overdue = p_p_keydat - p_it_bsid2-netdt.

       IF lv_ukurs IS NOT INITIAL.
* Begin of insert MOD-016
*   Begin of insert MOD-013
*    IF P_IT_BSID2-RSTGR <> C_05.
*   End   of insert MOD-013
* End   of insert MOD-016
        IF lv_days_overdue <= 0.
          p_it_output-rast1 = p_it_bsid2-wrbtr * ( 1 / lv_ukurs ).

        ELSEIF lv_days_overdue <= p_last_2.

          p_it_output-rast2 = p_it_bsid2-wrbtr * ( 1 / lv_ukurs ).
        ELSEIF lv_days_overdue <= p_last_3.
          p_it_output-rast3 = p_it_bsid2-wrbtr * ( 1 / lv_ukurs ).
        ELSEIF lv_days_overdue <= p_last_4.
          p_it_output-rast4 = p_it_bsid2-wrbtr * ( 1 / lv_ukurs ).
        ELSEIF lv_days_overdue <= p_last_5.
          p_it_output-rast5 = p_it_bsid2-wrbtr * ( 1 / lv_ukurs ).
* Begin of insert MOD-010
        ELSEIF lv_days_overdue <= p_last_6.
          p_it_output-rast6 = p_it_bsid2-wrbtr * ( 1 / lv_ukurs ).
* End of insert MOD-010
        ELSE.
* Begin of change MOD-016
          IF P_IT_BSID2-RSTGR <> C_05.
*       Begin of change MOD-010
*              p_it_output-rast6 = p_it_bsid2-wrbtr * ( 1 / lv_ukurs ).
              p_it_output-rast7 = p_it_bsid2-wrbtr * ( 1 / lv_ukurs ).
*     End of change MOD-010

*            ENDIF.
*     Begin of insert MOD-013
          ELSE.                    " When reason code is 05 - court cases
*         IF LV_DAYS_OVERDUE > P_LAST_6.
          P_IT_OUTPUT-RAST8 = P_IT_BSID2-WRBTR * ( 1 / LV_UKURS ).
*         ENDIF.
          ENDIF.
*     End   of insert MOD-013
        ENDIF.
* End   of insert MOD-016
        ENDIF.
      ELSE.
      CLEAR : lv_ukurs1 , lv_ukurs.
      SELECT SINGLE ukurs INTO lv_ukurs FROM tcurr
                       WHERE kurst = 'EURV'
                         AND fcurr = p_it_bsid2-waers
                         AND tcurr = 'EUR'.
      if sy-subrc = 0.
      SELECT SINGLE ukurs INTO lv_ukurs1 FROM tcurr
                       WHERE kurst = 'EURV'
                         AND fcurr = lv_currency
                         AND tcurr = 'EUR'.
      if sy-subrc = 0.
        lv_days_overdue = p_p_keydat - p_it_bsid2-netdt.

       IF lv_ukurs1 IS NOT INITIAL.
        IF lv_days_overdue <= 0.
          p_it_output-rast1 = p_it_bsid2-wrbtr * ( 1 / lv_ukurs1 ) *
          lv_ukurs.

        ELSEIF lv_days_overdue <= p_last_2.

          p_it_output-rast2 = p_it_bsid2-wrbtr * ( 1 / lv_ukurs1 ) *
          lv_ukurs.
        ELSEIF lv_days_overdue <= p_last_3.
          p_it_output-rast3 = p_it_bsid2-wrbtr * ( 1 / lv_ukurs1 ) *
          lv_ukurs.
        ELSEIF lv_days_overdue <= p_last_4.
          p_it_output-rast4 = p_it_bsid2-wrbtr * ( 1 / lv_ukurs1 ) *
          lv_ukurs.
        ELSEIF lv_days_overdue <= p_last_5.
          p_it_output-rast5 = p_it_bsid2-wrbtr * ( 1 / lv_ukurs1 ) *
          lv_ukurs.
* Begin of insert MOD-010
        ELSEIF lv_days_overdue <= p_last_6.
          p_it_output-rast6 = p_it_bsid2-wrbtr * ( 1 / lv_ukurs1 ) *
          lv_ukurs.
* End of insert MOD-010
        ELSE.
* Begin of change MOD-010
           p_it_output-rast7 = p_it_bsid2-wrbtr * ( 1 / lv_ukurs1 ) *
*          p_it_output-rast6 = p_it_bsid2-wrbtr * ( 1 / lv_ukurs1 ) *
          lv_ukurs.
* End of change MOD-010

        ENDIF.
        ENDIF.
      endif.
      endif.

      ENDIF.

    ENDIF.
*>>>>.END OF MOD-005 EXTUVE

* Begin of insert MOD-008
* Begin of change MOD-010
* p_it_output-rast_tot = p_it_output-rast1 + p_it_output-rast2 + p_it_output-rast3 + p_it_output-rast4 + p_it_output-rast5 + p_it_output-rast6.
* Begin of insert MOD-013
* p_it_output-rast_tot = p_it_output-rast1 + p_it_output-rast2 + p_it_output-rast3 + p_it_output-rast4 + p_it_output-rast5 + p_it_output-rast6 + p_it_output-rast7.

 P_IT_OUTPUT-RAST_TOT = P_IT_OUTPUT-RAST1 + P_IT_OUTPUT-RAST2 + P_IT_OUTPUT-RAST3 + P_IT_OUTPUT-RAST4 + P_IT_OUTPUT-RAST5 + P_IT_OUTPUT-RAST6 + P_IT_OUTPUT-RAST7 + P_IT_OUTPUT-RAST8.

* End   of insert MOD-013
* Endof change MOD-010

   p_it_output-rast_tot2 = p_it_bsid2-wrbtr.

* End of insert MOD-008

*    ENDIF.

    READ TABLE  p_it_customers WITH KEY kunnr =  p_it_bsid2-kunnr.
    p_it_output-name1 = p_it_customers-name1.

* Begin of insert MOD-009
 CLEAR: lv_vkorg, lv_vtweg, lv_spart, lv_vbeln, lv_bzirk, lv_vkbur, lv_vkgrp, lv_xref2, lv_vbelv.

 lv_vbeln = p_it_bsid2-vbeln.
 if lv_vbeln is not initial.
  SELECT single vkorg vtweg spart bzirk FROM VBRK into (lv_vkorg, lv_vtweg, lv_spart, lv_bzirk)
    WHERE VBELN = lv_VBELN.
 endif.


*    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*   EXPORTING
*     input  = p_it_bsid2-xref2
*   IMPORTING
*     OUTPUT = lv_xref2.
*
* lv_vbeln = lv_xref2+2(10).
*Retrieve sales order
SELECT SINGLE VBELV into lv_vbelv
  FROM VBFA
  WHERE VBTYP_N in ('M', 'N', '5') and
        VBTYP_V = 'C' and
        VBELN =  lv_VBELN.
if sy-subrc <> 0.
 SELECT SINGLE VBELV into lv_vbelv
  FROM VBFA
  WHERE VBTYP_N in ('M', 'N', '5') and
        VBTYP_V = 'G' and
        VBELN =  lv_VBELN.
endif.

 if lv_vbelv is not initial.
 SELECT single vkorg vtweg spart vkgrp vkbur FROM VBAK into (lv_vkorg, lv_vtweg, lv_spart, lv_vkgrp, lv_vkbur)
   WHERE VBELN = lv_VBELV.
 endif.



 if not lv_vkorg is initial.
*  SELECT single bzirk vkbur vkgrp FROM KNVV into (lv_bzirk, lv_vkbur, lv_vkgrp)
*    WHERE kunnr = p_it_bsid2-kunnr AND
*          vkorg = lv_vkorg AND
*          vtweg = lv_vtweg AND
*          spart = lv_spart.

    p_it_output-vkorg = lv_vkorg.
    p_it_output-vtweg = lv_vtweg.
    p_it_output-spart = lv_spart.
    p_it_output-vkbur = lv_vkbur.
    p_it_output-vkgrp = lv_vkgrp.
    p_it_output-bzirk = lv_bzirk.
 endif.

* End of insert MOD-009

*Put the keydate
    p_it_output-keydate = p_keydat.
* Begin of insert MOD-016
*    APPEND p_it_output.
  IF NOT P_VKBUR IS INITIAL.
      IF P_IT_OUTPUT-VKBUR = P_VKBUR.
        APPEND p_it_output.
      ENDIF.
 ELSE.
        APPEND p_it_output.
 ENDIF.
* End of insert MOD-016
    CLEAR p_it_output.



  ENDLOOP.

  SORT p_it_output BY belnr.

*  LOOP AT p_it_output.
*
*    WRITE:/  p_it_output-belnr.
*
*  ENDLOOP.



ENDFORM.                    " calculate_due_ageing
*&---------------------------------------------------------------------*
*&      Form  get_last_due_dates
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_WA_LAST_2  text
*      <--P_WA_LAST_3  text
*      <--P_WA_LAST_4  text
*      <--P_WA_LAST_5  text
*----------------------------------------------------------------------*
FORM get_last_due_dates  CHANGING p_wa_last_2
                                  p_wa_last_3
                                  p_wa_last_4
                                  p_wa_last_5
* Begin of insert MOD-010
                                  p_wa_last_6.
* End of insert MOD-010

  SEARCH rastbis2 FOR '-'.
  MOVE rastbis2+sy-fdpos TO p_wa_last_2.


  SEARCH rastbis3 FOR '-'.
  MOVE rastbis3+sy-fdpos TO p_wa_last_3.


  SEARCH rastbis4 FOR '-'.
  MOVE rastbis4+sy-fdpos TO p_wa_last_4.


  SEARCH rastbis5 FOR '-'.
  MOVE rastbis5+sy-fdpos TO p_wa_last_5.

* Begin of insert MOD-010
  SEARCH rastbis6 FOR '-'.
  MOVE rastbis6+sy-fdpos TO p_wa_last_6.
* End of insert MOD-010







ENDFORM.                    " get_last_due_dates
*&---------------------------------------------------------------------*
*&      Form  find_customer_names
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_CUSTOMERS  text
*      -->P_IT_CUSTOMERS2  text
*----------------------------------------------------------------------*
FORM find_customer_names  TABLES   p_it_customers STRUCTURE wa_customers
                                  p_it_customers2 STRUCTURE wa_customers
                                  p_it_bsid STRUCTURE it_bsid.

  LOOP AT p_it_bsid.

    p_it_customers-kunnr = p_it_bsid-kunnr.

    APPEND p_it_customers.

  ENDLOOP.

  SORT p_it_customers.

  DELETE ADJACENT DUPLICATES FROM p_it_customers.

  SELECT kunnr name1
  INTO CORRESPONDING FIELDS OF TABLE p_it_customers2
  FROM kna1
  FOR ALL ENTRIES IN p_it_customers
  WHERE kunnr = p_it_customers-kunnr.




ENDFORM.                    " find_customer_names
*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0200 OUTPUT.
  SET PF-STATUS '200'.
  SET TITLEBAR '200'.

ENDMODULE.                 " STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  PREPARE_ALV  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE prepare_alv OUTPUT.

  PERFORM prepare_alv.

ENDMODULE.                 " PREPARE_ALV  OUTPUT
*&---------------------------------------------------------------------*
*&      Form  prepare_alv
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM prepare_alv .

  IF my_container IS INITIAL.
*create the container
    CREATE OBJECT my_container
      EXPORTING
          repid           =  sy-repid
          dynnr           =  sy-dynnr
          lifetime        =  cntl_lifetime_dynpro
*          ratio           =  90.
          extension       =  5000.

*create the ALV control
    CREATE OBJECT my_alv
      EXPORTING
        i_parent = my_container.
*Set parameters regarding layout, etc.
    wa_variant-report = sy-cprog.
    wa_layout-no_toolbar = ' '.
*create the fieldcatalog e.g. which fields to display
    PERFORM create_fieldcat.
*display the data in the ALV control
    my_alv->set_table_for_first_display(
                EXPORTING
                    i_save        =  'A'
                    is_variant    =  wa_variant
                    is_layout     =  wa_layout
                CHANGING
                    it_outtab         =  it_output
                    it_fieldcatalog   =  it_fieldcat ).

**Set thet event handler
**    set handler lcl_event_handler=>on_hotspot_click
**                    for my_alv.

  ELSE.
*If ALV control already exists, refresh data without changing the layout
*-> 'soft'
    my_alv->refresh_table_display(
      EXPORTING
          i_soft_refresh  =  'X' ).
  ENDIF.




ENDFORM.                    " prepare_alv
*&---------------------------------------------------------------------*
*&      Form  create_fieldcat
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_fieldcat .

  DATA: lv_text(30).
*TYPES : BEGIN OF t_output,
*   prctr LIKE bfod_a-prctr,
*   kunnr LIKE bsad-kunnr,
*   name1 LIKE kna1-name1,
*   blart LIKE bsid-blart,
*   belnr LIKE bfod_a-belnr,
*   bldat LIKE bsad-bldat,
*   netdt LIKE bsad-bldat,
*   rast1 LIKE bsid-dmbtr,
*   rast2 LIKE bsid-dmbtr,
*   rast3 LIKE bsid-dmbtr,
*   rast4 LIKE bsid-dmbtr,
*   rast5 LIKE bsid-dmbtr,
*   rast6 LIKE bsid-dmbtr,
*
*
*   END OF t_output.


*  CLEAR: wa_fieldcat.
*  wa_fieldcat-fieldname = 'PRCTR'.
**  WA_FIELDCAT-HOTSPOT = 'X'.
*  wa_fieldcat-outputlen = 10.
*  wa_fieldcat-coltext = text-c01.
**  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
*  wa_fieldcat-fix_column = 'X'.
*  wa_fieldcat-emphasize = 'X'.

*  APPEND wa_fieldcat TO it_fieldcat.

  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'KUNNR'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 11.
  wa_fieldcat-coltext =  text-c02.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.


  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'NAME1'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 20.
  wa_fieldcat-coltext =  text-c03..
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.

* Begin of insert MOD-009
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'VKORG'.
  wa_fieldcat-outputlen = 4.
  wa_fieldcat-coltext =  text-c20.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.
  APPEND wa_fieldcat TO it_fieldcat.

  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'VTWEG'.
  wa_fieldcat-outputlen = 2.
  wa_fieldcat-coltext =  text-c21.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.
  APPEND wa_fieldcat TO it_fieldcat.

  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'SPART'.
  wa_fieldcat-outputlen = 2.
  wa_fieldcat-coltext =  text-c22.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.
  APPEND wa_fieldcat TO it_fieldcat.

  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'BZIRK'.
  wa_fieldcat-outputlen = 6.
  wa_fieldcat-coltext =  text-c23.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.
  APPEND wa_fieldcat TO it_fieldcat.

  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'VKBUR'.
  wa_fieldcat-outputlen = 4.
  wa_fieldcat-coltext =  text-c24.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.
  APPEND wa_fieldcat TO it_fieldcat.

  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'VKGRP'.
  wa_fieldcat-outputlen = 3.
  wa_fieldcat-coltext =  text-c25.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.
  APPEND wa_fieldcat TO it_fieldcat.
* End of insert MOD-009

  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'BLART'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 2.
  wa_fieldcat-coltext =  text-c04.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.


  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'BELNR'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 10.
  wa_fieldcat-coltext =  text-c05.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.
  .

* begin of insert MOD-006
*------ Doc. currency---------------
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'DWAERS'.
  wa_fieldcat-outputlen = 5.
  wa_fieldcat-coltext =  text-c16.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.

*------ Comp. currency -----------
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'CWAERS'.
  wa_fieldcat-outputlen = 5.
  wa_fieldcat-coltext =  text-c17.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.

*------ Exchange rate ------------
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'KURSF'.
  wa_fieldcat-outputlen = 12.
  wa_fieldcat-coltext =  text-c18.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.
* end of insert MOD-006

  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'BLDAT'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 10.
  wa_fieldcat-coltext =  text-c06.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.


  .       CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'NETDT'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 10.
  wa_fieldcat-coltext =  text-c07.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.


  .       CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'KEYDATE'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 10.
  wa_fieldcat-coltext =  text-c09.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.


  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'RAST1'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 15.
  wa_fieldcat-coltext =  text-c08.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.

  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'RAST2'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 15.

  CONCATENATE text-005 rastbis2 INTO lv_text SEPARATED BY space.
  wa_fieldcat-coltext = lv_text.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.


  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'RAST3'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 15.

  CONCATENATE  text-005 rastbis3 INTO lv_text SEPARATED BY space.
  wa_fieldcat-coltext = lv_text.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.


  APPEND wa_fieldcat TO it_fieldcat.



  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'RAST4'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 15.

  CONCATENATE  text-005 rastbis4 INTO lv_text SEPARATED BY space.
  wa_fieldcat-coltext = lv_text.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.


  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'RAST5'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 15.

  CONCATENATE  text-005 rastbis5 INTO lv_text SEPARATED BY space.
  wa_fieldcat-coltext = lv_text.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.

* Begin of insert MOD-010
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'RAST6'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 15.

    CONCATENATE  text-005 rastbis6 INTO lv_text SEPARATED BY space.
  wa_fieldcat-coltext = lv_text.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.
* End of insert MOD-010

  CLEAR wa_fieldcat.
* Begin of insert MOD-010
*  wa_fieldcat-fieldname = 'RAST6'.
  wa_fieldcat-fieldname = 'RAST7'.
* End of insert MOD-010
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 15.

  CONCATENATE  text-005 text-006 INTO lv_text SEPARATED BY space.
  wa_fieldcat-coltext = lv_text.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.

* Begin of insert MOD-013
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'RAST8'.
  wa_fieldcat-outputlen = 15.
  wa_fieldcat-coltext = text-009.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.
* End   of insert MOD-013

* Begin of insert MOD-008
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'RAST_TOT'.
  wa_fieldcat-outputlen = 15.
  wa_fieldcat-coltext =  text-c19.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.
  APPEND wa_fieldcat TO it_fieldcat.

  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'RAST_TOT2'.
  wa_fieldcat-outputlen = 15.
  wa_fieldcat-coltext =  text-c26.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.
  APPEND wa_fieldcat TO it_fieldcat.
* End of insert MOD-008

* begin of insertion MOD-001
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'SEGMENT'.
  wa_fieldcat-outputlen = 10.
  wa_fieldcat-coltext =  text-c10.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.
  APPEND wa_fieldcat TO it_fieldcat.
* end of insertion MOD-001

* Begin of insert MOD-013
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'RSTGR'.
  wa_fieldcat-outputlen = 15.
  wa_fieldcat-coltext = text-010.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.
* End   of insert MOD-013

* begin of insert MOD-006
*------ Billing doc. ---------------
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'VBELN'.
  wa_fieldcat-outputlen = 10.
  wa_fieldcat-coltext =  text-c11.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.

*------ Reference key 2 -----------
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'XREF2'.
  wa_fieldcat-outputlen = 12.
  wa_fieldcat-coltext =  text-c12.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.

*------ Reference from header ------
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'XBLNR2'.
  wa_fieldcat-outputlen = 16.
  wa_fieldcat-coltext =  text-c13.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.

*------ Invoice ref. ---------------
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'REBZG'.
  wa_fieldcat-outputlen = 10.
  wa_fieldcat-coltext =  text-c14.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.

*------ Baseline date ------------
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'ZFBDT'.
  wa_fieldcat-outputlen = 10.
  wa_fieldcat-coltext =  text-c15.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.
* end of insert MOD-006

ENDFORM.                    " create_fieldcat
*&---------------------------------------------------------------------*
*&      Module  EXIT_O200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE exit_o200 INPUT.


  CASE ok_code.

    WHEN 'BACK' OR 'CANCEL' OR 'EXIT'.

      LEAVE TO SCREEN 0.

  ENDCASE.




ENDMODULE.                 " EXIT_O200  INPUT
*&---------------------------------------------------------------------*
*&      Form  find_company_code_currency
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_WA_WAERS  text
*----------------------------------------------------------------------*
FORM find_company_code_currency  CHANGING p_wa_waers.

  SELECT SINGLE waers INTO wa_waers
  FROM t001
  WHERE bukrs EQ p_bukrs.

ENDFORM.                    " find_company_code_currency
*&---------------------------------------------------------------------*
*&      Form  FIND_PERIOD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_KEYDAT  text
*      <--P_WA_PERIOD  text
*      <--P_WA_GJAHR  text
*----------------------------------------------------------------------*
FORM find_period  USING    p_p_keydat
                  CHANGING p_wa_monat
                           p_wa_gjahr.

  SELECT SINGLE periv INTO wa_periv
  FROM t001
  WHERE bukrs = p_bukrs.

  CALL FUNCTION 'G_PERIOD_GET'
    EXPORTING
      company                              = p_bukrs
      date                                 = p_keydat
*   GLOBAL_COMPANY                       = ' '
*   LEDGER                               = ' '
      variant                              = wa_periv
    IMPORTING
*   ANZBP                                =
*   ANZSP                                =
      period                               = wa_period
      year                                 = p_wa_gjahr
*   VARIANT                              =
   EXCEPTIONS
     ledger_not_assigned_to_company       = 1
     period_not_defined                   = 2
     variant_not_defined                  = 3
     OTHERS                               = 4
            .
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ELSE.
    p_wa_monat = wa_period.


  ENDIF.





ENDFORM.                    " FIND_PERIOD
*&---------------------------------------------------------------------*
*&      Form  Check_Authorization
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_authorization .

  AUTHORITY-CHECK OBJECT 'F_KNA1_BUK'
                      ID 'BUKRS' FIELD p_bukrs
                      ID 'ACTVT' DUMMY.

  IF sy-subrc = 4.
*   No authorisation to display the data
    MESSAGE ID 'YSE_RENTAL' TYPE 'E' NUMBER '040' WITH p_bukrs.
  ELSEIF sy-subrc <> 0.
*   Error checking authorization.
    MESSAGE ID 'YSE_RENTAL' TYPE 'E' NUMBER '046'.
  ENDIF.

ENDFORM.                    " Check_Authorization
*&---------------------------------------------------------------------*
*&      Form  find_customers
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_CUSTOMERS2  text
*----------------------------------------------------------------------*
FORM find_customers  TABLES   p_it_customers2 STRUCTURE wa_customers.


  SELECT kunnr name1
    INTO CORRESPONDING FIELDS OF TABLE p_it_customers2
    FROM kna1
    WHERE kunnr IN s_kunnr
      AND ktokd IN s_ktokd.


ENDFORM.                    " find_customers
*&---------------------------------------------------------------------*
*&      Form  alv_background
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM alv_background .
  wa_variant-report = sy-cprog.
  wa_layout-no_toolbar = ' '.
*create the fieldcatalog e.g. which fields to display
*    PERFORM create_fieldcat.
  PERFORM create_fieldcat_reuse.
*display the data in the ALV control



*    my_alv->set_table_for_first_display(
*                EXPORTING
*                    i_save        =  'A'
*                    is_variant    =  wa_variant
*                    is_layout     =  wa_layout
*                CHANGING
*                    it_outtab         =  it_output
*                    it_fieldcatalog   =  it_fieldcat ).
  w_callback_program    = sy-repid.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
       EXPORTING
*           i_interface_check           = ' '
*           i_bypassing_buffer          =
*           i_buffer_active             = ' '
            i_callback_program          = w_callback_program
*           i_callback_program          = 'YSE_SD_COMMISSION_SALESREP'
*           i_callback_pf_status_set    = ' '
*            i_callback_user_command     = w_callback_subroutine
*           i_callback_top_of_page      = ' '
*           i_callback_html_top_of_page = ' '
*           i_callback_html_end_of_list = ' '
*           i_structure_name            =
*           i_background_id             = ' '
            i_grid_title                = 'Extraction to BW'
*           i_grid_settings             =
*            is_layout                   = gs_layout
            it_fieldcat                 = it_fieldcat_reuse
*           it_excluding                =
*           it_special_groups           =
*            it_sort                     = it_sort
*           it_filter                   =
*           is_sel_hide                 =
            i_default                   = 'X'
            i_save                      = 'A'
            is_variant                  = wa_variant
*           it_events                   =
*           it_event_exit               =
*           is_print                    =
*           is_reprep_id                =
            i_screen_start_column       = 0
            i_screen_start_line         = 0
            i_screen_end_column         = 0
            i_screen_end_line           = 0
*           it_alv_graphics             =
*           it_add_fieldcat             =
*           it_hyperlink                =
*      importing
*           e_exit_caused_by_caller     =
*           es_exit_caused_by_user      =
       TABLES
            t_outtab                    = it_output
       EXCEPTIONS
            program_error               = 1
            OTHERS                      = 2.
  IF sy-subrc NE 0.
*   message id sy-msgid type sy-msgty number sy-msgno
*           with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " alv_background
*&---------------------------------------------------------------------*
*&      Form  create_fieldcat_reuse
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_fieldcat_reuse .
  DATA: lv_text(30).
*TYPES : BEGIN OF t_output,
*   prctr LIKE bfod_a-prctr,
*   kunnr LIKE bsad-kunnr,
*   name1 LIKE kna1-name1,
*   blart LIKE bsid-blart,
*   belnr LIKE bfod_a-belnr,
*   bldat LIKE bsad-bldat,
*   netdt LIKE bsad-bldat,
*   rast1 LIKE bsid-dmbtr,
*   rast2 LIKE bsid-dmbtr,
*   rast3 LIKE bsid-dmbtr,
*   rast4 LIKE bsid-dmbtr,
*   rast5 LIKE bsid-dmbtr,
*   rast6 LIKE bsid-dmbtr,
*
*
*   END OF t_output.


*  CLEAR: wa_fieldcat.
*  wa_fieldcat-fieldname = 'PRCTR'.
**  WA_FIELDCAT-HOTSPOT = 'X'.
*  wa_fieldcat-outputlen = 10.
*  wa_fieldcat-coltext = text-c01.
**  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
*  wa_fieldcat-fix_column = 'X'.
*  wa_fieldcat-emphasize = 'X'.
*
*  APPEND wa_fieldcat TO it_fieldcat.

  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'KUNNR'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 10.
  wa_fieldcat-coltext =  text-c02.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.


  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'NAME1'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 20.
  wa_fieldcat-coltext =  text-c03..
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.



  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'BLART'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 2.
  wa_fieldcat-coltext =  text-c04.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.


  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'BELNR'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 10.
  wa_fieldcat-coltext =  text-c05.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.
  .

  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'BLDAT'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 10.
  wa_fieldcat-coltext =  text-c06.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.

* begin of insertion MOD-001
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'SEGMENT'.
  wa_fieldcat-outputlen = 10.
  wa_fieldcat-coltext =  text-c10.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.
  APPEND wa_fieldcat TO it_fieldcat.
* end of insertion MOD-001

  .       CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'NETDT'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 10.
  wa_fieldcat-coltext =  text-c07.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.



  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'RAST1'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 15.
  wa_fieldcat-coltext =  text-c08.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.

  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'RAST2'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 15.

  CONCATENATE text-005 rastbis2 INTO lv_text SEPARATED BY space.
  wa_fieldcat-coltext = lv_text.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.


  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'RAST3'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 15.

  CONCATENATE  text-005 rastbis3 INTO lv_text SEPARATED BY space.
  wa_fieldcat-coltext = lv_text.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  MOVE-CORRESPONDING wa_fieldcat TO wa_fieldcat_reuse.
  APPEND wa_fieldcat_reuse TO it_fieldcat_reuse.



  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname = 'RAST4'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 15.

  CONCATENATE  text-005 rastbis4 INTO lv_text SEPARATED BY space.
  wa_fieldcat-coltext = lv_text.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  APPEND wa_fieldcat TO it_fieldcat.


  CLEAR: wa_fieldcat.
  wa_fieldcat-fieldname = 'RAST5'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 15.

  CONCATENATE  text-005 rastbis5 INTO lv_text SEPARATED BY space.
  wa_fieldcat-coltext = lv_text.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  CLEAR wa_fieldcat_reuse.
  MOVE-CORRESPONDING wa_fieldcat TO wa_fieldcat_reuse.
  APPEND wa_fieldcat_reuse TO it_fieldcat_reuse.







  CLEAR: wa_fieldcat.
  wa_fieldcat-fieldname = 'RAST6'.
*  WA_FIELDCAT-HOTSPOT = 'X'.
  wa_fieldcat-outputlen = 15.

  CONCATENATE  text-005 text-006 INTO lv_text SEPARATED BY space.
  wa_fieldcat-coltext = lv_text.
*  WA_FIELDCAT-TOOLTIP = 'Click on equipment to see details'.
  wa_fieldcat-fix_column = 'X'.
  wa_fieldcat-emphasize = 'X'.

  CLEAR wa_fieldcat_reuse.
  MOVE-CORRESPONDING wa_fieldcat TO wa_fieldcat_reuse.
  APPEND wa_fieldcat_reuse TO it_fieldcat_reuse.

ENDFORM.                    " create_fieldcat_reuse
*&---------------------------------------------------------------------*
*&      Form  get_allocated
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_OUTPUT  text
*----------------------------------------------------------------------*
* begin of deletion MOD-001
*FORM GET_ALLOCATED  TABLES   P_IT_OUTPUT STRUCTURE WA_OUTPUT.
*  "Insert correct name for <...>.
*
**Get the allocated data
*  SELECT RPRCTR SPRCTR HSL FROM GLPCA INTO TABLE IT_GLPCA
*                   WHERE rbukrs eq p_bukrs and
*                         RRCTY IN S_RRCTY AND
*                         RVERS EQ P_RVERS AND
*                         KOKRS EQ P_KOKRS AND
*                         RYEAR EQ P_RYEAR AND
*                         POPER IN S_POPER AND
*                         RPRCTR IN S_RPRCTR AND
*                         RACCT IN S_RACCT AND
*                         ACTIV EQ P_ACTIV.
*
*  IT_GLPCA_1[] = IT_GLPCA[].
**Now get totals for both the receiving and sender profit center
*  SORT IT_GLPCA BY RPRCTR.
*  LOOP AT IT_GLPCA.
*    CLEAR WA_GLPCA.
*    WA_GLPCA = IT_GLPCA.
*
*    AT END OF RPRCTR.
*      FREE: IT_RPRCTR, IT_SPRCTR, IT_OUTPUT_COLL.
*      CLEAR WA_STRUC_PERC.
**Sum per Sending profit center
*      LOOP AT IT_GLPCA_1
*                  WHERE RPRCTR EQ WA_GLPCA-RPRCTR.
*        CLEAR IT_RPRCTR.
*        CLEAR LV_PRCTR.
*        WRITE IT_GLPCA_1-RPRCTR TO LV_PRCTR LEFT-JUSTIFIED.
*        SHIFT LV_PRCTR LEFT DELETING LEADING 0.
**Because for numberic there are zeros and when dummy not
*        IT_RPRCTR-RPRCTR = LV_PRCTR(4).
*        IT_RPRCTR-HSL = IT_GLPCA_1-HSL.
*        COLLECT IT_RPRCTR.
**Sum per receiving profit center
*        CLEAR IT_SPRCTR.
*        CLEAR LV_PRCTR.
*        WRITE IT_GLPCA_1-SPRCTR TO LV_PRCTR LEFT-JUSTIFIED.
*        SHIFT LV_PRCTR LEFT DELETING LEADING 0.
**Because for numberic there are zeros and when dummy not
*        IT_SPRCTR-SPRCTR = LV_PRCTR.
*        IT_SPRCTR-HSL = IT_GLPCA_1-HSL.
*        COLLECT IT_SPRCTR.
*      ENDLOOP.
**Now get the percentage that we need to work with
*      CLEAR LV_PRCTR.
*      WRITE IT_GLPCA-RPRCTR TO LV_PRCTR LEFT-JUSTIFIED.
*      SHIFT LV_PRCTR LEFT DELETING LEADING 0.
**Because for numberic there are zeros and when dummy not
*      LOOP AT P_IT_OUTPUT INTO WA_OUTPUT WHERE PRCTR EQ LV_PRCTR(4).
*        IT_OUTPUT_COLL-PRCTR = lv_PRCTR(4).
*        IT_OUTPUT_COLL-RAST1 = WA_OUTPUT-RAST1.
*        IT_OUTPUT_COLL-RAST2 = WA_OUTPUT-RAST2.
*        IT_OUTPUT_COLL-RAST3 = WA_OUTPUT-RAST3.
*        IT_OUTPUT_COLL-RAST4 = WA_OUTPUT-RAST4.
*        IT_OUTPUT_COLL-RAST5 = WA_OUTPUT-RAST5.
*        IT_OUTPUT_COLL-RAST6 = WA_OUTPUT-RAST6.
*        COLLECT IT_OUTPUT_COLL.
*      ENDLOOP.
*      READ TABLE IT_OUTPUT_COLL WITH KEY PRCTR = LV_PRCTR(4).
*      IF SY-SUBRC EQ 0.
**There should only be 1 line
**Calculate the sum of rast 1 tot 6
*        WA_STRUC_PERC-RAST_TOT = IT_OUTPUT_COLL-RAST1 +
*                                IT_OUTPUT_COLL-RAST2 +
*                                IT_OUTPUT_COLL-RAST3 +
*                                IT_OUTPUT_COLL-RAST4 +
*                                IT_OUTPUT_COLL-RAST5 +
*                                IT_OUTPUT_COLL-RAST6.
*      ENDIF.
*      IF NOT WA_STRUC_PERC-RAST_TOT IS INITIAL.
*WA_STRUC_PERC-RAST1 = IT_OUTPUT_COLL-RAST1 / WA_STRUC_PERC-RAST_TOT *
*100.
*WA_STRUC_PERC-RAST2 = IT_OUTPUT_COLL-RAST2 / WA_STRUC_PERC-RAST_TOT *
*100.
*WA_STRUC_PERC-RAST3 = IT_OUTPUT_COLL-RAST3 / WA_STRUC_PERC-RAST_TOT *
*100.
*WA_STRUC_PERC-RAST4 = IT_OUTPUT_COLL-RAST4 / WA_STRUC_PERC-RAST_TOT *
*100.
*WA_STRUC_PERC-RAST5 = IT_OUTPUT_COLL-RAST5 / WA_STRUC_PERC-RAST_TOT *
*100.
*WA_STRUC_PERC-RAST6 = IT_OUTPUT_COLL-RAST6 / WA_STRUC_PERC-RAST_TOT *
*100.
*      ENDIF.
**Add lines to IT_OUTPUT for the sending profit center
*      LOOP AT IT_RPRCTR.
*        CLEAR WA_OUTPUT.
*        CLEAR LV_PRCTR.
*        WRITE IT_RPRCTR-RPRCTR TO LV_PRCTR LEFT-JUSTIFIED.
*        SHIFT LV_PRCTR LEFT DELETING LEADING 0.
**Because for numberic there are zeros and when dummy not
**All the other keys are put in at the end of the program
*        WA_OUTPUT-PRCTR = LV_PRCTR(4).
*        WA_COUNT_BELNR = WA_COUNT_BELNR + 1.
*        CONCATENATE 'AL' WA_COUNT_BELNR INTO WA_OUTPUT-BELNR.
*        WA_OUTPUT-RAST1 = IT_RPRCTR-HSL * WA_STRUC_PERC-RAST1 / 100.
*        WA_OUTPUT-RAST2 = IT_RPRCTR-HSL * WA_STRUC_PERC-RAST2 / 100.
*        WA_OUTPUT-RAST3 = IT_RPRCTR-HSL * WA_STRUC_PERC-RAST3 / 100.
*        WA_OUTPUT-RAST4 = IT_RPRCTR-HSL * WA_STRUC_PERC-RAST4 / 100.
*        WA_OUTPUT-RAST5 = IT_RPRCTR-HSL * WA_STRUC_PERC-RAST5 / 100.
*        WA_OUTPUT-RAST6 = IT_RPRCTR-HSL * WA_STRUC_PERC-RAST6 / 100.
**Put the keydate
*        WA_OUTPUT-KEYDATE = P_KEYDAT.
*        APPEND WA_OUTPUT TO P_IT_OUTPUT.
*      ENDLOOP.
**======================================================
**Add lines to IT_OUTPUT for the receiving profit center
*      LOOP AT IT_SPRCTR.
*        CLEAR WA_OUTPUT.
**All the other keys are put in at the end of the program
*        CLEAR LV_PRCTR.
*        WRITE IT_SPRCTR-SPRCTR TO LV_PRCTR LEFT-JUSTIFIED.
*        SHIFT LV_PRCTR LEFT DELETING LEADING 0.
*        WA_OUTPUT-PRCTR = LV_PRCTR(4).
*        WA_COUNT_BELNR = WA_COUNT_BELNR + 1.
*        CONCATENATE 'AL' WA_COUNT_BELNR INTO WA_OUTPUT-BELNR.
**Reverse the sign of the values of the receiving profit center
*WA_OUTPUT-RAST1 = - ( IT_SPRCTR-HSL * WA_STRUC_PERC-RAST1 / 100 ).
*WA_OUTPUT-RAST2 = - ( IT_SPRCTR-HSL * WA_STRUC_PERC-RAST2 / 100 ).
*WA_OUTPUT-RAST3 = - ( IT_SPRCTR-HSL * WA_STRUC_PERC-RAST3 / 100 ).
*WA_OUTPUT-RAST4 = - ( IT_SPRCTR-HSL * WA_STRUC_PERC-RAST4 / 100 ).
*WA_OUTPUT-RAST5 = - ( IT_SPRCTR-HSL * WA_STRUC_PERC-RAST5 / 100 ).
*WA_OUTPUT-RAST6 = - ( IT_SPRCTR-HSL * WA_STRUC_PERC-RAST6 / 100 ).
**Put the keydate
*        WA_OUTPUT-KEYDATE = P_KEYDAT.
*        APPEND WA_OUTPUT TO P_IT_OUTPUT.
*      ENDLOOP.
**So the lines which we have added here neutralise each other for RAST1
*to 6
*
*    ENDAT.
*  ENDLOOP.
*
*ENDFORM.                    " get_allocated
* end of deletion MOD-001

*** Begin MOD-008
FORM reposting  TABLES it_summ.

data: lv_account type saknr,
      lv_date type d,
      lv_wrbtr type char16,
      lv_rast type t_summ-rast1,
      lv_first type c,
      lv_newbs(2) type c.
* 1st posting
  refresh: i_bdcdata,
           gt_err.

* Post document: Header Data
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0100'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  clear lv_date.
  write p_postd to lv_date.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BKPF-BLDAT'  lv_date
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BKPF-BUDAT'  lv_date
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BKPF-BLART'  'SA'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BKPF-BUKRS' p_bukrs
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  clear lv_waers.
  SELECT SINGLE WAERS FROM T001 INTO lv_waers
    WHERE BUKRS = p_bukrs.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BKPF-WAERS'  lv_waers
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  clear lv_date.
  write p_keydat to lv_date.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BKPF-XBLNR'  lv_date
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BKPF-BKTXT'  'AR Ageing-Reclass'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


lv_first = 'Y'.

  LOOP AT it_summ into wa_summ.


     if wa_summ-rast1 is not initial or wa_summ-rast2 is not initial or
        wa_summ-rast3 is not initial or wa_summ-rast4 is not initial or
        wa_summ-rast5 is not initial or wa_summ-rast6 is not initial
* Begin of change MOD-015
        or wa_summ-rast8 is not initial.
* End   of change MOD-015

***************
if wa_summ-rast1 is not initial.
if lv_first = 'N'.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0330'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.
if wa_summ-rast1 > 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '40'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
elseif wa_summ-rast1 < 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '50'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.


  lv_account = '1500901'.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWKO' lv_account
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '/00'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
* Item 1

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0300' 'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  clear lv_wrbtr.
  clear lv_rast.
  lv_rast = abs( wa_summ-rast1 ).
  write lv_rast to lv_wrbtr.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BSEG-WRBTR'  lv_wrbtr
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ZK'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


* Coding block
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPLKACB'  '0002'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'COBL-SEGMENT'  wa_summ-segment
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ENTE'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
lv_first = 'N'.
endif.
***
if wa_summ-rast2 is not initial.
if lv_first = 'N'.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0330'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.
if wa_summ-rast2 > 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '40'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
elseif wa_summ-rast2 < 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '50'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.


  lv_account = '1501901'.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWKO' lv_account
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '/00'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Item 1

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0300' 'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  clear lv_wrbtr.
  clear lv_rast.
  lv_rast = abs( wa_summ-rast2 ).
  write lv_rast to lv_wrbtr.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BSEG-WRBTR'  lv_wrbtr
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ZK'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Coding block
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPLKACB'  '0002'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'COBL-SEGMENT'  wa_summ-segment
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ENTE'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

lv_first = 'N'.
endif.
***
if wa_summ-rast3 is not initial.
if lv_first = 'N'.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0330'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.
if wa_summ-rast3 > 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '40'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
elseif wa_summ-rast3 < 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '50'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.


  lv_account = '1502901'.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWKO' lv_account
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '/00'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
* Item 1

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0300' 'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  clear lv_wrbtr.
  clear lv_rast.
  lv_rast = abs( wa_summ-rast3 ).
  write lv_rast to lv_wrbtr.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BSEG-WRBTR'  lv_wrbtr
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ZK'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Coding block
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPLKACB'  '0002'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'COBL-SEGMENT'  wa_summ-segment
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ENTE'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
lv_first = 'N'.
endif.
***
if wa_summ-rast4 is not initial.
if lv_first = 'N'.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0330'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.
if wa_summ-rast4 > 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '40'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
elseif wa_summ-rast4 < 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '50'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.


  lv_account = '1503901'.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWKO' lv_account
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '/00'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Item 1

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0300' 'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  clear lv_wrbtr.
  clear lv_rast.
  lv_rast = abs( wa_summ-rast4 ).
  write lv_rast to lv_wrbtr.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BSEG-WRBTR'  lv_wrbtr
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ZK'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Coding block
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPLKACB'  '0002'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'COBL-SEGMENT'  wa_summ-segment
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ENTE'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
lv_first = 'N'.
endif.
***


if wa_summ-rast5 is not initial
* Begin of change MOD-015
    or wa_summ-rast6 is not initial.
* End of change MOD-015
if lv_first = 'N'.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0330'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.

** Begin of change MOD-017
*WA_SUMM-RAST6 = ABS( WA_SUMM-RAST6 ) .
** End of change MOD-017
*     Begin of change MOD-015
      wa_summ-rast5 =  wa_summ-rast5 + wa_summ-rast6 .
*     End of change MOD-015

if wa_summ-rast5 > 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '40'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
elseif wa_summ-rast5 < 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '50'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.

  lv_account = '1504901'.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWKO' lv_account
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '/00'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
* Item 1

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0300' 'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  clear lv_wrbtr.
  clear lv_rast.
** Begin of change MOD-017
** Begin of change MOD-015
  lv_rast = abs( wa_summ-rast5 ).
*   LV_RAST = ABS( WA_SUMM-RAST5 ) + ABS( WA_SUMM-RAST6 ).
** End of change MOD-015
*    LV_RAST = ABS( WA_SUMM-RAST5 ).
** End of change MOD-017
  write lv_rast to lv_wrbtr.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BSEG-WRBTR'  lv_wrbtr
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ZK'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


* Coding block
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPLKACB'  '0002'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'COBL-SEGMENT'  wa_summ-segment
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ENTE'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
lv_first = 'N'.
endif.
***

* Begin of change MOD-015
*if wa_summ-rast6 is not initial.
if wa_summ-rast8 is not initial.
* End of change MOD-015
if lv_first = 'N'.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0330' 'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.
* Begin of change MOD-015
*if wa_summ-rast6 > 0.
if wa_summ-rast8 > 0.
* End of change MOD-015
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '40'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
* Begin of change MOD-015
*elseif wa_summ-rast6 < 0.
elseif wa_summ-rast8 < 0.
* End of change MOD-015
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '50'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.


  lv_account = '1505901'.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWKO' lv_account
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '/00'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
* Item 1

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0300' 'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  clear lv_wrbtr.
  clear lv_rast.
* Begin of change MOD-015
*  lv_rast = abs( wa_summ-rast6 ).
   LV_RAST = ABS( WA_SUMM-RAST8 ).
* End of change MOD-015
  write lv_rast to lv_wrbtr.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BSEG-WRBTR'  lv_wrbtr
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ZK'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Coding block
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPLKACB'  '0002'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'COBL-SEGMENT'  wa_summ-segment
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ENTE'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
lv_first = 'N'.
endif.


******************


*  write wa_yse_round_post-BLDAT to lv_bldat.
*  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*       USING    ''  ''  ''  'BSEG-ZFBDT'  lv_bldat
*          CHANGING struct_bdcdata.
*  APPEND struct_bdcdata  TO i_bdcdata.
*  CLEAR  struct_bdcdata.

**************************************************************
 clear lv_wrbtr.
 clear lv_rast.
 clear lv_newbs.
* Begin of change MOD-017
* Begin of change MOD-015
* lv_rast = wa_summ-rast1 + wa_summ-rast2 + wa_summ-rast3 + wa_summ-rast4 + wa_summ-rast5 + wa_summ-rast6.
* LV_RAST = WA_SUMM-RAST1 + WA_SUMM-RAST2 + WA_SUMM-RAST3 + WA_SUMM-RAST4 + WA_SUMM-RAST5 + WA_SUMM-RAST6 + WA_SUMM-RAST8.
* End of change MOD-015
 LV_RAST = WA_SUMM-RAST1 + WA_SUMM-RAST2 + WA_SUMM-RAST3 + WA_SUMM-RAST4 + WA_SUMM-RAST5 + WA_SUMM-RAST8.
* End of change MOD-017
 if lv_rast > 0.
   lv_newbs = '50'.
 else.
   lv_newbs = '40'.
 endif.
 lv_rast =  abs( lv_rast ).
 write lv_rast to lv_wrbtr.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0330'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  lv_newbs
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWKO'  '1511910'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '/00'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Add G/L Account Item
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0300'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


 PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BSEG-WRBTR'  lv_wrbtr
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ZK'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Coding block
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPLKACB'  '0002'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'COBL-SEGMENT'  wa_summ-segment
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ENTE'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

   endif.

  ENDLOOP.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0330'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


* PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*       USING    ''  ''  ''  'BSEG-WRBTR'  lv_wrbtr
*          CHANGING struct_bdcdata.
*  APPEND struct_bdcdata  TO i_bdcdata.
*  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=BU'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


* Coding block
*  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*           USING    'SAPLKACB'  '0002'  'X'  ''   ''
*           CHANGING struct_bdcdata.
*  APPEND struct_bdcdata  TO i_bdcdata.
*  CLEAR  struct_bdcdata.
*
*  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*       USING    ''  ''  ''  'COBL-SEGMENT'  wa_summ-segment
*          CHANGING struct_bdcdata.
*  APPEND struct_bdcdata  TO i_bdcdata.
*  CLEAR  struct_bdcdata.
*
*  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*           USING    ''  ''  ''  'BDC_OKCODE'  '=ENTE'
*           CHANGING struct_bdcdata.
*  APPEND struct_bdcdata  TO i_bdcdata.
*  CLEAR  struct_bdcdata.
  gv_error = 'N'.
  call transaction 'FB01' using i_bdcdata
  update 'S' mode gv_mode messages into gt_err.
   if sy-subrc = 0.
       gv_error = 'N'.
       LOOP AT gt_err.
         if gt_err-msgtyp = 'A' or gt_err-msgtyp = 'E'.
           gv_error = 'Y'.
         endif.
       ENDLOOP.
   else.
       gv_error = 'Y'.
   endif.



ENDFORM.

FORM reverse_reposting  TABLES it_summ.

data: lv_account type saknr,
      lv_date type d,
      lv_wrbtr type char16,
      lv_rast type t_summ-rast1,
      lv_first type c,
      lv_newbs(2) type c.
* 1st posting
  refresh: i_bdcdata,
           gt_err.

* Post document: Header Data
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0100'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  clear lv_date.
  write p_rpostd to lv_date.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BKPF-BLDAT'  lv_date
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BKPF-BUDAT'  lv_date
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BKPF-BLART'  'SA'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BKPF-BUKRS' p_bukrs
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  clear lv_waers.
  SELECT SINGLE WAERS FROM T001 INTO lv_waers
    WHERE BUKRS = p_bukrs.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BKPF-WAERS'  lv_waers
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  clear lv_date.
  write p_keydat to lv_date.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BKPF-XBLNR'  lv_date
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
* Begin of insert MOD-013
*       USING    ''  ''  ''  'BKPF-BKTXT'  'AR Ageing-Reclass'
       USING    ''  ''  ''  'BKPF-BKTXT'  'AR Ageing-Reclass-Rev'
* End   of insert MOD-013
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


lv_first = 'Y'.

  LOOP AT it_summ into wa_summ.

     if wa_summ-rast1 is not initial or wa_summ-rast2 is not initial or
        wa_summ-rast3 is not initial or wa_summ-rast4 is not initial or
        wa_summ-rast5 is not initial or wa_summ-rast6 is not initial
* Begin of change MOD-015
        or wa_summ-rast8 is not initial.
* End   of change MOD-015

***************
if wa_summ-rast1 is not initial.
if lv_first = 'N'.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0330'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.
if wa_summ-rast1 > 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '50'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
elseif wa_summ-rast1 < 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '40'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.


  lv_account = '1500901'.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWKO' lv_account
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '/00'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
* Item 1

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0300' 'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  clear lv_wrbtr.
  clear lv_rast.
  lv_rast = abs( wa_summ-rast1 ).
  write lv_rast to lv_wrbtr.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BSEG-WRBTR'  lv_wrbtr
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ZK'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


* Coding block
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPLKACB'  '0002'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'COBL-SEGMENT'  wa_summ-segment
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ENTE'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
lv_first = 'N'.
endif.
***
if wa_summ-rast2 is not initial.
if lv_first = 'N'.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0330'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.
if wa_summ-rast2 > 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '50'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
elseif wa_summ-rast2 < 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '40'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.


  lv_account = '1501901'.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWKO' lv_account
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '/00'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Item 1

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0300' 'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  clear lv_wrbtr.
  clear lv_rast.
  lv_rast = abs( wa_summ-rast2 ).
  write lv_rast to lv_wrbtr.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BSEG-WRBTR'  lv_wrbtr
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ZK'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Coding block
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPLKACB'  '0002'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'COBL-SEGMENT'  wa_summ-segment
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ENTE'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

lv_first = 'N'.
endif.
***
if wa_summ-rast3 is not initial.
if lv_first = 'N'.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0330'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.
if wa_summ-rast3 > 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '50'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
elseif wa_summ-rast3 < 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '40'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.


  lv_account = '1502901'.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWKO' lv_account
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '/00'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
* Item 1

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0300' 'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  clear lv_wrbtr.
  clear lv_rast.
  lv_rast = abs( wa_summ-rast3 ).
  write lv_rast to lv_wrbtr.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BSEG-WRBTR'  lv_wrbtr
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ZK'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Coding block
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPLKACB'  '0002'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'COBL-SEGMENT'  wa_summ-segment
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ENTE'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
lv_first = 'N'.
endif.
***
if wa_summ-rast4 is not initial.
if lv_first = 'N'.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0330'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.
if wa_summ-rast4 > 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '50'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
elseif wa_summ-rast4 < 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '40'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.


  lv_account = '1503901'.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWKO' lv_account
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '/00'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Item 1

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0300' 'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  clear lv_wrbtr.
  clear lv_rast.
  lv_rast = abs( wa_summ-rast4 ).
  write lv_rast to lv_wrbtr.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BSEG-WRBTR'  lv_wrbtr
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ZK'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Coding block
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPLKACB'  '0002'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'COBL-SEGMENT'  wa_summ-segment
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ENTE'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
lv_first = 'N'.
endif.
***
if wa_summ-rast5 is not initial
* Begin of change MOD-015
    or wa_summ-rast6 is not initial.
* End of change MOD-015
if lv_first = 'N'.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0330'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.

** Begin of change MOD-017
*WA_SUMM-RAST6 = ABS( WA_SUMM-RAST6 ) .
** End of change MOD-017
* Begin of change MOD-015
  wa_summ-rast5 =  wa_summ-rast5 + wa_summ-rast6 .
* End of change MOD-015

if wa_summ-rast5 > 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '50'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
elseif wa_summ-rast5 < 0.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '40'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.

  lv_account = '1504901'.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWKO' lv_account
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '/00'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
* Item 1

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0300' 'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  clear lv_wrbtr.
  clear lv_rast.
** Begin of change MOD-017
** Begin of change MOD-015
  lv_rast = abs( wa_summ-rast5 ).
*  LV_RAST = ABS( WA_SUMM-RAST5 ) + ABS( WA_SUMM-RAST6 ).
** End of change MOD-015
*  LV_RAST = ABS( WA_SUMM-RAST5 ).
** End of change MOD-017
  write lv_rast to lv_wrbtr.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BSEG-WRBTR'  lv_wrbtr
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ZK'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


* Coding block
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPLKACB'  '0002'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'COBL-SEGMENT'  wa_summ-segment
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ENTE'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
lv_first = 'N'.
endif.
***

* Begin of change MOD-015
*if wa_summ-rast6 is not initial.
if wa_summ-rast8 is not initial.
* End of change MOD-015

if lv_first = 'N'.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0330' 'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.

* Begin of change MOD-015
*if wa_summ-rast6 > 0.
if wa_summ-rast8 > 0.
* End of change MOD-015
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '50'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
* Begin of change MOD-015
*elseif wa_summ-rast6 < 0.
elseif wa_summ-rast8 < 0.
* End of change MOD-015
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  '40'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
endif.


  lv_account = '1505901'.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWKO' lv_account
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '/00'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
* Item 1

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0300' 'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  clear lv_wrbtr.
  clear lv_rast.
* Begin of change MOD-015
*  lv_rast = abs( wa_summ-rast6 ).
  LV_RAST = ABS( WA_SUMM-RAST8 ).
* End of change MOD-015
  write lv_rast to lv_wrbtr.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BSEG-WRBTR'  lv_wrbtr
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ZK'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Coding block
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPLKACB'  '0002'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'COBL-SEGMENT'  wa_summ-segment
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ENTE'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.
lv_first = 'N'.
endif.


******************


*  write wa_yse_round_post-BLDAT to lv_bldat.
*  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*       USING    ''  ''  ''  'BSEG-ZFBDT'  lv_bldat
*          CHANGING struct_bdcdata.
*  APPEND struct_bdcdata  TO i_bdcdata.
*  CLEAR  struct_bdcdata.

**************************************************************

 clear lv_wrbtr.
 clear lv_rast.
 clear lv_newbs.
* Begin of change MOD-017
* Begin of change MOD-015
* lv_rast = wa_summ-rast1 + wa_summ-rast2 + wa_summ-rast3 + wa_summ-rast4 + wa_summ-rast5 + wa_summ-rast6.
*LV_RAST = WA_SUMM-RAST1 + WA_SUMM-RAST2 + WA_SUMM-RAST3 + WA_SUMM-RAST4 + WA_SUMM-RAST5 + WA_SUMM-RAST6 + WA_SUMM-RAST8.
* End of change MOD-015
LV_RAST = WA_SUMM-RAST1 + WA_SUMM-RAST2 + WA_SUMM-RAST3 + WA_SUMM-RAST4 + WA_SUMM-RAST5 + WA_SUMM-RAST8.
* End of change MOD-017
  if lv_rast > 0.
   lv_newbs = '40'.
 else.
   lv_newbs = '50'.
 endif.
 lv_rast =  abs( lv_rast ).
 write lv_rast to lv_wrbtr.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0330'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWBS'  lv_newbs
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RF05A-NEWKO'  '1511910'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '/00'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Add G/L Account Item
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0300'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

 PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'BSEG-WRBTR'  lv_wrbtr
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ZK'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Coding block
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPLKACB'  '0002'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'COBL-SEGMENT'  wa_summ-segment
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ENTE'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

    endif.

  ENDLOOP.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMF05A'  '0330'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


* PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*       USING    ''  ''  ''  'BSEG-WRBTR'  lv_wrbtr
*          CHANGING struct_bdcdata.
*  APPEND struct_bdcdata  TO i_bdcdata.
*  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=BU'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


* Coding block
*  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*           USING    'SAPLKACB'  '0002'  'X'  ''   ''
*           CHANGING struct_bdcdata.
*  APPEND struct_bdcdata  TO i_bdcdata.
*  CLEAR  struct_bdcdata.
*
*  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*       USING    ''  ''  ''  'COBL-SEGMENT'  wa_summ-segment
*          CHANGING struct_bdcdata.
*  APPEND struct_bdcdata  TO i_bdcdata.
*  CLEAR  struct_bdcdata.
*
*  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*           USING    ''  ''  ''  'BDC_OKCODE'  '=ENTE'
*           CHANGING struct_bdcdata.
*  APPEND struct_bdcdata  TO i_bdcdata.
*  CLEAR  struct_bdcdata.

   call transaction 'FB01' using i_bdcdata
    update 'S' mode gv_mode messages into gt_err.

ENDFORM.

*** End MOD-008
*Text symbol text£º
*001:General selections
*002:Further selections
*003:Overdue time in days
*004:Delete old data
*005:Overdue
*006:> 720
*007:Program cannot be run in background
*008:Read Allocation data
*009:Legal Cases > 720
*010:Reason Code
*C01:Profit center
*C02:Customer
*C03:Customer name
*C04:Document type
*C05:Document nr
*C06:Document date
*C07:Due date
*C08:Non due
*C09:Keydate
*C10:Segment
*C11:Billing doc.
*C12:Reference key 2
*C13:Reference Hdr.
*C14:Invoice ref.
*C15:Bline Date
*C16:Document currency
*C17:Company currency
*C18:Exchange rate
*C19:sum for amounts days overdue
*C20:Sales Organisation
*C21:Distribution Channel
*C22:Division
*C23:Sales District
*C24:Sales Office
*C25:Sales Group
*C26:Amount in doc curr
*S06:Without Revaluation
*S07:With Revaluation

*S08:Revaluation Option
*Selection text£º
*LV_CHECK:        Create reclass postings in FI
*P_BUKRS:        Company code
*P_KEYDAT:        Keydate
*P_POSTD:        Posting date reposting
*P_RPOSTD:        Posting date reposting reverse
*P_VKBUR:        Sales Office
*RASTBIS1:        Overdue time 0
*RASTBIS2:        Overdue time  30
*RASTBIS3:        Overdue time  60
*RASTBIS4:        Overdue time  90
*RASTBIS5:        Overdue time  365
*RASTBIS6:        Overdue time  720
*RB_SEL1:        Radiob. without revaluation
*RB_SEL2:        Radiob. with revaluation
*SSEGMENT:        Segment
*S_KTOKD:        Customer account group
*S_KUNNR:        Customer number
*S_RSTGR:D       .
*S_UMSKZ:        Special G/L indicator
