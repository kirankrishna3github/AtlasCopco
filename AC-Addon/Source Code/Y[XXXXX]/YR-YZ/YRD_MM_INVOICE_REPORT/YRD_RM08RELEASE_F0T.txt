*&---------------------------------------------------------------------*
*&  Include           YRD_RM08RELEASE_F0T
*&---------------------------------------------------------------------*

*---------------------------------------------------------------------*
*      Form  PO_DATA_READ
*---------------------------------------------------------------------*
*      Positionen lesen f¨¹r automatische gesperrte Rechnungen         *
*---------------------------------------------------------------------*
*---------------------------------------------------------------------*
*      Form  PO_DATA_READ                                             *
*---------------------------------------------------------------------*
FORM po_data_read TABLES t_arbkp TYPE mrm_tab_arbkp
                            t_arseg       TYPE mrm_tab_arseg
                  CHANGING  te_incomplete TYPE t_incomplete.

  DATA: BEGIN OF tab_ek08rn OCCURS 50.
          INCLUDE STRUCTURE ek08rn.
  DATA: END OF   tab_ek08rn.
  DATA: BEGIN OF tab_ek08bn OCCURS 50.
          INCLUDE STRUCTURE ek08bn.
  DATA: END OF   tab_ek08bn.

  DATA: BEGIN OF tab_ek08bn_item OCCURS 50.                 "MAA EhP4
          INCLUDE STRUCTURE ek08bn_item.
  DATA: END OF   tab_ek08bn_item.

  DATA: tab_ek08rn_item TYPE mrm_tab_ek08rn_item.           "MAA EhP4

*  DATA: BEGIN OF tab_incomplete OCCURS 10,
*          belnr        LIKE arseg-belnr,
*          gjahr        LIKE arseg-gjahr,
*        END OF   tab_incomplete.

*  DATA: tab_incomplete TYPE _incomplete.

  DATA: s_ekko         LIKE ekko,
        s_ek08rn       LIKE ek08rn,
        s_ek08bn       LIKE ek08bn,
        s_ek08bn_item  LIKE ek08bn_item,                    "MAA EhP4
        s_arseg        TYPE mrm_arseg,
        s_incomplete   TYPE s_incomplete.
  DATA: f_auth         TYPE activ_auth,
        f_lines        TYPE i,
        f_remng        LIKE ek08r-remng,
        f_wemng        LIKE ek08r-wemng,
        f_netwr        LIKE ek08r-netwr,
        f_bsmng        LIKE ek08r-bsmng,
        f_bpumz        LIKE ek08r-bpumz,
        f_bpumn        LIKE ek08r-bpumn,
        f_peinh        LIKE ek08r-peinh,
        f_refwr        LIKE ek08r-refwr,
        f_eindt        LIKE ek08r-eindt,
        f_wepos        LIKE ek08r-wepos,
        f_pstyp        LIKE ek08r-pstyp,
        f_noquantity  LIKE ek08r-noquantity,
        f_actvalue     LIKE ek08r-actvalue,
        f_sumlimit     LIKE ek08r-sumlimit,
        f_limitwaers   LIKE ek08r-waers,
        f_kdatb        LIKE ek08r-kdatb,
        enh_switch_active TYPE sfw_switchpos,
        l_process      TYPE char1,         "Req133493 Ench_MRBR
        f_kdate        LIKE ek08r-kdate.
ENHANCEMENT-POINT po_data_read_01 SPOTS es_rm08release.

  DATA: f_ek08_item_found TYPE xfeld.                       "MAA EhP4

  CONSTANTS:
          c_lifnr_initial TYPE lifnr VALUE '          '.

  FIELD-SYMBOLS: <fs_ek08rn_item> TYPE mrm_ek08rn_item.     "MAA EhP4

* nur f¨¹r die Bestellzeilen
  LOOP AT t_arseg INTO s_arseg WHERE koart = c_koart_b.
    CLEAR:
      f_remng,
      f_wemng,
      f_refwr,
      f_bsmng,
      f_netwr,
      f_ek08_item_found.                                    "MAA EhP4

ENHANCEMENT-POINT po_data_read_02 SPOTS es_rm08release.
************************************************************************
* Read PO header data. Function module has to be called with parameter *
* display = 'M' to ensure, that the release procedure for the PO is    *
* taken into account and that no system logs will be set.              *
************************************************************************
    CALL FUNCTION 'ME_READ_HEADER_INVOICE'
      EXPORTING
        display       = 'M'
        ebeln         = s_arseg-ebeln
        re_kursf      = s_arseg-kursf
        re_waers      = s_arseg-waers
      IMPORTING
        iekko         = s_ekko
      EXCEPTIONS
        not_activ     = 1
        not_found     = 2
        wrong_type    = 3
        not_released  = 4
        error_message = 5
        OTHERS        = 6.
    IF sy-subrc NE 0.
      s_incomplete-belnr = s_arseg-belnr.
      s_incomplete-gjahr = s_arseg-gjahr.
      COLLECT s_incomplete INTO te_incomplete.
      DELETE t_arseg.
      ekgrp_in_list = 'X'.
      CONTINUE.
    ENDIF.

    IF s_arseg-ekgrp IS INITIAL.
      IF s_ekko-ekgrp IN so_ekgrp.
        MOVE s_ekko-ekgrp TO s_arseg-ekgrp.
        PERFORM ekgrp_authority_check USING s_ekko-ekgrp
                                      CHANGING f_auth.
        IF f_auth IS INITIAL OR
           ( release_auto = 'X' AND f_auth = '03' ).
          s_incomplete-belnr = s_arseg-belnr.
          s_incomplete-gjahr = s_arseg-gjahr.
          COLLECT s_incomplete INTO te_incomplete.
          DELETE t_arseg.
          ekgrp_in_list = 'X'.
          CONTINUE.
        ENDIF.
      ELSE.
        s_incomplete-belnr = s_arseg-belnr.
        s_incomplete-gjahr = s_arseg-gjahr.
        COLLECT s_incomplete INTO te_incomplete.
        DELETE t_arseg.
        CONTINUE.
      ENDIF.
    ENDIF.

* read PO item data, only for invoices which are blocked automatically
    CHECK s_arseg-mrm_zlspr = c_mrm_zlspr_a.

* Case: related to a PO item
    IF s_arseg-xekbz IS INITIAL.
      CALL FUNCTION 'ME_READ_ITEM_INVOICE'
        EXPORTING
          display        = 'X'
          ebelp          = s_arseg-ebelp
          iekko          = s_ekko
          re_kursf       = s_arseg-kursf
          re_waers       = s_arseg-waers
          re_wwert       = s_arseg-budat
          i_vorgang      = 'RL'
        TABLES
          xek08rn        = tab_ek08rn
          xek08rn_item   = tab_ek08rn_item                  "MAA EhP4
        EXCEPTIONS
          not_found_any  = 1
          not_found_one  = 2
          not_valid_any  = 3
          not_valid_one  = 4
          enqueue_failed = 5
          OTHERS         = 6.
      IF sy-subrc NE 0.
        s_incomplete-belnr = s_arseg-belnr.
        s_incomplete-gjahr = s_arseg-gjahr.
        COLLECT s_incomplete INTO te_incomplete.
        DELETE t_arseg.
        ekgrp_in_list = 'X'.
        CONTINUE.
      ENDIF.

      IF cl_ops_switch_check=>mm_sfws_maa( ) IS NOT INITIAL."MAA EhP4 Begin
*--- Read sum table in case of mult. acc. assignment ------------------*
        READ TABLE tab_ek08rn_item
                 WITH KEY ebeln = s_arseg-ebeln
                          ebelp = s_arseg-ebelp
                          lfbnr  = s_arseg-lfbnr
                          lfgja  = s_arseg-lfgja
                          lfpos  = s_arseg-lfpos
                          packno = s_arseg-packno
                          introw = s_arseg-introw
                 ASSIGNING <fs_ek08rn_item>.
      ENDIF.

      IF sy-subrc EQ 0 AND <fs_ek08rn_item> IS ASSIGNED.
        f_remng = <fs_ek08rn_item>-remng.
        f_wemng = <fs_ek08rn_item>-wemng.
        f_refwr = <fs_ek08rn_item>-refwr.
        f_bsmng = <fs_ek08rn_item>-bsmng.
        f_netwr = <fs_ek08rn_item>-netwr.
        f_bpumz = <fs_ek08rn_item>-bpumz.
        f_bpumn = <fs_ek08rn_item>-bpumn.
        f_peinh = <fs_ek08rn_item>-peinh.
        f_eindt = <fs_ek08rn_item>-eindt.
        f_pstyp = <fs_ek08rn_item>-pstyp.
        f_wepos = <fs_ek08rn_item>-wepos.
        f_noquantity = <fs_ek08rn_item>-noquantity.
*--- Information for the blanket PO are not available in EK08RN_ITEM, -*
*--- because it is filled just in case of mult. acc. assignment. ------*
*--- A blanket PO can have not more than one account assignment line. -*

        f_ek08_item_found = 'X'.
      ELSE.                                            "MAA EhP4 End
* ... Add values of all EK08RN entries (for same GR if GR based IV)
        LOOP AT tab_ek08rn INTO s_ek08rn WHERE ebeln = s_arseg-ebeln
                                           AND ebelp = s_arseg-ebelp
                                           AND lfbnr = s_arseg-lfbnr
                                           AND lfgja = s_arseg-lfgja
                                           AND lfpos = s_arseg-lfpos
                                           AND packno = s_arseg-packno
                                           AND introw = s_arseg-introw.

* ... fill fields for checks of blocking reasons
          f_remng = f_remng + s_ek08rn-remng.
          f_wemng = f_wemng + s_ek08rn-wemng.
          f_refwr = f_refwr + s_ek08rn-refwr.

ENHANCEMENT-POINT PO_DATA_READ_05 SPOTS ES_RM08RELEASE.

ENHANCEMENT-POINT po_data_read_03 SPOTS es_rm08release.
*--------Control if it is a noquantity position.See the
*--------FU  'mrm_block_reason_val_check_p'
          IF s_ek08rn-pstyp EQ '9'.
            IF s_ek08rn-zekkn NE '99'.
              f_netwr = f_netwr + s_ek08rn-netwr.
              IF s_ek08rn-noquantity IS INITIAL.
                f_bsmng = f_bsmng + s_ek08rn-bsmng.
              ELSE.
                f_bsmng = 1.
              ENDIF.
            ENDIF.
          ELSE.
            IF s_ek08rn-zekkn NE '99'.
              f_netwr = f_netwr + s_ek08rn-netwr.
              f_bsmng = f_bsmng + s_ek08rn-bsmng.
            ENDIF.
          ENDIF.
          f_bpumz = s_ek08rn-bpumz.
          f_bpumn = s_ek08rn-bpumn.
          f_peinh = s_ek08rn-peinh.
          f_eindt = s_ek08rn-eindt.
          f_pstyp = s_ek08rn-pstyp.
          f_wepos = s_ek08rn-wepos.
          f_noquantity = s_ek08rn-noquantity.
*-------Data for the blanket PO
          f_actvalue = s_ek08rn-actvalue.
          f_sumlimit = s_ek08rn-sumlimit.
          f_limitwaers = s_ek08rn-bewae.
          f_kdatb = s_ek08rn-kdatb.
          f_kdate = s_ek08rn-kdate.
        ENDLOOP.
      ENDIF.                                                "MAA EhP4

* ... Error if no EK08RN entry was found
      IF sy-subrc <> 0.
        MESSAGE x607 WITH 'PO_DATA_READ'.
      ENDIF.

* Case: related to planned freight cost
    ELSE.

* ... read EK08BN
      CALL FUNCTION 'ME_READ_COND_INVOICE'
        EXPORTING
          i_ebeln      = s_arseg-ebeln
          i_ebelp      = s_arseg-ebelp
          i_lifnr      = c_lifnr_initial
          re_waers     = s_arseg-waers
          i_display    = 'X'
        TABLES
          xek08bn      = tab_ek08bn
          xek08bn_item = tab_ek08bn_item.                   "MAA EhP4

      IF cl_ops_switch_check=>mm_sfws_maa( ) IS NOT INITIAL."MAA EhP4 Begin
*... read at first if there is a sum item in case of mult. acc. assignment
        READ TABLE tab_ek08bn_item INTO s_ek08bn_item
          WITH KEY ebeln = s_arseg-ebeln
            ebelp = s_arseg-ebelp
            stunr = s_arseg-stunr
            zaehk = s_arseg-zaehk.
      ENDIF.

      IF  sy-subrc = 0
      AND cl_ops_switch_check=>mm_sfws_maa( ) IS NOT INITIAL.
* ... fill fields for checks of blocking reasons
        f_remng = s_ek08bn_item-remng.
        f_wemng = s_ek08bn_item-wemng.
        f_netwr = s_ek08bn_item-netwr.
        f_bsmng = s_ek08bn_item-bsmng.
        f_bpumz = s_ek08bn_item-bpumz.
        f_bpumn = s_ek08bn_item-bpumn.
        f_refwr = s_ek08bn_item-refwr.
        f_peinh = 1.
        f_pstyp = s_ek08bn_item-pstyp.
        f_wepos = s_ek08bn_item-wepos.
*     f_eindt = s_ek08rn-eindt.
*        f_actvalue = s_ek08bn_item-actvalue.
*        f_sumlimit = s_ek08bn_item-sumlimit.
*        f_limitwaers = s_ek08bn_item-bewae.
        f_kdatb = s_ek08rn-kdatb.
        f_kdate = s_ek08rn-kdate.

        f_ek08_item_found = 'X'.

      ELSE.                                            "MAA EhP4 End
*... there is no sum item for the condition type, no "xmacc"-case

        READ TABLE tab_ek08bn INTO s_ek08bn WITH KEY ebeln = s_arseg-ebeln
                                                     ebelp = s_arseg-ebelp
                                                     stunr = s_arseg-stunr
                                                     zaehk = s_arseg-zaehk
                                                     kschl = s_arseg-kschl.
        IF sy-subrc <> 0.
          s_incomplete-belnr = s_arseg-belnr.
          s_incomplete-gjahr = s_arseg-gjahr.
          COLLECT s_incomplete INTO te_incomplete.
          DELETE t_arseg.
          ekgrp_in_list = 'X'.
          CONTINUE.
        ENDIF.

* ... fill fields for checks of blocking reasons
        f_remng = s_ek08bn-remng.
        f_wemng = s_ek08bn-wemng.
        f_netwr = s_ek08bn-netwr.
        f_bsmng = s_ek08bn-bsmng.
        f_bpumz = s_ek08bn-bpumz.
        f_bpumn = s_ek08bn-bpumn.
        f_refwr = s_ek08bn-refwr.
        f_peinh = 1.
        f_pstyp = s_ek08bn-pstyp.
        f_wepos = s_ek08bn-wepos.
        f_noquantity = s_ek08bn-noquantity.
*     f_eindt = s_ek08rn-eindt.
        f_actvalue = s_ek08bn-actvalue.
        f_sumlimit = s_ek08bn-sumlimit.
        f_limitwaers = s_ek08bn-bewae.
        f_kdatb = s_ek08rn-kdatb.
        f_kdate = s_ek08rn-kdate.

      ENDIF.                                                "MAA EhP4
    ENDIF.

    IF cl_ops_switch_check=>mm_sfws_maa( ) IS NOT INITIAL."MAA EhP4 Begin
*--- Read further PO information in case of mult. acc. assignment -----*
      IF  s_arseg-xekbz IS INITIAL
      AND NOT f_ek08_item_found IS INITIAL.                 "MAA EhP4
        READ TABLE tab_ek08rn INTO s_ek08rn
          WITH KEY ebeln  = s_arseg-ebeln
                   ebelp  = s_arseg-ebelp
                   lfbnr  = s_arseg-lfbnr
                   lfgja  = s_arseg-lfgja
                   lfpos  = s_arseg-lfpos
                   packno = s_arseg-packno
                   introw = s_arseg-introw.

      ELSEIF NOT (   s_arseg-xekbz IS INITIAL
                  OR f_ek08_item_found IS INITIAL ).
        READ TABLE tab_ek08bn INTO s_ek08bn
          WITH KEY ebeln = s_arseg-ebeln
                   ebelp = s_arseg-ebelp
                   stunr = s_arseg-stunr
                   zaehk = s_arseg-zaehk
                   kschl = s_arseg-kschl.
      ENDIF.
    ENDIF.                                                "MAA EhP4 End

* copy PO item data into T_ARSEG
    PERFORM po_item_data_fill USING     s_ek08rn
                                        s_ek08bn
                              CHANGING  s_arseg.

* check: blocking reasons are still valid
    PERFORM blocking_reason_validity_check USING f_remng
                                                 f_wemng
                                                 f_netwr
                                                 f_bsmng
                                                 f_bpumz
                                                 f_bpumn
                                                 f_peinh
                                                 f_refwr
                                                 f_eindt
                                                 f_pstyp
                                                 f_wepos
                                                 f_noquantity
                                                 s_arseg
                                                 f_actvalue
                                                 f_sumlimit
                                                 f_limitwaers
                                                 f_kdatb
                                                 f_kdate
                                  CHANGING s_arseg-dmeng
                                           s_arseg-dwert
                                           s_arseg-dtage
                                           s_arseg-spgrm_inv
                                           s_arseg-spgrp_inv
                                           s_arseg-spgrt_inv
                                           s_arseg-spgrc_inv
                                           s_arseg-spgrm_new
                                           s_arseg-spgrp_new
                                           s_arseg-spgrt_new
                                           s_arseg-spgrc_new.
*-----req133493 ench_mrbr
* Check Status of EnhPack Switch
    CALL METHOD cl_sfw_get_jfmipsw_status=>get_switch_status
      IMPORTING
        status = enh_switch_active.
    IF enh_switch_active = 'T'.
*      IF pa_xmanu IS INITIAL.
*        l_process = 'X'.
*      ENDIF.
      PERFORM vpack_mrmbadi_block_delete IN PROGRAM saplvpack_mrmbadi IF FOUND
                      USING l_process
                            s_arseg
                            'P'
                      CHANGING s_arseg.
    ENDIF.
    CALL FUNCTION 'MRMBADI_BLOCKREASON_DELETE'                "NCF IV
      EXPORTING
        im_process            = l_process
        im_arseg              = s_arseg
        im_posting_type       = 'P'
      IMPORTING
        ex_arseg              = s_arseg
      CHANGING
        ch_ivext_changed      = gv_ivext_changed.             "NCF IV
*--------------------------------

ENHANCEMENT-POINT po_data_read_04 SPOTS es_rm08release.
    MODIFY t_arseg FROM s_arseg.
  ENDLOOP.

* incomplete list ...
  DESCRIBE TABLE te_incomplete LINES f_lines.
  IF f_lines GT 0.
*  ... set flag x_incomplete
    LOOP AT te_incomplete INTO s_incomplete.
      s_arseg-x_incomplete = 'X'.
      MODIFY t_arseg FROM s_arseg
                 TRANSPORTING x_incomplete
                 WHERE belnr EQ s_incomplete-belnr
                 AND   gjahr EQ s_incomplete-gjahr.
* ... no item remained
      IF sy-subrc NE 0.
        DELETE t_arbkp
                  WHERE belnr EQ s_incomplete-belnr
                  AND   gjahr EQ s_incomplete-gjahr.
      ENDIF.
    ENDLOOP.
    MESSAGE s657.
  ENDIF.

ENDFORM.                               " PO_DATA_READ
