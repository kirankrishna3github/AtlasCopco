*&---------------------------------------------------------------------*
*&  Include           YRD_RM08RELEASE_F1G
*&---------------------------------------------------------------------*
*----------------------------------------------------------------------*
***INCLUDE RM08RELEASE_F1G .
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  IVEXT_SAVE
*&---------------------------------------------------------------------*
FORM ivext_save  USING  it_arbkp TYPE mrm_tab_arbkp
                        it_arseg TYPE mrm_tab_arseg.
*----------------------------------------------------------------------*
  TYPES: BEGIN OF lty_ivext_data.
*         only data part of IVEXT
          INCLUDE STRUCTURE mrmivext_data_header.
          INCLUDE STRUCTURE mrmivext_data_item.
          INCLUDE STRUCTURE mrmivext_data_itemheader.
  TYPES: END OF lty_ivext_data.

  DATA: ls_arseg          LIKE LINE OF it_arseg,
        ls_ivext_data     TYPE lty_ivext_data,
        lt_ivext_old      TYPE mrm_tab_ivext,
        ls_ivext_old      LIKE LINE OF lt_ivext_old,
        ls_ivext_new      LIKE ls_ivext_old,
        ls_arbkp          LIKE LINE OF it_arbkp,
        lt_mrmivext_new   TYPE mrm_tab_mrmivext,
        ls_mrmivext_new   LIKE LINE OF lt_mrmivext_new.
*----------------------------------------------------------------------*
  LOOP AT it_arbkp INTO ls_arbkp.
    CLEAR: lt_ivext_old, lt_mrmivext_new.
*   get 'old' data
    CALL FUNCTION 'MRM_IVEXT_READ'
      EXPORTING
        i_belnr               = ls_arbkp-belnr
        i_gjahr               = ls_arbkp-gjahr
*       I_BUFFER_ON           = X
      IMPORTING
        te_ivext              = lt_ivext_old
      EXCEPTIONS
        entry_not_found       = 1
        OTHERS                = 2.

*   get 'new' data
*   even if the data in IVEXT is deleted, there is still
*   an entry in it_arseg
    LOOP AT it_arseg INTO ls_arseg
         WHERE belnr = ls_arbkp-belnr AND
               gjahr = ls_arbkp-gjahr.
*     get new IVEXT data
      MOVE-CORRESPONDING ls_arseg  TO ls_ivext_new.
*     get old IVEXT data
      READ TABLE lt_ivext_old INTO ls_ivext_old
           WITH KEY belnr = ls_arseg-belnr
                    gjahr = ls_arseg-gjahr
                    buzei = ls_arseg-buzei.
      IF sy-subrc = 0.
        IF ls_ivext_new = ls_ivext_old.
*         data hasnt changed
        ELSE.
*         data has changed
*         check whether IVEXT data is now initial
          MOVE-CORRESPONDING ls_ivext_new TO ls_ivext_data.
          IF ls_ivext_data IS INITIAL.
*           IVEXT data is now initial -> delete entry
            MOVE-CORRESPONDING ls_ivext_new TO ls_mrmivext_new.
            ls_mrmivext_new-kz = c_delete.
            APPEND ls_mrmivext_new TO lt_mrmivext_new.
          ELSE.
*           change entry
            MOVE-CORRESPONDING ls_ivext_new TO ls_mrmivext_new.
            ls_mrmivext_new-kz = c_update.
            APPEND ls_mrmivext_new TO lt_mrmivext_new.
          ENDIF.
        ENDIF.
      ELSE.
*       new entry in IVEXT
*       check whether IVEXT data is initial
        MOVE-CORRESPONDING ls_ivext_new TO ls_ivext_data.
        IF ls_ivext_data IS INITIAL.
*         IVEXT data is initial -> no entry necessary
        ELSE.
*         save new entry
          MOVE-CORRESPONDING ls_ivext_new TO ls_mrmivext_new.
          ls_mrmivext_new-kz = c_insert.
          APPEND ls_mrmivext_new TO lt_mrmivext_new.
        ENDIF.
      ENDIF.
    ENDLOOP.

    IF NOT lt_mrmivext_new IS INITIAL.
      CALL FUNCTION 'MRM_INVOICE_IVEXT_SAVE'
        EXPORTING
          i_belnr     = ls_arbkp-belnr
          i_gjahr     = ls_arbkp-gjahr
          i_xupda     = c_update
          ti_mrmivext = lt_mrmivext_new.
    ENDIF.

  ENDLOOP.


ENDFORM.                    " ivext_save
