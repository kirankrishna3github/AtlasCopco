*&---------------------------------------------------------------------*
*& Report  YRD_PP_SUPPLEMENT                                           *
*&                                                                     *
*&---------------------------------------------------------------------*
*----------------------------------------------------------------------*
* PROGRAM ID           : YRD_PP_SUPPLEMENT
* PROGRAM TITLE        :
* AUTHOR               : CSC Chris
* DATE                 : 24/06/2015
* DEVELOPMENT ID       : EXTCCG
* TYPE                 :
* DESCRIPTION          :
* T-CODE               :
*----------------------------------------------------------------------*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
* MOD. NO.|  DATE    | NAME     | TRANSPORT NO | CHANGE REFERENCE #    *
* Initial |24/06/2015| CSC Chris| CD1K985953   | #CR3632               *
*----------------------------------------------------------------------*

REPORT  yrd_pp_supplement.

*&---------------------------------------------------------------------*
*& DEFINE TABLES.                                                      *
*&---------------------------------------------------------------------*
TABLES: yrd_lavendor,afko,afpo.

*&---------------------------------------------------------------------*
*& DEFINE INNER TABLES.                                                *
*&---------------------------------------------------------------------*
DATA: it_yrd_open_wo TYPE TABLE OF yrd_open_wo WITH HEADER LINE.
DATA: it_yrd_supplement TYPE TABLE OF yrd_supplement WITH HEADER LINE.

DATA: lv_menge TYPE bbmng.
DATA: lv_loop TYPE flag.

*&---------------------------------------------------------------------*
*& INITIALIZATION                                                      *
*&---------------------------------------------------------------------*
INITIALIZATION.
  CLEAR: it_yrd_open_wo,it_yrd_open_wo[],
         it_yrd_supplement,it_yrd_supplement[].

*&---------------------------------------------------------------------*
*& START-OF-SELECTION                                                  *
*&---------------------------------------------------------------------*
START-OF-SELECTION.

*(1).Clear the DB table
  SELECT *
    FROM yrd_supplement
    INTO TABLE it_yrd_supplement.
  DELETE yrd_supplement FROM TABLE it_yrd_supplement.
  CLEAR: it_yrd_supplement,it_yrd_supplement[].


*(2).Get Open Work Order Shortage Component
  SELECT *
    FROM yrd_open_wo
    INTO TABLE it_yrd_open_wo.


*(3).List Component Supplement Qty
  SORT it_yrd_open_wo BY matnr werks.
  DELETE ADJACENT DUPLICATES FROM it_yrd_open_wo COMPARING matnr werks.

  LOOP AT it_yrd_open_wo.

*---List Open PO Qty
    PERFORM frm_openpo.

*---List Non-confirmed WO Qty
    PERFORM frm_nocnfwo.

*---IF Open PO Qty and Non-Confirmed WO Qty has same material, plant & date (delivery date/finish date), then sum of their quantity (required & open quantity).
    IF it_yrd_open_wo-avlqty > 0.
      it_yrd_supplement-matnr = it_yrd_open_wo-matnr.
      it_yrd_supplement-werks = it_yrd_open_wo-werks.
      it_yrd_supplement-eindt = sy-datum.
      it_yrd_supplement-menge = it_yrd_open_wo-avlqty.
      COLLECT it_yrd_supplement.
      CLEAR it_yrd_supplement.
    ENDIF.

  ENDLOOP.


  SORT it_yrd_supplement BY matnr werks eindt menge.


*(4).Estimated supplement quantity
  LOOP AT it_yrd_open_wo WHERE avlqty < 0.
    CLEAR: lv_menge,lv_loop.

    LOOP AT it_yrd_supplement WHERE matnr = it_yrd_open_wo-matnr AND werks = it_yrd_open_wo-werks.

      IF lv_loop IS INITIAL. " First Loop
        lv_menge = it_yrd_open_wo-avlqty + it_yrd_supplement-menge.
        lv_loop = 'X'.
      ELSE.
        lv_menge = lv_menge + it_yrd_supplement-menge.
      ENDIF.

      IF lv_menge = 0.
        DELETE it_yrd_supplement.
        EXIT.
      ELSEIF lv_menge < 0.
        DELETE it_yrd_supplement.

      ELSEIF lv_menge > 0.
        it_yrd_supplement-menge = lv_menge.
        MODIFY it_yrd_supplement.
        EXIT.
      ENDIF.

    ENDLOOP.
  ENDLOOP.


*(5).Update the DB table
  MODIFY yrd_supplement FROM TABLE it_yrd_supplement.
























*&---------------------------------------------------------------------*
*&      Form  FRM_OPENPO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_openpo .

  DATA: i_purch_orders     TYPE TABLE OF yse_sd_alv_openpo WITH HEADER LINE.
  DATA: wa_purch_orders    TYPE yse_sd_alv_openpo.

  TYPES: BEGIN OF  t_ekes,
         ebeln      TYPE ekes-ebeln,
         ebelp      TYPE ekes-ebelp,
         etens      TYPE ekes-etens,
         ebtyp      TYPE ekes-ebtyp,
         menge      TYPE ekes-menge,
         erdat      TYPE ekes-erdat,
         eindt      TYPE ekes-eindt,
         END OF t_ekes.

  DATA: it_ekes            TYPE TABLE OF  t_ekes.
  DATA: i_ekes             TYPE  TABLE OF t_ekes.
  DATA: wa_ekes            TYPE t_ekes.


  TYPES: BEGIN OF  t_eket,
         ebeln      TYPE eket-ebeln,
         ebelp      TYPE eket-ebelp,
         wemng      TYPE eket-wemng,
         END OF t_eket.
  TYPES: BEGIN OF  t_eket_2,
         ebeln      TYPE eket-ebeln,
         ebelp      TYPE eket-ebelp,
         etenr      TYPE eket-etenr,
         wemng      TYPE eket-wemng,
         END OF t_eket_2.

  DATA:  i_eket             TYPE  HASHED TABLE OF t_eket
                             WITH  UNIQUE KEY ebeln ebelp.
  DATA:  wa_eket             TYPE t_eket.
  DATA:  wa_eket_2           TYPE t_eket_2.
  DATA:  it_eket             TYPE TABLE OF t_eket_2.


  TYPES: BEGIN OF  t_ekbe_invqty_aggr,
         ebeln      TYPE ekbe-ebeln,
         ebelp      TYPE ekbe-ebelp,
         menge      TYPE ekbe-menge,
         END OF t_ekbe_invqty_aggr.
  TYPES: BEGIN OF  t_ekbe_invqty,
         ebeln      TYPE ekbe-ebeln,
         ebelp      TYPE ekbe-ebelp,
         zekkn      LIKE ekbe-zekkn,
         vgabe      LIKE ekbe-vgabe,
         gjahr      LIKE ekbe-gjahr,
         belnr      LIKE ekbe-belnr,
         buzei      LIKE ekbe-buzei,
         menge      TYPE ekbe-menge,
         shkzg      TYPE ekbe-shkzg,
         END OF t_ekbe_invqty.

  DATA:  wa_ekbe_invqty_aggr TYPE  t_ekbe_invqty_aggr,
         it_ekbe_invqty_aggr TYPE  HASHED TABLE OF t_ekbe_invqty_aggr
                             WITH  UNIQUE KEY ebeln ebelp.
  DATA:  wa_ekbe_invqty     TYPE t_ekbe_invqty.
  DATA:  it_ekbe_invqty     TYPE TABLE OF  t_ekbe_invqty.

  DATA:  qty LIKE wa_purch_orders-menge.

  CLEAR: i_purch_orders,i_purch_orders[].

  SELECT
        ekko~ekorg  " PO Purch organisation
        ekko~ekgrp  " PO Purch group
        ekko~bsart  " PO doc type
        ekko~aedat  " PO creation date
        ekpo~ebeln  " PO num
        ekpo~ebelp  " PO item  num
        ekpo~matnr  " material
        ekpo~werks  " plant
        ekpo~lgort  " Storage Location
        ekko~lifnr  " vendor number
*        lfa1~name1  " Vendor Name
        ekpo~afnam  " Name of Requisitioner/Requester
        ekko~reswk  " supplying plant
        ekpo~menge  " quantities
        ekpo~meins  " unit of measure
        ekpo~peinh  " price unit
        ekpo~netpr  " net price
        ekko~waers  " currency
        ekpo~zztranspmode   " transportation mode
        ekpo~zzconscode     " Consignee code
        ekpo~zzurgcode      " Urgency code
        ekpo~bednr
        ekpo~infnr
        ekpo~elikz
        ekpo~erekz
        ekko~ihrez
        ekpo~zzvtweg
        eket~eindt
    INTO CORRESPONDING FIELDS OF TABLE i_purch_orders
    FROM ekpo
    INNER JOIN  ekko  ON ekpo~ebeln =  ekko~ebeln
    INNER JOIN  eket  ON ekpo~ebeln =  eket~ebeln
                    AND  ekpo~ebelp =  eket~ebelp
*  JOIN lfa1 ON ekko~lifnr EQ lfa1~lifnr

    WHERE ekpo~retpo    <>  'X'
      AND ekko~ekorg     = 'CN06'
      AND ekpo~werks     = it_yrd_open_wo-werks
      AND ekpo~matnr     = it_yrd_open_wo-matnr
      AND ekpo~loekz     EQ space
      AND ( ekpo~elikz  NE 'X' OR ekpo~erekz NE 'X' )
      AND eket~etenr = ( SELECT MAX( etenr )
                           FROM eket
                          WHERE ebeln = ekpo~ebeln
                            AND ebelp = ekpo~ebelp ).
*      AND eket~eindt =< sy-datum.


  IF NOT i_purch_orders[] IS INITIAL.

*  determine  Requested Delivery Date.
    CLEAR: i_ekes,i_ekes[].
    CLEAR: it_ekes,it_ekes[].
    SELECT ebeln ebelp etens ebtyp menge erdat eindt
      FROM ekes
      INTO TABLE it_ekes
      FOR ALL ENTRIES IN i_purch_orders
     WHERE ebeln = i_purch_orders-ebeln
       AND ebelp = i_purch_orders-ebelp
       AND ebtyp = 'AB'.
    IF sy-subrc EQ 0.
      SORT it_ekes BY  ebeln  ebelp  etens DESCENDING.
*      DELETE ADJACENT DUPLICATES FROM it_ekes COMPARING ebeln ebelp.
    ENDIF.

    APPEND LINES OF it_ekes  TO i_ekes.
    FREE it_ekes.

* determine Last inbound delivery date
    CLEAR: it_ekes,it_ekes[].
    SELECT ebeln ebelp etens ebtyp menge erdat eindt
      FROM ekes
      INTO TABLE it_ekes
      FOR ALL ENTRIES IN i_purch_orders
     WHERE ebeln = i_purch_orders-ebeln
       AND ebelp = i_purch_orders-ebelp
       AND ebtyp = 'LA'.
    IF sy-subrc EQ 0.
      SORT it_ekes BY  ebeln  ebelp  erdat DESCENDING.
      DELETE ADJACENT DUPLICATES FROM it_ekes COMPARING ebeln ebelp.
    ENDIF.

    APPEND LINES OF it_ekes  TO i_ekes.
    FREE it_ekes.


*  determine  received quantity
    CLEAR: it_eket,it_eket[].

    SELECT ebeln ebelp etenr wemng
      FROM eket
      INTO TABLE it_eket
      FOR ALL ENTRIES IN i_purch_orders
     WHERE ebeln = i_purch_orders-ebeln
      AND  ebelp  = i_purch_orders-ebelp.

    SORT it_eket BY ebeln ebelp.

    CLEAR: i_eket,i_eket[].
    LOOP AT it_eket INTO wa_eket_2.
      MOVE-CORRESPONDING wa_eket_2 TO wa_eket.
      COLLECT wa_eket INTO i_eket.
    ENDLOOP.
    FREE it_eket.

*  determine  Invoive quantity
    CLEAR: it_ekbe_invqty,it_ekbe_invqty[].

    SELECT ebeln ebelp zekkn vgabe gjahr belnr buzei menge shkzg
    INTO TABLE it_ekbe_invqty
     FROM ekbe
    FOR ALL ENTRIES IN i_purch_orders
    WHERE ebeln EQ i_purch_orders-ebeln
      AND ebelp EQ i_purch_orders-ebelp
      AND vgabe = '2'.       " invoice receipt

    SORT  it_ekbe_invqty  BY  ebeln  ebelp.

    CLEAR: it_ekbe_invqty_aggr,it_ekbe_invqty_aggr[].
    LOOP AT  it_ekbe_invqty   INTO  wa_ekbe_invqty.
      IF wa_ekbe_invqty-shkzg EQ 'H'.
        wa_ekbe_invqty-menge =  wa_ekbe_invqty-menge * -1.
      ENDIF.
      MOVE-CORRESPONDING wa_ekbe_invqty TO wa_ekbe_invqty_aggr.
      COLLECT wa_ekbe_invqty_aggr  INTO  it_ekbe_invqty_aggr.
    ENDLOOP.
    FREE it_ekbe_invqty.
  ENDIF.


  CLEAR wa_purch_orders.
  LOOP AT i_purch_orders INTO wa_purch_orders.

* Purchase order should not be shown if it is not open


*   get received quantity.
    CLEAR wa_eket.
    READ TABLE i_eket WITH TABLE KEY ebeln = wa_purch_orders-ebeln
                                     ebelp = wa_purch_orders-ebelp
                      INTO wa_eket.


*   get invoiced  quantity.
    CLEAR wa_ekbe_invqty_aggr.
    READ TABLE it_ekbe_invqty_aggr WITH TABLE KEY ebeln = wa_purch_orders-ebeln
                                                  ebelp = wa_purch_orders-ebelp
                                   INTO wa_ekbe_invqty_aggr.


* Closed for GR point of view
    IF ( wa_purch_orders-elikz EQ 'X'
    OR wa_eket-wemng GE wa_purch_orders-menge )
    AND ( wa_purch_orders-erekz EQ 'X'
    OR wa_ekbe_invqty_aggr-menge GE wa_purch_orders-menge ).
      DELETE TABLE i_purch_orders FROM wa_purch_orders.
      CONTINUE.
    ENDIF.

    MOVE wa_eket-wemng TO wa_purch_orders-wemng.
    MOVE wa_ekbe_invqty_aggr-menge TO wa_purch_orders-invqty.


*   get requested delivery date
    CLEAR wa_ekes.
    READ TABLE i_ekes WITH KEY ebeln = wa_purch_orders-ebeln
                               ebelp = wa_purch_orders-ebelp
                               ebtyp = 'AB'
                     INTO wa_ekes.
*    MOVE wa_ekes-eindt     TO wa_purch_orders-eindt1.  "Madhu
    IF sy-subrc EQ 0.
      MOVE wa_ekes-eindt TO wa_purch_orders-eindt1.
* Fill AB Creation date
      MOVE wa_ekes-erdat TO wa_purch_orders-abcreationdate.
    ENDIF.

*   get last inbound delivery date
    CLEAR wa_ekes.
    READ TABLE i_ekes WITH KEY ebeln = wa_purch_orders-ebeln
                               ebelp = wa_purch_orders-ebelp
                               ebtyp = 'LA'
                      INTO wa_ekes.
    IF NOT wa_ekes-menge IS INITIAL.
      MOVE wa_ekes-erdat TO wa_purch_orders-zeindt.
    ENDIF.


*   PO qty - GR qty >0
    CLEAR: qty.
    qty = wa_purch_orders-menge - wa_purch_orders-wemng.
    IF qty > 0.
      wa_purch_orders-openpo = qty.
      MODIFY i_purch_orders FROM wa_purch_orders.
    ELSE.
      LOOP AT i_purch_orders WHERE bsart = wa_purch_orders-bsart
                               AND aedat = wa_purch_orders-aedat
                               AND ebeln = wa_purch_orders-ebeln
                               AND ebelp = wa_purch_orders-ebelp.
        DELETE i_purch_orders.
      ENDLOOP.
    ENDIF.

    CLEAR wa_purch_orders.
  ENDLOOP.

  SORT i_purch_orders BY eindt1.

  LOOP AT i_purch_orders WHERE eindt1 = '00000000'.
    DELETE i_purch_orders.
  ENDLOOP.


  CLEAR: i_ekes,i_ekes[].
  LOOP AT i_purch_orders INTO wa_purch_orders.

    SELECT SINGLE *
         FROM yrd_lavendor
        WHERE ekorg = wa_purch_orders-ekorg
          AND lifnr = wa_purch_orders-lifnr.
    IF sy-subrc = 0. " LA

* determine Last inbound delivery date
      CLEAR: it_ekes,it_ekes[].
      SELECT ebeln ebelp etens ebtyp menge erdat eindt
        FROM ekes
        INTO TABLE it_ekes
       WHERE ebeln = wa_purch_orders-ebeln
         AND ebelp = wa_purch_orders-ebelp
         AND ebtyp = 'LA'.
      IF sy-subrc EQ 0.
        SORT it_ekes BY ebeln ebelp erdat DESCENDING.
*        DELETE ADJACENT DUPLICATES FROM it_ekes COMPARING ebeln ebelp.
      ENDIF.

*  determine  received quantity
      CLEAR: it_eket,it_eket[].
      SELECT ebeln ebelp etenr wemng
        FROM eket
        INTO TABLE it_eket
       WHERE ebeln = wa_purch_orders-ebeln
        AND  ebelp = wa_purch_orders-ebelp.

      SORT it_eket BY ebeln ebelp etenr.

      LOOP AT it_ekes INTO wa_ekes.
        READ TABLE it_eket INTO wa_eket_2 WITH KEY etenr = wa_ekes-etens.
        IF sy-subrc = 0.
          wa_ekes-menge = wa_ekes-menge - wa_eket_2-wemng.
          IF wa_ekes-menge = 0.
            DELETE TABLE it_ekes FROM wa_ekes.
          ELSE.
            MODIFY TABLE it_ekes FROM wa_ekes.
          ENDIF.
        ENDIF.
      ENDLOOP.


      APPEND LINES OF it_ekes TO i_ekes.

    ELSE. " AB

*  determine  requested delivery date.
      CLEAR: it_ekes,it_ekes[].
      SELECT ebeln ebelp etens ebtyp menge erdat eindt
        FROM ekes
        INTO TABLE it_ekes
       WHERE ebeln = wa_purch_orders-ebeln
         AND ebelp = wa_purch_orders-ebelp
         AND ebtyp = 'AB'.
      IF sy-subrc EQ 0.
        SORT it_ekes BY ebeln ebelp etens DESCENDING.
*      DELETE ADJACENT DUPLICATES FROM it_ekes COMPARING ebeln ebelp.
      ENDIF.

*  determine  received quantity
      CLEAR: it_eket,it_eket[].
      SELECT ebeln ebelp etenr wemng
        FROM eket
        INTO TABLE it_eket
       WHERE ebeln = wa_purch_orders-ebeln
        AND  ebelp = wa_purch_orders-ebelp.

      SORT it_eket BY ebeln ebelp etenr.

      LOOP AT it_ekes INTO wa_ekes.
        READ TABLE it_eket INTO wa_eket_2 WITH KEY etenr = wa_ekes-etens.
        IF sy-subrc = 0.
          wa_ekes-menge = wa_ekes-menge - wa_eket_2-wemng.
          IF wa_ekes-menge = 0.
            DELETE TABLE it_ekes FROM wa_ekes.
          ELSE.
            MODIFY TABLE it_ekes FROM wa_ekes.
          ENDIF.
        ENDIF.
      ENDLOOP.


      APPEND LINES OF it_ekes TO i_ekes.

    ENDIF.

  ENDLOOP.


  LOOP AT i_ekes INTO wa_ekes.
    it_yrd_supplement-matnr = it_yrd_open_wo-matnr.
    it_yrd_supplement-werks = it_yrd_open_wo-werks.
    MOVE-CORRESPONDING wa_ekes TO it_yrd_supplement.
    COLLECT it_yrd_supplement.
    CLEAR it_yrd_supplement.
  ENDLOOP.
  FREE i_ekes.

  SORT it_yrd_supplement BY matnr werks eindt menge.

ENDFORM.                    " FRM_OPENPO
*&---------------------------------------------------------------------*
*&      Form  FRM_NOCNFWO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_nocnfwo .

  SELECT *
    FROM afpo
    WHERE matnr = it_yrd_open_wo-matnr
      AND dwerk = it_yrd_open_wo-werks
      AND dnrel = ''
      AND elikz = ''.

    SELECT SINGLE *
      FROM afko
     WHERE aufnr = afpo-aufnr
       AND getri = '00000000'.
    IF sy-subrc = 0.

      it_yrd_supplement-menge = afpo-psmng.
      it_yrd_supplement-eindt = afko-gltrp.
      it_yrd_supplement-matnr = it_yrd_open_wo-matnr.
      it_yrd_supplement-werks = it_yrd_open_wo-werks.

      COLLECT it_yrd_supplement.
      CLEAR it_yrd_supplement.
    ENDIF.

  ENDSELECT.

  SORT it_yrd_supplement BY matnr werks eindt menge.

ENDFORM.                    " FRM_NOCNFWO
