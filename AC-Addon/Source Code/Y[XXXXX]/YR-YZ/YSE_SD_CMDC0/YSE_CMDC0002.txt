*----------------------------------------------------------------------*
*   INCLUDE CMDC0002                                                   *
*----------------------------------------------------------------------*

*---------------------------------------------------------------------*
*       FORM CONDITIONS_ANAL                                          *
*---------------------------------------------------------------------*
FORM conditions_anal.

* pre-select data in KONH / KONP
  IF konhex NE space OR schvak NE space.
    WRITE text-042 TO msg_text-procac.
    PERFORM gui_message USING msg_text.
    numkr-konhmax = con_knumh_0.
    SELECT knumh kvewe kotabnr kappl kschl vakey datab datbi
      FROM konh INTO CORRESPONDING FIELDS OF TABLE xkonh
      FOR ALL ENTRIES IN xvake
      WHERE knumh = xvake-knumh.
    IF sy-subrc EQ 0.
      SORT xkonh BY knumh.
      DESCRIBE TABLE xkonh LINES act_tabix.
      READ TABLE xkonh INDEX act_tabix.
      IF sy-subrc EQ 0.
        numkr-konhmax = xkonh-knumh.
      ENDIF.
    ENDIF.
  ENDIF.

  IF konpex NE space OR stfbzg NE space.
    WRITE text-043 TO msg_text-procac.
    PERFORM gui_message USING msg_text.
    numkr-konpmax = con_knumh_0.
    SELECT knumh kopos kappl kschl kzbzg
      FROM konp INTO CORRESPONDING FIELDS OF TABLE xkonp
      FOR ALL ENTRIES IN xvake
      WHERE knumh = xvake-knumh.
    IF sy-subrc EQ 0.
      SORT xkonp BY knumh kopos.
      DESCRIBE TABLE xkonp LINES act_tabix.
      READ TABLE xkonp INDEX act_tabix.
      IF sy-subrc EQ 0.
        numkr-konpmax = xkonp-knumh.
      ENDIF.
    ENDIF.
  ENDIF.


* start check
  IF konhex NE space OR konpex NE space OR schvak NE space OR
     stfbzg NE space.
* start loop
    WRITE text-044 TO msg_text-procac.
    PERFORM gui_message USING msg_text.
    LOOP AT xvake.
      occ_error = space.
* check KONH, KSCHL and VAKEY
      IF konhex NE space OR schvak NE space.
        IF xvake-knumh NE knumh_old.
          READ TABLE xkonh WITH KEY knumh = xvake-knumh BINARY SEARCH.
          IF sy-subrc NE 0.
            CLEAR xkonh.
          ENDIF.
        ENDIF.
        IF xkonh IS INITIAL.
          PERFORM make_res_entry.
          xresult-nkonhx = 'X'.
          MODIFY xresult INDEX res_tabix TRANSPORTING nkonhx.
        ELSE.
          IF schvak NE space.
* check kschl
            IF xvake-kschl NE xkonh-kschl.
              PERFORM make_res_entry.
              xresult-hkschl = xkonh-kschl.
              MODIFY xresult INDEX res_tabix TRANSPORTING hkschl.
            ENDIF.
* check vakey
            IF xvake-vakey NE xkonh-vakey.
              PERFORM make_res_entry.
              xresult-hvakey = xkonh-vakey.
              MODIFY xresult INDEX res_tabix TRANSPORTING hvakey.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
* end of check KONH, KSCHL and VAKEY

      IF konpex NE space OR stfbzg NE space.
        IF xvake-knumh NE knumh_old.
          READ TABLE xkonp WITH KEY knumh = xvake-knumh
                                    kopos = con_kopos_01  BINARY SEARCH.
          IF sy-subrc NE 0.
            CLEAR xkonp.
          ELSE.
* check KONM, KONW
            IF stfbzg NE space.
              SELECT SINGLE * FROM konw WHERE knumh = xkonp-knumh
                                          AND kopos = xkonp-kopos.
              IF sy-subrc EQ 0.
                IF xkonp-kzbzg NE 'B'.
                  PERFORM make_res_entry.
                  xresult-pkzbzg = 'W'.
                  xresult-kzbzga = xkonp-kzbzg.
                  MODIFY xresult INDEX res_tabix TRANSPORTING pkzbzg
                                                              kzbzga.
                ENDIF.
              ENDIF.

              SELECT SINGLE * FROM konm WHERE knumh = xkonp-knumh
                                          AND kopos = xkonp-kopos.
              IF sy-subrc EQ 0.
                IF xkonp-kzbzg EQ space OR xkonp-kzbzg EQ 'B'.
                  PERFORM make_res_entry.
                  xresult-pkzbzg = 'M'.
                  xresult-kzbzga = xkonp-kzbzg.
                  MODIFY xresult INDEX res_tabix TRANSPORTING pkzbzg
                                                              kzbzga.
                ENDIF.
              ENDIF.
            ENDIF.
* end of check KONM, KONW
          ENDIF.
        ENDIF.
        IF xkonp IS INITIAL.
          PERFORM make_res_entry.
          xresult-nkonpx = 'X'.
          MODIFY xresult INDEX res_tabix TRANSPORTING nkonpx.
          READ TABLE xkonp WITH KEY knumh = xvake-knumh BINARY SEARCH.
          IF sy-subrc EQ 0.
            xresult-nkonpx = 'O'.
            MODIFY xresult INDEX res_tabix TRANSPORTING nkonpx.
          ENDIF.
        ELSE.
* check kschl
          IF xvake-kschl NE xkonp-kschl AND schvak NE space.
            PERFORM make_res_entry.
            xresult-pkschl = xkonp-kschl.
            MODIFY xresult INDEX res_tabix TRANSPORTING pkschl.
          ENDIF.
        ENDIF.
      ENDIF.
* end of check KONP, KONM, KONW
      knumh_old = xvake-knumh.
    ENDLOOP.
* end of loop
  ENDIF.

  REFRESH xkoind.
  IF konadb NE space AND act_kvewe = 'E'.
    WRITE text-046 TO msg_text-procac.
    PERFORM gui_message USING msg_text.
    SORT xvake BY knuma kschl vakey.
    LOOP AT xvake WHERE kappl = 'V '.
      occ_error = space.
      act_tabix = sy-tabix + 1.
      READ TABLE xvake INDEX act_tabix INTO xxvake.
      IF sy-subrc EQ 0.                " not at the end
        IF xvake-knuma EQ xxvake-knuma AND
           xvake-kschl EQ xxvake-kschl AND
           xvake-vakey EQ xxvake-vakey.
          PERFORM make_res_entry.
          xresult-dknuma = xvake-knuma.
          MODIFY xresult INDEX res_tabix TRANSPORTING dknuma.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.
  IF konadb NE space AND act_kvewe = 'A'.
    WRITE text-046 TO msg_text-procac.
    PERFORM gui_message USING msg_text.
    LOOP AT xvake WHERE kappl = 'V '.
      SELECT knuma FROM konaind INTO xkoind-sknuma
        WHERE knumh = xvake-knumh.
        MOVE-CORRESPONDING xvake TO xkoind.
        APPEND xkoind.
      ENDSELECT.
    ENDLOOP.
* no consistency check for konaind
    IF sy-subrc EQ 0.
      SORT xkoind BY sknuma kschl vakey.
      LOOP AT xkoind.
        occ_error = space.
        act_tabix = sy-tabix + 1.
        READ TABLE xkoind INDEX act_tabix INTO xxkoind.
        IF sy-subrc EQ 0.              " not at the end
          IF xkoind-sknuma EQ xxkoind-sknuma AND
             xkoind-kschl EQ xxkoind-kschl AND
             xkoind-vakey EQ xxkoind-vakey.
            SELECT SINGLE abtyp FROM kona INTO kona-abtyp
                   WHERE knuma = xkoind-sknuma.
            IF sy-subrc EQ 0 AND kona-abtyp EQ 'C'.
              MOVE-CORRESPONDING xkoind TO xvake.
              PERFORM make_res_entry.
              xresult-dknuma = xkoind-sknuma.
              MODIFY xresult INDEX res_tabix TRANSPORTING dknuma.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDIF.
* end of konadb
  IF interv NE space.
    WRITE text-047 TO msg_text-procac.
    PERFORM gui_message USING msg_text.
    IF act_kvewe EQ 'E'.
      SORT xvake BY kvewe kotabnr kappl kschl vakey knuma datbi datab.
    ELSE.
      SORT xvake BY kvewe kotabnr kappl kschl vakey datbi datab.
    ENDIF.
    LOOP AT xvake.
      act_tabix = sy-tabix + 1.
      WHILE NOT ( xvake IS INITIAL ).
        occ_error = space.
        READ TABLE xvake INDEX act_tabix INTO xxvake.
        IF sy-subrc EQ 0.              " not at the end
          IF xvake-kvewe EQ xxvake-kvewe AND
             xvake-kotabnr EQ xxvake-kotabnr AND
             xvake-kappl EQ xxvake-kappl AND
             xvake-kschl EQ xxvake-kschl AND
             xvake-vakey EQ xxvake-vakey AND
           ( act_kvewe NE 'E' OR xvake-knuma EQ xxvake-knuma ).
            IF xvake-datbi GE xxvake-datab.
              PERFORM make_res_entry.
              xresult-iknumh = xxvake-knumh.
              xresult-idatab = xxvake-datab.
              xresult-idatbi = xxvake-datbi.
              MODIFY xresult INDEX res_tabix TRANSPORTING iknumh idatab
                                                          idatbi.
            ENDIF.
            ADD 1 TO act_tabix.
          ELSE.
            CLEAR xvake.
          ENDIF.
        ELSE.
          CLEAR xvake.
        ENDIF.
      ENDWHILE.
    ENDLOOP.
  ENDIF.
* end of interv
  IF nummch NE space AND NOT act_interval IS INITIAL.
    numkr-kotabnr = xt681-kotabnr.
    APPEND numkr.
  ENDIF.
ENDFORM.                    "CONDITIONS_ANAL

*---------------------------------------------------------------------*
*      Form  GET_MAXKNUMH                                             *
*---------------------------------------------------------------------*
FORM get_maxknumh.
  CALL FUNCTION 'NUMBER_GET_INFO'
    EXPORTING
      nr_range_nr        = con_range_nr
      object             = con_object
    IMPORTING
      interval           = act_interval
    EXCEPTIONS
      interval_not_found = 1
      object_not_found   = 2
      OTHERS             = 3.
  IF sy-subrc NE 0.
    MESSAGE i792.
    CLEAR act_interval.
  ENDIF.
ENDFORM.                    " GET_MAXKNUMH

*---------------------------------------------------------------------*
*      Form  GUI_MESSAGE                                              *
*---------------------------------------------------------------------*
FORM gui_message USING    p_msg_text.
  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      percentage = 0
      text       = p_msg_text
    EXCEPTIONS
      OTHERS     = 1.
ENDFORM.                    " GUI_MESSAGE

*---------------------------------------------------------------------*
*       FORM MAKE_RES_ENTRY                                           *
*---------------------------------------------------------------------*
FORM make_res_entry.
  CHECK occ_error EQ space.
  CLEAR xresult.
  MOVE-CORRESPONDING xvake TO xresult.
  APPEND xresult.
  res_tabix = sy-tabix.
  occ_error = 'X'.
  ADD 1 TO num_error.
  WRITE num_error TO msg_text-errcnt.
  PERFORM gui_message USING msg_text.
ENDFORM.                    "MAKE_RES_ENTRY
