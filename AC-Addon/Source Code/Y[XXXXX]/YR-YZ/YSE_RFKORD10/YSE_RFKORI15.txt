***INCLUDE RFKORI15 .

*-------Includes f¨¹r syntax-check---------------------------------------
*NCLUDE RFKORI00.
*NCLUDE RFKORI80.
*NCLUDE RFKORI90.
*----------------------------------------------------------------------*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
* MOD. NO.|  DATE    | NAME     |CORRECTION NUMBER| CHANGE REFERENCE # *
*----------------------------------------------------------------------*
* MOD-001 |2009.03.02|UZZAWAL   | iNCIDENT 3043   |   CD1K946706       *
*----------------------------------------------------------------------*

*=======================================================================
*       Interne Perform-Routinen
*=======================================================================

*-----------------------------------------------------------------------
*       FORM AUSGABE_KONTOAUSZUG
*-----------------------------------------------------------------------
FORM AUSGABE_KONTOAUSZUG.

  IF XKAUSG IS INITIAL.
    PERFORM FORM_START_AS.
    IF XSTART = 'J'.
      PERFORM FIND_SACHBEARBEITER.
      perform read_t001s.
      SAVE_USNAM = HDUSNAM.
      PERFORM PRUEFEN_HUSR03_2.
      IF XVORH2 IS INITIAL.
        PERFORM READ_USR03_2.
        CLEAR HUSR03.
        MOVE-CORRESPONDING *USR03 TO HUSR03.            "USR0340A
        APPEND HUSR03.
      ENDIF.
      COUNTM = COUNTM + 1.

      CLEAR RF140-AVSID.
      IF NOT SAVE_RXAVIS IS INITIAL.
        IF DAVSID IS INITIAL.
          IF SAVE_KOART = 'D'.
            SAVE_KONTO = SAVE_KUNNR.
          ELSE.
            SAVE_KONTO = SAVE_LIFNR.
          ENDIF.

          CLEAR   HAVICO.
          REFRESH HAVICO.

          LOOP AT HBSID.
            IF HBSID-AUGDT IS INITIAL
            OR HBSID-AUGDT GT DATUM02.
              MOVE-CORRESPONDING HBSID TO HAVICO.
              HAVICO-KOART = 'D'.
              APPEND HAVICO.
            ENDIF.
          ENDLOOP.
          LOOP AT DOPOS.
            IF DOPOS-AUGDT IS INITIAL
            OR DOPOS-AUGDT GT DATUM02.
              MOVE-CORRESPONDING DOPOS TO HAVICO.
              HAVICO-KOART = 'D'.
              APPEND HAVICO.
            ENDIF.
          ENDLOOP.
          LOOP AT DMPOS.
            IF DMPOS-AUGDT IS INITIAL
            OR DMPOS-AUGDT GT DATUM02.
              MOVE-CORRESPONDING DMPOS TO HAVICO.
              HAVICO-KOART = 'D'.
              APPEND HAVICO.
            ENDIF.
          ENDLOOP.

          LOOP AT HBSIK.
            IF HBSIK-AUGDT IS INITIAL
            OR HBSIK-AUGDT GT DATUM02.
              MOVE-CORRESPONDING HBSIK TO HAVICO.
              HAVICO-KOART = 'K'.
              APPEND HAVICO.
            ENDIF.
          ENDLOOP.
          LOOP AT KOPOS.
            IF KOPOS-AUGDT IS INITIAL
            OR KOPOS-AUGDT GT DATUM02.
              MOVE-CORRESPONDING KOPOS TO HAVICO.
              HAVICO-KOART = 'K'.
              APPEND HAVICO.
            ENDIF.
          ENDLOOP.
          LOOP AT KMPOS.
            IF KMPOS-AUGDT IS INITIAL
            OR KMPOS-AUGDT GT DATUM02.
              MOVE-CORRESPONDING KMPOS TO HAVICO.
              HAVICO-KOART = 'K'.
              APPEND HAVICO.
            ENDIF.
          ENDLOOP.

          loop at havico.
            if havico-bukrs ne *t001-bukrs.
              select single * from t001 into *t001
                where bukrs = havico-bukrs.
            endif.
            alw_waers = havico-waers.
            PERFORM CURRENCY_GET_SUBSEQUENT
                        USING
                           save_repid
                           datum02
                           havico-bukrs
                        CHANGING
                           alw_waers.
            if alw_waers ne havico-waers.
              PERFORM CONVERT_FOREIGN_TO_FOREIGN_CUR
                          USING
                             datum02
                             havico-waers
                             *t001-waers
                             alw_waers
                          CHANGING
                             havico-wrbtr.
              havico-waers = alw_waers.
              modify havico.
            endif.
          endloop.

          CALL FUNCTION 'REMADV_CORRESPONDENCE_INSERT'
               EXPORTING
                    I_VORID = '0001'   "Kontoauszug
                    I_BUKRS = SAVE_BUKRS
                    I_KOART = SAVE_KOART
                    I_KONTO = SAVE_KONTO
               IMPORTING
                    E_AVSID = RF140-AVSID
               TABLES
                    T_AVICO = HAVICO
               EXCEPTIONS
                    ERROR   = 1
                    OTHERS  = 0.

          IF SY-SUBRC = 0.
            CALL FUNCTION 'REMADV_SAVE_DB_ALL'
                 EXPORTING
                      I_DIALOG_UPDATE = 'X'
                      I_COMMIT        = ' '
                 EXCEPTIONS
                      OTHERS          = 1.
          ELSE.
            CLEAR FIMSG.
            FIMSG-MSGID = 'FB'.
            FIMSG-MSGTY = 'S'.
            FIMSG-MSGNO = '862'.
            FIMSG-MSGV1 = SAVE_BUKRS.
            FIMSG-MSGV2 = SAVE_KOART.
            FIMSG-MSGV3 = SAVE_KONTO.
            FIMSG-MSGV4 = '08'.
            PERFORM MESSAGE_COLLECT.
          ENDIF.

        ELSE.
          IF SAVE_KOART = 'D'.
            SAVE_KONTO = SAVE_KUNNR.
          ELSE.
            SAVE_KONTO = SAVE_LIFNR.
          ENDIF.

          CLEAR   HAVICO.
          REFRESH HAVICO.

          LOOP AT HBSID.
            IF HBSID-AUGDT IS INITIAL
            OR HBSID-AUGDT GT DATUM02.
              MOVE-CORRESPONDING HBSID TO HAVICO.
              HAVICO-KOART = 'D'.
              APPEND HAVICO.
            ENDIF.
          ENDLOOP.
          LOOP AT DOPOS.
            IF DOPOS-AUGDT IS INITIAL
            OR DOPOS-AUGDT GT DATUM02.
              MOVE-CORRESPONDING DOPOS TO HAVICO.
              HAVICO-KOART = 'D'.
              APPEND HAVICO.
            ENDIF.
          ENDLOOP.
          LOOP AT DMPOS.
            IF DMPOS-AUGDT IS INITIAL
            OR DMPOS-AUGDT GT DATUM02.
              MOVE-CORRESPONDING DMPOS TO HAVICO.
              HAVICO-KOART = 'D'.
              APPEND HAVICO.
            ENDIF.
          ENDLOOP.

          LOOP AT HBSIK.
            IF HBSIK-AUGDT IS INITIAL
            OR HBSIK-AUGDT GT DATUM02.
              MOVE-CORRESPONDING HBSIK TO HAVICO.
              HAVICO-KOART = 'K'.
              APPEND HAVICO.
            ENDIF.
          ENDLOOP.
          LOOP AT KOPOS.
            IF KOPOS-AUGDT IS INITIAL
            OR KOPOS-AUGDT GT DATUM02.
              MOVE-CORRESPONDING KOPOS TO HAVICO.
              HAVICO-KOART = 'K'.
              APPEND HAVICO.
            ENDIF.
          ENDLOOP.
          LOOP AT KMPOS.
            IF KMPOS-AUGDT IS INITIAL
            OR KMPOS-AUGDT GT DATUM02.
              MOVE-CORRESPONDING KMPOS TO HAVICO.
              HAVICO-KOART = 'K'.
              APPEND HAVICO.
            ENDIF.
          ENDLOOP.

          CLEAR   AVIK.
          CLEAR   HAVIP.
          REFRESH HAVIP.

          AVIK-BUKRS = SAVE_BUKRS.
          AVIK-KOART = SAVE_KOART.
          AVIK-KONTO = SAVE_KONTO.
          AVIK-AVSID = DAVSID.

          CALL FUNCTION 'REMADV_POSITIONS_READ'
               EXPORTING
                    I_AVIK        = AVIK
               TABLES
                    T_AVIP        = HAVIP
               EXCEPTIONS
                    NOTHING_FOUND = 1
                    OTHERS        = 2.

          LOOP AT HAVICO.
            LOOP AT HAVIP
              WHERE BELNR = HAVICO-BELNR
              AND   GJAHR = HAVICO-GJAHR
              AND   BUZEI = HAVICO-BUZEI.
              DELETE HAVIP.
              EXIT.
            ENDLOOP.
            IF SY-SUBRC = 0.
              DELETE HAVICO.
            ENDIF.
          ENDLOOP.

          DESCRIBE TABLE HAVICO LINES AV1LINES.
          DESCRIBE TABLE HAVIP  LINES AV2LINES.
          IF AV1LINES NE 0
          OR AV1LINES NE 0.
            CLEAR RF140-AVSID.

            CLEAR HBKORMKEY.
            CLEAR HERDATA.
            HBKORMKEY-BUKRS = HDBUKRS.
            HBKORMKEY-KOART = HDKOART.
            HBKORMKEY-KONTO = HDKONTO.
            HBKORMKEY-BELNR = DABELNR.
            HBKORMKEY-GJAHR = DAGJAHR.
            CONDENSE HBKORMKEY.
            HERDATA-USNAM = HDUSNAM.
            HERDATA-DATUM = HDDATUM.
            HERDATA-UZEIT = HDUZEIT.
            CLEAR FIMSG.
            FIMSG-MSORT = '    '. FIMSG-MSGID = 'FB'. FIMSG-MSGTY = 'S'.
            FIMSG-MSGNO = '863'.
            FIMSG-MSGV1 = DAVSID.
            FIMSG-MSGV2 = BKORM-EVENT.
            FIMSG-MSGV3 = HBKORMKEY.
            FIMSG-MSGV4 = HERDATA.
            PERFORM MESSAGE_COLLECT.

          ELSE.
            RF140-AVSID = DAVSID.
          ENDIF.
        ENDIF.
      ENDIF.

      IF NOT SAVE_RZLSCH IS INITIAL.
        CLEAR PAYMI.
        CLEAR XKAUSGZT.
        CALL FUNCTION 'PAYMENT_MEDIUM_INIT'
             IMPORTING
                  E_PAYMO = PAYMO
             EXCEPTIONS
                  OTHERS  = 0.
      ENDIF.

      CLEAR RF140-WAERS.
      CLEAR RF140-SALDO.
      CLEAR RF140-HWAER.
      CLEAR RF140-SALDOHW.
      CLEAR RF140-SALSK.
      CLEAR RF140-SALDN.

      CLEAR RF140-SPRAS.
      RF140-SPRAS = LANGUAGE.
      CLEAR RF140-KOART_F140.
      RF140-KOART_F140 = SAVE_KOART.

**      CALL FUNCTION 'WRITE_FORM'
**           EXPORTING
**                WINDOW = 'ADDRESS'
**           EXCEPTIONS
**                WINDOW = 1.
*                             UNOPENED  = 3
*                             UNSTARTET = 4.
      IF SY-SUBRC = 1.
        WINDOW = 'ADDRESS'.
        PERFORM MESSAGE_WINDOW.
      ENDIF.
*                    IF SY-SUBRC = 3.
*                      PERFORM MESSAGE_UNOPENED.
*                    ENDIF.
*                    IF SY-SUBRC = 4.
*                      PERFORM MESSAGE_UNSTARTED.
*                    ENDIF.
      IF OLDFORM IS INITIAL.
        IF SAVE_RXOPOL IS INITIAL.
          EREIGNIS = '503'.
        ELSE.
          EREIGNIS = '504'.
        ENDIF.

        CLEAR RF140-ELEMENT.
        RF140-ELEMENT = EREIGNIS.
**        CALL FUNCTION 'WRITE_FORM'
**             EXPORTING
**                  WINDOW   = 'INFO'
**                  ELEMENT  = EREIGNIS
**                  FUNCTION = 'APPEND'
**             EXCEPTIONS
**                  WINDOW   = 1
**                  ELEMENT  = 2.
        IF SY-SUBRC = 1.
          WINDOW = 'INFO'.
          PERFORM MESSAGE_WINDOW.
        ENDIF.
        IF SY-SUBRC = 2.
          WINDOW = 'INFO'.
          PERFORM MESSAGE_ELEMENT.
        ENDIF.
      ENDIF.
      IF NOT DKADR-EIKTO IS INITIAL
      OR NOT DKADR-ZSABE IS INITIAL.
        EREIGNIS = '505'.
      ELSE.
        EREIGNIS = '506'.
      ENDIF.

      CLEAR RF140-ELEMENT.
      RF140-ELEMENT = EREIGNIS.
**      CALL FUNCTION 'WRITE_FORM'
**           EXPORTING
**                WINDOW   = 'INFO'
**                ELEMENT  = EREIGNIS
**                FUNCTION = 'APPEND'
**           EXCEPTIONS
**                WINDOW   = 1
**                ELEMENT  = 2.
      IF SY-SUBRC = 1.
        WINDOW = 'INFO'.
        PERFORM MESSAGE_WINDOW.
      ENDIF.
      IF SY-SUBRC = 2.
        WINDOW = 'INFO'.
        PERFORM MESSAGE_ELEMENT.
      ENDIF.

*   CASE UNTYP.
*     WHEN ' '.
*       EREIGNIS = '510'.
*     WHEN 'F'.                                     "dezentrale Filale
*       EREIGNIS = '511'.
*   ENDCASE.
      IF SAVE_RXOPOL IS INITIAL.
        EREIGNIS = '510'.
      ELSE.
        EREIGNIS = '511'.
      ENDIF.
      CLEAR RF140-ELEMENT.
      RF140-ELEMENT = EREIGNIS.
**      CALL FUNCTION 'WRITE_FORM'
**           EXPORTING
**                WINDOW  = 'MAIN'
**                ELEMENT = EREIGNIS
**           EXCEPTIONS
**                WINDOW  = 1
**                ELEMENT = 2.
      IF SY-SUBRC = 1.
        WINDOW = 'MAIN'.
        PERFORM MESSAGE_WINDOW.
      ENDIF.
      IF SY-SUBRC = 2.
        WINDOW = 'MAIN'.
        PERFORM MESSAGE_ELEMENT.
      ENDIF.

      IF SAVE_RXOPOL IS INITIAL.
        EREIGNIS = '520'.
      ELSE.
        EREIGNIS = '523'.
      ENDIF.
      CLEAR RF140-ELEMENT.
      RF140-ELEMENT = EREIGNIS.
**      CALL FUNCTION 'WRITE_FORM'
**           EXPORTING
**                WINDOW  = 'MAIN'
**                ELEMENT = EREIGNIS
**           EXCEPTIONS
**                WINDOW  = 1
**                ELEMENT = 2.
      IF SY-SUBRC = 1.
        WINDOW = 'MAIN'.
        PERFORM MESSAGE_WINDOW.
      ENDIF.
      IF SY-SUBRC = 2.
        WINDOW = 'MAIN'.
        PERFORM MESSAGE_ELEMENT.
      ENDIF.

**      CALL FUNCTION 'WRITE_FORM'
**           EXPORTING
**                WINDOW  = 'MAIN'
**                ELEMENT = EREIGNIS
**                TYPE    = 'TOP'
**           EXCEPTIONS
**                WINDOW  = 1
**                ELEMENT = 2.
      IF SY-SUBRC = 1.
        WINDOW = 'MAIN'.
        PERFORM MESSAGE_WINDOW.
      ENDIF.
      IF SY-SUBRC = 2.
        WINDOW = 'MAIN'.
        PERFORM MESSAGE_ELEMENT.
      ENDIF.

      CLEAR   SALDOA.
      REFRESH SALDOA.
      CLEAR   SALDOE.
      REFRESH SALDOE.
      CLEAR   SALDOF.
      REFRESH SALDOF.
      CLEAR   SALDOM.
      REFRESH SALDOM.
      CLEAR   SALDOK.
      REFRESH SALDOK.
      REFRESH I_DOC.         " MOD-001  INCIDENT 3043

      IF SAVE_KOART = 'D'.
        LOOP AT DOPOS.
          if dopos-bukrs ne *t001-bukrs.
            select single * from t001 into *t001
              where bukrs = dopos-bukrs.
          endif.
          CLEAR RF140-NETDT.
          IF NOT SAVE_RXEKVB IS INITIAL.
            IF NOT XPKONT IS INITIAL.
              AT NEW <KONTO1>.
                CLEAR   SALDOK.
                REFRESH SALDOK.
              ENDAT.
            ENDIF.
          ENDIF.
          IF NOT XUMSKZ IS INITIAL.
            AT NEW <UMSKZ1>.
              IF NOT RXOPOS IS INITIAL
              OR NOT SAVE_RXOPOL IS INITIAL.
                CLEAR EREIGNIS.
                SAVE_UMSKZ = <UMSKZ1>.
                IF <UMSKZ1>    IS INITIAL.
                  EREIGNIS = '521'.
                ELSE.
                  EREIGNIS = '522'.
                  PERFORM READ_T074T.
                ENDIF.
                CLEAR RF140-ELEMENT.
                RF140-ELEMENT = EREIGNIS.
**                CALL FUNCTION 'WRITE_FORM'
**                     EXPORTING
**                          WINDOW  = 'MAIN'
**                          ELEMENT = EREIGNIS
**                     EXCEPTIONS
**                          WINDOW  = 1
**                          ELEMENT = 2.
                IF SY-SUBRC = 1.
                  WINDOW = 'MAIN'.
                  PERFORM MESSAGE_WINDOW.
                ENDIF.
                IF SY-SUBRC = 2.
                  WINDOW = 'MAIN'.
                  PERFORM MESSAGE_ELEMENT.
                ENDIF.

                CLEAR   SALDOZ.
                REFRESH SALDOZ.
              ENDIF.
            ENDAT.
          ENDIF.
          MOVE-CORRESPONDING DOPOS TO BSID.
          PERFORM FILL_WAEHRUNGSFELDER_BSIDK.
          PERFORM FILL_SKONTO_BSIDK.
          CLEAR RF140-WAERS.
          RF140-WAERS = BSID-WAERS.
*        IF BSID-BSTAT NE 'S'.
          IF BSID-SHKZG = 'S'.
            RF140-PSSHB = DOPOS-PSWBT.
            RF140-ZLSHB = DOPOS-NEBTR.
          ELSE.
            RF140-PSSHB = 0 - DOPOS-PSWBT.
            RF140-ZLSHB = 0 - DOPOS-NEBTR.
          ENDIF.
          *bsid  = bsid.
          *rf140 = rf140.
          alw_waers = bsid-waers.
          PERFORM CURRENCY_GET_SUBSEQUENT
                      USING
                         save_repid
                         datum02
                         bsid-bukrs
                      CHANGING
                         alw_waers.
          if alw_waers ne bsid-waers.
            bsid-waers = alw_waers.
            PERFORM CURR_DOCUMENT_CONVERT_BSid
                        USING
                           datum02
                           *bsid-waers
                           *t001-waers
                           bsid-waers
                        CHANGING
                           bsid.
            PERFORM FILL_WAEHRUNGSFELDER_BSIDK.
            PERFORM FILL_SKONTO_BSIDK.
            CLEAR RF140-WAERS.
            RF140-WAERS = BSID-WAERS.
            PERFORM CONVERT_FOREIGN_TO_FOREIGN_CUR
                        USING
                           datum02
                           *bsid-waers
                           *t001-waers
                           bsid-waers
                        CHANGING
                           dopos-nebtr.
                IF BSID-SHKZG = 'S'.
                  RF140-ZLSHB = DOPOS-NEBTR.
                ELSE.
                  RF140-ZLSHB = 0 - DOPOS-NEBTR.
                ENDIF.
            endif.
*           IF  BSID-AUGDT IS INITIAL
*           OR  BSID-AUGDT GT SAVE2_DATUM.
              alw_waers = dopos-pswsl.
              PERFORM CURRENCY_GET_SUBSEQUENT
                          USING
                             save_repid
                             datum02
                             bsid-bukrs
                          CHANGING
                             alw_waers.
              if alw_waers ne dopos-pswsl.
                PERFORM CONVERT_FOREIGN_TO_FOREIGN_CUR
                            USING
                               datum02
                               dopos-pswsl
                               *t001-waers
                               alw_waers
                            CHANGING
                               dopos-pswbt.
                dopos-pswsl = alw_waers.
                bsid-pswsl  = alw_waers.
                bsid-pswbt  = dopos-pswbt.
                IF BSID-SHKZG = 'S'.
                  RF140-PSSHB = DOPOS-PSWBT.
                ELSE.
                  RF140-PSSHB = 0 - DOPOS-PSWBT.
                ENDIF.
            endif.
*           endif.
*         endif.
          clear saldoa.
          MOVE DOPOS-PSWSL  TO SALDOA-WAERS.
          MOVE RF140-DMSHB  TO SALDOA-SALDOH.
          MOVE RF140-PSSHB  TO SALDOA-SALDOW.
          IF ( BSID-AUGDT IS INITIAL
          OR   BSID-AUGDT GT SAVE2_DATUM )
          AND NOT SAVE_RXOPOL IS INITIAL.
            MOVE RF140-WSKTA  TO SALDOA-SALSK.
            MOVE RF140-WRSHN  TO SALDOA-SALDN.
          ENDIF.
          COLLECT SALDOA.
          clear saldoe.
          MOVE DOPOS-PSWSL  TO SALDOE-WAERS.
          MOVE RF140-DMSHB  TO SALDOE-SALDOH.
          MOVE RF140-PSSHB  TO SALDOE-SALDOW.
          IF  BSID-AUGDT IS INITIAL
          OR  BSID-AUGDT GT SAVE2_DATUM.
            MOVE RF140-WSKTA  TO SALDOE-SALSK.
            MOVE RF140-WRSHN  TO SALDOE-SALDN.
          ENDIF.
          COLLECT SALDOE.
          clear saldoz.
          MOVE DOPOS-PSWSL  TO SALDOZ-WAERS.
          MOVE RF140-DMSHB  TO SALDOZ-SALDOH.
          MOVE RF140-PSSHB  TO SALDOZ-SALDOW.
          IF  BSID-AUGDT IS INITIAL
          OR  BSID-AUGDT GT SAVE2_DATUM.
            MOVE RF140-WSKTA  TO SALDOZ-SALSK.
            MOVE RF140-WRSHN  TO SALDOZ-SALDN.
          ENDIF.
          COLLECT SALDOZ.
          clear saldok.
          MOVE DOPOS-KUNNR  TO SALDOK-KONTO.
          MOVE DOPOS-PSWSL  TO SALDOK-WAERS.
          MOVE RF140-DMSHB  TO SALDOK-SALDOH.
          MOVE RF140-PSSHB  TO SALDOK-SALDOW.
          IF DOPOS-SHKZG = 'S'.
            MOVE RF140-PSSHB  TO SALDOK-SALDOP.
            clear SALDOK-SALDOn.
          ELSE.
            clear SALDOK-SALDOp.
            MOVE RF140-PSSHB  TO SALDOK-SALDON.
          ENDIF.
          MOVE RF140-ZLSHB  TO SALDOK-NEBTR.
          COLLECT SALDOK.
*        ENDIF.
          IF NOT RF140-VSTID IS INITIAL.
            IF DOPOS-VZTAS IS INITIAL.
              CLEAR RF140-VZTAS.
              RF140-NETDT = DOPOS-NETDT.
            ELSE.
              RF140-VZTAS = DOPOS-VZTAS.
              RF140-NETDT = DOPOS-NETDT.
            ENDIF.
            IF DOPOS-AUGBL IS INITIAL
            OR ( DOPOS-AUGDT GT RF140-VSTID
                 AND NOT RVZTAG IS INITIAL ).
              IF RF140-VZTAS GE '0'.
                clear saldof.
                MOVE DOPOS-PSWSL  TO SALDOF-WAERS.
                MOVE RF140-DMSHB  TO SALDOF-SALDOH.
                MOVE RF140-PSSHB  TO SALDOF-SALDOW.
                MOVE RF140-WSKTA  TO SALDOF-SALSK.
                MOVE RF140-WRSHN  TO SALDOF-SALDN.
                COLLECT SALDOF.
              ENDIF.
            ENDIF.
          ENDIF.
          IF BSID-SGTXT(1) NE '*'.
            BSID-SGTXT = SPACE.
          ELSE.
            BSID-SGTXT = BSID-SGTXT+1.
          ENDIF.
          IF BSID-XBLNR IS INITIAL.
            MOVE BSID-BELNR TO RF140-BELEGNUM.
          ELSE.
            MOVE BSID-XBLNR TO RF140-BELEGNUM.
          ENDIF.
          CLEAR SAVE_BLART.
          SAVE_BLART = BSID-BLART.
          PERFORM READ_T003T.
          SAVE_BSCHL = BSID-BSCHL.
          PERFORM READ_TBSLT.
          CLEAR EREIGNIS.
          IF BSID-AUGBL IS INITIAL.
            EREIGNIS = '530'.
          ELSE.
            EREIGNIS = '531'.
          ENDIF.
          IF NOT RXOPOS IS INITIAL
          OR NOT SAVE_RXOPOL IS INITIAL.
            CLEAR RF140-ELEMENT.
            RF140-ELEMENT = EREIGNIS.
            IF  ( SAVE_RXEKVB NE SPACE
            AND   RXEKEP = '1'
            AND   BSID-KUNNR NE SAVE_KUNNR )
            OR  ( SAVE_RXEKVB NE SPACE
            AND   RXEKEP = '2' ).
            ELSE.
**              CALL FUNCTION 'WRITE_FORM'
**                   EXPORTING
**                        WINDOW  = 'MAIN'
**                        ELEMENT = EREIGNIS
**                   EXCEPTIONS
**                        WINDOW  = 1
**                        ELEMENT = 2.
              IF SY-SUBRC = 1.
                WINDOW = 'MAIN'.
                PERFORM MESSAGE_WINDOW.
              ENDIF.
              IF SY-SUBRC = 2.
                WINDOW = 'MAIN'.
                PERFORM MESSAGE_ELEMENT.
              ENDIF.
            ENDIF.
          ENDIF.
          IF NOT XUMSKZ IS INITIAL.
            AT END OF <UMSKZ1>.
              IF NOT RXOPOS IS INITIAL
              OR NOT SAVE_RXOPOL IS INITIAL.
              clear: *rf140-waers, *rf140-saldo, *rf140-hwaer,
                     *rf140-saldohw, *rf140-salsk, *rf140-saldn.
                LOOP AT SALDOZ.
                  MOVE SALDOZ-WAERS  TO RF140-WAERS.
                  MOVE SALDOZ-SALDOW TO RF140-SALDO.
                  MOVE T001-WAERS    TO RF140-HWAER.
                  MOVE SALDOZ-SALDOH TO RF140-SALDOHW.
                  MOVE SALDOZ-SALSK  TO RF140-SALSK.
                  MOVE SALDOZ-SALDN  TO RF140-SALDN.
                  CLEAR EREIGNIS.
                  IF SY-TABIX = '1'.
                    EREIGNIS = '544'.
                  ELSE.
                    EREIGNIS = '545'.
                  ENDIF.
                  CLEAR RF140-ELEMENT.
                  RF140-ELEMENT = EREIGNIS.
**                  CALL FUNCTION 'WRITE_FORM'
**                       EXPORTING
**                            WINDOW  = 'MAIN'
**                            ELEMENT = EREIGNIS
**                       EXCEPTIONS
**                            WINDOW  = 1
**                            ELEMENT = 2.
                  IF SY-SUBRC = 1.
                    WINDOW = 'MAIN'.
                    PERFORM MESSAGE_WINDOW.
                  ENDIF.
                  IF SY-SUBRC = 2.
                    WINDOW = 'MAIN'.
                    PERFORM MESSAGE_ELEMENT.
                  ENDIF.
                ENDLOOP.
              ENDIF.
            ENDAT.
          ENDIF.
          IF NOT SAVE_RXEKVB IS INITIAL.
            IF NOT XPKONT IS INITIAL.
              AT END OF <KONTO1>.
                IF  RXEKEP IS INITIAL
                AND RXEKSU IS INITIAL.
                ELSE.
                  IF NOT RXOPOS IS INITIAL
                  OR NOT SAVE_RXOPOL IS INITIAL.
                    SORT SALDOK BY WAERS.
                    PERFORM PROTECT.
                 clear: *rf140-waers, *rf140-saldo, *rf140-hwaer,
                        *rf140-saldohw, *rf140-salsk, *rf140-saldn,
                        *rf140-salds, *rf140-saldh, *rf140-zlshb,
                        *rf140-konto.
                    LOOP AT SALDOK.
*              IF  ( RXEKEP = '1'
*              AND SALDOK-KONTO =  SAVE_KUNNR
*              AND     RXEKSU IS INITIAL ).
*              ELSE.
                      MOVE SALDOK-KONTO  TO RF140-KONTO.
                      MOVE SALDOK-WAERS  TO RF140-WAERS.
                      MOVE SALDOK-SALDOW TO RF140-SALDO.
                      MOVE T001-WAERS    TO RF140-HWAER.
                      MOVE SALDOK-SALDOH TO RF140-SALDOHW.
                      MOVE SALDOK-SALDOP TO RF140-SALDS.
                      MOVE SALDOK-SALDON TO RF140-SALDH.
                      MOVE SALDOK-NEBTR  TO RF140-ZLSHB.
                      IF SY-TABIX = '1'.
                        EREIGNIS = '567'.
                        CLEAR RF140-ELEMENT.
                        RF140-ELEMENT = EREIGNIS.
**                        CALL FUNCTION 'WRITE_FORM'
**                             EXPORTING
**                                  WINDOW  = 'MAIN'
**                                  ELEMENT = EREIGNIS
**                             EXCEPTIONS
**                                  WINDOW  = 1
**                                  ELEMENT = 2.
                        IF SY-SUBRC = 1.
                          WINDOW = 'MAIN'.
                          PERFORM MESSAGE_WINDOW.
                        ENDIF.
                        IF SY-SUBRC = 2.
                          WINDOW = 'MAIN'.
                          PERFORM MESSAGE_ELEMENT.
                        ENDIF.
                      ELSE.
                        EREIGNIS = '568'.
                        CLEAR RF140-ELEMENT.
                        RF140-ELEMENT = EREIGNIS.
**                        CALL FUNCTION 'WRITE_FORM'
**                             EXPORTING
**                                  WINDOW  = 'MAIN'
**                                  ELEMENT = EREIGNIS
**                             EXCEPTIONS
**                                  WINDOW  = 1
**                                  ELEMENT = 2.
                        IF SY-SUBRC = 1.
                          WINDOW = 'MAIN'.
                          PERFORM MESSAGE_WINDOW.
                        ENDIF.
                        IF SY-SUBRC = 2.
                          WINDOW = 'MAIN'.
                          PERFORM MESSAGE_ELEMENT.
                        ENDIF.
                      ENDIF.
*              ENDIF.
                    ENDLOOP.
                    PERFORM ENDPROTECT.
                  ENDIF.
                ENDIF.
              ENDAT.
            ENDIF.
          ENDIF.
* begin insert pml 230207
            wa_doc-xblnr = dopos-belnr.
            wa_doc-belegnum = dopos-xblnr.
            wa_doc-bldat = dopos-bldat.
            CALL FUNCTION 'NET_DUE_DATE_GET'
              EXPORTING
                i_zfbdt       = dopos-zfbdt
                i_zbd1t       = dopos-zbd1t
                i_zbd2t       = dopos-zbd2t
                i_zbd3t       = dopos-zbd3t
                i_shkzg       = dopos-shkzg
                i_rebzg       = dopos-rebzg
*               I_KOART       = 'D'
             IMPORTING
               E_FAEDT       = wa_doc-netdt
                      .
            wa_doc-vztas =  rf140-stida - wa_doc-netdt.
            wa_doc-waers = dopos-waers.
            wa_doc-wrbtr = dopos-wrbtr.
            if dopos-SHKZG = 'H'.
              wa_doc-wrbtr = wa_doc-wrbtr * -1 .
            endif.
            append wa_doc to i_doc.
            CLEAR WA_DOC.           " MOD-001  INCIDENT 3043
* end insert pml 230207
        ENDLOOP.
      ELSE.
        LOOP AT KOPOS.
          if *t001-bukrs ne kopos-bukrs.
            select single * from t001 into *t001
              where bukrs = kopos-bukrs.
          endif.
          CLEAR RF140-NETDT.
          IF NOT XUMSKZ IS INITIAL.
            AT NEW <UMSKZ2>.
              IF NOT RXOPOS IS INITIAL
              OR NOT SAVE_RXOPOL IS INITIAL.
                CLEAR EREIGNIS.
                SAVE_UMSKZ = <UMSKZ2>.
                IF <UMSKZ2>    IS INITIAL.
                  EREIGNIS = '521'.
                ELSE.
                  EREIGNIS = '522'.
                  PERFORM READ_T074T.
                ENDIF.
                CLEAR RF140-ELEMENT.
                RF140-ELEMENT = EREIGNIS.
**                CALL FUNCTION 'WRITE_FORM'
**                     EXPORTING
**                          WINDOW  = 'MAIN'
**                          ELEMENT = EREIGNIS
**                     EXCEPTIONS
**                          WINDOW  = 1
**                          ELEMENT = 2.
                IF SY-SUBRC = 1.
                  WINDOW = 'MAIN'.
                  PERFORM MESSAGE_WINDOW.
                ENDIF.
                IF SY-SUBRC = 2.
                  WINDOW = 'MAIN'.
                  PERFORM MESSAGE_ELEMENT.
                ENDIF.

                CLEAR   SALDOZ.
                REFRESH SALDOZ.
              ENDIF.
            ENDAT.
          ENDIF.
          MOVE-CORRESPONDING KOPOS TO BSIK.
          PERFORM FILL_WAEHRUNGSFELDER_BSIDK.
          PERFORM FILL_SKONTO_BSIDK.
          CLEAR RF140-WAERS.
          RF140-WAERS = BSIK-WAERS.
*        IF BSIK-BSTAT NE 'S'.
          IF BSIK-SHKZG = 'S'.
            RF140-PSSHB = KOPOS-PSWBT.
            RF140-ZLSHB = KOPOS-NEBTR.
          ELSE.
            RF140-PSSHB = 0 - KOPOS-PSWBT.
            RF140-ZLSHB = 0 - KOPOS-NEBTR.
          ENDIF.
          *bsik  = bsik.
          *rf140 = rf140.
          alw_waers = bsik-waers.
          PERFORM CURRENCY_GET_SUBSEQUENT
                      USING
                         save_repid
                         datum02
                         bsik-bukrs
                      CHANGING
                         alw_waers.
          if alw_waers ne bsik-waers.
            bsik-waers = alw_waers.
            PERFORM CURR_DOCUMENT_CONVERT_BSik
                        USING
                           datum02
                           *bsik-waers
                           *t001-waers
                           bsik-waers
                        CHANGING
                           bsik.
            PERFORM FILL_WAEHRUNGSFELDER_BSIDK.
            PERFORM FILL_SKONTO_BSIDK.
            CLEAR RF140-WAERS.
            RF140-WAERS = BSIk-WAERS.
            PERFORM CONVERT_FOREIGN_TO_FOREIGN_CUR
                        USING
                           datum02
                           *bsik-waers
                           *t001-waers
                           bsik-waers
                        CHANGING
                           kopos-nebtr.
                IF BSIk-SHKZG = 'S'.
                  RF140-ZLSHB = kOPOS-NEBTR.
                ELSE.
                  RF140-ZLSHB = 0 - kOPOS-NEBTR.
                ENDIF.
          endif.
*           IF  BSIk-AUGDT IS INITIAL
*           OR  BSIk-AUGDT GT SAVE2_DATUM.
              alw_waers = kopos-pswsl.
              PERFORM CURRENCY_GET_SUBSEQUENT
                          USING
                             save_repid
                             datum02
                             bsik-bukrs
                          CHANGING
                             alw_waers.
              if alw_waers ne kopos-pswsl.
                PERFORM CONVERT_FOREIGN_TO_FOREIGN_CUR
                            USING
                               datum02
                               kopos-pswsl
                               *t001-waers
                               alw_waers
                            CHANGING
                               kopos-pswbt.
                kopos-pswsl = alw_waers.
                bsik-pswsl  = alw_waers.
                bsik-pswbt  = kopos-pswbt.
                IF BSIk-SHKZG = 'S'.
                  RF140-PSSHB = kOPOS-PSWBT.
                ELSE.
                  RF140-PSSHB = 0 - kOPOS-PSWBT.
                ENDIF.
*           endif.
            endif.
*         endif.
          clear saldoa.
          MOVE kOPOS-PSWSL  TO SALDOA-WAERS.
          MOVE RF140-DMSHB  TO SALDOA-SALDOH.
          MOVE RF140-PSSHB  TO SALDOA-SALDOW.
          IF ( BSIK-AUGDT IS INITIAL
          OR   BSIK-AUGDT GT SAVE2_DATUM )
          AND NOT SAVE_RXOPOL IS INITIAL.
            MOVE RF140-WSKTA  TO SALDOA-SALSK.
            MOVE RF140-WRSHN  TO SALDOA-SALDN.
          ENDIF.
          COLLECT SALDOA.
          clear saldoe.
          MOVE KOPOS-PSWSL  TO SALDOE-WAERS.
          MOVE RF140-DMSHB  TO SALDOE-SALDOH.
          MOVE RF140-PSSHB  TO SALDOE-SALDOW.
          IF BSIK-AUGDT IS INITIAL
          OR BSIK-AUGDT GT SAVE2_DATUM.
            MOVE RF140-WSKTA  TO SALDOE-SALSK.
            MOVE RF140-WRSHN  TO SALDOE-SALDN.
          ENDIF.
          COLLECT SALDOE.
          clear saldoz.
          MOVE KOPOS-PSWSL  TO SALDOZ-WAERS.
          MOVE RF140-DMSHB  TO SALDOZ-SALDOH.
          MOVE RF140-PSSHB  TO SALDOZ-SALDOW.
          IF  BSIK-AUGDT IS INITIAL
          OR  BSIK-AUGDT GT SAVE2_DATUM.
            MOVE RF140-WSKTA  TO SALDOZ-SALSK.
            MOVE RF140-WRSHN  TO SALDOZ-SALDN.
          ENDIF.
          COLLECT SALDOZ.
*        ENDIF.
          IF NOT RF140-VSTID IS INITIAL.
            IF KOPOS-VZTAS IS INITIAL.
              CLEAR RF140-VZTAS.
              RF140-NETDT = KOPOS-NETDT.
            ELSE.
              RF140-VZTAS = KOPOS-VZTAS.
              RF140-NETDT = KOPOS-NETDT.
            ENDIF.
            IF KOPOS-AUGBL IS INITIAL
            OR ( KOPOS-AUGDT GT RF140-VSTID
                AND NOT RVZTAG IS INITIAL ).
              IF RF140-VZTAS GE '0'.
                clear saldof.
                MOVE KOPOS-PSWSL  TO SALDOF-WAERS.
                MOVE RF140-DMSHB  TO SALDOF-SALDOH.
                MOVE RF140-PSSHB  TO SALDOF-SALDOW.
                MOVE RF140-WSKTA  TO SALDOF-SALSK.
                MOVE RF140-WRSHN  TO SALDOF-SALDN.
                COLLECT SALDOF.
              ENDIF.
            ENDIF.
          ENDIF.
          IF BSIK-SGTXT(1) NE '*'.
            BSIK-SGTXT = SPACE.
          ELSE.
            BSIK-SGTXT = BSIK-SGTXT+1.
          ENDIF.
          IF BSIK-XBLNR IS INITIAL.
            MOVE BSIK-BELNR TO RF140-BELEGNUM.
          ELSE.
            MOVE BSIK-XBLNR TO RF140-BELEGNUM.
          ENDIF.
          CLEAR SAVE_BLART.
          SAVE_BLART = BSIK-BLART.
          PERFORM READ_T003T.
          SAVE_BSCHL = BSIK-BSCHL.
          PERFORM READ_TBSLT.
          IF BSIK-AUGBL IS INITIAL.
            EREIGNIS = '532'.
          ELSE.
            EREIGNIS = '533'.
          ENDIF.
          IF NOT RXOPOS IS INITIAL
          OR NOT SAVE_RXOPOL IS INITIAL.
            CLEAR RF140-ELEMENT.
            RF140-ELEMENT = EREIGNIS.
**            CALL FUNCTION 'WRITE_FORM'
**                 EXPORTING
**                      WINDOW  = 'MAIN'
**                      ELEMENT = EREIGNIS
**                 EXCEPTIONS
**                      WINDOW  = 1
**                      ELEMENT = 2.
            IF SY-SUBRC = 1.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_WINDOW.
            ENDIF.
            IF SY-SUBRC = 2.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_ELEMENT.
            ENDIF.
          ENDIF.
          IF NOT XUMSKZ IS INITIAL.
            AT END OF <UMSKZ2>.
              IF NOT RXOPOS IS INITIAL
              OR NOT SAVE_RXOPOL IS INITIAL.
              clear: *rf140-waers, *rf140-saldo, *rf140-hwaer,
                     *rf140-saldohw, *rf140-salsk, *rf140-saldn.
                LOOP AT SALDOZ.
                  MOVE SALDOZ-WAERS  TO RF140-WAERS.
                  MOVE SALDOZ-SALDOW TO RF140-SALDO.
                  MOVE T001-WAERS    TO RF140-HWAER.
                  MOVE SALDOZ-SALDOH TO RF140-SALDOHW.
                  MOVE SALDOZ-SALSK  TO RF140-SALSK.
                  MOVE SALDOZ-SALDN  TO RF140-SALDN.
                  CLEAR EREIGNIS.
                  IF SY-TABIX = '1'.
                    EREIGNIS = '544'.
                  ELSE.
                    EREIGNIS = '545'.
                  ENDIF.
                  CLEAR RF140-ELEMENT.
                  RF140-ELEMENT = EREIGNIS.
**                  CALL FUNCTION 'WRITE_FORM'
**                       EXPORTING
**                            WINDOW  = 'MAIN'
**                            ELEMENT = EREIGNIS
**                       EXCEPTIONS
**                            WINDOW  = 1
**                            ELEMENT = 2.
                  IF SY-SUBRC = 1.
                    WINDOW = 'MAIN'.
                    PERFORM MESSAGE_WINDOW.
                  ENDIF.
                  IF SY-SUBRC = 2.
                    WINDOW = 'MAIN'.
                    PERFORM MESSAGE_ELEMENT.
                  ENDIF.
                ENDLOOP.
              ENDIF.
            ENDAT.
          ENDIF.
* begin insert pml 230207
            wa_doc-xblnr = kopos-belnr.
            wa_doc-belegnum = kopos-xblnr.
            wa_doc-bldat = kopos-bldat.
            CALL FUNCTION 'NET_DUE_DATE_GET'
              EXPORTING
                i_zfbdt       = kopos-zfbdt
                i_zbd1t       = kopos-zbd1t
                i_zbd2t       = kopos-zbd2t
                i_zbd3t       = kopos-zbd3t
                i_shkzg       = kopos-shkzg
                i_rebzg       = kopos-rebzg
                I_KOART       = 'K'
             IMPORTING
               E_FAEDT       = wa_doc-netdt
                      .
            wa_doc-vztas =  rf140-stida - wa_doc-netdt.
            wa_doc-waers = kopos-waers.
            wa_doc-wrbtr = kopos-wrbtr.
            if dopos-SHKZG = 'H'.
              wa_doc-wrbtr = wa_doc-wrbtr * -1 .
            endif.
            append wa_doc to i_doc.
            CLEAR WA_DOC.              " MOD-001  INCIDENT 3043
* end insert pml 230207
        ENDLOOP.
      ENDIF.

      DESCRIBE TABLE SALDOA LINES SLDALINES.
      IF SLDALINES GT 0.
        SORT SALDOA BY WAERS.
        PERFORM PROTECT.
              clear: *rf140-waers, *rf140-saldo, *rf140-hwaer,
                     *rf140-saldohw, *rf140-salsk, *rf140-saldn.
        LOOP AT SALDOA.
          MOVE SALDOA-WAERS  TO RF140-WAERS.
          MOVE SALDOA-SALDOW TO RF140-SALDO.
          MOVE T001-WAERS    TO RF140-HWAER.
          MOVE SALDOA-SALDOH TO RF140-SALDOHW.
          IF NOT SAVE_RXOPOL IS INITIAL.
            MOVE SALDOA-SALSK  TO RF140-SALSK.
            MOVE SALDOA-SALDN  TO RF140-SALDN.
          ENDIF.
          IF SY-TABIX = '1'.
            IF SAVE_RXOPOL IS INITIAL.
              EREIGNIS = '540'.
            ELSE.
              EREIGNIS = '553'.
            ENDIF.
            CLEAR RF140-ELEMENT.
            RF140-ELEMENT = EREIGNIS.
**            CALL FUNCTION 'WRITE_FORM'
**                 EXPORTING
**                      WINDOW  = 'MAIN'
**                      ELEMENT = EREIGNIS
**                 EXCEPTIONS
**                      WINDOW  = 1
**                      ELEMENT = 2.
            IF SY-SUBRC = 1.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_WINDOW.
            ENDIF.
            IF SY-SUBRC = 2.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_ELEMENT.
            ENDIF.
          ELSE.
            IF SAVE_RXOPOL IS INITIAL.
              EREIGNIS = '541'.
            ELSE.
              EREIGNIS = '554'.
            ENDIF.
            CLEAR RF140-ELEMENT.
            RF140-ELEMENT = EREIGNIS.
**            CALL FUNCTION 'WRITE_FORM'
**                 EXPORTING
**                      WINDOW  = 'MAIN'
**                      ELEMENT = EREIGNIS
**                 EXCEPTIONS
**                      WINDOW  = 1
**                      ELEMENT = 2.
            IF SY-SUBRC = 1.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_WINDOW.
            ENDIF.
            IF SY-SUBRC = 2.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_ELEMENT.
            ENDIF.
          ENDIF.
        ENDLOOP.
        PERFORM ENDPROTECT.
      ELSE.
        CLEAR RF140-WAERS.
        CLEAR RF140-SALDO.
        CLEAR RF140-HWAER.
        CLEAR RF140-SALDOHW.
        IF SAVE_RXOPOL IS INITIAL.
          CLEAR RF140-ELEMENT.
          RF140-ELEMENT = '542'.
          MOVE T001-WAERS    TO RF140-waers.
          MOVE T001-WAERS    TO RF140-HWAER.
**          CALL FUNCTION 'WRITE_FORM'
**               EXPORTING
**                    WINDOW  = 'MAIN'
**                    ELEMENT = '542'
**               EXCEPTIONS
**                    WINDOW  = 1
**                    ELEMENT = 2.
          IF SY-SUBRC = 1.
            WINDOW = 'MAIN'.
            PERFORM MESSAGE_WINDOW.
          ENDIF.
          IF SY-SUBRC = 2.
            WINDOW = 'MAIN'.
            EREIGNIS = '542'.
            PERFORM MESSAGE_ELEMENT.
          ENDIF.
          CLEAR RF140-ELEMENT.
          RF140-ELEMENT = '543'.
**          CALL FUNCTION 'WRITE_FORM'
**               EXPORTING
**                    WINDOW  = 'MAIN'
**                    ELEMENT = '543'
**               EXCEPTIONS
**                    WINDOW  = 1
**                    ELEMENT = 2.
          IF SY-SUBRC = 1.
            WINDOW = 'MAIN'.
            PERFORM MESSAGE_WINDOW.
          ENDIF.
          IF SY-SUBRC = 2.
            WINDOW = 'MAIN'.
            EREIGNIS = '543'.
            PERFORM MESSAGE_ELEMENT.
          ENDIF.
        ELSE.
          CLEAR RF140-ELEMENT.
          RF140-ELEMENT = '535'.
**          CALL FUNCTION 'WRITE_FORM'
**               EXPORTING
**                    WINDOW  = 'MAIN'
**                    ELEMENT = '535'
**               EXCEPTIONS
**                    WINDOW  = 1
**                    ELEMENT = 2.
          IF SY-SUBRC = 1.
            WINDOW = 'MAIN'.
            PERFORM MESSAGE_WINDOW.
          ENDIF.
          IF SY-SUBRC = 2.
            WINDOW = 'MAIN'.
            EREIGNIS = '535'.
            PERFORM MESSAGE_ELEMENT.
          ENDIF.

          CLEAR RF140-ELEMENT.
          RF140-ELEMENT = '555'.
          MOVE T001-WAERS    TO RF140-waers.
          MOVE T001-WAERS    TO RF140-HWAER.
**          CALL FUNCTION 'WRITE_FORM'
**               EXPORTING
**                    WINDOW  = 'MAIN'
**                    ELEMENT = '555'
**               EXCEPTIONS
**                    WINDOW  = 1
**                    ELEMENT = 2.
          IF SY-SUBRC = 1.
            WINDOW = 'MAIN'.
            PERFORM MESSAGE_WINDOW.
          ENDIF.
          IF SY-SUBRC = 2.
            WINDOW = 'MAIN'.
            EREIGNIS = '555'.
            PERFORM MESSAGE_ELEMENT.
          ENDIF.
        ENDIF.
      ENDIF.

      IF SAVE_KOART = 'D'.
        IF NOT AIDLINES IS INITIAL.
          LOOP AT HBSID.
            if *t001-bukrs ne hbsid-bukrs.
              select single * from t001 into *t001
                where bukrs = hbsid-bukrs.
            endif.
            CLEAR RF140-NETDT.
            IF NOT SAVE_RXEKVB IS INITIAL.
              IF NOT XPKONT IS INITIAL.
                AT NEW <KONTO3>.
                  CLEAR   SALDOK.
                  REFRESH SALDOK.
                ENDAT.
              ENDIF.
            ENDIF.
            IF NOT XUMSKZ IS INITIAL.
              AT NEW <UMSKZ3>.
                CLEAR EREIGNIS.
                SAVE_UMSKZ = <UMSKZ3>.
                IF <UMSKZ3>    IS INITIAL.
                  EREIGNIS = '521'.
                ELSE.
                  EREIGNIS = '522'.
                  PERFORM READ_T074T.
                ENDIF.
                CLEAR RF140-ELEMENT.
                RF140-ELEMENT = EREIGNIS.
**                CALL FUNCTION 'WRITE_FORM'
**                     EXPORTING
**                          WINDOW  = 'MAIN'
**                          ELEMENT = EREIGNIS
**                     EXCEPTIONS
**                          WINDOW  = 1
**                          ELEMENT = 2.
                IF SY-SUBRC = 1.
                  WINDOW = 'MAIN'.
                  PERFORM MESSAGE_WINDOW.
                ENDIF.
                IF SY-SUBRC = 2.
                  WINDOW = 'MAIN'.
                  PERFORM MESSAGE_ELEMENT.
                ENDIF.

                CLEAR   SALDOZ.
                REFRESH SALDOZ.
              ENDAT.
            ENDIF.
            MOVE-CORRESPONDING HBSID TO BSID.
            PERFORM FILL_WAEHRUNGSFELDER_BSIDK.
            PERFORM FILL_SKONTO_BSIDK.
            CLEAR RF140-WAERS.
            RF140-WAERS = BSID-WAERS.
*          IF BSID-BSTAT NE 'S'.
            IF BSID-SHKZG = 'S'.
              RF140-PSSHB = HBSID-PSWBT.
              RF140-ZLSHB = HBSID-NEBTR.
            ELSE.
              RF140-PSSHB = 0 - HBSID-PSWBT.
              RF140-ZLSHB = 0 - HBSID-NEBTR.
            ENDIF.
          *bsid  = bsid.
          *rf140 = rf140.
          alw_waers = bsid-waers.
          PERFORM CURRENCY_GET_SUBSEQUENT
                      USING
                         save_repid
                         datum02
                         bsid-bukrs
                      CHANGING
                         alw_waers.
          if alw_waers ne bsid-waers.
            bsid-waers = alw_waers.
            PERFORM CURR_DOCUMENT_CONVERT_BSid
                        USING
                           datum02
                           *bsid-waers
                           *t001-waers
                           bsid-waers
                        CHANGING
                           bsid.
            PERFORM FILL_WAEHRUNGSFELDER_BSIDK.
            PERFORM FILL_SKONTO_BSIDK.
            CLEAR RF140-WAERS.
            RF140-WAERS = BSID-WAERS.
            PERFORM CONVERT_FOREIGN_TO_FOREIGN_CUR
                        USING
                           datum02
                           *bsid-waers
                           *t001-waers
                           bsid-waers
                        CHANGING
                           hbsid-nebtr.
                IF BSID-SHKZG = 'S'.
                  RF140-ZLSHB = hbsid-NEBTR.
                ELSE.
                  RF140-ZLSHB = 0 - hbsid-NEBTR.
                ENDIF.
          endif.
*           IF  BSID-AUGDT IS INITIAL
*           OR  BSID-AUGDT GT SAVE2_DATUM.
              alw_waers = hbsid-pswsl.
              PERFORM CURRENCY_GET_SUBSEQUENT
                          USING
                             save_repid
                             datum02
                             bsid-bukrs
                          CHANGING
                             alw_waers.
              if alw_waers ne hbsid-pswsl.
                PERFORM CONVERT_FOREIGN_TO_FOREIGN_CUR
                            USING
                               datum02
                               hbsid-pswsl
                               *t001-waers
                               alw_waers
                            CHANGING
                               hbsid-pswbt.
                hbsid-pswsl = alw_waers.
                bsid-pswsl  = alw_waers.
                bsid-pswbt  = hbsid-pswbt.
                IF BSID-SHKZG = 'S'.
                  RF140-PSSHB = hbsid-PSWBT.
                ELSE.
                  RF140-PSSHB = 0 - hbsid-PSWBT.
                ENDIF.
*           endif.
            endif.
*         endif.
          clear saldoe.
          MOVE hbsid-PSWSL  TO SALDOe-WAERS.
          MOVE RF140-DMSHB  TO SALDOe-SALDOH.
            MOVE RF140-PSSHB  TO SALDOE-SALDOW.
            IF BSID-AUGDT IS INITIAL
            OR BSID-AUGDT GT SAVE2_DATUM.
              MOVE RF140-WSKTA  TO SALDOE-SALSK.
              MOVE RF140-WRSHN  TO SALDOE-SALDN.
            ENDIF.
            COLLECT SALDOE.
            clear saldoz.
            MOVE HBSID-PSWSL  TO SALDOZ-WAERS.
            MOVE RF140-DMSHB  TO SALDOZ-SALDOH.
            MOVE RF140-PSSHB  TO SALDOZ-SALDOW.
            IF  BSID-AUGDT IS INITIAL
            OR  BSID-AUGDT GT SAVE2_DATUM.
              MOVE RF140-WSKTA  TO SALDOZ-SALSK.
              MOVE RF140-WRSHN  TO SALDOZ-SALDN.
            ENDIF.
            COLLECT SALDOZ.
            clear saldok.
            MOVE HBSID-KUNNR  TO SALDOK-KONTO.
            MOVE HBSID-PSWSL  TO SALDOK-WAERS.
            MOVE RF140-DMSHB  TO SALDOK-SALDOH.
            MOVE RF140-PSSHB  TO SALDOK-SALDOW.
            IF HBSID-SHKZG = 'S'.
              MOVE RF140-PSSHB  TO SALDOK-SALDOP.
              clear SALDOK-SALDOn.
            ELSE.
              clear SALDOK-SALDOp.
              MOVE RF140-PSSHB  TO SALDOK-SALDON.
            ENDIF.
            MOVE RF140-ZLSHB  TO SALDOK-NEBTR.
            COLLECT SALDOK.
*          ENDIF.
            IF NOT RF140-VSTID IS INITIAL.
              IF HBSID-VZTAS IS INITIAL.
                CLEAR RF140-VZTAS.
                RF140-NETDT = HBSID-NETDT.
              ELSE.
                RF140-VZTAS = HBSID-VZTAS.
                RF140-NETDT = HBSID-NETDT.
              ENDIF.
              IF HBSID-AUGBL IS INITIAL
              OR ( HBSID-AUGDT GT RF140-VSTID
                  AND NOT RVZTAG IS INITIAL ).
                IF RF140-VZTAS GE '0'.
                  clear saldof.
                  MOVE HBSID-PSWSL  TO SALDOF-WAERS.
                  MOVE RF140-DMSHB  TO SALDOF-SALDOH.
                  MOVE RF140-PSSHB  TO SALDOF-SALDOW.
                  MOVE RF140-WSKTA  TO SALDOF-SALSK.
                  MOVE RF140-WRSHN  TO SALDOF-SALDN.
                  COLLECT SALDOF.
                ENDIF.
              ENDIF.
            ENDIF.
            IF BSID-SGTXT(1) NE '*'.
              BSID-SGTXT = SPACE.
            ELSE.
              BSID-SGTXT = BSID-SGTXT+1.
            ENDIF.
            IF BSID-XBLNR IS INITIAL.
              MOVE BSID-BELNR TO RF140-BELEGNUM.
            ELSE.
              MOVE BSID-XBLNR TO RF140-BELEGNUM.
            ENDIF.
            CLEAR SAVE_BLART.
            SAVE_BLART = BSID-BLART.
            PERFORM READ_T003T.
            SAVE_BSCHL = BSID-BSCHL.
            PERFORM READ_TBSLT.
            IF BSID-AUGBL IS INITIAL.
              EREIGNIS = '530'.
            ELSE.
              EREIGNIS = '531'.
            ENDIF.
*          IF NOT RXOPOS IS INITIAL.
            CLEAR RF140-ELEMENT.
            RF140-ELEMENT = EREIGNIS.
            IF  ( SAVE_RXEKVB NE SPACE
            AND   RXEKEP = '1'
            AND   BSID-KUNNR NE SAVE_KUNNR )
            OR  ( SAVE_RXEKVB NE SPACE
            AND   RXEKEP = '2' ).
            ELSE.
**              CALL FUNCTION 'WRITE_FORM'
**                   EXPORTING
**                        WINDOW  = 'MAIN'
**                        ELEMENT = EREIGNIS
**                   EXCEPTIONS
**                        WINDOW  = 1
**                        ELEMENT = 2.
              IF SY-SUBRC = 1.
                WINDOW = 'MAIN'.
                PERFORM MESSAGE_WINDOW.
              ENDIF.
              IF SY-SUBRC = 2.
                WINDOW = 'MAIN'.
                PERFORM MESSAGE_ELEMENT.
              ENDIF.
            ENDIF.
*          ENDIF.
            IF NOT XUMSKZ IS INITIAL.
              AT END OF <UMSKZ3>.
              clear: *rf140-waers, *rf140-saldo, *rf140-hwaer,
                     *rf140-saldohw, *rf140-salsk, *rf140-saldn.
                LOOP AT SALDOZ.
                  MOVE SALDOZ-WAERS  TO RF140-WAERS.
                  MOVE SALDOZ-SALDOW TO RF140-SALDO.
                  MOVE T001-WAERS    TO RF140-HWAER.
                  MOVE SALDOZ-SALDOH TO RF140-SALDOHW.
                  MOVE SALDOZ-SALSK  TO RF140-SALSK.
                  MOVE SALDOZ-SALDN  TO RF140-SALDN.
                  CLEAR EREIGNIS.
                  IF SY-TABIX = '1'.
                    EREIGNIS = '544'.
                  ELSE.
                    EREIGNIS = '545'.
                  ENDIF.
                  CLEAR RF140-ELEMENT.
                  RF140-ELEMENT = EREIGNIS.
**                  CALL FUNCTION 'WRITE_FORM'
**                       EXPORTING
**                            WINDOW  = 'MAIN'
**                            ELEMENT = EREIGNIS
**                       EXCEPTIONS
**                            WINDOW  = 1
**                            ELEMENT = 2.
                  IF SY-SUBRC = 1.
                    WINDOW = 'MAIN'.
                    PERFORM MESSAGE_WINDOW.
                  ENDIF.
                  IF SY-SUBRC = 2.
                    WINDOW = 'MAIN'.
                    PERFORM MESSAGE_ELEMENT.
                  ENDIF.
                ENDLOOP.
              ENDAT.
            ENDIF.
            IF NOT SAVE_RXEKVB IS INITIAL.
              IF NOT XPKONT IS INITIAL.
                AT END OF <KONTO3>.
                  IF  RXEKEP IS INITIAL
                  AND RXEKSU IS INITIAL.
                  ELSE.
                    SORT SALDOK BY WAERS.
                    PERFORM PROTECT.
                 clear: *rf140-waers, *rf140-saldo, *rf140-hwaer,
                        *rf140-saldohw, *rf140-salsk, *rf140-saldn,
                        *rf140-salds, *rf140-saldh, *rf140-zlshb,
                        *rf140-konto.
                    LOOP AT SALDOK.
*                IF  ( RXEKEP = '1'
*                AND SALDOK-KONTO =  SAVE_KUNNR
*                AND     RXEKSU IS INITIAL ).
*                ELSE.
                      MOVE SALDOK-KONTO  TO RF140-KONTO.
                      MOVE SALDOK-WAERS  TO RF140-WAERS.
                      MOVE SALDOK-SALDOW TO RF140-SALDO.
                      MOVE T001-WAERS    TO RF140-HWAER.
                      MOVE SALDOK-SALDOH TO RF140-SALDOHW.
                      MOVE SALDOK-SALDOP TO RF140-SALDS.
                      MOVE SALDOK-SALDON TO RF140-SALDH.
                      MOVE SALDOK-NEBTR  TO RF140-ZLSHB.
                      IF SY-TABIX = '1'.
*            IF SAVE_RXOPOL IS INITIAL.
                        EREIGNIS = '567'.
*            ELSE.
*              EREIGNIS = '553'.
*            ENDIF.
                        CLEAR RF140-ELEMENT.
                        RF140-ELEMENT = EREIGNIS.
**                        CALL FUNCTION 'WRITE_FORM'
**                             EXPORTING
**                                  WINDOW  = 'MAIN'
**                                  ELEMENT = EREIGNIS
**                             EXCEPTIONS
**                                  WINDOW  = 1
**                                  ELEMENT = 2.
                        IF SY-SUBRC = 1.
                          WINDOW = 'MAIN'.
                          PERFORM MESSAGE_WINDOW.
                        ENDIF.
                        IF SY-SUBRC = 2.
                          WINDOW = 'MAIN'.
                          PERFORM MESSAGE_ELEMENT.
                        ENDIF.
                      ELSE.
                        EREIGNIS = '568'.
                        CLEAR RF140-ELEMENT.
                        RF140-ELEMENT = EREIGNIS.
**                        CALL FUNCTION 'WRITE_FORM'
**                             EXPORTING
**                                  WINDOW  = 'MAIN'
**                                  ELEMENT = EREIGNIS
**                             EXCEPTIONS
**                                  WINDOW  = 1
**                                  ELEMENT = 2.
                        IF SY-SUBRC = 1.
                          WINDOW = 'MAIN'.
                          PERFORM MESSAGE_WINDOW.
                        ENDIF.
                        IF SY-SUBRC = 2.
                          WINDOW = 'MAIN'.
                          PERFORM MESSAGE_ELEMENT.
                        ENDIF.
                      ENDIF.
*                ENDIF.
                    ENDLOOP.
                    PERFORM ENDPROTECT.
                  ENDIF.
                ENDAT.
              ENDIF.
            ENDIF.
          ENDLOOP.
        ELSE.
          IF SAVE_RXOPOL IS INITIAL.
            CLEAR RF140-ELEMENT.
            RF140-ELEMENT = '534'.
**            CALL FUNCTION 'WRITE_FORM'
**                 EXPORTING
**                      WINDOW  = 'MAIN'
**                      ELEMENT = '534'
**                 EXCEPTIONS
**                      WINDOW  = 1
**                      ELEMENT = 2.
            IF SY-SUBRC = 1.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_WINDOW.
            ENDIF.
            IF SY-SUBRC = 2.
              WINDOW = 'MAIN'.
              EREIGNIS = '534'.
              PERFORM MESSAGE_ELEMENT.
            ENDIF.
          ENDIF.
        ENDIF.
      ELSE.
        IF NOT AIKLINES IS INITIAL.
          LOOP AT HBSIK.
          if *t001-bukrs ne hbsik-bukrs.
            select single * from t001 into *t001
              where bukrs = hbsik-bukrs.
          endif.
            CLEAR RF140-NETDT.
            IF NOT XUMSKZ IS INITIAL.
              AT NEW <UMSKZ4>.
                CLEAR EREIGNIS.
                SAVE_UMSKZ = <UMSKZ4>.
                IF <UMSKZ4>    IS INITIAL.
                  EREIGNIS = '521'.
                ELSE.
                  EREIGNIS = '522'.
                  PERFORM READ_T074T.
                ENDIF.
                CLEAR RF140-ELEMENT.
                RF140-ELEMENT = EREIGNIS.
**                CALL FUNCTION 'WRITE_FORM'
**                     EXPORTING
**                          WINDOW  = 'MAIN'
**                          ELEMENT = EREIGNIS
**                     EXCEPTIONS
**                          WINDOW  = 1
**                          ELEMENT = 2.
                IF SY-SUBRC = 1.
                  WINDOW = 'MAIN'.
                  PERFORM MESSAGE_WINDOW.
                ENDIF.
                IF SY-SUBRC = 2.
                  WINDOW = 'MAIN'.
                  PERFORM MESSAGE_ELEMENT.
                ENDIF.

                CLEAR   SALDOZ.
                REFRESH SALDOZ.
              ENDAT.
            ENDIF.
            MOVE-CORRESPONDING HBSIK TO BSIK.
            PERFORM FILL_WAEHRUNGSFELDER_BSIDK.
            PERFORM FILL_SKONTO_BSIDK.
            CLEAR RF140-WAERS.
            RF140-WAERS = BSIK-WAERS.
*          IF BSIK-BSTAT NE 'S'.
            IF BSIK-SHKZG = 'S'.
              RF140-PSSHB = HBSIK-PSWBT.
              RF140-ZLSHB = HBSIK-NEBTR.
            ELSE.
              RF140-PSSHB = 0 - HBSIK-PSWBT.
              RF140-ZLSHB = 0 - HBSIK-NEBTR.
            ENDIF.
          *bsik  = bsik.
          *rf140 = rf140.
          alw_waers = bsik-waers.
          PERFORM CURRENCY_GET_SUBSEQUENT
                      USING
                         save_repid
                         datum02
                         bsik-bukrs
                      CHANGING
                         alw_waers.
          if alw_waers ne bsik-waers.
            bsik-waers = alw_waers.
            PERFORM CURR_DOCUMENT_CONVERT_BSik
                        USING
                           datum02
                           *bsik-waers
                           *t001-waers
                           bsik-waers
                        CHANGING
                           bsik.
            PERFORM FILL_WAEHRUNGSFELDER_BSIDK.
            PERFORM FILL_SKONTO_BSIDK.
            CLEAR RF140-WAERS.
            RF140-WAERS = BSIk-WAERS.
            PERFORM CONVERT_FOREIGN_TO_FOREIGN_CUR
                        USING
                           datum02
                           *bsik-waers
                           *t001-waers
                           bsik-waers
                        CHANGING
                           hbsik-nebtr.
                IF BSIk-SHKZG = 'S'.
                  RF140-ZLSHB = hbsik-NEBTR.
                ELSE.
                  RF140-ZLSHB = 0 - hbsik-NEBTR.
                ENDIF.
          endif.
*           IF  BSIk-AUGDT IS INITIAL
*           OR  BSIk-AUGDT GT SAVE2_DATUM.
              alw_waers = hbsik-pswsl.
              PERFORM CURRENCY_GET_SUBSEQUENT
                          USING
                             save_repid
                             datum02
                             bsik-bukrs
                          CHANGING
                             alw_waers.
              if alw_waers ne hbsik-pswsl.
                PERFORM CONVERT_FOREIGN_TO_FOREIGN_CUR
                            USING
                               datum02
                               hbsik-pswsl
                               *t001-waers
                               alw_waers
                            CHANGING
                               hbsik-pswbt.
                hbsik-pswsl = alw_waers.
                bsik-pswsl  = alw_waers.
                bsik-pswbt  = hbsik-pswbt.
                IF BSIk-SHKZG = 'S'.
                  RF140-PSSHB = hbsik-PSWBT.
                ELSE.
                  RF140-PSSHB = 0 - hbsik-PSWBT.
                ENDIF.
*           endif.
            endif.
*         endif.
          clear saldoe.
          MOVE hbsik-PSWSL  TO SALDOe-WAERS.
          MOVE RF140-DMSHB  TO SALDOe-SALDOH.
            MOVE RF140-PSSHB  TO SALDOE-SALDOW.
            IF BSIK-AUGDT IS INITIAL
            OR BSIK-AUGDT GT SAVE2_DATUM.
              MOVE RF140-WSKTA  TO SALDOE-SALSK.
              MOVE RF140-WRSHN  TO SALDOE-SALDN.
            ENDIF.
            COLLECT SALDOE.
            clear saldoz.
            MOVE HBSIK-PSWSL  TO SALDOZ-WAERS.
            MOVE RF140-DMSHB  TO SALDOZ-SALDOH.
            MOVE RF140-PSSHB  TO SALDOZ-SALDOW.
            IF  BSIK-AUGDT IS INITIAL
            OR  BSIK-AUGDT GT SAVE2_DATUM.
              MOVE RF140-WSKTA  TO SALDOZ-SALSK.
              MOVE RF140-WRSHN  TO SALDOZ-SALDN.
            ENDIF.
            COLLECT SALDOZ.
*          ENDIF.
            IF NOT RF140-VSTID IS INITIAL.
              IF HBSIK-VZTAS IS INITIAL.
                CLEAR RF140-VZTAS.
                RF140-NETDT = HBSIK-NETDT.
              ELSE.
                RF140-VZTAS = HBSIK-VZTAS.
                RF140-NETDT = HBSIK-NETDT.
              ENDIF.
              IF HBSIK-AUGBL IS INITIAL
              OR ( HBSIK-AUGDT GT RF140-VSTID
                  AND NOT RVZTAG IS INITIAL ).
                IF RF140-VZTAS GE '0'.
                  clear saldof.
                  MOVE HBSIK-PSWSL  TO SALDOF-WAERS.
                  MOVE RF140-DMSHB  TO SALDOF-SALDOH.
                  MOVE RF140-PSSHB  TO SALDOF-SALDOW.
                  MOVE RF140-WSKTA  TO SALDOF-SALSK.
                  MOVE RF140-WRSHN  TO SALDOF-SALDN.
                  COLLECT SALDOF.
                ENDIF.
              ENDIF.
            ENDIF.
            IF BSIK-SGTXT(1) NE '*'.
              BSIK-SGTXT = SPACE.
            ELSE.
              BSIK-SGTXT = BSIK-SGTXT+1.
            ENDIF.
            IF BSIK-XBLNR IS INITIAL.
              MOVE BSIK-BELNR TO RF140-BELEGNUM.
            ELSE.
              MOVE BSIK-XBLNR TO RF140-BELEGNUM.
            ENDIF.
            CLEAR SAVE_BLART.
            SAVE_BLART = BSIK-BLART.
            PERFORM READ_T003T.
            SAVE_BSCHL = BSIK-BSCHL.
            PERFORM READ_TBSLT.
            IF BSIK-AUGBL IS INITIAL.
              EREIGNIS = '532'.
            ELSE.
              EREIGNIS = '533'.
            ENDIF.
*          IF NOT RXOPOS IS INITIAL.
            CLEAR RF140-ELEMENT.
            RF140-ELEMENT = EREIGNIS.
**            CALL FUNCTION 'WRITE_FORM'
**                 EXPORTING
**                      WINDOW  = 'MAIN'
**                      ELEMENT = EREIGNIS
**                 EXCEPTIONS
**                      WINDOW  = 1
**                      ELEMENT = 2.
            IF SY-SUBRC = 1.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_WINDOW.
            ENDIF.
            IF SY-SUBRC = 2.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_ELEMENT.
            ENDIF.
*          ENDIF.
            IF NOT XUMSKZ IS INITIAL.
              AT END OF <UMSKZ4>.
              clear: *rf140-waers, *rf140-saldo, *rf140-hwaer,
                     *rf140-saldohw, *rf140-salsk, *rf140-saldn.
                LOOP AT SALDOZ.
                  MOVE SALDOZ-WAERS  TO RF140-WAERS.
                  MOVE SALDOZ-SALDOW TO RF140-SALDO.
                  MOVE T001-WAERS    TO RF140-HWAER.
                  MOVE SALDOZ-SALDOH TO RF140-SALDOHW.
                  MOVE SALDOZ-SALSK  TO RF140-SALSK.
                  MOVE SALDOZ-SALDN  TO RF140-SALDN.
                  CLEAR EREIGNIS.
                  IF SY-TABIX = '1'.
                    EREIGNIS = '544'.
                  ELSE.
                    EREIGNIS = '545'.
                  ENDIF.
                  CLEAR RF140-ELEMENT.
                  RF140-ELEMENT = EREIGNIS.
**                  CALL FUNCTION 'WRITE_FORM'
**                       EXPORTING
**                            WINDOW  = 'MAIN'
**                            ELEMENT = EREIGNIS
**                       EXCEPTIONS
**                            WINDOW  = 1
**                            ELEMENT = 2.
                  IF SY-SUBRC = 1.
                    WINDOW = 'MAIN'.
                    PERFORM MESSAGE_WINDOW.
                  ENDIF.
                  IF SY-SUBRC = 2.
                    WINDOW = 'MAIN'.
                    PERFORM MESSAGE_ELEMENT.
                  ENDIF.
                ENDLOOP.
              ENDAT.
            ENDIF.
          ENDLOOP.
        ELSE.
          IF SAVE_RXOPOL IS INITIAL.
            CLEAR RF140-ELEMENT.
            RF140-ELEMENT = '534'.
**            CALL FUNCTION 'WRITE_FORM'
**                 EXPORTING
**                      WINDOW  = 'MAIN'
**                      ELEMENT = '534'
**                 EXCEPTIONS
**                      WINDOW  = 1
**                      ELEMENT = 2.
            IF SY-SUBRC = 1.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_WINDOW.
            ENDIF.
            IF SY-SUBRC = 2.
              WINDOW = 'MAIN'.
              EREIGNIS = '534'.
              PERFORM MESSAGE_ELEMENT.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.

*   CALL FUNCTION 'WRITE_FORM'
*            EXPORTING  WINDOW    = 'MAIN'
*                       ELEMENT   = '520'
*                       TYPE      = 'TOP'
*                       FUNCTION  = 'DELETE'
*            EXCEPTIONS WINDOW    = 1
*                       ELEMENT   = 2.
*            IF SY-SUBRC = 1.
*              WINDOW = 'MAIN'.
*              PERFORM MESSAGE_WINDOW.
*            ENDIF.
*            IF SY-SUBRC = 2.
*              WINDOW = 'MAIN'.
*              EREIGNIS = '520'.
*              PERFORM MESSAGE_ELEMENT.
*            ENDIF.

      IF SAVE_RXOPOL IS INITIAL.
        DESCRIBE TABLE SALDOE LINES SLDELINES.
        IF SLDELINES GT 0.
          SORT SALDOE BY WAERS.
          PERFORM PROTECT.
              clear: *rf140-waers, *rf140-saldo, *rf140-hwaer,
                     *rf140-saldohw, *rf140-salsk, *rf140-saldn.
          LOOP AT SALDOE.
            MOVE SALDOE-WAERS  TO RF140-WAERS.
            MOVE SALDOE-SALDOW TO RF140-SALDO.
            MOVE T001-WAERS    TO RF140-HWAER.
            MOVE SALDOE-SALDOH TO RF140-SALDOHW.
            MOVE SALDOE-SALSK  TO RF140-SALSK.
            MOVE SALDOE-SALDN  TO RF140-SALDN.
            IF SY-TABIX = '1'.
*            IF SAVE_RXOPOL IS INITIAL.
              EREIGNIS = '550'.
*            ELSE.
*              EREIGNIS = '553'.
*            ENDIF.
              CLEAR RF140-ELEMENT.
              RF140-ELEMENT = EREIGNIS.
**              CALL FUNCTION 'WRITE_FORM'
**                   EXPORTING
**                        WINDOW  = 'MAIN'
**                        ELEMENT = EREIGNIS
**                   EXCEPTIONS
**                        WINDOW  = 1
**                        ELEMENT = 2.
              IF SY-SUBRC = 1.
                WINDOW = 'MAIN'.
                PERFORM MESSAGE_WINDOW.
              ENDIF.
              IF SY-SUBRC = 2.
                WINDOW = 'MAIN'.
                PERFORM MESSAGE_ELEMENT.
              ENDIF.
            ELSE.
*            IF SAVE_RXOPOL IS INITIAL.
              EREIGNIS = '551'.
*            ELSE.
*              EREIGNIS = '554'.
*            ENDIF.
              CLEAR RF140-ELEMENT.
              RF140-ELEMENT = EREIGNIS.
**              CALL FUNCTION 'WRITE_FORM'
**                   EXPORTING
**                        WINDOW  = 'MAIN'
**                        ELEMENT = EREIGNIS
**                   EXCEPTIONS
**                        WINDOW  = 1
**                        ELEMENT = 2.
              IF SY-SUBRC = 1.
                WINDOW = 'MAIN'.
                PERFORM MESSAGE_WINDOW.
              ENDIF.
              IF SY-SUBRC = 2.
                WINDOW = 'MAIN'.
                PERFORM MESSAGE_ELEMENT.
              ENDIF.
            ENDIF.
          ENDLOOP.
          PERFORM ENDPROTECT.
        ELSE.
          CLEAR RF140-WAERS.
          CLEAR RF140-SALDO.
          CLEAR RF140-HWAER.
          CLEAR RF140-SALDOHW.
*        IF SAVE_RXOPOL IS INITIAL.
          CLEAR RF140-ELEMENT.
          RF140-ELEMENT = '552'.
          MOVE T001-WAERS    TO RF140-waers.
          MOVE T001-WAERS    TO RF140-HWAER.
**          CALL FUNCTION 'WRITE_FORM'
**               EXPORTING
**                    WINDOW  = 'MAIN'
**                    ELEMENT = '552'
**               EXCEPTIONS
**                    WINDOW  = 1
**                    ELEMENT = 2.
          IF SY-SUBRC = 1.
            WINDOW = 'MAIN'.
            PERFORM MESSAGE_WINDOW.
          ENDIF.
          IF SY-SUBRC = 2.
            WINDOW = 'MAIN'.
            EREIGNIS = '552'.
            PERFORM MESSAGE_ELEMENT.
          ENDIF.
*          ELSE.
*          CALL FUNCTION 'WRITE_FORM'
*                   EXPORTING  WINDOW    = 'MAIN'
*                              ELEMENT   = '535'
*                   EXCEPTIONS WINDOW    = 1
*                              ELEMENT   = 2.
*                   IF SY-SUBRC = 1.
**                    WINDOW = 'MAIN'.
**                    PERFORM MESSAGE_WINDOW.
*                   ENDIF.
*                   IF SY-SUBRC = 2.
**                    WINDOW = 'MAIN'.
**                    FTEXT = TEXT-535.
**                    PERFORM MESSAGE_ELEMENT.
*                   ENDIF.
*
*          CALL FUNCTION 'WRITE_FORM'
*                   EXPORTING  WINDOW    = 'MAIN'
*                              ELEMENT   = '555'
*                   EXCEPTIONS WINDOW    = 1
*                              ELEMENT   = 2.
*                   IF SY-SUBRC = 1.
**                    WINDOW = 'MAIN'.
**                    PERFORM MESSAGE_WINDOW.
*                   ENDIF.
*                   IF SY-SUBRC = 2.
**                    WINDOW = 'MAIN'.
**                    FTEXT = TEXT-555.
**                    PERFORM MESSAGE_ELEMENT.
*                   ENDIF.
*        ENDIF.
        ENDIF.
      ENDIF.

*------Offene Merkposten----------------------------------------------*
      IF SAVE_KOART = 'D'.
        CLEAR ADMPLINES.
        DESCRIBE TABLE DMPOS LINES ADMPLINES.
        IF ADMPLINES GT 0.
          CLEAR RF140-ELEMENT.
          RF140-ELEMENT = '560'.
**          CALL FUNCTION 'WRITE_FORM'
**               EXPORTING
**                    WINDOW  = 'MAIN'
**                    ELEMENT = '560'
**               EXCEPTIONS
**                    WINDOW  = 1
**                    ELEMENT = 2.
          IF SY-SUBRC = 1.
            WINDOW = 'MAIN'.
            PERFORM MESSAGE_WINDOW.
          ENDIF.
          IF SY-SUBRC = 2.
            WINDOW = 'MAIN'.
            EREIGNIS = '560'.
            PERFORM MESSAGE_ELEMENT.
          ENDIF.
        ELSE.
          IF ( SLDELINES GT 0
          AND NOT SAVE_STATBL IS INITIAL )
          OR (  NOT SAVE_RXOPOL IS INITIAL
          AND NOT SAVE_STATBL IS INITIAL ).
            CLEAR RF140-ELEMENT.
            RF140-ELEMENT = '560'.
**            CALL FUNCTION 'WRITE_FORM'
**                 EXPORTING
**                      WINDOW  = 'MAIN'
**                      ELEMENT = '560'
**                 EXCEPTIONS
**                      WINDOW  = 1
**                      ELEMENT = 2.
            IF SY-SUBRC = 1.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_WINDOW.
            ENDIF.
            IF SY-SUBRC = 2.
              WINDOW = 'MAIN'.
              EREIGNIS = '560'.
              PERFORM MESSAGE_ELEMENT.
            ENDIF.
          ENDIF.
        ENDIF.

        LOOP AT DMPOS.
          if *t001-bukrs ne dmpos-bukrs.
            select single * from t001 into *t001
              where bukrs = dmpos-bukrs.
          endif.
          CLEAR RF140-NETDT.
          IF NOT SAVE_RXEKVB IS INITIAL.
            IF NOT XPKONT IS INITIAL.
              AT NEW <KONTO5>.
                CLEAR   SALDOK.
                REFRESH SALDOK.
              ENDAT.
            ENDIF.
          ENDIF.
          IF NOT XUMSKZ IS INITIAL.
            AT NEW <UMSKZ5>.
              CLEAR EREIGNIS.
              SAVE_UMSKZ = <UMSKZ5>.
              IF <UMSKZ5>    IS INITIAL.
                EREIGNIS = '521'.
              ELSE.
                EREIGNIS = '522'.
                PERFORM READ_T074T.
              ENDIF.
              CLEAR RF140-ELEMENT.
              RF140-ELEMENT = EREIGNIS.
**              CALL FUNCTION 'WRITE_FORM'
**                   EXPORTING
**                        WINDOW  = 'MAIN'
**                        ELEMENT = EREIGNIS
**                   EXCEPTIONS
**                        WINDOW  = 1
**                        ELEMENT = 2.
              IF SY-SUBRC = 1.
                WINDOW = 'MAIN'.
                PERFORM MESSAGE_WINDOW.
              ENDIF.
              IF SY-SUBRC = 2.
                WINDOW = 'MAIN'.
                PERFORM MESSAGE_ELEMENT.
              ENDIF.

              CLEAR   SALDOZ.
              REFRESH SALDOZ.
            ENDAT.
          ENDIF.
          MOVE-CORRESPONDING DMPOS TO BSID.
          PERFORM FILL_WAEHRUNGSFELDER_BSIDK.
          PERFORM FILL_SKONTO_BSIDK.
          CLEAR RF140-WAERS.
          RF140-WAERS = BSID-WAERS.
*        IF BSID-BSTAT NE 'S'.
          IF BSID-SHKZG = 'S'.
            RF140-PSSHB = DMPOS-PSWBT.
            RF140-ZLSHB = DMPOS-NEBTR.
          ELSE.
            RF140-PSSHB = 0 - DMPOS-PSWBT.
            RF140-ZLSHB = 0 - DMPOS-NEBTR.
          ENDIF.
          *bsid  = bsid.
          *rf140 = rf140.
          alw_waers = bsid-waers.
          PERFORM CURRENCY_GET_SUBSEQUENT
                      USING
                         save_repid
                         datum02
                         bsid-bukrs
                      CHANGING
                         alw_waers.
          if alw_waers ne bsid-waers.
            bsid-waers = alw_waers.
            PERFORM CURR_DOCUMENT_CONVERT_BSid
                        USING
                           datum02
                           *bsid-waers
                           *t001-waers
                           bsid-waers
                        CHANGING
                           bsid.
            PERFORM FILL_WAEHRUNGSFELDER_BSIDK.
            PERFORM FILL_SKONTO_BSIDK.
            CLEAR RF140-WAERS.
            RF140-WAERS = BSID-WAERS.
            PERFORM CONVERT_FOREIGN_TO_FOREIGN_CUR
                        USING
                           datum02
                           *bsid-waers
                           *t001-waers
                           bsid-waers
                        CHANGING
                           dmpos-nebtr.
                IF BSID-SHKZG = 'S'.
                  RF140-ZLSHB = DmPOS-NEBTR.
                ELSE.
                  RF140-ZLSHB = 0 - DmPOS-NEBTR.
                ENDIF.
          endif.
*           IF  BSID-AUGDT IS INITIAL
*           OR  BSID-AUGDT GT SAVE2_DATUM.
              alw_waers = dmpos-pswsl.
              PERFORM CURRENCY_GET_SUBSEQUENT
                          USING
                             save_repid
                             datum02
                             bsid-bukrs
                          CHANGING
                             alw_waers.
              if alw_waers ne dmpos-pswsl.
                PERFORM CONVERT_FOREIGN_TO_FOREIGN_CUR
                            USING
                               datum02
                               dmpos-pswsl
                               *t001-waers
                               alw_waers
                            CHANGING
                               dmpos-pswbt.
                dmpos-pswsl = alw_waers.
                bsid-pswsl  = alw_waers.
                bsid-pswbt  = dmpos-pswbt.
                IF BSID-SHKZG = 'S'.
                  RF140-PSSHB = DmPOS-PSWBT.
                ELSE.
                  RF140-PSSHB = 0 - DmPOS-PSWBT.
                ENDIF.
*           endif.
            endif.
*         endif.
          clear saldom.
          MOVE DmPOS-PSWSL  TO SALDOm-WAERS.
          MOVE RF140-DMSHB  TO SALDOm-SALDOH.
          MOVE RF140-PSSHB  TO SALDOM-SALDOW.
          IF BSID-AUGDT IS INITIAL
          OR BSID-AUGDT GT SAVE2_DATUM.
            MOVE RF140-WSKTA  TO SALDOE-SALSK.
            MOVE RF140-WRSHN  TO SALDOE-SALDN.
          ENDIF.
          COLLECT SALDOM.
          clear saldoz.
          MOVE DMPOS-PSWSL  TO SALDOZ-WAERS.
          MOVE RF140-DMSHB  TO SALDOZ-SALDOH.
          MOVE RF140-PSSHB  TO SALDOZ-SALDOW.
          IF  BSID-AUGDT IS INITIAL
          OR  BSID-AUGDT GT SAVE2_DATUM.
            MOVE RF140-WSKTA  TO SALDOZ-SALSK.
            MOVE RF140-WRSHN  TO SALDOZ-SALDN.
          ENDIF.
          COLLECT SALDOZ.
          clear saldok.
          MOVE DMPOS-KUNNR  TO SALDOK-KONTO.
          MOVE DMPOS-PSWSL  TO SALDOK-WAERS.
          MOVE RF140-DMSHB  TO SALDOK-SALDOH.
          MOVE RF140-PSSHB  TO SALDOK-SALDOW.
          IF DMPOS-SHKZG = 'S'.
            MOVE RF140-PSSHB  TO SALDOK-SALDOP.
            clear SALDOK-SALDOn.
          ELSE.
            clear SALDOK-SALDOp.
            MOVE RF140-PSSHB  TO SALDOK-SALDON.
          ENDIF.
          MOVE RF140-ZLSHB  TO SALDOK-NEBTR.
          COLLECT SALDOK.
*        ENDIF.
          IF NOT RF140-VSTID IS INITIAL.
            IF DMPOS-VZTAS IS INITIAL.
              CLEAR RF140-VZTAS.
              RF140-NETDT = DMPOS-NETDT.
            ELSE.
              RF140-VZTAS = DMPOS-VZTAS.
              RF140-NETDT = DMPOS-NETDT.
            ENDIF.
            IF DMPOS-AUGBL IS INITIAL
            OR ( DMPOS-AUGDT GT RF140-VSTID
                AND NOT RVZTAG IS INITIAL ).
              IF RF140-VZTAS GE '0'.
                clear saldof.
                MOVE DMPOS-PSWSL  TO SALDOF-WAERS.
                MOVE RF140-DMSHB  TO SALDOF-SALDOH.
                MOVE RF140-PSSHB  TO SALDOF-SALDOW.
                MOVE RF140-WSKTA  TO SALDOF-SALSK.
                MOVE RF140-WRSHN  TO SALDOF-SALDN.
                COLLECT SALDOF.
              ENDIF.
            ENDIF.
          ENDIF.
          IF BSID-SGTXT(1) NE '*'.
            BSID-SGTXT = SPACE.
          ELSE.
            BSID-SGTXT = BSID-SGTXT+1.
          ENDIF.
          IF BSID-XBLNR IS INITIAL.
            MOVE BSID-BELNR TO RF140-BELEGNUM.
          ELSE.
            MOVE BSID-XBLNR TO RF140-BELEGNUM.
          ENDIF.
          CLEAR SAVE_BLART.
          SAVE_BLART = BSID-BLART.
          PERFORM READ_T003T.
          SAVE_BSCHL = BSID-BSCHL.
          PERFORM READ_TBSLT.
          CLEAR EREIGNIS.
          IF BSID-AUGBL IS INITIAL.
            EREIGNIS = '530'.
          ELSE.
            EREIGNIS = '531'.
          ENDIF.
*        IF NOT RXOPOS IS INITIAL.
          CLEAR RF140-ELEMENT.
          RF140-ELEMENT = EREIGNIS.
          IF  ( SAVE_RXEKVB NE SPACE
          AND   RXEKEP = '1'
          AND   BSID-KUNNR NE SAVE_KUNNR )
          OR  ( SAVE_RXEKVB NE SPACE
          AND   RXEKEP = '2' ).
          ELSE.
**            CALL FUNCTION 'WRITE_FORM'
**                 EXPORTING
**                      WINDOW  = 'MAIN'
**                      ELEMENT = EREIGNIS
**                 EXCEPTIONS
**                      WINDOW  = 1
**                      ELEMENT = 2.
            IF SY-SUBRC = 1.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_WINDOW.
            ENDIF.
            IF SY-SUBRC = 2.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_ELEMENT.
            ENDIF.
          ENDIF.
*        ENDIF.
          IF NOT XUMSKZ IS INITIAL.
            AT END OF <UMSKZ5>.
              clear: *rf140-waers, *rf140-saldo, *rf140-hwaer,
                     *rf140-saldohw, *rf140-salsk, *rf140-saldn.
              LOOP AT SALDOZ.
                MOVE SALDOZ-WAERS  TO RF140-WAERS.
                MOVE SALDOZ-SALDOW TO RF140-SALDO.
                MOVE T001-WAERS    TO RF140-HWAER.
                MOVE SALDOZ-SALDOH TO RF140-SALDOHW.
                MOVE SALDOZ-SALSK  TO RF140-SALSK.
                MOVE SALDOZ-SALDN  TO RF140-SALDN.
                CLEAR EREIGNIS.
                IF SY-TABIX = '1'.
                  EREIGNIS = '544'.
                ELSE.
                  EREIGNIS = '545'.
                ENDIF.
                CLEAR RF140-ELEMENT.
                RF140-ELEMENT = EREIGNIS.
**                CALL FUNCTION 'WRITE_FORM'
**                     EXPORTING
**                          WINDOW  = 'MAIN'
**                          ELEMENT = EREIGNIS
**                     EXCEPTIONS
**                          WINDOW  = 1
**                          ELEMENT = 2.
                IF SY-SUBRC = 1.
                  WINDOW = 'MAIN'.
                  PERFORM MESSAGE_WINDOW.
                ENDIF.
                IF SY-SUBRC = 2.
                  WINDOW = 'MAIN'.
                  PERFORM MESSAGE_ELEMENT.
                ENDIF.
              ENDLOOP.
            ENDAT.
          ENDIF.
          IF NOT SAVE_RXEKVB IS INITIAL.
            IF NOT XPKONT IS INITIAL.
              AT END OF <KONTO5>.
                IF  RXEKEP IS INITIAL
                AND RXEKSU IS INITIAL.
                ELSE.
                  SORT SALDOK BY WAERS.
                  PERFORM PROTECT.
                 clear: *rf140-waers, *rf140-saldo, *rf140-hwaer,
                        *rf140-saldohw, *rf140-salsk, *rf140-saldn,
                        *rf140-salds, *rf140-saldh, *rf140-zlshb,
                        *rf140-konto.
                  LOOP AT SALDOK.
*              IF  ( RXEKEP = '1'
*              AND SALDOK-KONTO =  SAVE_KUNNR
*              AND     RXEKSU IS INITIAL ).
*              ELSE.
                    MOVE SALDOK-KONTO  TO RF140-KONTO.
                    MOVE SALDOK-WAERS  TO RF140-WAERS.
                    MOVE SALDOK-SALDOW TO RF140-SALDO.
                    MOVE T001-WAERS    TO RF140-HWAER.
                    MOVE SALDOK-SALDOH TO RF140-SALDOHW.
                    MOVE SALDOK-SALDOP TO RF140-SALDS.
                    MOVE SALDOK-SALDON TO RF140-SALDH.
                    MOVE SALDOK-NEBTR  TO RF140-ZLSHB.
                    IF SY-TABIX = '1'.
*            IF SAVE_RXOPOL IS INITIAL.
                      EREIGNIS = '567'.
*            ELSE.
*              EREIGNIS = '553'.
*            ENDIF.
                      CLEAR RF140-ELEMENT.
                      RF140-ELEMENT = EREIGNIS.
**                      CALL FUNCTION 'WRITE_FORM'
**                           EXPORTING
**                                WINDOW  = 'MAIN'
**                                ELEMENT = EREIGNIS
**                           EXCEPTIONS
**                                WINDOW  = 1
**                                ELEMENT = 2.
                      IF SY-SUBRC = 1.
                        WINDOW = 'MAIN'.
                        PERFORM MESSAGE_WINDOW.
                      ENDIF.
                      IF SY-SUBRC = 2.
                        WINDOW = 'MAIN'.
                        PERFORM MESSAGE_ELEMENT.
                      ENDIF.
                    ELSE.
                      EREIGNIS = '568'.
                      CLEAR RF140-ELEMENT.
                      RF140-ELEMENT = EREIGNIS.
**                      CALL FUNCTION 'WRITE_FORM'
**                           EXPORTING
**                                WINDOW  = 'MAIN'
**                                ELEMENT = EREIGNIS
**                           EXCEPTIONS
**                                WINDOW  = 1
**                                ELEMENT = 2.
                      IF SY-SUBRC = 1.
                        WINDOW = 'MAIN'.
                        PERFORM MESSAGE_WINDOW.
                      ENDIF.
                      IF SY-SUBRC = 2.
                        WINDOW = 'MAIN'.
                        PERFORM MESSAGE_ELEMENT.
                      ENDIF.
                    ENDIF.
*              ENDIF.
                  ENDLOOP.
                  PERFORM ENDPROTECT.
                ENDIF.
              ENDAT.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ELSE.
        CLEAR AKMPLINES.
        DESCRIBE TABLE KMPOS LINES AKMPLINES.
        IF AKMPLINES GT 0.
          CLEAR RF140-ELEMENT.
          RF140-ELEMENT = '560'.
**          CALL FUNCTION 'WRITE_FORM'
**               EXPORTING
**                    WINDOW  = 'MAIN'
**                    ELEMENT = '560'
**               EXCEPTIONS
**                    WINDOW  = 1
**                    ELEMENT = 2.
          IF SY-SUBRC = 1.
            WINDOW = 'MAIN'.
            PERFORM MESSAGE_WINDOW.
          ENDIF.
          IF SY-SUBRC = 2.
            WINDOW = 'MAIN'.
            EREIGNIS = '560'.
            PERFORM MESSAGE_ELEMENT.
          ENDIF.
        ELSE.
          IF  ( SLDELINES GT 0
          AND NOT SAVE_STATBL IS INITIAL )
          OR  ( NOT SAVE_RXOPOL IS INITIAL
          AND NOT SAVE_STATBL IS INITIAL ).
            CLEAR RF140-ELEMENT.
            RF140-ELEMENT = '560'.
**            CALL FUNCTION 'WRITE_FORM'
**                 EXPORTING
**                      WINDOW  = 'MAIN'
**                      ELEMENT = '560'
**                 EXCEPTIONS
**                      WINDOW  = 1
**                      ELEMENT = 2.
            IF SY-SUBRC = 1.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_WINDOW.
            ENDIF.
            IF SY-SUBRC = 2.
              WINDOW = 'MAIN'.
              EREIGNIS = '560'.
              PERFORM MESSAGE_ELEMENT.
            ENDIF.

          ENDIF.
        ENDIF.

        LOOP AT KMPOS.
          if *t001-bukrs ne kmpos-bukrs.
            select single * from t001 into *t001
              where bukrs = kmpos-bukrs.
          endif.
          CLEAR RF140-NETDT.
          IF NOT XUMSKZ IS INITIAL.
            AT NEW <UMSKZ6>.
              CLEAR EREIGNIS.
              SAVE_UMSKZ = <UMSKZ6>.
              IF <UMSKZ6>    IS INITIAL.
                EREIGNIS = '521'.
              ELSE.
                EREIGNIS = '522'.
                PERFORM READ_T074T.
              ENDIF.
              CLEAR RF140-ELEMENT.
              RF140-ELEMENT = EREIGNIS.
**              CALL FUNCTION 'WRITE_FORM'
**                   EXPORTING
**                        WINDOW  = 'MAIN'
**                        ELEMENT = EREIGNIS
**                   EXCEPTIONS
**                        WINDOW  = 1
**                        ELEMENT = 2.
              IF SY-SUBRC = 1.
                WINDOW = 'MAIN'.
                PERFORM MESSAGE_WINDOW.
              ENDIF.
              IF SY-SUBRC = 2.
                WINDOW = 'MAIN'.
                PERFORM MESSAGE_ELEMENT.
              ENDIF.

              CLEAR   SALDOZ.
              REFRESH SALDOZ.
            ENDAT.
          ENDIF.
          MOVE-CORRESPONDING KMPOS TO BSIK.
          PERFORM FILL_WAEHRUNGSFELDER_BSIDK.
          PERFORM FILL_SKONTO_BSIDK.
          CLEAR RF140-WAERS.
          RF140-WAERS = BSIK-WAERS.
*        IF BSIK-BSTAT NE 'S'.
          IF BSIK-SHKZG = 'S'.
            RF140-PSSHB = KMPOS-PSWBT.
            RF140-ZLSHB = KMPOS-NEBTR.
          ELSE.
            RF140-PSSHB = 0 - KMPOS-PSWBT.
            RF140-ZLSHB = 0 - KMPOS-NEBTR.
          ENDIF.
          *bsik  = bsik.
          *rf140 = rf140.
          alw_waers = bsik-waers.
          PERFORM CURRENCY_GET_SUBSEQUENT
                      USING
                         save_repid
                         datum02
                         bsik-bukrs
                      CHANGING
                         alw_waers.
          if alw_waers ne bsik-waers.
            bsik-waers = alw_waers.
            PERFORM CURR_DOCUMENT_CONVERT_BSik
                        USING
                           datum02
                           *bsik-waers
                           *t001-waers
                           bsik-waers
                        CHANGING
                           bsik.
            PERFORM FILL_WAEHRUNGSFELDER_BSIDK.
            PERFORM FILL_SKONTO_BSIDK.
            CLEAR RF140-WAERS.
            RF140-WAERS = BSIk-WAERS.
            PERFORM CONVERT_FOREIGN_TO_FOREIGN_CUR
                        USING
                           datum02
                           *bsik-waers
                           *t001-waers
                           bsik-waers
                        CHANGING
                           kmpos-nebtr.
                IF BSIk-SHKZG = 'S'.
                  RF140-ZLSHB = kmPOS-NEBTR.
                ELSE.
                  RF140-ZLSHB = 0 - kmPOS-NEBTR.
                ENDIF.
          endif.
*           IF  BSIk-AUGDT IS INITIAL
*           OR  BSIk-AUGDT GT SAVE2_DATUM.
              alw_waers = kmpos-pswsl.
              PERFORM CURRENCY_GET_SUBSEQUENT
                          USING
                             save_repid
                             datum02
                             bsik-bukrs
                          CHANGING
                             alw_waers.
              if alw_waers ne kmpos-pswsl.
                PERFORM CONVERT_FOREIGN_TO_FOREIGN_CUR
                            USING
                               datum02
                               kmpos-pswsl
                               *t001-waers
                               alw_waers
                            CHANGING
                               kmpos-pswbt.
                kmpos-pswsl = alw_waers.
                bsik-pswsl  = alw_waers.
                bsik-pswbt  = kmpos-pswbt.
                IF BSIk-SHKZG = 'S'.
                  RF140-PSSHB = kmPOS-PSWBT.
                ELSE.
                  RF140-PSSHB = 0 - kmPOS-PSWBT.
                ENDIF.
*           endif.
            endif.
*         endif.
          clear saldom.
          MOVE kmPOS-PSWSL  TO SALDOm-WAERS.
          MOVE RF140-DMSHB  TO SALDOm-SALDOH.
          MOVE RF140-PSSHB  TO SALDOM-SALDOW.
          IF BSIK-AUGDT IS INITIAL
          OR BSIK-AUGDT GT SAVE2_DATUM.
            MOVE RF140-WSKTA  TO SALDOE-SALSK.
            MOVE RF140-WRSHN  TO SALDOE-SALDN.
          ENDIF.
          COLLECT SALDOM.
          clear saldoz.
          MOVE KMPOS-PSWSL  TO SALDOZ-WAERS.
          MOVE RF140-DMSHB  TO SALDOZ-SALDOH.
          MOVE RF140-PSSHB  TO SALDOZ-SALDOW.
          IF  BSIK-AUGDT IS INITIAL
          OR  BSIK-AUGDT GT SAVE2_DATUM.
            MOVE RF140-WSKTA  TO SALDOZ-SALSK.
            MOVE RF140-WRSHN  TO SALDOZ-SALDN.
          ENDIF.
          COLLECT SALDOZ.
*        ENDIF.
          IF NOT RF140-VSTID IS INITIAL.
            IF KMPOS-VZTAS IS INITIAL.
              CLEAR RF140-VZTAS.
              RF140-NETDT = KMPOS-NETDT.
            ELSE.
              RF140-VZTAS = KMPOS-VZTAS.
              RF140-NETDT = KMPOS-NETDT.
            ENDIF.
            IF KMPOS-AUGBL IS INITIAL
            OR ( KMPOS-AUGDT GT RF140-VSTID
                AND NOT RVZTAG IS INITIAL ).
              IF RF140-VZTAS GE '0'.
                clear saldof.
                MOVE KMPOS-PSWSL  TO SALDOF-WAERS.
                MOVE RF140-DMSHB  TO SALDOF-SALDOH.
                MOVE RF140-PSSHB  TO SALDOF-SALDOW.
                MOVE RF140-WSKTA  TO SALDOF-SALSK.
                MOVE RF140-WRSHN  TO SALDOF-SALDN.
                COLLECT SALDOF.
              ENDIF.
            ENDIF.
          ENDIF.
          IF BSIK-SGTXT(1) NE '*'.
            BSIK-SGTXT = SPACE.
          ELSE.
            BSIK-SGTXT = BSIK-SGTXT+1.
          ENDIF.
          IF BSIK-XBLNR IS INITIAL.
            MOVE BSIK-BELNR TO RF140-BELEGNUM.
          ELSE.
            MOVE BSIK-XBLNR TO RF140-BELEGNUM.
          ENDIF.
          CLEAR SAVE_BLART.
          SAVE_BLART = BSIK-BLART.
          PERFORM READ_T003T.
          SAVE_BSCHL = BSIK-BSCHL.
          PERFORM READ_TBSLT.
          IF BSIK-AUGBL IS INITIAL.
            EREIGNIS = '532'.
          ELSE.
            EREIGNIS = '533'.
          ENDIF.
*        IF NOT RXOPOS IS INITIAL.
          CLEAR RF140-ELEMENT.
          RF140-ELEMENT = EREIGNIS.
**          CALL FUNCTION 'WRITE_FORM'
**               EXPORTING
**                    WINDOW  = 'MAIN'
**                    ELEMENT = EREIGNIS
**               EXCEPTIONS
**                    WINDOW  = 1
**                    ELEMENT = 2.
          IF SY-SUBRC = 1.
            WINDOW = 'MAIN'.
            PERFORM MESSAGE_WINDOW.
          ENDIF.
          IF SY-SUBRC = 2.
            WINDOW = 'MAIN'.
            PERFORM MESSAGE_ELEMENT.
          ENDIF.
*        ENDIF.
          IF NOT XUMSKZ IS INITIAL.
            AT END OF <UMSKZ6>.
          clear: *rf140-waers, *rf140-saldo, *rf140-hwaer,
                 *rf140-saldohw, *rf140-salsk, *rf140-saldn.
              LOOP AT SALDOZ.
                MOVE SALDOZ-WAERS  TO RF140-WAERS.
                MOVE SALDOZ-SALDOW TO RF140-SALDO.
                MOVE T001-WAERS    TO RF140-HWAER.
                MOVE SALDOZ-SALDOH TO RF140-SALDOHW.
                MOVE SALDOZ-SALSK  TO RF140-SALSK.
                MOVE SALDOZ-SALDN  TO RF140-SALDN.
                CLEAR EREIGNIS.
                IF SY-TABIX = '1'.
                  EREIGNIS = '544'.
                ELSE.
                  EREIGNIS = '545'.
                ENDIF.
                CLEAR RF140-ELEMENT.
                RF140-ELEMENT = EREIGNIS.
**                CALL FUNCTION 'WRITE_FORM'
**                     EXPORTING
**                          WINDOW  = 'MAIN'
**                          ELEMENT = EREIGNIS
**                     EXCEPTIONS
**                          WINDOW  = 1
**                          ELEMENT = 2.
                IF SY-SUBRC = 1.
                  WINDOW = 'MAIN'.
                  PERFORM MESSAGE_WINDOW.
                ENDIF.
                IF SY-SUBRC = 2.
                  WINDOW = 'MAIN'.
                  PERFORM MESSAGE_ELEMENT.
                ENDIF.
              ENDLOOP.
            ENDAT.
          ENDIF.
        ENDLOOP.
      ENDIF.

      DESCRIBE TABLE SALDOM LINES SLDMLINES.
      IF SLDMLINES GT 0.
        SORT SALDOM BY WAERS.
        PERFORM PROTECT.
          clear: *rf140-waers, *rf140-saldo, *rf140-hwaer,
                 *rf140-saldohw, *rf140-salsk, *rf140-saldn.
        LOOP AT SALDOM.
          MOVE SALDOM-WAERS  TO RF140-WAERS.
          MOVE SALDOM-SALDOW TO RF140-SALDO.
          MOVE T001-WAERS    TO RF140-HWAER.
          MOVE SALDOM-SALDOH TO RF140-SALDOHW.
          MOVE SALDOM-SALSK  TO RF140-SALSK.
          MOVE SALDOM-SALDN  TO RF140-SALDN.
          IF SY-TABIX = '1'.
            IF SAVE_RXOPOL IS INITIAL.
              EREIGNIS = '561'.
            ELSE.
              EREIGNIS = '564'.
            ENDIF.
            CLEAR RF140-ELEMENT.
            RF140-ELEMENT = EREIGNIS.
**            CALL FUNCTION 'WRITE_FORM'
**                 EXPORTING
**                      WINDOW  = 'MAIN'
**                      ELEMENT = EREIGNIS
**                 EXCEPTIONS
**                      WINDOW  = 1
**                      ELEMENT = 2.
            IF SY-SUBRC = 1.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_WINDOW.
            ENDIF.
            IF SY-SUBRC = 2.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_ELEMENT.
            ENDIF.
          ELSE.
            IF SAVE_RXOPOL IS INITIAL.
              EREIGNIS = '562'.
            ELSE.
              EREIGNIS = '565'.
            ENDIF.
            CLEAR RF140-ELEMENT.
            RF140-ELEMENT = EREIGNIS.
**            CALL FUNCTION 'WRITE_FORM'
**                 EXPORTING
**                      WINDOW  = 'MAIN'
**                      ELEMENT = EREIGNIS
**                 EXCEPTIONS
**                      WINDOW  = 1
**                      ELEMENT = 2.
            IF SY-SUBRC = 1.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_WINDOW.
            ENDIF.
            IF SY-SUBRC = 2.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_ELEMENT.
            ENDIF.
          ENDIF.
        ENDLOOP.
        PERFORM ENDPROTECT.
      ELSE.
*      IF SAVE_KOART = 'D'.
        IF ( SLDELINES GT 0
        AND NOT SAVE_STATBL IS INITIAL )
        OR  ( NOT SAVE_STATBL IS INITIAL
        AND NOT SAVE_RXOPOL IS INITIAL ).
          CLEAR RF140-WAERS.
          CLEAR RF140-SALDO.
          CLEAR RF140-HWAER.
          CLEAR RF140-SALDOHW.
          IF SAVE_RXOPOL IS INITIAL.
            RF140-STIDA = RF140-DATU2.
            IF NOT SAVE_RXFAED IS INITIAL.
              RF140-DATU2 = SAVE_FAEDT.
            ENDIF.
          ENDIF.

          CLEAR RF140-ELEMENT.
          RF140-ELEMENT = '535'.
**          CALL FUNCTION 'WRITE_FORM'
**               EXPORTING
**                    WINDOW  = 'MAIN'
**                    ELEMENT = '535'
**               EXCEPTIONS
**                    WINDOW  = 1
**                    ELEMENT = 2.
          IF SY-SUBRC = 1.
            WINDOW = 'MAIN'.
            PERFORM MESSAGE_WINDOW.
          ENDIF.
          IF SY-SUBRC = 2.
            WINDOW = 'MAIN'.
            EREIGNIS = '535'.
            PERFORM MESSAGE_ELEMENT.
          ENDIF.

          IF SAVE_RXOPOL IS INITIAL.
            EREIGNIS = '563'.
          ELSE.
            EREIGNIS = '566'.
          ENDIF.
          MOVE T001-WAERS    TO RF140-waers.
          MOVE T001-WAERS    TO RF140-HWAER.
          CLEAR RF140-ELEMENT.
          RF140-ELEMENT = EREIGNIS.
**          CALL FUNCTION 'WRITE_FORM'
**               EXPORTING
**                    WINDOW  = 'MAIN'
**                    ELEMENT = EREIGNIS
**               EXCEPTIONS
**                    WINDOW  = 1
**                    ELEMENT = 2.
          IF SY-SUBRC = 1.
            WINDOW = 'MAIN'.
            PERFORM MESSAGE_WINDOW.
          ENDIF.
          IF SY-SUBRC = 2.
            WINDOW = 'MAIN'.
            PERFORM MESSAGE_ELEMENT.
          ENDIF.

        ENDIF.
*      ELSE.
*        IF SLDELINES GT 0.
*          CLEAR RF140-WAERS.
*          CLEAR RF140-SALDO.
*          CLEAR RF140-HWAER.
*          CLEAR RF140-SALDOHW.
*          CALL FUNCTION 'WRITE_FORM'
*                   EXPORTING  WINDOW    = 'MAIN'
*                              ELEMENT   = '563'
*                   EXCEPTIONS WINDOW    = 1
*                              ELEMENT   = 2.
*                   IF SY-SUBRC = 1.
**                WINDOW = 'MAIN'.
**                PERFORM MESSAGE_WINDOW.
*                   ENDIF.
*                   IF SY-SUBRC = 2.
**                WINDOW = 'MAIN'.
**                FTEXT = TEXT-563.
**                PERFORM MESSAGE_ELEMENT.
*                   ENDIF.
*
*        ENDIF.
*      ENDIF.
      ENDIF.

      IF SAVE_RXOPOL IS INITIAL.
        EREIGNIS = '520'.
      ELSE.
        EREIGNIS = '523'.
      ENDIF.
      CLEAR RF140-ELEMENT.
      RF140-ELEMENT = EREIGNIS.
**      CALL FUNCTION 'WRITE_FORM'
**           EXPORTING
**                WINDOW   = 'MAIN'
**                ELEMENT  = EREIGNIS
**                TYPE     = 'TOP'
**                FUNCTION = 'DELETE'
**           EXCEPTIONS
**                WINDOW   = 1
**                ELEMENT  = 2.
      IF SY-SUBRC = 1.
        WINDOW = 'MAIN'.
        PERFORM MESSAGE_WINDOW.
      ENDIF.
      IF SY-SUBRC = 2.
        WINDOW = 'MAIN'.
        PERFORM MESSAGE_ELEMENT.
      ENDIF.

*------Summe f#llige Posten und OP-Rasterung--------------------------*

      IF NOT RF140-VSTID IS INITIAL.
        DESCRIBE TABLE SALDOF LINES SLDFLINES.
        IF SLDFLINES GT 0.
          SORT SALDOF BY WAERS.
          PERFORM PROTECT.
          clear: *rf140-waers, *rf140-saldo, *rf140-hwaer,
                 *rf140-saldohw, *rf140-salsk, *rf140-saldn.
          LOOP AT SALDOF.
            MOVE SALDOF-WAERS  TO RF140-WAERS.
            MOVE SALDOF-SALDOW TO RF140-SALDO.
            MOVE T001-WAERS    TO RF140-HWAER.
            MOVE SALDOF-SALDOH TO RF140-SALDOHW.
            MOVE SALDOF-SALSK  TO RF140-SALSK.
            MOVE SALDOF-SALDN  TO RF140-SALDN.
            IF SY-TABIX = '1'.
              CLEAR RF140-ELEMENT.
              RF140-ELEMENT = '570'.
**              CALL FUNCTION 'WRITE_FORM'
**                   EXPORTING
**                        WINDOW  = 'MAIN'
**                        ELEMENT = '570'
**                   EXCEPTIONS
**                        WINDOW  = 1
**                        ELEMENT = 2.
              IF SY-SUBRC = 1.
                WINDOW = 'MAIN'.
                PERFORM MESSAGE_WINDOW.
              ENDIF.
              IF SY-SUBRC = 2.
                WINDOW = 'MAIN'.
                EREIGNIS = '570'.
                PERFORM MESSAGE_ELEMENT.
              ENDIF.
            ELSE.
              CLEAR RF140-ELEMENT.
              RF140-ELEMENT = '571'.
**              CALL FUNCTION 'WRITE_FORM'
**                   EXPORTING
**                        WINDOW  = 'MAIN'
**                        ELEMENT = '571'
**                   EXCEPTIONS
**                        WINDOW  = 1
**                        ELEMENT = 2.
              IF SY-SUBRC = 1.
                WINDOW = 'MAIN'.
                PERFORM MESSAGE_WINDOW.
              ENDIF.
              IF SY-SUBRC = 2.
                WINDOW = 'MAIN'.
                EREIGNIS = '571'.
                PERFORM MESSAGE_ELEMENT.
              ENDIF.
            ENDIF.
          ENDLOOP.
          PERFORM ENDPROTECT.
        ELSE.
          CLEAR RF140-WAERS.
          CLEAR RF140-SALDO.
          CLEAR RF140-HWAER.
          CLEAR RF140-SALDOHW.
          CLEAR RF140-ELEMENT.
          RF140-ELEMENT = '572'.
          MOVE T001-WAERS    TO RF140-waers.
          MOVE T001-WAERS    TO RF140-HWAER.
**          CALL FUNCTION 'WRITE_FORM'
**               EXPORTING
**                    WINDOW  = 'MAIN'
**                    ELEMENT = '572'
**               EXCEPTIONS
**                    WINDOW  = 1
**                    ELEMENT = 2.
          IF SY-SUBRC = 1.
            WINDOW = 'MAIN'.
            PERFORM MESSAGE_WINDOW.
          ENDIF.
          IF SY-SUBRC = 2.
            WINDOW = 'MAIN'.
            EREIGNIS = '572'.
            PERFORM MESSAGE_ELEMENT.
          ENDIF.
        ENDIF.

        CLEAR SLDFLINES.
        DESCRIBE TABLE RTAB LINES SLDFLINES.
        IF SLDFLINES GT 0.
*        CLEAR RF140-RPT01. RF140-RPT01 = RP01.
*        CLEAR RF140-RPT02. RF140-RPT02 = RP02.
*        CLEAR RF140-RPT03. RF140-RPT03 = RP03.
*        CLEAR RF140-RPT04. RF140-RPT04 = RP04.
*        CLEAR RF140-RPT05. RF140-RPT05 = RP05.
*        CLEAR RF140-RPT06. RF140-RPT06 = RP06.
*        CLEAR RF140-RPT07. RF140-RPT07 = RP07.
*        CLEAR RF140-RPT08. RF140-RPT08 = RP08.
*        CLEAR RF140-RPT09. RF140-RPT09 = RP09.
*        CLEAR RF140-RPT10. RF140-RPT10 = RP10.

          CLEAR RF140-ELEMENT.
          RF140-ELEMENT = '543'.
**          CALL FUNCTION 'WRITE_FORM'
**               EXPORTING
**                    WINDOW  = 'MAIN'
**                    ELEMENT = '543'
**               EXCEPTIONS
**                    WINDOW  = 1
**                    ELEMENT = 2.
          IF SY-SUBRC = 1.
            WINDOW = 'MAIN'.
            PERFORM MESSAGE_WINDOW.
          ENDIF.
          IF SY-SUBRC = 2.
            WINDOW = 'MAIN'.
            EREIGNIS = '543'.
            PERFORM MESSAGE_ELEMENT.
          ENDIF.

          CLEAR RF140-ELEMENT.
          RF140-ELEMENT = '573'.
**          CALL FUNCTION 'WRITE_FORM'
**               EXPORTING
**                    WINDOW  = 'MAIN'
**                    ELEMENT = '573'
**               EXCEPTIONS
**                    WINDOW  = 1
**                    ELEMENT = 2.
          IF SY-SUBRC = 1.
            WINDOW = 'MAIN'.
            PERFORM MESSAGE_WINDOW.
          ENDIF.
          IF SY-SUBRC = 2.
            WINDOW = 'MAIN'.
            EREIGNIS = '573'.
            PERFORM MESSAGE_ELEMENT.
          ENDIF.

          CLEAR RF140-ELEMENT.
          RF140-ELEMENT = '573'.
**          CALL FUNCTION 'WRITE_FORM'
**               EXPORTING
**                    WINDOW  = 'MAIN'
**                    ELEMENT = '573'
**                    TYPE    = 'TOP'
**               EXCEPTIONS
**                    WINDOW  = 1
**                    ELEMENT = 2.
          IF SY-SUBRC = 1.
            WINDOW = 'MAIN'.
            PERFORM MESSAGE_WINDOW.
          ENDIF.
          IF SY-SUBRC = 2.
            WINDOW = 'MAIN'.
            EREIGNIS = '573'.
            PERFORM MESSAGE_ELEMENT.
          ENDIF.

          LOOP AT RTAB.
            CLEAR RF140-WAERS. RF140-WAERS = RTAB-WAERS.
            CLEAR RF140-SALDO. RF140-SALDO = RTAB-OPSUM.
            CLEAR RF140-RAST1. RF140-RAST1 = RTAB-RAST1.
            CLEAR RF140-RAST2. RF140-RAST2 = RTAB-RAST2.
            CLEAR RF140-RAST3. RF140-RAST3 = RTAB-RAST3.
            CLEAR RF140-RAST4. RF140-RAST4 = RTAB-RAST4.
            CLEAR RF140-RAST5. RF140-RAST5 = RTAB-RAST5.
            CLEAR RF140-RAST6. RF140-RAST6 = RTAB-RAST6.

            CASE RTAB-RAART.
              WHEN '1'.
                EREIGNIS = '574'.
              WHEN '2'.
                EREIGNIS = '575'.
              WHEN '3'.
                EREIGNIS = '576'.
              WHEN '4'.
                EREIGNIS = '577'.
              WHEN '5'.
                EREIGNIS = '578'.
            ENDCASE.

            CLEAR RF140-ELEMENT.
            RF140-ELEMENT = EREIGNIS.
**            CALL FUNCTION 'WRITE_FORM'
**                 EXPORTING
**                      WINDOW  = 'MAIN'
**                      ELEMENT = EREIGNIS
**                 EXCEPTIONS
**                      WINDOW  = 1
**                      ELEMENT = 2.
            IF SY-SUBRC = 1.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_WINDOW.
            ENDIF.
            IF SY-SUBRC = 2.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_ELEMENT.
            ENDIF.

          ENDLOOP.

**          CALL FUNCTION 'WRITE_FORM'
**               EXPORTING
**                    WINDOW   = 'MAIN'
**                    ELEMENT  = '573'
**                    TYPE     = 'TOP'
**                    FUNCTION = 'DELETE'
**               EXCEPTIONS
**                    WINDOW   = 1
**                    ELEMENT  = 2.
          IF SY-SUBRC = 1.
            WINDOW = 'MAIN'.
            PERFORM MESSAGE_WINDOW.
          ENDIF.
          IF SY-SUBRC = 2.
            WINDOW = 'MAIN'.
            EREIGNIS = '573'.
            PERFORM MESSAGE_ELEMENT.
          ENDIF.

        ENDIF.
      ENDIF.

      IF  NOT XZENT  IS INITIAL.
*    AND     HXDEZV IS INITIAL.
        DESCRIBE TABLE FILIALEN LINES SY-TFILL.
        IF NOT SY-TFILL IS INITIAL.
          CLEAR RF140-ELEMENT.
          RF140-ELEMENT = '580'.
**          CALL FUNCTION 'WRITE_FORM'
**               EXPORTING
**                    WINDOW  = 'MAIN'
**                    ELEMENT = '580'
**               EXCEPTIONS
**                    WINDOW  = 1
**                    ELEMENT = 2.
          IF SY-SUBRC = 1.
            WINDOW = 'MAIN'.
            PERFORM MESSAGE_WINDOW.
          ENDIF.
          IF SY-SUBRC = 2.
            WINDOW = 'MAIN'.
            EREIGNIS = '580'.
            PERFORM MESSAGE_ELEMENT.
          ENDIF.
        ENDIF.

        LOOP AT FILIALEN.
          CLEAR FIADR.
          IF SAVE_KOART = 'D'.
            LOOP AT HKNA1
              WHERE KUNNR = FILIALEN-FILIALE.
              MOVE-CORRESPONDING HKNA1 TO FIADR.
              MOVE HKNA1-KUNNR         TO FIADR-KONTO.
              MOVE T001-LAND1          TO FIADR-INLND.
            ENDLOOP.
            LOOP AT HKNB1
              WHERE KUNNR = FILIALEN-FILIALE
              AND   BUKRS = SAVE_BUKRS.
              MOVE-CORRESPONDING HKNB1 TO FIADR.
            ENDLOOP.
            CLEAR RF140-ELEMENT.
            RF140-ELEMENT = '581'.
**            CALL FUNCTION 'WRITE_FORM'
**                 EXPORTING
**                      WINDOW  = 'MAIN'
**                      ELEMENT = '581'
**                 EXCEPTIONS
**                      WINDOW  = 1
**                      ELEMENT = 2.
            IF SY-SUBRC = 1.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_WINDOW.
            ENDIF.
            IF SY-SUBRC = 2.
              WINDOW = 'MAIN'.
              EREIGNIS = '581'.
              PERFORM MESSAGE_ELEMENT.
            ENDIF.
          ELSE.
            LOOP AT HLFA1
              WHERE LIFNR = FILIALEN-FILIALE.
              MOVE-CORRESPONDING HLFA1 TO FIADR.
              MOVE HLFA1-LIFNR         TO FIADR-KONTO.
              MOVE T001-LAND1          TO FIADR-INLND.
            ENDLOOP.
            LOOP AT HLFB1
              WHERE LIFNR = FILIALEN-FILIALE
              AND   BUKRS = SAVE_BUKRS.
              MOVE-CORRESPONDING HLFB1 TO FIADR.
            ENDLOOP.
            CLEAR RF140-ELEMENT.
            RF140-ELEMENT = '581'.
**            CALL FUNCTION 'WRITE_FORM'
**                 EXPORTING
**                      WINDOW  = 'MAIN'
**                      ELEMENT = '581'
**                 EXCEPTIONS
**                      WINDOW  = 1
**                      ELEMENT = 2.
            IF SY-SUBRC = 1.
              WINDOW = 'MAIN'.
              PERFORM MESSAGE_WINDOW.
            ENDIF.
            IF SY-SUBRC = 2.
              WINDOW = 'MAIN'.
              EREIGNIS = '581'.
              PERFORM MESSAGE_ELEMENT.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.

      CLEAR RF140-ELEMENT.
      RF140-ELEMENT = '590'.
**      CALL FUNCTION 'WRITE_FORM'
**           EXPORTING
**                WINDOW  = 'MAIN'
**                ELEMENT = '590'
**           EXCEPTIONS
**                WINDOW  = 1
**                ELEMENT = 2.
      IF SY-SUBRC = 1.
        WINDOW = 'MAIN'.
        PERFORM MESSAGE_WINDOW.
      ENDIF.
      IF SY-SUBRC = 2.
        WINDOW = 'MAIN'.
        EREIGNIS = '590'.
        PERFORM MESSAGE_ELEMENT.
      ENDIF.

      IF NOT SAVE_RZLSCH IS INITIAL.

        DESCRIBE TABLE SALDOE LINES SLDELINES.
        IF SLDELINES = 1.
          PAYMI-BUKRS = SAVE_BUKRS.
          PAYMI-ZLSCH = SAVE_RZLSCH.
          PAYMI-NACHA = FINAA-NACHA.
          PAYMI-APPLK = 'FI-FI'.
          PAYMI-ZBUKR = SAVE_BUKRS.
          PAYMI-ZADRT = '01'.
          MOVE-CORRESPONDING DKADR TO PAYMI.
          IF SAVE_KOART = 'D'.
            PAYMI-KUNNR = SAVE_KUNNR.
          ELSE.
            PAYMI-LIFNR = SAVE_LIFNR.
          ENDIF.
          PAYMI-AVSID = RF140-AVSID.
          PAYMI-DATUM = SYST-DATUM.
          PAYMI-VORID = '0001'.

          READ TABLE SALDOE INDEX 1.
          PAYMI-WAERS = SALDOE-WAERS.
          IF SALDOE-SALDOW GT 0.
            PAYMI-SHKZG = 'S'.
          ELSE.
            PAYMI-SHKZG = 'H'.
          ENDIF.
          PAYMI-RBBTR = SALDOE-SALDOH.
          PAYMI-RWBBT = SALDOE-SALDOW.
          PAYMI-RWSKT = SALDOE-SALSK.

          REFRESH HFIMSG.
          CLEAR   HFIMSG.
          CALL FUNCTION 'PAYMENT_MEDIUM_DATA'
               EXPORTING
                    I_PAYMI = PAYMI
               IMPORTING
                    E_PAYMO = PAYMO
               TABLES
                    T_FIMSG = HFIMSG
               EXCEPTIONS
                    OTHERS  = 4.
          IF SY-SUBRC NE 0.
            XKAUSGZT = 'X'.
          ENDIF.
          LOOP AT HFIMSG.
            CALL FUNCTION 'FI_MESSAGE_COLLECT'
                 EXPORTING
                      I_FIMSG       = HFIMSG
*              I_XAPPN       = ' '
                 EXCEPTIONS
*              MSGID_MISSING = 1
*              MSGNO_MISSING = 2
*              MSGTY_MISSING = 3
                      OTHERS        = 4
                      .
            IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
            ENDIF.
          ENDLOOP.
        ELSE.
          CLEAR PAYMI.
          CLEAR PAYMO.
        ENDIF.
      ENDIF.

      PERFORM FORM_END_2.
      XPRINT = 'X'.

      IF  NOT SAVE_RZLSCH IS INITIAL
      AND     XKAUSGZT    IS INITIAL.
        REFRESH HFIMSG.
        CLEAR   HFIMSG.
        CALL FUNCTION 'PAYMENT_MEDIUM_PRINT'
             EXPORTING
                  I_PAYMO    = PAYMO
                  I_ITCPO    = ITCPO
*                 I_DEVICE   = 'PRINTER'
*                 I_DIALOG   = ' '
                  I_LANGUAGE = language
*                 I_XOPEN    = ' '
                  I_ARCHIVE_INDEX  = H_ARCHIVE_INDEX
                  I_ARCHIVE_PARAMS = H_ARCHIVE_PARAMS
*            IMPORTING
*                 E_LANGUAGE =
             TABLES
                  T_FIMSG = HFIMSG
             EXCEPTIONS
                  OTHERS     = 0.
        LOOP AT HFIMSG.
          CALL FUNCTION 'FI_MESSAGE_COLLECT'
               EXPORTING
                    I_FIMSG       = HFIMSG
*              I_XAPPN       = ' '
               EXCEPTIONS
*              MSGID_MISSING = 1
*              MSGNO_MISSING = 2
*              MSGTY_MISSING = 3
                    OTHERS        = 4
                    .
          IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
          ENDIF.
        ENDLOOP.

      ENDIF.
    ENDIF.
  ENDIF.                               "xkausg.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CHECK_OUTPUT
*&---------------------------------------------------------------------*
*       created by note 854148. Statements activating indicator XKAUSG
*       are moved from FORM AUSGABE_KONTOAUSZUG in order to avoid that
*       a fax cover sheet is printed without corresponding output of
*       open item list or customer statement
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
FORM CHECK_OUTPUT .
* CLEAR xkausg.
  CLEAR AIDLINES.
  CLEAR AIKLINES.
  CLEAR AOPLINES.
  CLEAR AMPLINES.
  IF SAVE_RXOPOL IS INITIAL.
    IF SAVE_KOART = 'D'.
      DESCRIBE TABLE HBSID LINES AIDLINES.
      DESCRIBE TABLE DOPOS LINES AOPLINES.
      DESCRIBE TABLE DMPOS LINES AMPLINES.
      IF AIDLINES IS INITIAL.
        IF NOT AOPLINES IS INITIAL
        OR NOT AMPLINES IS INITIAL.
          IF RXKPOS IS INITIAL.
            XKAUSG = 'X'.
          ENDIF.
        ELSE.
          XKAUSG = 'X'.
        ENDIF.
      ENDIF.
    ENDIF.
    IF SAVE_KOART = 'K'.
      DESCRIBE TABLE HBSIK LINES AIKLINES.
      DESCRIBE TABLE KOPOS LINES AOPLINES.
      DESCRIBE TABLE KMPOS LINES AMPLINES.
      IF AIKLINES IS INITIAL.
        IF NOT AOPLINES IS INITIAL
        OR NOT AMPLINES IS INITIAL.
          IF RXKPOS IS INITIAL.
            XKAUSG = 'X'.
          ENDIF.
        ELSE.
          XKAUSG = 'X'.
        ENDIF.
      ENDIF.
    ENDIF.
  ELSE.
    IF SAVE_KOART = 'D'.
      DESCRIBE TABLE DOPOS LINES AOPLINES.
      DESCRIBE TABLE DMPOS LINES AMPLINES.
    ELSE.
      DESCRIBE TABLE KOPOS LINES AOPLINES.
      DESCRIBE TABLE KMPOS LINES AMPLINES.
    ENDIF.
    IF AOPLINES IS INITIAL.
      IF NOT AMPLINES IS INITIAL.
      ELSE.
        IF RXKPOS IS INITIAL.
          XKAUSG = 'X'.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.                    " CHECK_OUTPUT
