************************************************************************
* Program ID           : YAM_GTS_DOWNLOAD                              *
* Program Title        : Golden Tax System Interface (SAP -> GT)       *
* Author               : Peter                                         *
* Date                 : 08/06/2011                                    *
* Change Request Number:CD1K965541                                     *
* Description          : The purpose of this program is to Download    *
* no official fa piao SO billings to GTS file format,and update        *
* addon tbale(billing status detail table)                             *
*======================================================================*
* Copied From          : (Cloned Program)                              *
* Title                : (Program Title)                               *
* Other Related obj    : (Object names)                                *
*======================================================================*
* Change History Log                                                   *
*----------------------------------------------------------------------*
* Mod. no.|  Date    | Name           | Correction Number  | Change Reference *
*----------------------------------------------------------------------*
* MOD-001 |dd/mm/yyyy| xxxxxxxxxxxxxx | XXXXxxxxxx        |   XXXXxxxxxx      *
*                                                                      *
* Description:                                                         *
*----------------------------------------------------------------------*
* MOD-002 |dd/mm/yyyy| xxxxxxxxxxxxxx | XXXXxxxxxx                     *
*                                                                      *
* Description:                                                         *
************************************************************************
* MOD-003 |10/07/2013| Anda Wu        | CD1K976713        | CR2977     *
*                                                                      *
* Description: Bug fix YSE_GTSD-China tax interface #32406             *
************************************************************************
* MOD-004 |09/10/2013| Anda Wu        | CD1K977783        | CR3066     *
*                                                                      *
* Description: Bug fix  YSE_GTSD China tax£¨Amount w Tax£©             *
************************************************************************
* MOD-005 |30/12/2014| Anda Wu        | CD1K984273        | CR3329     *
*                                                                      *
* Description: Extend the enhancement to CJAL£¨Sales org CN07)         *
************************************************************************


REPORT  YAM_GTS_DOWNLOAD
              NO STANDARD PAGE HEADING
              LINE-SIZE  910
              LINE-COUNT 60000(2)
              MESSAGE-ID YSE_GTS.


*&---------------------------------------------------------------------*
*& Table DECLARATION
*&---------------------------------------------------------------------*
TABLES:
  T001,                                       "Company Codes
  VBAK,                                       "Sales Document: Header Data
  VBRK,                                       "Billing Document: Header Data
  VBRP,                                       "Billing Document: Item Data
  BKPF,
  VBUK.                                       "Sales Document: Header Status

*&---------------------------------------------------------------------*
*& Public clare
*&---------------------------------------------------------------------*
DATA: V_STATUS TYPE C.
CLASS LCL_EVENT_RECEIVER DEFINITION DEFERRED.
DATA: EVENT_RECEIVER TYPE REF TO LCL_EVENT_RECEIVER,
      GO_GRID        TYPE REF TO CL_GUI_ALV_GRID.
TYPE-POOLS: SLIS.
CONTROLS: TC_800 TYPE TABLEVIEW USING SCREEN 0800.
DATA:     G_TC_800_LINES  LIKE SY-LOOPC.
*&---------------------------------------------------------------------*
*& SCREEN
*&---------------------------------------------------------------------*
* PARAMETER
SELECTION-SCREEN: BEGIN OF BLOCK B_LK1 WITH FRAME TITLE TEXT-001.
* GT Process status
SELECT-OPTIONS:S_STATUS FOR V_STATUS NO-EXTENSION NO INTERVALS.
* Company code
PARAMETERS:P_BUKRS      TYPE T001-BUKRS OBLIGATORY.
*Fiscal Year
SELECT-OPTIONS:S_GJAHR  FOR BKPF-GJAHR NO-EXTENSION  OBLIGATORY.
* Accounting number
SELECT-OPTIONS:S_BELNR  FOR BKPF-BELNR.
* Sales Organization
SELECT-OPTIONS:S_VKORG  FOR VBAK-VKORG  NO-EXTENSION NO INTERVALS.
* Distribution Channel
SELECT-OPTIONS:S_VTWEG  FOR VBAK-VTWEG  NO-EXTENSION NO INTERVALS.
* Division
SELECT-OPTIONS:S_SPART  FOR VBAK-SPART  NO-EXTENSION NO INTERVALS.
* Sold-to party
SELECT-OPTIONS:S_KUNNR  FOR VBAK-KUNNR.
* SO Type
SELECT-OPTIONS:S_AUART  FOR VBAK-AUART.
* SO creation Date
SELECT-OPTIONS:S_ERDAT  FOR VBAK-ERDAT.
* SO Number
SELECT-OPTIONS:S_VBELN  FOR VBAK-VBELN.
* SO status
SELECT-OPTIONS:S_RFSTK  FOR VBUK-RFSTK.
* Contract Number
SELECT-OPTIONS:S_XBLNR  FOR VBRK-XBLNR.
* Currency
SELECT-OPTIONS:S_WAERK  FOR VBAK-WAERK  NO-EXTENSION NO INTERVALS.
* Billing Type
SELECT-OPTIONS:S_FKART  FOR VBRK-FKART.
* Billing Date
SELECT-OPTIONS:S_FKDAT  FOR VBRK-FKDAT.
* Billing Number
SELECT-OPTIONS:S_RVBELN FOR VBRK-VBELN.
* Sales office
SELECT-OPTIONS:S_VKBUR  FOR VBAK-VKBUR.
* Segment
SELECT-OPTIONS:S_SEG    FOR VBRP-PAOBJNR.
* Created by
SELECT-OPTIONS:S_ERNAM  FOR VBRK-ERNAM.
SELECTION-SCREEN: END OF BLOCK B_LK1.
*&---------------------------------------------------------------------*
*& CONSTANT DECLARATION
*&---------------------------------------------------------------------*
CONSTANTS:
  C_FLAG        TYPE C VALUE 'X',
  C_DOU         TYPE C VALUE ',',
  C_NORM        TYPE KZWI1 VALUE '1170000',
  C_SPEC        TYPE KZWI1 VALUE '11700000',
  C_MASK        TYPE CHAR255 VALUE 'X',       "X
  C_BIS         TYPE C VALUE '\',             "\
  C_GMACH(5)    TYPE C VALUE 'GMACH',         "GMACH
  C_MWST(4)     TYPE C VALUE 'MWST',          "MWST
  C_ZD00(4)     TYPE C VALUE 'ZD00',          "ZD00
  C_CN01(4)     TYPE C VALUE 'CN01',          "CN01
  C_CN02(4)     TYPE C VALUE 'CN02',          "CN02
  C_ZH(2)       TYPE C VALUE 'ZH',            "ZH
  C_EN(2)       TYPE C VALUE 'EN',            "EN
  C_ID(4)       TYPE C VALUE 'SL03',          "SL03
  C_NAME573(10) TYPE C VALUE '0000000573',                  "0000000573
  C_OBJECT(4)   TYPE C VALUE 'VBBK',          "VBBK
  C_FOUR(2)     TYPE C VALUE '4',             "4
  C_GRP01(2)    TYPE C VALUE '01',            "01
  C_GRP02(2)     TYPE C VALUE '02',           "02
  C_GRP03(2)     TYPE C VALUE '03',           "03
  C_01(3)       TYPE C VALUE '_01',           "_01
  C_02(3)       TYPE C VALUE '_02',           "_02
  C_EXT(4)      TYPE C VALUE '.TXT',          ".TXT
  C_C           TYPE C VALUE 'C',             "C
  C_R           TYPE C VALUE 'R',             "R
  C_I           TYPE C VALUE 'I',             "I
  C_EQ(2)       TYPE C VALUE 'EQ',            "EQ
  C_DIV(2)      TYPE C VALUE '~~',            "~~
  C_E           TYPE C VALUE 'E',             "E
  C_M           TYPE C VALUE 'M',             "M
  C_N           TYPE C VALUE 'N',             "N
  C_J           TYPE C VALUE 'J',             "J
  C_1           TYPE C VALUE '1',             "1
  C_O           TYPE C VALUE 'O',             "O
  C_S           TYPE C VALUE 'S',             "S
  C_9           TYPE C VALUE '9',             "9
  C_ASC(10)     TYPE C VALUE 'ASC',
  C_DB(4)       TYPE C VALUE '&IC1',          "&IC1
  C_VF03(4)     TYPE C VALUE 'VF03',          "VF03
  C_VA03(4)     TYPE C VALUE 'VA03',          "VA03
  C_VF(2)       TYPE C VALUE 'VF',            "VF
  C_AUN(3)      TYPE C VALUE 'AUN',           "AUN
  C_PF_STATUS   TYPE SLIS_FORMNAME
                VALUE 'ALV_SET_STATUS',       "ALV_SET_STATUS
  C_DATA_CHANGE TYPE SLIS_FORMNAME
                VALUE 'DATA_CHANGE',          "DATA_CHANGE
  C_DATA_CHANGE1 TYPE SLIS_FORMNAME
                VALUE 'DATA_CHANGE1',         "DATA_CHANGE
  C_COMMAND     TYPE SLIS_FORMNAME
                VALUE 'USER_COMMAND',         "'USER_COMMAND'
  C_BOX(3)      TYPE C VALUE 'BOX',           "BOX
  C_STAUS       TYPE SLIS_FIELDNAME
                VALUE 'STAUS',
  C_BELNR       TYPE SLIS_FIELDNAME
                VALUE 'BELNR',
  C_FKART       TYPE SLIS_FIELDNAME
                VALUE 'FKART',
  C_XBLNR       TYPE SLIS_FIELDNAME
                VALUE 'XBLNR',
  C_ERNAM       TYPE SLIS_FIELDNAME
                VALUE 'ERNAM',
  C_VBELN       TYPE SLIS_FIELDNAME
                VALUE 'VBELN',
  C_POSNR       TYPE SLIS_FIELDNAME
                VALUE 'POSNR',
  C_VATREF       TYPE SLIS_FIELDNAME
                VALUE 'VATREF',
  C_RFSTA       TYPE SLIS_FIELDNAME
                VALUE 'RFSTA',
  C_AUBEL       TYPE SLIS_FIELDNAME
                VALUE 'AUBEL',
  C_LINES       TYPE SLIS_FIELDNAME
                VALUE 'LINES',
  C_VGBEL       TYPE SLIS_FIELDNAME
                VALUE 'VGBEL',
  C_TEXT        TYPE SLIS_FIELDNAME
                VALUE 'TEXT',
  C_VAT         TYPE SLIS_FIELDNAME
                VALUE 'VAT',
  C_FKDAT       TYPE SLIS_FIELDNAME
                VALUE 'FKDAT',
  C_TEL         TYPE SLIS_FIELDNAME
                VALUE 'TEL',
  C_KUNNR       TYPE SLIS_FIELDNAME
                VALUE 'KUNNR',
  C_NAME        TYPE SLIS_FIELDNAME
                VALUE 'NAME',
  C_MATKL       TYPE SLIS_FIELDNAME
                VALUE 'MATKL',
  C_MATNR       TYPE SLIS_FIELDNAME
                VALUE 'MATNR',
  C_ARKTX       TYPE SLIS_FIELDNAME
                VALUE 'ARKTX',
  C_UNIT        TYPE SLIS_FIELDNAME
                VALUE 'UNIT',
  C_PRICE       TYPE SLIS_FIELDNAME
                VALUE 'PRICE',
  C_NETPRICE    TYPE SLIS_FIELDNAME
                VALUE 'NETPRICE',
  C_FKIMG       TYPE SLIS_FIELDNAME
                VALUE 'FKIMG',
  C_SHCOST      TYPE SLIS_FIELDNAME
                VALUE 'SHCOST',
  C_NETWR       TYPE SLIS_FIELDNAME
                VALUE 'NETWR',
  C_KZWI1       TYPE SLIS_FIELDNAME
                VALUE 'KZWI1',
  C_NETSUM      TYPE SLIS_FIELDNAME
                VALUE 'NETSUM',
  C_MWSBP       TYPE SLIS_FIELDNAME
                VALUE 'MWSBP',
  C_WAERK       TYPE SLIS_FIELDNAME
                VALUE 'WAERK',
  C_KBETR       TYPE SLIS_FIELDNAME
                VALUE 'KBETR',
  C_REMARK      TYPE SLIS_FIELDNAME
                VALUE 'REMARK',
  C_SFAKN       TYPE SLIS_FIELDNAME
                VALUE 'SFAKN'.
*&---------------------------------------------------------------------*
*& TYPE DECLARATION
*&---------------------------------------------------------------------*
TYPES: BEGIN OF TY_VBAP,
         VBELN TYPE VBELN,                    "SO
         POSNR TYPE POSNR,                    "Item
         MATNR TYPE MATNR,                    "material number
         ARKTX TYPE ARKTX,                    "text
       END OF TY_VBAP.
TYPES: BEGIN OF TY_ROUND,
         VBELN   TYPE YSE_GTS001-VBELN,  "Billing Document
    POSNR   TYPE YSE_GTS001-POSNR,  "Line item
         KZWI1   TYPE KZWI1,             "Amount w Tax
       END OF   TY_ROUND.
TYPES: BEGIN OF TY_ADJUST_AMOUT,
         VBELN        TYPE YSE_GTS001-VBELN,  "Billing Document
         NETSUM       TYPE CHAR18,            "sum w. tax in one billing
       END OF TY_ADJUST_AMOUT.
TYPES: BEGIN OF TY_TAX_ADDBNK,
         KUNNR TYPE KNA1-KUNNR,
*~~~Start~~~ ChenHua 20111121 [Westernacher]
         ADRNR TYPE KNA1-ADRNR,
*~~~End~~~
         STCD1 TYPE KNA1-STCD1,               "¹º·½Ë°ºÅ
*~~~Start~~~ ChenHua 20111121 [Westernacher]
*         STRAS TYPE KNA1-STRAS,               "¹º·½µØÖ·µç»°
         STRAS TYPE CHAR100,
*~~~End~~~
         KOINH TYPE KNBK-KOINH,               "Bank name
         BANKN TYPE KNBK-BANKN,               "bank account
*~~~Start~~~ ChenHua 20111121 [Westernacher]
         BKREF TYPE KNBK-BKREF,               "Reference
*~~~End~~~
       END OF TY_TAX_ADDBNK.
TYPES: BEGIN OF TY_STATUS,
         VALUE TYPE C,
         TEXT  TYPE CHAR10,
       END OF TY_STATUS.
TYPES: BEGIN OF TY_VBELN,
         VBELN  TYPE VBELN_VF,                "Billing Document
       END OF TY_VBELN.
TYPES: BEGIN OF TY_ADJUST_SUMAMOUT,
         VBELN        TYPE VBELN_VF,                "Billing Document
         NETSUM       TYPE KZWI1,             "sum w tax in one billing
       END OF TY_ADJUST_SUMAMOUT.
TYPES: BEGIN OF TY_EXVBELN,
         VBELN  TYPE YSE_GTS001-VBELN,        "Billing Document
       END OF TY_EXVBELN.
TYPES: BEGIN OF TY_DOWNLOAD,
         AUBEL   TYPE VBELN_VA,               "ÏúÊÛµ¥¾Ý±àºÅ
         VATYP   TYPE CHAR8,                  "·¢Æ±ÖÖÀà
         TPCODE  TYPE CHAR9,                  "Àà±ð´úÂë
         BELNR   TYPE BKPF-BELNR,             "Accounting Document
         VBELN   TYPE VBAK-VBELN,             "·¢Æ±ºÅÂë
         VATREF  TYPE YSE_GTS001-VATREF,      "¿ªÆ±»úºÅ
         GOUNAME TYPE CHAR30,                 "¹º·½Ãû³Æ
         GOUSUI  TYPE CHAR20,                 "¹º·½Ë°ºÅ
         GOUDD   TYPE CHAR120,                 "¹º·½µØÖ·µç»°
         BANKN   TYPE KNBK-BANKN,             "¿ª»§ÐÐ
         GOUBANK TYPE HRTMC_ICON_NAME,        "¹º·½ÒøÐÐÕÊºÅ
         FKDAT   TYPE CHAR10,                 "¿ªÆ±ÈÕÆÚ
         AMOUT   TYPE CHAR20,                 "ºÏ¼Æ½ð¶î
         RATE    TYPE CHAR3,                  "Ë°ÂÊ
         SUI     TYPE CHAR20,                 "ºÏ¼ÆË°¶î
         FKIMG   TYPE CHAR23,                 "ÊýÁ¿NEW
         UNIT    TYPE CHAR3,                  "µ¥Î»NEW
         HUONAME TYPE CHAR120,                 "»õÎï»òÓ¦Ë°ÀÍÎñÃû³Æ
         GUINAME TYPE CHAR20,                 "¹æ¸ñÐÍºÅ
         SHANG   TYPE VBELN_VA,               "ÉÌÆ·Ë°Ä¿
         TEXT    TYPE CHAR100,                "±¸×¢
         KAI     TYPE VBELN_VA,               "¿ªÆ±ÈË
         SHOU    TYPE VBELN_VA,               "ÊÕ¿îÈË
         FUHE    TYPE VBELN_VA,               "¸´ºËÈË
         DEFLG   TYPE VBELN_VA,               "×÷·Ï±êÖ¾
         KAINAME TYPE VBELN_VA,               "¿ªÆ±ÈË
         REMARK  TYPE YSE_GTS001-REMARK,
         SUM     TYPE CHAR20,                 "¶©µ¥×Ü½ð¶îNEW20
*         TEL     TYPE ADRC-TEL_NUMBER,"TEL
       END OF TY_DOWNLOAD.
TYPES: BEGIN OF TY_FUNC,
         FUNC(10) TYPE C,
       END OF TY_FUNC.
TYPES: BEGIN OF TY_CUSTOMER,
         KUNNR TYPE KNA1-KUNNR,
       END OF TY_CUSTOMER.
TYPES: BEGIN OF TY_SHCOST,
         VBELN  TYPE VBELN_VF,
         GROUP  TYPE VBRP-MATKL,
         SHCOST(16)   TYPE P DECIMALS 6,
         ONEAMOUT(16) TYPE P DECIMALS 6,
       END OF TY_SHCOST.
TYPES: BEGIN OF TY_DIFF,
         VBELN  TYPE VBELN_VF,
         ITEM   TYPE POSNR,
         DIST(16)   TYPE P DECIMALS 6,
         SUM    TYPE CHAR20,
       END OF TY_DIFF.
TYPES: BEGIN OF TY_TEXT,
         TDFORMAT TYPE TLINE-TDFORMAT,
         TDLINE   TYPE TLINE-TDLINE,
       END OF TY_TEXT.
TYPES: BEGIN OF TY_MATKL,
          MATNR TYPE MARA-MATNR,
          MATKL TYPE MARA-MATKL,
       END OF TY_MATKL.
TYPES: BEGIN OF TY_RSTXT,
         TDID     TYPE RSTXT-TDID,
         TDSPRAS  TYPE RSTXT-TDSPRAS,
         TDNAME   TYPE RSTXT-TDNAME ,
         TDOBJECT TYPE RSTXT-TDOBJECT,
       END OF TY_RSTXT.
TYPES: BEGIN OF TY_MAKT,
         MATNR TYPE MAKT-MATNR,               "Material Number
         MAKTX TYPE MAKT-MAKTX,               "Material Description
       END OF TY_MAKT.
TYPES: BEGIN OF TY_VBRP,
         VBELN  TYPE  VBRP-VBELN,             "billing
         POSNR  TYPE  VBRP-POSNR,             "item
         UEPOS  TYPE  VBRP-UEPOS,             "Higher-level item
         FKIMG  TYPE  VBRP-FKIMG,             "qty
         VRKME  TYPE  VBRP-VRKME,             "sale unit
         MATNR  TYPE  VBRP-MATNR,             "material
         MATKL  TYPE  VBRP-MATKL,             "Material group
         NETWR  TYPE  VBRP-NETWR,             "net value
         VGBEL  TYPE  VBRP-VGBEL,             "delivery number
         MWSBP  TYPE  VBRP-MWSBP,             "amout tax
         SKFBP  TYPE  VBRP-KZWI1,             "sum
         AUBEL  TYPE  VBRP-AUBEL,             "so
         AUPOS  TYPE  VBRP-AUPOS,             "so item number
         SFAKN TYPE SFAKN,                    "Cancelled billing document number
       END OF TY_VBRP.
TYPES: BEGIN OF TY_KUNNR,
         KUNNR TYPE KNA1-KUNNR,               "CUSTOMER
         ADRNR TYPE KNA1-ADRNR,               "ADDRESS NO
     NAME1 TYPE ADRC-NAME1,               "CUSTOMER NAME
         TEL_NUMBER TYPE ADRC-TEL_NUMBER,
       END OF TY_KUNNR.
TYPES: BEGIN OF TY_ADDR,
         ADDRNUMBER TYPE ADRC-ADDRNUMBER,     "Bill-to party number
         NAME1      TYPE ADRC-NAME1,          "Name1
         TEL_NUMBER TYPE ADRC-TEL_NUMBER,          "TEL
       END OF TY_ADDR.
TYPES: BEGIN OF TY_SALE_ORG,
         VKORG TYPE YSE_GTS001-VKORG,
         VTWEG TYPE YSE_GTS001-VTWEG,
         SPART TYPE YSE_GTS001-SPART,
       END OF TY_SALE_ORG.
TYPES: BEGIN OF TY_VBRK,
         VBELN TYPE VBELN_VF,                 "Billing Document
*         VBELN TYPE BKPF-AWKEY,                 "Billing Document
         FKART TYPE FKART,                    "Billing Type
         KUNAG TYPE KUNAG,                    "Sold-to party
         WAERK TYPE WAERK,                    "Document Currency
         VKORG TYPE VKORG,                    "Sales Organization
         KNUMV TYPE KNUMV,                    "Number of the document condition
         ERDAT TYPE FKDAT,                    "Billing date
         RFBSK TYPE RFBSK,                    "Status for transfer to accounting
         XBLNR TYPE BSTKD,                    "Reference Document Number
         FKSTO TYPE FKSTO,                    "Billing document is cancelled
         SFAKN TYPE SFAKN,                    "Cancelled billing document number
         VBTYP TYPE VBTYP,                    "SD document category
         NETWR TYPE NETWR,                    "Net Value in Document Currency
         BUKRS TYPE BUKRS,                    "Company Code
         MWSBK TYPE MWSBP,                    "Tax amount in document currency
         AWKEY TYPE BKPF-AWKEY,               "Billing Document
         ERNAM        TYPE VBAK-ERNAM,               "Creat by

*         VKORG TYPE VBAK-VKORG,               "Sales Organization
         VTWEG TYPE VBAK-VTWEG,               "Distribution Chann
         SPART TYPE VBAK-SPART,               "Division
         VKBUR TYPE VBAK-VKBUR,               "Sales office
       END OF TY_VBRK.
TYPES: BEGIN OF TY_VBAK,
         VBELN   TYPE VBAK-VBELN,             "SO Number
         AUART   TYPE VBAK-AUART,             "SO Type
         VKORG   TYPE VBAK-VKORG,             "Sales Organization
         VTWEG   TYPE VBAK-VTWEG,             "Distribution Channel
         SPART   TYPE VBAK-SPART,             "Division
         VKBUR   TYPE VBAK-VKBUR,             "Sales office
         ERDAT   TYPE VBAK-ERDAT,             "SO creation Date
         ERNAM   TYPE VBAK-ERNAM,             "Created by
       END OF TY_VBAK.
TYPES: BEGIN OF TY_BKPF,
         BUKRS  TYPE BKPF-BUKRS,
         BELNR  TYPE BKPF-BELNR,
         GJAHR  TYPE BKPF-GJAHR,
         AWKEY  TYPE VBRK-VBELN,
       END OF TY_BKPF.
TYPES: BEGIN OF TY_AUBEL,
         VBELN  TYPE VBRP-VBELN,
         AUBEL  TYPE VBRP-AUBEL,
       END OF TY_AUBEL.
TYPES: BEGIN OF TY_VBFA,
         VBELV  TYPE VBFA-VBELV,"Preceding sales and distribution document
         VBELN  TYPE VBFA-VBELN,"Subsequent sales and distribution document
       END OF TY_VBFA.

TYPES: BEGIN OF TY_DATA,
         VBELN        TYPE YSE_GTS001-VBELN,  "Billing Document
         BOX(1) TYPE C,                       "Select
         STAUS  TYPE CHAR20,                  "Status
         FKART  TYPE VBRK-FKART,              "Billing Type
    POSNR  TYPE YSE_GTS001-POSNR,        "Line item
         UEPOS  TYPE VBRP-UEPOS,              "Higher-level item
         VATREF TYPE DZUONR,                  "VAT reference
         RFSTA  TYPE VBUP-RFSTA,              "Order status
         AUBEL  TYPE VBELN_VA,                "Order number
         LINES(2) TYPE C,                     "Total no. of li.it. in SO
         VGBEL  TYPE VBRP-VGBEL,              "Delivery order
         TEXT   TYPE CHAR200,                 "TEXT
         VAT    TYPE DZUONR,                  "VAT invoice
         FKDAT  TYPE FKDAT,                   "Billing Date
    KUNNR  TYPE KNA1-KUNNR,              "Customer number
         NAME   TYPE ADRC-NAME1,              "Customer Name
         TEL     TYPE ADRC-TEL_NUMBER,"TEL
    MATNR  TYPE MATNR,                   "Material
    ARKTX  TYPE CHAR120,                 "Material Desciption
 	  UNIT   TYPE CHAR3, "VBRP-VRKME,                   "Unit
    PRICE(16)    TYPE P DECIMALS 6,      "Unit Price w. Tax
         NETPRICE(16) TYPE P DECIMALS 6,      "Net Price
    FKIMG(16)    TYPE P DECIMALS 2,      "Quantity
         SHCOST(16)   TYPE P DECIMALS 6,      "shiping cost
    NETWR        TYPE KZWI1,             "Amount w/o Tax
         KZWI1        TYPE KZWI1,             "Amount w Tax
         NETSUM       TYPE KZWI1,             "sum w tax in one billing
         ORIGIN       TYPE KZWI1,             "origin sum w tax in one billing
    MWSBP        TYPE MWSBP,             "Tax Amount
    WAERK        TYPE WAERK,             "Currency
    KBETR        TYPE KBETR,             "Tax Rate
         CPRICE(40)   TYPE C,                 "Unit Price w. Tax
         SFAKN        TYPE SFAKN,             "Cancelled billing document number
         MATKL        TYPE VBRP-MATKL,        "Material group
         FLG          TYPE C,                 "Delete flag
*~~~Start~~~ ChenHua 20111121 [Westernacher]
*         REMARK       TYPE CHAR100, "REMARK
         REMARK       TYPE CHAR200, "REMARK
*~~~End~~~
         BELNR        TYPE BKPF-BELNR,        "Accounting Document
         XBLNR        TYPE BSTKD,               "PO NO.
         ERNAM        TYPE VBAK-ERNAM,               "Creat by

*SO relation
         VKORG        TYPE VBAK-VKORG,
         VTWEG        TYPE VBAK-VTWEG,
         SPART        TYPE VBAK-SPART,
         VKBUR        TYPE VBAK-VKBUR,
         PRICE1(16)    TYPE P DECIMALS 1,      "Unit Price w. Tax DECIMAL 1

       END OF TY_DATA,
*range work area
BEGIN OF TY_RANGE,
  SIGN       TYPE CHAR1,
  OPTION     TYPE CHAR2,
  LOW        TYPE CHAR40,
  HIGH       TYPE CHAR40,
END OF TY_RANGE.
DATA: BEGIN OF I_RETURN_TAB  OCCURS 0.
        INCLUDE STRUCTURE DDSHRETVAL.
DATA: END OF I_RETURN_TAB.
DATA: BEGIN OF I_STATUS_F4 OCCURS 0 ,
        KEY   LIKE VBUK-FKSTK,
        TEXT  LIKE T7PBSWB2CT-STATTEXT,
      END OF I_STATUS_F4.

*~~~Start~~~ ChenHua 20111121 [Westernacher]
  TYPES:
    BEGIN OF TYP_ADRC,
      ADDRNUMBER TYPE ADRC-ADDRNUMBER,
      NATION TYPE ADRC-NATION,
      STREET TYPE ADRC-STREET,
      STR_SUPPL3 TYPE ADRC-STR_SUPPL3,
    END OF TYP_ADRC.
  DATA:
    D_ADRC TYPE TYP_ADRC,
    T_ADRC TYPE TABLE OF TYP_ADRC.
*~~~End~~~

*&---------------------------------------------------------------------*
*& INTERNAL TABLE DECLARATION
*&---------------------------------------------------------------------*
DATA:
  I_VBRK     TYPE STANDARD TABLE OF TY_VBRK,
  I_GTS004   TYPE STANDARD TABLE OF YSE_GTS004,
  I_GTS001_KEY TYPE STANDARD TABLE OF YSE_GTS001,
  I_TAX_ADDBNK TYPE STANDARD TABLE OF TY_TAX_ADDBNK,
  I_ADJUST_AMOUT TYPE STANDARD TABLE OF TY_ADJUST_AMOUT,
  I_EXVBELN  TYPE STANDARD TABLE OF TY_EXVBELN,
  I_ROUND    TYPE STANDARD TABLE OF TY_ROUND,
  I_AUBEL    TYPE STANDARD TABLE OF TY_AUBEL,
  I_DIFF     TYPE STANDARD TABLE OF TY_DIFF,
  I_SALE_ORG     TYPE STANDARD TABLE OF TY_SALE_ORG,
  I_BKPF     TYPE STANDARD TABLE OF TY_BKPF,
  I_ADDR     TYPE STANDARD TABLE OF TY_ADDR,
  I_FUNC     TYPE STANDARD TABLE OF TY_FUNC,
  I_VBELN    TYPE STANDARD TABLE OF TY_VBELN,
  I_DOWNLOAD TYPE STANDARD TABLE OF TY_DOWNLOAD,
  I_COMB     TYPE STANDARD TABLE OF TY_DATA,
  I_SHCOST   TYPE STANDARD TABLE OF TY_SHCOST,
  I_KUNNR    TYPE STANDARD TABLE OF TY_KUNNR,
  I_F4       TYPE LVC_T_F4  WITH HEADER LINE,
  I_STATUS   TYPE STANDARD TABLE OF TY_STATUS,
  I_FCAT     TYPE SLIS_T_FIELDCAT_ALV,
  I_TEXT     TYPE STANDARD TABLE OF TY_TEXT,
  I_VBRP     TYPE STANDARD TABLE OF TY_VBRP,
  I_MAKT     TYPE STANDARD TABLE OF TY_MAKT,
  I_CUSTOMER TYPE STANDARD TABLE OF TY_CUSTOMER,
  I_GMACH    TYPE STANDARD TABLE OF TY_DATA,
  I_ADJUST_SUMAMOUT    TYPE STANDARD TABLE OF TY_ADJUST_SUMAMOUT,
  I_NGMACH   TYPE STANDARD TABLE OF TY_DATA,
  I_MATKL    TYPE STANDARD TABLE OF TY_MATKL,
  I_DATA     TYPE STANDARD TABLE OF TY_DATA,
  I_VBFA     TYPE STANDARD TABLE OF TY_VBFA,
  I_SUMDATA  TYPE STANDARD TABLE OF TY_DATA.

*&---------------------------------------------------------------------*
*& VARIANT DECLARATION
*&---------------------------------------------------------------------*
DATA: ABGR_OBJ_TOTAL  TYPE I,
      ABGR_OBJ_HELP   TYPE I,
      ABGR_OBJ_HELP1  TYPE I,
      ABGR_OBJ_HELP_F TYPE F,
      ABGR_OBJ_HELP_T(50),
      ABGR_OBJ_HELP_T1(3),
      ABGR_OBJ_HELP_T2(10),
      ABGR_OBJ_LOOPED  TYPE I,
      ABGR_OBJ_TO_LOOP TYPE I,
      ABGR_OBJ_DONE    TYPE I,
      ABGR_OBJ_NOT_DONE TYPE I,
*Global Variant
  FLG_STOP   TYPE C,
  V_SUM      TYPE KZWI1,
  V_UPDATE   TYPE C,
  FLG_800    TYPE C,
  FLG_REG    TYPE C,
  V_FILENAME TYPE STRING,
  V_VATYP    TYPE C,
  OK_CODE    TYPE SY-UCOMM,
  SAVE_OK    TYPE SY-UCOMM,
  V_COMMAND  TYPE CHAR10,
  V_ALVCOMMAND TYPE CHAR10,
  V_DOWN_OK  TYPE C,
  V_REF      TYPE YSE_GTS001-VATREF,
  V_REFLST   TYPE YSE_GTS001-VATREF,
  TAB_LINES  TYPE I,
*Transfer record
  R_VBELN      TYPE  RANGE OF YSE_GTS001-VBELN,
  REC_GTS004   TYPE  YSE_GTS004,
  REC_GTS001_KEY   TYPE  YSE_GTS001,
  REC_TAX_ADDBNK   TYPE  TY_TAX_ADDBNK,
  REC_ADJUST_AMOUT TYPE  TY_ADJUST_AMOUT,
  REC_EXVBELN  TYPE  TY_EXVBELN,
  REC_AUBEL    TYPE  TY_AUBEL,
  REC_ADJUST_SUMAMOUT    TYPE  TY_ADJUST_SUMAMOUT,
  REC_MATKL    TYPE  TY_MATKL,
  REC_VBFA     TYPE  TY_VBFA,
  REC_SALE_ORG     TYPE  TY_SALE_ORG,
  REC_BKPF     TYPE  TY_BKPF,
  REC_ADDR     TYPE  TY_ADDR,
  REC_RANGE    TYPE  TY_RANGE,
  REC_ROUND    TYPE  TY_ROUND,
  REC_VBRK     TYPE  TY_VBRK,
  REC_DIFF     TYPE  TY_DIFF,
  REC_FUNC     TYPE  TY_FUNC,
  REC_VBELN    TYPE  TY_VBELN,
  REC_DOWNLOAD TYPE  TY_DOWNLOAD,
  REC_SHCOST   TYPE  TY_SHCOST,
  REC_KUNNR    TYPE  TY_KUNNR,
  REC_F4       TYPE  LVC_S_F4,
  REC_STATUS   TYPE  TY_STATUS,
  REC_NGMACH   TYPE  TY_DATA,
  REC_GMACH    TYPE  TY_DATA,
  REC_TEXT     TYPE  TY_TEXT,
  REC_RSTXT    TYPE  TY_RSTXT,
  REC_VBRP     TYPE  TY_VBRP,
  REC_MAKT     TYPE  TY_MAKT,
  REC_CUSTOMER TYPE  TY_CUSTOMER,
  REC_VBAK     TYPE  TY_VBAK,
  REC_SUMDATA  TYPE  TY_DATA,
  REC_COMB     TYPE  TY_DATA,
  REC_DATA     TYPE  TY_DATA.

*¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª*
* CLASS LCL_EVENT_RECEIVER DEFINITION
*¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª-*
CLASS LCL_EVENT_RECEIVER DEFINITION.

  PUBLIC SECTION.
    METHODS:
      ONF4 FOR EVENT ONF4 OF CL_GUI_ALV_GRID
      IMPORTING E_FIELDNAME
      E_FIELDVALUE
      ES_ROW_NO
      ER_EVENT_DATA
      ET_BAD_CELLS
      E_DISPLAY.

ENDCLASS.                    "LCL_EVENT_RECEIVER DEFINITION
*¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª-*
* CLASS LCL_EVENT_RECEIVER IMPLEMENTATION
*¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª¡ª-*
CLASS LCL_EVENT_RECEIVER IMPLEMENTATION.

  METHOD ONF4.

    PERFORM SUB_F4_HELP
      USING   E_FIELDNAME
              ES_ROW_NO.
    ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.

  ENDMETHOD.                 "ONF4

ENDCLASS.                    "LCL_EVENT_RECEIVER IMPLEMENTATION
*&---------------------------------------------------------------------*
* Provide F4-values
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR S_STATUS-LOW.


  REFRESH I_STATUS_F4.
  I_STATUS_F4-KEY = ''.
  I_STATUS_F4-TEXT =  TEXT-S02.
  APPEND I_STATUS_F4.
  I_STATUS_F4-KEY = '1'.
  I_STATUS_F4-TEXT =  TEXT-S06.
  APPEND I_STATUS_F4.
  I_STATUS_F4-KEY = '2'.
  I_STATUS_F4-TEXT =  TEXT-S03.
  APPEND I_STATUS_F4.
  I_STATUS_F4-KEY = '3'.
  I_STATUS_F4-TEXT =  TEXT-S04.
  APPEND I_STATUS_F4.
  I_STATUS_F4-KEY = '4'.
  I_STATUS_F4-TEXT =  TEXT-S05.
  APPEND I_STATUS_F4.
  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'KEY'
      WINDOW_TITLE    = TEXT-H01
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = I_STATUS_F4
      RETURN_TAB      = I_RETURN_TAB
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.

  IF SY-SUBRC = 0.
    READ TABLE I_RETURN_TAB INDEX 1.
    S_STATUS-LOW = I_RETURN_TAB-FIELDVAL.
  ENDIF.
*----------------------------------------------------------------------*
*       AT SELECTION-SCREEN                                            *
*----------------------------------------------------------------------*
AT SELECTION-SCREEN.
* Company code Check
  PERFORM CHECK_BUKRS     USING P_BUKRS.
* Authority check
  PERFORM AUTHORITY_CHECK.
INITIALIZATION.
  S_FKDAT-SIGN = 'I'.
  S_FKDAT-OPTION = 'EQ'.
  S_FKDAT-LOW = SY-DATUM.
  APPEND S_FKDAT.

  P_BUKRS = 'SHTA'.

  S_GJAHR-SIGN   = 'I'.
  S_GJAHR-OPTION = 'EQ'.
  S_GJAHR-LOW    = SY-DATUM+0(4).
  APPEND S_GJAHR.
*&---------------------------------------------------------------------*
*&      START-OF-SELECTION
*&---------------------------------------------------------------------*
START-OF-SELECTION.

*  DELETE FROM YSE_GTS001.
**  COMMIT WORK.
*****  LEAVE PROGRAM.
*  DELETE FROM YSE_GTS004.
*  COMMIT WORK.
*  LEAVE PROGRAM.
* Initialization
  PERFORM INIT_DATA.
* regist user
  PERFORM GET_USERNAME.
  IF S_STATUS IS INITIAL.
*   Fetch so billing(accounting bumber is not initial)
    IF S_BELNR IS NOT INITIAL.
      PERFORM GET_VBRK.
    ELSE.
*     Fetch so billing(accounting number is initial)
      PERFORM GET_VBRK1.
    ENDIF.

    CHECK FLG_STOP = SPACE.
*   Fetch so biling items
    PERFORM GET_VBRP.
    CHECK FLG_STOP = SPACE.
*   Filter no needed billings according selection screen
    PERFORM DELETE_NOVBRK.
    CHECK FLG_STOP = SPACE.
*   Fetch others data
    PERFORM GET_OTHER.
*   Edit object data
    PERFORM EDIT_DATA.
  ELSE.
*   Edit object data
    PERFORM GTS001_DATA.
  ENDIF.
  CHECK FLG_STOP = SPACE.
*  IF S_STATUS IS INITIAL.
*   fetch kwz1 value for round
  PERFORM FORROUND_KZWI1.
*  ENDIF.

* ALV display
  PERFORM ALV_SHOW.
*----------------------------------------------------------------------*
* Form CHECK_BUKRS                                                     *
*----------------------------------------------------------------------*
* This form is to  check company code                                  *
*----------------------------------------------------------------------*
* Parameters / Tables:                                                 *
* -->  I_BUKRS   company code                                          *
*----------------------------------------------------------------------*
FORM CHECK_BUKRS USING  I_BUKRS.

  DATA: WL_BUKRS TYPE T001-BUKRS.
  SELECT SINGLE BUKRS
           INTO WL_BUKRS
           FROM T001
          WHERE BUKRS = I_BUKRS.
  IF SY-SUBRC <> 0.
*Company code doesn't exsit
    MESSAGE S001 WITH P_BUKRS.
    SET CURSOR FIELD 'P_BUKRS'.
  ENDIF.

ENDFORM.                    " CHECK_BUKRS

*----------------------------------------------------------------------*
* Form AUTHORITY_CHECK                                                 *
*----------------------------------------------------------------------*
* This form is to check user authority                                *
*----------------------------------------------------------------------*
FORM AUTHORITY_CHECK.

  AUTHORITY-CHECK OBJECT 'YAM_BB_VKO'
           ID 'VKORG' FIELD S_VKORG-LOW
           ID 'VTWEG' FIELD S_VTWEG-LOW
           ID 'SPART' FIELD S_SPART-LOW
           ID 'ACTVT' FIELD '16'.
  IF SY-SUBRC <> 0.
* No authorization
    MESSAGE E002 WITH S_VKORG-LOW S_VTWEG-LOW S_SPART-LOW.
  ENDIF.

ENDFORM.                    " AUTHORITY_CHECK
*&---------------------------------------------------------------------*
*& Form  INIT_DATA
*&---------------------------------------------------------------------*
* This form is to clear data
*----------------------------------------------------------------------*
FORM INIT_DATA .

  REFRESH:I_VBELN,
          I_DOWNLOAD,
          I_COMB,
          I_SHCOST,
          I_KUNNR,
          I_F4,
          I_STATUS,
          I_FCAT,
          I_TEXT,
          I_VBRP,
          I_MAKT,
          I_CUSTOMER,
          I_GMACH,
          I_NGMACH,
          I_DATA,
          I_SUMDATA.
  CLEAR:FLG_STOP,
        V_SUM,
        FLG_REG,
        V_FILENAME,
        V_VATYP,
        OK_CODE,
        SAVE_OK,
        TAB_LINES,
        REC_VBRK,
        REC_VBELN,
        REC_DOWNLOAD,
        REC_SHCOST,
        REC_KUNNR,
        REC_F4,
        REC_STATUS,
        REC_NGMACH,
        REC_GMACH,
        REC_TEXT,
        REC_RSTXT,
        REC_VBRP,
        REC_MAKT,
        REC_CUSTOMER,
        REC_VBAK,
        REC_SUMDATA,
        REC_COMB,
        REC_DATA.

ENDFORM.                    " INIT_DATA
*&---------------------------------------------------------------------*
*& Form  GET_VBRK
*&---------------------------------------------------------------------*
* This form is to fetch the so billing
*----------------------------------------------------------------------*
FORM GET_VBRK .

  DATA:
    L_DATE_FROM TYPE VBRK-FKDAT,
    L_DATE_TO   TYPE VBRK-FKDAT.
  L_DATE_FROM+0(4) = S_GJAHR-LOW.
  L_DATE_FROM+4(2) = '01'.
  L_DATE_FROM+6(2) = '01'.

  IF S_GJAHR-HIGH IS INITIAL.
    L_DATE_TO+0(4) = S_GJAHR-LOW.
    L_DATE_TO+4(2) = '12'.
    L_DATE_TO+6(2) = '31'.
  ELSE.
    L_DATE_TO+0(4) = S_GJAHR-HIGH.
    L_DATE_TO+4(2) = '12'.
    L_DATE_TO+6(2) = '31'.
  ENDIF.


*Accounting number
  SELECT BUKRS
         BELNR
         GJAHR
         AWKEY
    INTO TABLE I_BKPF
    FROM BKPF
   WHERE BUKRS = P_BUKRS
     AND BELNR IN S_BELNR
*~~~Start~~~ ChenHua 20111027 [Westernacher]
*     AND BUDAT IN S_FKDAT
     AND CPUDT IN S_FKDAT
*~~~End~~~
     AND AWKEY IN S_RVBELN
     AND GJAHR IN S_GJAHR.
  IF I_BKPF IS NOT INITIAL.
    LOOP AT I_BKPF INTO REC_BKPF.
      SELECT VBELN                                "Billing Document
             FKART                                "Billing Type
             KUNAG                                "Sold-to party
             WAERK                                "Document Currency
             VKORG                                "Sales Organization
             KNUMV                                "Number of the document condition
             ERDAT                                "Billing date
             RFBSK                                "Status for transfer to accounting
             XBLNR                                "Reference Document Number
             FKSTO                                "Billing document is cancelled
             SFAKN                                "Cancelled billing document number
             VBTYP                                "SD document category
             NETWR                                "Net Value in Document Currency
             BUKRS                                "Company Code
             MWSBK                                "Tax amount in document currency
        APPENDING TABLE I_VBRK
        FROM VBRK
*             FOR ALL ENTRIES IN I_BKPF
       WHERE ERDAT IN S_FKDAT                     "Billing Date
         AND ERDAT >= L_DATE_FROM
         AND ERDAT <= L_DATE_TO
         AND BUKRS = P_BUKRS                      "Company code
*         AND VBELN IN S_RVBELN                    "Billing Number
         AND VBELN = REC_BKPF-AWKEY
         AND FKART IN S_FKART                     "Billing Type
         AND KUNRG IN S_KUNNR                     "Sold-to party
         AND WAERK IN S_WAERK                     "Currency
         AND XBLNR IN S_XBLNR                     "Contract no.
         AND ( RFBSK = C_C                        "Status for transfer to accounting
          OR   RFBSK = C_E )
         AND ( VBTYP = C_M                        "SD document category
          OR   VBTYP = C_N
          OR   VBTYP = C_O
          OR   VBTYP = C_S ).
    ENDLOOP.
  ENDIF.
  IF I_VBRK IS INITIAL.
    FLG_STOP = C_FLAG.
* No Data
    MESSAGE S000 WITH TEXT-S01.
  ENDIF.

ENDFORM.                    " GET_VBRK

*&---------------------------------------------------------------------*
*& Form  DELETE_NOVBRK
*&---------------------------------------------------------------------*
* This form is to filter no needed billings according selection screen
*----------------------------------------------------------------------*
FORM DELETE_NOVBRK .

  DATA:L_VBELN TYPE VBELN,
     L_POINT TYPE I,
     L_RANGE LIKE LINE OF R_VBELN,
     L_DIV   TYPE I.
  DATA:L_VBLN TYPE VBAK-VBELN.
*  SELECT VBELN
*         AUBEL
*    INTO TABLE I_AUBEL
*    FROM VBRP
*         FOR ALL ENTRIES IN I_VBRK
*   WHERE VBELN = I_VBRK-VBELN.
DESCRIBE TABLE I_VBRK LINES ABGR_OBJ_TO_LOOP.
* Delete not needed billing
  LOOP AT I_VBRK INTO REC_VBRK.
    PERFORM process_ind1.
    CLEAR: REC_VBAK.
*    SELECT AUBEL
*      INTO REC_VBRK-XBLNR
*      FROM VBRP
*           UP TO 1 ROWS
*     WHERE VBELN = REC_VBRK-VBELN.
*    ENDSELECT.
    READ TABLE I_VBRP INTO REC_VBRP
           WITH KEY VBELN = REC_VBRK-VBELN.
*    REC_VBRK-XBLNR = REC_VBRP-AUBEL.
    SELECT SINGLE VBELN                       "SO Number
           AUART                              "SO Type
           VKORG                              "Sales Organization
           VTWEG                              "Distribution Channel
           SPART                              "Division
           VKBUR                              "Sales office
           ERDAT                              "SO creation Date
           ERNAM                              "Created by
      INTO REC_VBAK
      FROM VBAK
     WHERE VBELN = REC_VBRP-AUBEL             "SO Document
       AND AUART IN S_AUART                   "Sales Organization
       AND VKORG IN S_VKORG                   "Distribution Channel
       AND SPART IN S_SPART                   "Division
       AND VKBUR IN S_VKBUR                   "Sales office
       AND ERDAT IN S_ERDAT                   "SO creation Date
       AND ERNAM IN S_ERNAM.                  "Created by
    IF SY-SUBRC <> 0.
      DELETE I_VBRK.
    ENDIF.

    IF SY-SUBRC = 0.
      SELECT SINGLE VBELN
        INTO L_VBLN
        FROM VBUK
       WHERE GBSTK IN S_RFSTK
         AND VBELN = REC_VBRP-AUBEL.
      IF SY-SUBRC <> 0.
        DELETE I_VBRK.
      ELSE.
        REC_VBRK-ERNAM = REC_VBAK-ERNAM.
*        REC_VBRK-VKORG = REC_VBAK-VKORG."Sales Organization
        REC_VBRK-VTWEG = REC_VBAK-VTWEG."Distribution Chann
        REC_VBRK-SPART = REC_VBAK-SPART."Division
        REC_VBRK-VKBUR = REC_VBAK-VKBUR."Sales office
        MODIFY I_VBRK FROM REC_VBRK
                 TRANSPORTING ERNAM
*                              VKORG
                              VTWEG
                              SPART
                              VKBUR.
      ENDIF.
    ENDIF.
  ENDLOOP.
**delete billing in addon table YSE_GTS001
*  SELECT VBELN
*    INTO TABLE I_EXVBELN
*    FROM YSE_GTS001.
*
**fetch each billing no in the field vbeln
*  LOOP AT I_EXVBELN INTO REC_EXVBELN.
*    CLEAR L_DIV.
*    CLEAR L_VBELN.
*    L_DIV  = STRLEN( REC_EXVBELN-VBELN ) / 10.
*    L_POINT = 1.
*    IF L_DIV > 1.
*      L_DIV = L_DIV - 1.
*      DO L_DIV TIMES.
*        L_POINT = L_POINT * 10 + 1.
*        L_VBELN = REC_EXVBELN-VBELN+L_POINT(10).
*        L_RANGE-SIGN   = 'I'.
*        L_RANGE-OPTION = 'EQ'.
*        L_RANGE-LOW    = L_VBELN.
*        COLLECT L_RANGE INTO R_VBELN.
*        L_POINT = L_POINT + 1.
*      ENDDO.
*    ELSE.
*      L_RANGE-SIGN   = 'I'.
*      L_RANGE-OPTION = 'EQ'.
*      L_RANGE-LOW    = REC_EXVBELN-VBELN.
*      COLLECT L_RANGE INTO R_VBELN.
*    ENDIF.
*  ENDLOOP.
**delete vbeln not in table gts001
**  DELETE I_VBRK WHERE VBELN NOT IN R_VBELN.
*  IF R_VBELN IS NOT INITIAL.
*    LOOP AT I_VBRK INTO REC_VBRK.
*      IF REC_VBRK-VBELN IN R_VBELN.
*       DELETE I_VBRK.
*      ENDIF.
*    ENDLOOP.
*  ENDIF.
  COMMIT WORK.
  IF I_VBRK[] IS INITIAL.
    FLG_STOP = C_FLAG.
* No Data
    MESSAGE S000 WITH TEXT-S01.
  ENDIF.
ENDFORM.                    " DELETE_NOVBRK


*&---------------------------------------------------------------------*
*& Form  GET_VBRP
*&---------------------------------------------------------------------*
* This form is to get so billing items
*----------------------------------------------------------------------*
FORM GET_VBRP .

  DATA:LI_GTS004 TYPE TABLE OF YSE_GTS004,
       LREC_GTS004 TYPE YSE_GTS004,
       LI_GTS001   TYPE TABLE OF YSE_GTS001,
       LREC_GTS001 TYPE YSE_GTS001.
  DATA:
    L_DATE_FROM TYPE VBRK-FKDAT,
    L_DATE_TO   TYPE VBRK-FKDAT.
  L_DATE_FROM+0(4) = S_GJAHR-LOW.
  L_DATE_FROM+4(2) = '01'.
  L_DATE_FROM+6(2) = '01'.

*~~~Start~~~ ChenHua 20111102 [Westernacher]
*  L_DATE_TO+0(4) = S_GJAHR-LOW.
*  L_DATE_TO+4(2) = '12'.
*  L_DATE_TO+6(2) = '31'.
  IF S_GJAHR-HIGH IS INITIAL.
    L_DATE_TO+0(4) = S_GJAHR-LOW.
    L_DATE_TO+4(2) = '12'.
    L_DATE_TO+6(2) = '31'.
  ELSE.
    L_DATE_TO+0(4) = S_GJAHR-HIGH.
    L_DATE_TO+4(2) = '12'.
    L_DATE_TO+6(2) = '31'.
  ENDIF.
*~~~End~~~

*fetch data from issued billing
  SELECT *
    INTO TABLE LI_GTS004
    FROM YSE_GTS004
   WHERE BUKRS = P_BUKRS
     AND GJAHR IN S_GJAHR
*     AND VBELN IN S_VBELN
      AND VBELN IN S_RVBELN "Billing Number
      AND BELNR IN S_BELNR  "Accounting number
     AND FKDAT IN S_FKDAT.
*fetch dai chuli and deleted billing no. and item
    SELECT *
      INTO TABLE LI_GTS001
      FROM YSE_GTS001
*           FOR ALL ENTRIES IN I_BKPF
     WHERE BUKRS = P_BUKRS                      "Company code
       AND VBELN  IN S_RVBELN
*       AND VBELN = REC_BKPF-AWKEY
       AND BUKRS = P_BUKRS
       AND GJAHR IN S_GJAHR
*       AND ZSTAUS IN S_STATUS                   "status of billing document for vat
*~~~Start~~~ ChenHua 20111026 [Westernacher]
*      AND ZSTAUS = '4'                          "status of billing document for vat
       AND ZSTAUS IN ('2','3','4')
*~~~End~~~
       AND KUNNR  IN S_KUNNR                    "Sold-to party
       AND VATREF  = SPACE
       AND WAERK  IN S_WAERK                    "Currency
       AND FKART  IN S_FKART                    "BILLING TYPE
       AND FKDAT  IN S_FKDAT                    "Billing Date
       AND RFSTA  IN S_RFSTK                    "SO status
       AND AUBEL  IN S_VBELN                    "SO DOCUMENT
       AND XBLNR  IN S_XBLNR                    "Contract No.
       AND VKORG  IN S_VKORG                    "Sales Organization
       AND VTWEG  IN S_VTWEG                    "Distribution Chann
       AND SPART  IN S_SPART                    "Division
       AND VKBUR  IN S_VKBUR.                   "Sales office
  LOOP AT LI_GTS001 INTO LREC_GTS001.
    LREC_GTS004-VBELN = LREC_GTS001-VBELN.
    LREC_GTS004-POSNR = LREC_GTS001-POSNR.
    APPEND LREC_GTS004 TO LI_GTS004.
  ENDLOOP.

  IF I_VBRK IS NOT INITIAL.
    SELECT VBELN                                "billing
           POSNR                                "item
           UEPOS                                "Higher-level item
           FKIMG                                "qty
           VRKME                                "sale unit
           MATNR                                "material
           MATKL                                "Material group
           NETWR                                "net value
           VGBEL                                "delivery number
           MWSBP                                "amout tax
           SKFBP                                "sum
           AUBEL                                "so
           AUPOS                                "so item number
      APPENDING TABLE I_VBRP
      FROM VBRP
           FOR ALL ENTRIES IN I_VBRK
     WHERE VBELN = I_VBRK-VBELN                 "so billing
       AND ERDAT IN S_FKDAT                     "BILLING DATE
       AND ERDAT >= L_DATE_FROM
       AND ERDAT <= L_DATE_TO
       AND AUBEL IN S_VBELN.
  ENDIF.

* delete the issued billings
  LOOP AT I_VBRP INTO REC_VBRP.
    READ TABLE LI_GTS004 INTO LREC_GTS004
           WITH KEY VBELN = REC_VBRP-VBELN.
*                    POSNR = REC_VBRP-POSNR.
    IF SY-SUBRC = 0.
      DELETE I_VBRP.
    ENDIF.
  ENDLOOP.

  DELETE I_VBRP WHERE NETWR = SPACE           "Amount w Tax
                  AND MATNR <> C_GMACH.       "Material

  SORT I_VBRP BY VBELN POSNR.
  IF I_VBRP IS INITIAL.
    FLG_STOP = C_FLAG.
* No Data
    MESSAGE S000 WITH TEXT-S01.
  ENDIF.

ENDFORM.                    " GET_VBRP

*&---------------------------------------------------------------------*
*& Form  GET_OTHER
*&---------------------------------------------------------------------*
* This form is to fetch others data
*----------------------------------------------------------------------*
FORM GET_OTHER .

  IF I_VBRP IS NOT INITIAL.
    SELECT KUNNR
           ADRNR
      INTO TABLE I_KUNNR
      FROM VBPA
      FOR ALL ENTRIES IN I_VBRP
     WHERE VBELN = I_VBRP-AUBEL
*       AND POSNR = I_VBRP-AUPOS.
       AND PARVW ='RE'.
  ENDIF.

*customer name
*  SELECT KUNNR
*         ADRNR
*    INTO TABLE I_KUNNR
*    FROM KNA1
*         FOR ALL ENTRIES IN I_VBRK
*   WHERE KUNNR = I_VBRK-KUNAG.                "Bill-to party
  IF I_KUNNR IS NOT INITIAL.
    SELECT ADDRNUMBER
           NAME1                              "Name1
           TEL_NUMBER
      INTO TABLE I_ADDR
      FROM ADRC
           FOR ALL ENTRIES IN I_KUNNR
     WHERE ADDRNUMBER = I_KUNNR-ADRNR       "Bill-to party number
       AND NATION = 'C'.
  ENDIF.
  DESCRIBE TABLE I_KUNNR LINES ABGR_OBJ_TO_LOOP.
  LOOP AT I_KUNNR INTO REC_KUNNR.
    PERFORM process_ind1.
*    SELECT NAME1                                            "Name1
*      INTO REC_KUNNR-NAME1
*      FROM ADRC
*           UP TO 1 ROWS
*     WHERE ADDRNUMBER = REC_KUNNR-ADRNR       "Bill-to party number
*       AND NATION = 'C'.
*    ENDSELECT.
    READ TABLE I_ADDR INTO REC_ADDR
           WITH KEY ADDRNUMBER = REC_KUNNR-ADRNR.
    IF SY-SUBRC = 0.
      REC_KUNNR-NAME1     = REC_ADDR-NAME1.
      REC_KUNNR-TEL_NUMBER = REC_ADDR-TEL_NUMBER.
      MODIFY I_KUNNR FROM REC_KUNNR
               TRANSPORTING NAME1
                            TEL_NUMBER.
    ENDIF.
  ENDLOOP.

*Material Desciption
  IF I_VBRP IS NOT INITIAL.
    SELECT MATNR
           MAKTX
      INTO TABLE I_MAKT
      FROM MAKT
           FOR ALL ENTRIES IN I_VBRP
     WHERE MATNR = I_VBRP-MATNR               "Material number
       AND SPRAS = C_1.                       "ZH
  ENDIF.

ENDFORM.                    " GET_OTHER
*&---------------------------------------------------------------------*
*& Form  EDIT_DATA
*&---------------------------------------------------------------------*
* This form is to edit object data
*----------------------------------------------------------------------*
FORM EDIT_DATA .

  DATA:
    L_SUBC        TYPE SY-SUBRC,
    L_SUM         TYPE I,
    L_TAX         TYPE MWSBP,
    L_VAT(5)      TYPE C,
    L_POSNR       TYPE I,
    LCNT_VAT(5)   TYPE N.

  SORT I_VBRK BY VBELN.
  REC_RSTXT-TDID     = C_ID.                  "SL03
  REC_RSTXT-TDSPRAS  = C_1.                   "ZH
  REC_RSTXT-TDOBJECT = C_OBJECT.              "VBBK.
  REFRESH I_GMACH[].

  DESCRIBE TABLE I_VBRP LINES ABGR_OBJ_TO_LOOP.
  LOOP AT I_VBRP INTO REC_VBRP.
    PERFORM process_ind1.
    REFRESH I_TEXT[].
    CLEAR:
      REC_TEXT,
      REC_DATA-UNIT,
      REC_VBRK.

    READ TABLE I_VBRK INTO REC_VBRK
           WITH KEY VBELN = REC_VBRP-VBELN.

*SO relation
    REC_DATA-VKORG = REC_VBRK-VKORG.
    REC_DATA-VTWEG = REC_VBRK-VTWEG.
    REC_DATA-SPART = REC_VBRK-SPART.
    REC_DATA-VKBUR = REC_VBRK-VKBUR.

*Status
    IF S_STATUS IS INITIAL.
      REC_DATA-STAUS = TEXT-L01.
    ENDIF.
*Billing Type
    REC_DATA-FKART = REC_VBRK-FKART.
*Create by
    REC_DATA-ERNAM  = REC_VBRK-ERNAM.
*PO NO.
*    REC_DATA-XBLNR = REC_VBRK-XBLNR.
*Billing Doc
    REC_DATA-VBELN = REC_VBRK-VBELN.
*Line item
    L_POSNR = REC_VBRP-POSNR.
    REC_DATA-POSNR = L_POSNR.
    CONDENSE REC_DATA-POSNR.
*    WRITE REC_VBRP-POSNR TO REC_DATA-POSNR
*High level
    REC_DATA-UEPOS = REC_VBRP-UEPOS.
*VAT reference
*    AT NEW VBELN.
*      LCNT_VAT = LCNT_VAT + 1.
*      WRITE LCNT_VAT TO L_VAT.
*      CONCATENATE SY-DATUM+2(4)               "Year&day
*                  L_VAT                       "0000n
*             INTO REC_DATA-VATREF.
*    ENDAT.
*sum w.tax amount in one billing
    AT NEW VBELN.
      SELECT SUM( NETWR )
        INTO REC_DATA-NETSUM
        FROM VBRP
       WHERE VBELN = REC_VBRP-VBELN.
      SELECT SUM( MWSBP )
        INTO L_TAX
        FROM VBRP
       WHERE VBELN = REC_VBRP-VBELN.
      REC_DATA-NETSUM = REC_DATA-NETSUM + L_TAX.
    ENDAT.

*Order status
    SELECT SINGLE GBSTK
      INTO REC_DATA-RFSTA
      FROM VBUK
     WHERE VBELN = REC_VBRP-AUBEL.            "so
*Order number
    REC_DATA-AUBEL = REC_VBRP-AUBEL.          "SO
*PO NO.
    CLEAR REC_DATA-XBLNR.
    SELECT SINGLE BSTKD
      INTO REC_DATA-XBLNR
      FROM VBKD
     WHERE VBELN = REC_VBRP-AUBEL.
*Total no. of li.it. in SO
    SELECT COUNT(*)
      INTO REC_DATA-LINES
      FROM VBAP
     WHERE VBELN = REC_VBRP-AUBEL.            "SO
*Delivery order
    REC_DATA-VGBEL = REC_VBRP-VGBEL.          "Delivery order
*TEXT
    REC_RSTXT-TDNAME   = REC_VBRP-AUBEL.      "SO
    AT NEW AUBEL.
      CLEAR  REC_DATA-TEXT.
      CALL FUNCTION 'READ_TEXT'
        EXPORTING
          ID                      = REC_RSTXT-TDID
          LANGUAGE                = REC_RSTXT-TDSPRAS
          NAME                    = REC_RSTXT-TDNAME
          OBJECT                  = REC_RSTXT-TDOBJECT
        TABLES
          LINES                   = I_TEXT
        EXCEPTIONS
          ID                      = 1
          LANGUAGE                = 2
          NAME                    = 3
          NOT_FOUND               = 4
          OBJECT                  = 5
          REFERENCE_CHECK         = 6
          WRONG_ACCESS_TO_ARCHIVE = 7
          OTHERS                  = 8.
      IF SY-SUBRC = 0.
        LOOP AT I_TEXT INTO REC_TEXT.
          CONCATENATE REC_TEXT-TDLINE
                     REC_DATA-TEXT
                INTO REC_DATA-TEXT.
        ENDLOOP.
*      ELSE.
*        CLEAR REC_DATA-TEXT.
      ENDIF.
    ENDAT.
*VAT invoice
*? SELECT FROM ADDON TABLE
*Billing Date
    REC_DATA-FKDAT = REC_VBRK-ERDAT.

*Customer number
    REC_DATA-KUNNR = REC_VBRK-KUNAG.
*Customer Name
    READ TABLE I_KUNNR INTO REC_KUNNR
           WITH KEY KUNNR = REC_VBRK-KUNAG.
    IF SY-SUBRC = 0.
      REC_DATA-NAME = REC_KUNNR-NAME1.
      REC_DATA-TEL = REC_KUNNR-TEL_NUMBER.
    ELSE.
      CLEAR REC_DATA-TEL.
      CLEAR REC_DATA-NAME.
    ENDIF.
*Material
*    REC_DATA-MATNR = REC_VBRP-MATNR.
    CALL FUNCTION 'CONVERSION_EXIT_MATN1_OUTPUT'
      EXPORTING
        INPUT  = REC_VBRP-MATNR
      IMPORTING
        OUTPUT = REC_DATA-MATNR.
*Material group
    REC_DATA-MATKL = REC_VBRP-MATKL.
*Material Desciption
    READ TABLE I_MAKT INTO REC_MAKT
           WITH KEY MATNR = REC_VBRP-MATNR.
    IF SY-SUBRC = 0.
      REC_DATA-ARKTX = REC_MAKT-MAKTX.
*      IF S_VKORG = 'CN01'
***MOD-005 BEGIN MOD*******
*     IF REC_VBRK-VKORG = 'CN02'
     IF ( REC_VBRK-VKORG = 'CN02' OR REC_VBRK-VKORG = 'CN07' )
***MOD-005 BEGIN END*******
      AND REC_VBRP-MATKL = '02'.
        REPLACE 'AM-' IN REC_DATA-ARKTX WITH SPACE.
      ENDIF.
    ENDIF.
*Unit
    SELECT SINGLE UOM
      INTO REC_DATA-UNIT
      FROM YSE_GTS002
     WHERE
*     VKORG = C_CN01
*       AND MATKL = REC_VBRP-MATKL
*       AND
       MATNR = REC_DATA-MATNR.
    IF REC_DATA-UNIT IS INITIAL.
      IF REC_VBRP-MATKL = C_GRP01.              "01
        REC_DATA-UNIT = TEXT-L02.               "Ì¨
      ENDIF.
      IF REC_VBRP-MATKL = C_GRP02.               "02
*       AND REC_VBRK-VKORG = C_CN02.             "CN02
        REC_DATA-UNIT = TEXT-L03.               "
      ENDIF.
    ENDIF.

*    IF REC_VBRP-MATKL <> C_GRP01              "01
*     AND REC_VBRK-VKORG = C_CN01.             "CN01
**    SELECT FROM THE TABLE WHICH CUSTOMER RPOVIDE
*      SELECT SINGLE UOM
*        INTO REC_DATA-UNIT
*        FROM YSE_GTS002
*       WHERE VKORG = C_CN01
*         AND MATKL = REC_VBRP-MATKL
*         AND MATNR = REC_DATA-MATNR.
*    ENDIF.
    REC_VBRP-SKFBP = REC_VBRP-NETWR + REC_VBRP-MWSBP.
*Unit Price w. Tax,Quantity,Amount w/o Tax,Tax Amount
    IF REC_VBRK-VBTYP = C_N OR
       REC_VBRK-VBTYP = C_O.
      REC_DATA-NETWR = - REC_VBRP-NETWR.      "Net amout
      REC_DATA-MWSBP = - REC_VBRP-MWSBP.      "Tax amout
      REC_DATA-FKIMG = - REC_VBRP-FKIMG.      "qty
      REC_DATA-KZWI1 = - REC_VBRP-SKFBP.      "item sum
      REC_DATA-NETSUM = - REC_DATA-NETSUM.    "all sum
      REC_DATA-SHCOST = - REC_DATA-SHCOST.    "shiping cost
    ELSE.
      REC_DATA-NETWR = REC_VBRP-NETWR.        "Net amout
      REC_DATA-MWSBP = REC_VBRP-MWSBP.        "Tax amout
      REC_DATA-FKIMG = REC_VBRP-FKIMG.        "qty
      REC_DATA-KZWI1 = REC_VBRP-SKFBP.        "sum
    ENDIF.
    IF REC_DATA-FKIMG IS NOT INITIAL.
      REC_DATA-PRICE = REC_VBRP-SKFBP
                    / REC_DATA-FKIMG.
*  Net price without tax
      REC_DATA-NETPRICE = REC_VBRP-NETWR
                    / REC_DATA-FKIMG.
    ENDIF.

    REC_DATA-PRICE = ABS( REC_DATA-PRICE ).
    REC_DATA-NETPRICE = ABS( REC_DATA-NETPRICE ).
*    WRITE REC_DATA-PRICE TO REC_DATA-CPRICE NO-GROUPING.

*shiping cost
    SELECT KWERT                              "Condition value
      INTO REC_DATA-SHCOST
      FROM KONV
           UP TO 1 ROWS
     WHERE KNUMV = REC_VBRK-KNUMV             "Number of the document condition
       AND KPOSN = REC_VBRP-POSNR             "line item
       AND KSCHL = C_ZD00.                    "codition type ZD00
    ENDSELECT.

*Currency
    REC_DATA-WAERK = REC_VBRK-WAERK.
*Tax Rate
    SELECT KBETR                              "Tax Rate
      INTO REC_DATA-KBETR
      FROM KONV
           UP TO 1 ROWS
     WHERE KNUMV = REC_VBRK-KNUMV             "Number of the document condition
       AND KPOSN = REC_VBRP-POSNR             "line item
       AND KSCHL = C_MWST.                    "codition type MWST
    ENDSELECT.
    REC_DATA-KBETR = REC_DATA-KBETR / 1000.
*Cancelled billing document number
    REC_DATA-SFAKN = REC_VBRK-SFAKN.
*Gmach process
    IF REC_VBRP-MATNR = C_GMACH.              "GMACH
      APPEND REC_DATA TO I_GMACH.
    ENDIF.
* REMARTK
    CLEAR REC_DATA-REMARK.
**** MOD-005 BEGIN MOD******
*    IF REC_VBRK-VKORG = 'CN02'.
    IF REC_VBRK-VKORG = 'CN02' OR REC_VBRK-VKORG = 'CN07'.
**** MOD-005 BEGIN MOD******
      CONCATENATE REC_DATA-AUBEL
                  ';'
                  REC_DATA-XBLNR
             INTO REC_DATA-REMARK.
    ENDIF.
    COLLECT REC_DATA INTO I_DATA.
**20100728calculate the shipping cost according the material group 01,others
*    REC_SHCOST-VBELN = REC_DATA-VBELN.
*    IF REC_DATA-MATKL = '01'.
*      REC_SHCOST-GROUP = REC_DATA-MATKL.
**caculate the mg = '01',KZWI1
*      REC_SHCOST-ONEAMOUT = REC_DATA-KZWI1.
*    ELSE.
*      REC_SHCOST-GROUP = '02'.
*      REC_SHCOST-SHCOST = REC_DATA-SHCOST.
*    ENDIF.
*    COLLECT REC_SHCOST INTO I_SHCOST.
*20100728

  ENDLOOP.
  COMMIT WORK.
*Gmach process
  DELETE I_DATA WHERE MATNR = C_GMACH.

  DELETE I_DATA  WHERE VBELN IS INITIAL.
  DELETE I_GMACH WHERE VBELN IS INITIAL.

  DATA:L_MATNR TYPE MARA-MATNR,
       L_FLG   TYPE C,
       L_ITEM  TYPE I.
  DATA:L_INDEX TYPE I.

  DESCRIBE TABLE I_GMACH LINES ABGR_OBJ_TO_LOOP.
  LOOP AT I_GMACH INTO REC_GMACH.
    PERFORM process_ind1.
    L_INDEX  = SY-TABIX.
    L_SUM = L_SUM + 1.
    CLEAR L_FLG.
    CLEAR REC_NGMACH.
    LOOP AT I_DATA INTO REC_DATA
              WHERE VBELN = REC_GMACH-VBELN
                AND UEPOS = REC_GMACH-POSNR.
      IF L_FLG IS INITIAL.
        IF REC_DATA-MATKL = '01'.
          REC_NGMACH       = REC_DATA.
          REC_NGMACH-POSNR = 10 * L_SUM.        "Item number
        ENDIF.
*        CLEAR REC_NGMACH-KZWI1.
*        CLEAR REC_NGMACH-MWSBP.
*        CLEAR REC_NGMACH-NETWR.
      ENDIF.
      IF L_FLG IS NOT INITIAL.
        REC_NGMACH-KZWI1 = REC_NGMACH-KZWI1   "Amount w Tax
                    + REC_DATA-KZWI1.
        REC_NGMACH-MWSBP = REC_NGMACH-MWSBP   "Tax Amount
                          + REC_DATA-MWSBP.
        REC_NGMACH-NETWR = REC_NGMACH-NETWR   "Amount w/o Tax
                          + REC_DATA-NETWR.
*        REC_NGMACH-NETSUM = REC_NGMACH-NETSUM  "sum Amount w/o Tax
*                          + REC_DATA-NETSUM.
      ENDIF.
      L_FLG = C_FLAG.
      REC_DATA-FLG = C_FLAG.
      MODIFY I_DATA FROM REC_DATA
               TRANSPORTING FLG.
    ENDLOOP.
    IF REC_NGMACH-FKIMG IS NOT INITIAL.
      REC_NGMACH-PRICE = REC_NGMACH-KZWI1       "Amount w Tax
                        / REC_NGMACH-FKIMG.     "Quantity
      REC_NGMACH-NETPRICE = REC_NGMACH-NETWR    "Amount W.O Tax
                        / REC_NGMACH-FKIMG.     "Quantity
    ENDIF.
**DECIMAL 1.0
*    REC_NGMACH-PRICE1 = REC_NGMACH-PRICE.
*    MODIFY I_NGMACH FROM REC_NGMACH INDEX L_INDEX.
    APPEND REC_NGMACH TO I_NGMACH.
  ENDLOOP.
  COMMIT WORK.
  DELETE I_DATA WHERE FLG = C_FLAG.
*  LOOP AT I_NGMACH INTO REC_NGMACH.
*    APPEND REC_NGMACH TO I_DATA.
*  ENDLOOP.
  APPEND LINES OF I_NGMACH TO I_DATA.
  COMMIT WORK.

    FIELD-SYMBOLS: <LREC_DATA> TYPE TY_DATA.
*get price1
  LOOP AT I_DATA ASSIGNING <LREC_DATA>.
   <LREC_DATA>-PRICE1 = <LREC_DATA>-PRICE.
  ENDLOOP.

*sum the same billing,material,price
  I_SUMDATA = I_DATA.
*2011-08-24
  SORT I_DATA BY VBELN MATNR PRICE1.
*2011-08-24
  DELETE ADJACENT DUPLICATES FROM I_DATA
           COMPARING VBELN                    "Billing Document
                     MATNR                    "Material
                     PRICE1.                  "Unit Price w. Tax
*                     PRICE.                   "Unit Price w. Tax


  DATA:L_PRICE1(16)    TYPE P DECIMALS 1,
       L_PRICE2(16)    TYPE P DECIMALS 1.
  LOOP AT I_DATA ASSIGNING <LREC_DATA>.
    DESCRIBE TABLE I_DATA LINES ABGR_OBJ_TO_LOOP.
    PERFORM process_ind1.
*    CLEAR L_PRICE1.
*    CLEAR L_PRICE2.
*    L_PRICE1 = <LREC_DATA>-PRICE.
    LOOP AT I_SUMDATA INTO REC_SUMDATA
               WHERE VBELN = <LREC_DATA>-VBELN
                 AND MATNR = <LREC_DATA>-MATNR
                 AND PRICE1 = <LREC_DATA>-PRICE1
                 AND POSNR <> <LREC_DATA>-POSNR.
    DESCRIBE TABLE I_SUMDATA LINES ABGR_OBJ_TO_LOOP.
    PERFORM process_ind1.
*    L_PRICE2 = REC_SUMDATA-PRICE.
*    CHECK L_PRICE1 = L_PRICE2.
    <LREC_DATA>-PRICE = <LREC_DATA>-PRICE1.
*      IF REC_DATA-POSNR <> REC_SUMDATA-POSNR.
*Quantity
      <LREC_DATA>-FKIMG  = <LREC_DATA>-FKIMG  + REC_SUMDATA-FKIMG.
*shiping cost
      <LREC_DATA>-SHCOST = <LREC_DATA>-SHCOST + REC_SUMDATA-SHCOST.
*Amount w/o Tax
      <LREC_DATA>-NETWR  = <LREC_DATA>-NETWR  + REC_SUMDATA-NETWR.
*Amount w Tax
      <LREC_DATA>-KZWI1  = <LREC_DATA>-KZWI1 + REC_SUMDATA-KZWI1.
*Sum amout in one billing
*        REC_DATA-NETSUM  = REC_DATA-NETSUM + REC_SUMDATA-NETSUM.
*Tax Amount
      <LREC_DATA>-MWSBP  = <LREC_DATA>-MWSBP + REC_SUMDATA-MWSBP.
*      MODIFY I_DATA FROM REC_DATA.
*      ENDIF.
    ENDLOOP.
    COMMIT WORK.
**calculate the shipping cost according the material group 01,others
    REC_SHCOST-VBELN = <LREC_DATA>-VBELN.
    IF <LREC_DATA>-MATKL = '01'.
      REC_SHCOST-GROUP = <LREC_DATA>-MATKL.
*caculate the mg = '01',KZWI1
      REC_SHCOST-ONEAMOUT = <LREC_DATA>-KZWI1.
    ELSE.
      REC_SHCOST-GROUP = '02'.
      REC_SHCOST-SHCOST = <LREC_DATA>-SHCOST.
    ENDIF.
    COLLECT REC_SHCOST INTO I_SHCOST.
  ENDLOOP.

  COMMIT WORK.

  CLEAR REC_SUMDATA.
  FREE I_SUMDATA.
  DATA:L_SUM1(16)       TYPE P DECIMALS 6,
       L_RESULT         TYPE P DECIMALS 6,
       L_CHECK01        TYPE C,
       L_FALSE          TYPE C,
       L_ONESHCOST(16)  TYPE P DECIMALS 6.
  DESCRIBE TABLE I_DATA LINES ABGR_OBJ_TO_LOOP.
*if materail group is not 01 then distribute shiping cost to 01.
  LOOP AT I_DATA ASSIGNING <LREC_DATA>.
*origin sum w tax in one billing
    <LREC_DATA>-ORIGIN = <LREC_DATA>-NETSUM.
    PERFORM process_ind1.
*total amout
    AT NEW VBELN.
      CLEAR L_SUM1.
      READ TABLE I_SHCOST INTO REC_SHCOST
             WITH KEY VBELN = <LREC_DATA>-VBELN
                      GROUP = '01'.
      L_SUM1 = REC_SHCOST-ONEAMOUT.
*shipping cost
      READ TABLE I_SHCOST INTO REC_SHCOST
            WITH KEY VBELN = <LREC_DATA>-VBELN
                     GROUP = '02'.
      IF SY-SUBRC <> 0.
        L_FALSE = C_FLAG.
      ELSEIF SY-SUBRC = 0.
       CLEAR L_FALSE.
      ENDIF.
      L_CHECK01 = C_FLAG.
    ENDAT.
    CHECK L_FALSE IS INITIAL.

    IF <LREC_DATA>-MATKL = '01'
     AND L_SUM1 IS NOT INITIAL.
      CLEAR L_RESULT.
      L_RESULT =  REC_SHCOST-SHCOST / L_SUM1
                      * <LREC_DATA>-KZWI1.
      <LREC_DATA>-SHCOST = <LREC_DATA>-SHCOST
                      + L_RESULT.
*update item amout
      <LREC_DATA>-KZWI1 = <LREC_DATA>-KZWI1 + L_RESULT.
*the shipping cost distributed
      L_ONESHCOST = L_ONESHCOST + L_RESULT.
    ELSEIF L_SUM1 IS INITIAL.
*include material group 01 in one billing
      IF L_CHECK01 = C_FLAG.
*update item amout
        <LREC_DATA>-KZWI1 = <LREC_DATA>-KZWI1 + <LREC_DATA>-SHCOST.
        CLEAR <LREC_DATA>-SHCOST.
      ELSEIF L_CHECK01 IS INITIAL.

      ENDIF.
    ENDIF.
*DELETE 20110824
*origin sum w tax in one billing
*    <LREC_DATA>-ORIGIN = <LREC_DATA>-NETSUM.
*DELETE 20110824
*    MODIFY I_DATA FROM REC_DATA.

    AT END OF VBELN.
      CLEAR L_CHECK01.
      REC_DIFF-VBELN = <LREC_DATA>-VBELN.
      REC_DIFF-ITEM = '10'.
      REC_DIFF-DIST  = L_ONESHCOST.
      REC_DIFF-SUM   = REC_SHCOST-SHCOST."group 02 sum shipping cost
      IF REC_DIFF-DIST IS NOT INITIAL.
        APPEND REC_DIFF TO I_DIFF.
      ENDIF.
      CLEAR REC_DIFF.
      CLEAR L_ONESHCOST.
    ENDAT.
  ENDLOOP.
  COMMIT WORK.
*shipping cost difference amout be distribute the item 10
  DESCRIBE TABLE I_DATA LINES ABGR_OBJ_TO_LOOP.

  LOOP AT I_DATA ASSIGNING <LREC_DATA>.
    PERFORM process_ind1.
    READ TABLE I_DIFF INTO REC_DIFF
           WITH KEY VBELN = <LREC_DATA>-VBELN
                    ITEM  = <LREC_DATA>-POSNR.
    IF SY-SUBRC = 0.
      <LREC_DATA>-SHCOST = <LREC_DATA>-SHCOST
                      + REC_DIFF-SUM
                      - REC_DIFF-DIST.
*      MODIFY I_DATA FROM REC_DATA TRANSPORTING SHCOST.
    ENDIF.
*Material group 02 ,clear shipping cost,
    READ TABLE I_SHCOST INTO REC_SHCOST
         WITH KEY VBELN = <LREC_DATA>-VBELN
                  GROUP = '01'.
    IF SY-SUBRC = 0
     AND <LREC_DATA>-MATKL = '02'.
      <LREC_DATA>-KZWI1 = <LREC_DATA>-KZWI1 - <LREC_DATA>-SHCOST.
      CLEAR <LREC_DATA>-SHCOST.
    ENDIF.
  ENDLOOP.
  COMMIT WORK.
*  LOOP AT I_DATA ASSIGNING <LREC_DATA>.
*    READ TABLE I_SHCOST INTO REC_SHCOST
*         WITH KEY VBELN = <LREC_DATA>-VBELN
*                  GROUP = '01'.
*    IF SY-SUBRC = 0
*     AND <LREC_DATA>-MATKL = '02'.
*      <LREC_DATA>-KZWI1 = <LREC_DATA>-KZWI1 - <LREC_DATA>-SHCOST.
*      CLEAR <LREC_DATA>-SHCOST.
*    ENDIF.
*  ENDLOOP.
  IF I_DATA IS INITIAL.
    FLG_STOP = C_FLAG.
* No Data
    MESSAGE S000 WITH TEXT-S01.
  ENDIF.

ENDFORM.                    " EDIT_DATA
*&---------------------------------------------------------------------*
*& Form  ALV_SHOW
*&---------------------------------------------------------------------*
*  This form is to display ALV
*----------------------------------------------------------------------*
FORM ALV_SHOW .

* specify ALV fields
  PERFORM SET_FIELDCAT.
* output ALV
  PERFORM ALV_OUTPUT.

ENDFORM.                    " ALV_SHOW
*&---------------------------------------------------------------------*
*& Form  SET_FIELDCAT
*&---------------------------------------------------------------------*
*  This form is to specify ALV fields
*----------------------------------------------------------------------*
FORM SET_FIELDCAT .

  DATA:
    L_FCAT  TYPE SLIS_FIELDCAT_ALV.

  REFRESH I_FCAT.

*  CLEAR L_FCAT.
*  L_FCAT-CHECKBOX  = C_FLAG.
*  L_FCAT-FIX_COLUMN = C_FLAG.
*  L_FCAT-FIELDNAME = C_BOX.                   "BOX
*  L_FCAT-SELTEXT_L = TEXT-H00.                "Select
*  L_FCAT-HOTSPOT   = C_FLAG.
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME  = C_STAUS.                "STAUS
*  L_FCAT-FIX_COLUMN = C_FLAG.
*  L_FCAT-SELTEXT_L  = TEXT-H01.               "Status
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_FKART.                 "FKART
*  L_FCAT-FIX_COLUMN = C_FLAG.
*  L_FCAT-SELTEXT_L = TEXT-H02.                "Billing Type
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME  = C_XBLNR.                 "XBLNR
*  L_FCAT-FIX_COLUMN = C_FLAG.
*  L_FCAT-SELTEXT_L  = TEXT-H33.               "PO Number
**  L_FCAT-HOTSPOT = C_FLAG.                    "X
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME  = C_BELNR.                 "BELNR
*  L_FCAT-FIX_COLUMN = C_FLAG.
*  L_FCAT-SELTEXT_L  = TEXT-H32.                "Accounting Document
**  L_FCAT-HOTSPOT = C_FLAG.                    "X
*  APPEND L_FCAT TO I_FCAT.
*
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_VBELN.                 "VBELN
*  L_FCAT-FIX_COLUMN = C_FLAG.
*  L_FCAT-SELTEXT_L = TEXT-H26.                "Billing Doc
*  L_FCAT-HOTSPOT = C_FLAG.                    "X
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_POSNR.                 "POSNR
*  L_FCAT-FIX_COLUMN = C_FLAG.
*  L_FCAT-SELTEXT_L = TEXT-H03.                "Line item
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIX_COLUMN = C_FLAG.
*  L_FCAT-FIELDNAME = C_VATREF.                "VATREF
*  L_FCAT-SELTEXT_L = TEXT-H04.                "VAT reference
*  APPEND L_FCAT TO I_FCAT.
*  CLEAR L_FCAT.
*
*  L_FCAT-FIELDNAME = C_RFSTA.                 "RFSTA
*  L_FCAT-FIX_COLUMN = C_FLAG.
*  L_FCAT-SELTEXT_L = TEXT-H05.                "Order status
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_AUBEL.                 "AUBEL
*  L_FCAT-FIX_COLUMN = C_FLAG.
*  L_FCAT-SELTEXT_L = TEXT-H06.                "Order number
*  L_FCAT-HOTSPOT = C_FLAG.                    "X
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_ERNAM.                 "ERNAM
*  L_FCAT-FIX_COLUMN = C_FLAG.
*  L_FCAT-SELTEXT_L = TEXT-H34.                "Creat by
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_LINES.                 "LINES
*  L_FCAT-SELTEXT_L = TEXT-H07.                "Total no. of li.it. in SO
*
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_VGBEL.                 "VGBEL
*  L_FCAT-SELTEXT_L = TEXT-H08.                "Delivery orde
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_TEXT.                  "TEXT
*  L_FCAT-SELTEXT_L = TEXT-H09.                "TEXT
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_VAT.                   "VAT
*  L_FCAT-SELTEXT_L = TEXT-H10.                "VAT invoice
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_FKDAT.                 "FKDAT
*  L_FCAT-SELTEXT_L = TEXT-H11.                "Billing Date
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_KUNNR.                 "KUNNR
*  L_FCAT-SELTEXT_L = TEXT-H12.                "Customer number
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_NAME.                  "NAME
*  L_FCAT-SELTEXT_L = TEXT-H13.                "Customer Name
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_MATKL.                 "MATKL
*  L_FCAT-SELTEXT_L = TEXT-H31.                "Material group
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_MATNR.                 "MATNR
*  L_FCAT-SELTEXT_L = TEXT-H14.                "Material
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-EDIT      = C_FLAG.                  "X
*  L_FCAT-FIELDNAME = C_ARKTX.                 "ARKTX
*  L_FCAT-outputlen = '100'.
*  L_FCAT-SELTEXT_L = TEXT-H15.                "Material Desciption
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-EDIT      = C_FLAG.                  "X
*  L_FCAT-DATATYPE  = 'CHAR'.                  "CHAR
*  L_FCAT-FIELDNAME = C_UNIT.                  "UNIT
*  L_FCAT-SELTEXT_L = TEXT-H16.                "Unit
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_PRICE.                 "PRICE
*  L_FCAT-SELTEXT_L = TEXT-H17.                "Unit Price w. Tax
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_NETPRICE.              "NET PRICE
*  L_FCAT-SELTEXT_L = TEXT-H28.                "Unit Price w/O Tax
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_FKIMG.                 "FKIMG
*  L_FCAT-SELTEXT_L = TEXT-H18.                "Quantity
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_SHCOST.                "SHCOST
*  L_FCAT-SELTEXT_L = TEXT-H19.                "shiping cost
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_NETWR.                 "NETWR
*  L_FCAT-SELTEXT_L = TEXT-H20.                "Amount w/o Tax
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-EDIT      = C_FLAG.                  "X
*  L_FCAT-DATATYPE  = 'CHAR'.                  "CHAR
*  L_FCAT-JUST      = 'R'.                     "R
*  L_FCAT-FIELDNAME = C_KZWI1.                 "KZWI1
*  L_FCAT-SELTEXT_L = TEXT-H21.                "Amount w Tax
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-EDIT      = C_FLAG.                  "X
*  L_FCAT-DATATYPE  = 'CHAR'.                  "CHAR
*  L_FCAT-JUST      = 'R'.                     "R
*  L_FCAT-FIELDNAME = C_NETSUM.                "NETSUM
*  L_FCAT-SELTEXT_L = TEXT-H29.                "Sum Amout in one billing
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_MWSBP.                 "MWSBP
*  L_FCAT-SELTEXT_L = TEXT-H22.                "Tax Amount
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_WAERK.                 "WAERK
*  L_FCAT-SELTEXT_L = TEXT-H23.                "Currency
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_KBETR.                 "KBETR
*  L_FCAT-SELTEXT_L = TEXT-H24.                "Tax Rate
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-FIELDNAME = C_SFAKN.                 "SFAKN
*  L_FCAT-SELTEXT_L = TEXT-H25.                "Cancelled billing document number
*  APPEND L_FCAT TO I_FCAT.
*
*  CLEAR L_FCAT.
*  L_FCAT-EDIT      = C_FLAG.                  "X
*  L_FCAT-outputlen = '100'.
*  L_FCAT-FIELDNAME = C_REMARK.                "REMARK
*  L_FCAT-SELTEXT_L = TEXT-H30.                "Remark
**  L_FCAT-SELTEXT_L = 'Remark¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡'.                "Remark
*  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-CHECKBOX  = C_FLAG.
  L_FCAT-FIX_COLUMN = C_FLAG.
  L_FCAT-FIELDNAME = C_BOX.                   "BOX
  L_FCAT-SELTEXT_L = TEXT-H00.                "Select
  L_FCAT-HOTSPOT   = C_FLAG.
  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-FIELDNAME  = C_STAUS.                "STAUS
  L_FCAT-FIX_COLUMN = C_FLAG.
  L_FCAT-SELTEXT_L  = TEXT-H01.               "Status
  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_FKART.                 "FKART
  L_FCAT-FIX_COLUMN = C_FLAG.
  L_FCAT-SELTEXT_L = TEXT-H02.                "Billing Type
  APPEND L_FCAT TO I_FCAT.

 CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_RFSTA.                 "RFSTA
  L_FCAT-FIX_COLUMN = C_FLAG.
  L_FCAT-SELTEXT_L = TEXT-H05.                "Order status
  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_FKDAT.                 "FKDAT
  L_FCAT-SELTEXT_L = TEXT-H11.                "Billing Date
  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-FIELDNAME  = C_BELNR.                 "BELNR
  L_FCAT-FIX_COLUMN = C_FLAG.
  L_FCAT-SELTEXT_L  = TEXT-H32.                "Accounting Document
*  L_FCAT-HOTSPOT = C_FLAG.                    "X
  APPEND L_FCAT TO I_FCAT.

    CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_AUBEL.                 "AUBEL
  L_FCAT-FIX_COLUMN = C_FLAG.
  L_FCAT-SELTEXT_L = TEXT-H06.                "Order number
  L_FCAT-HOTSPOT = C_FLAG.                    "X
  APPEND L_FCAT TO I_FCAT.

    CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_NAME.                  "NAME
  L_FCAT-SELTEXT_L = TEXT-H13.                "Customer Name
  APPEND L_FCAT TO I_FCAT.

    CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_KUNNR.                 "KUNNR
  L_FCAT-SELTEXT_L = TEXT-H12.                "Customer number
  APPEND L_FCAT TO I_FCAT.

      CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_TEL.                 "TEL
  L_FCAT-SELTEXT_L = TEXT-H35.                "Telephone
  APPEND L_FCAT TO I_FCAT.

    CLEAR L_FCAT.
  L_FCAT-FIELDNAME  = C_XBLNR.                 "XBLNR
  L_FCAT-FIX_COLUMN = C_FLAG.
  L_FCAT-SELTEXT_L  = TEXT-H33.               "PO Number
*  L_FCAT-HOTSPOT = C_FLAG.                    "X
  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-EDIT      = C_FLAG.                  "X
  L_FCAT-FIELDNAME = C_ARKTX.                 "ARKTX
  L_FCAT-outputlen = '100'.
  L_FCAT-SELTEXT_L = TEXT-H15.                "Material Desciption
  APPEND L_FCAT TO I_FCAT.

    CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_MATNR.                 "MATNR
  L_FCAT-SELTEXT_L = TEXT-H14.                "Material
  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_FKIMG.                 "FKIMG
  L_FCAT-SELTEXT_L = TEXT-H18.                "Quantity
  APPEND L_FCAT TO I_FCAT.

    CLEAR L_FCAT.
  L_FCAT-EDIT      = C_FLAG.                  "X
  L_FCAT-DATATYPE  = 'CHAR'.                  "CHAR
  L_FCAT-JUST      = 'R'.                     "R
  L_FCAT-FIELDNAME = C_NETSUM.                "NETSUM
  L_FCAT-SELTEXT_L = TEXT-H29.                "Sum Amout in one billing
  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_TEXT.                  "TEXT
  L_FCAT-SELTEXT_L = TEXT-H09.                "TEXT
  APPEND L_FCAT TO I_FCAT.

    CLEAR L_FCAT.
  L_FCAT-EDIT      = C_FLAG.                  "X
*~~~Start~~~ ChenHua 20111121 [Westernacher]
*  L_FCAT-outputlen = '100'.
  L_FCAT-OUTPUTLEN = '200'.
*~~~End~~~
  L_FCAT-FIELDNAME = C_REMARK.                "REMARK
  L_FCAT-SELTEXT_L = TEXT-H30.                "Remark
*  L_FCAT-SELTEXT_L = 'Remark
  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_ERNAM.                 "ERNAM
  L_FCAT-FIX_COLUMN = C_FLAG.
  L_FCAT-SELTEXT_L = TEXT-H34.                "Creat by
  APPEND L_FCAT TO I_FCAT.

    CLEAR L_FCAT.
  L_FCAT-FIX_COLUMN = C_FLAG.
  L_FCAT-FIELDNAME = C_VATREF.                "VATREF
  L_FCAT-SELTEXT_L = TEXT-H04.                "VAT reference
  APPEND L_FCAT TO I_FCAT.

    CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_VAT.                   "VAT
  L_FCAT-SELTEXT_L = TEXT-H10.                "VAT invoice
  APPEND L_FCAT TO I_FCAT.

    CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_WAERK.                 "WAERK
  L_FCAT-SELTEXT_L = TEXT-H23.                "Currency
  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_POSNR.                 "POSNR
  L_FCAT-FIX_COLUMN = C_FLAG.
  L_FCAT-SELTEXT_L = TEXT-H03.                "Line item
  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_LINES.                 "LINES
  L_FCAT-SELTEXT_L = TEXT-H07.                "Total no. of li.it. in SO
  APPEND L_FCAT TO I_FCAT.

    CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_VGBEL.                 "VGBEL
  L_FCAT-SELTEXT_L = TEXT-H08.                "Delivery orde
  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_MATKL.                 "MATKL
  L_FCAT-SELTEXT_L = TEXT-H31.                "Material group
  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-EDIT      = C_FLAG.                  "X
  L_FCAT-DATATYPE  = 'CHAR'.                  "CHAR
  L_FCAT-FIELDNAME = C_UNIT.                  "UNIT
  L_FCAT-SELTEXT_L = TEXT-H16.                "Unit
  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_PRICE.                 "PRICE
  L_FCAT-SELTEXT_L = TEXT-H17.                "Unit Price w. Tax
  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_NETPRICE.              "NET PRICE
  L_FCAT-SELTEXT_L = TEXT-H28.                "Unit Price w/O Tax
  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_SHCOST.                "SHCOST
  L_FCAT-SELTEXT_L = TEXT-H19.                "shiping cost
  APPEND L_FCAT TO I_FCAT.

    CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_NETWR.                 "NETWR
  L_FCAT-SELTEXT_L = TEXT-H20.                "Amount w/o Tax
  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-EDIT      = C_FLAG.                  "X
  L_FCAT-DATATYPE  = 'CHAR'.                  "CHAR
  L_FCAT-JUST      = 'R'.                     "R
  L_FCAT-FIELDNAME = C_KZWI1.                 "KZWI1
  L_FCAT-SELTEXT_L = TEXT-H21.                "Amount w Tax
  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_MWSBP.                 "MWSBP
  L_FCAT-SELTEXT_L = TEXT-H22.                "Tax Amount
  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_KBETR.                 "KBETR
  L_FCAT-SELTEXT_L = TEXT-H24.                "Tax Rate
  APPEND L_FCAT TO I_FCAT.

    CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_VBELN.                 "VBELN
  L_FCAT-FIX_COLUMN = C_FLAG.
  L_FCAT-SELTEXT_L = TEXT-H26.                "Billing Doc
  L_FCAT-HOTSPOT = C_FLAG.                    "X
  APPEND L_FCAT TO I_FCAT.

  CLEAR L_FCAT.
  L_FCAT-FIELDNAME = C_SFAKN.                 "SFAKN
  L_FCAT-SELTEXT_L = TEXT-H25.                "Cancelled billing document number
  APPEND L_FCAT TO I_FCAT.

ENDFORM.                    " SET_FIELDCAT
*&---------------------------------------------------------------------*
*& Form  ALV_OUTPUT
*&---------------------------------------------------------------------*
*  This form is to output ALV
*----------------------------------------------------------------------*
FORM ALV_OUTPUT .

  DATA: L_REPID     LIKE SYST-REPID,          "Temp ABAP program
        L_LAYOUT    TYPE SLIS_LAYOUT_ALV.
  DATA: LREC_EVENTS TYPE SLIS_ALV_EVENT,
        LI_EVENTS   LIKE TABLE OF LREC_EVENTS.
*  MOD-004(MOD) Begin**************************************************
  FIELD-SYMBOLS: <lfs_data> TYPE TY_DATA.
  LOOP AT I_DATA ASSIGNING <lfs_data>.
    <lfs_data>-KZWI1 = <lfs_data>-NETWR + <lfs_data>-MWSBP.
  ENDLOOP.
*  MOD-004(MOD) End  **************************************************

  LREC_EVENTS-NAME = SLIS_EV_DATA_CHANGED.
  LREC_EVENTS-FORM = C_DATA_CHANGE.
  APPEND LREC_EVENTS TO LI_EVENTS.

  LREC_EVENTS-NAME = slis_ev_before_line_output.
  LREC_EVENTS-FORM = C_DATA_CHANGE1.
  APPEND LREC_EVENTS TO LI_EVENTS.


  L_REPID  = SY-REPID.                        "ABAP program

  L_LAYOUT-COLWIDTH_OPTIMIZE = C_FLAG.
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      I_CALLBACK_PROGRAM       = L_REPID      "Temp ABAP program
      I_CALLBACK_USER_COMMAND  = C_COMMAND
      IT_EVENTS                = LI_EVENTS
      I_CALLBACK_PF_STATUS_SET = C_PF_STATUS
      IT_FIELDCAT              = I_FCAT       "Fieldcat
      IS_LAYOUT                = L_LAYOUT
    TABLES
      T_OUTTAB                 = I_DATA.

ENDFORM.                    " ALV_OUTPUT
*&---------------------------------------------------------------------*
*& Form  USER_COMMAND
*&---------------------------------------------------------------------*
*  This form is to request alv command
*----------------------------------------------------------------------*
*  -->I_R_UCOMM  COMMAND CODE
*  -->I_RS_SELFIELD FIELDCAT
*----------------------------------------------------------------------*
FORM USER_COMMAND USING I_UCOMM LIKE SY-UCOMM
                        I_SELFIELD TYPE SLIS_SELFIELD.

  DATA:
    L_GRID1    TYPE REF TO CL_GUI_ALV_GRID,
    L_VALID    TYPE C,
    L_TEXT(80) TYPE C,
    L_ANS      TYPE C,
    L_DIFF     TYPE KZWI1,
    L_FLAG     TYPE C,
    L_DECIMAL  TYPE KZWI1,
    LI_INSER   TYPE STANDARD TABLE OF TY_DATA,
    L_STBL     TYPE LVC_S_STBL,
    LREC_DATA TYPE TY_DATA.
*  MOD-003(MOD) Begin**************************************************
  DATA:LREC_GTS005 TYPE YSE_GTS005.
*  MOD-003(MOD) End****************************************************
*  DATA:L_ITEM TYPE YSE_GTS005-ITEM,
*       L_MODNO  TYPE CHAR10.
   DATA:L_NUM(16) TYPE P DECIMALS 0,
        L_REFNOW TYPE YSE_GTS005-REFNOW.


  CLEAR V_COMMAND.
  CLEAR FLG_STOP.
  L_TEXT = TEXT-D03.
  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
    IMPORTING
      E_GRID = L_GRID1.

*  MOD-003(MOD) Begin**************************************************
**2011-09-27
  CLEAR L_REFNOW.
  CLEAR L_NUM.
  SELECT SINGLE *
    INTO LREC_GTS005
    FROM YSE_GTS005
   WHERE UNAME = SY-UNAME.
  CLEAR V_REF.
  IF SY-SUBRC = 0.
*   the same month
    IF LREC_GTS005-REFNOW+0(4) = SY-DATUM+2(4).
      V_REF = LREC_GTS005-REFNOW + 1.
    ELSE.
      CONCATENATE SY-DATUM+2(4)
                  LREC_GTS005-ITEM
                  '000001'
             INTO V_REF.
    ENDIF.
    CONDENSE V_REF.
  ENDIF.

**2011-09-27
*  MOD-003(MOD) End**************************************************
  CASE I_UCOMM.
*SAVE
    WHEN '&DATA_SAVE'.
      LOOP AT I_DATA INTO REC_DATA
                WHERE BOX = C_FLAG.
        LREC_DATA = REC_DATA.
        READ TABLE I_ROUND INTO REC_ROUND
               WITH KEY VBELN = REC_DATA-VBELN
                        POSNR = REC_DATA-POSNR.
        AT NEW VBELN.
* new fist billing item Amount w Tax
          LREC_DATA-KZWI1 = REC_ROUND-KZWI1
                         +  LREC_DATA-NETSUM
                         - LREC_DATA-ORIGIN.
          L_DECIMAL = LREC_DATA-NETSUM.
*          L_DIFF = LREC_DATA-NETSUM - LREC_DATA-ORIGIN.
        ENDAT.
        IF REC_DATA-POSNR >= 10.
          LREC_DATA-NETSUM = L_DECIMAL.
*          LREC_DATA-NETSUM = LREC_DATA-ORIGIN + L_DIFF.
        ENDIF.
        MODIFY I_DATA FROM LREC_DATA TRANSPORTING KZWI1 NETSUM.
      ENDLOOP.
*SELECT
    WHEN C_DB.
      IF I_SELFIELD-FIELDNAME = C_VBELN.
        SET PARAMETER ID C_VF FIELD I_SELFIELD-VALUE.
        CALL TRANSACTION C_VF03 AND SKIP FIRST SCREEN.
      ELSEIF I_SELFIELD-FIELDNAME = C_AUBEL.
        SET PARAMETER ID C_AUN FIELD I_SELFIELD-VALUE.
        CALL TRANSACTION C_VA03 AND SKIP FIRST SCREEN.
      ENDIF.
      IF I_SELFIELD-FIELDNAME = C_BOX.

        CLEAR:REC_DATA.
        READ TABLE I_DATA INTO REC_DATA INDEX I_SELFIELD-TABINDEX.
        IF REC_DATA-BOX = C_FLAG.
          REC_DATA-BOX = SPACE.
          MODIFY I_DATA FROM REC_DATA INDEX I_SELFIELD-TABINDEX
                   TRANSPORTING BOX.
        ELSE.
          REC_DATA-BOX = C_FLAG.
          MODIFY I_DATA FROM REC_DATA TRANSPORTING BOX
                               WHERE VBELN = REC_DATA-VBELN.
        ENDIF.

*        I_SELFIELD-REFRESH = 'X'.
      ENDIF.
*SELECT ALL
    WHEN '&SEALL'.
      CLEAR: REC_DATA.
      REC_DATA-BOX = C_FLAG.
      MODIFY I_DATA FROM REC_DATA TRANSPORTING BOX
               WHERE BOX IS INITIAL.
*      I_SELFIELD-REFRESH = 'X'.
*CANCEL ALL
    WHEN '&DEALL'.
      CLEAR: REC_DATA.
      REC_DATA-BOX = SPACE.
      MODIFY I_DATA FROM REC_DATA TRANSPORTING BOX
               WHERE BOX IS NOT INITIAL.
*      I_SELFIELD-REFRESH = 'X'.
*Issue Normal
    WHEN '&VAT_NORM'.
*2011-09-27

*  SELECT SINGLE ITEM
*    INTO L_ITEM
*    FROM YSE_GTS005
*   WHERE UNAME = SY-UNAME.
*  CLEAR V_REF.
**  L_MODNO = SY-MODNO.
*  CONDENSE L_MODNO.
*  CONCATENATE L_ITEM
*              L_MODNO
*              SY-DATUM
*              SY-UZEIT
*        INTO V_REF.
**2011-09-27

      V_FILENAME = TEXT-F01.
      V_ALVCOMMAND = '&VAT_NORM'.
      V_VATYP    = 'N'.
      REFRESH I_SUMDATA[].
      REFRESH I_GTS004[].
      CLEAR REC_GTS004.
      CLEAR L_ANS.
      LOOP AT I_DATA INTO REC_DATA
                WHERE BOX = C_FLAG.
        APPEND REC_DATA TO I_SUMDATA.

*collect issued billing no. and item
        REC_GTS004-VBELN = REC_DATA-VBELN.
        REC_GTS004-BELNR = REC_DATA-BELNR.
        REC_GTS004-POSNR = REC_DATA-POSNR.
        REC_GTS004-FKDAT = REC_DATA-FKDAT.
        REC_GTS004-FLAG  = '0'.

        APPEND REC_GTS004 TO I_GTS004.
      ENDLOOP.
*     check amout
      PERFORM  CHECK_LIMIT
                 USING    C_NORM
                 CHANGING L_ANS.
      IF L_ANS = C_N.

      ELSEIF L_ANS = C_J.
*        REFRESH I_GTS004[].
*       split amout
*        PERFORM AMOUT_SPLIT
*                  USING I_SUMDATA
*                        C_NORM
*                  CHANGING
*                        I_SUMDATA.
        PERFORM KUNNR_INFO.
*        CHECK FLG_STOP IS INITIAL.
        CALL SCREEN '900'.
      ELSEIF L_ANS IS INITIAL.
        PERFORM KUNNR_INFO.
*        CHECK FLG_STOP IS INITIAL.
        CALL SCREEN '900'.
      ENDIF.
*Issue Special
    WHEN '&VAT_SPEC'.
**2011-09-27
*  SELECT SINGLE ITEM
*    INTO L_ITEM
*    FROM YSE_GTS005
*   WHERE UNAME = SY-UNAME.
*  CLEAR V_REF.
**  L_MODNO = SY-MODNO.
*  CONDENSE L_MODNO.
*  CONCATENATE L_ITEM
*              L_MODNO
*              SY-DATUM
*              SY-UZEIT
*        INTO V_REF.
**2011-09-27

      V_ALVCOMMAND = '&VAT_SPEC'.
      V_FILENAME = TEXT-F02.
      V_VATYP    = 'S'.
      REFRESH I_SUMDATA[].
      REFRESH I_GTS004[].
      CLEAR REC_GTS004.
      CLEAR L_ANS.
      LOOP AT I_DATA INTO REC_DATA
                WHERE BOX = C_FLAG.
        APPEND REC_DATA TO I_SUMDATA.
*collect issued billing no. and item
        REC_GTS004-VBELN = REC_DATA-VBELN.
        REC_GTS004-BELNR = REC_DATA-BELNR.
        REC_GTS004-POSNR = REC_DATA-POSNR.
        REC_GTS004-FKDAT = REC_DATA-FKDAT.
        REC_GTS004-FLAG  = '0'.
        APPEND REC_GTS004 TO I_GTS004.
      ENDLOOP.
*     check amout
      PERFORM  CHECK_LIMIT
                 USING    C_SPEC
                 CHANGING L_ANS.
      IF L_ANS = C_N.

      ELSEIF L_ANS = C_J.
*        REFRESH I_GTS004[].
*       split amout
*        PERFORM AMOUT_SPLIT
*                  USING I_SUMDATA
*                        C_SPEC
*                  CHANGING
*                        I_SUMDATA.
        PERFORM KUNNR_INFO.
        CHECK FLG_STOP IS INITIAL.
        CALL SCREEN '900'.
      ELSEIF L_ANS IS INITIAL.
        PERFORM KUNNR_INFO.
        CHECK FLG_STOP IS INITIAL.
        CALL SCREEN '900'.
      ENDIF.
*Combination
    WHEN '&COMB'.
**2011-09-27
*  SELECT SINGLE ITEM
*    INTO L_ITEM
*    FROM YSE_GTS005
*   WHERE UNAME = SY-UNAME.
*  CLEAR V_REF.
**  L_MODNO = SY-MODNO.
*  CONDENSE L_MODNO.
*  CONCATENATE L_ITEM
*              L_MODNO
*              SY-DATUM
*              SY-UZEIT
*        INTO V_REF.
**2011-09-27


      V_ALVCOMMAND = '&COMB'.
      REFRESH I_CUSTOMER[].
      CLEAR REC_CUSTOMER.
*check if more than two customers
      LOOP AT I_DATA INTO REC_DATA
                WHERE BOX = C_FLAG.
        REC_CUSTOMER-KUNNR = REC_DATA-KUNNR.
        COLLECT REC_CUSTOMER INTO I_CUSTOMER.
      ENDLOOP.
      READ TABLE I_CUSTOMER INTO REC_CUSTOMER INDEX 2.
      IF SY-SUBRC = 0.
        CALL FUNCTION 'POPUP_TO_CONFIRM_WITH_MESSAGE'
          EXPORTING
            DEFAULTOPTION  = C_N
            DIAGNOSETEXT1  = L_TEXT
            TEXTLINE1      = TEXT-D01
            TITEL          = TEXT-D02
            CANCEL_DISPLAY = SPACE
          IMPORTING
            ANSWER         = L_ANS.
*NO
        IF L_ANS = C_N.

        ELSE.
*         This form is to edit combination data
          PERFORM COM_DATA.
          CALL SCREEN '800'.
        ENDIF.
      ELSEIF SY-SUBRC = 4.
*       This form is to edit combination data
        PERFORM COM_DATA.
        READ TABLE I_VBELN INTO REC_VBELN INDEX 2.
        IF SY-SUBRC <> 0.
          PERFORM POP_INFO
                    USING    ''
                             TEXT-D05
                    CHANGING L_ANS.
        ELSE.
          CALL SCREEN '800'.
        ENDIF.
        IF L_ANS = C_N.
          CALL SCREEN '800'.
        ENDIF.
      ENDIF.
*Special case
    WHEN '&SPEC'.
**2011-09-27
*
*  SELECT SINGLE ITEM
*    INTO L_ITEM
*    FROM YSE_GTS005
*   WHERE UNAME = SY-UNAME.
*  CLEAR V_REF.
**  L_MODNO = SY-MODNO.
*  CONDENSE L_MODNO.
*  CONCATENATE L_ITEM
*              L_MODNO
*              SY-DATUM
*              SY-UZEIT
*        INTO V_REF.
**2011-09-27

      PERFORM SPEC_DATA.
      CALL SCREEN '800'.
*Rounding
    WHEN '&ROUND'.
      REFRESH I_ADJUST_AMOUT[].
      CLEAR REC_ADJUST_AMOUT.
      CLEAR: REC_DATA.
      LOOP AT I_DATA INTO REC_DATA
                WHERE BOX = C_FLAG.
        CALL FUNCTION 'ROUND'
          EXPORTING
            DECIMALS      = 0
            INPUT         = REC_DATA-NETSUM
            SIGN          = 'X'
          IMPORTING
            OUTPUT        = REC_DATA-NETSUM
          EXCEPTIONS
            INPUT_INVALID = 1
            OVERFLOW      = 2
            TYPE_INVALID  = 3
            OTHERS        = 4.
        REC_ADJUST_AMOUT-VBELN  = REC_DATA-VBELN.
        REC_ADJUST_AMOUT-NETSUM = REC_DATA-NETSUM.
        COLLECT REC_ADJUST_AMOUT INTO I_ADJUST_AMOUT.
        MODIFY I_DATA FROM REC_DATA TRANSPORTING NETSUM.
      ENDLOOP.
*update sum amount for all billing items which have the same billing
      DATA:L_KZWI1  TYPE KZWI1,
           L_ORIGIN TYPE KZWI1.
      LOOP AT I_DATA INTO REC_DATA
                WHERE BOX = C_FLAG.
        CLEAR L_KZWI1.
        CLEAR L_ORIGIN.
        L_KZWI1 = REC_DATA-KZWI1.
        L_ORIGIN = REC_DATA-ORIGIN.
        AT NEW VBELN.
          READ TABLE I_ADJUST_AMOUT INTO REC_ADJUST_AMOUT
                       WITH KEY VBELN = REC_DATA-VBELN.
          IF SY-SUBRC = 0.
*            REC_DATA-NETSUM = REC_ADJUST_AMOUT-NETSUM.
            L_KZWI1  = L_KZWI1
                     + REC_ADJUST_AMOUT-NETSUM
                     - L_ORIGIN.
          ENDIF.
        ENDAT.
        REC_DATA-KZWI1 = L_KZWI1.
        MODIFY I_DATA FROM REC_DATA
                 TRANSPORTING KZWI1.
      ENDLOOP.
*      I_SELFIELD-REFRESH = 'X'.
*change status
    WHEN '&UPSTATUS'.
      CLEAR: REC_DATA.
      REFRESH LI_INSER[].
      V_COMMAND = '&UPSTATUS'.
      LOOP AT I_DATA INTO REC_DATA
                WHERE BOX = C_FLAG.
        IF REC_DATA-STAUS = TEXT-S06.         "´ý´¦Àí1
          REC_DATA-STAUS = TEXT-S05.          "²»¿ªÆ±4
          REC_DATA-STAUS = '4'.
          APPEND REC_DATA TO LI_INSER.
        ELSEIF REC_DATA-STAUS = TEXT-S03.     "¿ªÆ±2
          REC_DATA-STAUS = TEXT-S06.          "´ý´¦Àí1
          REC_DATA-STAUS = '1'.
          APPEND REC_DATA TO LI_INSER.
        ELSEIF REC_DATA-STAUS = TEXT-S04.     "ÒÑ»Ø´«3
          REC_DATA-STAUS = TEXT-S03.          "ÒÑ¿ªÆ±2
          REC_DATA-STAUS = '2'.
          APPEND REC_DATA TO LI_INSER.
        ELSEIF REC_DATA-STAUS = TEXT-S05.     "²»¿ªÆ±4
          REC_DATA-STAUS = TEXT-S06.          "´ý´¦Àí1
          REC_DATA-STAUS = '1'.
          APPEND REC_DATA TO LI_INSER.
        ELSEIF S_STATUS IS INITIAL.           "Î´¿ªÆ±->´ý´¦Àí
          REC_DATA-STAUS = TEXT-S06.          "´ý´¦Àí1
          REC_DATA-STAUS = '1'.
          APPEND REC_DATA TO LI_INSER.
        ELSEIF S_STATUS-LOW = '2'
         AND REC_DATA-STAUS = TEXT-S03.       ""ÒÑ¿ªÆ±
          REC_DATA-STAUS = TEXT-S06.          "´ý´¦Àí1
          REC_DATA-STAUS = '1'.
          APPEND REC_DATA TO LI_INSER.
        ENDIF.
*        MODIFY I_DATA FROM REC_DATA TRANSPORTING STAUS.
      ENDLOOP.
      IF LI_INSER IS NOT INITIAL.
        PERFORM INSERT_TABLE
                  USING LI_INSER.
      ENDIF.
      CHECK FLG_STOP IS INITIAL.
      DELETE I_DATA WHERE BOX = C_FLAG.
  ENDCASE.
  L_STBL-ROW = C_FLAG.
  L_STBL-COL = C_FLAG.
  CALL METHOD L_GRID1->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE = L_STBL.

ENDFORM.                    "USER_COMMAND
*&---------------------------------------------------------------------*
*& Form  ALV_SET_STATUS
*&---------------------------------------------------------------------*
*  This form is to SET PF-STATUS
*----------------------------------------------------------------------*
*  --->I_EXTAB TOOLBAR
*----------------------------------------------------------------------*
FORM ALV_SET_STATUS USING I_EXTAB TYPE SLIS_T_EXTAB.

  IF S_STATUS-LOW IS INITIAL
   OR S_STATUS-LOW = '1'.
    SET PF-STATUS '9000'.
  ELSEIF S_STATUS-LOW = '3'.
    REFRESH I_FUNC[].
    REC_FUNC = '&VAT_SPEC'.
    APPEND REC_FUNC TO I_FUNC.

    REC_FUNC = '&VAT_NORM'.
    APPEND REC_FUNC TO I_FUNC.

    REC_FUNC = '&COMB'.
    APPEND REC_FUNC TO I_FUNC.

    REC_FUNC = '&ROUND'.
    APPEND REC_FUNC TO I_FUNC.

    REC_FUNC = '&SPEC'.
    APPEND REC_FUNC TO I_FUNC.

    REC_FUNC = '&UPSTATUS'.
    APPEND REC_FUNC TO I_FUNC.

    SET PF-STATUS '9000' EXCLUDING I_FUNC IMMEDIATELY.

  ELSE.
    REFRESH I_FUNC[].
    REC_FUNC = '&VAT_SPEC'.
    APPEND REC_FUNC TO I_FUNC.

    REC_FUNC = '&VAT_NORM'.
    APPEND REC_FUNC TO I_FUNC.

    REC_FUNC = '&COMB'.
    APPEND REC_FUNC TO I_FUNC.

    REC_FUNC = '&ROUND'.
    APPEND REC_FUNC TO I_FUNC.

    REC_FUNC = '&SPEC'.
    APPEND REC_FUNC TO I_FUNC.

    SET PF-STATUS '9000' EXCLUDING I_FUNC IMMEDIATELY.
  ENDIF.

  IF FLG_REG IS INITIAL.
    FLG_REG = 1.
    REFRESH I_F4[].
    REC_F4-FIELDNAME  = 'STAUS'.
    REC_F4-REGISTER   = 'X'.
    REC_F4-GETBEFORE  = 'X'.
    REC_F4-CHNGEAFTER = 'X'.
    INSERT REC_F4 INTO TABLE I_F4.
    CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
      IMPORTING
        E_GRID = go_grid.

    CREATE OBJECT EVENT_RECEIVER.

    SET HANDLER EVENT_RECEIVER->ONF4 FOR go_grid.

    CALL METHOD GO_GRID->REGISTER_F4_FOR_FIELDS
      EXPORTING
        IT_F4 = I_F4[].
  ENDIF.

ENDFORM.                    " ALV_SET_STATUS
*&---------------------------------------------------------------------*
*&      FORM  SUB_F4_HELP
*&---------------------------------------------------------------------*
*       POP F4
*----------------------------------------------------------------------*
FORM SUB_F4_HELP
       USING E_FIELDNAME TYPE LVC_FNAME
             ES_ROW_NO TYPE LVC_S_ROID.

  DATA:T_DDSHRETVAL TYPE STANDARD TABLE OF DDSHRETVAL,
       L_STBL       TYPE LVC_S_STBL,
       WR_RETURN    TYPE DDSHRETVAL,
       L_IT_CELLS   TYPE LVC_T_CELL,
       L_GW_CELLS   TYPE LVC_S_CELL.

  REFRESH T_DDSHRETVAL[].
  CLEAR WR_RETURN.

  REFRESH I_STATUS.
  REFRESH T_DDSHRETVAL.

  CHECK E_FIELDNAME = 'STAUS'.
  REC_STATUS-VALUE   = '1'.
  REC_STATUS-TEXT  = TEXT-002.
  APPEND REC_STATUS TO I_STATUS.
  REC_STATUS-VALUE = '2'.
  REC_STATUS-TEXT  = TEXT-003.
  APPEND REC_STATUS TO I_STATUS.
  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'TEXT'
      DYNPPROG        = SY-REPID
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = I_STATUS
      RETURN_TAB      = T_DDSHRETVAL
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.

  IF SY-SUBRC = 0
   AND T_DDSHRETVAL IS NOT INITIAL .
    CLEAR WR_RETURN.
    READ TABLE T_DDSHRETVAL INTO WR_RETURN INDEX 1.

    IF WR_RETURN-FIELDVAL IS NOT INITIAL.
      LOOP AT I_DATA INTO REC_DATA.
        IF SY-TABIX = ES_ROW_NO-ROW_ID.
          REC_DATA-STAUS = WR_RETURN-FIELDVAL.
          MODIFY I_DATA FROM REC_DATA.
        ENDIF.
      ENDLOOP.

      L_STBL-ROW = C_FLAG.
      L_STBL-COL = C_FLAG.
      CALL METHOD GO_GRID->REFRESH_TABLE_DISPLAY
        EXPORTING
          IS_STABLE = L_STBL.
      REFRESH L_IT_CELLS.
      CLEAR   L_GW_CELLS.

      L_GW_CELLS-ROW_ID-INDEX = ES_ROW_NO-ROW_ID.
      L_GW_CELLS-COL_ID       = E_FIELDNAME.
      APPEND L_GW_CELLS TO L_IT_CELLS.

      CALL METHOD GO_GRID->SET_SELECTED_CELLS
        EXPORTING
          IT_CELLS = L_IT_CELLS.
    ENDIF.
  ENDIF.

ENDFORM.                    " SUB_F4_HELP
*&---------------------------------------------------------------------*
*& Form  DATA_CHANGE
*&---------------------------------------------------------------------*
*  This form is to fetch the changed field in alv
*----------------------------------------------------------------------*
*  -->RR_DATA_CHANGED TYPE REF TO CL_ALV_CHANGED_DATA_PROTOCOL
*----------------------------------------------------------------------*
FORM DATA_CHANGE USING RR_DATA_CHANGED TYPE REF TO
                         CL_ALV_CHANGED_DATA_PROTOCOL.

*  DATA: L_MOD_CELLS TYPE LVC_S_MODI.
*
*  LOOP AT RR_DATA_CHANGED->MT_GOOD_CELLS INTO L_MOD_CELLS.
*    CASE L_MOD_CELLS-FIELDNAME.
**Unit
*      WHEN C_UNIT.
*        IF L_MOD_CELLS-VALUE <> SPACE.
*          CLEAR:REC_DATA.
*          READ TABLE I_DATA INTO REC_DATA INDEX L_MOD_CELLS-ROW_ID.
*          REC_DATA-UNIT = L_MOD_CELLS-VALUE.
*          MODIFY I_DATA FROM REC_DATA
*                   TRANSPORTING UNIT
*                   WHERE VBELN = REC_DATA-VBELN.
*        ENDIF.
**Material Desciption
*      WHEN C_ARKTX.
*        IF L_MOD_CELLS-VALUE <> SPACE.
*          CLEAR:REC_DATA.
*          READ TABLE I_DATA INTO REC_DATA INDEX L_MOD_CELLS-ROW_ID.
*          REC_DATA-ARKTX = L_MOD_CELLS-VALUE.
*          MODIFY I_DATA FROM REC_DATA
*                   TRANSPORTING ARKTX.
**                   WHERE VBELN = REC_DATA-VBELN.
*        ENDIF.
**Tax Amount
*      WHEN C_MWSBP.
*        IF L_MOD_CELLS-VALUE <> SPACE.
*          CLEAR:REC_DATA.
*          READ TABLE I_DATA INTO REC_DATA INDEX L_MOD_CELLS-ROW_ID.
*          REC_DATA-MWSBP = L_MOD_CELLS-VALUE.
*          MODIFY I_DATA FROM REC_DATA
*                   TRANSPORTING MWSBP
*                   WHERE VBELN = REC_DATA-VBELN.
*        ENDIF.
*    ENDCASE.
*  ENDLOOP.

ENDFORM.                    "DATA_CHANGE

*&---------------------------------------------------------------------*
*& Module  STATUS_0900  OUTPUT
*&---------------------------------------------------------------------*
*  This module is to output preview
*----------------------------------------------------------------------*
MODULE STATUS_0900 OUTPUT.

  SUPPRESS DIALOG.
  LEAVE TO LIST-PROCESSING AND RETURN TO SCREEN 0.
  SET PF-STATUS '8000'.

ENDMODULE.                 " STATUS_0900  OUTPUT
*&---------------------------------------------------------------------*
*& Form  OUT_LOG
*&---------------------------------------------------------------------*
*  This form is to Output preview
*----------------------------------------------------------------------*
MODULE OUT_LOG OUTPUT.

  DATA:L_KZWI1  TYPE CHAR20,
       L_FRONT  TYPE CHAR120,
       L_BANK   TYPE CHAR80,
       L_COMB   TYPE C,
       L_REFNUM(16) TYPE P DECIMALS 0,
       L_VATREF TYPE YSE_GTS001-VATREF,
       L_BEHIND TYPE CHAR20.
  CLEAR V_DOWN_OK.
  CLEAR L_REFNUM.
  CLEAR L_COMB.
  CLEAR L_VATREF.
  REFRESH I_DOWNLOAD[].
*  WRITE:1(13) TEXT-W01."'ÏúÊÛµ¥¾Ý±àºÅ'.
*  WRITE:15(9) TEXT-W02."'·¢Æ±ÖÖÀà'.
*  WRITE:25(8) TEXT-W03."'Àà±ð´úÂë'.
*  WRITE:34(20) TEXT-W24."'Accounting Document10'.
*  WRITE:55(10) TEXT-W04." '·¢Æ±ºÅÂë'.
*  WRITE:66(9) TEXT-W05."'¿ªÆ±²Î¿¼ºÅ'.
*  WRITE:76(30) TEXT-W06."'¹º·½Ãû³Æ'.
*  WRITE:107(20) TEXT-W07."'¹º·½Ë°ºÅ'.
*  WRITE:138(35) TEXT-W08."'¹º·½µØÖ·µç»°'.
*  WRITE:174(20) TEXT-W09."'¹º·½ÒøÐÐÕÊºÅ18'.
*  WRITE:195(60) TEXT-W26."'¿ª»§ÐÐ60'.
*  WRITE:256(10) TEXT-W10."'¿ªÆ±ÈÕÆÚ'.
*  WRITE:267(20) TEXT-W11."'ºÏ¼Æ½ð¶î'.
*  WRITE:388(4) TEXT-W12."'Ë°ÂÊ'.
*  WRITE:393(20) TEXT-W13."'ºÏ¼ÆË°¶î'.
*  WRITE:414(23) TEXT-W27."'ÊýÁ¿'.
*  WRITE:438(3) TEXT-W28."'µ¥Î»'.
*  WRITE:341(100) TEXT-W14."'»õÎï»òÓ¦Ë°ÀÍÎñÃû³Æ'.
*  WRITE:441(20) TEXT-W15."'¹æ¸ñÐÍºÅ'.
*  WRITE:462(20) TEXT-W16."'ÉÌÆ·Ë°Ä¿'.
*  WRITE:483(100) TEXT-W17."'±¸×¢'.
*  WRITE:584(10) TEXT-W18."'¿ªÆ±ÈË'.
*  WRITE:595(10) TEXT-W19."'ÊÕ¿îÈË'.
*  WRITE:606(10) TEXT-W20."'¸´ºËÈË'.
*  WRITE:617(10) TEXT-W21."'×÷·Ï±êÖ¾'.
*  WRITE:628(10) TEXT-W22."'Çåµ¥±êÖ¾'.
*  WRITE:639(100) TEXT-W23."'Remark'.
*  WRITE:740(20) TEXT-W29."'¶©µ¥×Ü½ð¶î'.

*Head
  WRITE:1(13) TEXT-W01."'ÏúÊÛµ¥¾Ý±àºÅ'.
  WRITE:15(9) TEXT-W02."'·¢Æ±ÖÖÀà'.
  WRITE:25(13) TEXT-W03."'Àà±ð´úÂë'.5

  WRITE:39(20) TEXT-W24."'Accounting Document'.
  WRITE:60(15) TEXT-W04." '·¢Æ±ºÅÂë'.5
  WRITE:76(14) TEXT-W05."'¿ªÆ±²Î¿¼ºÅ'.5

  WRITE:91(30) TEXT-W06."'¹º·½Ãû³Æ'.
  WRITE:122(20) TEXT-W07."'¹º·½Ë°ºÅ'.
  WRITE:153(70) TEXT-W08."'¹º·½µØÖ·µç»°'.35

*  WRITE:224(125) TEXT-W09."'¹º·½ÒøÐÐÕÊºÅ'.
*  WRITE:350(15) TEXT-W26."'¿ª»§ÐÐ'.60

  WRITE:224(15) TEXT-W26."'¿ª»§ÐÐ'
  WRITE:240(125) TEXT-W09."'¹º·½ÒøÐÐÕÊºÅ'.
  WRITE:366(15) TEXT-W10."'¿ªÆ±ÈÕÆÚ'.5

  WRITE:382(20) TEXT-W11."'ºÏ¼Æ½ð¶î'.
  WRITE:503(4) TEXT-W12."'Ë°ÂÊ'.
  WRITE:508(20) TEXT-W13."'ºÏ¼ÆË°¶î'.

  WRITE:529(23) TEXT-W27."'ÊýÁ¿'.
  WRITE:553(3) TEXT-W28."'µ¥Î»'.
  WRITE:456(120) TEXT-W14."'»õÎï»òÓ¦Ë°ÀÍÎñÃû³Æ'.20

  WRITE:576(20) TEXT-W15."'¹æ¸ñÐÍºÅ'.
  WRITE:597(20) TEXT-W16."'ÉÌÆ·Ë°Ä¿'.
  WRITE:618(100) TEXT-W17."'±¸×¢'.

  WRITE:719(10) TEXT-W18."'¿ªÆ±ÈË'.
  WRITE:730(10) TEXT-W19."'ÊÕ¿îÈË'.
  WRITE:741(10) TEXT-W20."'¸´ºËÈË'.

  WRITE:752(10) TEXT-W21."'×÷·Ï±êÖ¾'.
  WRITE:763(10) TEXT-W22."'Çåµ¥±êÖ¾'.
*~~~Start~~~ ChenHua 20111121 [Westernacher]
*  WRITE:774(100) TEXT-W23."'Remark'.
  WRITE:774(200) TEXT-W23.
*~~~End~~~

  WRITE:875(20) TEXT-W29."'¶©µ¥×Ü½ð¶î'.
  WRITE:896(10) TEXT-W32."Telephone
  WRITE:/.
*  PERFORM KUNNR_INFO.
*~~~Start~~~ ChenHua 20111121 [Westernacher]
*  SORT I_SUMDATA BY KUNNR VBELN POSNR.
*~~~End~~~
*detail
  LOOP AT I_SUMDATA INTO REC_SUMDATA.
*    CLEAR REC_DOWNLOAD.
    CLEAR: L_FRONT,
           L_BEHIND,
           L_KZWI1.
*output item
    WRITE:1(13) REC_SUMDATA-AUBEL.           "'ÏúÊÛµ¥¾Ý±àºÅ'
    WRITE:15(9) V_FILENAME.                  "'·¢Æ±ÖÖÀà'
    WRITE:25(13) ''.                          "'Àà±ð´úÂë'
    WRITE:39(20) REC_SUMDATA-BELNR.          "'Accounting Document10'.
    WRITE:60(15) REC_SUMDATA-VBELN.          "'·¢Æ±ºÅÂë'


    WRITE:91(30) REC_SUMDATA-NAME.              "'¹º·½Ãû³Æ'
    READ TABLE I_TAX_ADDBNK INTO REC_TAX_ADDBNK
        WITH KEY KUNNR = REC_SUMDATA-KUNNR.
    IF SY-SUBRC = 0.
      WRITE:122(20)  REC_TAX_ADDBNK-STCD1.              "'¹º·½Ë°ºÅ'
      WRITE:153(70) REC_TAX_ADDBNK-STRAS.              "'¹º·½µØÖ·µç»°'
      CONCATENATE
                  REC_TAX_ADDBNK-KOINH
                  REC_TAX_ADDBNK-BANKN
*~~~Start~~~ ChenHua 20111121 [Westernacher]
                  REC_TAX_ADDBNK-BKREF
*~~~End~~~
        INTO L_BANK.
      WRITE:240(125) L_BANK.          "'¹º·½ÒøÐÐÕÊºÅ'
*      WRITE:195(60) REC_TAX_ADDBNK-KOINH.          "¿ª»§ÐÐ
      REC_DOWNLOAD-GOUSUI   = REC_TAX_ADDBNK-STCD1."¹º·½Ë°ºÅ
*      REC_DOWNLOAD-GOUDD    = REC_TAX_ADDBNK-STRAS."¹º·½µØÖ·µç»°REC_SUMDATA-TEL
      CONCATENATE REC_TAX_ADDBNK-STRAS
                  '¡¡'
                  REC_SUMDATA-TEL
             INTO REC_DOWNLOAD-GOUDD.
      REC_DOWNLOAD-GOUBANK  = L_BANK."¹º·½ÒøÐÐÕÊºÅ
*      REC_DOWNLOAD-BANKN  = REC_TAX_ADDBNK-BANKN."¿ª»§ÐÐ
    ENDIF.
*    WRITE:86(20) ''.                         "'¹º·½Ë°ºÅ'
*    WRITE:117(20) ''.                        "'¹º·½µØÖ·µç»°'
*    WRITE:138(20) ''.                        "'¹º·½ÒøÐÐÕÊºÅ'
    WRITE:366(15) REC_SUMDATA-FKDAT.            "'¿ªÆ±ÈÕÆÚ'
    WRITE REC_SUMDATA-KZWI1 TO L_KZWI1 CURRENCY 'CNY'.
    CONDENSE L_KZWI1.
    WRITE:382(20) L_KZWI1.                   "'ºÏ¼Æ½ð¶î'
    WRITE:503(4)  REC_SUMDATA-KBETR CURRENCY 'CNY'.            "'Ë°ÂÊ'
    WRITE:508(20) REC_SUMDATA-MWSBP CURRENCY 'CNY'.            "'ºÏ¼ÆË°¶î'
    WRITE:529(23) REC_SUMDATA-FKIMG."'ÊýÁ¿'.
    WRITE:553(3)  REC_SUMDATA-UNIT."'µ¥Î»'.

    IF REC_SUMDATA-MATKL = '01'
      AND ( REC_SUMDATA-VKORG = 'CN01'
           OR REC_SUMDATA-VKORG = 'CN02'
***BEGIN OF MOD-005 INSERT
           OR REC_SUMDATA-VKORG = 'CN07'
***ENDOF MOD-005 INSERT
      ).
      SPLIT REC_SUMDATA-ARKTX AT '\'
       INTO L_FRONT L_BEHIND.
      WRITE:456(120) L_FRONT.                 "'»õÎï»òÓ¦Ë°ÀÍÎñÃû³Æ'
      WRITE:576(20) L_BEHIND.                "'¹æ¸ñÐÍºÅ'
    ELSE.
      WRITE:456(120) REC_SUMDATA-ARKTX.       "'»õÎï»òÓ¦Ë°ÀÍÎñÃû³Æ'
      WRITE:576(20) REC_SUMDATA-MATNR.       "'¹æ¸ñÐÍºÅ'
    ENDIF.
*    IF L_FRONT IS NOT INITIAL
*     AND L_BEHIND IS NOT INITIAL.
*      WRITE:456(120) L_FRONT.                 "'»õÎï»òÓ¦Ë°ÀÍÎñÃû³Æ'
*      WRITE:576(20) L_BEHIND.                "'¹æ¸ñÐÍºÅ'
*    ELSE.
*      WRITE:456(120) REC_SUMDATA-ARKTX.       "'»õÎï»òÓ¦Ë°ÀÍÎñÃû³Æ'
*      WRITE:576(20) REC_SUMDATA-MATNR.       "'¹æ¸ñÐÍºÅ'
*    ENDIF.
    WRITE:597(20)  ''.                       "'ÉÌÆ·Ë°Ä¿'
    WRITE:618(100) REC_SUMDATA-TEXT.         "'±¸×¢'
    WRITE:719(10)  ''.                       "'¿ªÆ±ÈË'
    WRITE:730(10)  ''.                       "'ÊÕ¿îÈË'
    WRITE:741(10)  ''.                       "'¸´ºËÈË'
    WRITE:752(10)   ''.                      "'×÷·Ï±êÖ¾'
    WRITE:763(10)   ''.                      "'Çåµ¥±êÖ¾'
*~~~Start~~~ ChenHua 20111121 [Westernacher]
*    WRITE:774(100) REC_SUMDATA-REMARK.
    WRITE:774(200) REC_SUMDATA-REMARK.
*~~~End~~~
    WRITE:875(20) REC_SUMDATA-NETSUM.       "¶©µ¥×Ü½ð¶î
    WRITE:896(10) REC_SUMDATA-TEL.          "Tel
*get data for download

    REC_DOWNLOAD-AUBEL    = REC_SUMDATA-AUBEL."ÏúÊÛµ¥¾Ý±àºÅ
    REC_DOWNLOAD-VATYP    = V_FILENAME.       "·¢Æ±ÖÖÀà
    REC_DOWNLOAD-TPCODE   = ''.	            "Àà±ð´úÂë
    REC_DOWNLOAD-BELNR    = REC_SUMDATA-BELNR."Accounting Document
    IF REC_SUMDATA-VBELN IS INITIAL.
      SELECT SINGLE AWKEY
        INTO REC_DOWNLOAD-VBELN
        FROM BKPF
       WHERE BUKRS = P_BUKRS
         AND BELNR = REC_SUMDATA-BELNR
         AND GJAHR = REC_SUMDATA-FKDAT+0(4).
    ELSE.
      REC_DOWNLOAD-VBELN    = REC_SUMDATA-VBELN."·¢Æ±ºÅÂë
    ENDIF.
    REC_DOWNLOAD-VATREF   = ''.	            "¿ªÆ±»úºÅ
    CONDENSE L_VATREF.
    CLEAR L_REFNUM.
    AT NEW VBELN.
*      REC_DOWNLOAD-VATREF = REC_DOWNLOAD-VATREF + 1.
    L_REFNUM = L_VATREF.
    L_REFNUM = L_REFNUM + 1.
    L_VATREF = L_REFNUM.
  ENDAT.
*the billing which is more than limit amout,produce a new ref.no
  IF REC_SUMDATA-POSNR = '1-'.
    L_VATREF = L_VATREF + 1.
  ENDIF.

*    IF V_COMMAND = 'SAVE'
*     AND V_ALVCOMMAND <> '&COMB'.
  IF L_COMB IS INITIAL.
    L_COMB  = C_FLAG.
*    PERFORM GET_NOW_REF
*              CHANGING L_VATREF.
    L_VATREF = V_REF.
  ENDIF.
  CONDENSE L_VATREF.
*    ENDIF.
**Combination
*    IF V_ALVCOMMAND = '&COMB'
*     AND L_COMB IS INITIAL.
*      L_COMB  = C_FLAG.
*      PERFORM GET_NOW_REF
*                CHANGING REC_DOWNLOAD-VATREF.
*      CONDENSE REC_DOWNLOAD-VATREF.
*    ENDIF.
  REC_DOWNLOAD-VATREF = L_VATREF.
  CONDENSE REC_DOWNLOAD-VATREF.

  REC_GTS004-VATREF = REC_DOWNLOAD-VATREF.
  MODIFY I_GTS004 FROM REC_GTS004 TRANSPORTING VATREF
           WHERE VBELN = REC_SUMDATA-VBELN.

  WRITE:76(14) REC_DOWNLOAD-VATREF.             "'¿ªÆ±²Î¿¼ºÅ'
  REC_DOWNLOAD-GOUNAME  = REC_SUMDATA-NAME.    "¹º·½Ãû³Æ
*    REC_DOWNLOAD-GOUSUI   = ''. 	            "¹º·½Ë°ºÅ
*    REC_DOWNLOAD-GOUDD    = ''.                "¹º·½µØÖ·µç»°
*    REC_DOWNLOAD-GOUBANK  = ''.              "¹º·½ÒøÐÐÕÊºÅ
  REC_DOWNLOAD-FKDAT    = REC_SUMDATA-FKDAT.   "¿ªÆ±ÈÕÆÚ
  REC_DOWNLOAD-AMOUT    = L_KZWI1.             "ºÏ¼Æ½ð¶î
  REC_DOWNLOAD-RATE     = REC_SUMDATA-KBETR.   "Ë°ÂÊ
  REC_DOWNLOAD-SUI      = REC_SUMDATA-MWSBP.   "ºÏ¼ÆË°¶î
  REC_DOWNLOAD-FKIMG    = REC_SUMDATA-FKIMG.   "ÊýÁ¿
  REC_DOWNLOAD-UNIT     = REC_SUMDATA-UNIT.    "µ¥Î»

*  IF L_FRONT IS NOT INITIAL
*   AND L_BEHIND IS NOT INITIAL.
*    REC_DOWNLOAD-HUONAME  = L_FRONT.        "»õÎï»òÓ¦Ë°ÀÍÎñÃû³Æ
*    REC_DOWNLOAD-GUINAME  = L_BEHIND.       "¹æ¸ñÐÍºÅ
*  ELSE.
*    REC_DOWNLOAD-HUONAME  = REC_SUMDATA-ARKTX. "»õÎï»òÓ¦Ë°ÀÍÎñÃû³Æ
*    REC_DOWNLOAD-GUINAME  = REC_SUMDATA-MATNR. "¹æ¸ñÐÍºÅ
*  ENDIF.
  IF REC_SUMDATA-MATKL = '01'
    AND ( REC_SUMDATA-VKORG = 'CN01'
         OR REC_SUMDATA-VKORG = 'CN02'
****MOD-005 BEGIN INSERT
         OR REC_SUMDATA-VKORG = 'CN07'
****MOD-005 END INSERT
    ).
    CLEAR L_FRONT.
    CLEAR L_BEHIND.
    SPLIT REC_SUMDATA-ARKTX AT '\'
     INTO L_FRONT L_BEHIND.
    REC_DOWNLOAD-HUONAME  = L_FRONT.        "»õÎï»òÓ¦Ë°ÀÍÎñÃû³Æ
    REC_DOWNLOAD-GUINAME  = L_BEHIND.       "¹æ¸ñÐÍºÅ
  ELSE.
    REC_DOWNLOAD-HUONAME  = REC_SUMDATA-ARKTX. "»õÎï»òÓ¦Ë°ÀÍÎñÃû³Æ
    REC_DOWNLOAD-GUINAME  = REC_SUMDATA-MATNR. "¹æ¸ñÐÍºÅ
  ENDIF.


  REC_DOWNLOAD-SHANG    = ''.               "ÉÌÆ·Ë°Ä¿
  REC_DOWNLOAD-TEXT     = REC_SUMDATA-TEXT. "±¸×¢
  REC_DOWNLOAD-KAI      = ''.               "¿ªÆ±ÈË
  REC_DOWNLOAD-SHOU     = TEXT-W30.               "ÊÕ¿îÈË
  REC_DOWNLOAD-FUHE     = TEXT-W31.               "¸´ºËÈË
  REC_DOWNLOAD-DEFLG    = ''.               "×÷·Ï±êÖ¾
  REC_DOWNLOAD-KAI      = ''.               "¿ªÆ±
  REC_DOWNLOAD-REMARK   = REC_SUMDATA-REMARK."REMARK
  REC_DOWNLOAD-SUM   = REC_SUMDATA-NETSUM."¶©µ¥×Ü½ð¶î
*  REC_DOWNLOAD-TEL   = REC_SUMDATA-TEL."TEL
  APPEND REC_DOWNLOAD TO I_DOWNLOAD.
  WRITE:/.
ENDLOOP.

ENDMODULE.                    " OUT_LOG
*&---------------------------------------------------------------------*
*& Module  INIT  OUTPUT
*&---------------------------------------------------------------------*
*  Init the output
*----------------------------------------------------------------------*
MODULE INIT OUTPUT.

*init screen 800
  PERFORM INIT.

ENDMODULE.                 " INIT  OUTPUT
*&---------------------------------------------------------------------*
*& Module  STATUS_0800  OUTPUT
*&---------------------------------------------------------------------*
*  This module is to process PBO
*----------------------------------------------------------------------*
MODULE STATUS_0800 OUTPUT.

  SET PF-STATUS '7000'.

ENDMODULE.                 " STATUS_0800  OUTPUT
*&---------------------------------------------------------------------*
*& Module  USER_COMMAND_0800  INPUT
*&---------------------------------------------------------------------*
*  This module is to process PAI
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0800 INPUT.


  DATA:L_ANS TYPE C.
  OK_CODE = SY-UCOMM.
  SAVE_OK = OK_CODE.
  CLEAR OK_CODE.
  CASE SAVE_OK.
    WHEN 'BACK'.
      LEAVE TO LIST-PROCESSING.
      SET SCREEN 0.
      REFRESH I_SUMDATA.
    WHEN 'EXIT'.
      LEAVE TO LIST-PROCESSING.
      SET SCREEN 0.
      REFRESH I_SUMDATA.
    WHEN 'CANCEL'.
      LEAVE TO LIST-PROCESSING.
      SET SCREEN 0.
      REFRESH I_SUMDATA.
    WHEN 'NORM'.
      V_COMMAND = 'NORM'.
      V_FILENAME = TEXT-F01.
      V_VATYP    = 'N'.
      PERFORM KUNNR_INFO.
*      CHECK FLG_STOP IS INITIAL.
*     check amout
      PERFORM  CHECK_LIMIT
                 USING    C_NORM
                 CHANGING L_ANS.
      IF L_ANS = C_J.
*       split amout
*        PERFORM AMOUT_SPLIT
*                  USING I_SUMDATA
*                        C_NORM
*                  CHANGING
*                        I_SUMDATA.
        CALL SCREEN 900.
      ELSEIF L_ANS = C_N.

      ELSEIF L_ANS IS INITIAL.
        CALL SCREEN 900.
      ENDIF.
    WHEN 'SPEC'.
      V_COMMAND = 'SPEC'.
      V_FILENAME = TEXT-F02.
      V_VATYP    = 'S'.
*     check amout
      PERFORM  CHECK_LIMIT
                 USING    C_SPEC
                 CHANGING L_ANS.
      IF L_ANS = C_J.
*       split amout
*        PERFORM AMOUT_SPLIT
*                  USING I_SUMDATA
*                        C_SPEC
*                  CHANGING
*                        I_SUMDATA.
        PERFORM KUNNR_INFO.
        CHECK FLG_STOP IS INITIAL.
        CALL SCREEN 900.
      ELSEIF L_ANS = C_N.

      ELSEIF L_ANS IS INITIAL.
        PERFORM KUNNR_INFO.
        CHECK FLG_STOP IS INITIAL.
        CALL SCREEN 900.
      ENDIF.
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_0800  INPUT
*&---------------------------------------------------------------------*
*& Module  TC_ALV_CHANGE_TC_ATTR  OUTPUT
*&---------------------------------------------------------------------*
*  This module is to fetch TC lines and set input enable
*----------------------------------------------------------------------*
MODULE TC_ALV_CHANGE_TC_ATTR OUTPUT.

  DESCRIBE TABLE I_SUMDATA LINES TAB_LINES.
  TC_800-LINES = TAB_LINES.
* LOOP AT TC_ALV-COLS INTO COLS WHERE INDEX = '23'.
*   COLS-SCREEN-INPUT = '1'.
*   MODIFY TC_800-COLS FROM COLS INDEX SY-TABIX.
* ENDLOOP.

ENDMODULE.                    "TC_ALV_CHANGE_TC_ATTR OUTPUT
*&---------------------------------------------------------------------*
*& Module  USER_COMMAND_0900  INPUT
*&---------------------------------------------------------------------*
*  This module is to fetch the function code
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0900 INPUT.

*  CASE SY-UCOMM.
*    WHEN '&F03'.
*      LEAVE TO LIST-PROCESSING.
*      SET SCREEN 0.
*    WHEN '&F15'.
*      LEAVE TO LIST-PROCESSING.
*      SET SCREEN 0.
*    WHEN '&F12'.
*      LEAVE TO LIST-PROCESSING.
*      SET SCREEN 0.
*  ENDCASE.

ENDMODULE.                 " USER_COMMAND_0900  INPUT
*&---------------------------------------------------------------------*
*&      Module  CANCEL  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE CANCEL INPUT.

  LEAVE PROGRAM.

ENDMODULE.                 " CANCEL  INPUT

AT USER-COMMAND.
  CASE SY-UCOMM.
    WHEN '&F03'.
      IF V_DOWN_OK IS NOT INITIAL.
        REFRESH I_SUMDATA.
        REFRESH I_DOWNLOAD.
      ENDIF.
      LEAVE TO LIST-PROCESSING AND RETURN TO SCREEN 0.
      IF V_DOWN_OK = C_FLAG.
        DELETE I_DATA WHERE BOX = 'X'.
      ENDIF.
      LEAVE SCREEN.

    WHEN '&F12'.
      IF V_DOWN_OK IS NOT INITIAL.
        REFRESH I_SUMDATA.
        REFRESH I_DOWNLOAD.
      ENDIF.

      LEAVE TO LIST-PROCESSING AND RETURN TO SCREEN 0.
      IF V_DOWN_OK = C_FLAG.
        DELETE I_DATA WHERE BOX = 'X'.
      ENDIF.
      LEAVE SCREEN.
    WHEN '&F15'.
      IF V_DOWN_OK IS NOT INITIAL.
        REFRESH I_SUMDATA.
        REFRESH I_DOWNLOAD.
      ENDIF.

      LEAVE TO LIST-PROCESSING AND RETURN TO SCREEN 0.
      IF V_DOWN_OK = C_FLAG.
        DELETE I_DATA WHERE BOX = 'X'.
      ENDIF.
      LEAVE SCREEN.

    WHEN 'SAVE'.
      V_COMMAND = 'SAVE'.
      IF V_DOWN_OK IS INITIAL.
        CLEAR V_UPDATE.
        PERFORM DOWNLOAD_DATA.
        REFRESH I_SUMDATA.
      ELSE.
        MESSAGE S008.
      ENDIF.
  ENDCASE.

*----------------------------------------------------------------------*
*  MODULE TC_800_CHANGE_TC_ATTR OUTPUT
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
MODULE TC_800_CHANGE_TC_ATTR OUTPUT.
  DESCRIBE TABLE I_SUMDATA LINES TC_800-lines.
ENDMODULE.                    "TC_800_CHANGE_TC_ATTR OUTPUT
*----------------------------------------------------------------------*
*  MODULE TC_800_GET_LINES OUTPUT
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
MODULE TC_800_GET_LINES OUTPUT.
  G_TC_800_LINES = SY-LOOPC.
ENDMODULE.                    "TC_800_GET_LINES OUTPUT

*----------------------------------------------------------------------*
*  MODULE TC_800_MODIFY INPUT
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
MODULE TC_800_MODIFY INPUT.
  MODIFY I_SUMDATA
    FROM REC_SUMDATA
    INDEX TC_800-CURRENT_LINE.
ENDMODULE.                    "TC_800_MODIFY INPUT

*----------------------------------------------------------------------*
*  MODULE TC_800_MARK INPUT
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
MODULE TC_800_MARK INPUT.
  DATA: g_TC_800_wa2 like line of I_SUMDATA.
  if TC_800-line_sel_mode = 1
  and REC_SUMDATA-BOX = 'X'.
    loop at I_SUMDATA into g_TC_800_wa2
      where BOX = 'X'.
      g_TC_800_wa2-BOX = ''.
      modify I_SUMDATA
        from g_TC_800_wa2
        transporting BOX.
    endloop.
  endif.
  MODIFY I_SUMDATA
    FROM REC_SUMDATA
    INDEX TC_800-CURRENT_LINE
    TRANSPORTING BOX.
ENDMODULE.                    "TC_800_MARK INPUT

*----------------------------------------------------------------------*
*  MODULE TC_800_USER_COMMAND INPUT
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
MODULE TC_800_USER_COMMAND INPUT.
  OK_CODE = SY-UCOMM.
  PERFORM USER_OK_TC USING    'TC_800'
                              'I_SUMDATA'
                              'BOX'
                     CHANGING OK_CODE.
  SY-UCOMM = OK_CODE.
ENDMODULE.                    "TC_800_USER_COMMAND INPUT

*----------------------------------------------------------------------*
*   INCLUDE TABLECONTROL_FORMS                                         *
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  USER_OK_TC                                               *
*&---------------------------------------------------------------------*
FORM USER_OK_TC USING    P_TC_NAME TYPE DYNFNAM
                         P_TABLE_NAME
                         P_MARK_NAME
                CHANGING P_OK      LIKE SY-UCOMM.

*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA: L_OK              TYPE SY-UCOMM,
        L_OFFSET          TYPE I.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

*&SPWIZARD: Table control specific operations                          *
*&SPWIZARD: evaluate TC name and operations                            *
  SEARCH P_OK FOR P_TC_NAME.
  IF SY-SUBRC <> 0.
    EXIT.
  ENDIF.
  L_OFFSET = STRLEN( P_TC_NAME ) + 1.
  L_OK = P_OK+L_OFFSET.
*&SPWIZARD: execute general and TC specific operations                 *
  CASE L_OK.
    WHEN 'INSR'.                      "insert row
      PERFORM FCODE_INSERT_ROW USING    P_TC_NAME
                                        P_TABLE_NAME.
      CLEAR P_OK.

    WHEN 'DELE'.                      "delete row
      PERFORM FCODE_DELETE_ROW USING    P_TC_NAME
                                        P_TABLE_NAME
                                        P_MARK_NAME.
      CLEAR P_OK.

    WHEN 'P--' OR                     "top of list
         'P-'  OR                     "previous page
         'P+'  OR                     "next page
         'P++'.                       "bottom of list
      PERFORM COMPUTE_SCROLLING_IN_TC USING P_TC_NAME
                                            L_OK.
      CLEAR P_OK.
*     WHEN 'L--'.                       "total left
*       PERFORM FCODE_TOTAL_LEFT USING P_TC_NAME.
*
*     WHEN 'L-'.                        "column left
*       PERFORM FCODE_COLUMN_LEFT USING P_TC_NAME.
*
*     WHEN 'R+'.                        "column right
*       PERFORM FCODE_COLUMN_RIGHT USING P_TC_NAME.
*
*     WHEN 'R++'.                       "total right
*       PERFORM FCODE_TOTAL_RIGHT USING P_TC_NAME.
*
    WHEN 'MARK'.                      "mark all filled lines
      PERFORM FCODE_TC_MARK_LINES USING P_TC_NAME
                                        P_TABLE_NAME
                                        P_MARK_NAME   .
      CLEAR P_OK.

    WHEN 'DMRK'.                      "demark all filled lines
      PERFORM FCODE_TC_DEMARK_LINES USING P_TC_NAME
                                          P_TABLE_NAME
                                          P_MARK_NAME .
      CLEAR P_OK.

*     WHEN 'SASCEND'   OR
*          'SDESCEND'.                  "sort column
*       PERFORM FCODE_SORT_TC USING P_TC_NAME
*                                   l_ok.

  ENDCASE.

ENDFORM.                              " USER_OK_TC

*&---------------------------------------------------------------------*
*&      Form  FCODE_INSERT_ROW                                         *
*&---------------------------------------------------------------------*
FORM fcode_insert_row
              USING    P_TC_NAME           TYPE DYNFNAM
                       P_TABLE_NAME             .

*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA L_LINES_NAME       LIKE FELD-NAME.
  DATA L_SELLINE          LIKE SY-STEPL.
  DATA L_LASTLINE         TYPE I.
  DATA L_LINE             TYPE I.
  DATA L_TABLE_NAME       LIKE FELD-NAME.
  FIELD-SYMBOLS <TC>                 TYPE CXTAB_CONTROL.
  FIELD-SYMBOLS <TABLE>              TYPE STANDARD TABLE.
  FIELD-SYMBOLS <LINES>              TYPE I.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (P_TC_NAME) TO <TC>.

*&SPWIZARD: get the table, which belongs to the tc                     *
  CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
  ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline

*&SPWIZARD: get looplines of TableControl                              *
  CONCATENATE 'G_' P_TC_NAME '_LINES' INTO L_LINES_NAME.
  ASSIGN (L_LINES_NAME) TO <LINES>.

*&SPWIZARD: get current line                                           *
  GET CURSOR LINE L_SELLINE.
  IF SY-SUBRC <> 0.                   " append line to table
    L_SELLINE = <TC>-LINES + 1.
*&SPWIZARD: set top line                                               *
    IF L_SELLINE > <LINES>.
      <TC>-TOP_LINE = L_SELLINE - <LINES> + 1 .
    ELSE.
      <TC>-TOP_LINE = 1.
    ENDIF.
  ELSE.                               " insert line into table
    L_SELLINE = <TC>-TOP_LINE + L_SELLINE - 1.
    L_LASTLINE = <TC>-TOP_LINE + <LINES> - 1.
  ENDIF.
*&SPWIZARD: set new cursor line                                        *
  L_LINE = L_SELLINE - <TC>-TOP_LINE + 1.

*&SPWIZARD: insert initial line                                        *
  INSERT INITIAL LINE INTO <TABLE> INDEX L_SELLINE.
  <TC>-LINES = <TC>-LINES + 1.
*&SPWIZARD: set cursor                                                 *
  SET CURSOR LINE L_LINE.

ENDFORM.                              " FCODE_INSERT_ROW

*&---------------------------------------------------------------------*
*&      Form  FCODE_DELETE_ROW                                         *
*&---------------------------------------------------------------------*
FORM fcode_delete_row
              USING    P_TC_NAME           TYPE DYNFNAM
                       P_TABLE_NAME
                       P_MARK_NAME   .

*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA L_TABLE_NAME       LIKE FELD-NAME.

  FIELD-SYMBOLS <TC>         TYPE cxtab_control.
  FIELD-SYMBOLS <TABLE>      TYPE STANDARD TABLE.
  FIELD-SYMBOLS <WA>.
  FIELD-SYMBOLS <MARK_FIELD>.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (P_TC_NAME) TO <TC>.

*&SPWIZARD: get the table, which belongs to the tc                     *
  CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
  ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline

*&SPWIZARD: delete marked lines                                        *
  DESCRIBE TABLE <TABLE> LINES <TC>-LINES.

  LOOP AT <TABLE> ASSIGNING <WA>.

*&SPWIZARD: access to the component 'FLAG' of the table header         *
    ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE <WA> TO <MARK_FIELD>.

    IF <MARK_FIELD> = 'X'.
      DELETE <TABLE> INDEX SYST-TABIX.
      IF SY-SUBRC = 0.
        <TC>-LINES = <TC>-LINES - 1.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.                              " FCODE_DELETE_ROW

*&---------------------------------------------------------------------*
*&      Form  COMPUTE_SCROLLING_IN_TC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*      -->P_OK       ok code
*----------------------------------------------------------------------*
FORM COMPUTE_SCROLLING_IN_TC USING    P_TC_NAME
                                      P_OK.
*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA L_TC_NEW_TOP_LINE     TYPE I.
  DATA L_TC_NAME             LIKE FELD-NAME.
  DATA L_TC_LINES_NAME       LIKE FELD-NAME.
  DATA L_TC_FIELD_NAME       LIKE FELD-NAME.

  FIELD-SYMBOLS <TC>         TYPE cxtab_control.
  FIELD-SYMBOLS <LINES>      TYPE I.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (P_TC_NAME) TO <TC>.
*&SPWIZARD: get looplines of TableControl                              *
  CONCATENATE 'G_' P_TC_NAME '_LINES' INTO L_TC_LINES_NAME.
  ASSIGN (L_TC_LINES_NAME) TO <LINES>.


*&SPWIZARD: is no line filled?                                         *
  IF <TC>-LINES = 0.
*&SPWIZARD: yes, ...                                                   *
    L_TC_NEW_TOP_LINE = 1.
  ELSE.
*&SPWIZARD: no, ...                                                    *
    CALL FUNCTION 'SCROLLING_IN_TABLE'
         EXPORTING
              ENTRY_ACT             = <TC>-TOP_LINE
              ENTRY_FROM            = 1
              ENTRY_TO              = <TC>-LINES
              LAST_PAGE_FULL        = 'X'
              LOOPS                 = <LINES>
              OK_CODE               = P_OK
              OVERLAPPING           = 'X'
         IMPORTING
              ENTRY_NEW             = L_TC_NEW_TOP_LINE
         EXCEPTIONS
*              NO_ENTRY_OR_PAGE_ACT  = 01
*              NO_ENTRY_TO           = 02
*              NO_OK_CODE_OR_PAGE_GO = 03
              OTHERS                = 0.
  ENDIF.

  GET CURSOR FIELD L_TC_FIELD_NAME
             AREA  L_TC_NAME.

  IF SYST-SUBRC = 0.
    IF L_TC_NAME = P_TC_NAME.
      SET CURSOR FIELD L_TC_FIELD_NAME LINE 1.
    ENDIF.
  ENDIF.
  <TC>-TOP_LINE = L_TC_NEW_TOP_LINE.


ENDFORM.                              " COMPUTE_SCROLLING_IN_TC

*&---------------------------------------------------------------------*
*&      Form  FCODE_TC_MARK_LINES
*&---------------------------------------------------------------------*
*       marks all TableControl lines
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM FCODE_TC_MARK_LINES USING P_TC_NAME
                               P_TABLE_NAME
                               P_MARK_NAME.

  DATA L_TABLE_NAME       LIKE FELD-NAME.

  FIELD-SYMBOLS <TC>         TYPE cxtab_control.
  FIELD-SYMBOLS <TABLE>      TYPE STANDARD TABLE.
  FIELD-SYMBOLS <WA>.
  FIELD-SYMBOLS <MARK_FIELD>.

  ASSIGN (P_TC_NAME) TO <TC>.
  CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
  ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline
  LOOP AT <TABLE> ASSIGNING <WA>.
    ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE <WA> TO <MARK_FIELD>.

    <MARK_FIELD> = 'X'.
  ENDLOOP.
ENDFORM.                                          "fcode_tc_mark_lines

*&---------------------------------------------------------------------*
*&      Form  FCODE_TC_DEMARK_LINES
*&---------------------------------------------------------------------*
*       demarks all TableControl lines
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM FCODE_TC_DEMARK_LINES USING P_TC_NAME
                                 P_TABLE_NAME
                                 P_MARK_NAME .

  DATA L_TABLE_NAME       LIKE FELD-NAME.

  FIELD-SYMBOLS <TC>         TYPE cxtab_control.
  FIELD-SYMBOLS <TABLE>      TYPE STANDARD TABLE.
  FIELD-SYMBOLS <WA>.
  FIELD-SYMBOLS <MARK_FIELD>.

  ASSIGN (P_TC_NAME) TO <TC>.
  CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
  ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline
  LOOP AT <TABLE> ASSIGNING <WA>.
    ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE <WA> TO <MARK_FIELD>.

    <MARK_FIELD> = SPACE.
  ENDLOOP.
ENDFORM.                                          "fcode_tc_mark_lines
*&---------------------------------------------------------------------*
*& Form  INIT
*&---------------------------------------------------------------------*
*  This form is to init screen 800
*----------------------------------------------------------------------*
FORM INIT .


ENDFORM.                    " INIT
*&---------------------------------------------------------------------*
*& Form  COM_DATA
*&---------------------------------------------------------------------*
*  This form is to edit combination data
*----------------------------------------------------------------------*
FORM COM_DATA.

  DATA:L_ITEM   TYPE POSNR,
       L_VAT(5) TYPE C,
       L_SUMANOUT(16) TYPE P DECIMALS 6,
       LREC_COM   TYPE TY_DATA,
       LCNT_VAT TYPE N.
* combinate when same price, customer and material
DATA:LI_COPY TYPE STANDARD TABLE OF TY_DATA,
     LREC_COPY TYPE TY_DATA.

  L_ITEM = 1.
  CLEAR   REC_SUMDATA.
  CLEAR LREC_COPY.
  REFRESH I_SUMDATA[].
  REFRESH I_GTS004[].
  REFRESH I_COMB.
  REFRESH LI_COPY[].
  REFRESH I_SHCOST[].
  REFRESH I_GTS001_KEY[].
  REFRESH I_DIFF[].
  CLEAR L_SUMANOUT.
  CLEAR V_SUM.
*fetch the selected data
  LOOP AT I_DATA INTO REC_DATA
            WHERE BOX = C_FLAG.
    CLEAR  REC_DATA-BOX.
    APPEND REC_DATA TO I_SUMDATA.
*fetch the combination billings no. and items
    REC_GTS004-VBELN = REC_DATA-VBELN.
    REC_GTS004-BELNR = REC_DATA-BELNR.
    REC_GTS004-POSNR = REC_DATA-POSNR.
    REC_GTS004-FKDAT = REC_DATA-FKDAT.
    REC_GTS004-FLAG  = '1+'.
    APPEND REC_GTS004 TO I_GTS004.
*fetch the key in gts001 for download to delete
  IF S_STATUS-LOW = '1'."pending
    REC_GTS001_KEY-BUKRS = P_BUKRS.
    IF S_GJAHR-HIGH IS NOT INITIAL.
      REC_GTS001_KEY-GJAHR = REC_DATA-FKDAT+0(4).
    ELSE.
      REC_GTS001_KEY-GJAHR = S_GJAHR-LOW.
    ENDIF.
    REC_GTS001_KEY-VBELN = REC_DATA-VBELN.
    REC_GTS001_KEY-POSNR = REC_DATA-POSNR.
    APPEND REC_GTS001_KEY TO I_GTS001_KEY.
*fetch sales organization data
    REC_SALE_ORG-VKORG = REC_DATA-VKORG.
    REC_SALE_ORG-VTWEG = REC_DATA-VTWEG.
    REC_SALE_ORG-SPART = REC_DATA-SPART.
    APPEND REC_SALE_ORG TO I_SALE_ORG.
  ENDIF.
*collect shipping cost
*    REC_SHCOST-VBELN = REC_DATA-VBELN.
    IF REC_DATA-MATKL = '01'.
      REC_SHCOST-GROUP = '01'.
    ELSEIF REC_DATA-MATKL <> '01'.
      REC_SHCOST-GROUP = '02'.
    ENDIF.
    REC_SHCOST-SHCOST = REC_DATA-SHCOST.
    REC_SHCOST-ONEAMOUT = REC_DATA-KZWI1.
    COLLECT REC_SHCOST INTO I_SHCOST.
*collect sum amout
    L_SUMANOUT = L_SUMANOUT + REC_DATA-KZWI1.
  ENDLOOP.
*combine the billings
*NO.1,only debit
*NO.2,both credit and debit

*  LCNT_VAT       = LCNT_VAT + 1.
*  WRITE LCNT_VAT TO L_VAT.
*  CONCATENATE SY-DATUM+2(4)                   "Year&day
*              L_VAT                           "0000n
*         INTO REC_SUMDATA-VATREF.
  LOOP AT  I_SUMDATA INTO REC_SUMDATA.
*caculate billing no counts
    REC_VBELN-VBELN = REC_SUMDATA-VBELN.
    COLLECT REC_VBELN INTO I_VBELN.
*amout less than 0
    IF REC_SUMDATA-KZWI1 > 0.
      CLear REC_SUMDATA-VBELN.
      REC_SUMDATA-PRICE1 = REC_SUMDATA-PRICE.
      REC_SUMDATA-NETSUM = L_SUMANOUT.
*fetch sum of the amout
*      V_SUM = V_SUM + REC_SUMDATA-KZWI1.
*calcalate Line item again
      REC_SUMDATA-POSNR = 10 * L_ITEM.
*calculate VAT reference
      L_ITEM = L_ITEM + 1.
      MODIFY I_SUMDATA FROM REC_SUMDATA
               TRANSPORTING POSNR
                            VBELN
                            VATREF
                            NETSUM
                            PRICE1.
*amount more than 0
    ELSE.
*sum the amout,quantity,price etc
      LREC_COM-MATNR    = REC_SUMDATA-MATNR.
      LREC_COM-KUNNR    = REC_SUMDATA-KUNNR.
      LREC_COM-KZWI1    = REC_SUMDATA-KZWI1.
      LREC_COM-FKIMG    = REC_SUMDATA-FKIMG.
      LREC_COM-SHCOST   = REC_SUMDATA-SHCOST.
      LREC_COM-NETWR    = REC_SUMDATA-NETWR.
*      LREC_COM-NETSUM   = REC_SUMDATA-NETSUM.
      LREC_COM-PRICE1   = REC_SUMDATA-PRICE.
      LREC_COM-CPRICE   = LREC_COM-PRICE1.
      LREC_COM-MWSBP    = REC_SUMDATA-MWSBP.
      COLLECT LREC_COM INTO I_COMB.
    ENDIF.
  ENDLOOP.
*Credit amout split to the same material
  DELETE I_SUMDATA WHERE NETSUM < 0.



  LI_COPY[] = I_SUMDATA[].
*2011-08-24
  SORT I_SUMDATA BY MATNR PRICE1.
*2011-08-24
  DELETE ADJACENT DUPLICATES FROM I_SUMDATA
           COMPARING
*           KUNNR
                     MATNR
                     PRICE1.
  LOOP AT I_SUMDATA INTO REC_SUMDATA.
    LOOP AT LI_COPY INTO LREC_COPY
              WHERE POSNR <> REC_SUMDATA-POSNR
                AND MATNR = REC_SUMDATA-MATNR
                AND PRICE1 = REC_SUMDATA-PRICE1.
        REC_SUMDATA-KZWI1 = REC_SUMDATA-KZWI1
                          + LREC_COPY-KZWI1.
        REC_SUMDATA-FKIMG = REC_SUMDATA-FKIMG
                          + LREC_COPY-FKIMG.
*        REC_SUMDATA-SHCOST = REC_SUMDATA-SHCOST
*                          + LREC_COPY-SHCOST.
        REC_SUMDATA-NETWR = REC_SUMDATA-NETWR
                          + LREC_COPY-NETWR.
*        REC_SUMDATA-NETSUM = REC_SUMDATA-NETSUM
*                          + LREC_COPY-NETSUM.
        REC_SUMDATA-MWSBP = REC_SUMDATA-MWSBP
                          + LREC_COPY-MWSBP.
    ENDLOOP.
    MODIFY I_SUMDATA FROM REC_SUMDATA.
  ENDLOOP.


  LOOP AT I_SUMDATA INTO REC_SUMDATA.
*    LOOP AT I_COMB INTO REC_COMB
*              WHERE MATNR = REC_SUMDATA-MATNR.
      READ TABLE I_COMB INTO REC_COMB
             WITH KEY MATNR = REC_SUMDATA-MATNR
*                      KUNNR = REC_SUMDATA-KUNNR
                      PRICE1 = REC_SUMDATA-PRICE1.

      IF SY-SUBRC = 0.
        REC_SUMDATA-KZWI1 = REC_SUMDATA-KZWI1
                          + REC_COMB-KZWI1.
*        REC_SUMDATA-PRICE = REC_SUMDATA-PRICE
*                          + REC_COMB-PRICE.
*        REC_SUMDATA-NETPRICE = REC_SUMDATA-NETPRICE
*                          + REC_COMB-NETPRICE.
        REC_SUMDATA-FKIMG = REC_SUMDATA-FKIMG
                          + REC_COMB-FKIMG.
*        REC_SUMDATA-SHCOST = REC_SUMDATA-SHCOST
*                          + REC_COMB-SHCOST.
        REC_SUMDATA-NETWR = REC_SUMDATA-NETWR
                          + REC_COMB-NETWR.
*        REC_SUMDATA-NETSUM = REC_SUMDATA-NETSUM
*                          + REC_COMB-NETSUM.
        REC_SUMDATA-MWSBP = REC_SUMDATA-MWSBP
                          + REC_COMB-MWSBP.
        MODIFY I_SUMDATA FROM REC_SUMDATA.
      ENDIF.
*    ENDLOOP.
  ENDLOOP.
**blue billing no consideration
*  CHECK I_COMB IS INITIAL.
*
**shipping cost distribute
*  DATA:L_SUM1(16)       TYPE P DECIMALS 6,
*       L_RESULT         TYPE P DECIMALS 6,
*       L_CHECK01        TYPE C,
*       L_FALSE          TYPE C,
*       L_ONESHCOST(16)  TYPE P DECIMALS 6.
*
*  LOOP AT I_SUMDATA INTO REC_SUMDATA.
*    CLEAR L_SUM1.
*    READ TABLE I_SHCOST INTO REC_SHCOST
*           WITH KEY GROUP = '01'.
*    L_SUM1 = REC_SHCOST-ONEAMOUT.
**shipping cost
*    CLEAR REC_SHCOST.
*    READ TABLE I_SHCOST INTO REC_SHCOST
*          WITH KEY GROUP = '02'.
*    CHECK L_SUM1 IS NOT INITIAL.
*    IF REC_SUMDATA-MATKL = '02'.
**update item amout
*      REC_SUMDATA-KZWI1 = REC_SUMDATA-KZWI1 - REC_SUMDATA-SHCOST.
*      CLEAR REC_SUMDATA-SHCOST.
*    ELSEIF REC_SUMDATA-MATKL = '01'.
*      L_RESULT =  REC_SHCOST-SHCOST / L_SUM1
*                      * REC_SUMDATA-KZWI1.
*      REC_SUMDATA-SHCOST = REC_SUMDATA-SHCOST
*                         + L_RESULT.
**update item amout
*      REC_SUMDATA-KZWI1 = REC_SUMDATA-KZWI1 + L_RESULT.
*      L_ONESHCOST = L_ONESHCOST + L_RESULT.
*    ENDIF.
*    REC_SUMDATA-NETSUM = L_SUMANOUT.
*    MODIFY I_SUMDATA FROM REC_SUMDATA.
*  ENDLOOP.
*  IF L_ONESHCOST IS NOT INITIAL.
*    REC_DIFF-DIST  = L_ONESHCOST.
*    REC_DIFF-SUM   = REC_SHCOST-SHCOST."group 02 sum shipping cost
*    APPEND REC_DIFF TO I_DIFF.
*    READ TABLE I_SUMDATA INTO REC_SUMDATA
*           WITH KEY MATKL = '01'.
*    REC_SUMDATA-SHCOST = REC_SUMDATA-SHCOST
*                       + REC_SHCOST-SHCOST - L_ONESHCOST.
*  ENDIF.
*  DATA:
*     L_SUMASJUST TYPE
*  LOOP AT I_SUMDATA INTO REC_SUMDATA.

*    IF REC_SUMDATA-SHCOST < 0.
*      REC_SUMDATA-KZWI1 = REC_SUMDATA-KZWI1 + REC_SUMDATA-SHCOST.
*      REC_SUMDATA-NETWR = REC_SUMDATA-NETWR + REC_SUMDATA-SHCOST.
*      REC_SUMDATA-NETSUM = REC_SUMDATA-NETSUM + REC_SUMDATA-SHCOST.
*      REC_SUMDATA-MWSBP  = REC_SUMDATA-KZWI1 * REC_SUMDATA-KBETR.
*      CLEAR REC_SUMDATA-SHCOST.
*      MODIFY I_SUMDATA FROM REC_SUMDATA.
*    ENDIF.
*  ENDLOOP.

ENDFORM.                    "COM_DATA
*&---------------------------------------------------------------------*
*&      Form  DOWNLOAD_DATA
*&---------------------------------------------------------------------*
*       ÏÂÔØÊý¾Ý
*----------------------------------------------------------------------*
FORM DOWNLOAD_DATA .

  DATA:   L_FILENAME TYPE STRING,
          L_FULLPATH TYPE STRING,
          L_SUBRC    LIKE SY-SUBRC.
  CLEAR: L_FILENAME,
         L_FULLPATH,
         L_SUBRC.

*open window
*  MOD-003(MOD) Begin**************************************************
*  L_FILENAME = V_FILENAME.
  CONCATENATE V_FILENAME SY-DATLO SY-TIMLO(4)
    INTO L_FILENAME.
*  MOD-003(MOD) Begin**************************************************

  PERFORM LOCAL_FILE_SAVE_DIALOG USING    L_FILENAME
                                          'C:'
                                 CHANGING L_FULLPATH
                                          L_SUBRC.
  IF L_SUBRC = 9.
    MESSAGE S004.
    LEAVE LIST-PROCESSING.
  ENDIF.
  CLEAR L_SUBRC.
*download data to local
  PERFORM LOCAL_FILE_SAVE TABLES   I_DOWNLOAD
                          USING    L_FULLPATH
                                   C_ASC
                                   C_FLAG
                          CHANGING L_SUBRC.
  IF L_SUBRC = 0.
    MESSAGE S003.
  ELSEIF L_SUBRC = 9.
    LEAVE LIST-PROCESSING.
  ENDIF.
  CLEAR L_SUBRC.

ENDFORM.                    " DOWNLOAD_DATA
*&---------------------------------------------------------------------*
*&      Form  LOCAL_FILE_SAVE_DIALOG
*&---------------------------------------------------------------------*
*       ´ò¿ªÎÄ¼þ´°¿Ú
*----------------------------------------------------------------------*
*  -->  I_FILENAME : default file name
*  -->  I_FILEPATH : default file path
*  <--  O_FULLPATH : return file name and file path
*  <--  O_SUBRC    : result
*----------------------------------------------------------------------*
FORM LOCAL_FILE_SAVE_DIALOG USING I_FILENAME TYPE ANY
                                  I_FILEPATH TYPE ANY
                         CHANGING O_FULLPATH TYPE ANY
                                  O_SUBRC TYPE ANY.

  DATA: L_FILENAME TYPE STRING,
        L_FILEPATH TYPE STRING,
        L_FULLPATH TYPE STRING.

  CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_SAVE_DIALOG
    EXPORTING
      DEFAULT_FILE_NAME = I_FILENAME
      DEFAULT_EXTENSION = 'XLS'
      INITIAL_DIRECTORY = I_FILEPATH
    CHANGING
      FILENAME          = L_FILENAME
      PATH              = L_FILEPATH
      FULLPATH          = L_FULLPATH
      USER_ACTION       = O_SUBRC
    EXCEPTIONS
      CNTL_ERROR        = 1
      ERROR_NO_GUI      = 2.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
  O_FULLPATH = L_FULLPATH.

ENDFORM.                    "LOCAL_FILE_SAVE_DIALOG
*&---------------------------------------------------------------------*
*&      Form  LOCAL_FILE_SAVE
*&---------------------------------------------------------------------*
*       ±¾µØÎÄ¼þ²Ù×÷(ÏÂÔØ)
*----------------------------------------------------------------------*
*  -->  O_TAB_TABLE:Êý¾Ý±í
*  -->  I_FILENAME :ÎÄ¼þÃû
*  -->  I_FILETYPE :ÎÄ¼þÀàÐÍ('ASC','BIN')
*  -->  I_SEPARATOR:·Ö¸ô·û
*  <--  O_SUBRC    :·µ»Ø SY-SUBRC
*----------------------------------------------------------------------*
FORM LOCAL_FILE_SAVE TABLES O_TAB_TABLE
                      USING I_FILENAME  TYPE ANY
                            I_FILETYPE  TYPE CHAR10
                            I_SEPARATOR TYPE C
                   CHANGING O_SUBRC     TYPE SY-SUBRC.

  DATA: L_FILENAME  TYPE STRING.
  L_FILENAME = I_FILENAME.
  CLEAR V_DOWN_OK.
  DATA:
    LI_DOWNLOAD   TYPE STANDARD TABLE OF TY_DOWNLOAD,
    LREC_DOWNLOAD TYPE TY_DOWNLOAD.
  LI_DOWNLOAD[] = O_TAB_TABLE[].
  CALL METHOD CL_GUI_FRONTEND_SERVICES=>GUI_DOWNLOAD
    EXPORTING
      FILENAME                = L_FILENAME
      FILETYPE                = I_FILETYPE
      CODEPAGE                = '8400'
      WRITE_FIELD_SEPARATOR   = I_SEPARATOR
    CHANGING
      DATA_TAB                = LI_DOWNLOAD[]
    EXCEPTIONS
      FILE_WRITE_ERROR        = 1
      NO_BATCH                = 2
      GUI_REFUSE_FILETRANSFER = 3
      INVALID_TYPE            = 4
      NO_AUTHORITY            = 5
      UNKNOWN_ERROR           = 6
      HEADER_NOT_ALLOWED      = 7
      SEPARATOR_NOT_ALLOWED   = 8
      FILESIZE_NOT_ALLOWED    = 9
      HEADER_TOO_LONG         = 10
      DP_ERROR_CREATE         = 11
      DP_ERROR_SEND           = 12
      DP_ERROR_WRITE          = 13
      UNKNOWN_DP_ERROR        = 14
      ACCESS_DENIED           = 15
      DP_OUT_OF_MEMORY        = 16
      DISK_FULL               = 17
      DP_TIMEOUT              = 18
      FILE_NOT_FOUND          = 19
      DATAPROVIDER_EXCEPTION  = 20
      CONTROL_FLUSH_ERROR     = 21
      OTHERS                  = 22.
  O_SUBRC = SY-SUBRC.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ELSE.
    V_REFLST = REC_DOWNLOAD-VATREF.
    UPDATE YSE_GTS005 SET REFNOW = V_REFLST
             WHERE UNAME = SY-UNAME.
    IF SY-SUBRC <> 0.
      V_UPDATE = C_FLAG.
    ENDIF.
*    COMMIT WORK.
    V_DOWN_OK = C_FLAG.
    MESSAGE S003.
  ENDIF.
*update table gts001
  PERFORM INSERT_TABLE USING I_SUMDATA.

ENDFORM.                    "LOCAL_FILE_SAVE

*&---------------------------------------------------------------------*
*&  FORM  CHECK_LIMIT
*&---------------------------------------------------------------------*
*   check if amout more than the specific amout
*----------------------------------------------------------------------*
*-->U_AMOUT  to be checked amout
*<--C_SUBRC  return result
*----------------------------------------------------------------------*
FORM  CHECK_LIMIT
        USING    U_AMOUT TYPE KZWI1
   CHANGING C_SUBRC TYPE C.

  DATA:L_BILL TYPE CHAR80,
       L_SUM  TYPE KZWI1.

*check if item amout more than the specific amout
  IF V_ALVCOMMAND = '&VAT_NORM'
   OR V_ALVCOMMAND = '&VAT_SPEC'.
    LOOP AT I_SUMDATA INTO REC_SUMDATA.
      L_SUM = L_SUM + REC_SUMDATA-KZWI1.
      AT END OF VBELN.
        IF L_SUM >= U_AMOUT.
          CONCATENATE REC_SUMDATA-VBELN
                      C_DOU
                      L_BILL
                 INTO L_BILL.
        ENDIF.
      ENDAT.
*    IF REC_SUMDATA-KZWI1 >= U_AMOUT.
*      CONCATENATE REC_SUMDATA-VBELN
*                  C_DOU
*                  L_BILL
*             INTO L_BILL.
*    ENDIF.
    ENDLOOP.
  ELSE.
    LOOP AT I_SUMDATA INTO REC_SUMDATA.
      L_SUM = L_SUM + REC_SUMDATA-KZWI1.
    ENDLOOP.
  ENDIF.
  IF L_SUM > U_AMOUT.
*Pop to info others
    PERFORM POP_INFO
              USING
           L_BILL
                TEXT-D06
              CHANGING
                C_SUBRC.
  ENDIF.
*  IF L_BILL IS NOT INITIAL.
*    CONCATENATE L_BILL
*                TEXT-D03                      "³¬ÏÞ½ð¶î
*           INTO L_BILL.
**Pop to info others
*    PERFORM POP_INFO
*              USING
*	         L_BILL
*                TEXT-D01
*              CHANGING
*                C_SUBRC.
*  ENDIF.

ENDFORM.                    "CHECK_LIMIT
*&---------------------------------------------------------------------*
*&  FORM  POP_INFO
*&---------------------------------------------------------------------*
*   Pop to info others
*----------------------------------------------------------------------*
*-->U_TEXT first line of diagnosis text
*-->U_TEXT first text line
*<--C_SUBRC selected answer of user
*----------------------------------------------------------------------*
FORM POP_INFO
       USING    U_TEXT  TYPE CHAR80
                U_LINE1 TYPE CHAR80
       CHANGING C_SUBRC TYPE C.

  DATA:L_TEXT(80) TYPE C.
  L_TEXT = U_TEXT.

    CALL FUNCTION 'POPUP_TO_CONFIRM_WITH_MESSAGE'
            EXPORTING
        DEFAULTOPTION        = C_N
        DIAGNOSETEXT1        = L_TEXT
        TEXTLINE1            = U_LINE1
        TITEL                = TEXT-D02
        CANCEL_DISPLAY       = SPACE
      IMPORTING
        ANSWER               = C_SUBRC.

ENDFORM.                    " POP_INFO
*&---------------------------------------------------------------------*
*& Form  SPEC_DATA
*&---------------------------------------------------------------------*
*  This form is to fetch the specific data
*----------------------------------------------------------------------*
FORM SPEC_DATA .

  LOOP AT I_DATA INTO REC_DATA
            WHERE BOX = C_FLAG.
    CLEAR  REC_DATA-BOX.
    APPEND REC_DATA TO I_SUMDATA.
    REC_GTS004-VBELN = REC_DATA-VBELN.
    REC_GTS004-BELNR = REC_DATA-BELNR.
    REC_GTS004-POSNR = REC_DATA-POSNR.
    REC_GTS004-FKDAT = REC_DATA-FKDAT.
    REC_GTS004-FLAG  = '1+'.
    APPEND REC_GTS004 TO I_GTS004.
  ENDLOOP.

ENDFORM.                    " SPEC_DATA
*&---------------------------------------------------------------------*
*& Form  INSERT_TABLE
*&---------------------------------------------------------------------*
*  This form is to insert data to table gts001
*----------------------------------------------------------------------*
FORM INSERT_TABLE USING U_DATA TYPE ANY TABLE.

  DATA:LI_GTS001   TYPE STANDARD TABLE OF YSE_GTS001,
       LI_GTS001_DAI  TYPE STANDARD TABLE OF YSE_GTS001,"´ý´¦Àí
       LREC_GTS001 TYPE YSE_GTS001,
       LREC_DATA   TYPE TY_DATA,
       LREC_CHECK  TYPE YSE_GTS001,
       LI_DATA     TYPE STANDARD TABLE OF TY_DATA,
       LCNT_VAT    TYPE N,
       L_REFNUM(16) TYPE P DECIMALS 0,
       L_COMB      TYPE CHAR01,
       L_ITEM      TYPE I,
       L_CHAR(3)   TYPE C,
       L_VAT       TYPE CHAR5.

  CLEAR L_COMB.
  LI_DATA[] = U_DATA[].
  LOOP AT LI_DATA INTO LREC_DATA.
    CLEAR L_REFNUM.
*Company Code
    LREC_GTS001-BUKRS   = P_BUKRS.
*Year
    LREC_GTS001-GJAHR   = LREC_DATA-FKDAT+0(4).
*Billing Document
    LREC_GTS001-VBELN   = LREC_DATA-VBELN.
*Item
    LREC_GTS001-POSNR   = LREC_DATA-POSNR.
*PO NO.
    LREC_GTS001-XBLNR   = LREC_DATA-XBLNR.

*Sales Organization
    LREC_GTS001-VKORG   = LREC_DATA-VKORG.
    IF LREC_GTS001-VKORG IS INITIAL.
      LREC_GTS001-VKORG = S_VKORG-LOW.
    ENDIF.

*Distribution Chann
    LREC_GTS001-VTWEG   = LREC_DATA-VTWEG.
    IF LREC_GTS001-VTWEG IS INITIAL.
      LREC_GTS001-VTWEG = S_VTWEG-LOW.
    ENDIF.

*Division
    LREC_GTS001-SPART   = LREC_DATA-SPART.
    IF LREC_GTS001-SPART IS INITIAL.
      LREC_GTS001-SPART = S_SPART-LOW.
    ENDIF.

*Sales office
    LREC_GTS001-VKBUR   = LREC_DATA-VKBUR.
*Vat Reference
*    IF V_COMMAND <> '&UPSTATUS'.                "Change status
    CONDENSE LREC_GTS001-VATREF.
    AT NEW VBELN.
      L_REFNUM = LREC_GTS001-VATREF.
      L_REFNUM = L_REFNUM + 1.
      CLEAR LREC_GTS001-VATREF.
      LREC_GTS001-VATREF = L_REFNUM.
    ENDAT.
*the billing which is more than limit amout,produce a new ref.no
    IF LREC_DATA-POSNR = '1-'.
      LREC_GTS001-VATREF = LREC_GTS001-VATREF + 1.
    ENDIF.

    IF V_COMMAND = 'SAVE'
     AND V_ALVCOMMAND <> '&COMB'.
      IF L_COMB IS INITIAL.
        L_COMB  = C_FLAG.
*        PERFORM GET_NOW_REF
*                  CHANGING LREC_GTS001-VATREF.
        LREC_GTS001-VATREF = V_REF.
      ENDIF.
    ENDIF.
*Combination
    IF V_ALVCOMMAND = '&COMB'
     AND L_COMB IS INITIAL.
      L_COMB  = C_FLAG.
*      PERFORM GET_NOW_REF
*                CHANGING LREC_GTS001-VATREF.
      LREC_GTS001-VATREF = V_REF.
      CONDENSE LREC_GTS001-VATREF.
*     update vatref for gts004
      REC_GTS004-VATREF = LREC_GTS001-VATREF.
      MODIFY I_GTS004 FROM REC_GTS004  TRANSPORTING VATREF
               WHERE VATREF IS INITIAL.
    ENDIF.
    CONDENSE LREC_GTS001-VATREF.

*check if the billing is splited,then update internal table
    READ TABLE I_GTS004 INTO REC_GTS004 WITH KEY FLAG = '1-'.
    IF SY-SUBRC = 0.
      REC_GTS004-VATREF = LREC_GTS001-VATREF.
      MODIFY I_GTS004 FROM REC_GTS004  TRANSPORTING VATREF
               WHERE POSNR = LREC_DATA-POSNR.
    ENDIF.
*if command is upstatus then clear refvat
    IF V_COMMAND = '&UPSTATUS'.
      CLEAR LREC_GTS001-VATREF.
    ENDIF.
*combination process
    IF V_ALVCOMMAND = '&COMB'.
      L_ITEM  =  L_ITEM + 1.
      L_CHAR = L_ITEM.
      CONDENSE L_CHAR.
      CONCATENATE L_CHAR
                  '+'
             INTO LREC_GTS001-POSNR.
      LREC_GTS001-VBELN = TEXT-C01."'Combine'.
    ENDIF.

    IF S_STATUS-LOW = '2'.
      SELECT VATREF
         INTO LREC_GTS001-VATREF
         FROM YSE_GTS001
           UP TO 1 ROWS
        WHERE BUKRS = P_BUKRS
          AND GJAHR IN S_GJAHR         "LREC_DATA-FKDAT+0(4)
          AND FKDAT IN S_FKDAT
          AND VBELN = LREC_DATA-VBELN
          AND POSNR = LREC_DATA-POSNR.
      ENDSELECT.
    ENDIF.
*Upload and Download Status
    LREC_GTS001-ZSTAUS  = LREC_DATA-STAUS.    "ÒÑ¿ªÆ±
    IF V_DOWN_OK = C_FLAG.                    "dOWNLOAD
      LREC_GTS001-ZSTAUS  = '2'.   "ÒÑ¿ªÆ±
    ENDIF.
    CONDENSE LREC_GTS001-POSNR.
*VAT TYPE
    LREC_GTS001-ZVATYP = V_VATYP.
*VAT VOICE
    LREC_GTS001-ZVATVOICE = ''.
*Material
    LREC_GTS001-MATNR   = LREC_DATA-MATNR.
*Material description
    LREC_GTS001-MAKTX   = LREC_DATA-ARKTX.
*Qty
    LREC_GTS001-FKIMG  = LREC_DATA-FKIMG.
*Unit
    LREC_GTS001-UNIT   = LREC_DATA-UNIT.
*Sale Price
    LREC_GTS001-PRICE  = LREC_DATA-PRICE.
*Sold-to party
    LREC_GTS001-KUNNR  = LREC_DATA-KUNNR.
*cusomer name
    LREC_GTS001-NAME  = LREC_DATA-NAME.
*Tel
    LREC_GTS001-TEL  = LREC_DATA-TEL.
*Billing Date
    LREC_GTS001-FKDAT  = LREC_DATA-FKDAT.
*Billing Type
    LREC_GTS001-FKART  = LREC_DATA-FKART.
*Net Value
    LREC_GTS001-NETWR  = LREC_DATA-NETWR.
*Tax Rate
    LREC_GTS001-KBETR  = LREC_DATA-KBETR.
*Tax amount
    LREC_GTS001-MWSBP   = LREC_DATA-MWSBP.
*Amout
    LREC_GTS001-KZWI1   = LREC_DATA-KZWI1.
*SUM Amout
    LREC_GTS001-SUMAMOUT   = LREC_DATA-NETSUM.
*Shipping cost
    LREC_GTS001-SHCOST   = LREC_DATA-SHCOST.
*SO
    LREC_GTS001-AUBEL   = LREC_DATA-AUBEL.
*SO STATUS
    LREC_GTS001-RFSTA   = LREC_DATA-RFSTA.
*Creat by
    LREC_GTS001-SONAM   = LREC_DATA-ERNAM.
*SO HEAD TEXT
    LREC_GTS001-TEXT    = LREC_DATA-TEXT.
*Remark
    LREC_GTS001-REMARK  = LREC_DATA-REMARK.
*SO TOTAL ITEM NUMBER
    LREC_GTS001-LINES   = LREC_DATA-LINES.
*Delivery number
    LREC_GTS001-VGBEL   = LREC_DATA-VGBEL.
*Document Currency
    LREC_GTS001-WAERK   = LREC_DATA-WAERK.
*Created by
    LREC_GTS001-ERNAM   = SY-UNAME.
*Created on
    LREC_GTS001-ERDAT   = SY-DATUM.
*Time
    LREC_GTS001-ERZET   = SY-UZEIT.
*Return date
    LREC_GTS001-ZREDATE = ''.
*Return name
    LREC_GTS001-ZRENAME = ''.
*    IF S_STATUS-LOW = '2'.             "ÒÑ¿ªÆ±
*      CLEAR LREC_GTS001-VATREF.
*    ELSE.

    APPEND LREC_GTS001 TO LI_GTS001.
*    ENDIF.
    IF S_STATUS-LOW = '1'.             "´ý´¦Àí
*      CLEAR LREC_GTS001-VATREF.
      APPEND LREC_GTS001 TO LI_GTS001_DAI.
    ENDIF.
  ENDLOOP.
*Lock table
  DO 1 TIMES.
    CALL FUNCTION 'ENQUEUE_EYSE_GTS001'
      EXPORTING
        MODE_YSE_GTS001 = C_E
      EXCEPTIONS
        FOREIGN_LOCK    = 1
        SYSTEM_FAILURE  = 2
        OTHERS          = 3.
    IF SY-SUBRC <> 0.
*      WAIT UP TO 1 SECONDS.
      FLG_STOP = C_FLAG.
*    MESSAGE ID SY-MSGID TYPE C_S NUMBER SY-MSGNO
*          WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      MESSAGE E000 WITH TEXT-W33.
    ENDIF.
  ENDDO.
**LOCK failed
*  IF SY-SUBRC <> 0.
*    FLG_STOP = C_FLAG.
**    MESSAGE ID SY-MSGID TYPE C_S NUMBER SY-MSGNO
**          WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*    MESSAGE S000 WITH TEXT-W33.
*  ENDIF.
  CHECK FLG_STOP IS INITIAL.
  IF S_STATUS-LOW = '1'  "´ý´¦Àí
   AND V_COMMAND = '&UPSTATUS'.
*    DELETE YSE_GTS001 FROM TABLE LI_GTS001_DAI.
    MODIFY YSE_GTS001 FROM TABLE LI_GTS001.
  ELSEIF S_STATUS-LOW = '2'
   AND V_COMMAND = '&UPSTATUS'.
    DELETE YSE_GTS001 FROM TABLE LI_GTS001.
    LOOP AT LI_GTS001 INTO LREC_GTS001.
      CLEAR LREC_GTS001-VATREF.
      MODIFY LI_GTS001 FROM LREC_GTS001.
    ENDLOOP.
    MODIFY YSE_GTS001 FROM TABLE LI_GTS001.
  ELSEIF S_STATUS-LOW = '4'
   AND V_COMMAND = '&UPSTATUS'.
    MODIFY YSE_GTS001 FROM TABLE LI_GTS001.
  ELSEIF S_STATUS IS INITIAL
   AND V_COMMAND = '&UPSTATUS'.
    MODIFY YSE_GTS001 FROM TABLE LI_GTS001.
  ENDIF.
  IF S_STATUS-LOW = '1'
   AND V_COMMAND = 'SAVE'.
    CLEAR LREC_GTS001.
    IF V_ALVCOMMAND = '&COMB'.
      READ TABLE I_SALE_ORG INTO REC_SALE_ORG INDEX 1.
      LREC_GTS001-VKORG = REC_SALE_ORG-VKORG.
      LREC_GTS001-VTWEG = REC_SALE_ORG-VTWEG.
      LREC_GTS001-SPART = REC_SALE_ORG-SPART.
      MODIFY  LI_GTS001 FROM LREC_GTS001
                TRANSPORTING  VKORG VTWEG SPART
                WHERE VATREF IS NOT INITIAL.
      MODIFY YSE_GTS001 FROM TABLE LI_GTS001.
    ELSE.
      MODIFY YSE_GTS001 FROM TABLE LI_GTS001.
      LOOP AT LI_GTS001 INTO LREC_GTS001.
        CLEAR LREC_GTS001-VATREF.
        MODIFY LI_GTS001 FROM LREC_GTS001.
      ENDLOOP.
      DELETE YSE_GTS001 FROM TABLE LI_GTS001.
    ENDIF.

  ELSEIF V_COMMAND = 'SAVE'.
    MODIFY YSE_GTS001 FROM TABLE LI_GTS001.
  ENDIF.

  IF SY-SUBRC = 0.
*    COMMIT WORK.
  ELSE.
    V_UPDATE = C_FLAG.
*    ROLLBACK WORK.
  ENDIF.
*unlock table
  CALL FUNCTION 'DEQUEUE_EYSE_GTS001'
    EXPORTING
      MODE_YSE_GTS001 = C_E.

*delete origianl data
  IF S_STATUS-LOW = '1'
   AND V_ALVCOMMAND = '&COMB'.
*  Lock table
    DO 1 TIMES.
      CALL FUNCTION 'ENQUEUE_EYSE_GTS001'
        EXPORTING
          MODE_YSE_GTS001 = C_E
        EXCEPTIONS
          FOREIGN_LOCK    = 1
          SYSTEM_FAILURE  = 2
          OTHERS          = 3.
      IF SY-SUBRC <> 0.
*        WAIT UP TO 1 SECONDS.
        FLG_STOP = C_FLAG.
*        MESSAGE ID SY-MSGID TYPE C_S NUMBER SY-MSGNO
*              WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ROLLBACK WORK.
        MESSAGE E000 WITH TEXT-W33.
      ENDIF.
    ENDDO.
**  LOCK failed
*    IF SY-SUBRC <> 0.
*      FLG_STOP = C_FLAG.
**      MESSAGE ID SY-MSGID TYPE C_S NUMBER SY-MSGNO
**            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*      MESSAGE S000 WITH TEXT-W33.
*    ENDIF.
    CHECK FLG_STOP IS INITIAL.
    DELETE YSE_GTS001 FROM TABLE I_GTS001_KEY.
    IF SY-SUBRC = 0.
*    COMMIT WORK.
    ELSE.
      V_UPDATE = C_FLAG.
*    ROLLBACK WORK.
    ENDIF.
*  unlock table
    CALL FUNCTION 'DEQUEUE_EYSE_GTS001'
      EXPORTING
        MODE_YSE_GTS001 = C_E.
  ENDIF.

*update table gts004
*  IF I_GTS004 IS NOT INITIAL.
    PERFORM COLLECT_GTS004
              USING I_GTS004.
*  ENDIF.

ENDFORM.                    " INSERT_TABLE
*&---------------------------------------------------------------------*
*& Form  GTS001_DATA
*&---------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
FORM GTS001_DATA .

  DATA:LI_GTS001   TYPE STANDARD TABLE OF YSE_GTS001,
       LREC_VBAK   TYPE TY_VBAK,
       L_FLAG      TYPE C,
       L_GBSTK     TYPE VBUK-GBSTK,
       LREC_GTS001 TYPE YSE_GTS001,
       LI_GTS004 TYPE STANDARD TABLE OF YSE_GTS004,
       LREC_GTS004 TYPE YSE_GTS004.


*Accounting number
  IF S_BELNR IS NOT INITIAL.
    SELECT BUKRS
           BELNR
           GJAHR
           AWKEY
      INTO TABLE I_BKPF
      FROM BKPF
     WHERE BUKRS = P_BUKRS
       AND BELNR IN S_BELNR
       AND BUDAT IN S_FKDAT
       AND AWKEY IN S_RVBELN
       AND GJAHR IN S_GJAHR.
    IF SY-SUBRC <> 0.
      FLG_STOP = C_FLAG.
    ENDIF.
  ENDIF.


  CHECK FLG_STOP IS INITIAL.
*retrive data from table yse_gts001
  IF I_BKPF IS NOT INITIAL.
    LOOP AT I_BKPF INTO REC_BKPF.
      SELECT *
        APPENDING TABLE LI_GTS001
        FROM YSE_GTS001
*             FOR ALL ENTRIES IN I_BKPF
       WHERE BUKRS = P_BUKRS                      "Company code
*         AND ( VBELN  IN S_RVBELN                   "Billing Document
*              OR VBELN = 'Combine' )
*         AND VBELN = REC_BKPF-AWKEY
         AND ( VBELN = REC_BKPF-AWKEY
               OR VBELN = 'Combine' )
         AND BUKRS = P_BUKRS
         AND GJAHR IN S_GJAHR
         AND ZSTAUS IN S_STATUS                   "status of billing document for vat
         AND KUNNR  IN S_KUNNR                    "Sold-to party
         AND WAERK  IN S_WAERK                    "Currency
         AND FKART  IN S_FKART                    "BILLING TYPE
         AND FKDAT  IN S_FKDAT                    "Billing Date
         AND RFSTA  IN S_RFSTK                    "SO status
         AND AUBEL  IN S_VBELN                    "SO DOCUMENT
         AND ERNAM  IN S_ERNAM                    "Creat by
         AND XBLNR  IN S_XBLNR                    "Contract No.
         AND VKORG  IN S_VKORG                    "Sales Organization
         AND VTWEG  IN S_VTWEG                    "Distribution Chann
         AND SPART  IN S_SPART                    "Division
         AND VKBUR  IN S_VKBUR.                   "Sales office

    ENDLOOP.
  ELSE.
    SELECT *
      INTO TABLE LI_GTS001
      FROM YSE_GTS001
*           FOR ALL ENTRIES IN I_BKPF
     WHERE BUKRS = P_BUKRS                      "Company code
       AND ( VBELN  IN S_RVBELN                   "Billing Document
            OR VBELN = 'Combine' )
*       AND VBELN = REC_BKPF-AWKEY
       AND BUKRS = P_BUKRS
       AND GJAHR IN S_GJAHR
       AND ZSTAUS IN S_STATUS                   "status of billing document for vat
       AND KUNNR  IN S_KUNNR                    "Sold-to party
       AND WAERK  IN S_WAERK                    "Currency
       AND FKART  IN S_FKART                    "BILLING TYPE
       AND FKDAT  IN S_FKDAT                    "Billing Date
       AND RFSTA  IN S_RFSTK                    "SO status
       AND AUBEL  IN S_VBELN                    "SO DOCUMENT
       AND XBLNR  IN S_XBLNR                    "Contract No.
       AND ERNAM  IN S_ERNAM                    "Creat by
       AND VKORG  IN S_VKORG                    "Sales Organization
       AND VTWEG  IN S_VTWEG                    "Distribution Chann
       AND SPART  IN S_SPART                    "Division
       AND VKBUR  IN S_VKBUR.                   "Sales office

  ENDIF.
*fetch data from issued billing
  IF LI_GTS001 IS NOT INITIAL.
    SELECT *
    INTO TABLE LI_GTS004
    FROM YSE_GTS004
         FOR ALL ENTRIES IN LI_GTS001
   WHERE VBELN IN S_RVBELN
     AND VATREF = LI_GTS001-VATREF
     AND BUKRS = P_BUKRS
     AND GJAHR IN S_GJAHR
     AND FKDAT IN S_FKDAT.
  ENDIF.
  DATA:
    L_AWKEY TYPE BKPF-AWKEY.
*Accounting number
  IF S_BELNR IS INITIAL.
*download data
    IF LI_GTS004 IS NOT INITIAL.
      LOOP AT LI_GTS004 INTO LREC_GTS004.
        L_AWKEY = LREC_GTS004-VBELN.
        SELECT BUKRS
               BELNR
               GJAHR
               AWKEY
          APPENDING TABLE I_BKPF
          FROM BKPF
         WHERE BUKRS = P_BUKRS
           AND BELNR IN S_BELNR
           AND BUDAT IN S_FKDAT
           AND AWKEY = L_AWKEY
           AND GJAHR IN S_GJAHR.
      ENDLOOP.
* change status data
    ELSE.
      LOOP AT LI_GTS001 INTO LREC_GTS001.
        L_AWKEY = LREC_GTS001-VBELN.
        SELECT BUKRS
               BELNR
               GJAHR
               AWKEY
          APPENDING TABLE I_BKPF
          FROM BKPF
         WHERE BUKRS = P_BUKRS
           AND BELNR IN S_BELNR
           AND BUDAT IN S_FKDAT
           AND AWKEY = L_AWKEY
           AND GJAHR IN S_GJAHR.
      ENDLOOP.

    ENDIF.
  ENDIF.
*delete combination billings which aren't in selection condition
  LOOP AT LI_GTS001 INTO LREC_GTS001
            WHERE VBELN = 'Combine'.
    READ TABLE LI_GTS004 INTO LREC_GTS004
           WITH KEY VATREF = LREC_GTS001-VATREF.
    IF SY-SUBRC <> 0.
      DELETE LI_GTS001.
    ENDIF.
  ENDLOOP.
*
*  SELECT VBELN
*    INTO TABLE I_EXVBELN
*    FROM YSE_GTS001.
*  DATA:L_VBELN TYPE VBELN,
*       L_POINT TYPE I,
*       L_RANGE LIKE LINE OF R_VBELN,
*       L_DIV   TYPE I.
**fetch each billing no in the field vbeln
*  LOOP AT I_EXVBELN INTO REC_EXVBELN.
*    CLEAR L_DIV.
*    CLEAR L_VBELN.
*    L_DIV  = STRLEN( REC_EXVBELN-VBELN ) / 10.
*    L_POINT = 1.
*    IF L_DIV > 1.
*      L_DIV = L_DIV - 1.
*      DO L_DIV TIMES.
*        L_POINT = L_POINT * 10 + 1.
*        L_VBELN = REC_EXVBELN-VBELN+L_POINT(10).
*        L_RANGE-SIGN   = 'I'.
*        L_RANGE-OPTION = 'EQ'.
*        L_RANGE-LOW    = L_VBELN.
*        COLLECT L_RANGE INTO R_VBELN.
*        L_POINT = L_POINT + 1.
*      ENDDO.
*    ELSE.
*      L_RANGE-SIGN   = 'I'.
*      L_RANGE-OPTION = 'EQ'.
*      L_RANGE-LOW    = REC_EXVBELN-VBELN.
*      COLLECT L_RANGE INTO R_VBELN.
*    ENDIF.
*  ENDLOOP.
*customer
  IF LI_GTS001 IS NOT INITIAL.
    SELECT KUNNR
           ADRNR
      INTO TABLE I_KUNNR
      FROM VBPA
           FOR ALL ENTRIES IN LI_GTS001
     WHERE VBELN = LI_GTS001-VBELN
       AND PARVW ='RE'.
  ENDIF.

  LOOP AT I_KUNNR INTO REC_KUNNR.
    SELECT NAME1                                            "Name1
      INTO REC_KUNNR-NAME1
      FROM ADRC
           UP TO 1 ROWS
     WHERE ADDRNUMBER = REC_KUNNR-ADRNR       "Bill-to party number
       AND NATION = 'C'.
    ENDSELECT.
    MODIFY I_KUNNR FROM REC_KUNNR TRANSPORTING NAME1.
  ENDLOOP.

  LOOP AT LI_GTS001 INTO LREC_GTS001.
    CLEAR L_FLAG.
*Sales Organization,Distribution Channel,Division,Sales office,SO Type
    SELECT SINGLE VBELN                     "SO Number
         AUART                              "SO Type
         VKORG                              "Sales Organization
         VTWEG                              "Distribution Channel
         SPART                              "Division
         VKBUR                              "Sales office
         ERDAT                              "SO creation Date
         ERNAM                              "Created by
    INTO LREC_VBAK
    FROM VBAK
   WHERE VBELN = LREC_GTS001-AUBEL.         "SO Document

    IF LREC_VBAK-AUART NOT IN S_AUART         "SO Type
     OR LREC_VBAK-VKORG NOT IN S_VKORG        "Sales Organization
     OR LREC_VBAK-VTWEG NOT IN S_AUART        "Distribution Channel
     OR LREC_VBAK-SPART NOT IN S_AUART        "Division
     OR LREC_VBAK-VKBUR NOT IN S_AUART        "Sales office
     OR LREC_VBAK-ERDAT NOT IN S_AUART        "SO creation Date
     OR LREC_VBAK-ERNAM NOT IN S_AUART        "Created by
     OR LREC_GTS001-FKART NOT IN S_FKART.     "Billing Type
      DELETE LI_GTS001.
    ENDIF.
*SO status
    SELECT SINGLE GBSTK
      INTO L_GBSTK
      FROM VBUK
     WHERE VBELN = LREC_GTS001-AUBEL.         "so
    IF L_GBSTK NOT IN S_RFSTK.                    "SO status
      DELETE LI_GTS001.
    ENDIF.
*append data to layout table I_DATA
*Status
    CASE LREC_GTS001-ZSTAUS.
      WHEN '1'.
        REC_DATA-STAUS = TEXT-S06.
      WHEN '2'.
        REC_DATA-STAUS = TEXT-S03.
      WHEN '3'.
        REC_DATA-STAUS = TEXT-S04.
      WHEN '4'.
        REC_DATA-STAUS = TEXT-S05.
    ENDCASE.
*Billing Type
    REC_DATA-FKART = LREC_GTS001-FKART.
*Billing Document
    REC_DATA-VBELN = LREC_GTS001-VBELN.
*Line item
    REC_DATA-POSNR = LREC_GTS001-POSNR.
*VAT reference
    REC_DATA-VATREF = LREC_GTS001-VATREF.
*Order status
    REC_DATA-RFSTA = LREC_GTS001-RFSTA.
*Order number
    REC_DATA-AUBEL = LREC_VBAK-VBELN.
*Total no. of li.it. in SO
    REC_DATA-LINES = LREC_GTS001-LINES.
*Delivery order
    REC_DATA-VGBEL = LREC_GTS001-VGBEL.
*TEXT
    REC_DATA-TEXT = LREC_GTS001-TEXT.
*VAT invoice
    REC_DATA-VAT = LREC_GTS001-ZVATVOICE.
*Billing Date
    REC_DATA-FKDAT = LREC_GTS001-FKDAT.
*Customer number
    REC_DATA-KUNNR = LREC_GTS001-KUNNR.
*TEL
    REC_DATA-TEL  = LREC_GTS001-TEL.
*Customer Name
    READ TABLE I_KUNNR INTO REC_KUNNR
           WITH KEY KUNNR = LREC_GTS001-KUNNR.
    IF SY-SUBRC = 0.
      REC_DATA-NAME = REC_KUNNR-NAME1.
      REC_DATA-TEL = REC_KUNNR-TEL_NUMBER.
    ELSE.
      CLEAR REC_DATA-NAME.
      CLEAR REC_DATA-TEL.
    ENDIF.
*    REC_DATA-NAME = LREC_GTS001-NAME.
*

*Material
    REC_DATA-MATNR = LREC_GTS001-MATNR.
*Material Desciption
    CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
      EXPORTING
        INPUT        = LREC_GTS001-MATNR
      IMPORTING
        OUTPUT       = LREC_GTS001-MATNR
      EXCEPTIONS
        LENGTH_ERROR = 1
        OTHERS       = 2.
    SELECT SINGLE MAKTX
      INTO REC_DATA-ARKTX
      FROM MAKT
     WHERE MATNR = LREC_GTS001-MATNR          "Material number
       AND SPRAS = C_1.                       "ZH

*materail group
    SELECT SINGLE
           MATKL
      INTO REC_DATA-MATKL
      FROM MARA
     WHERE MATNR = LREC_GTS001-MATNR.
******Begin of MOD-005 MOD******
*     IF LREC_VBAK-VKORG = 'CN02'
     IF ( LREC_VBAK-VKORG = 'CN02'
     OR LREC_VBAK-VKORG = 'CN07' )
******End of MOD-005 MOD******
      AND REC_DATA-MATKL = '02'.
        REPLACE 'AM-' IN REC_DATA-ARKTX WITH SPACE.
      ENDIF.
*    REC_DATA-ARKTX = LREC_GTS001-MAKTX.
*Unit
    REC_DATA-UNIT = LREC_GTS001-UNIT.
*Quantity
    REC_DATA-FKIMG = LREC_GTS001-FKIMG.
*shiping cost
    REC_DATA-SHCOST = LREC_GTS001-SHCOST.
*Amount w/o Tax
      REC_DATA-NETWR = LREC_GTS001-NETWR.
*Amount w Tax
    REC_DATA-KZWI1 = LREC_GTS001-KZWI1.
*sum amout
    REC_DATA-NETSUM = LREC_GTS001-SUMAMOUT.
    IF LREC_GTS001-FKIMG IS NOT INITIAL.
*Unit Price w/O Tax
      REC_DATA-NETPRICE = LREC_GTS001-NETWR
                     / LREC_GTS001-FKIMG.
    ENDIF.
*Tax Amount
    REC_DATA-MWSBP = LREC_GTS001-MWSBP.
*Currency
    REC_DATA-WAERK = LREC_GTS001-WAERK.
*Tax Rate
    REC_DATA-KBETR = LREC_GTS001-KBETR.
*Unit Price w. Tax
    REC_DATA-PRICE = LREC_GTS001-PRICE.
**Cancelled billing document numberREC_DATA-MATKL
*    REC_DATA-SFAKN  = LREC_GTS001-SFAKN.
    APPEND REC_DATA TO I_DATA.

*fetch sum amout
    IF S_STATUS-LOW = '1'
     OR S_STATUS-LOW = '4'.
      REC_ADJUST_SUMAMOUT-VBELN = REC_DATA-VBELN.
      REC_ADJUST_SUMAMOUT-NETSUM = REC_DATA-KZWI1.
      COLLECT REC_ADJUST_SUMAMOUT INTO I_ADJUST_SUMAMOUT.
    ENDIF.
  ENDLOOP.
*distrbibute sum amout
  IF S_STATUS-LOW = '1'
   OR S_STATUS-LOW = '4'.
    LOOP AT I_DATA INTO REC_DATA.
      READ TABLE I_ADJUST_SUMAMOUT INTO REC_ADJUST_SUMAMOUT
                   WITH KEY VBELN = REC_DATA-VBELN.
      IF SY-SUBRC = 0.
        REC_DATA-NETSUM = REC_ADJUST_SUMAMOUT-NETSUM.
      ENDIF.
      MODIFY I_DATA FROM REC_DATA
                           TRANSPORTING NETSUM.
    ENDLOOP.
  ENDIF.

  IF I_DATA IS INITIAL.
    FLG_STOP = C_FLAG.
* No Data
    MESSAGE S000 WITH TEXT-S01.
  ENDIF.
*2011-08-24
  SORT I_DATA BY VATREF VBELN POSNR.
*2011-08-24
  DELETE ADJACENT DUPLICATES FROM I_DATA
           COMPARING VATREF
                     VBELN
                     POSNR.

  SORT I_DATA BY VBELN POSNR.



ENDFORM.                    " GTS001_DATA
*&---------------------------------------------------------------------*
*& Form  KUNNR_INFO
*&---------------------------------------------------------------------*
*  This form is to fetch the output head item
*----------------------------------------------------------------------*
FORM KUNNR_INFO.
*¹º·½Ë°ºÅ
*¹º·½µØÖ·µç»°	Street/House number-Mobile Phone
*¹º·½ÒøÐÐÕÊºÅ
  REFRESH I_TAX_ADDBNK[].
  IF I_SUMDATA IS NOT INITIAL.
    SELECT KUNNR
*~~~Start~~~ ChenHua 20111121 [Westernacher]
           ADRNR
*~~~End~~~
           STCD1
*~~~Start~~~ ChenHua 20111121 [Westernacher]
*           STRAS
*~~~End~~~
      INTO TABLE I_TAX_ADDBNK
      FROM KNA1
           FOR ALL ENTRIES IN I_SUMDATA
      WHERE KUNNR = I_SUMDATA-KUNNR.

*~~~Start~~~ ChenHua 20111121 [Westernacher]
    SELECT ADDRNUMBER
           NATION
           STREET
           STR_SUPPL3
      FROM ADRC
      INTO TABLE T_ADRC
       FOR ALL ENTRIES IN I_TAX_ADDBNK
     WHERE ADDRNUMBER = I_TAX_ADDBNK-ADRNR.
*~~~End~~~

    LOOP AT I_TAX_ADDBNK INTO REC_TAX_ADDBNK.
      SELECT SINGLE KOINH
       BANKN
*~~~Start~~~ ChenHua 20111121 [Westernacher]
*        INTO (REC_TAX_ADDBNK-KOINH,REC_TAX_ADDBNK-BANKN)
       BKREF
        INTO (REC_TAX_ADDBNK-KOINH,REC_TAX_ADDBNK-BANKN,REC_TAX_ADDBNK-BKREF)
*~~~End~~~
        FROM KNBK
       WHERE KUNNR = REC_TAX_ADDBNK-KUNNR.
*~~~Start~~~ ChenHua 20111121 [Westernacher]
      READ TABLE T_ADRC INTO D_ADRC WITH KEY ADDRNUMBER = REC_TAX_ADDBNK-ADRNR
                                                 NATION = 'C'.
      IF SY-SUBRC = 0.
        CONCATENATE D_ADRC-STREET D_ADRC-STR_SUPPL3 INTO REC_TAX_ADDBNK-STRAS.
        CLEAR D_ADRC.
      ENDIF.
      IF REC_TAX_ADDBNK-STRAS = SPACE.
        READ TABLE T_ADRC INTO D_ADRC WITH KEY ADDRNUMBER = REC_TAX_ADDBNK-ADRNR
                                                   NATION = 'I'.
        IF SY-SUBRC = 0.
          CONCATENATE D_ADRC-STREET D_ADRC-STR_SUPPL3 INTO REC_TAX_ADDBNK-STRAS.
          CLEAR D_ADRC.
        ENDIF.
      ENDIF.
      IF REC_TAX_ADDBNK-STRAS = SPACE.
        READ TABLE T_ADRC INTO D_ADRC WITH KEY ADDRNUMBER = REC_TAX_ADDBNK-ADRNR
                                                   NATION = SPACE.
        IF SY-SUBRC = 0.
          CONCATENATE D_ADRC-STREET D_ADRC-STR_SUPPL3 INTO REC_TAX_ADDBNK-STRAS.
          CLEAR D_ADRC.
        ENDIF.
      ENDIF.
*      MODIFY I_TAX_ADDBNK FROM REC_TAX_ADDBNK TRANSPORTING KOINH BANKN.
      MODIFY I_TAX_ADDBNK FROM REC_TAX_ADDBNK TRANSPORTING STRAS KOINH BANKN BKREF.
      CLEAR REC_TAX_ADDBNK.
*~~~End~~~
    ENDLOOP.
  ENDIF.
  IF V_ALVCOMMAND = '&VAT_SPEC'
    OR V_COMMAND ='SPEC'.
    LOOP AT I_TAX_ADDBNK INTO REC_TAX_ADDBNK
              WHERE KUNNR IS INITIAL
                 OR STCD1 IS INITIAL
                 OR STRAS IS INITIAL
                 OR KOINH IS INITIAL
                 OR BANKN IS INITIAL.
      FLG_STOP = C_FLAG.
      MESSAGE S009 WITH REC_TAX_ADDBNK-KUNNR.
    ENDLOOP.
  ENDIF.

ENDFORM.                    " KUNNR_INFO

*&---------------------------------------------------------------------*
*& Form  GET_NOW_REF
*&---------------------------------------------------------------------*
*  This form is to fetch the output head item
*----------------------------------------------------------------------*
FORM GET_NOW_REF
       CHANGING C_REFNUM TYPE YSE_GTS001-VATREF.

  DATA:
    LI_GTS001   TYPE STANDARD TABLE OF YSE_GTS001,
    L_NUM       TYPE I,
    LREC_GTS001 TYPE YSE_GTS001.

  SELECT *
    INTO TABLE LI_GTS001
    FROM YSE_GTS001
   WHERE BUKRS = P_BUKRS
     AND GJAHR IN S_GJAHR.
  SORT LI_GTS001 BY VATREF DESCENDING.
  READ TABLE LI_GTS001 INTO LREC_GTS001 INDEX 1.
  IF LI_GTS001 IS NOT INITIAL
   AND LREC_GTS001-VATREF+0(4) = SY-DATUM+2(4)."Crossing month
    L_NUM = LREC_GTS001-VATREF.
    L_NUM = L_NUM + 1.
    WRITE L_NUM TO C_REFNUM.
    CONDENSE C_REFNUM.
    REPLACE ALL OCCURRENCES OF ',' IN C_REFNUM WITH SPACE.
  ELSE.
    CONCATENATE SY-DATUM+2(4)               "Year&day
                '00001'
           INTO C_REFNUM.
  ENDIF.

ENDFORM.                    " GET_NOW_REF
*&---------------------------------------------------------------------*
*& Form  AMOUT_SPLIT
*&---------------------------------------------------------------------*
*  This form is to split one billing which expire the limit amout
*----------------------------------------------------------------------*
FORM AMOUT_SPLIT
       USING    U_TABLE  TYPE ANY TABLE
                U_LIMIT  TYPE KZWI1
       CHANGING C_RESULT TYPE ANY TABLE.

*split amout just like 1- ,2- ,3-(ref01)
*1- ,2- ,3-(ref02)
  DATA:
    LI_TABLE    TYPE STANDARD TABLE OF TY_DATA,
    LREC_TABLE  TYPE TY_DATA,
    LI_RESULT   TYPE STANDARD TABLE OF TY_DATA,
    L_SUM       TYPE KZWI1,
    L_ITEM      TYPE I,
    L_DIV       TYPE I,
    L_TEMP      TYPE KZWI1,
    L_TEMP1(16)     TYPE P DECIMALS 6,
    L_TEMP2     TYPE KZWI1,
    LREC_RESULT TYPE TY_DATA.

  LI_TABLE[] = U_TABLE[].
  LOOP AT LI_TABLE INTO LREC_TABLE.
*              WHERE NETSUM < U_LIMIT. "sum w tax in one billing
    IF LREC_TABLE-NETSUM < U_LIMIT.
      APPEND LREC_TABLE TO LI_RESULT.
    ELSEIF LREC_TABLE-NETSUM > U_LIMIT.
      AT NEW VBELN.
        CLEAR L_SUM.
        CLEAR L_ITEM.
      ENDAT.
      LREC_TABLE-POSNR = L_ITEM * -1.
*  Amount w Tax more than limit amout
      IF LREC_TABLE-KZWI1 > U_LIMIT.
*          CLEAR L_ITEM.
        CLEAR L_TEMP.
        CLEAR L_TEMP1.
        CLEAR L_TEMP2.
        L_TEMP  = LREC_TABLE-KZWI1.
        L_TEMP1 = LREC_TABLE-FKIMG.
        L_TEMP2 = LREC_TABLE-MWSBP.
        L_DIV = LREC_TABLE-KZWI1
              DIV U_LIMIT.
        DO L_DIV TIMES.
          LREC_TABLE-POSNR = '1-'.
*  Quantity
          LREC_TABLE-FKIMG = L_TEMP1
                           * U_LIMIT / L_TEMP.
*  Tax Amount
          LREC_TABLE-MWSBP = L_TEMP2
                           * U_LIMIT / L_TEMP.
*  Amount w Tax
          LREC_TABLE-KZWI1 = U_LIMIT.
          CONDENSE LREC_TABLE-POSNR.
          APPEND LREC_TABLE TO LI_RESULT.
        ENDDO.
        LREC_TABLE-KZWI1 = L_TEMP  - U_LIMIT * L_DIV.
        LREC_TABLE-FKIMG = L_TEMP1 - LREC_TABLE-FKIMG * L_DIV.
        LREC_TABLE-MWSBP = L_TEMP2 - LREC_TABLE-MWSBP * L_DIV.
        IF LREC_TABLE-KZWI1 > 0.
          LREC_TABLE-POSNR =  '1-'.
          CONDENSE LREC_TABLE-POSNR.
          APPEND LREC_TABLE TO LI_RESULT.

**  collect issued billing no. and item
*            REC_GTS004-VBELN = LREC_TABLE-VBELN.
*            REC_GTS004-POSNR = LREC_TABLE-POSNR.
*            REC_GTS004-FLAG  = '1-'.
*            APPEND REC_GTS004 TO I_GTS004.
        ENDIF.
*  Amount w Tax less than limit amout
      ELSEIF LREC_TABLE-KZWI1 <= U_LIMIT.
        L_SUM = L_SUM + LREC_TABLE-KZWI1.
        IF L_SUM <= U_LIMIT.
          L_ITEM = L_ITEM + 1.
          LREC_TABLE-POSNR = L_ITEM * -1.
          CONDENSE LREC_TABLE-POSNR.
          APPEND LREC_TABLE TO LI_RESULT.

**  collect issued billing no. and item
*            REC_GTS004-VBELN = LREC_TABLE-VBELN.
*            REC_GTS004-POSNR = LREC_TABLE-POSNR.
*            REC_GTS004-FLAG  = '1-'.
*            APPEND REC_GTS004 TO I_GTS004.
        ELSEIF L_SUM > U_LIMIT.
          CLEAR L_SUM.
          CLEAR L_ITEM.
          L_ITEM = L_ITEM + 1.
          LREC_TABLE-POSNR = L_ITEM * -1.
          CONDENSE LREC_TABLE-POSNR.
          APPEND LREC_TABLE TO LI_RESULT.

**  collect issued billing no. and item
*            REC_GTS004-VBELN = LREC_TABLE-VBELN.
*            REC_GTS004-POSNR = LREC_TABLE-POSNR.
*            REC_GTS004-FLAG  = '1-'.
*            APPEND REC_GTS004 TO I_GTS004.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.
  C_RESULT = LI_RESULT.

  IF V_ALVCOMMAND = '&VAT_SPEC'
   OR V_ALVCOMMAND = '&VAT_NORM'.
    CLEAR REC_GTS004.
    REC_GTS004-FLAG = '1-'.
    MODIFY I_GTS004 FROM REC_GTS004 TRANSPORTING FLAG
             WHERE VBELN IS NOT INITIAL.
  ENDIF.

  IF V_ALVCOMMAND = 'NORM'
   OR V_ALVCOMMAND = 'SPEC'.
    CLEAR REC_GTS004.
    REC_GTS004-FLAG = '1+-'.
    MODIFY I_GTS004 FROM REC_GTS004 TRANSPORTING FLAG
             WHERE VBELN IS NOT INITIAL.
  ENDIF.

ENDFORM.                    " AMOUT_SPLIT
*&---------------------------------------------------------------------*
*& Form  COLLECT_GTS004
*&---------------------------------------------------------------------*
*  This form is to collect the data into DB GTS004
*----------------------------------------------------------------------*
FORM COLLECT_GTS004
       USING U_TBALE TYPE ANY TABLE.

  DATA:LI_TABLE   TYPE STANDARD TABLE OF YSE_GTS004,
       LREC_TABLE TYPE YSE_GTS004.

  LI_TABLE[] = U_TBALE[].
  LOOP AT LI_TABLE INTO LREC_TABLE.
    LREC_TABLE-BUKRS = P_BUKRS.
    IF S_GJAHR-HIGH IS NOT INITIAL.
      LREC_TABLE-GJAHR = LREC_TABLE-FKDAT+0(4).
    ELSE.
      LREC_TABLE-GJAHR = S_GJAHR-LOW.
    ENDIF.
    MODIFY LI_TABLE FROM LREC_TABLE TRANSPORTING BUKRS GJAHR.
  ENDLOOP.

  DO 1 TIMES.
    CALL FUNCTION 'ENQUEUE_EYSE_GTS004'
      EXPORTING
        MODE_YSE_GTS004 = C_E
      EXCEPTIONS
        FOREIGN_LOCK    = 1
        SYSTEM_FAILURE  = 2
        OTHERS          = 3.
    IF SY-SUBRC <> 0.
*      WAIT UP TO 1 SECONDS.
      ROLLBACK WORK.
      FLG_STOP = C_FLAG.
*      MESSAGE ID SY-MSGID TYPE C_S NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      MESSAGE E000 WITH TEXT-W33.
    ENDIF.
  ENDDO.
*LOCK failed
*  IF SY-SUBRC <> 0.
*    FLG_STOP = C_FLAG.
**    MESSAGE ID SY-MSGID TYPE C_S NUMBER SY-MSGNO
**          WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*    MESSAGE S000 WITH TEXT-W33.
*  ENDIF.
  CHECK FLG_STOP IS INITIAL.
  MODIFY YSE_GTS004 FROM TABLE LI_TABLE.
  IF SY-SUBRC = 0.
*    COMMIT WORK.
  ELSE.
    V_UPDATE = C_FLAG.
*    ROLLBACK WORK.
  ENDIF.
*unlock table
  CALL FUNCTION 'DEQUEUE_EYSE_GTS004'
    EXPORTING
      MODE_YSE_GTS004 = C_E.
  IF V_UPDATE IS INITIAL.
    COMMIT WORK.
  ELSE.
    ROLLBACK WORK.
    MESSAGE E011.
  ENDIF.

ENDFORM.                    " COLLECT_GTS004
*&---------------------------------------------------------------------*
*&      Form  FORROUND_KZWI1
*&---------------------------------------------------------------------*
*       fetch kwz1 value for round
*----------------------------------------------------------------------*
FORM FORROUND_KZWI1 .

  DESCRIBE TABLE I_DATA LINES ABGR_OBJ_TO_LOOP.
  LOOP AT I_DATA INTO REC_DATA.
*2011-09-27
*if original value is initial,then assign field netsum to field original
    IF REC_DATA-ORIGIN <> REC_DATA-NETSUM.
      REC_DATA-ORIGIN = REC_DATA-NETSUM.
      MODIFY I_DATA FROM REC_DATA TRANSPORTING ORIGIN.
    ENDIF.
* PO NO. is initial
    IF REC_DATA-XBLNR IS INITIAL.
      SELECT SINGLE BSTKD
        INTO REC_DATA-XBLNR
        FROM VBKD
       WHERE VBELN = REC_DATA-AUBEL.
      MODIFY I_DATA FROM REC_DATA TRANSPORTING XBLNR.
    ENDIF.
***************BEGIN OF MOD-005 MOD
*    IF S_VKORG-LOW = 'CN02'
    IF ( S_VKORG-LOW = 'CN02'  OR  S_VKORG-LOW = 'CN07' )
***************END  OF MOD-005   MOD
     AND REC_DATA-REMARK IS INITIAL.
      CONCATENATE REC_DATA-AUBEL
                  ';'
                  REC_DATA-XBLNR
             INTO REC_DATA-REMARK.
      MODIFY I_DATA FROM REC_DATA TRANSPORTING REMARK.
    ENDIF.
*2011-09-27
    PERFORM process_ind1.
    REC_ROUND-VBELN = REC_DATA-VBELN.
    REC_ROUND-POSNR = REC_DATA-POSNR.
    REC_ROUND-KZWI1 = REC_DATA-KZWI1.
    APPEND REC_ROUND TO I_ROUND.
*Accounting number
    READ TABLE I_BKPF INTO REC_BKPF
      WITH KEY AWKEY = REC_DATA-VBELN.
    IF SY-SUBRC = 0.
      REC_DATA-BELNR = REC_BKPF-BELNR.
      MODIFY I_DATA FROM REC_DATA TRANSPORTING BELNR.
    ENDIF.
    IF REC_DATA-VBELN = 'Combine'.
      REC_DATA-BELNR = 'Combine'.
      MODIFY I_DATA FROM REC_DATA TRANSPORTING BELNR.
    ENDIF.
  ENDLOOP.
  DELETE I_DATA WHERE BELNR IS INITIAL.
*2011-09-05
*  SORT I_DATA BY VBELN POSNR.
*2011-09-05

ENDFORM.                    " FORROUND_KZWI1
*&---------------------------------------------------------------------*
*&      Form  GET_VBRK1
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_VBRK1 .

  DATA:
*    LI_VBRP     TYPE STANDARD TABLE OF TY_VBRP,
    LI_VBFA      TYPE STANDARD TABLE OF TY_VBFA,
    LREC_VBFA    TYPE TY_VBFA,
    L_DATE_FROM TYPE VBRK-FKDAT,
    L_DATE_TO   TYPE VBRK-FKDAT.
*    LREC_VBRP   TYPE TY_VBRP.
  FIELD-SYMBOLS: <LREC_VBRK> TYPE TY_VBRK.
  L_DATE_FROM+0(4) = S_GJAHR-LOW.
  L_DATE_FROM+4(2) = '01'.
  L_DATE_FROM+6(2) = '01'.

 IF S_GJAHR-HIGH IS INITIAL.
    L_DATE_TO+0(4) = S_GJAHR-LOW.
    L_DATE_TO+4(2) = '12'.
    L_DATE_TO+6(2) = '31'.
  ELSE.
    L_DATE_TO+0(4) = S_GJAHR-HIGH.
    L_DATE_TO+4(2) = '12'.
    L_DATE_TO+6(2) = '31'.
  ENDIF.

*SO NO. IS NOT INITIAL
  IF S_VBELN IS NOT INITIAL.
*    SELECT VBELN                              "billing
*           AUBEL                              "so
*    INTO CORRESPONDING FIELDS OF TABLE LI_VBRP
*    FROM VBRP
*   WHERE VBELN IN S_RVBELN                    "billing NUMBER
*     AND POSNR = '000010'
*     AND ERDAT IN S_FKDAT                     "BILLING DATE
*     AND ERDAT >= L_DATE_FROM
*     AND ERDAT <= L_DATE_TO
*     AND AUBEL IN S_VBELN.                    "SO NO.
   SELECT VBELV
          VBELN
     INTO TABLE LI_VBFA
     FROM VBFA
     WHERE VBELV IN S_VBELN
*       AND VBELN LIKE '009%'.
        AND ( VBTYP_N = 'M'
              OR  VBTYP_N = 'N' ).
*2011-08-24
    SORT LI_VBFA BY VBELV VBELN.
*2011-08-24
    DELETE ADJACENT DUPLICATES FROM LI_VBFA
             COMPARING VBELV "SO
                       VBELN."BILLING
  ENDIF.

*SO not input
  IF LI_VBFA IS INITIAL.
    SELECT VBELN                                "Billing Document
         FKART                                "Billing Type
         KUNAG                                "Sold-to party
         WAERK                                "Document Currency
         VKORG                                "Sales Organization
         KNUMV                                "Number of the document condition
         ERDAT                                "Billing date
         RFBSK                                "Status for transfer to accounting
         XBLNR                                "Reference Document Number
         FKSTO                                "Billing document is cancelled
         SFAKN                                "Cancelled billing document number
         VBTYP                                "SD document category
         NETWR                                "Net Value in Document Currency
         BUKRS                                "Company Code
         MWSBK                                "Tax amount in document currency
    INTO TABLE I_VBRK
    FROM VBRK
   WHERE ERDAT IN S_FKDAT                     "Billing Date
     AND ERDAT >= L_DATE_FROM
     AND ERDAT <= L_DATE_TO
     AND BUKRS = P_BUKRS                      "Company code
     AND VBELN IN S_RVBELN                    "Billing Number
     AND FKART IN S_FKART                     "Billing Type
     AND KUNRG IN S_KUNNR                     "Sold-to party
     AND WAERK IN S_WAERK                     "Currency
     AND XBLNR IN S_XBLNR                     "Contract no.
     AND ( RFBSK = C_C                        "Status for transfer to accounting
      OR   RFBSK = C_E )
     AND ( VBTYP = C_M                        "SD document category
      OR   VBTYP = C_N
      OR   VBTYP = C_O
      OR   VBTYP = C_S ).
*so input
  ELSEIF LI_VBFA IS NOT INITIAL.
    LOOP AT LI_VBFA INTO LREC_VBFA.
      SELECT VBELN                              "Billing Document
             FKART                                "Billing Type
             KUNAG                                "Sold-to party
             WAERK                                "Document Currency
             VKORG                                "Sales Organization
             KNUMV                                "Number of the document condition
             ERDAT                                "Billing date
             RFBSK                                "Status for transfer to accounting
             XBLNR                                "Reference Document Number
             FKSTO                                "Billing document is cancelled
             SFAKN                                "Cancelled billing document number
             VBTYP                                "SD document category
             NETWR                                "Net Value in Document Currency
             BUKRS                                "Company Code
             MWSBK                                "Tax amount in document currency
        APPENDING TABLE I_VBRK
        FROM VBRK
       WHERE ERDAT IN S_FKDAT                     "Billing Date
         AND ERDAT >= L_DATE_FROM
         AND ERDAT <= L_DATE_TO
         AND BUKRS = P_BUKRS                      "Company code
         AND VBELN IN S_RVBELN                    "Billing Number
         AND VBELN = LREC_VBFA-VBELN              "Billing Number
         AND FKART IN S_FKART                     "Billing Type
         AND KUNRG IN S_KUNNR                     "Sold-to party
         AND WAERK IN S_WAERK                     "Currency
         AND XBLNR IN S_XBLNR                     "Contract no.
         AND ( RFBSK = C_C                        "Status for transfer to accounting
          OR   RFBSK = C_E )
         AND ( VBTYP = C_M                        "SD document category
          OR   VBTYP = C_N
          OR   VBTYP = C_O
          OR   VBTYP = C_S ).
    ENDLOOP.
  ENDIF.
*Accounting number
  IF I_VBRK IS NOT INITIAL.
    DESCRIBE TABLE I_VBRK LINES ABGR_OBJ_TO_LOOP.
    LOOP AT I_VBRK ASSIGNING <LREC_VBRK>.
    PERFORM process_ind1.
      <LREC_VBRK>-AWKEY = <LREC_VBRK>-VBELN.
*      MODIFY I_VBRK FROM REC_VBRK TRANSPORTING AWKEY.
    ENDLOOP.
*    LOOP AT I_VBRK INTO REC_VBRK.
*      REC_VBRK-AWKEY = REC_VBRK-VBELN.
*      MODIFY I_VBRK FROM REC_VBRK TRANSPORTING AWKEY.
*    ENDLOOP.
    SELECT BUKRS
           BELNR
           GJAHR
           AWKEY
      INTO TABLE I_BKPF
      FROM BKPF
           FOR ALL ENTRIES IN I_VBRK
     WHERE BUKRS = P_BUKRS
       AND BELNR IN S_BELNR
*~~~Start~~~ ChenHua 20111027 [Westernacher]
*       AND BUDAT IN S_FKDAT
       AND CPUDT IN S_FKDAT
*~~~End~~~
       AND AWKEY = I_VBRK-AWKEY
       AND GJAHR IN S_GJAHR.
  ENDIF.

  IF I_VBRK IS INITIAL.
    FLG_STOP = C_FLAG.
*   No Data
    MESSAGE S000 WITH TEXT-S01.
  ENDIF.

ENDFORM.                    " GET_VBRK1



*&---------------------------------------------------------------------*
*&      Form  process_ind1
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM PROCESS_IND1.

  ABGR_OBJ_LOOPED = ABGR_OBJ_LOOPED + 1.
  CHECK ABGR_OBJ_TO_LOOP IS NOT INITIAL.
  ABGR_OBJ_HELP_F = ABGR_OBJ_LOOPED * 100 / ABGR_OBJ_TO_LOOP.
  ABGR_OBJ_HELP   = ABGR_OBJ_HELP_F.

  IF ABGR_OBJ_HELP1 NE ABGR_OBJ_HELP.
    IF ABGR_OBJ_HELP1 LT 0.
      ABGR_OBJ_HELP1 = 0.
    ENDIF.
    ABGR_OBJ_HELP_T1 = ABGR_OBJ_HELP1.
    ABGR_OBJ_HELP_T2 = ABGR_OBJ_TO_LOOP.
    CONCATENATE ABGR_OBJ_HELP_T1
                '%'
                TEXT-SP6
                ABGR_OBJ_HELP_T2
                TEXT-SP5
                INTO ABGR_OBJ_HELP_T
                SEPARATED BY ' '.
    CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
      EXPORTING
        PERCENTAGE = ABGR_OBJ_HELP1
        TEXT       = ABGR_OBJ_HELP_T.
        ABGR_OBJ_HELP1 = ABGR_OBJ_HELP.
  ENDIF.

ENDFORM.                    "process_ind1

*&---------------------------------------------------------------------*
*&      Form  GET_USERNAME
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM GET_USERNAME.

  DATA:LI_GTS005   TYPE STANDARD TABLE OF YSE_GTS005,
       LREC_GTS005 TYPE YSE_GTS005,
       L_MAXITEM   TYPE YSE_GTS005-ITEM.

  SELECT *
    INTO TABLE LI_GTS005
    FROM YSE_GTS005.
  SELECT MAX( ITEM )
     INTO L_MAXITEM
     FROM YSE_GTS005.
  L_MAXITEM = L_MAXITEM + 1.
  READ TABLE LI_GTS005 INTO LREC_GTS005
         WITH KEY UNAME = SY-UNAME.
  IF SY-SUBRC = 0.
*   the same month
    IF LREC_GTS005-REFNOW+0(4) = SY-DATUM+2(4).
      V_REF = LREC_GTS005-REFNOW + 1.
    ELSE.
      CONCATENATE SY-DATUM+2(4)
                  LREC_GTS005-ITEM
                  '000001'
             INTO V_REF.
    ENDIF.
  ELSEIF SY-SUBRC <> 0.
    CONCATENATE SY-DATUM+2(4)
                L_MAXITEM
                '000001'
           INTO V_REF.
    LREC_GTS005-UNAME   = SY-UNAME.
    LREC_GTS005-ITEM   = L_MAXITEM.
    LREC_GTS005-REFNOW = V_REF.
    REFRESH LI_GTS005[].
    APPEND LREC_GTS005 TO LI_GTS005.
    MODIFY YSE_GTS005 FROM TABLE LI_GTS005.
    COMMIT WORK.
  ENDIF.

ENDFORM.

*Text symbol text£º
*001:Selection fields
*002:Î´¿ªÆ±
*003:Sent to GT
*C01:Combine
*D01:Notice! Different customer code
*D02:Warning
*D03:Continue?
*D04:File Save
*D05:Only one billing cann't combine
*D06:Amout more than limitation
*E01:No authorization for company code
*E02:Company code doesn't exsit
*F01:ÆÕÆ±
*F02:×¨Æ±
*H00:Select
*H01:Status
*H02:Billing Type
*H03:Line item
*H04:VAT reference
*H05:Order status
*H06:Order number
*H07:Total no. of li.it. in SO
*H08:Delivery order
*H09:TEXT
*H10:VAT invoice
*H11:Billing Date
*H12:Customer number
*H13:Customer Name
*H14:Material
*H15:Material Desciption
*H16:Unit
*H17:Unit Price w. Tax
*H18:Quantity
*H19:shiping cost
*H20:Amount w/o Tax
*H21:Amount w Tax
*H22:Tax Amount
*H23:Currency
*H24:Tax Rate
*H25:Cancelled billing document number
*H26:Billing Doc
*H27:Billing Type
*H28:Unit Price w/O Tax
*H29:Sum Amout
*H30:Remark¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡
*H31:Material group
*H32:Accounting Document
*H33:Contract No.
*H34:Creat by
*H35:Telephone
*L01:Being Procssed
*L02:Ì¨
*L03:¼þ
*S01:No Data
*S02:Being Procssed
*S03:Sent to GT
*S04:Sent to SAP
*S05:Delay
*S06:Pending
*W01:So No.
*W02:VAT Type
*W03:Sort code
*W04:Invoice No.
*W05:VAT Reference
*W06:Customer Name
*W07:Tax No.
*W08:Customer Address
*W09:Customer Accounting No.
*W10: Invoice Date
*W11:Total Amount
*W12:Tax Rate
*W13:Total Tax Amout
*W14:Material Description
*W15:Material Code
*W16:Material Tax Item
*W17:Text
*W18:Issue Person
*W19:Payee
*W20:
*W21:Delete Flag
*W22:List Flag
*W23:Remark
*W24:Accounting Document
*W25:Customer Accounting No.
*W26:Accounting Bank
*W27:ÊýÁ¿
*W28:µ¥Î»
*W29:Sum Amount
*W30:¶ÂÎªÓ¢
*W31:ÂÞº£Ï¼
*W32:Telephone

*W33:Update failed
*Selection text£º
*P_BUKRS:        Company code
*S_AUART:        SO Type
*S_BELNR:        Accounting number
*S_ERDAT:        SO creation Date
*S_ERNAM:        Created by
*S_FKART:        Billing Type
*S_FKDAT:        Billing Date
*S_GJAHR:        Fiscal Year
*S_KUNNR:        Sold-to party
*S_RFSTK:        SO status
*S_RVBELN:        Billing Number
*S_SEG:        Segment
*S_SPART:        Division
*S_STATUS:        GT Process status
*S_VBELN:        SO Number
*S_VKBUR:        Sales office
*S_VKORG:        Sales Organization
*S_VTWEG:        Distribution Channel
*S_WAERK:        Currency
*S_XBLNR:        PO Number
