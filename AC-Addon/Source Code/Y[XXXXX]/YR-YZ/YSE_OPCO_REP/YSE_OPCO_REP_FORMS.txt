*&---------------------------------------------------------------------*
*&  Include           YSE_OPCO_REP_FORMS                               *
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  GET_OPCO_DATA
*&---------------------------------------------------------------------*
FORM GET_OPCO_DATA .

  SELECT *
         INTO TABLE IT_OPCO
         FROM YSE_OPCO
        WHERE KEYDAT EQ P_KEYDAT
          AND BUKRS  IN SO_BUKRS
          AND VKORG  IN SO_VKORG
          AND VTWEG  IN SO_VTWEG
          AND SPART  IN SO_SPART
          AND VKBUR  IN SO_VKBUR
          AND VKGRP  IN SO_VKGRP
          AND IWERK  IN SO_IWERK
          AND VAWRK  IN SO_VAWRK
          AND INGRP  IN SO_INGRP
          AND VAPLZ  IN SO_VAPLZ.

ENDFORM.                    " GET_OPCO_DATA

*&---------------------------------------------------------------------*
*&      Form  GET_GL_DESCR
*&---------------------------------------------------------------------*
FORM GET_GL_DESCR.

  DATA:
    BEGIN OF IT_TEMP OCCURS 0,
      HKONT LIKE IT_OPCO-HKONT,
    END OF IT_TEMP.

  LOOP AT IT_OPCO WHERE NOT HKONT IS INITIAL.
    IT_TEMP-HKONT = IT_OPCO-HKONT.
    APPEND IT_TEMP.
  ENDLOOP.
  SORT IT_TEMP.
  DELETE ADJACENT DUPLICATES FROM IT_TEMP.

  IF NOT IT_TEMP[] IS INITIAL.

    SELECT *
           INTO TABLE IT_SKAT
           FROM SKAT
            FOR ALL ENTRIES IN IT_TEMP
          WHERE SAKNR EQ IT_TEMP-HKONT
            AND SPRAS EQ GC_SPRAS_EN.

    IF SY-SUBRC EQ 0.
      SORT IT_SKAT BY SAKNR.
      GV_COLCNT1 = SY-DBCNT.
    ENDIF.

  ENDIF.

ENDFORM.                    " GET_GL_DESCR

*&---------------------------------------------------------------------*
*&      Form  GET_CEG_DESCR
*&---------------------------------------------------------------------*
FORM GET_CEG_DESCR.

  DATA:
    BEGIN OF IT_TEMP OCCURS 0,
      SETNAME LIKE IT_OPCO-SETNAME,
    END OF IT_TEMP.

  LOOP AT IT_OPCO WHERE NOT SETNAME IS INITIAL.
    IT_TEMP-SETNAME = IT_OPCO-SETNAME.
    APPEND IT_TEMP.
  ENDLOOP.
  SORT IT_TEMP.
  DELETE ADJACENT DUPLICATES FROM IT_TEMP.

  IF NOT IT_TEMP[] IS INITIAL.

    SELECT *
           INTO TABLE IT_SETHEADERT
           FROM SETHEADERT
            FOR ALL ENTRIES IN IT_TEMP
          WHERE SETNAME EQ IT_TEMP-SETNAME
            AND LANGU   EQ GC_SPRAS_EN.

    IF SY-SUBRC EQ 0.
      SORT IT_SETHEADERT BY SETNAME.
      GV_COLCNT2 = SY-DBCNT.
    ENDIF.

  ENDIF.

ENDFORM.                    " GET_CEG_DESCR

*&---------------------------------------------------------------------*
*&      Form  CREATE_IT
*&---------------------------------------------------------------------*
FORM CREATE_IT.

  DATA:
    X(2) TYPE X.
  FIELD-SYMBOLS:
    <FC> TYPE C.

  GS_FIELDCAT-FIELDNAME  = 'KEYDAT'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO'.
  GS_FIELDCAT-REF_FIELD  = 'KEYDAT'.
  GS_FIELDCAT-KEY        = 'X'.
  GS_FIELDCAT-COL_OPT    = 'X'.
  GS_FIELDCAT-NO_OUT     = 'X'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.

  GS_FIELDCAT-FIELDNAME  = 'AUFNR'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO'.
  GS_FIELDCAT-REF_FIELD  = 'AUFNR'.
  GS_FIELDCAT-KEY        = 'X'.
  GS_FIELDCAT-COL_OPT    = 'X'.
  GS_FIELDCAT-NO_OUT     = SPACE.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.

  GS_FIELDCAT-FIELDNAME  = 'BUKRS'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO'.
  GS_FIELDCAT-REF_FIELD  = 'BUKRS'.
  GS_FIELDCAT-KEY        = 'X'.
  GS_FIELDCAT-COL_OPT    = 'X'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.

  GS_FIELDCAT-FIELDNAME  = 'VKORG'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO'.
  GS_FIELDCAT-REF_FIELD  = 'VKORG'.
  GS_FIELDCAT-KEY        = 'X'.
  GS_FIELDCAT-COL_OPT    = 'X'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.

  GS_FIELDCAT-FIELDNAME  = 'VTWEG'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO'.
  GS_FIELDCAT-REF_FIELD  = 'VTWEG'.
  GS_FIELDCAT-KEY        = 'X'.
  GS_FIELDCAT-COL_OPT    = 'X'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.

  GS_FIELDCAT-FIELDNAME  = 'SPART'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO'.
  GS_FIELDCAT-REF_FIELD  = 'SPART'.
  GS_FIELDCAT-KEY        = 'X'.
  GS_FIELDCAT-COL_OPT    = 'X'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.

  GS_FIELDCAT-FIELDNAME  = 'VKBUR'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO'.
  GS_FIELDCAT-REF_FIELD  = 'VKBUR'.
  GS_FIELDCAT-KEY        = 'X'.
  GS_FIELDCAT-COL_OPT    = 'X'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.

  GS_FIELDCAT-FIELDNAME  = 'VKGRP'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO'.
  GS_FIELDCAT-REF_FIELD  = 'VKGRP'.
  GS_FIELDCAT-KEY        = 'X'.
  GS_FIELDCAT-COL_OPT    = 'X'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.

  GS_FIELDCAT-FIELDNAME  = 'IWERK'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO'.
  GS_FIELDCAT-REF_FIELD  = 'IWERK'.
  GS_FIELDCAT-KEY        = 'X'.
  GS_FIELDCAT-COL_OPT    = 'X'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.

  GS_FIELDCAT-FIELDNAME  = 'VAWRK'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO'.
  GS_FIELDCAT-REF_FIELD  = 'VAWRK'.
  GS_FIELDCAT-KEY        = 'X'.
  GS_FIELDCAT-COL_OPT    = 'X'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.

  GS_FIELDCAT-FIELDNAME  = 'INGRP'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO'.
  GS_FIELDCAT-REF_FIELD  = 'INGRP'.
  GS_FIELDCAT-KEY        = 'X'.
  GS_FIELDCAT-COL_OPT    = 'X'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.

  GS_FIELDCAT-FIELDNAME  = 'VAPLZ'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO'.
  GS_FIELDCAT-REF_FIELD  = 'VAPLZ'.
  GS_FIELDCAT-KEY        = 'X'.
  GS_FIELDCAT-COL_OPT    = 'X'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.

  GS_FIELDCAT-FIELDNAME  = 'WAERS'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO'.
  GS_FIELDCAT-REF_FIELD  = 'WAERS'.
  GS_FIELDCAT-KEY        = 'X'.
  GS_FIELDCAT-COL_OPT    = 'X'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.

* Set "First data column" and initialize "First total column"
  GV_FCOL = 14.
  GV_TCOL = 14.

* Add 4 extra columns for each external cat
  CLEAR GS_FIELDCAT.
*  GS_FIELDCAT-INTTYPE    = 'P'.
*  GS_FIELDCAT-INTLEN     = 7.
*  GS_FIELDCAT-CFIELDNAME = 'WAERS'.
*  GS_FIELDCAT-OUTPUTLEN  = 8.
*  GS_FIELDCAT-DECIMALS = 2.
* GS_FIELDCAT-COL_OPT    = 'X'.
  GS_FIELDCAT-REF_TABLE = 'YSE_OPCO'.
  GS_FIELDCAT-REF_FIELD = 'RAST2'.
  LOOP AT IT_SKAT.
    CONCATENATE IT_SKAT-SAKNR 'A' INTO GS_FIELDCAT-FIELDNAME.
    CONCATENATE IT_SKAT-TXT50 ' - A' INTO GS_FIELDCAT-COLTEXT.
    GS_FIELDCAT-SELTEXT = GS_FIELDCAT-COLTEXT.
    APPEND GS_FIELDCAT TO GT_FIELDCAT.
    CONCATENATE IT_SKAT-SAKNR 'B' INTO GS_FIELDCAT-FIELDNAME.
    CONCATENATE IT_SKAT-TXT50 ' - B' INTO GS_FIELDCAT-COLTEXT.
    GS_FIELDCAT-SELTEXT = GS_FIELDCAT-COLTEXT.
    APPEND GS_FIELDCAT TO GT_FIELDCAT.
    CONCATENATE IT_SKAT-SAKNR 'C' INTO GS_FIELDCAT-FIELDNAME.
    CONCATENATE IT_SKAT-TXT50 ' - C' INTO GS_FIELDCAT-COLTEXT.
    GS_FIELDCAT-SELTEXT = GS_FIELDCAT-COLTEXT.
    APPEND GS_FIELDCAT TO GT_FIELDCAT.
    CONCATENATE IT_SKAT-SAKNR 'D' INTO GS_FIELDCAT-FIELDNAME.
    CONCATENATE IT_SKAT-TXT50 ' - D' INTO GS_FIELDCAT-COLTEXT.
    GS_FIELDCAT-SELTEXT = GS_FIELDCAT-COLTEXT.
    APPEND GS_FIELDCAT TO GT_FIELDCAT.
*   Add 4 to "First totals column"
    GV_TCOL = GV_TCOL + 4.
  ENDLOOP.

* Add 4 extra columns for each internal cat
  LOOP AT IT_SETHEADERT.
    CONCATENATE IT_SETHEADERT-SETNAME 'A' INTO GS_FIELDCAT-FIELDNAME.
    CONCATENATE IT_SETHEADERT-DESCRIPT ' - A' INTO GS_FIELDCAT-COLTEXT.
    GS_FIELDCAT-SELTEXT = GS_FIELDCAT-COLTEXT.
    APPEND GS_FIELDCAT TO GT_FIELDCAT.
    CONCATENATE IT_SETHEADERT-SETNAME 'B' INTO GS_FIELDCAT-FIELDNAME.
    CONCATENATE IT_SETHEADERT-DESCRIPT ' - B' INTO GS_FIELDCAT-COLTEXT.
    GS_FIELDCAT-SELTEXT = GS_FIELDCAT-COLTEXT.
    APPEND GS_FIELDCAT TO GT_FIELDCAT.
    CONCATENATE IT_SETHEADERT-SETNAME 'C' INTO GS_FIELDCAT-FIELDNAME.
    CONCATENATE IT_SETHEADERT-DESCRIPT ' - C' INTO GS_FIELDCAT-COLTEXT.
    GS_FIELDCAT-SELTEXT = GS_FIELDCAT-COLTEXT.
    APPEND GS_FIELDCAT TO GT_FIELDCAT.
    CONCATENATE IT_SETHEADERT-SETNAME 'D' INTO GS_FIELDCAT-FIELDNAME.
    CONCATENATE IT_SETHEADERT-DESCRIPT ' - D' INTO GS_FIELDCAT-COLTEXT.
    GS_FIELDCAT-SELTEXT = GS_FIELDCAT-COLTEXT.
    APPEND GS_FIELDCAT TO GT_FIELDCAT.
*   Add 4 to "First totals column"
    GV_TCOL = GV_TCOL + 4.
  ENDLOOP.

* Add total columns
  CLEAR GS_FIELDCAT.
  GS_FIELDCAT-FIELDNAME  = 'TEXTA'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO_TOTALS'.
  GS_FIELDCAT-REF_FIELD  = 'TEXTA'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.
  GS_FIELDCAT-FIELDNAME  = 'TEXTB'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO_TOTALS'.
  GS_FIELDCAT-REF_FIELD  = 'TEXTB'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.
  GS_FIELDCAT-FIELDNAME  = 'TEXTC'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO_TOTALS'.
  GS_FIELDCAT-REF_FIELD  = 'TEXTC'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.
  GS_FIELDCAT-FIELDNAME  = 'TEXTD'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO_TOTALS'.
  GS_FIELDCAT-REF_FIELD  = 'TEXTD'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.
  GS_FIELDCAT-FIELDNAME  = 'TINTA'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO_TOTALS'.
  GS_FIELDCAT-REF_FIELD  = 'TINTA'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.
  GS_FIELDCAT-FIELDNAME  = 'TINTB'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO_TOTALS'.
  GS_FIELDCAT-REF_FIELD  = 'TINTB'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.
  GS_FIELDCAT-FIELDNAME  = 'TINTC'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO_TOTALS'.
  GS_FIELDCAT-REF_FIELD  = 'TINTC'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.
  GS_FIELDCAT-FIELDNAME  = 'TINTD'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO_TOTALS'.
  GS_FIELDCAT-REF_FIELD  = 'TINTD'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.
  GS_FIELDCAT-FIELDNAME  = 'TOTAL'.
  GS_FIELDCAT-REF_TABLE  = 'YSE_OPCO_TOTALS'.
  GS_FIELDCAT-REF_FIELD  = 'TOTAL'.
  APPEND GS_FIELDCAT TO GT_FIELDCAT.

* If next method call dumps, check the generated code by putting a break
* point at LSKBHF06, form fb_table_create, line 547: "generate
* subroutine pool lt_source..."
  CALL METHOD CL_ALV_TABLE_CREATE=>CREATE_DYNAMIC_TABLE
    EXPORTING
      IT_FIELDCATALOG = GT_FIELDCAT
    IMPORTING
      EP_TABLE        = GP_TABLE.

  ASSIGN GP_TABLE->* TO <GT_TABLE>.

ENDFORM.                    " CREATE_IT

*&---------------------------------------------------------------------*
*&      Form  FILL_IT
*&---------------------------------------------------------------------*
FORM FILL_IT .

  DATA:
    BEGIN OF IT_AUFNR OCCURS 0,
      KEYDAT LIKE IT_OPCO-KEYDAT,
      AUFNR  LIKE IT_OPCO-AUFNR,
      BUKRS  LIKE IT_OPCO-BUKRS,
      VKORG  LIKE IT_OPCO-VKORG,
      VTWEG  LIKE IT_OPCO-VTWEG,
      SPART  LIKE IT_OPCO-SPART,
      VKBUR  LIKE IT_OPCO-VKBUR,
      VKGRP  LIKE IT_OPCO-VKGRP,
      IWERK  LIKE IT_OPCO-IWERK,
      VAWRK  LIKE IT_OPCO-VAWRK,
      INGRP  LIKE IT_OPCO-INGRP,
      VAPLZ  LIKE IT_OPCO-VAPLZ,
      WAERS  LIKE IT_OPCO-WAERS,
    END OF IT_AUFNR,
    LV_COMP TYPE I.

  FIELD-SYMBOLS: <LS_LINE>,     " Working area for flexible table
                 <LS_FIELD>.

* Get unique list of orders
  SORT IT_OPCO BY AUFNR HKONT SETNAME.
  LOOP AT IT_OPCO.
    MOVE-CORRESPONDING IT_OPCO TO IT_AUFNR.
    APPEND IT_AUFNR.
  ENDLOOP.
  DELETE ADJACENT DUPLICATES FROM IT_AUFNR.

* Get working area for dynamic table
  ASSIGN LOCAL COPY OF INITIAL LINE OF <GT_TABLE> TO <LS_LINE>.

* Loop over data
  LOOP AT IT_AUFNR.

    CLEAR: <LS_LINE>,
           GV_TOTALS.

    ASSIGN COMPONENT 1 OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = IT_AUFNR-KEYDAT.
    ASSIGN COMPONENT 2 OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = IT_AUFNR-AUFNR.
    ASSIGN COMPONENT 3 OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = IT_AUFNR-BUKRS.
    ASSIGN COMPONENT 4 OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = IT_AUFNR-VKORG.
    ASSIGN COMPONENT 5 OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = IT_AUFNR-VTWEG.
    ASSIGN COMPONENT 6 OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = IT_AUFNR-SPART.
    ASSIGN COMPONENT 7 OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = IT_AUFNR-VKBUR.
    ASSIGN COMPONENT 8 OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = IT_AUFNR-VKGRP.
    ASSIGN COMPONENT 9 OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = IT_AUFNR-IWERK.
    ASSIGN COMPONENT 10 OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = IT_AUFNR-VAWRK.
    ASSIGN COMPONENT 11 OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = IT_AUFNR-INGRP.
    ASSIGN COMPONENT 12 OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = IT_AUFNR-VAPLZ.
    ASSIGN COMPONENT 13 OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = IT_AUFNR-WAERS.

    LOOP AT IT_OPCO WHERE AUFNR = IT_AUFNR-AUFNR.

      IF NOT IT_OPCO-HKONT IS INITIAL.

        READ TABLE IT_SKAT WITH KEY SAKNR = IT_OPCO-HKONT.
        LV_COMP = GV_FCOL + ( ( SY-TABIX - 1 ) * 4 ).
        ASSIGN COMPONENT LV_COMP OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
        <LS_FIELD> = IT_OPCO-RAST2." * 100.
        LV_COMP = LV_COMP + 1.
        ASSIGN COMPONENT LV_COMP OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
        <LS_FIELD> = IT_OPCO-RAST3." * 100.
        LV_COMP = LV_COMP + 1.
        ASSIGN COMPONENT LV_COMP OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
        <LS_FIELD> = IT_OPCO-RAST4." * 100.
        LV_COMP = LV_COMP + 1.
        ASSIGN COMPONENT LV_COMP OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
        <LS_FIELD> = IT_OPCO-RAST5." * 100.

*       Add values to total working area
        GV_TOTALS-TEXTA = GV_TOTALS-TEXTA + IT_OPCO-RAST2.
        GV_TOTALS-TEXTB = GV_TOTALS-TEXTB + IT_OPCO-RAST3.
        GV_TOTALS-TEXTC = GV_TOTALS-TEXTC + IT_OPCO-RAST4.
        GV_TOTALS-TEXTD = GV_TOTALS-TEXTD + IT_OPCO-RAST5.

      ELSEIF NOT IT_OPCO-SETNAME IS INITIAL.

        READ TABLE IT_SETHEADERT WITH KEY SETNAME = IT_OPCO-SETNAME.
        LV_COMP = GV_FCOL + ( GV_COLCNT1 * 4 )
                          + ( ( SY-TABIX - 1 ) * 4 ).
        ASSIGN COMPONENT LV_COMP OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
        <LS_FIELD> = IT_OPCO-RAST2." * 100.
        LV_COMP = LV_COMP + 1.
        ASSIGN COMPONENT LV_COMP OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
        <LS_FIELD> = IT_OPCO-RAST3." * 100.
        LV_COMP = LV_COMP + 1.
        ASSIGN COMPONENT LV_COMP OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
        <LS_FIELD> = IT_OPCO-RAST4." * 100.
        LV_COMP = LV_COMP + 1.
        ASSIGN COMPONENT LV_COMP OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
        <LS_FIELD> = IT_OPCO-RAST5."  * 100.

*       Add values to totals working area
        GV_TOTALS-TINTA = GV_TOTALS-TINTA + IT_OPCO-RAST2.
        GV_TOTALS-TINTB = GV_TOTALS-TINTB + IT_OPCO-RAST3.
        GV_TOTALS-TINTC = GV_TOTALS-TINTC + IT_OPCO-RAST4.
        GV_TOTALS-TINTD = GV_TOTALS-TINTD + IT_OPCO-RAST5.

      ELSE.


      ENDIF.

    ENDLOOP.

*   Put totals from working area in correct column
    LV_COMP = GV_TCOL.
    ASSIGN COMPONENT LV_COMP OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = GV_TOTALS-TEXTA.
    LV_COMP = LV_COMP + 1.
    ASSIGN COMPONENT LV_COMP OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = GV_TOTALS-TEXTB.
    LV_COMP = LV_COMP + 1.
    ASSIGN COMPONENT LV_COMP OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = GV_TOTALS-TEXTC.
    LV_COMP = LV_COMP + 1.
    ASSIGN COMPONENT LV_COMP OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = GV_TOTALS-TEXTD.
    LV_COMP = LV_COMP + 1.
    ASSIGN COMPONENT LV_COMP OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = GV_TOTALS-TINTA.
    LV_COMP = LV_COMP + 1.
    ASSIGN COMPONENT LV_COMP OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = GV_TOTALS-TINTB.
    LV_COMP = LV_COMP + 1.
    ASSIGN COMPONENT LV_COMP OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = GV_TOTALS-TINTC.
    LV_COMP = LV_COMP + 1.
    ASSIGN COMPONENT LV_COMP OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = GV_TOTALS-TINTD.
    LV_COMP = LV_COMP + 1.
    ASSIGN COMPONENT LV_COMP OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = GV_TOTALS-TEXTA +
                 GV_TOTALS-TEXTB +
                 GV_TOTALS-TEXTC +
                 GV_TOTALS-TEXTD +
                 GV_TOTALS-TINTA +
                 GV_TOTALS-TINTB +
                 GV_TOTALS-TINTC +
                 GV_TOTALS-TINTD.

    APPEND <LS_LINE> TO <GT_TABLE>.

  ENDLOOP.

ENDFORM.                    " FILL_IT

*&---------------------------------------------------------------------*
*&      Form  CHECK_AUTHORIZATION
*&---------------------------------------------------------------------*
FORM CHECK_AUTHORIZATION .

*  AUTHORITY-CHECK OBJECT 'F_KNA1_BUK'
*                      ID 'BUKRS' FIELD P_BUKRS
*                      ID 'ACTVT' DUMMY.
*
*  IF SY-SUBRC = 4.
**   NO AUTHORISATION TO DISPLAY THE DATA
*    MESSAGE ID 'YSE_RENTAL' TYPE 'E' NUMBER '040' WITH P_BUKRS.
*  ELSEIF SY-SUBRC <> 0.
**   ERROR CHECKING AUTHORIZATION.
*    MESSAGE ID 'YSE_RENTAL' TYPE 'E' NUMBER '046'.
*  ENDIF.

ENDFORM.                    " CHECK_AUTHORIZATION

*&---------------------------------------------------------------------*
*&      Form  BDC_ADD_FIELD
*&---------------------------------------------------------------------*
FORM BDC_ADD_FIELD USING P_FNAM P_FVAL.
  IF P_FVAL <> GC_CHAR_FS.   " Forward Slash
    CLEAR IT_BDCDATA.
    IT_BDCDATA-FNAM = P_FNAM.
    IT_BDCDATA-FVAL = P_FVAL.
    APPEND IT_BDCDATA.
  ENDIF.
ENDFORM.    " BDC_ADD_FIELD

*&---------------------------------------------------------------------*
*&      Form  BDC_ADD_SCREEN
*&---------------------------------------------------------------------*
FORM BDC_ADD_SCREEN USING P_PROGRAM P_DYNPRO.
  CLEAR IT_BDCDATA.
  IT_BDCDATA-PROGRAM  = P_PROGRAM.
  IT_BDCDATA-DYNPRO   = P_DYNPRO.
  IT_BDCDATA-DYNBEGIN = GC_CHAR_X.
  APPEND IT_BDCDATA.
ENDFORM.    " BDC_ADD_SCREEN
