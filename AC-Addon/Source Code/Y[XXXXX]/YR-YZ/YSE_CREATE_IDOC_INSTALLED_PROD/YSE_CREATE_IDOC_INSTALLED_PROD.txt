**----------------------------------------------------------------------*
**
** PROGRAM DESACTIVATED  - See below change log
**
**----------------------------------------------------------------------*
*
*
** PROGRAM ID           : YSE_CREATE_IDOC_INSTALLED_PROD                *
** PROGRAM TITLE        : Create Outbound Idocs with installed product  *
**                          info                                        *
** AUTHOR               : Andr¨¦ Blommaert                               *
** DATE                 : 15/11/2006                                    *
** DEVELOPMENT ID       :                                           *
**                                                                      *
** CHANGE REQUEST NUMBER: CD1K907621                                    *
**                                                                      *
** Program Description:  Outbound program to send Installed Base to CRM *
**                                                                      *
**----------------------------------------------------------------------*
** CHANGE HISTORY LOG                                                   *
**----------------------------------------------------------------------*
** MOD. NO.|  DATE    | NAME     |CORRECTION NUMBER| CHANGE REFERENCE # *
**----------------------------------------------------------------------*
** 2009-06-02: PROGRAM DESACTIVATED - NOT USED - MIGHT BY ACCIDENT GET  *
**             TRANSPORTED.                                             *
**             ALL REFERENCES CREATED are desactivated.                 *
**             - structure    YSE_E1I001                                *
**             - tabel        YSE_I001_IDOC, YSE_I001_BYPLANT,          *
**                            YSE_I001_CREATED                          *
**             - data element YSE_CREATE_FLAG, YSE_DOCUMENT_DATE,       *
**                            YSE_DOC_DESCR                             *
*************************************************************************
REPORT yse_create_idoc_installed_prod MESSAGE-ID yse_interfaces.
*
*************************************************************************
**                   T A B L E S                                        *
*************************************************************************
*TABLES: v_equi.            " PM technical objects (EQUI, func.location)
*
*
*************************************************************************
**                   TYPES                                *
*************************************************************************
*TYPES: BEGIN OF t_deliveries,
*       vbeln LIKE likp-vbeln,
*       kunnr LIKE likp-kunnr,
*       lfdat LIKE likp-lfdat,
*       erdat LIKE likp-erdat,
*       lfimg LIKE lips-lfimg,
*       prodh LIKE lips-prodh,
*       END OF t_deliveries.
*TYPES: BEGIN OF t_vbak,
*       vbeln LIKE vbak-vbeln,
*       kunnr LIKE vbpa-kunnr,
*       erdat LIKE vbak-erdat,
*       vkgrp LIKE vbak-vkgrp,
*       END OF t_vbak.
*
*TYPES: BEGIN OF t_vkgrp,
*vkgrp LIKE vbak-vkgrp,
*END OF t_vkgrp.
*
*************************************************************************
**                   C O N S T A N T S                                  *
*************************************************************************
*CONSTANTS :c_mestyp     LIKE edidc-mestyp VALUE 'YSE_I001' ,
*           c_idoc_type  LIKE edidc-idoctp VALUE 'YSE_I001' ,
*           c_segment(10) TYPE c    VALUE 'YSE_E1I001',
*           c_equipment  TYPE eqart VALUE 'EQUIPMENT',
*           c_99991231(8)           VALUE '99991231',
*           c_yam_i001(8) TYPE c    VALUE 'YSE_I001',
*           c_bp         TYPE parvw VALUE 'RE',   " Bill-to-party
*           c_sp         TYPE parvw VALUE 'AG',   " Sold-to-party
*           c_k          TYPE objvw VALUE 'K',    " Maintenance contract
*           c_c(1)       TYPE c     VALUE 'C',    " Change
*           c_a(1)       TYPE c     VALUE 'A',    " Add
*           c_x(1)       TYPE c     VALUE 'X',
*           c_run_hours  TYPE impt-atnam VALUE 'ZAM_RHRSTOTAL_ACT',
*           c_underscore(1) TYPE c  VALUE '_',    " Underscore
*           c_ls(2)                 VALUE 'LS',
*           c_sc1(3)                VALUE 'SC1',
*           c_input                 VALUE '0',
*           c_0000(4)    TYPE c     VALUE '0000',
*           c_001(3)     TYPE c     VALUE '001',
*           c_e          TYPE spras VALUE 'E',    " Language
*           c_clnt(4)    TYPE c     VALUE 'CLNT' ,
*           c_wbi(3)     TYPE c     VALUE 'WBI' ,
*           c_contract(8) TYPE c VALUE  'Contract',
*            c_delivery(8) TYPE c VALUE 'Delivery',
*             c_invoice(8) TYPE c VALUE 'Invoice'.
*
*************************************************************************
**                   V A R I A B L E S                                  *
*************************************************************************
*DATA:  g_equnr  TYPE equi-equnr,                " Equip Number
*       g_pfile  LIKE      /sapdmc/lsoinp-filename,
*       g_ofile  LIKE      /sapdmc/lsoinp-filename,
*       g_delsetupfile LIKE rlgrap-filename,
*       g_swerk  TYPE v_equi-swerk,              " Plant
*       g_ansdt  LIKE equi-ansdt,                " Acquisition date
*       g_retcd  LIKE sy-subrc,                  " return code
*       g_subrc  LIKE sy-subrc,                  " return code
*       g_index  LIKE sy-tabix,
*       g_stat   LIKE jest-stat,                 " System status
*       g_directory(25) TYPE c VALUE '/var/load/xxx/UK/convert/',
*       g_fm_atinn TYPE ausp-atinn,
*       g_point  LIKE imptt-point,               " Measurement point
*       g_ersda(12) TYPE c,                      " YYYYMMDDHHMM
*       g_date   LIKE sy-datum,
*       g_parnr  TYPE i_parnr.                   " Partner Number
*DATA: wa_equi_delta LIKE yse_e1i001.
*DATA: wa_yse_i001_idoc  LIKE yse_i001_idoc .
*
*************************************************************************
**                  I N T E R N A L   T A B L E S                       *
*************************************************************************
*DATA : BEGIN OF i_prev OCCURS 0.
*        INCLUDE STRUCTURE yse_e1i001.
*DATA : END OF i_prev.
*
*DATA : BEGIN OF it_equi OCCURS 0.
*        INCLUDE STRUCTURE yse_e1i001.
*DATA :    objnr LIKE v_equi-objnr,         " Object Number
*          adrnr LIKE v_equi-adrnr,         " Address Number
*          gewrk LIKE v_equi-gewrk,         " Work center ID
*          pm_objty LIKE v_equi-pm_objty,   " Work center object type
*          parnr LIKE ihpa-parnr,
*          iloan LIKE v_equi-iloan,
*          tplnr LIKE v_equi-tplnr,
*          document_nr LIKE vbak-vbeln,
*          document_type LIKE vbak-vbtyp.
*DATA : END OF it_equi.
*
*DATA : BEGIN OF i_delfiles OCCURS 0,
*         mandt LIKE yam_i001-mandt,
*         swerk LIKE yam_i001-swerk,
*         ersda LIKE yam_i001-ersda,
*       END OF i_delfiles.
*
*DATA : BEGIN OF it_equi_delta OCCURS 0.
*        INCLUDE STRUCTURE yse_e1i001.
*DATA : END OF it_equi_delta.
*
*DATA : BEGIN OF wa_yam_i001,
*         mandt LIKE yam_i001-mandt,
*         swerk LIKE yam_i001-swerk,
*         ersda LIKE yam_i001-ersda,
*       END OF wa_yam_i001.
*
*DATA: it_viser02 LIKE viser02 OCCURS 0 WITH HEADER LINE.
*DATA: it_inv_deliv LIKE vbfa OCCURS 0 WITH HEADER LINE.
*DATA: it_deliveries TYPE TABLE OF t_deliveries  WITH HEADER LINE.
*DATA: it_mara LIKE mara OCCURS 0 WITH HEADER LINE.
*DATA: it_mbew LIKE mbew OCCURS 0 WITH HEADER LINE.
*
*DATA: it_bsid LIKE bsid OCCURS 0 WITH HEADER LINE.
*DATA: it_kna1 LIKE kna1 OCCURS 0 WITH HEADER LINE.
*DATA: it_likp LIKE likp OCCURS 0 WITH HEADER LINE.
**DATA: it_yse_i001_byplant LIKE yse_i001_byplant OCCURS 0
**      WITH HEADER LINE.
** Removed assignement - Wouter
*
*
*
*DATA: it_vbak TYPE TABLE OF t_vbak WITH HEADER LINE.
*DATA: it_vkgrp TYPE TABLE OF t_vkgrp WITH HEADER LINE.
*
*DATA: it_vbap LIKE vbap OCCURS 0 WITH HEADER LINE.
*DATA: it_tvgrt LIKE tvgrt OCCURS 0 WITH HEADER LINE.
*DATA: it_t001w LIKE t001w OCCURS 0 WITH HEADER LINE.
*
*DATA: it_yse_i001_idoc  LIKE yse_i001_idoc OCCURS 0 WITH HEADER LINE.
*
*
*DATA: i_edidc_control_comm LIKE edidc OCCURS 1 WITH HEADER LINE ,
*      i_edidd_data LIKE edidd OCCURS 0 WITH HEADER LINE         ,
*      wa_edidc LIKE edidc                                       ,
*      i_wa_point LIKE impt,
*      i_wa_value LIKE imrg,
*      p_logsys LIKE tbdlst-logsys                               .
*DATA : BEGIN OF wa_equi .
*        INCLUDE STRUCTURE yse_e1i001.
*DATA :    objnr LIKE v_equi-objnr,         " Object Number
*          adrnr LIKE v_equi-adrnr,         " Address Number
*          gewrk LIKE v_equi-gewrk,         " Work center ID
*          pm_objty LIKE v_equi-pm_objty,   " Work center object type
*          parnr LIKE ihpa-parnr,
*          iloan LIKE v_equi-iloan,
*          tplnr LIKE v_equi-tplnr,
*          document_nr LIKE vbak-vbeln,
*          document_type LIKE vbak-vbtyp.
*DATA : END OF wa_equi.
*
*
*************************************************************************
**       S E L E C T - O P T I O N S / P A R A M E T E R S              *
*************************************************************************
*
*SELECTION-SCREEN : BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
*
*SELECT-OPTIONS: s_equnr FOR g_equnr,                         "Equip.Nr
*                s_swerk FOR g_swerk OBLIGATORY NO INTERVALS. "Plant
*PARAMETERS: p_inwrk  LIKE g_swerk,    "Plant to be initial loaded
*            p_mestyp LIKE edmsg-msgtyp DEFAULT c_mestyp MODIF ID sc1.
*
*SELECTION-SCREEN: END OF BLOCK b1.
*
*************************************************************************
*INITIALIZATION.
*
*  CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
*    IMPORTING
*      own_logical_system             = p_logsys
*    EXCEPTIONS
*      own_logical_system_not_defined = 1
*      OTHERS                         = 2.
*  IF sy-subrc <> 0.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
** ELSE.
**   REPLACE FIRST OCCURRENCE OF c_clnt IN p_logsys WITH c_wbi  .
*  ENDIF.
*
*************************************************************************
**    Disable Message Type Screen Field                                 *
*************************************************************************
*AT SELECTION-SCREEN OUTPUT.
*
*  LOOP AT SCREEN.
*    IF screen-group1 = c_sc1.
*      screen-input   = c_input.
*      MODIFY SCREEN.
*      CONTINUE.
*    ENDIF.
*  ENDLOOP.
*
*************************************************************************
**       S T A R T - O F - S E L E C T I O N    E V E N T               *
*************************************************************************
*START-OF-SELECTION.
*
*** Validate if the ALE Configuration is correctly setup
** PERFORM validate_ale_configuration .
*
*
*  " prevent program from running
  write ' PROGRAM WILL NOT RUN - Desactivated since it is replaced by'.
  write / ' a complete new program -has never been tansported to CP1' .
  EXIT.
*  " prevent program from running
*
*** Get the information for selected plant(s)
*
*
*  CLEAR it_equi.
*  REFRESH it_equi.
*
*
*** Select data based on Selection screen parameters
*  SELECT equnr sernr matnr eqktx swerk objnr adrnr gewrk pm_objty
*          tplnr iloan
*
*           INTO CORRESPONDING FIELDS OF TABLE it_equi
*           FROM v_equi
**           INNER JOIN ihpa AS b
**           ON a~objnr = b~objnr
**           INNER JOIN kna1 AS c
**           ON b~parnr = c~kunnr
*           WHERE  equnr IN s_equnr
**             AND  a~eqart = c_equipment
*             AND  datbi = c_99991231
*             AND  swerk EQ s_swerk-low
*             AND  tplnr  NE space. " INSTALLED EQUIPMENTS
*
*
*  IF sy-subrc NE 0.
*    WRITE: / 'No Idocs created'(i03).
*    EXIT.
*  ENDIF.
*
*
** FILL MATERIAL TABLE
*
*  LOOP AT it_equi.
*
*    it_mara-matnr = it_equi-matnr.
*    APPEND it_mara.
*
*  ENDLOOP.
*
*  SORT it_mara BY matnr.
*  DELETE ADJACENT DUPLICATES FROM it_mara.
*
*
*
*
*
** FIND STANDARD PRICES FOR THIS MATERIALS
*
*  SELECT matnr stprs
*   INTO CORRESPONDING FIELDS OF TABLE it_mbew
*   FROM mbew
*   FOR ALL ENTRIES IN it_mara
*   WHERE matnr = it_mara-matnr.
*
*  SORT it_mbew BY matnr.
*
*
** FIND VALUATION AREAS
*  SELECT werks bwkey
*     INTO CORRESPONDING FIELDS OF TABLE it_t001w
*     FROM t001w.
*
*
*
*
*
*
** FIND MAINTENACE CONTRACTS FOR THE SELECTED EQUIPMENTS
*
*  SELECT equnr sdaufnr posnr
*    INTO CORRESPONDING FIELDS OF TABLE it_viser02
*  FROM viser02
*  FOR ALL ENTRIES IN it_equi
*  WHERE equnr = it_equi-equnr
*  AND  objvw = c_k
*  AND datum LE sy-datum.
*
*  IF sy-subrc NE 0.
*
*    MESSAGE i001.
*    EXIT.
*  ENDIF.
*
*
** * ALSO QUOTATIONS ARE INCLUDED- THEREFORE FILTER THEM OUT
*
*  SELECT a~vbeln a~kunnr a~erdat a~vkgrp
*    INTO CORRESPONDING FIELDS OF TABLE it_vbak
*  FROM vbak AS a
*  INNER JOIN vbpa AS b
*  ON a~vbeln = b~vbeln
*  FOR ALL ENTRIES IN it_viser02
*  WHERE a~vbeln = it_viser02-sdaufnr
*  AND (  a~auart = 'ZQP' OR a~auart = 'ZSM2' )
*    " AC RENTAL CONTRACTS AND AM SERVICE CONTRACTS
*  AND b~parvw = c_sp.   " sold-to-party
*
*  SORT it_vbak BY vbeln.
*
*
*
*
*  LOOP AT it_viser02.
*
*    READ TABLE it_vbak WITH KEY vbeln = it_viser02-sdaufnr BINARY SEARCH.
*    IF sy-subrc NE 0.
*      DELETE it_viser02.
*    ENDIF.
*  ENDLOOP.
*
** CHECK FOR AT LEAST ONE CONTRACT
*  READ TABLE it_viser02 INDEX 1.
*
*  IF sy-subrc NE 0.
*
*    MESSAGE i001.
*    EXIT.
*  ENDIF.
*
*
** FIND SALES INFO
*
*  SELECT vbeln posnr netwr kwmeng prodh
*  INTO CORRESPONDING FIELDS OF TABLE it_vbap
*  FROM vbap
*  FOR ALL ENTRIES IN it_vbak
*  WHERE vbeln = it_vbak-vbeln
*  AND pstyv = 'ZMVN'.    "AM MAINTENANCE CONTRACT ITEM
*
** FIND SALES PERSONS
*
*  LOOP AT it_vbak.
*
*    it_vkgrp-vkgrp = it_vbak-vkgrp.
*    APPEND it_vkgrp.
*
*
*  ENDLOOP.
*
*  SORT it_vkgrp BY vkgrp.
*  DELETE ADJACENT DUPLICATES FROM it_vkgrp.
*
*  SELECT *
*  INTO CORRESPONDING FIELDS OF TABLE it_tvgrt
*  FROM tvgrt
*  FOR ALL ENTRIES IN it_vkgrp
*  WHERE vkgrp = it_vkgrp-vkgrp
*  AND spras = 'E'.
*
** FIND CUSTOMER INFO
*
*  SELECT *
*   INTO CORRESPONDING FIELDS OF TABLE it_kna1
*    FROM kna1
*     FOR ALL ENTRIES IN it_vbak
*    WHERE kunnr = it_vbak-kunnr.
*
*  SORT it_kna1 BY kunnr.
*  DELETE ADJACENT DUPLICATES FROM it_kna1 COMPARING kunnr.
*
*
*
*
** FIND SUBSEQUENT INVOICES AND DELIVERIES
*  SELECT vbelv vbeln vbtyp_n
*    INTO CORRESPONDING FIELDS OF TABLE it_inv_deliv
*  FROM vbfa
*  FOR ALL ENTRIES IN it_vbak
*  WHERE vbelv = it_vbak-vbeln AND
*        ( vbtyp_n = 'M' OR
*         vbtyp_n = 'J' ).
*
*  SORT it_inv_deliv BY vbeln.
*
** FIND INVOICE INFO
*
*  SELECT belnr budat wrbtr INTO CORRESPONDING FIELDS OF TABLE it_bsid
*  FROM bsid
*  FOR ALL ENTRIES IN it_inv_deliv
*
*  WHERE belnr = it_inv_deliv-vbeln.
*
*  SORT it_bsid BY belnr.
*
** * FIND DELIVERY INFO
*  SELECT a~vbeln a~lfdat a~kunnr
*          b~lfimg b~prodh b~erdat
*  INTO CORRESPONDING FIELDS OF TABLE it_deliveries
* FROM likp AS a
* INNER JOIN lips AS b
* ON a~vbeln = b~vbeln
* FOR ALL ENTRIES IN it_inv_deliv
* WHERE a~vbeln = it_inv_deliv-vbeln.
*
*
*  SORT it_deliveries BY vbeln.
*
*
*
** FIND SENT DOCUMENTS
*
*  SELECT * FROM yse_i001_idoc
*  INTO CORRESPONDING FIELDS OF TABLE it_yse_i001_idoc.
*
*  SORT  it_yse_i001_idoc BY vbeln .
*  .
*
*
*
*  SORT it_equi BY swerk equnr.
*
*  SORT it_inv_deliv BY vbelv.
*
*
** * GET CONTRACT DATA
*
*  LOOP AT it_equi.
*
*    wa_equi = it_equi.
*
*
** GET STANDARD PRICE
*
*    READ TABLE it_t001w WITH KEY werks = wa_equi-swerk.
*
*    READ TABLE it_mbew WITH KEY matnr = wa_equi-matnr
*                                bwkey = it_t001w-bwkey   BINARY SEARCH.
*    MOVE it_mbew-stprs TO it_equi_delta-stprs.
*
*
** GET CONTRACT NRS AND DATA
*
*    LOOP AT it_viser02  WHERE equnr  = wa_equi-equnr.
*
*      MOVE-CORRESPONDING wa_equi TO it_equi_delta.
*      it_equi_delta-vbeln = it_viser02-sdaufnr.
*      it_equi_delta-contract_nr = it_viser02-sdaufnr.
*      it_equi_delta-vbtyp = 'G'.
*      it_equi_delta-kunnr = wa_equi-parnr.
*
*      READ TABLE it_vbap WITH KEY vbeln = it_viser02-sdaufnr
*                                  posnr = it_viser02-posnr
*                                  BINARY SEARCH.
*      READ TABLE it_vbak WITH KEY vbeln = it_viser02-sdaufnr
*      BINARY SEARCH.
*
*      READ TABLE it_kna1 WITH KEY kunnr = it_vbak-kunnr BINARY SEARCH.
*
**netwr zmeng prodh
*
*      it_equi_delta-quantity =  it_vbap-kwmeng.
*      it_equi_delta-net_value =  it_vbap-netwr.
*      it_equi_delta-prdha =  it_vbap-prodh.
*      it_equi_delta-document_date = it_vbak-erdat.
*
** GET CUSTOMER DATA
*      it_equi_delta-kunnr = it_vbak-kunnr.
*
*      SELECT SINGLE name1 street city1 post_code1 region country tel_number
*         INTO (it_equi_delta-kunnr_name1, it_equi_delta-kunnr_street, it_equi_delta-kunnr_city1,
*               it_equi_delta-kunnr_post_code1, it_equi_delta-kunnr_region, it_equi_delta-kunnr_country,
*               it_equi_delta-kunnr_tel_number)
*         FROM adrc
*         WHERE addrnumber = it_kna1-adrnr.
*
*
*
*
**  *  **  get address of functional location
*
*
*
**        READ TABLE it_equi WITH KEY equnr = it_equi_delta-equnr BINARY SEARCH.
*
*      IF wa_equi-adrnr NE space.
*
*        SELECT SINGLE name1 street city1 post_code1 region country tel_number name2
*            INTO (it_equi_delta-fl_name1, it_equi_delta-fl_street, it_equi_delta-fl_city1,
*                  it_equi_delta-fl_post_code1, it_equi_delta-fl_region, it_equi_delta-fl_country,
*                  it_equi_delta-fl_tel_number, it_equi_delta-fl_name2)
*            FROM adrc
*            WHERE addrnumber = wa_equi-adrnr.
*
*      ENDIF.
*
** GET SALES RESPONSABLE
*
*      READ TABLE it_vbak WITH KEY vbeln = it_equi_delta-vbeln.
*      READ TABLE it_tvgrt WITH KEY vkgrp = it_vbak-vkgrp.
*
*      it_equi_delta-sales_person = it_tvgrt-bezei.
*
*
*
*
*      APPEND it_equi_delta.
*
*
*    ENDLOOP.
*
*  ENDLOOP.
*
*
*
*
*
*
*
**  * CREATE ADDITIONAL IDOC RECORDS FOR DELIVERIES AND INVOICES
*
*
*
*  LOOP AT it_equi_delta.
*
*
*
*
** DELIVERIES AND INVOICES
*
*    LOOP AT it_inv_deliv WHERE vbelv = it_equi_delta-vbeln.
*
*
*      CLEAR: it_equi_delta-vbeln, it_equi_delta-vbtyp,it_equi_delta-document_date.
*      .
*      it_equi_delta-vbeln = it_inv_deliv-vbeln.
*
*      IF it_inv_deliv-vbtyp_n = 'J'.
*        it_equi_delta-vbtyp = 'J'. " DELIVERIES
*
**GET DELIVERY DATA
*
*
*        READ TABLE it_deliveries WITH KEY vbeln = it_equi_delta-vbeln BINARY SEARCH.
*        it_equi_delta-document_date = it_deliveries-erdat.
**      it_equi_delta-net_value = it_DELIVERIES-wrbtr.
*        it_equi_delta-quantity = it_deliveries-lfimg.
**      it_equi_delta-prdha = it_deliveries-prodh.
**      it_equi_delta-kunnr =  it_deliveries-kunnr.
*        it_equi_delta-delivery_date = it_deliveries-lfdat.
*
*
*
*      ELSE.
*        it_equi_delta-vbtyp = 'M'. " INVOICES
*
**GET INVOICE DATA
*        READ TABLE it_bsid WITH KEY belnr = it_equi_delta-vbeln BINARY SEARCH.
*        CLEAR  it_equi_delta-net_value.
*        it_equi_delta-document_date = it_bsid-budat.
*        it_equi_delta-net_value = it_bsid-wrbtr.
*
*
*
*      ENDIF.
*
*      APPEND it_equi_delta.
*
*
*
*    ENDLOOP.
*
*  ENDLOOP.
*
*  READ TABLE it_equi_delta INDEX 1.
*  IF sy-subrc NE 0.
*    WRITE: / 'No Idocs created'(i03).
*    EXIT.
*  ENDIF.
*
*
*************************************************************************
**       E N D - O F - S E L E C T I O N    E V E N T                   *
*************************************************************************
*END-OF-SELECTION .
*
*  IF it_equi_delta[] IS INITIAL .
*    WRITE: / 'No Idocs created'(i03).
*  ELSE.
*** Generate Idoc's
*    SORT it_equi_delta BY equnr.
*    PERFORM create_idocs.
*
*  ENDIF.
*
*  WRITE: / 'Job finished'(i02).
*
**--- S U B R O U T I N E S --------------------------------------------*
**&---------------------------------------------------------------------*
**&      Form  Validate_ALE_Configuration
**&---------------------------------------------------------------------*
*FORM validate_ale_configuration .
*
*  DATA: l_create_idoc     TYPE     c .
*
** CHECK IF IDOC CONFIGURATION IS READY AND IDOC CAN BE PROCESSED.
*  CALL FUNCTION 'ALE_MODEL_DETERMINE_IF_TO_SEND'
*    EXPORTING
*      message_type           = p_mestyp
*    IMPORTING
*      idoc_must_be_sent      = l_create_idoc
*    EXCEPTIONS
*      own_system_not_defined = 1
*      OTHERS                 = 2.
*
*  IF sy-subrc <> 0.
*    MESSAGE e029 WITH p_mestyp.
*    EXIT.
*  ENDIF.
*
*ENDFORM.                    " Validate_ALE_Configuration
**---------------------------------------------------------------------
**  FORM UNIT_CONVERSION
**---------------------------------------------------------------------
*FORM unit_conversion USING p_einheit
*                           p_fltp_wert
*                           p_char_wert
*                           p_decimal
*                           p_exponent.
*
*  CLEAR p_char_wert.
*  CHECK NOT ( p_fltp_wert IS INITIAL ).
*
*  CALL FUNCTION 'FLTP_CHAR_CONVERSION_FROM_SI'
*    EXPORTING
*      char_unit       = p_einheit
*      decimals        = p_decimal
*      exponent        = p_exponent
*      fltp_value_si   = p_fltp_wert
*      indicator_value = c_x
*      masc_symbol     = ' '
*    IMPORTING
*      char_value      = p_char_wert.
*
*ENDFORM.                    "UNIT_CONVERSION
**&---------------------------------------------------------------------*
**&      Form  Create_delta
**&---------------------------------------------------------------------*
**       Create internal table with creations/updates
**----------------------------------------------------------------------*
*FORM create_delta.
*
*  LOOP AT it_equi.
*
*    READ TABLE i_prev WITH KEY equnr = it_equi-equnr
*                    BINARY SEARCH.
*
*    IF sy-subrc = 0.
****** MUST BE UPDATED when structure of segment YAM_E1I001 is extended *
*      IF it_equi(533) <> i_prev(533).
*************************************************************************
*        MOVE-CORRESPONDING it_equi TO it_equi_delta.
*        MOVE c_c TO it_equi_delta-msgfn.
*        APPEND it_equi_delta.
*        CLEAR it_equi_delta.
*      ENDIF.
*    ELSE.
*      MOVE-CORRESPONDING it_equi TO it_equi_delta.
*      MOVE c_a TO it_equi_delta-msgfn.
*      APPEND it_equi_delta.
*      CLEAR it_equi_delta.
*    ENDIF.
*
*  ENDLOOP.
*
*ENDFORM.                    " Create_delta
**&---------------------------------------------------------------------*
**&      Form  Get_previous_file
**&---------------------------------------------------------------------*
**       Get file from previous run
**----------------------------------------------------------------------*
*FORM get_previous_file USING p_swerk
*                    CHANGING p_retcd.
*
** prepare filename of previous run
*  CLEAR g_ersda.
*  SELECT ersda INTO g_ersda
*      FROM yam_i001 WHERE swerk = p_swerk.
*  ENDSELECT.
*
*  IF sy-subrc <> 0.
*    WRITE: / text-e02, p_swerk.       "No filename of previous run
**                                   available in custom table YAM_I001
*    p_retcd = 4.
*    EXIT.
*  ENDIF.
*
*  CONCATENATE c_yam_i001 p_swerk g_ersda
*                      INTO g_pfile SEPARATED BY c_underscore.
*  REPLACE 'xxx' IN g_directory WITH p_logsys(3).
*  CONCATENATE g_directory g_pfile INTO g_pfile.
*
** FILE READ FROM APPLICATION SERVER
*  PERFORM get_from_appl TABLES  i_prev
*                        USING   g_pfile
*                                p_retcd.
*
*ENDFORM.                    " Get_previous_file
**&---------------------------------------------------------------------*
**&      Form  Get_from_appl
**&---------------------------------------------------------------------*
**       Get the file from application server into internal table
**----------------------------------------------------------------------*
*FORM get_from_appl TABLES i_infile STRUCTURE i_prev
*                   USING p_infile p_subrc.
*
*  OPEN DATASET p_infile FOR INPUT IN TEXT MODE ENCODING DEFAULT.
*  IF sy-subrc <> 0.
*    WRITE: / text-e03, p_infile.
*    p_subrc = 4.
*    EXIT.
*  ENDIF.
*
*  REFRESH i_infile.
*
*  DO.
*    READ DATASET p_infile INTO i_infile.
*    IF sy-subrc <> 0.
*      EXIT.
*    ENDIF.
*    APPEND i_infile.
*  ENDDO.
*  CLOSE DATASET p_infile.
*
*ENDFORM.                    " GET_FROM_APPL
**&---------------------------------------------------------------------*
**&      Form  Write_outputfile
**&---------------------------------------------------------------------*
**       Write outputfile
**----------------------------------------------------------------------*
*FORM write_outputfile.
*
*  OPEN DATASET g_ofile FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.
*  IF sy-subrc <> 0.
*    WRITE: / text-e03, g_ofile.
**   message e011(YAM_DC).                      "Open dataset failed
*    g_retcd = 4.
*    EXIT.
*  ENDIF.
*
*  SORT it_equi BY equnr.
*
*  LOOP AT it_equi.
****** MUST BE UPDATED when structure of segment YAM_E1I001 is extended
*    TRANSFER it_equi(555) TO g_ofile.
*************************************************************************
*  ENDLOOP.
*
*ENDFORM.                    " Write_outputfile
**&---------------------------------------------------------------------*
**&      Form  Update_custom_table
**&---------------------------------------------------------------------*
**       Update custom table YAM_I001
**----------------------------------------------------------------------*
*FORM update_custom_table USING p_swerk.
*
*  wa_yam_i001-mandt = sy-mandt.
*  wa_yam_i001-swerk = p_swerk.
*  wa_yam_i001-ersda = g_ersda.
*
*  INSERT yam_i001 FROM wa_yam_i001.
*
*ENDFORM.                    " Update_custom_table
**&---------------------------------------------------------------------*
**&      Form  Create_IDocs
**&---------------------------------------------------------------------*
**       Create Idoc's
**----------------------------------------------------------------------*
*FORM create_idocs .
*
*  DATA: g_created_comm_idocs TYPE sy-tabix .
*  CLEAR : i_edidc_control_comm ,
*          wa_edidc             ,
*          i_edidd_data         .
*
** FIND RECEIVING PARTNER
*  SELECT SINGLE rcvprn INTO wa_edidc-rcvprn
*  FROM edp13
*  WHERE mestyp = p_mestyp.
*** Polulate Control Record
*  wa_edidc-mestyp =  p_mestyp.
*  wa_edidc-idoctp =  c_idoc_type.
*  wa_edidc-rcvprt =  c_ls.
** wa_edidc-rcvprn =  p_logsys .
*
*** Create Idoc's for every new Equipment Number
*  LOOP AT it_equi_delta.
*
*
** CHECK IF THIS INFORMATION IS ALREADY SENT TO CRM
*    MOVE-CORRESPONDING it_equi_delta TO wa_yse_i001_idoc.
*    READ TABLE it_yse_i001_idoc  FROM wa_yse_i001_idoc.
*    IF sy-subrc EQ 0.
*      CONTINUE.
*    ENDIF.
*
*
*
*
*    wa_equi_delta = it_equi_delta.
*
*    APPEND  wa_yse_i001_idoc TO it_yse_i001_idoc.
*
*
*
*    CLEAR i_edidd_data[] .
*    i_edidd_data-segnam  = c_segment  .
*    i_edidd_data-sdata   = wa_equi_delta.
*    APPEND i_edidd_data .
*
*
*
*
*
*** Generate Idoc's
*
*    CALL FUNCTION 'MASTER_IDOC_DISTRIBUTE'
*      EXPORTING
*        master_idoc_control            = wa_edidc
*      TABLES
*        communication_idoc_control     = i_edidc_control_comm
*        master_idoc_data               = i_edidd_data
*      EXCEPTIONS
*        error_in_idoc_control          = 1
*        error_writing_idoc_status      = 2
*        error_in_idoc_data             = 3
*        sending_logical_system_unknown = 4
*        OTHERS                         = 5.
*
*    IF sy-subrc <> 0.
*
*
*    ELSE.
*      DESCRIBE TABLE i_edidc_control_comm LINES sy-tfill.
*      ADD sy-tfill TO g_created_comm_idocs.
*
*      READ TABLE i_edidc_control_comm INDEX 1.
*
*      REFRESH i_edidc_control_comm.
*
*
*      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
*
*      CALL FUNCTION 'EDI_DOCUMENT_DEQUEUE_LATER'
*        EXPORTING
*          docnum                 = i_edidc_control_comm-docnum
*        EXCEPTIONS
*          idoc_is_not_to_dequeue = 1
*          OTHERS                 = 2.
*
** set creation flag
*
** *     it_yse_i001_created-idoc_created = 'X'.
*
*
*
*    ENDIF.
*
*
*
*  ENDLOOP .
*
*  WRITE: / text-i01, g_created_comm_idocs .
*
*  PERFORM update_idoc_table TABLES it_yse_i001_idoc.
*
*
*
*ENDFORM.                    " Create_IDocs
**&---------------------------------------------------------------------*
**&      Form  Delete_old_files
**&---------------------------------------------------------------------*
**       Delete files from former runs on application server
**----------------------------------------------------------------------*
*FORM delete_old_files.
*
*  DATA: g_dir_name LIKE epsf-epsdirnam,
*        g_dfile    LIKE epsf-epsfilnam.
*
*  LOOP AT i_delfiles.
*
*    CONCATENATE c_yam_i001 i_delfiles-swerk i_delfiles-ersda
*                         INTO g_dfile SEPARATED BY c_underscore.
*
*    MOVE g_directory TO g_dir_name.
*    REPLACE 'xxx' IN g_dir_name WITH p_logsys(3).
*    TRANSLATE g_dir_name(10) TO LOWER CASE.
*    TRANSLATE g_dir_name+17(8) TO LOWER CASE.
*
** change MJ 20090602
**    CALL FUNCTION 'EPS_DELETE_FILE'
*    call function 'YSE_EPS_DELETE_FILE'
*      EXPORTING
*        file_name = g_dfile
*        dir_name  = g_dir_name.
*
*    IF sy-subrc <> 0.
*      WRITE: / text-e05, g_dfile.      "Could not delete file
*    ENDIF.
*
*  ENDLOOP.
*
*ENDFORM.                    "delete_old_files
*
*
*
*
*
*
**ENDFORM.                    " UPDATE_IDOC_CREATED_TABLE
**&---------------------------------------------------------------------*
**&      Form  ERROR
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**      -->P_IT_EQUI_DELTA  text
**----------------------------------------------------------------------*
*FORM error  USING    p_it_equi_delta STRUCTURE it_equi_delta.
*
*
*ENDFORM.                    " ERROR
**&---------------------------------------------------------------------*
**&      Form  UPDATE_YSE_I001_BYPLANT
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**  -->  p1        text
**  <--  p2        text
**----------------------------------------------------------------------*
*FORM update_yse_i001_byplant TABLES p_s_swerk STRUCTURE s_swerk.
*
*  LOOP AT p_s_swerk.
*
*    it_yse_i001_byplant-swerk = p_s_swerk-low.
*
*    it_yse_i001_byplant-idoc_creat_date = sy-datum.
*    APPEND it_yse_i001_byplant.
*
*
*  ENDLOOP.
*
*  MODIFY yse_i001_byplant FROM TABLE it_yse_i001_byplant.
*
*  COMMIT WORK.
*
*
*
*ENDFORM.                    " UPDATE_YSE_I001_BYPLANT
**&---------------------------------------------------------------------*
**&      Form  update_idoc_table
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**      -->P_IT_YSE_I001_IDOC  text
**----------------------------------------------------------------------*
*FORM update_idoc_table  TABLES   p_it_yse_i001_idoc
*  STRUCTURE it_yse_i001_idoc .
*
*
*  MODIFY  yse_i001_idoc FROM TABLE p_it_yse_i001_idoc.
*
*  IF sy-subrc NE 0.
*    MESSAGE e000.
*  ELSE.
*    COMMIT WORK.
*
*  ENDIF.
*
*
*

*ENDFORM.                    " update_idoc_table
*Text symbol text£º
*001: PROGRAM DESACTIVATED !!
*E01:No data available for the Selected Plant :
*E02:No previous run entry found in custom table YAM_I001 for plant :
*E03:Open dataset failed for :
*E04:No counter found for measurement point :
*E05:Could not delete file :
*E06:Could not delete entrie(s) in table YAM_I001 for :
*I01:Number of Idocs created :

*I02:Job finished
*Selection text£º
*P_INWRK:        Plant to be initial loaded
*P_MESTYP:        Message Type
*S_EQUNR:D       .
*S_SWERK:D       .
