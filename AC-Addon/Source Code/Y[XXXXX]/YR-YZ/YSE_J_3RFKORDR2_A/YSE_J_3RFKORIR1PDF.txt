***INCLUDE J_3RFKORIR1PDF COPY FROM RFKORI50PDF .

*-----------------------------------------------------------------------
*       FORM AUSGABE_KASSENBELEG
*-----------------------------------------------------------------------
FORM AUSGABE_KASSENBELEG.
data: bp_name like tcj_documents-bp_name.
DATA: nn type i.
data:              "N_UMSKZ like t074-umskz,
      awkey like bkpf-awkey,
      dmbtr like bseg-dmbtr, int_numb type i,
      GL_ACCOUNT like TCJ_POSITIONS-GL_ACCOUNT,
      AL_ACCOUNT like TCJ_POSITIONS-GL_ACCOUNT.
data: fp_docparams   TYPE  sfpdocparams ,
*                             To store document parameters of PDF
      error_string   TYPE  string .
*                             To store error string on faulty execution
*                             of function module call PDF form
    SORT HTCJ_POSITIONS.
    CLEAR RF140-WRSHB.
    CLEAR RF140-WAERS.
    clear h_cashor.
    LOOP AT HTCJ_POSITIONS.
      IF SY-TABIX = 1.
        TCJ_POSITIONS = HTCJ_POSITIONS.

        clear p_day. clear p_month. clear p_year.
        CALL FUNCTION 'J_3RF_DATE'
          EXPORTING
            F_DATE  = TCJ_DOCUMENTS-DOCUMENT_DATE
          IMPORTING
            F_DAY   = P_DAY
            F_MONTH = P_MONTH
            F_YEAR  = P_YEAR.

        CLEAR recipient-name1.
        CLEAR recipient-name2.
        CLEAR recipient-name3.
        CLEAR recip1-name1.
        CLEAR recip1-name2.
        CLEAR recip1-name3.
        PERFORM READ_PERNR.

   select single isocd from tcurc into isocod
        where     waers = tcj_documents-currency.  "#EC CI_GENBUFF

   select single ktext from tcurt into curtext
        where     waers = tcj_documents-currency
        and spras = SAVE_LANGU.  "#EC CI_GENBUFF

   if p_waers is initial.
     p_waers = t001-waers.
   endif.
        clear h_cashor-p_in. clear h_cashor-p_out.
        IF NOT TCJ_DOCUMENTS-H_RECEIPTS IS INITIAL.
          IF SAVE_LAND1 = 'KZ' and isocod = 'KZT'.
            clear nn.
            nn = TCJ_DOCUMENTS-H_RECEIPTS.
            TCJ_DOCUMENTS-H_RECEIPTS = nn.
          ENDIF.
*          ereignis = 510.
          h_cashor-p_in = 'X'.
        ELSE.
          IF SAVE_LAND1 = 'KZ' and isocod = 'KZT'.
            clear nn.
            nn = tcj_documents-H_PAYMENTS.
            tcj_documents-H_PAYMENTS = nn.
          ENDIF.
*          ereignis = 520.
          h_cashor-p_out = 'X'.
*S---------------------------------------------------
* for integration with HR. Read the personnel number,
* and read the passport data by the personnel number.

  if not pernr_kred is initial and
     pernr_kred ne pernr1_kred.
    TCJ_POSITIONS-PERNR = pernr_kred.
  else.
    TCJ_POSITIONS-PERNR = pernr1_kred.
  endif.
              passpstr = TCJ_DOCUMENTS-TEXT1.
            IF NOT TCJ_POSITIONS-PERNR IS INITIAL
               AND TCJ_DOCUMENTS-TEXT1 IS INITIAL.
                  PERFORM READ_PASSPORTDATA.
            ENDIF.
*S--e-------------------------------------------------
        ENDIF.
        CLEAR TCJ_TRANS_NAMES.
        LOOP AT HTCJ_TRANS_NAMES
          WHERE COMP_CODE       = TCJ_POSITIONS-COMP_CODE
          AND   TRANSACT_NUMBER = TCJ_POSITIONS-TRANSACT_NUMBER
          AND   LANGU           = SAVE_LANGU.
          TCJ_TRANS_NAMES = HTCJ_TRANS_NAMES.
          if longtr eq ''.
            tcj_trans_names-long_text = tcj_trans_names-transact_name.
          endif.
*S--------------------------------------------------------------
          IF SAVE_LAND1 = 'UA'.
            SET LOCALE LANGUAGE '8'.
            TRANSLATE TCJ_TRANS_NAMES-long_text TO LOWER CASE.
            SET LOCALE LANGUAGE SPACE.
          ENDIF.
*---------------------------------------------------------------
          EXIT.
        ENDLOOP.
        SELECT        * FROM  TCJ_TRANSACTIONS
               WHERE  COMP_CODE        = save_bukrs
               AND    TRANSACT_NUMBER  = TCJ_POSITIONS-TRANSACT_NUMBER.
        ENDSELECT.

        READ TABLE HTCJ_POSITIONS WITH KEY POSITION_TYPE = 'O'.
*S--b-------------------------------------------------
*        IF SAVE_LAND1 = 'UA'.
          IF CODE_MISSION = '1'.
            CODE_MIS_STR = HTCJ_POSITIONS-ALLOC_NMBR(2).
          ELSE.
            CODE_MIS_STR = ''.
          ENDIF.
*        ENDIF.
*S--e-------------------------------------------------
        CASE TCJ_POSITIONS-TRANSACT_TYPE.
          WHEN 'D'.
           TCJ_POSITIONS-CUSTOMER   = HTCJ_POSITIONS-CUSTOMER.
           SELECT  SINGLE NAME1 adrnr anred XCPDK FROM  KNA1
           INTO (BP_NAME, selection-addrnumber, save_anred, XCPDK)
    WHERE  KUNNR  = HTCJ_POSITIONS-CUSTOMER.
            SELECT  SINGLE   AKONT FROM  KNB1
            INTO TCJ_POSITIONS-GL_ACCOUNT
     WHERE  KUNNR  = HTCJ_POSITIONS-CUSTOMER
            AND    BUKRS  = SAVE_BUKRS.

  concatenate tcj_documents-POSTING_NUMBER HTCJ_POSITIONS-CAJO_NUMBER
                      save_bukrs into awkey.
  select single * from bkpf
     where bukrs eq save_bukrs
       and tcode eq 'FBCJ'
       and awtyp eq 'CAJO'
       and awkey eq awkey.
 if sy-subrc eq 0.
  select hkont from bseg into gl_account
     where bukrs eq save_bukrs
       and belnr eq bkpf-belnr
       and gjahr eq bkpf-gjahr
       and koart eq 'D'
       and saknr eq TCJ_POSITIONS-GL_ACCOUNT.
    TCJ_POSITIONS-GL_ACCOUNT = GL_ACCOUNT.
    exit.
  endselect.
 else.
*  tabname = 'J_3RF_FBCJ_SL'.
** Check if table J_3RF_FBCJ_SL exists
*  SELECT COUNT(*) FROM DD02L WHERE TABNAME =  tabname AND
*                                   AS4LOCAL = 'A'.
*IF sy-subrc eq 0.
*    SELECT SINGLE UMSKZ from (tabname) into N_UMSKZ
*          where     COMP_CODE = HTCJ_POSITIONS-COMP_CODE
*          and TRANSACT_NUMBER = HTCJ_POSITIONS-TRANSACT_NUMBER.
*
*  if sy-subrc eq 0.

    clear GL_ACCOUNT.
           SELECT SINGLE SKONT FROM T074
                 INTO GL_ACCOUNT
           WHERE KTOPL = T001-KTOPL AND
                 KOART = 'D' AND
                 UMSKZ = tcj_transactions-UMSKZ AND
                 HKONT = TCJ_POSITIONS-GL_ACCOUNT.
    IF SY-SUBRC eq 0.
      if not GL_ACCOUNT is initial.
        TCJ_POSITIONS-GL_ACCOUNT = GL_ACCOUNT.
      endif.
    ENDIF.

*  endif.
*ENDIF.
endif.
      WHEN 'K'.
        TCJ_POSITIONS-VENDOR_NO = HTCJ_POSITIONS-VENDOR_NO.
            SELECT  SINGLE NAME1 adrnr anred XCPDK FROM LFA1
           INTO (BP_NAME, selection-addrnumber, save_anred, XCPDK)
    WHERE  LIFNR  = HTCJ_POSITIONS-VENDOR_NO.
            SELECT  SINGLE   AKONT FROM  LFB1
            INTO TCJ_POSITIONS-GL_ACCOUNT
     WHERE  LIFNR  = HTCJ_POSITIONS-VENDOR_NO
            AND    BUKRS  = SAVE_BUKRS.
  concatenate tcj_documents-POSTING_NUMBER HTCJ_POSITIONS-CAJO_NUMBER
                      save_bukrs into awkey.
  select single * from bkpf
     where bukrs eq save_bukrs
       and tcode eq 'FBCJ'
       and awtyp eq 'CAJO'
       and awkey eq awkey.
 if sy-subrc eq 0.
  select hkont from bseg into gl_account
     where bukrs eq save_bukrs
       and belnr eq bkpf-belnr
       and gjahr eq bkpf-gjahr
       and koart eq 'K'
       and saknr eq TCJ_POSITIONS-GL_ACCOUNT.
    TCJ_POSITIONS-GL_ACCOUNT = GL_ACCOUNT.
    exit.
  endselect.
 else.
*  tabname = 'J_3RF_FBCJ_SL'.
** Check if table J_3RF_FBCJ_SL exists
*  SELECT COUNT(*) FROM DD02L WHERE TABNAME =  tabname AND
*                                   AS4LOCAL = 'A'.
*IF sy-subrc eq 0.
*
*    SELECT SINGLE UMSKZ from (tabname) into N_UMSKZ
*          where     COMP_CODE = HTCJ_POSITIONS-COMP_CODE
*          and TRANSACT_NUMBER = HTCJ_POSITIONS-TRANSACT_NUMBER.
*
*if sy-subrc eq 0.
clear GL_ACCOUNT.
           SELECT SINGLE SKONT FROM T074
                 INTO GL_ACCOUNT
           WHERE KTOPL = T001-KTOPL AND
                 KOART = 'K' AND
                 UMSKZ = tcj_transactions-UMSKZ AND
                 HKONT = TCJ_POSITIONS-GL_ACCOUNT.
    IF SY-SUBRC eq 0.
      if not GL_ACCOUNT is initial.
        TCJ_POSITIONS-GL_ACCOUNT = GL_ACCOUNT.
      endif.
    ENDIF.
*endif.
*ENDIF.
endif.
  ENDCASE.
*S------------------------------------------------------------
* Output the name of creditor or debtor and the name of recipient.
*
   clear ADDRESS_VALUE.
   clear BP_NAMESTR.
   concatenate save_anred bp_name into save_anred
     separated by space.
   CONDENSE save_anred.
   if TCJ_POSITIONS-TRANSACT_TYPE NA 'DK'. "GL types
     CONCATENATE recipient-name1 recipient-name2
          recipient-name3 tcj_documents-bp_name
              INTO BP_NAMESTR SEPARATED BY SPACE.
     CONDENSE BP_NAMESTR.
   else.  "DK transaction types
    IF save_anred NE tcj_documents-bp_name.
      IF recip1-name1 NE ''.
        CONCATENATE recip1-name1 recip1-name2
                    recip1-name3 tcj_documents-bp_name
            INTO BP_NAMESTR SEPARATED BY SPACE.
      ELSE.
        if xcpdk eq 'X'.
          select single name1 name2 name3 from tcj_cpd into
                    (ADDRESS_VALUE-name1, ADDRESS_VALUE-name2,
                     ADDRESS_VALUE-name3)
            where COMP_CODE eq save_bukrs
              and CAJO_NUMBER eq HTCJ_POSITIONS-CAJO_NUMBER
              and FISC_YEAR eq tcj_documents-FISC_YEAR
              and POSTING_NUMBER eq tcj_documents-POSTING_NUMBER.
            if sy-subrc eq 0.
              concatenate ADDRESS_VALUE-name1 ADDRESS_VALUE-name2
                 ADDRESS_VALUE-name3 into bp_namestr
                   separated by space.
              CONDENSE BP_NAMESTR.
            else.
              BP_NAMESTR = tcj_documents-bp_name.
            endif.
          if not pernr_kred is initial.
            if tcj_documents-bp_name is initial.
              clear BP_NAMESTR.
            endif.
            CONCATENATE BP_NAMESTR recipient-name1
                        recipient-name2 recipient-name3
              INTO BP_NAMESTR SEPARATED BY SPACE.
            CONDENSE BP_NAMESTR.
          endif.
        else.
          if SAVE_LAND1 = 'RU'.
            selection-nation = 'R'.
          endif.
          if SAVE_LAND1 = 'UA'.
            selection-nation = '8'.
          endif.
          if ( SAVE_LAND1 = 'RU' or SAVE_LAND1 = 'UA' ).
            CALL FUNCTION 'ADDR_GET'
              EXPORTING
                ADDRESS_SELECTION = SELECTION
              IMPORTING
                ADDRESS_VALUE     = ADDRESS_VALUE
              EXCEPTIONS
                ADDRESS_NOT_EXIST = 1
                OTHERS            = 2.
            if sy-subrc ne 0.
              clear selection-nation.
              CALL FUNCTION 'ADDR_GET'
                EXPORTING
                  ADDRESS_SELECTION = SELECTION
                IMPORTING
                  ADDRESS_VALUE     = ADDRESS_VALUE
                EXCEPTIONS
                  ADDRESS_NOT_EXIST = 1
                  OTHERS            = 2.
            endif.
            if sy-subrc eq 0.
              concatenate ADDRESS_VALUE-name1 ADDRESS_VALUE-name2
                 ADDRESS_VALUE-name3 into bp_namestr
                   separated by space.
              CONDENSE BP_NAMESTR.
            endif.
          endif.
*>>>>>> START OF COMMENT EXTUVE 20100805 CR1555
*          CONCATENATE BP_NAMESTR tcj_documents-bp_name
*              INTO BP_NAMESTR SEPARATED BY SPACE.
*>>>>>> END OF COMMENT EXTUVE 20100805 CR1555

        endif.
      ENDIF.
    ELSE.  "receipt recepient was not changed
      if xcpdk eq 'X'.
        select single name1 name2 name3 from tcj_cpd
                into (ADDRESS_VALUE-name1, ADDRESS_VALUE-name2,
                      ADDRESS_VALUE-name3)
          where COMP_CODE eq save_bukrs
            and CAJO_NUMBER eq HTCJ_POSITIONS-CAJO_NUMBER
            and FISC_YEAR eq tcj_documents-FISC_YEAR
            and POSTING_NUMBER eq tcj_documents-POSTING_NUMBER.
          if sy-subrc eq 0.
            concatenate ADDRESS_VALUE-name1 ADDRESS_VALUE-name2
               ADDRESS_VALUE-name3 into bp_namestr
                  separated by space.
            CONDENSE BP_NAMESTR.
          else.
            bp_namestr = tcj_documents-bp_name.
          endif.
      else.
        if SAVE_LAND1 = 'RU'.
          selection-nation = 'R'.
        endif.
        if SAVE_LAND1 = 'UA'.
          selection-nation = '8'.
        endif.
        if ( SAVE_LAND1 = 'RU' or SAVE_LAND1 = 'UA' ).
          CALL FUNCTION 'ADDR_GET'
            EXPORTING
                ADDRESS_SELECTION = SELECTION
            IMPORTING
                ADDRESS_VALUE     = ADDRESS_VALUE
            EXCEPTIONS
                ADDRESS_NOT_EXIST = 1
                OTHERS            = 2.
          if sy-subrc ne 0.
            clear selection-nation.
            CALL FUNCTION 'ADDR_GET'
              EXPORTING
                  ADDRESS_SELECTION = SELECTION
              IMPORTING
                  ADDRESS_VALUE     = ADDRESS_VALUE
              EXCEPTIONS
                  ADDRESS_NOT_EXIST = 1
                  OTHERS            = 2.
          endif.
          if sy-subrc eq 0.
            concatenate ADDRESS_VALUE-name1 ADDRESS_VALUE-name2
                 ADDRESS_VALUE-name3 into bp_namestr
                    separated by space.
            CONDENSE BP_NAMESTR.
          endif.
        endif.
      endif.
      if pernr_kred is initial or pernr_kred eq pernr1_kred.
        IF recip1-name1 NE ''.
          CONCATENATE recip1-name1 recip1-name2
                      recip1-name3
          INTO BP_NAMESTR SEPARATED BY SPACE.
          CONDENSE BP_NAMESTR.
        ENDIF.
      else.
        IF recip1-name1 NE ''.
          CONCATENATE recip1-name1 recip1-name2
                      recip1-name3 recipient-name1
                      recipient-name2 recipient-name3
          INTO BP_NAMESTR SEPARATED BY SPACE.
          CONDENSE BP_NAMESTR.
        ELSE.
          if ( tcj_documents-bp_name is initial
                                   and xcpdk = 'X' ).
            clear BP_NAMESTR.
          endif.
          CONCATENATE BP_NAMESTR recipient-name1
                    recipient-name2 recipient-name3
          INTO BP_NAMESTR SEPARATED BY SPACE.
          CONDENSE BP_NAMESTR.
        ENDIF.
      endif.
    ENDIF.
  endif.
*------------------------------------------------------------
    IF save_anred NE tcj_documents-bp_name.
      CONCATENATE BP_NAME tcj_documents-bp_name
      INTO TCJ_DOCUMENTS-BP_NAME
      SEPARATED BY SPACE.
    ENDIF.

    RF140-WAERS = TCJ_DOCUMENTS-CURRENCY.
    RF140-WRSHB = TCJ_DOCUMENTS-H_NET_AMOUNT +
                  TCJ_DOCUMENTS-H_TAX_AMOUNT.
    RF140-QBUIHB = RF140-WRSHB - TCJ_DOCUMENTS-H_NET_PAYMENT_WT.

    CLEAR SPELL.
    CLEAR hsubrc.
    CALL FUNCTION 'FI_CHECK_EXTENDED_WT'
         EXPORTING
              I_BUKRS              = SAVE_BUKRS
         EXCEPTIONS
              COMPONENT_NOT_ACTIVE = 1
*           NOT_FOUND            = 2
              OTHERS               = 3
              .
    IF SY-SUBRC <> 0.
      hsubrc = sy-subrc.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

    IF SY-SUBRC = 0.
      CALL FUNCTION 'SPELL_AMOUNT'
           EXPORTING
                LANGUAGE  = SAVE_LANGU
                CURRENCY  = RF140-WAERS
                AMOUNT    = TCJ_DOCUMENTS-H_NET_PAYMENT_WT
                FILLER    = ' '
           IMPORTING
                IN_WORDS  = SPELL
           EXCEPTIONS
                NOT_FOUND = 1
                TOO_LARGE = 2.

  clear e_rate.
  clear dspell.
  IF RF140-WAERS ne p_waers.
     CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
          EXPORTING
               DATE             = TCJ_DOCUMENTS-POSTING_DATE
               FOREIGN_AMOUNT   = TCJ_DOCUMENTS-H_NET_PAYMENT_WT
               FOREIGN_CURRENCY = RF140-WAERS
               LOCAL_CURRENCY   = P_WAERS
*         RATE             = 0
*         TYPE_OF_RATE     = 'M'
          IMPORTING
               exchange_rate    =  e_rate
*         foreign_factor   =
               LOCAL_AMOUNT     =  DMBTR
*         local_factor     =
*        exchange_ratex   =
          EXCEPTIONS
               NO_RATE_FOUND    = 1
               OVERFLOW         = 2
               NO_FACTORS_FOUND = 3
               NO_SPREAD_FOUND  = 4
               OTHERS           = 5.

      CALL FUNCTION 'SPELL_AMOUNT'
           EXPORTING
                LANGUAGE  = SAVE_LANGU
                CURRENCY  = P_WAERS
                AMOUNT    = DMBTR
                FILLER    = ' '
           IMPORTING
                IN_WORDS  = DSPELL
           EXCEPTIONS
                NOT_FOUND = 1
                TOO_LARGE = 2.

  endif.
    ELSE.
      CALL FUNCTION 'SPELL_AMOUNT'
           EXPORTING
                LANGUAGE  = SAVE_LANGU
                CURRENCY  = RF140-WAERS
                AMOUNT    = RF140-WRSHB
                FILLER    = ' '
           IMPORTING
                IN_WORDS  = SPELL
           EXCEPTIONS
                NOT_FOUND = 1
                TOO_LARGE = 2.

  clear e_rate.
  clear dspell.
  IF RF140-WAERS ne p_waers.
     CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
          EXPORTING
               DATE             = TCJ_DOCUMENTS-POSTING_DATE
               FOREIGN_AMOUNT   = RF140-WRSHB
               FOREIGN_CURRENCY = RF140-WAERS
               LOCAL_CURRENCY   = p_waers
*         RATE             = 0
*         TYPE_OF_RATE     = 'M'
          IMPORTING
               exchange_rate    =  e_rate
*         foreign_factor   =
               LOCAL_AMOUNT     =  DMBTR
*         local_factor     =
*        exchange_ratex   =
          EXCEPTIONS
               NO_RATE_FOUND    = 1
               OVERFLOW         = 2
               NO_FACTORS_FOUND = 3
               NO_SPREAD_FOUND  = 4
               OTHERS           = 5.

      CALL FUNCTION 'SPELL_AMOUNT'
           EXPORTING
                LANGUAGE  = SAVE_LANGU
                CURRENCY  = P_WAERS
                AMOUNT    = DMBTR
                FILLER    = ' '
           IMPORTING
                IN_WORDS  = DSPELL
           EXCEPTIONS
                NOT_FOUND = 1
                TOO_LARGE = 2.
  else.
    dspell = spell.
    dmbtr = RF140-WRSHB.
  endif.

    ENDIF.

   select single isocd from tcurc into isocod
        where waers = tcj_documents-currency.  "#EC CI_GENBUFF

   select single ktext from tcurt into curtext
        where waers = tcj_documents-currency
        and spras = SAVE_LANGU.  "#EC CI_GENBUFF

   if not p_alt is initial.
     select single ALTKT from SKB1 into TCJ_C_JOURNALS-GL_ACCOUNT
       where BUKRS eq SAVE_BUKRS
         and SAKNR eq TCJ_C_JOURNALS-GL_ACCOUNT.  "#EC CI_GENBUFF
     select single ALTKT from SKB1 into TCJ_POSITIONS-GL_ACCOUNT
       where BUKRS eq SAVE_BUKRS
         and SAKNR eq TCJ_POSITIONS-GL_ACCOUNT.  "#EC CI_GENBUFF
     select single ALTKT from SKB1 into TCJ_TRANSACTIONS-GL_ACCOUNT
       where BUKRS eq SAVE_BUKRS
         and SAKNR eq TCJ_TRANSACTIONS-GL_ACCOUNT.  "#EC CI_GENBUFF
   endif.

  Endif.
ENDLOOP.

*PERFORM FORM_END_2.
XPRINT = 'X'.
*ENDIF.

* get docparams
  clear h_archive_index.

  DATA lt_archive_index TYPE tfpdara.
  REFRESH lt_archive_index[].
  IF NOT h_archive_index IS INITIAL.
    APPEND h_archive_index TO lt_archive_index.

    fp_docparams-daratab = lt_archive_index.
  ENDIF.

*  clear h_cashor.
  IF NOT save_fm_name IS INITIAL.
    h_cashor-BUKRS = save_bukrs.
    h_cashor-BELNR = save_belnr.
    h_cashor-GJAHR = save_gjahr.
    h_cashor-BLDAT = tcj_documents-DOCUMENT_DATE.
    h_cashor-P_DAY = P_DAY.
    h_cashor-P_MONTH = P_MONTH.
    h_cashor-P_YEAR = P_YEAR.

    if RB1 eq 'X'.
* FI document number
DATA:      ld_aworg LIKE acchd-aworg,
IT_DOCUMENTS like table of ACC_DOC with header line.
    clear save_belnr.
    if tcj_documents-document_status = 'P'.
      ld_aworg(4)   = tcj_documents-cajo_number.
      ld_aworg+4(4) = tcj_documents-comp_code.

CALL FUNCTION 'FI_DOCUMENT_RECORD'
  EXPORTING
    I_AWTYP            = 'CAJO'
    I_AWREF            = tcj_documents-posting_number
    I_AWORG            = ld_aworg
*   I_AWSYS            = ' '
*   I_AWTYP_INCL       = ' '
*   I_AWTYP_EXCL       = ' '
*   I_BUKRS            = ' '
  TABLES
    T_DOCUMENTS        = IT_DOCUMENTS[]
          .

    LOOP AT IT_DOCUMENTS.
      CHECK IT_DOCUMENTS-DOCNR NE SPACE.
      move IT_DOCUMENTS-DOCNR to save_belnr.
      exit.
    ENDLOOP.
    endif.

      h_cashor-ORDNUMBER = save_belnr.
    else.
      h_cashor-ORDNUMBER = tcj_documents-DOCUMENT_NUMBER.
    endif.
    h_cashor-CCNAME = BUTXT.
*    h_cashor-SUBDNAME =
*    h_cashor-SUBDCODE =
    h_cashor-OKPO = kokpo.
    h_cashor-CASH_ACCOUNT = TCJ_C_JOURNALS-GL_ACCOUNT.
    h_cashor-CORR_ACCOUNT = TCJ_POSITIONS-GL_ACCOUNT.
    if TCJ_TRANSACTIONS-TRANSACT_TYPE = 'D'.
      h_cashor-CORR_CODE = TCJ_POSITIONS-CUSTOMER.
    elseif TCJ_TRANSACTIONS-TRANSACT_TYPE = 'K'.
      h_cashor-CORR_CODE = TCJ_POSITIONS-VENDOR_NO.
    endif.
    h_cashor-FROMTO = BP_NAMESTR.
    h_cashor-REASON = TCJ_TRANS_NAMES-long_text.
    h_cashor-APPENDIX = TCJ_POSITIONS-POSITION_TEXT.
    h_cashor-PURP_CODE = CODE_MIS_STR.
    if h_cashor-p_in = 'X'.
      h_cashor-WRBTR = tcj_documents-H_RECEIPTS.
    elseif h_cashor-p_out = 'X'.
      h_cashor-WRBTR = tcj_documents-H_PAYMENTS.
    endif.
    h_cashor-DMBTR = DMBTR.
    if E_RATE is initial.
      clear h_cashor-KURSF.
    else.
      h_cashor-KURSF = E_RATE.
    endif.
    condense h_cashor-KURSF no-gaps.
    clear h_cashor-INCLUDING.
    h_cashor-INCLUDING = TCJ_DOCUMENTS-TEXT2.
    h_cashor-WAERS = tcj_documents-currency.
* IMP RU Begin of insert
        if tcj_positions-pernr is not initial.
          select single name2 from pa0002 into h_cashor-pernrname2
            where pernr = tcj_positions-pernr.
        endif.
* IMP RU End of insert
    IF ( ISOCOD EQ 'RUB' OR ISOCOD EQ 'RUR' ).
      concatenate spell-word spell-decimal(2) text-001 into
             h_cashor-w_word separated by space.
      int_numb = spell-number.
      h_cashor-W_NUMBER = int_numb.
      condense h_cashor-W_NUMBER no-gaps.
      concatenate h_cashor-W_NUMBER text-003 spell-decimal(2) text-001
             into h_cashor-W_NUMBER separated by space.
      if not tcj_documents-h_tax_amount is initial.
        CALL FUNCTION 'SPELL_AMOUNT'
           EXPORTING
                LANGUAGE  = SAVE_LANGU
                CURRENCY  = h_cashor-WAERS
                AMOUNT    = tcj_documents-h_tax_amount
                FILLER    = ' '
           IMPORTING
                IN_WORDS  = SPELL
           EXCEPTIONS
                NOT_FOUND = 1
                TOO_LARGE = 2.
        int_numb = spell-number.
        h_cashor-INCLUDING = int_numb.
        condense h_cashor-INCLUDING no-gaps.
       concatenate text-004 h_cashor-INCLUDING text-003 spell-decimal(2)
             text-001 into h_cashor-INCLUDING separated by space.
      endif.
    ELSE.
      concatenate SPELL-WORD CURTEXT text-002 SPELL-DECIMAL(2) into
             h_cashor-w_word separated by space.
      int_numb = spell-number.
      h_cashor-W_NUMBER = int_numb.
      condense h_cashor-W_NUMBER no-gaps.
      concatenate h_cashor-W_NUMBER ISOCOD text-002 spell-decimal(2)
             into h_cashor-W_NUMBER separated by space.
      if not tcj_documents-h_tax_amount is initial.
        CALL FUNCTION 'SPELL_AMOUNT'
           EXPORTING
                LANGUAGE  = SAVE_LANGU
                CURRENCY  = h_cashor-WAERS
                AMOUNT    = tcj_documents-h_tax_amount
                FILLER    = ' '
           IMPORTING
                IN_WORDS  = SPELL
           EXCEPTIONS
                NOT_FOUND = 1
                TOO_LARGE = 2.
        int_numb = spell-number.
        h_cashor-INCLUDING = int_numb.
        condense h_cashor-INCLUDING no-gaps.
        concatenate text-004 h_cashor-INCLUDING ISOCOD text-002
           spell-decimal(2) into h_cashor-INCLUDING separated by space.
      endif.
    ENDIF.
    concatenate dspell-word dspell-decimal(2) text-001 into
           h_cashor-p_word separated by space.
    int_numb = dspell-number.
    h_cashor-p_NUMBER = int_numb.
    condense h_cashor-p_NUMBER no-gaps.
    concatenate h_cashor-p_NUMBER text-003 dspell-decimal(2) text-001
           into h_cashor-p_NUMBER separated by space.
    h_cashor-CHIEF = TCJ_C_JOURNALS-PERSON2.
    h_cashor-SHIEFPOST = TCJ_C_JOURNALS-TEXT.
    h_cashor-CHIEFACC = TCJ_C_JOURNALS-PERSON1.
    h_cashor-CASHIER = cashier_full_name.
    h_cashor-PASSPSTR = passpstr.
* IMP RU Begin of insert
   h_cashor-TEXT1 = tcj_documents-text1.
   h_cashor-TEXT2 = tcj_documents-text2.
   h_cashor-REFERENCE = tcj_documents-document_number.
* IMP RU End of insert
* call the generated function module
* set locale
    select single spras from T002C into fp_docparams-langu
       where spras = save_langu
         and LAINST = 'X'.
    if sy-subrc eq 0.
      fp_docparams-country = save_land1.
    else.
      fp_docparams-langu = sy-langu.
    endif.
*  fp_docparams-replangu1 = 'E'. "hardcoded fallback

    CALL FUNCTION save_fm_name
     EXPORTING
       /1bcdwb/docparams        = fp_docparams
       h_cashor                 = h_cashor
*  IMPORTING
*    /1BCDWB/FORMOUTPUT       =
  EXCEPTIONS
    USAGE_ERROR              = 1
    SYSTEM_ERROR             = 2
    INTERNAL_ERROR           = 3
    OTHERS                   = 4
              .
    IF sy-subrc <> 0.
 MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.

      CALL FUNCTION 'FP_GET_LAST_ADS_ERRSTR'
        IMPORTING
          e_adserrstr = error_string.

      MESSAGE e000 WITH error_string .

    ENDIF.


  ELSE.
    MESSAGE e848 WITH t001f-fornr_pdf  ' ' ' ' ' ' .
  ENDIF.

ENDFORM.

*S---------------------------------------------------------------------*
*      Form  READ_passportDATA
*---------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
FORM READ_PASSPORTDATA.

   DATA lv_exist TYPE C.
*  DATA tabname(8) TYPE C.
*  tabname = 'PA0290'.
** Check if table PA0290 exists
*  SELECT COUNT(*) FROM DD02L WHERE TABNAME =  tabname AND
*                                   AS4LOCAL = 'A'.
*  IF sy-subrc NE 0.
*    EXIT.
*  ENDIF.
*  SELECT SINGLE SERIA SERI0 NOMER PASSL DATBG
*         FROM  (tabname) INTO CORRESPONDING FIELDS OF PASSPORT
*         WHERE  PERNR  = TCJ_POSITIONS-PERNR.
*  if sy-subrc = 0.
*    write passport-datbg to passport-datbn dd/mm/yyyy.
*    concatenate text-303 '^' passport-seria text-304
*    passport-seri0 '^' passport-nomer '^'
*    text-305 '^' passport-passl '^'
*    passport-datbn into passpstr.
*    translate passpstr using '^ '.
*
*    CONDENSE PASSPSTR.
*  endif.
  "Checking the existence of FM on the remote system
  CALL FUNCTION 'CHECK_EXIST_LIMU_FUNC'
    DESTINATION gv_hrdest
    EXPORTING
      NAME            = 'HR_RU_J3R_GET_PASSPORT_DATA'
      AGGNAME         = ' '
    IMPORTING
      EXIST           = lv_exist
    EXCEPTIONS
      TR_INVALID_TYPE = 1
      OTHERS          = 2.

  IF SY-SUBRC = 0 AND lv_exist = 'X'.
    CALL FUNCTION 'HR_RU_J3R_GET_PASSPORT_DATA'
      DESTINATION gv_hrdest
      EXPORTING
        I_PERNR         = TCJ_POSITIONS-PERNR
        I_BEGDA         =	'19000101'
        I_ENDDA         = '99991231'
      IMPORTING
        E_PASSP_NUM     = passport-nomer  "char60
        E_PASSP_ISS_BY  = passport-passl  "char100
        E_PASSP_ISS_DAT = passport-datbg
        E_SERIAL        = passport-seria  "char20
      EXCEPTIONS
        PERNR_NOT_FOUND = 1
        OTHERS          = 2.
    IF SY-SUBRC <> 0.
* Begin IMP RU Delete
*      MESSAGE i130(J3R_LEGAL_FORMS) WITH TCJ_POSITIONS-PERNR.
* End IMP RU Delete
    ELSE.
      write passport-datbg to passport-datbn dd/mm/yyyy.
      concatenate text-303 passport-seria passport-nomer text-305
      passport-passl passport-datbn into passpstr separated by space.
      CONDENSE PASSPSTR.
    ENDIF.
  ENDIF.
ENDFORM.                               " READ_PERDATA

*S--------------------------------------------------------------------
* determine the personnel number.
*
FORM READ_PERNR.
  CLEAR pernr_kred.
  CLEAR pernr1_kred.
*  DATA tabname(8) TYPE C.
  DATA lv_exist type c.
  SELECT single pernr VENDOR_NO FROM  tcj_positions
               INTO (pernr_kred, vend)
         WHERE  comp_code        = htcj_positions-comp_code
         AND    cajo_number      = htcj_positions-cajo_number
         AND    posting_number   = htcj_positions-posting_number
         AND    position_type    = 'O'.
  if not vend is initial.
    SELECT SINGLE PERNR FROM LFB1 INTO pernr1_kred
      WHERE LIFNR = vend
      AND   BUKRS = SAVE_BUKRS.
  endif.
  if not pernr_kred is initial or not pernr1_kred is initial.
*Looking up the remote destination of the HR system
    CALL FUNCTION 'J_3R_HR_GET_RFC_DEST_FI'
      EXPORTING
        COMPANY_CODE                  = htcj_positions-comp_code
      IMPORTING
        DESTINATION                   = gv_hrdest
      EXCEPTIONS
        ERROR_IN_FILTEROBJECTS        = 1
        ERROR_IN_ALE_CUSTOMIZING      = 2
        NOT_UNIQUE_RECEIVER           = 3
        NO_RFC_DESTINATION_MAINTAINED = 4
        OTHERS                        = 5.
    IF SY-SUBRC <> 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
              WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  "Checking the existence of FM on the remote system
  clear lv_exist.
  CALL FUNCTION 'CHECK_EXIST_LIMU_FUNC'
    DESTINATION gv_hrdest
    EXPORTING
      NAME            = 'HR_RU_J3R_GET_PERNR_NAME'
      AGGNAME         = ' '
    IMPORTING
      EXIST           = lv_exist
    EXCEPTIONS
      TR_INVALID_TYPE = 1
      OTHERS          = 2.
  IF SY-SUBRC = 0 AND lv_exist = 'X'.
   if not pernr_kred is initial.
    CLEAR lv_exist.
    "Added to work with decoupled HR systems
    CALL FUNCTION 'HR_RU_J3R_GET_PERNR_NAME'
      DESTINATION gv_hrdest
      EXPORTING
        I_PERNR              = pernr_kred
        I_BEGDA              = sy-datum
        I_ENDDA              = sy-datum
      IMPORTING
        E_NACHN              = RECIPIENT-NAME1
        E_VORNA              = RECIPIENT-NAME2
        E_MIDNM              = RECIPIENT-NAME3
*        E_INITI              = ev_name_init
      EXCEPTIONS
        INFTY_0002_NOT_FOUND = 1
        OTHERS               = 2.
    IF SY-SUBRC <> 0.
      MESSAGE i132(J3R_LEGAL_FORMS) WITH pernr_kred.
    ENDIF.
   endif.
   if not pernr1_kred is initial.
    CLEAR lv_exist.
    "Added to work with decoupled HR systems
    CALL FUNCTION 'HR_RU_J3R_GET_PERNR_NAME'
      DESTINATION gv_hrdest
      EXPORTING
        I_PERNR              = pernr1_kred
        I_BEGDA              = sy-datum
        I_ENDDA              = sy-datum
      IMPORTING
        E_NACHN              = RECIP1-NAME1
        E_VORNA              = RECIP1-NAME2
        E_MIDNM              = RECIP1-NAME3
*        E_INITI              = ev_name_init
      EXCEPTIONS
        INFTY_0002_NOT_FOUND = 1
        OTHERS               = 2.
    IF SY-SUBRC <> 0.
      MESSAGE i132(J3R_LEGAL_FORMS) WITH pernr1_kred.
    ENDIF.
   endif.
  ENDIF.
endif.
*if not pernr_kred is initial.                        "
** Check if table PA0002 exists
*  tabname = 'PA0002'.
*  SELECT COUNT(*) FROM DD02L WHERE TABNAME =  tabname AND
*                                   AS4LOCAL = 'A'.
*  IF sy-subrc NE 0.
*    EXIT.
*  ENDIF.
*  SELECT  NACHN VORNA MIDNM  FROM (tabname)
*  INTO (RECIPIENT-NAME1, RECIPIENT-NAME2, RECIPIENT-NAME3)
*         WHERE  PERNR  = pernr_kred.
*  ENDSELECT.
*endif.
*  if not pernr1_kred is initial.
*    PERFORM READ_PERNR1.
*  endif.
ENDFORM.

*FORM READ_PERNR1.
*  DATA tabname(8) TYPE C.
*  tabname = 'PA0002'.
*if not pernr1_kred is initial.
** Check if table PA0002 exists
*  SELECT COUNT(*) FROM DD02L WHERE TABNAME =  tabname AND
*                                   AS4LOCAL = 'A'.
*  IF sy-subrc NE 0.
*    EXIT.
*  ENDIF.
*  SELECT  NACHN VORNA MIDNM  FROM (tabname)
*  INTO (RECIP1-NAME1, RECIP1-NAME2, RECIP1-NAME3)
*         WHERE  PERNR  = pernr1_kred.
*  ENDSELECT.
*endif.
*ENDFORM.                               " READ_LFB1


*---------------------------------------------------------------------*
*       FORM SEPARTXT                                                 *
*---------------------------------------------------------------------*
FORM SEPARTXT TABLES INPUT_TABLE STRUCTURE ITCSY
                       OUTPUT_TABLE STRUCTURE ITCSY.

  DATA: STR1(200),
        str2(200),
        cnt  type i,
        cnt1 type i,
        tx_stroka(200),
        AUXSTR(10),
        num_cnt type i.

  READ TABLE INPUT_TABLE INDEX 1.
  TX_STROKA = INPUT_TABLE-VALUE.
  READ TABLE INPUT_TABLE INDEX 2.
  NUM_CNT = INPUT_TABLE-VALUE.

  CLEAR CNT. CLEAR CNT1.
  CLEAR STR1. CLEAR STR2.
  CNT = NUM_CNT.
  CNT1 = STRLEN( TX_STROKA ).
  IF CNT1 LE NUM_CNT.
    STR1 = TX_STROKA.
    STR2 = ' '.
  ELSE.
    DO.
      MOVE TX_STROKA+CNT TO AUXSTR.
      IF AUXSTR(1) = ' '.
        MOVE TX_STROKA(CNT) TO STR1.
        MOVE TX_STROKA+CNT TO STR2.
        SHIFT STR2 LEFT DELETING LEADING SPACE.
        EXIT.
      ELSEIF CNT <= 0.
        MOVE TX_STROKA(NUM_CNT) TO STR1.
        MOVE TX_STROKA+NUM_CNT TO STR2.
        EXIT.
      ENDIF.
      CNT = CNT - 1.
    ENDDO.
  ENDIF.

  READ TABLE OUTPUT_TABLE INDEX 1.
  OUTPUT_TABLE-VALUE = STR1.
  MODIFY OUTPUT_TABLE INDEX 1.
  READ TABLE OUTPUT_TABLE INDEX 2.
  OUTPUT_TABLE-VALUE = STR2.
  MODIFY OUTPUT_TABLE INDEX 2.

ENDFORM.
