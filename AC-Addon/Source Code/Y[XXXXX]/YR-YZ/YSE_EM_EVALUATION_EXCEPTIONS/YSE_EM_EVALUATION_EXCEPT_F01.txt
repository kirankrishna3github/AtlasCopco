*----------------------------------------------------------------------*
***INCLUDE YSE_EM_EVALUATION_EXCEPT_F01 .
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      FORM  CHECK_AUTHORIZATION
*&---------------------------------------------------------------------*
FORM CHECK_AUTHORIZATION .

  AUTHORITY-CHECK OBJECT 'M_MATE_WRK'
           ID 'ACTVT' DUMMY
           ID 'WERKS' FIELD P_WERKS.

  IF SY-SUBRC = 4.
*   No authorisation to display data
    MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '008' WITH P_WERKS.
  ELSEIF SY-SUBRC <> 0.
*   Error checking authorization
    MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '004'.
  ENDIF.

ENDFORM.                    " CHECK_AUTHORIZATION

*&---------------------------------------------------------------------*
*&      FORM  PREPARE_ALV_200
*&---------------------------------------------------------------------*
FORM PREPARE_ALV_200 .

  IF OBJ_CUST_CONT_200 IS INITIAL.
    IF CL_GUI_ALV_GRID=>OFFLINE( ) IS INITIAL.
      CREATE OBJECT OBJ_CUST_CONT_200
        EXPORTING
           CONTAINER_NAME              = 'CONTAINER_200'.
    ENDIF.

    CREATE OBJECT OBJ_ALV_GRID_200
      EXPORTING
        I_PARENT          = OBJ_CUST_CONT_200.

    PERFORM BUILD_FIELDCATALOG_200.

*   No toolbar for ALV grid
    WA_LAYOUT-NO_TOOLBAR = 'X'.
    WA_LAYOUT-CWIDTH_OPT = 'X'.
    WA_LAYOUT-SEL_MODE   = 'B'.

    CALL METHOD OBJ_ALV_GRID_200->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT                     = WA_LAYOUT
      CHANGING
        IT_OUTTAB                     = IT_ALV_OVERVIEW[]
        IT_FIELDCATALOG               = IT_FIELDCAT
      EXCEPTIONS
        INVALID_PARAMETER_COMBINATION = 1
        PROGRAM_ERROR                 = 2
        TOO_MANY_LINES                = 3
        OTHERS                        = 4.
  ELSE.

    WA_STABLE-ROW = 'X'.
    WA_STABLE-COL = 'X'.

    PERFORM GET_EXCEPTIONS USING P_VKORG P_WERKS.

    CALL METHOD OBJ_ALV_GRID_200->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE      = WA_STABLE
        I_SOFT_REFRESH = 'X'.

  ENDIF.

ENDFORM.                    " PREPARE_ALV_200

*&---------------------------------------------------------------------*
*&      FORM  BUILD_FIELDCATALOG_200
*&---------------------------------------------------------------------*
FORM BUILD_FIELDCATALOG_200.

  REFRESH IT_FIELDCAT.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME             = 'YSE_ALV_EV_EX'
   CHANGING
      CT_FIELDCAT                  = IT_FIELDCAT.

ENDFORM.                    " BUILD_FIELDCATALOG_200

*&---------------------------------------------------------------------*
*&      FORM  GET_EXCEPTIONS
*&---------------------------------------------------------------------*
* Get exceptions from table YSE_EM_LOG
*----------------------------------------------------------------------*
FORM GET_EXCEPTIONS USING P_P_VKORG P_P_WERKS.

  DATA:
    LV_DMAXSVAL LIKE YSE_ALV_EV_EX-DMAXSVAL,
    LV_NR_OF_EXCEPTIONS TYPE I.

  REFRESH:
    IT_EM_LOG,
    IT_ALV_OVERVIEW.

* Get the exceptions from YSE_EM_LOG for given SOrg / Plant
  SELECT      *
         INTO CORRESPONDING FIELDS OF TABLE IT_EM_LOG
         FROM YSE_EM_LOG
        WHERE VKORG EQ P_P_VKORG
          AND WERKS EQ P_P_WERKS.

* Sort by exception exception type (VKORG and WERKS are constants given)
  SORT IT_EM_LOG BY VKORG WERKS EXTYPNR.

* Fill table for output based on log lines read
  LOOP AT IT_EM_LOG.

*   Add Max Stock Value to total
    LV_DMAXSVAL         = LV_DMAXSVAL + IT_EM_LOG-DMAXSVAL.
*   Increase nr of exceptions for the exc type
    LV_NR_OF_EXCEPTIONS = LV_NR_OF_EXCEPTIONS + 1.

*   When last exception of a particular type is reached
    AT END OF EXTYPNR.
*     Save exception type, nr of lines and total max stock val
      IT_ALV_OVERVIEW-EXTYPNR  = IT_EM_LOG-EXTYPNR.
      IT_ALV_OVERVIEW-NRLINES  = LV_NR_OF_EXCEPTIONS.
      IT_ALV_OVERVIEW-DMAXSVAL = LV_DMAXSVAL.
      APPEND IT_ALV_OVERVIEW.
      CLEAR:
        LV_DMAXSVAL,
        LV_NR_OF_EXCEPTIONS.
    ENDAT.

  ENDLOOP.

* Add initial line for exception type 1 if none were found
  CLEAR: IT_ALV_OVERVIEW.
  READ TABLE IT_ALV_OVERVIEW WITH KEY EXTYPNR = '001'.
  IT_ALV_OVERVIEW-EXTYPDESC = TEXT-E01.
  IF SY-SUBRC NE 0.
    IT_ALV_OVERVIEW-EXTYPNR = 1.
    APPEND IT_ALV_OVERVIEW.
  ELSE.
    MODIFY IT_ALV_OVERVIEW INDEX SY-TABIX.
  ENDIF.

* Add initial line for exception type 2 if none were found
  CLEAR: IT_ALV_OVERVIEW.
  READ TABLE IT_ALV_OVERVIEW WITH KEY EXTYPNR = '002'.
  IT_ALV_OVERVIEW-EXTYPDESC = TEXT-E02.
  IF SY-SUBRC NE 0.
    IT_ALV_OVERVIEW-EXTYPNR = 2.
    APPEND IT_ALV_OVERVIEW.
  ELSE.
    MODIFY IT_ALV_OVERVIEW INDEX SY-TABIX.
  ENDIF.

* Add initial line for exception type 3 if none were found
  CLEAR: IT_ALV_OVERVIEW.
  READ TABLE IT_ALV_OVERVIEW WITH KEY EXTYPNR = '003'.
  IT_ALV_OVERVIEW-EXTYPDESC = TEXT-E03.
  IF SY-SUBRC NE 0.
    IT_ALV_OVERVIEW-EXTYPNR = 3.
    APPEND IT_ALV_OVERVIEW.
  ELSE.
    MODIFY IT_ALV_OVERVIEW INDEX SY-TABIX.
  ENDIF.

* Add initial line for exception type 4 if none were found
  CLEAR: IT_ALV_OVERVIEW.
  READ TABLE IT_ALV_OVERVIEW WITH KEY EXTYPNR = '004'.
  IT_ALV_OVERVIEW-EXTYPDESC = TEXT-E04.
  IF SY-SUBRC NE 0.
    IT_ALV_OVERVIEW-EXTYPNR = 4.
    APPEND IT_ALV_OVERVIEW.
  ELSE.
    MODIFY IT_ALV_OVERVIEW INDEX SY-TABIX.
  ENDIF.

* Add initial line for exception type 5 if none were found
  CLEAR: IT_ALV_OVERVIEW.
  READ TABLE IT_ALV_OVERVIEW WITH KEY EXTYPNR = '005'.
  IT_ALV_OVERVIEW-EXTYPDESC = TEXT-E05.
  IF SY-SUBRC NE 0.
    IT_ALV_OVERVIEW-EXTYPNR = 5.
    APPEND IT_ALV_OVERVIEW.
  ELSE.
    MODIFY IT_ALV_OVERVIEW INDEX SY-TABIX.
  ENDIF.

* Add initial line for exception type 6 if none were found
  CLEAR: IT_ALV_OVERVIEW.
  READ TABLE IT_ALV_OVERVIEW WITH KEY EXTYPNR = '006'.
  IT_ALV_OVERVIEW-EXTYPDESC = TEXT-E07.
  IF SY-SUBRC NE 0.
    IT_ALV_OVERVIEW-EXTYPNR = 6.
    APPEND IT_ALV_OVERVIEW.
  ELSE.
    MODIFY IT_ALV_OVERVIEW INDEX SY-TABIX.
  ENDIF.

* Add initial line for exception type 7 if none were found
  CLEAR: IT_ALV_OVERVIEW.
  READ TABLE IT_ALV_OVERVIEW WITH KEY EXTYPNR = '007'.
  IT_ALV_OVERVIEW-EXTYPDESC = TEXT-E06.
  IF SY-SUBRC NE 0.
    IT_ALV_OVERVIEW-EXTYPNR = 7.
    APPEND IT_ALV_OVERVIEW.
  ELSE.
    MODIFY IT_ALV_OVERVIEW INDEX SY-TABIX.
  ENDIF.

* Sort
  SORT IT_ALV_OVERVIEW BY EXTYPNR.

ENDFORM.                    " GET_EXCEPTIONS

*&---------------------------------------------------------------------*
*&      FORM  PREPARE_ALV_300
*&---------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
FORM PREPARE_ALV_300 .

  DATA:
    IT_SORT  TYPE LVC_T_SORT,
    WA_SORT  TYPE LVC_S_SORT.

* Set screen variable exception type description
  SV_EXTYPDESC = IT_ALV_OVERVIEW-EXTYPDESC.

* If control is initial
  IF OBJ_CUST_CONT_300 IS INITIAL.
    IF CL_GUI_ALV_GRID=>OFFLINE( ) IS INITIAL.
      CREATE OBJECT OBJ_CUST_CONT_300
        EXPORTING
           CONTAINER_NAME              = 'CONTAINER_300'.
    ENDIF.
    CREATE OBJECT OBJ_ALV_GRID_300
      EXPORTING
        I_PARENT          = OBJ_CUST_CONT_300.

    PERFORM BUILD_FIELDCATALOG_300.

*   No toolbar for ALV grid
    WA_LAYOUT-NO_TOOLBAR = 'X'.
    WA_LAYOUT-CWIDTH_OPT = 'X'.
    WA_LAYOUT-SEL_MODE   = 'A'.

*   Copy data to table with correct output format
    REFRESH: IT_ALV_DETAIL_OUT.
    SORT IT_ALV_DETAIL BY MATNR.
    LOOP AT IT_ALV_DETAIL.
      MOVE-CORRESPONDING IT_ALV_DETAIL TO IT_ALV_DETAIL_OUT.
      APPEND IT_ALV_DETAIL_OUT.
    ENDLOOP.

*   Define sort on material number
    WA_SORT-SPOS = 1.
    WA_SORT-FIELDNAME = 'MATNR'.
    WA_SORT-UP = 'X'.
    APPEND WA_SORT TO IT_SORT.

    CALL METHOD OBJ_ALV_GRID_300->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT                     = WA_LAYOUT
      CHANGING
        IT_SORT                       = IT_SORT
        IT_OUTTAB                     = IT_ALV_DETAIL_OUT[]
        IT_FIELDCATALOG               = IT_FIELDCAT
      EXCEPTIONS
        INVALID_PARAMETER_COMBINATION = 1
        PROGRAM_ERROR                 = 2
        TOO_MANY_LINES                = 3
        OTHERS                        = 4.
  ELSE.

    WA_STABLE-ROW = 'X'.
    WA_STABLE-COL = 'X'.

*   Reload exceptions from the database
    PERFORM GET_EXCEPTIONS USING P_VKORG P_WERKS.

*   Reload the exception type which was selected by the user on the first screen
    READ TABLE IT_ALV_OVERVIEW WITH KEY EXTYPNR = GV_EXTYPNR.
    REFRESH IT_ALV_DETAIL.

*   Reload exceptions of the type selected by the user on the first screen
    LOOP AT IT_EM_LOG WHERE EXTYPNR = IT_ALV_OVERVIEW-EXTYPNR.
      MOVE-CORRESPONDING IT_EM_LOG TO IT_ALV_DETAIL.
      APPEND IT_ALV_DETAIL TO IT_ALV_DETAIL.
    ENDLOOP.

*   Copy data to table with correct output format
    REFRESH: IT_ALV_DETAIL_OUT.
    SORT IT_ALV_DETAIL BY MATNR.
    LOOP AT IT_ALV_DETAIL.
      MOVE-CORRESPONDING IT_ALV_DETAIL TO IT_ALV_DETAIL_OUT.
      APPEND IT_ALV_DETAIL_OUT.
    ENDLOOP.

*   Define sort on material number
    WA_SORT-SPOS = 1.
    WA_SORT-FIELDNAME = 'MATNR'.
    WA_SORT-UP = 'X'.
    APPEND WA_SORT TO IT_SORT.

    CALL METHOD OBJ_ALV_GRID_300->SET_SORT_CRITERIA
      EXPORTING
        IT_SORT                   = IT_SORT.
    IF SY-SUBRC <> 0.
    ENDIF.

    CALL METHOD OBJ_ALV_GRID_300->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE      = WA_STABLE
        I_SOFT_REFRESH = 'X'.

  ENDIF.

ENDFORM.                    " PREPARE_ALV_300

*&---------------------------------------------------------------------*
*&      FORM  BUILD_FIELDCATALOG_300
*&---------------------------------------------------------------------*
FORM BUILD_FIELDCATALOG_300 .

  FIELD-SYMBOLS:
    <FIELDCAT> TYPE LVC_S_FCAT.

  REFRESH IT_FIELDCAT.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME             = 'YSE_EM_LOG_OUT'
    CHANGING
      CT_FIELDCAT                  = IT_FIELDCAT.

ENDFORM.                    " BUILD_FIELDCATALOG_300

*&---------------------------------------------------------------------*
*&      Form  PREPARE_FLD_500
*&---------------------------------------------------------------------*
FORM PREPARE_FLD_500 .

FIELD-SYMBOLS:
    <FIELD>.

  DATA:
    LV_FIELDNAME TYPE STRING,
    LV_ROWNR     TYPE NUMC2,
    LV_TOTAL     TYPE I,
    LV_VALUE     TYPE I.

* Clear target structures
  CLEAR:
    YSE_EM_FCHDR,
    IT_FCVAL,
    IT_FCVAL[].

* Get forecast header values
  SELECT SINGLE *
           FROM YSE_EM_FCHDR
          WHERE MATNR EQ IT_ALV_DETAIL-MATNR
            AND WERKS EQ IT_ALV_DETAIL-WERKS.

* Get forecast detail values
  SELECT      *
         FROM YSE_EM_FCVAL
         INTO TABLE IT_FCVAL
        WHERE MATNR EQ IT_ALV_DETAIL-MATNR
            AND WERKS EQ IT_ALV_DETAIL-WERKS.

* Move forecast header values to screen variables
  SV_GWERT = YSE_EM_FCHDR-GWERT.
  SV_TWERT = YSE_EM_FCHDR-TWERT.
  SV_PRMAD = YSE_EM_FCHDR-PRMAD.
  SV_FSUMM = YSE_EM_FCHDR-FSUMM.

* Move forecast detail values to screen variables
  CLEAR LV_TOTAL.
  LOOP AT IT_FCVAL.

*   There are only 12 output lines, so exit when exceeding that number of lines
    IF SY-TABIX GT 12.
      EXIT.
    ENDIF.

*   Build fieldname of period field to be filled
    LV_ROWNR = SY-TABIX.
    CONCATENATE 'SV_PER' LV_ROWNR INTO LV_FIELDNAME.
    ASSIGN (LV_FIELDNAME) TO <FIELD>.
    IF SY-SUBRC NE 0. EXIT. ENDIF.
    <FIELD> = IT_FCVAL-PERNA.

*   Build fieldname of period field to be filled
    CONCATENATE 'SV_FCV' LV_ROWNR INTO LV_FIELDNAME.
    ASSIGN (LV_FIELDNAME) TO <FIELD>.
    IF SY-SUBRC NE 0. EXIT. ENDIF.
    LV_VALUE = IT_FCVAL-OWERT.

    <FIELD> = LV_VALUE.

*   Update total
    LV_TOTAL = LV_TOTAL + IT_FCVAL-OWERT.

  ENDLOOP.

  SV_FCV_SUM = LV_TOTAL.

ENDFORM.                    " PREPARE_FLD_500

*&---------------------------------------------------------------------*
*&      FORM  PREPARE_ALV_600
*&---------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
FORM PREPARE_ALV_600 .

  PERFORM GET_FCMSG.

  IF OBJ_CUST_CONT_600 IS INITIAL.
    IF CL_GUI_ALV_GRID=>OFFLINE( ) IS INITIAL.
      CREATE OBJECT OBJ_CUST_CONT_600
        EXPORTING
           CONTAINER_NAME              = 'CONTAINER_600'.
    ENDIF.

    CREATE OBJECT OBJ_ALV_GRID_600
      EXPORTING
        I_PARENT          = OBJ_CUST_CONT_600.

    PERFORM BUILD_FIELDCATALOG_600.

*   No toolbar for ALV grid
    WA_LAYOUT-NO_TOOLBAR = 'X'.
    WA_LAYOUT-CWIDTH_OPT = 'X'.

    CALL METHOD OBJ_ALV_GRID_600->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT                     = WA_LAYOUT
      CHANGING
        IT_OUTTAB                     = IT_FCMSG[]
        IT_FIELDCATALOG               = IT_FIELDCAT
      EXCEPTIONS
        INVALID_PARAMETER_COMBINATION = 1
        PROGRAM_ERROR                 = 2
        TOO_MANY_LINES                = 3
        OTHERS                        = 4.
  ELSE.

    WA_STABLE-ROW = 'X'.
    WA_STABLE-COL = 'X'.

    CALL METHOD OBJ_ALV_GRID_600->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE      = WA_STABLE
        I_SOFT_REFRESH = 'X'.
  ENDIF.

ENDFORM.                    " PREPARE_ALV_600

*&---------------------------------------------------------------------*
*&      FORM  BUILD_FIELDCATALOG_600
*&---------------------------------------------------------------------*
FORM BUILD_FIELDCATALOG_600 .

  FIELD-SYMBOLS:
    <FIELDCAT> TYPE LVC_S_FCAT.

  REFRESH IT_FIELDCAT.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME             = 'YSE_EM_FCMSG'
    CHANGING
      CT_FIELDCAT                  = IT_FIELDCAT.

  LOOP AT IT_FIELDCAT ASSIGNING <FIELDCAT>.

    CASE <FIELDCAT>-FIELDNAME.
      WHEN  'MANDT' OR 'MATNR' OR 'WERKS' OR 'POSN2'.
        <FIELDCAT>-NO_OUT = 'X'.

    ENDCASE.

  ENDLOOP.

ENDFORM.                    " BUILD_FIELDCATALOG_600

*&---------------------------------------------------------------------*
*&      Form  GET_FCMSG
*&---------------------------------------------------------------------*
FORM GET_FCMSG .

  CLEAR:
    IT_FCMSG,
    IT_FCMSG[].

  SELECT      *
         FROM YSE_EM_FCMSG
         INTO TABLE IT_FCMSG
        WHERE MATNR = IT_ALV_DETAIL-MATNR
          AND WERKS = IT_ALV_DETAIL-WERKS.

ENDFORM.                    " GET_FCMSG

*&---------------------------------------------------------------------*
*&      Form  SHOW_EXCEPTIONS_OF_TYPE
*&---------------------------------------------------------------------*
FORM SHOW_EXCEPTIONS_OF_TYPE .

* Get selected row in exception overview table
  CALL METHOD OBJ_ALV_GRID_200->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = IT_SEL_ROWS.
* Process first row
  READ TABLE IT_SEL_ROWS INDEX 1 INTO WA_SEL_ROWS.
* If a line was selected
  IF SY-SUBRC EQ 0.
*   Read the selected line from the overview internal table
    READ TABLE IT_ALV_OVERVIEW INDEX WA_SEL_ROWS-INDEX.
*   Save selected exception type (used when reloading data from DB)
    GV_EXTYPNR   = IT_ALV_OVERVIEW-EXTYPNR.
*   Refill table with all exceptions of the chosen exc type
    REFRESH IT_ALV_DETAIL.
    LOOP AT IT_EM_LOG WHERE EXTYPNR = IT_ALV_OVERVIEW-EXTYPNR.
      MOVE-CORRESPONDING IT_EM_LOG TO IT_ALV_DETAIL.
      APPEND IT_ALV_DETAIL.
    ENDLOOP.
*   Don't go to screen if table is empty, then go to screen 200
    DESCRIBE TABLE IT_ALV_DETAIL LINES SY-TFILL.
    IF SY-TFILL EQ 0.
*     Warn user "no exceptions for selected line"
      MESSAGE W032.
      CALL SCREEN 200.
    ELSE.
      CALL SCREEN 300.
    ENDIF.
* Otherwise: no line selected
  ELSE.
*   Warn user to select a complete line
    MESSAGE W033.
    CALL SCREEN 200.
  ENDIF.

ENDFORM.                    " SHOW_EXCEPTIONS_OF_TYPE

*&---------------------------------------------------------------------*
*&      Form  SHOW_SINGLE_EXCEPTION
*&---------------------------------------------------------------------*
FORM SHOW_SINGLE_EXCEPTION .

* Get selected rows in exception list of a particular exc type
  CALL METHOD OBJ_ALV_GRID_300->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = IT_SEL_ROWS.
* If no or multiple rows selected, issue message
  DESCRIBE TABLE IT_SEL_ROWS LINES SY-TFILL.
  IF SY-TFILL EQ 0 OR SY-TFILL GT 1.
    MESSAGE W034.
  ENDIF.
* Read rownumber of first row selected
  READ TABLE IT_SEL_ROWS INDEX 1 INTO WA_SEL_ROWS.
  IF SY-SUBRC EQ 0.
*   Read corresponding entry in IT_ALV_DETAIL
    READ TABLE IT_ALV_DETAIL INDEX WA_SEL_ROWS-INDEX.
    CALL SCREEN 400.
  ENDIF.

ENDFORM.                    " SHOW_SINGLE_EXCEPTION

*&---------------------------------------------------------------------*
*&      Form  ACCEPT_MULTIPLE
*&---------------------------------------------------------------------*
FORM ACCEPT_MULTIPLE .

  DATA:
    LV_INDEX             LIKE SY-INDEX,
    LV_ERROR.

* Get selected rows from the grid
  CLEAR: IT_SEL_ROWS, IT_SEL_ROWS[], LV_ERROR.
  CALL METHOD OBJ_ALV_GRID_300->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = IT_SEL_ROWS.

* Check that at least 1 line is selected
  DESCRIBE TABLE IT_SEL_ROWS LINES SY-TFILL.
  IF SY-TFILL LT 1.
    MESSAGE W035.
    EXIT.
  ENDIF.

* Start looping at selected rows
  CLEAR: LV_INDEX.
  LOOP AT IT_SEL_ROWS INTO WA_SEL_ROWS.

*   Read corresp line in table with exceptions of current type
    READ TABLE IT_ALV_DETAIL INDEX WA_SEL_ROWS-INDEX INTO IT_ALV_DETAIL.

*   Have the material updated
    PERFORM UPDATE_MATERIAL.

*   If successfully updated all tables
    IF GV_UPDATE_OK EQ 'X'.

*     Delete entries from YSE_EM_LOG
      DELETE FROM YSE_EM_LOG
                WHERE VKORG   = IT_ALV_DETAIL-VKORG
                  AND WERKS   = IT_ALV_DETAIL-WERKS
                  AND EXTYPNR = IT_ALV_DETAIL-EXTYPNR
                  AND MATNR   = IT_ALV_DETAIL-MATNR. "#EC CI_IMUD_NESTED
*     Commit table updates
      COMMIT WORK AND WAIT.

    ELSE.
*     Set local error flag (indicating whether mass update is succesfull)
      LV_ERROR = 'X'.
    ENDIF.

  ENDLOOP.

* If all materials updated succesfully
  IF LV_ERROR EQ SPACE.
*   Give succes message
    MESSAGE S036.
*   Go back to screen with overview per exception type
    CALL SCREEN 200.
  ELSE.
*   Give error message
    MESSAGE S037 DISPLAY LIKE 'E'.
  ENDIF.

ENDFORM.                    " ACCEPT_MULTIPLE

*&---------------------------------------------------------------------*
*&      Form  DELETE_SINGLE
*&---------------------------------------------------------------------*
FORM DELETE_SINGLE .

  DATA:
    LV_ANSWER.

  CLEAR GV_POSN2.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      TITLEBAR              = TEXT-002   " DELETE THIS EXEPTION ?
      TEXT_QUESTION         = TEXT-002
      DEFAULT_BUTTON        = '2'
      DISPLAY_CANCEL_BUTTON = SPACE
      POPUP_TYPE            = 'ICON_MESSAGE_WARNING'
    IMPORTING
      ANSWER                = LV_ANSWER.

* If the deletion should be done
  IF LV_ANSWER = '1'.
    DELETE YSE_EM_LOG FROM IT_ALV_DETAIL.
*   Log action
    MOVE-CORRESPONDING IT_ALV_DETAIL TO WA_ACTLOG.

    WA_ACTLOG-ACTION_DATE = SY-DATUM.
    WA_ACTLOG-ACTION_TIME = SY-UZEIT.
    WA_ACTLOG-CREATED_BY = SY-UNAME.
    WA_ACTLOG-ACTION_RESULT = TEXT-DEL.
*   Set log entry nr for current material
    GV_POSN2 = GV_POSN2 + 1.
    WA_ACTLOG-POSN2 = GV_POSN2.
    MODIFY YSE_EM_ACTLOG FROM WA_ACTLOG.
    COMMIT WORK AND WAIT.
    LEAVE TO SCREEN 300.
  ENDIF.

ENDFORM.                    " DELETE_SINGLE

*&---------------------------------------------------------------------*
*&      Form  ACCEPT_SINGLE
*&---------------------------------------------------------------------*
FORM ACCEPT_SINGLE.

* Have the material updated
  PERFORM UPDATE_MATERIAL.

* If no error occured
  IF GV_UPDATE_OK = 'X'.
*   Delete exception from YSE_EM_LOG
    DELETE FROM YSE_EM_LOG
           WHERE VKORG   = IT_ALV_DETAIL-VKORG
             AND WERKS   = IT_ALV_DETAIL-WERKS
             AND EXTYPNR = IT_ALV_DETAIL-EXTYPNR
             AND MATNR   = IT_ALV_DETAIL-MATNR.
*   Commit table updates
    COMMIT WORK AND WAIT.
*   Raise success message
    MESSAGE S038.
*   Go back to previous screen (overview of occurences of a specific exc type)
    CALL SCREEN 300.
  ELSE.
*   Give error message
    MESSAGE S039 DISPLAY LIKE 'E'.
  ENDIF.

ENDFORM.                    " ACCEPT_SINGLE

*&---------------------------------------------------------------------*
*&      Form  UPDATE_MATERIAL
*&---------------------------------------------------------------------*
* Update a material with details from IT_ALV_DETAIL
* Fields to be updated:
* ------------    -----------    ---------          -----------
* Curr val fld    Adj val fld    Update in	    Description
* ------------    -----------    ---------          -----------
* CUDIMO          ADDIMO         Material master    Distribution mode
* CUSTOPO         ADSTOPO        Material master    Stock policy
* BSTFE           ADLOSI         Material master    Lot size
* EISBE           ADEISBE        Material master    Safety stock
* MINBE           ADREPO         Material master    Reorder point
* CULSFL          ADLSFL         YSE_EM_MATPLANT    Lot size flag
*&---------------------------------------------------------------------*
FORM UPDATE_MATERIAL.

  DATA:
    LV_UPD_MM_REQ TYPE C,          " Update on material master required
    LV_UPD_MP_REQ TYPE C.          " Update on YSE_EM_MATPLANT required

* Clear some data/tables
  CLEAR:
    GV_UPDATE_OK,
    GV_POSN2,
    IT_MVKE.
  REFRESH:
    IT_MVKE.

* Determine if at least one parameter is different from what was logged from material
* master during exception run
  CLEAR: LV_UPD_MM_REQ, LV_UPD_MP_REQ.
  IF IT_ALV_DETAIL-CUDIMO NE IT_ALV_DETAIL-ADDIMO.
    LV_UPD_MM_REQ = 'X'.
  ENDIF.
  IF IT_ALV_DETAIL-CUSTOPO NE IT_ALV_DETAIL-ADSTOPO.
    LV_UPD_MM_REQ = 'X'.
  ENDIF.
  IF IT_ALV_DETAIL-BSTFE NE IT_ALV_DETAIL-ADLOSI.
    LV_UPD_MM_REQ = 'X'.
  ENDIF.
  IF IT_ALV_DETAIL-EISBE NE IT_ALV_DETAIL-ADEISBE.
    LV_UPD_MM_REQ = 'X'.
  ENDIF.
  IF IT_ALV_DETAIL-MINBE NE IT_ALV_DETAIL-ADREPO.
    LV_UPD_MM_REQ = 'X'.
  ENDIF.
  IF IT_ALV_DETAIL-CULSFL NE IT_ALV_DETAIL-ADLSFL.
    LV_UPD_MP_REQ = 'X'.
  ENDIF.

* If update not required (not on material master nor on YSE_EM_MATPLANT)
  IF LV_UPD_MM_REQ EQ SPACE AND LV_UPD_MP_REQ EQ SPACE.
*   Set succesflag so that exception will be deleted
    GV_UPDATE_OK = 'X'.
*   No further update required
    EXIT.
  ENDIF.

* If update on material master required
  IF LV_UPD_MM_REQ EQ 'X'.

*   Select sales data for current material in SOrgs 01, 02 and 11
    SELECT      *
           INTO TABLE IT_MVKE
           FROM MVKE
          WHERE MATNR EQ IT_ALV_DETAIL-MATNR
            AND VKORG EQ IT_ALV_DETAIL-VKORG
            AND VTWEG IN ('01','02','11').

*   Update the sales data views of the materials
    LOOP AT IT_MVKE.

*     Update master data for this material
      PERFORM UPDATE_MM.

    ENDLOOP.

  ENDIF.

* If material master update OK and if update on YSE_EM_MATPLANT required
  IF GV_UPDATE_OK NE SPACE AND LV_UPD_MP_REQ NE SPACE.

*   Update YSE_EM_MATPLANT for this material
    PERFORM UPDATE_MP.

  ENDIF.

ENDFORM.                    " UPDATE_MATERIAL

*&---------------------------------------------------------------------*
*&      FORM  UPDATE_MM
*&---------------------------------------------------------------------*
FORM UPDATE_MM.

  DATA:
    LV_RETURN     LIKE BAPIRET2,
    LV_HEADDATA   LIKE BAPIMATHEAD,
    LV_PLANTDATA  LIKE BAPI_MARC,
    LV_PLANTDATAX LIKE BAPI_MARCX,
    LV_SALESDATA  LIKE BAPI_MVKE,
    LV_SALESDATAX LIKE BAPI_MVKEX.

  REFRESH:
    IT_RETURNMESSAGES.
  CLEAR:
    WA_ACTLOG.

* ----------------------------------------------------------------------- *
* Part 1 - Fill the material structures depending on the required changes *
* ----------------------------------------------------------------------- *
* Set material
  LV_HEADDATA-MATERIAL = IT_ALV_DETAIL-MATNR.
* Set plant
  LV_PLANTDATA-PLANT   = IT_ALV_DETAIL-WERKS.
  LV_PLANTDATAX-PLANT  = IT_ALV_DETAIL-WERKS.

* If distribution has to be updated
  IF IT_ALV_DETAIL-CUDIMO NE IT_ALV_DETAIL-ADDIMO.

*   Translate item category depending on distribution mode
    CASE   IT_ALV_DETAIL-ADDIMO.
*     When DTC
*     WHEN C_DTC_DESC.
      WHEN C_DTC.
*       Set item category
        LV_SALESDATA-ITEM_CAT    = C_DTC.
        LV_SALESDATAX-ITEM_CAT   = 'X'.
*       Set material group 4
        LV_SALESDATA-MATL_GRP_4  = ' '.
        LV_SALESDATAX-MATL_GRP_4 = 'X'.
*     When NDTC
      WHEN C_NDTC_DESC.
*       Set item category
        LV_SALESDATA-ITEM_CAT    = C_NDTC.
        LV_SALESDATAX-ITEM_CAT   = 'X'.
*       Set material group 4
        LV_SALESDATA-MATL_GRP_4  = ' '.
        LV_SALESDATAX-MATL_GRP_4 = 'X'.
*     When local
      WHEN C_LCL_DESC.
*       Set item category
        LV_SALESDATA-ITEM_CAT    = C_NDTC.
        LV_SALESDATAX-ITEM_CAT   = 'X'.
*       Set material group 4
        LV_SALESDATA-MATL_GRP_4  = 'LCL'.
        LV_SALESDATAX-MATL_GRP_4 = 'X'.
    ENDCASE.

*   Set sales org
    LV_SALESDATA-SALES_ORG = IT_ALV_DETAIL-VKORG.
    LV_SALESDATAX-SALES_ORG = IT_ALV_DETAIL-VKORG.

*   Set distribution channel
    LV_SALESDATA-DISTR_CHAN = IT_MVKE-VTWEG.
    LV_SALESDATAX-DISTR_CHAN = IT_MVKE-VTWEG.

  ENDIF.

* Lot size
  IF IT_ALV_DETAIL-BSTFE NE IT_ALV_DETAIL-ADLOSI.
    LV_PLANTDATA-FIXED_LOT  = IT_ALV_DETAIL-ADLOSI.
    LV_PLANTDATAX-FIXED_LOT ='X'.
  ENDIF.

* Reorder point
  IF IT_ALV_DETAIL-MINBE NE IT_ALV_DETAIL-ADREPO.
    LV_PLANTDATA-REORDER_PT  = IT_ALV_DETAIL-ADREPO.
    LV_PLANTDATAX-REORDER_PT = 'X'.
  ENDIF.

* Safety stock
  IF IT_ALV_DETAIL-EISBE NE IT_ALV_DETAIL-ADEISBE.
    LV_PLANTDATA-SAFETY_STK  = IT_ALV_DETAIL-ADEISBE.
    LV_PLANTDATAX-SAFETY_STK = 'X'.
  ENDIF.

* Add MRP type
  LV_PLANTDATA-MRP_TYPE = IT_ALV_DETAIL-ADSTOPO.

* Avoid empty MRP types
  IF LV_PLANTDATA-MRP_TYPE IS INITIAL.
    LV_PLANTDATA-MRP_TYPE = C_NP.
  ENDIF.
  LV_PLANTDATAX-MRP_TYPE = 'X'.

* Set lot size key depending on (to-be) stock policy
  CASE LV_PLANTDATA-MRP_TYPE.
*   If stocked set lotsize key to FX
    WHEN C_ST.
      LV_PLANTDATA-LOTSIZEKEY  = 'FX'.
      LV_PLANTDATAX-LOTSIZEKEY = 'X'.
*   If not stocked set lotsize key to EX and lotsize to 0
    WHEN C_NS OR C_NP.
      LV_PLANTDATA-LOTSIZEKEY  = 'EX'.
      LV_PLANTDATAX-LOTSIZEKEY = 'X'.
      LV_PLANTDATA-FIXED_LOT   = 0.
      LV_PLANTDATAX-FIXED_LOT  = 'X'.
  ENDCASE.

* ----------------------------------------------------------------------- *
* Part 2 - Update material master                                         *
* ----------------------------------------------------------------------- *

* Have the material update done by BAPI
  CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
    EXPORTING
      HEADDATA                   = LV_HEADDATA
      PLANTDATA                  = LV_PLANTDATA
      PLANTDATAX                 = LV_PLANTDATAX
      SALESDATA                  = LV_SALESDATA
      SALESDATAX                 = LV_SALESDATAX
   IMPORTING
      RETURN                     = LV_RETURN
   TABLES
      RETURNMESSAGES             = IT_RETURNMESSAGES.

* ----------------------------------------------------------------------- *
* Part 3 - Log entry of the acion on current exception                    *
* ----------------------------------------------------------------------- *

* Prepare log entry: move exception detail to action log
  MOVE-CORRESPONDING IT_ALV_DETAIL TO WA_ACTLOG.

  WA_ACTLOG-CREATED_BY    = SY-UNAME.
  WA_ACTLOG-ACTION_DATE   = SY-DATUM.
  WA_ACTLOG-ACTION_TIME   = SY-UZEIT.

* If no error reported
  IF LV_RETURN-TYPE NE 'E'.

*   Set update flag
    GV_UPDATE_OK = 'X'.

*   Only log succes for distribution channel 01 OR if distribution channel is not filled
    IF IT_MVKE-VTWEG EQ '01' OR IT_MVKE-VTWEG IS INITIAL.
*     Set result: Material master updated for this exception
      WA_ACTLOG-ACTION_RESULT = TEXT-UPD.
*     Set log entry nr for current material
      GV_POSN2 = GV_POSN2 + 1.
      WA_ACTLOG-POSN2 = GV_POSN2.
*     Update DB table with action log entry
      MODIFY YSE_EM_ACTLOG FROM WA_ACTLOG.
*     Commit DB update
      COMMIT WORK AND WAIT.
    ENDIF.

* If error reported
  ELSE.

*   Clear update flag
    GV_UPDATE_OK = SPACE.

*   Set result: Material master update failed for this exception
    WA_ACTLOG-ACTION_RESULT = TEXT-FAI.
*   Set log entry nr for current material
    GV_POSN2 = GV_POSN2 + 1.
    WA_ACTLOG-POSN2 = GV_POSN2.
*   Update DB table
    MODIFY YSE_EM_ACTLOG FROM WA_ACTLOG..

*   Add error messages to log file for later analysis
    LOOP AT IT_RETURNMESSAGES WHERE TYPE = 'E'.
*     Set result
      WA_ACTLOG-ACTION_RESULT = IT_RETURNMESSAGES-MESSAGE.
*     Set log entry nr for current material
      GV_POSN2 = GV_POSN2 + 1.
      WA_ACTLOG-POSN2 = GV_POSN2.
*     Update DB table
      MODIFY YSE_EM_ACTLOG FROM WA_ACTLOG.
    ENDLOOP.

*   Commit DB updates
    COMMIT WORK AND WAIT.

  ENDIF.

* Commit to release the material
  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      WAIT          = 'X'.

ENDFORM.                    " UPDATE_MM

*&---------------------------------------------------------------------*
*&      Form  UPDATE_MP
*&---------------------------------------------------------------------*
FORM UPDATE_MP .

  DATA:
    WA_MATPLANT   TYPE YSE_EM_MATPLANT.

*   Get matplant as is now
    CLEAR WA_MATPLANT.
    SELECT SINGLE *
             FROM YSE_EM_MATPLANT
             INTO WA_MATPLANT
            WHERE MATNR EQ IT_ALV_DETAIL-MATNR
              AND WERKS EQ IT_ALV_DETAIL-WERKS.
*   If failed, fill with default values
    IF SY-SUBRC NE 0.
      WA_MATPLANT-MANDT       = SY-MANDT.
      WA_MATPLANT-MATNR       = IT_ALV_DETAIL-MATNR.
      WA_MATPLANT-WERKS       = IT_ALV_DETAIL-WERKS.
    ENDIF.
*   Update lot size flag in MATPLANT
    WA_MATPLANT-LOTSIZE_IND = IT_ALV_DETAIL-ADLSFL.
*   Have the DB table updated
    MODIFY YSE_EM_MATPLANT FROM WA_MATPLANT.
*   If succesfull
    IF SY-SUBRC EQ 0.
*     Set update OK flag (normally it's still set from material master update)
      GV_UPDATE_OK = 'X'.
*   If failed
    ELSE.
*     Clear update OK flag
      GV_UPDATE_OK = SPACE.

*     Prepare log entry: move exception detail to action log
      MOVE-CORRESPONDING IT_ALV_DETAIL TO WA_ACTLOG.

      WA_ACTLOG-CREATED_BY    = SY-UNAME.
      WA_ACTLOG-ACTION_DATE   = SY-DATUM.
      WA_ACTLOG-ACTION_TIME   = SY-UZEIT.
*     Set result: Matplant update failed for this exception
      WA_ACTLOG-ACTION_RESULT = TEXT-MPF.
*     Set log entry nr for current material
      GV_POSN2 = GV_POSN2 + 1.
      WA_ACTLOG-POSN2 = GV_POSN2.
*     Update DB table with action log entry
      MODIFY YSE_EM_ACTLOG FROM WA_ACTLOG.
*     Commit DB update
      COMMIT WORK AND WAIT.

    ENDIF.

ENDFORM.                    " UPDATE_MP
