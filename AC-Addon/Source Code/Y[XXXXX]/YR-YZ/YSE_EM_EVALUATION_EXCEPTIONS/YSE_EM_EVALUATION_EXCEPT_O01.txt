*----------------------------------------------------------------------*
***INCLUDE YSE_EM_EVALUATION_EXCEPT_O01.
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      MODULE  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
MODULE STATUS_0200 OUTPUT.

  SET PF-STATUS '200'.
  SET TITLEBAR '200'.

ENDMODULE.                 " STATUS_0200  OUTPUT

*&---------------------------------------------------------------------*
*&      MODULE  PREPARE_ALV_200  OUTPUT
*&---------------------------------------------------------------------*
MODULE PREPARE_ALV_200 OUTPUT.

  PERFORM PREPARE_ALV_200.

ENDMODULE.                 " PREPARE_ALV_200  OUTPUT

*&---------------------------------------------------------------------*
*&      MODULE  STATUS_0300  OUTPUT
*&---------------------------------------------------------------------*
MODULE STATUS_0300 OUTPUT.

  SET PF-STATUS '300'.
  SET TITLEBAR '300'.

ENDMODULE.                 " STATUS_0300  OUTPUT

*&---------------------------------------------------------------------*
*&      MODULE  PREPARE_ALV_300  OUTPUT
*&---------------------------------------------------------------------*
MODULE PREPARE_ALV_300 OUTPUT.

  PERFORM PREPARE_ALV_300.

ENDMODULE.                 " PREPARE_ALV_300  OUTPUT

*&---------------------------------------------------------------------*
*&      MODULE  STATUS_0400  OUTPUT
*&---------------------------------------------------------------------*
MODULE STATUS_0400 OUTPUT.

  SET PF-STATUS '400'.
  SET TITLEBAR '400'.

ENDMODULE.                 " STATUS_0400  OUTPUT

*&---------------------------------------------------------------------*
*&      MODULE  PREPARE_FLD_400  OUTPUT
*&---------------------------------------------------------------------*
MODULE PREPARE_FLD_400 OUTPUT.

* SV_MATNR
  SV_MATNR    = IT_ALV_DETAIL-MATNR.
* SV_MAKTX
  SV_MAKTX    = IT_ALV_DETAIL-MAKTX.
* SV_HIST
  SV_HIST     = IT_ALV_DETAIL-HIST.
* SV_NRLINES
  SV_NRLINES  = IT_ALV_DETAIL-NRLINES.
* SV_DMAXSVAL
" SV_DMAXSVAL         = IT_ALV_DETAIL-DMAXSVAL.
  YSE_EM_LOG-DMAXSVAL = IT_ALV_DETAIL-DMAXSVAL.
* SV_FCDEM
  SV_FCDEM = IT_ALV_DETAIL-FCDEM.
  SV_CONFC = IT_ALV_DETAIL-CONFC.
* SV_PACK_QTY
  SV_PACK_QTY =  IT_ALV_DETAIL-PACK_QTY.

* Find fixed vendor
  CLEAR: SV_LIFNR.
  SELECT SINGLE LIFNR
           INTO SV_LIFNR
           FROM EORD
          WHERE MATNR EQ IT_ALV_DETAIL-MATNR
            AND WERKS EQ P_WERKS
            AND BDATU > SY-DATUM
            AND FLIFN EQ 'X'.
* Get vendor's name
  CLEAR: SV_LIFNR_NAME1.
  SELECT SINGLE NAME1
           INTO SV_LIFNR_NAME1
           FROM LFA1
          WHERE LIFNR EQ SV_LIFNR.

* Translate current stock policy
  CASE IT_ALV_DETAIL-CUSTOPO.
    WHEN 'Z5'.
      SV_CUSTOPO = C_ST_DESC.
    WHEN 'Z6' OR 'Z7'.
      SV_CUSTOPO = C_NS_DESC.
  ENDCASE.
* Translate adjusted stock policy
  CASE IT_ALV_DETAIL-ADSTOPO.
    WHEN 'Z5'.
      SV_ADSTOPO = C_ST_DESC.
    WHEN 'Z6' OR 'Z7'.
      SV_ADSTOPO = C_NS_DESC.
  ENDCASE.

* Translate current distribution mode
  SV_CUDIMO   = IT_ALV_DETAIL-CUDIMO.
  IF  IT_ALV_DETAIL-CUDIMO = C_ZDTC.
    SV_CUDIMO = C_DTC_DESC.
  ENDIF.
* Translate adjusted distribution mode
  SV_ADDIMO = IT_ALV_DETAIL-ADDIMO.
  IF  IT_ALV_DETAIL-ADDIMO = C_ZDTC.
    SV_ADDIMO = C_DTC_DESC.
  ENDIF.
* Translate current lot size calc flag
  READ TABLE IT_LSFL WITH KEY LSFL = IT_ALV_DETAIL-CULSFL.
  IF SY-SUBRC EQ 0.
    SV_CULSFL = IT_LSFL-LSFLT.
  ELSE.
    SV_CULSFL = SPACE.
  ENDIF.
* Translate adjusted lot size calc flag
  READ TABLE IT_LSFL WITH KEY LSFL = IT_ALV_DETAIL-ADLSFL.
  IF SY-SUBRC EQ 0.
    SV_ADLSFL = IT_LSFL-LSFLT.
  ELSE.
    SV_ADLSFL = SPACE.
  ENDIF.

* Move to character screen fields
  SV_CUREPO =  IT_ALV_DETAIL-MINBE.
  SV_ADREPO =  IT_ALV_DETAIL-ADREPO.
  SV_CUEISBE =  IT_ALV_DETAIL-EISBE.
  SV_ADEISBE =  IT_ALV_DETAIL-ADEISBE.
  SV_CULOSI =  IT_ALV_DETAIL-BSTFE.
  SV_ADLOSI =  IT_ALV_DETAIL-ADLOSI.

* Some fields may not be changed in some cases
  CASE IT_ALV_DETAIL-EXCODE.
    WHEN 'D02' OR 'A02' OR 'A04'." NDTC to DTC and Stocked to Not stocked
      LOOP AT SCREEN.
        CASE SCREEN-NAME.
          WHEN 'SV_ADLSFL'  OR
               'SV_ADEISBE'.
            IF IT_ALV_DETAIL-ADLSFL NE 'M'.
              SCREEN-INPUT  = '0'.
              MODIFY SCREEN.
            ENDIF.
          WHEN 'SV_ADREPO'  OR
               'SV_ADLOSI'.
            SCREEN-INPUT  = '0'.
            MODIFY SCREEN.
        ENDCASE.
      ENDLOOP.
  ENDCASE.

* If current lotsize flag was set on "M", the LS should always be editable
  IF IT_ALV_DETAIL-CULSFL = 'M'.
    LOOP AT SCREEN.
      IF    SCREEN-NAME EQ 'SV_ADLSFL'
         OR SCREEN-NAME EQ 'SV_ADLOSI'.
        SCREEN-INPUT = '1'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDMODULE.                 " PREPARE_FLD_400  OUTPUT

*&---------------------------------------------------------------------*
*&      MODULE  STATUS_0500  OUTPUT
*&---------------------------------------------------------------------*
MODULE STATUS_0500 OUTPUT.

  SET PF-STATUS '500'.
  SET TITLEBAR  '500'.

ENDMODULE.                 " STATUS_0500  OUTPUT

*&---------------------------------------------------------------------*
*&      MODULE  PREPARE_FLD_500  OUTPUT
*&---------------------------------------------------------------------*
MODULE PREPARE_FLD_500 OUTPUT.

  PERFORM PREPARE_FLD_500.

ENDMODULE.                 " PREPARE_FLD_500  OUTPUT

*&---------------------------------------------------------------------*
*&      MODULE  STATUS_0600  OUTPUT
*&---------------------------------------------------------------------*
MODULE STATUS_0600 OUTPUT.

  SET PF-STATUS '600'.
  SET TITLEBAR  '600'.

ENDMODULE.                 " STATUS_0600  OUTPUT

*&---------------------------------------------------------------------*
*&      MODULE  PREPARE_ALV_600  OUTPUT
*&---------------------------------------------------------------------*
MODULE PREPARE_ALV_600 OUTPUT.

  PERFORM PREPARE_ALV_600.

ENDMODULE.                 " PREPARE_ALV_600  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  FIELD_MAPPING_400  INPUT
*&---------------------------------------------------------------------*
MODULE FIELD_MAPPING_400 INPUT.

* Move new values from input screen to structure IT_ALV_DETAIL
  IT_ALV_DETAIL-ADLOSI  = SV_ADLOSI.
  IT_ALV_DETAIL-ADEISBE = SV_ADEISBE.
  IT_ALV_DETAIL-ADREPO  = SV_ADREPO.

* Reorder point must be greater than safety stock
  IF IT_ALV_DETAIL-ADEISBE > IT_ALV_DETAIL-ADREPO.
    MESSAGE E017.
  ENDIF.

* After the next block:
* SV_ADLSFL holds the text for the adjusted lot size flag
* GV_ADLSFL holds the key  for the adjusted lot size flag

  READ TABLE IT_LSFL WITH KEY LSFL = SV_ADLSFL.
  IF SY-SUBRC EQ 0.
    SV_ADLSFL  = IT_LSFL-LSFLT.
    GV_ADLSFL  = IT_LSFL-LSFL.
  ELSE.
    READ TABLE IT_LSFL WITH KEY LSFLT = SV_ADLSFL.
    IF SY-SUBRC EQ 0.
      GV_ADLSFL  = IT_LSFL-LSFL.
    ELSE.
      MESSAGE E029 WITH SV_ADLSFL.
    ENDIF.
  ENDIF.
  IT_ALV_DETAIL-ADLSFL = GV_ADLSFL.

ENDMODULE.                 " FIELD_MAPPING_400  INPUT
