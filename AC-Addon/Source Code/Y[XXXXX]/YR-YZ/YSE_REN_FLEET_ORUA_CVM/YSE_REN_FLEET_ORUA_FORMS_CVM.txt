*&---------------------------------------------------------------------*
*&  Include           YSE_REN_FLEET_ORUA_FORMS                         *
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  SET_DATE_TO_MONTH
*&---------------------------------------------------------------------*
FORM SET_DATE_TO_MONTH.

  DATA:
    LV_DAYS         TYPE P.        " Days in month of provided enddate

* Make sure P_ABDAT has a date which is the start of a month
  P_ABDAT+6(2) = '01'.

* Get the end of month of the date provided as enddate (P_ENDAT)
  CALL FUNCTION 'HR_E_NUM_OF_DAYS_OF_MONTH'
    EXPORTING
      P_FECHA        = P_ENDAT
    IMPORTING
      NUMBER_OF_DAYS = LV_DAYS.
* Set enddate to the end of month
  P_ENDAT+6(2) = '01'.
  P_ENDAT = P_ENDAT + LV_DAYS - 1.

ENDFORM.                    " GET_DEPOTS

*&---------------------------------------------------------------------*
*&      Form  GET_DEPOTS
*&---------------------------------------------------------------------*
FORM GET_DEPOTS.

  CLEAR:
    IT_DEPOTS,
    IT_DEPOTS[].

* Get the rental depots (and their funct. location, cust nr, etc...)
  IF P_VKBUR IS INITIAL.
    SELECT * FROM YSE_RENT_DEPOT
         INTO TABLE IT_DEPOTS
        WHERE VKORG = P_VKORG.
    IF SY-SUBRC <> 0.
      MESSAGE E020 WITH P_VKORG 'YSE_RENT_DEPOT'.
    ENDIF.
  ELSE.
    SELECT * FROM YSE_RENT_DEPOT
         INTO TABLE IT_DEPOTS
        WHERE VKORG = P_VKORG
          AND VKBUR = P_VKBUR.
    IF SY-SUBRC <> 0.
      MESSAGE E021 WITH P_VKORG P_VKBUR 'YSE_RENT_DEPOT'.
    ENDIF.
  ENDIF.

ENDFORM.                    " GET_DEPOTS

*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
* Search Equipment Master View (like ITOB)
*----------------------------------------------------------------------*
FORM GET_DATA .

  RANGES:
    LR_WERKS    FOR IT_DEPOTS-WERKS.
  DATA:
    BEGIN OF IT_EQUI_TEMP OCCURS 0,
      EQUNR TYPE EQUNR,
      MATNR TYPE MATNR,
      SERNR TYPE GERNR,
      SHTXT TYPE KTX01,
      EQLFN TYPE EQLFN,
      ILOAN TYPE ILOAN,
      ANLNR TYPE ANLN1,
      ANLUN TYPE ANLN2,
      WERKS TYPE WERKS_D,
    END OF IT_EQUI_TEMP,
    BEGIN OF IT_EQUI_REN OCCURS 0,
      EQUNR TYPE EQUNR,
    END OF IT_EQUI_REN.

* Move the found plants from YSE_RENT_DEPOT into a range.
  IF NOT ( IT_DEPOTS IS INITIAL ).
    LR_WERKS-SIGN   = 'I'.
    LR_WERKS-OPTION = 'EQ'.
    LOOP AT IT_DEPOTS.
      MOVE IT_DEPOTS-WERKS TO LR_WERKS-LOW.
      APPEND LR_WERKS.
    ENDLOOP.
  ENDIF.

* Select equinrs which are "Rental" into internal table (based on equipment category)
  SELECT EQUNR INTO TABLE IT_EQUI_REN
               FROM EQUI
              WHERE EQTYP = 'Y'
                 OR EQTYP = 'X'.

* Get additional data for the rental equipments
  SELECT      EQUI~EQUNR
              EQUI~MATNR
              EQUI~SERNR
              EQKT~EQKTX  AS SHTXT
              EQUZ~EQLFN
              EQUZ~ILOAN
              ILOA~ANLNR
              ILOA~ANLUN
              EQBS~B_WERK AS WERKS
         FROM EQUI
         JOIN EQKT
           ON EQUI~EQUNR = EQKT~EQUNR
         JOIN EQUZ
           ON EQUI~EQUNR = EQUZ~EQUNR
         JOIN ILOA
           ON EQUZ~ILOAN = ILOA~ILOAN
         JOIN EQBS
           ON EQUI~EQUNR = EQBS~EQUNR
         INTO TABLE IT_EQUI_TEMP
          FOR ALL ENTRIES IN IT_EQUI_REN
        WHERE EQUI~EQUNR EQ IT_EQUI_REN-EQUNR
          AND EQKT~SPRAS EQ 'EN'
          AND EQUZ~DATBI EQ '99991231'.
* Remove entries which don't have a material number
  DELETE IT_EQUI_TEMP WHERE MATNR EQ SPACE.

* Build IT_EQUI based on temp table (leaving out some rec's based on selparam's)
  LOOP AT IT_EQUI_TEMP.
*   If the plant is not part of the depots
    IF NOT ( IT_EQUI_TEMP-WERKS IN LR_WERKS ).
      CONTINUE.
    ENDIF.
*   Move from temp to final table (WERKS is dropped)
    MOVE-CORRESPONDING IT_EQUI_TEMP TO IT_EQUI.
    APPEND IT_EQUI.
  ENDLOOP.

* Sort the equipment table and remove duplicates
  SORT IT_EQUI.
  DELETE ADJACENT DUPLICATES FROM IT_EQUI.

* Get the acquisition values of the equipments (currency can be retrieved from T093B)
  SELECT      ANLN1
              ANLN2
              ANSWL
              KANSW
         INTO TABLE IT_ANLC
         FROM ANLC
          FOR ALL ENTRIES IN IT_EQUI
        WHERE BUKRS EQ P_BUKRS
          AND ANLN1 EQ IT_EQUI-ANLNR
          AND GJAHR EQ P_ABDAT(4)
          AND AFABE EQ '30'
          AND ZUJHR EQ ''
          AND ZUCOD EQ ''.

* Get the acquisition / deactivation date of the equipments
  SELECT      ANLN1
              ANLN2
              ZUGDT
              DEAKT
         INTO TABLE IT_ANLA
         FROM ANLA
          FOR ALL ENTRIES IN IT_EQUI
        WHERE BUKRS EQ P_BUKRS
          AND ANLN1 EQ IT_EQUI-ANLNR.

* Get the SME data
  SELECT      *
         INTO TABLE IT_SME
         FROM YSE_RENT_SME
          FOR ALL ENTRIES IN IT_EQUI
        WHERE ZZEQUNR EQ IT_EQUI-EQUNR
          AND (    (      ANGDT GE P_ABDAT
                      AND ANGDT LE P_ENDAT )
                OR (      BNDDT GE P_ABDAT
                      AND BNDDT LE P_ENDAT )
                OR (      ANGDT LT P_ABDAT
                      AND BNDDT GT P_ENDAT ) ).

ENDFORM.                    " GET_DATA

*&---------------------------------------------------------------------*
*&      Form  CHECK_PERIOD
*&---------------------------------------------------------------------*
FORM CHECK_PERIOD .

  IF P_ABDAT GT P_ENDAT.
    MESSAGE E047.
  ENDIF.

ENDFORM.                    " CHECK_PERIOD

*&---------------------------------------------------------------------*
*&      Form  PROCESS_DATA
*&---------------------------------------------------------------------*
FORM PROCESS_DATA .

  PERFORM BUILD_EOM_LIST.

  PERFORM BUILD_EQUI_CAL.

  PERFORM CALC_UTIL.

ENDFORM.                    " PROCESS_DATA

*&---------------------------------------------------------------------*
*&      Form  BUILD_EQUI_CAL
*&---------------------------------------------------------------------*
FORM BUILD_EQUI_CAL .

  DATA:
    LV_DATUM TYPE DATUM.

  RANGES:
    LR_AUART_OR FOR IT_SME-AUART,
    LR_AUART_UA FOR IT_SME-AUART.

* Sort tables to be read
  SORT IT_ANLA BY ANLN1 ANLN2.
  SORT IT_ANLC BY ANLN1 ANLN2.

* Prepare range of doc types for "On Rent"
  LR_AUART_OR-SIGN   = 'I'.
  LR_AUART_OR-OPTION = 'EQ'.
  LR_AUART_OR-LOW    = GC_AUART_ZQP.
  APPEND LR_AUART_OR.
  LR_AUART_OR-LOW    = GC_AUART_ZQP1.
  APPEND LR_AUART_OR.
  LR_AUART_OR-LOW    = GC_AUART_ZQP2.
  APPEND LR_AUART_OR.
  LR_AUART_OR-LOW    = GC_AUART_ZRIB.
  APPEND LR_AUART_OR.

* Prepare range of doc types for "Unavailable"
  LR_AUART_UA-SIGN  = 'I'.
  LR_AUART_UA-OPTION = 'EQ'.
  LR_AUART_UA-LOW    = GC_AUART_ZLF.
  APPEND LR_AUART_UA.
  LR_AUART_UA-LOW    = GC_AUART_LR.
  APPEND LR_AUART_UA.
  LR_AUART_UA-LOW    = GC_AUART_ZAM1.
  APPEND LR_AUART_UA.

* For every equipment in the fleet
  LOOP AT IT_EQUI.

*   Find acquis/deact data
    READ TABLE IT_ANLA WITH KEY ANLN1 = IT_EQUI-ANLNR
                                ANLN2 = IT_EQUI-ANLUN
                       BINARY SEARCH.
*   Don't process equipment if detail not found
    IF SY-SUBRC NE 0.
      CONTINUE.
    ENDIF.

*   Find acquis value
    READ TABLE IT_ANLC WITH KEY ANLN1 = IT_EQUI-ANLNR
                                ANLN2 = IT_EQUI-ANLUN
                       BINARY SEARCH.
*   Don't process equipment if detail not found
    IF SY-SUBRC NE 0.
      CONTINUE.
    ENDIF.

*   Analyze day per day for the current equipment
    LV_DATUM = P_ABDAT.
    WHILE NOT LV_DATUM GT P_ENDAT.

*     Clear target areas
      CLEAR:
        IT_EQUI_CAL, IT_OUT.

*     Start filling target fields
      IT_OUT-DATUM      = LV_DATUM.
      IT_EQUI_CAL-DATUM = LV_DATUM.
      IT_EQUI_CAL-EQUNR = IT_EQUI-EQUNR.
      IT_EQUI_CAL-KANSW = IT_ANLC-ANSWL + IT_ANLC-KANSW.
*     If current date falls between acq and deact date
      IF     LV_DATUM GE IT_ANLA-ZUGDT
         AND (    LV_DATUM LE IT_ANLA-DEAKT
               OR IT_ANLA-DEAKT IS INITIAL ).
*        Set INFLT flag
         IT_EQUI_CAL-INFLT = 'X'.
*        Accumulate acq value to tot fleet of the day (through "COLLECT" statement)
         IT_OUT-FL_TOT     = IT_EQUI_CAL-KANSW.

*        Check if current equipment is on rent for this date
         LOOP AT IT_SME WHERE ZZEQUNR EQ IT_EQUI-EQUNR
                          AND AUART IN LR_AUART_OR
                          AND ANGDT LE LV_DATUM
                          AND BNDDT GE LV_DATUM.
         ENDLOOP.
*        If on rent
         IF SY-SUBRC EQ 0.
*          Set OR flag
           IT_EQUI_CAL-ORUA = 'OR'.
*          If "Fleet on rent" is requested
           IF P_RBOR NE SPACE.
*            Accum acq value to fleet on rent (through "COLLECT" statement)
             IT_OUT-FL_OR     = IT_EQUI_CAL-KANSW.
           ENDIF.
*        If not on rent
         ELSE.
*          Check if current equipment is unavail for this date
           LOOP AT IT_SME WHERE ZZEQUNR EQ IT_EQUI-EQUNR
                            AND AUART IN LR_AUART_UA
                            AND ANGDT LE LV_DATUM
                            AND BNDDT GE LV_DATUM.
           ENDLOOP.
*          If unavailable
           IF SY-SUBRC EQ 0.

*            Set UA flag
             IT_EQUI_CAL-ORUA = 'UA'.
*            If "Fleet unavail" is requested
             IF P_RBUA NE SPACE.
*              Accum acq value to fleet on rent (or unavail) (through "COLLECT" statement)
               IT_OUT-FL_OR   = IT_EQUI_CAL-KANSW.
             ENDIF.
           ENDIF.
         ENDIF.

      ENDIF.

*     Create new equipment day line
      APPEND IT_EQUI_CAL.

*     Collect values for fleet on rent and total fleet for this day
      COLLECT IT_OUT.

*     Go to next day
      LV_DATUM = LV_DATUM + 1.

    ENDWHILE.

  ENDLOOP.

ENDFORM.                    " BUILD_EQUI_CAL

*&---------------------------------------------------------------------*
*&      Form  CALC_UTIL
*&---------------------------------------------------------------------*
FORM CALC_UTIL.

  DATA:
    LV_WOTNRC TYPE WOTNR,
    LV_WOTNRP TYPE P,
    LV_DAYCTR TYPE I,
    LT_T246   TYPE T246   OCCURS 0 WITH HEADER LINE,
    LS_OUT    LIKE LINE OF IT_OUT.

* Get the day number of the start date
  CALL FUNCTION 'DAY_IN_WEEK'
    EXPORTING
      DATUM         = P_ABDAT
    IMPORTING
      WOTNR         = LV_WOTNRP.
  LV_WOTNRC = LV_WOTNRP.

* Get the description of the days
  SELECT *
         FROM T246
         INTO TABLE LT_T246
        WHERE SPRSL EQ SY-LANGU.

  SORT IT_OUT  BY DATUM.
  SORT LT_T246 BY WOTNR.

* Complete every output line
  LOOP AT IT_OUT.

*   Get description of the day
    READ TABLE LT_T246 WITH KEY WOTNR = LV_WOTNRC.
    IT_OUT-DAYTX = LT_T246-LANGT.
*   Advance to next day number (used in next loop entry)
    LV_WOTNRC = LV_WOTNRC + 1.
    IF LV_WOTNRC EQ '8'.
      LV_WOTNRC = '1'.
    ENDIF.

*   Calculate Utilization (Financial)
    IF NOT IT_OUT-FL_TOT EQ 0.
      IT_OUT-UTIL = IT_OUT-FL_OR / IT_OUT-FL_TOT.
    ENDIF.

*   If month has changed since previous line, reset day counter and subtotals
    IF IT_OUT-DATUM+4(2) NE LS_OUT-DATUM+4(2).
      LV_DAYCTR = 1.
      LS_OUT-FL_OR_MTD = IT_OUT-FL_OR.
      LS_OUT-FL_MTD    = IT_OUT-FL_TOT.
*   If month has not changed, add todays figures to the subtotals (of the month)
    ELSE.
      LV_DAYCTR = LV_DAYCTR + 1.
      LS_OUT-FL_OR_MTD = LS_OUT-FL_OR_MTD + IT_OUT-FL_OR.
      LS_OUT-FL_MTD    = LS_OUT-FL_MTD    + IT_OUT-FL_TOT.
    ENDIF.
    LS_OUT-DATUM = IT_OUT-DATUM.

*   Set MTD values
    IT_OUT-FL_OR_MTD   = LS_OUT-FL_OR_MTD / LV_DAYCTR.
    IT_OUT-FL_MTD      = LS_OUT-FL_MTD / LV_DAYCTR.
    IF NOT IT_OUT-FL_MTD EQ 0.
      IT_OUT-UTIL_MTD  = IT_OUT-FL_OR_MTD / IT_OUT-FL_MTD.
    ENDIF.

    MODIFY IT_OUT.

  ENDLOOP.

ENDFORM.                    " CALC_UTIL

*&---------------------------------------------------------------------*
*&      Form  9001_BUILD_ALV
*&---------------------------------------------------------------------*
FORM 9001_BUILD_ALV .

  DATA:
    LV_OUTSTRUC  TYPE TABNAME,
    LS_LAYOUT    TYPE LVC_S_LAYO,
    LS_CELLCOLOR TYPE LVC_S_SCOL.

* Clear the field catalog table
  REFRESH: IT_FIELDCAT_OV.

* Determine the output structure to be used
  IF P_RBOR NE SPACE.
    LV_OUTSTRUC = 'YSE_REN_FLEET_OR_OUT'.
  ELSE.
    LV_OUTSTRUC = 'YSE_REN_FLEET_UA_OUT'.
  ENDIF.

* Fetch the field catalog for structure YSE_RENT_EHRSP_OUTPUT
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_BUFFER_ACTIVE              = ' '
      I_STRUCTURE_NAME             = LV_OUTSTRUC
    CHANGING
      CT_FIELDCAT                  = IT_FIELDCAT_OV.

* Modify some of the fields
  LOOP AT IT_FIELDCAT_OV ASSIGNING <GS_FIELDCAT>.
    CASE <GS_FIELDCAT>-FIELDNAME.
      WHEN 'WAERS'.
        <GS_FIELDCAT>-NO_OUT = GC_CHAR_X.
*      WHEN 'EQUNR'.
*        <FIELDCAT>-OUTPUTLEN = 10.
*      WHEN 'EHSTA' OR 'BDSTA'.
*        <FIELDCAT>-OUTPUTLEN = 5.
*        <FIELDCAT>-ICON      = GC_CHAR_X.
    ENDCASE.
  ENDLOOP.

* Define the column name in which the color code can be found
  LS_LAYOUT-CTAB_FNAME = 'CLR'.
* Set the colors in new output table
* LS_CELLCOLOR-FIELDNAME = 'DATUM'.
  LS_CELLCOLOR-COLOR-COL = '0004'.
  LS_CELLCOLOR-COLOR-INT = '1'.
  LOOP AT IT_OUT.
    CLEAR IT_OUT_COL.
    MOVE-CORRESPONDING IT_OUT TO IT_OUT_COL.
    IF IT_OUT-DATUM IN GR_EOM.
      APPEND LS_CELLCOLOR TO IT_OUT_COL-CLR.
    ENDIF.
    APPEND IT_OUT_COL.
  ENDLOOP.

* Display the grid
  CALL METHOD OBJ_ALV_OV->SET_TABLE_FOR_FIRST_DISPLAY
    EXPORTING
      I_STRUCTURE_NAME              = LV_OUTSTRUC
      I_SAVE                        = 'A'
      IS_LAYOUT                     = LS_LAYOUT
    CHANGING
      IT_OUTTAB                     = IT_OUT_COL[]
      IT_FIELDCATALOG               = IT_FIELDCAT_OV
    EXCEPTIONS
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      OTHERS                        = 4.

  IF SY-SUBRC <> 0.
*     MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*     WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                    " 9001_BUILD_ALV

*&---------------------------------------------------------------------*
*&      Form  9002_BUILD_ALV
*&---------------------------------------------------------------------*
FORM 9002_BUILD_ALV .

  DATA:
    LV_OUTSTRUC    TYPE TABNAME,
    LS_LAYOUT      TYPE LVC_S_LAYO,
    LS_CELLCOLOR   TYPE LVC_S_SCOL,
    LS_FIELDCAT_DT LIKE LINE OF IT_FIELDCAT_DT.

  FIELD-SYMBOLS:
    <LS_OUT_DT>,
    <LS_TAB_CLR> TYPE LVC_T_SCOL.

* Set the output structure to be used
  LV_OUTSTRUC = 'YSE_REN_FLEET_DT_OUT'.
  LS_LAYOUT-CWIDTH_OPT = 'X'.
** Define the column name in which the color code can be found
*  LS_LAYOUT-CTAB_FNAME = 'CLR'.
** Set the colors in new output table
** LS_CELLCOLOR-FIELDNAME = 'DATUM'.
*  LS_CELLCOLOR-COLOR-COL = '0004'.
*  LS_CELLCOLOR-COLOR-INT = '1'.
*  READ TABLE <GS_OUT_DT> ASSIGNING <LS_OUT_DT> INDEX 1.
*  IF SY-SUBRC EQ 0.
*    ASSIGN COMPONENT 3 OF STRUCTURE <LS_OUT_DT> TO <LS_TAB_CLR>.
*    APPEND LS_CELLCOLOR TO <LS_TAB_CLR>.
*  ENDIF.

* Display the grid
  CALL METHOD OBJ_ALV_DT->SET_TABLE_FOR_FIRST_DISPLAY
    EXPORTING
      I_STRUCTURE_NAME              = LV_OUTSTRUC
      I_SAVE                        = 'A'
      IS_LAYOUT                     = LS_LAYOUT
    CHANGING
      IT_OUTTAB                     = <GS_OUT_DT>
      IT_FIELDCATALOG               = IT_FIELDCAT_DT
    EXCEPTIONS
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      OTHERS                        = 4.

  IF SY-SUBRC <> 0.
*     MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*     WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                    " 9002_BUILD_ALV

*&---------------------------------------------------------------------*
*&      Form  BUILD_EOM_LIST
*&---------------------------------------------------------------------*
FORM BUILD_EOM_LIST .

  DATA:
    LV_DATUM TYPE DATUM.

* Build list with the dates of the last day of every month in the range
  GR_EOM-SIGN   = 'I'.
  GR_EOM-OPTION = 'EQ'.
* Assume the P_ENDAT is the last day of the last month (is guaranteed by at-selection-screen)
  LV_DATUM = P_ENDAT.
  WHILE LV_DATUM GT P_ABDAT.
    GR_EOM-LOW = LV_DATUM.
    APPEND GR_EOM.
    LV_DATUM+6(2) = '01'.
    LV_DATUM = LV_DATUM - 1.
  ENDWHILE.

ENDFORM.                    " BUILD_EOM_LIST

*&---------------------------------------------------------------------*
*&      Form  SHOW_DETAIL_9001
*&---------------------------------------------------------------------*
FORM SHOW_DETAIL_9001 USING P_ROW
                            P_COLUMN
                            P_ROW_NO STRUCTURE LVC_S_ROID.

* Get the line which was doubleclicked
  CHECK P_ROW_NO-ROW_ID GT 0.
  READ TABLE IT_OUT INDEX P_ROW_NO-ROW_ID.
  CHECK SY-SUBRC EQ 0.

* Create dynamic table
  PERFORM DYNTAB_CREATE.
* Fill dynamic table
  PERFORM DYNTAB_FILL.

  CALL SCREEN 9002.

ENDFORM.                    " SHOW_DETAIL_9001

*&---------------------------------------------------------------------*
*&      Form  SHOW_DETAIL_9002
*&---------------------------------------------------------------------*
FORM SHOW_DETAIL_9002 USING P_ROW
                            P_COLUMN
                            P_ROW_NO STRUCTURE LVC_S_ROID.

* Get the line which was doubleclicked
  CHECK P_ROW_NO-ROW_ID EQ 0.
  CHECK P_COLUMN NE 0.

  SET PARAMETER ID 'EQN' FIELD P_COLUMN.
  CALL TRANSACTION 'IE03' AND SKIP FIRST SCREEN.


ENDFORM.                    " SHOW_DETAIL_9002

*&---------------------------------------------------------------------*
*&      Form  DYNTAB_CREATE
*&---------------------------------------------------------------------*
FORM DYNTAB_CREATE.

  DATA:
    LV_EQUNR      TYPE EQUNR,
    LS_FIELDCAT   TYPE LVC_S_FCAT,
    LV_OUTSTRUC   TYPE TABNAME VALUE 'YSE_REN_FLEET_DT_OUT'.

* Clear the Field Catalog
  CLEAR: IT_FIELDCAT_DT, IT_FIELDCAT_DT[].

* Fetch the field catalog
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_BUFFER_ACTIVE              = ' '
      I_STRUCTURE_NAME             = LV_OUTSTRUC
    CHANGING
      CT_FIELDCAT                  = IT_FIELDCAT_DT.

* Set 'Currency' to no display
  LOOP AT IT_FIELDCAT_DT INTO LS_FIELDCAT.
    CASE LS_FIELDCAT-FIELDNAME.
      WHEN 'WAERS'.
        LS_FIELDCAT-NO_OUT = 'X'.
      WHEN 'DAYTX' OR 'DATUM'.
        LS_FIELDCAT-KEY = 'X'.
    ENDCASE.
    MODIFY IT_FIELDCAT_DT FROM LS_FIELDCAT INDEX SY-TABIX.
  ENDLOOP.

* Read the template column for every equipment
  READ TABLE IT_FIELDCAT_DT INTO LS_FIELDCAT WITH KEY FIELDNAME = 'TEMPLATE'.
  CHECK SY-SUBRC EQ 0.
  DELETE IT_FIELDCAT_DT WHERE FIELDNAME = 'TEMPLATE'.

* Set the number of key columns: day, date, color, currency
  GV_KEYCOLS = 4.
  LS_FIELDCAT-COL_POS = GV_KEYCOLS.

* Add the extra columns (one for each equipment)
  LOOP AT IT_EQUI.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT         = IT_EQUI-EQUNR
      IMPORTING
        OUTPUT        = LV_EQUNR.
    CLEAR: LS_FIELDCAT-TABNAME,
           LS_FIELDCAT-REF_TABLE.
    LS_FIELDCAT-COL_POS    = LS_FIELDCAT-COL_POS + 1.
    LS_FIELDCAT-REPTEXT    = LV_EQUNR.
    LS_FIELDCAT-FIELDNAME  = LV_EQUNR.
    LS_FIELDCAT-COLTEXT    = LV_EQUNR.
    LS_FIELDCAT-SCRTEXT_L  = LV_EQUNR.
    LS_FIELDCAT-SCRTEXT_M  = LV_EQUNR.
    LS_FIELDCAT-SCRTEXT_S  = LV_EQUNR.
*    LS_FIELDCAT-CFIELDNAME = 'EQUNR'.
    APPEND LS_FIELDCAT TO IT_FIELDCAT_DT.
  ENDLOOP.

* If next method call dumps, check the generated code by putting a break point at
* LSKBHF06, form fb_table_create, line 547: "generate subroutine pool lt_source..."
  CALL METHOD CL_ALV_TABLE_CREATE=>CREATE_DYNAMIC_TABLE
    EXPORTING
      IT_FIELDCATALOG = IT_FIELDCAT_DT
    IMPORTING
      EP_TABLE        = GP_OUT_DT.

  ASSIGN GP_OUT_DT->* TO <GS_OUT_DT>.

ENDFORM.                    " DYNTAB_CREATE

*&---------------------------------------------------------------------*
*&      Form  DYNTAB_FILL
*&---------------------------------------------------------------------*
FORM DYNTAB_FILL .

* Local variables
  FIELD-SYMBOLS: <LS_LINE>,
                 <LS_FIELD>.
  DATA:
    LV_COMP   TYPE I,
    LV_EQUNR  TYPE EQUNR,
    LV_DATUM  TYPE DATUM,
    LV_ABDAT  TYPE DATUM,
    LV_ENDAT  TYPE DATUM,
    LV_WOTNRC TYPE WOTNR,
    LV_WOTNRP TYPE P,
    LV_DAYCTR TYPE I,
    LT_T246   TYPE T246   OCCURS 0 WITH HEADER LINE,
    LS_FCAT   LIKE LINE OF IT_FIELDCAT_DT.

* Determin the period to be displayed
  LV_ABDAT = IT_OUT-DATUM.
  LV_ABDAT+6(2) = '01'.
  CALL FUNCTION 'RE_ADD_MONTH_TO_DATE'
    EXPORTING
      MONTHS        = 1
      OLDDATE       = LV_ABDAT
    IMPORTING
      NEWDATE       = LV_ENDAT.
  LV_ENDAT = LV_ENDAT - 1.

* Get the day number of the start date
  CALL FUNCTION 'DAY_IN_WEEK'
    EXPORTING
      DATUM         = LV_ABDAT
    IMPORTING
      WOTNR         = LV_WOTNRP.
  LV_WOTNRC = LV_WOTNRP.

* Get the description of the days
  SELECT *
         FROM T246
         INTO TABLE LT_T246
        WHERE SPRSL EQ SY-LANGU.
  SORT LT_T246 BY WOTNR.

* Get working area for output table of details
  ASSIGN LOCAL COPY OF INITIAL LINE OF <GS_OUT_DT> TO <LS_LINE>.

  SORT IT_EQUI_CAL BY EQUNR DATUM.

* Build a line for every date in the range
  LV_DATUM = LV_ABDAT.
  WHILE LV_DATUM LE LV_ENDAT.

    CLEAR <LS_LINE>.
*   Get description of the day
    READ TABLE LT_T246 WITH KEY WOTNR = LV_WOTNRC.
*   Advance to next day number (used in next loop entry)
    LV_WOTNRC = LV_WOTNRC + 1. IF LV_WOTNRC EQ '8'. LV_WOTNRC = '1'.  ENDIF.
*   Fill date and day in output table
    ASSIGN COMPONENT 1 OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = LT_T246-LANGT.
    ASSIGN COMPONENT 2 OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
    <LS_FIELD> = LV_DATUM.

*   Use the fieldcatalog table for detail to run through all equipments for that day
    LOOP AT IT_FIELDCAT_DT INTO LS_FCAT WHERE COL_POS GT 4.
*     Convert field name to equipment number
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT         = LS_FCAT-FIELDNAME
        IMPORTING
          OUTPUT        = LV_EQUNR.
*     Convert column position to component to be filled in LS_LINE
      LV_COMP = LS_FCAT-COL_POS - 1.
*     Find the equi-cal entry for that day and equipment
      READ TABLE IT_EQUI_CAL WITH KEY EQUNR = LV_EQUNR
                                      DATUM = LV_DATUM
                             BINARY SEARCH.
      IF SY-SUBRC EQ 0.

        IF P_RBOR NE SPACE AND IT_EQUI_CAL-ORUA = 'OR'.
          ASSIGN COMPONENT LV_COMP OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
          <LS_FIELD> = IT_EQUI_CAL-KANSW.
        ELSEIF P_RBUA NE SPACE AND IT_EQUI_CAL-ORUA = 'UA'.
          ASSIGN COMPONENT LV_COMP OF STRUCTURE <LS_LINE> TO <LS_FIELD>.
          <LS_FIELD> = IT_EQUI_CAL-KANSW.
        ENDIF.

      ENDIF.

    ENDLOOP.

    APPEND <LS_LINE> TO <GS_OUT_DT>.
    LV_DATUM = LV_DATUM + 1.

  ENDWHILE.

ENDFORM.                    " DYNTAB_FILL

*&---------------------------------------------------------------------*
*&      Form  CHECK_AUTH
*&---------------------------------------------------------------------*
FORM CHECK_AUTH .

  AUTHORITY-CHECK OBJECT 'V_VBAK_VKO'
                      ID 'VKORG' FIELD P_VKORG
                      ID 'VTWEG' FIELD P_VTWEG
                      ID 'SPART' DUMMY
                      ID 'ACTVT' DUMMY.

  IF SY-SUBRC = 4.
*   No authorisation to display data from Sales Organisation p_vkorg
    MESSAGE ID 'YSE_RENTAL' TYPE 'E' NUMBER '041' WITH P_VKORG P_VTWEG.
  ELSEIF SY-SUBRC <> 0.
*   Error checking authorization.
    MESSAGE ID 'YSE_RENTAL' TYPE 'E' NUMBER '046'.
  ENDIF.

ENDFORM.                    " CHECK_AUTH
