
*&---------------------------------------------------------------------*
*&  Include           YSE_ACTION_ROUTINES                              *
*&---------------------------------------------------------------------*
*                  MAIN PROGRAM = YSE_CLOSE_SEO                        *
*----------------------------------------------------------------------*
*                                                                      *
* PROGRAM ID           : YSE_ACTION_ROUTINES                           *
* PROGRAM TITLE        : Action Routines 'one button administration'   *
* AUTHOR               : Geert Rutten                                  *
* DATE                 : 21/05/2010                                    *
* DEVELOPMENT ID       : XXXX                                          *
*                                                                      *
* CHANGE REQUEST NUMBER:                                               *
*                                                                      *
*----------------------------------------------------------------------*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
* MOD. NO.|  DATE     | NAME     |CORRECTION NUMBER| CHANGE REFERENCE #*
*                                                                      *
*----------------------------------------------------------------------*
* MOD-002 |24/03/2011 |Lakshmi R |CD1K963913       |CR1984             *
*----------------------------------------------------------------------*
* MOD-003 |23/11/2013 |Praveen   |CD1K978576       |CR3076             *
************************************************************************
* Common routines for Atlas Copco Aftermarket project                  *
************************************************************************

PROGRAM yse_action_routines.

***********************************************************************
* Data
***********************************************************************
CONSTANTS: c_02(2)    TYPE c           VALUE '02',
           c_0(1)     TYPE c           VALUE '0',
           c_1(1)     TYPE c           VALUE '1',
           c_i0045(5)  TYPE c           VALUE 'I0045',
           c_i002(5)  TYPE c           VALUE 'I0002',
           c_nola         LIKE tj30t-txt04 VALUE 'NOLA',
           c_fifi         LIKE tj30t-txt04 VALUE 'FIFI',
           c_zero     TYPE c          VALUE '0',
           c_bwart(3)       TYPE c VALUE '261',    " movement type
           c_blanc          TYPE c VALUE ' ',       " no separator
           c_vornr(4)       TYPE c VALUE '0010'.    " operation number


TABLES: yam_ctam_ccodes, vbap.

DATA : i_bdcdata LIKE bdcdata OCCURS 0 WITH HEADER LINE,
        struct_bdcdata TYPE bdcdata.
DATA:  g_estat    LIKE tj30t-estat,
       gv_datum    TYPE d.

DATA: gv_aufpl TYPE afko-aufpl,
      lv_arbid TYPE afvc-arbid,
      gv_lgort TYPE aufm-lgort,
      lv_arbpl TYPE crhd-arbpl,
      gv_statprof     LIKE tj30t-stsma               " Stat. profile
                                 VALUE 'ZAM00001',
      ctamflag TYPE c.


DATA : BEGIN OF i_messtab OCCURS 0.
        INCLUDE STRUCTURE bdcmsgcoll.
DATA : END OF i_messtab.

DATA: BEGIN OF gt_ce11000 OCCURS 0.
        INCLUDE STRUCTURE ce11000.
DATA: END OF gt_ce11000.

CONSTANTS:  yes VALUE 'X'.

* Begin of insert MOD-005

DATA: lt_komfk           TYPE TABLE OF komfk,       "gets filled
      ls_komfk           TYPE komfk,
      lt_komv            TYPE TABLE OF komv,        "Empty
      lt_thead           TYPE TABLE OF theadvb,     "Empty
      lt_vbfs            TYPE TABLE OF vbfs,        "Returns Error Messages
      ls_vbfs            TYPE vbfs,
      lt_vbpa            TYPE TABLE OF vbpavb,      "Empty
      lt_vbrk            TYPE TABLE OF vbrkvb,      "Empty
      lt_vbrp            TYPE TABLE OF vbrpvb,      "Empty
      lt_vbss            TYPE TABLE OF vbss,        "Empty
      ls_vbss            TYPE vbss,
      gs_vbss            TYPE vbss,
      ls_vbsk            TYPE vbsk.                 "Empty

DATA: gt_stxh LIKE stxh OCCURS 0 WITH HEADER LINE.
DATA: it_lines TYPE STANDARD TABLE OF tline with header line,
      lv_header TYPE thead.

* End of insert MOD-005


************************************************************************
* SET User Status
************************************************************************
FORM set_user_status USING lv_aufnr TYPE aufnr
                           lv_stat  TYPE j_txt04.

  TABLES caufvd.
  DATA: lv_moff TYPE i,
        lv_objnr_ord TYPE aufk-objnr,
        lv_bukrs TYPE bukrs.

  SELECT SINGLE bukrs FROM aufk INTO lv_bukrs
    WHERE aufnr = lv_aufnr.
  IF sy-subrc = 0.
    SELECT SINGLE * FROM yam_ctam_ccodes
          WHERE bukrs = lv_bukrs.
    IF NOT sy-subrc = 0.
      ctamflag = 'N'.
    ELSE.
      ctamflag = 'Y'.
    ENDIF.
  ENDIF.

  IF ctamflag = 'Y'.
    gv_statprof = 'ZAM00001'.
  ELSE.
    gv_statprof = 'ZAM00006'.
  ENDIF.

  CONCATENATE 'OR' lv_aufnr INTO lv_objnr_ord.

  CALL FUNCTION 'STATUS_TEXT_EDIT'
    EXPORTING
      flg_user_stat    = yes
      objnr            = lv_objnr_ord
      only_active      = yes
      spras            = sy-langu
    IMPORTING
      line             = caufvd-sttxt
      user_line        = caufvd-asttx
    EXCEPTIONS
      object_not_found = 1
      OTHERS           = 2.

  CLEAR lv_moff.
  FIND lv_stat IN caufvd-asttx MATCH COUNT lv_moff.
  IF lv_moff EQ 0.
    SELECT SINGLE estat INTO g_estat
       FROM tj30t
       WHERE stsma = gv_statprof
        AND txt04 = lv_stat
        AND spras = sy-langu.
    IF g_estat IS INITIAL.
      SELECT SINGLE istat INTO g_estat
         FROM tj02t
         WHERE txt04 = lv_stat
          AND spras = sy-langu.
    ENDIF.
    CALL FUNCTION 'STATUS_CHANGE_EXTERN'
      EXPORTING
        check_only                = ' '
        client                    = sy-mandt
        objnr                     = lv_objnr_ord
        user_status               = g_estat
        set_inact                 = ' '
*                  SET_CHGKZ                 =
        no_check                  = ' '
*                IMPORTING
*                  STONR                     =
      EXCEPTIONS
      object_not_found          = 1
      status_inconsistent       = 2
      status_not_allowed        = 3
      OTHERS                    = 4.
    IF sy-subrc = 0.
      COMMIT WORK AND WAIT.
    ENDIF.
  ENDIF.

ENDFORM.                    "SET_USER_STATUS

************************************************************************
* Confirm Parts
************************************************************************
FORM set_cnf_parts  TABLES i_bdcdata
                   USING lv_aufnr TYPE aufnr
* Begin of insert MOD-006
                         lv_bemot TYPE bemot
                         lv_vkorg TYPE vkorg
* End of insert MOD-006
                   CHANGING g_ind TYPE num_rec
                            lv_cnf_flag TYPE c.

  DATA: gt_viauf_afvc TYPE STANDARD TABLE OF viauf_afvc,
        lv_cntr      TYPE i,
        lv_total     TYPE aufm-erfmg,
        lv_total_501 TYPE aufm-erfmg,

* Begin of insert MOD-006
        lv_prat4     TYPE prat4.
* End of insert MOD-006

  DATA : BEGIN OF i_aufm OCCURS 0,
        aufnr LIKE aufm-aufnr,         " Service Order Number
        werks LIKE aufm-werks,         " Plant
*        lgort LIKE aufm-lgort,         " Storage Location
        matnr LIKE aufm-matnr,         " Material Number
        bwart LIKE aufm-bwart,         " Movement Type
        erfmg LIKE aufm-erfmg,         " Quantity
*        budat LIKE aufm-budat,         " posting date
     END OF i_aufm.

  DATA : BEGIN OF i_aufm2 OCCURS 0,
        aufnr LIKE aufm-aufnr,         " Service Order Number
        werks LIKE aufm-werks,         " Plant
*        lgort LIKE aufm-lgort,         " Storage Location
        matnr LIKE aufm-matnr,         " Material Number
        bwart LIKE aufm-bwart,         " Movement Type
        erfmg LIKE aufm-erfmg,         " Quantity
*        budat LIKE aufm-budat,         " posting date
     END OF i_aufm2.

  DATA : BEGIN OF i_resb OCCURS 0,
          matnr LIKE resb-matnr,         " Material Number
          bdmng  LIKE resb-bdmng,
          werks LIKE resb-werks,
          lgort LIKE resb-lgort,
         END OF i_resb.

  DATA : BEGIN OF i_resb2 OCCURS 0,
          matnr LIKE resb-matnr,         " Material Number
          bdmng  LIKE resb-bdmng,
          werks LIKE resb-werks,
          lgort LIKE resb-lgort,
         END OF i_resb2.

  DATA: lv_erfmg_c(13) TYPE c,
        lv_total_c(17) TYPE c,
        lv_erfmg  TYPE bdmng,
        gv_scr_field(25)  TYPE c,
*      g_ind(2)          TYPE n,
        lv_count(3)       TYPE n,
        lv_aufm(3)           TYPE n.



  REFRESH gt_viauf_afvc.
  CLEAR lv_cntr.
  SELECT * INTO TABLE gt_viauf_afvc
       FROM viauf_afvc
       WHERE aufnr EQ lv_aufnr.
  DESCRIBE TABLE gt_viauf_afvc LINES lv_cntr.


  CLEAR i_resb.
  CLEAR i_resb.
  CLEAR i_resb2[].
  CLEAR i_resb[].
  CLEAR lv_count.
  SELECT matnr bdmng werks lgort FROM resb INTO CORRESPONDING FIELDS OF TABLE i_resb2
    WHERE aufnr = lv_aufnr AND xloek <> 'X'.
  LOOP AT i_resb2.
    COLLECT i_resb2 INTO i_resb.
  ENDLOOP.
  DESCRIBE TABLE i_resb LINES lv_count.

  IF lv_count > 0.
    g_ind = 1.
    REFRESH i_bdcdata.
** screen order confirmation
    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
            USING    'SAPLCORU'  '3000'  'X'  ''  ''
            CHANGING struct_bdcdata.
    APPEND struct_bdcdata  TO i_bdcdata.
    CLEAR  struct_bdcdata.

    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
            USING    ''  ''  ''  'BDC_OKCODE'  '=ENTR'
            CHANGING struct_bdcdata.
    APPEND struct_bdcdata  TO i_bdcdata.
    CLEAR  struct_bdcdata.

    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
            USING    ''  ''  ''  'BDC_CURSOR'  'CORUF-AUFNR'
            CHANGING struct_bdcdata.
    APPEND struct_bdcdata  TO i_bdcdata.
    CLEAR  struct_bdcdata.

    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
            USING    ''  ''  ''  'CORUF-AUFNR'  lv_aufnr
            CHANGING struct_bdcdata.
    APPEND struct_bdcdata  TO i_bdcdata.
    CLEAR  struct_bdcdata.

    IF lv_cntr > 1.
      PERFORM fill_bdcdata IN PROGRAM yam_common_routines
            USING    'SAPLCORU'  '3100'  'X'  ''  ''
            CHANGING struct_bdcdata.
      APPEND struct_bdcdata  TO i_bdcdata.
      CLEAR  struct_bdcdata.

      PERFORM fill_bdcdata IN PROGRAM yam_common_routines
              USING    ''  ''  ''  'BDC_CURSOR'  'CORUF-UPD_ICON(01)'
              CHANGING struct_bdcdata.
      APPEND struct_bdcdata  TO i_bdcdata.
      CLEAR  struct_bdcdata.

      PERFORM fill_bdcdata IN PROGRAM yam_common_routines
              USING    ''  ''  ''  'BDC_OKCODE'  '=ISTR'
              CHANGING struct_bdcdata.
      APPEND struct_bdcdata  TO i_bdcdata.
      CLEAR  struct_bdcdata.

      PERFORM fill_bdcdata IN PROGRAM yam_common_routines
              USING    ''  ''  ''  'RC27X-FLG_SEL(01)'  'X'
              CHANGING struct_bdcdata.
      APPEND struct_bdcdata  TO i_bdcdata.
      CLEAR  struct_bdcdata.
    ENDIF.
* confirmation : actual data
    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
            USING    'SAPLCORU'  '3200'  'X'  ''  ''
            CHANGING struct_bdcdata.
    APPEND struct_bdcdata  TO i_bdcdata.
    CLEAR  struct_bdcdata.

    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
            USING    ''  ''  ''  'AFRUD-ISMNW_2' '0'
            CHANGING struct_bdcdata.
    APPEND struct_bdcdata  TO i_bdcdata.
    CLEAR  struct_bdcdata.

    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
            USING    ''  ''  ''  'BDC_OKCODE'  '=MB03'
            CHANGING struct_bdcdata.
    APPEND struct_bdcdata  TO i_bdcdata.
    CLEAR  struct_bdcdata.

* Begin insert MOD-001
*    clear: lv_per, lv_budat, lv_bukrs, lv_gjahr, lv_perio2, lv_periv.
*
*    lv_budat = sy-datum.
*    select single bukrs from aufk into lv_bukrs
*      where aufnr = lv_aufnr.
*
*    CALL FUNCTION 'MR_PERIOD_DETERMINE'
*      EXPORTING
*        i_bukrs                = lv_bukrs
*        i_budat                = lv_budat
*      IMPORTING
*        e_lfgja                = lv_gjahr
*        e_lfmon                = lv_perio2
*      EXCEPTIONS
*        invalid_posting_period = 01
*        marv_no_entry          = 02.
*    if lv_perio2 = 0.
*      lv_perio2 = lv_budat+4(2).
*      lv_gjahr = lv_budat+0(4).
*    endif.
*    lv_perio = lv_perio2.

*    IF sy-subrc <> 0.
*
*      select single periv from t001 into lv_periv
*        where bukrs = lv_bukrs.
*
*      CALL FUNCTION 'CKML_F_DETERMINE_NEXT_PERIOD'
*        EXPORTING
*          current_period     = lv_perio
*          current_year       = lv_gjahr
*          f_periv            = lv_periv
*        IMPORTING
*          next_period_period = lv_perio
*          next_period_year   = lv_gjahr.
*
*
**.... Get first day of posting period and assign to posting date
*      CALL FUNCTION 'G_POSTING_DATE_OF_PERIOD_GET'
*        EXPORTING
*          period                    = lv_perio
*          variant                   = lv_periv
*          year                      = lv_gjahr
*        IMPORTING
*          from_date                 = lv_budat
*        EXCEPTIONS
*          period_not_defined        = 1
*          variant_not_defined       = 2
*          OTHERS                    = 3.
*
*      clear lv_budat_w.
*      write lv_budat to lv_budat_w.
*      PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*              USING    ''  ''  ''  'AFRUD-BUDAT' lv_budat_w
*              CHANGING struct_bdcdata.
*      APPEND struct_bdcdata  TO i_bdcdata.
*      CLEAR  struct_bdcdata.

*    ENDIF.
* End insert MOD-001

    LOOP AT i_resb.
* Begin of insert MOD-006
      lv_prat4 = 'Y'.
      IF lv_bemot = 'FF'.
        SELECT SINGLE PRAT4 INTO lv_prat4
          FROM MVKE
          WHERE MATNR = i_resb-matnr AND
                VKORG = lv_vkorg AND
                VTWEG = '11'.
        IF lv_prat4 = 'X'.
          lv_prat4 = 'Y'.
        ELSE.
          lv_prat4 = 'N'.
        ENDIF.
      ENDIF.
      IF lv_prat4 = 'Y'.
* End of insert MOD-006
      CLEAR i_aufm[].
      CLEAR lv_aufm.
      CLEAR i_aufm2[].

      SELECT aufnr werks matnr bwart erfmg
                          INTO TABLE i_aufm2
                          FROM aufm
                          WHERE     aufnr =   lv_aufnr
                          AND       matnr =   i_resb-matnr
*                          AND       lgort =   i_resb-lgort
                          AND       werks =   i_resb-werks.
      LOOP AT i_aufm2.
        COLLECT i_aufm2 INTO i_aufm.
      ENDLOOP.
** Sort data by Service order Number, Material Number, Posting date
      SORT i_aufm BY bwart.
      DESCRIBE TABLE i_aufm LINES lv_aufm.
      IF lv_aufm IS NOT INITIAL.
* First Check if 501's equal the ordered amount
        CLEAR lv_total_501.
        LOOP AT i_aufm.
          IF i_aufm-bwart = '501'.
            lv_total_501 = lv_total_501 + i_aufm-erfmg.
          ENDIF.
        ENDLOOP.
* Sum of qty ordered - all movements should be 0 ... otherwise do the confirmation (261)
        IF lv_total_501 = i_resb-bdmng.
          lv_total = i_resb-bdmng.
          LOOP AT i_aufm.
            IF i_aufm-bwart = '261'.
              lv_total = lv_total - i_aufm-erfmg.
            ENDIF.
            IF i_aufm-bwart = '262'.
              lv_total = lv_total + i_aufm-erfmg.
            ENDIF.
            IF i_aufm-bwart = '502'.
              lv_total = lv_total - i_aufm-erfmg.
            ENDIF.
          ENDLOOP.
        ELSE.
          lv_total = 0. " meaning no confirmation need to be done
          lv_cnf_flag = 'E'.
        ENDIF.

        IF lv_total < 0.
          lv_cnf_flag = 'E'.
        ENDIF.
        IF lv_total <= 0.
*    SELECT aufnr werks lgort matnr bwart SUM( erfmg ) erfme INTO TABLE i_aufm FROM aufm
*      WHERE aufnr = lv_aufnr
*       AND   matnr = i_resb-matnr
*       AND   bwart IN ('261','262')
*       GROUP BY aufnr werks lgort matnr bwart erfme .
          CONTINUE.
*    lv_check = 'Y'.
        ELSE.


* Retrieve the Storage location for confirmation
          CLEAR gv_aufpl.
          SELECT SINGLE aufpl
                  INTO gv_aufpl
                  FROM afko
                  WHERE aufnr = lv_aufnr.

          CLEAR lv_arbid.
          CLEAR gv_lgort.
          CLEAR lv_arbpl.

          SELECT  SINGLE arbid
                  INTO  lv_arbid
                  FROM  afvc
                  WHERE aufpl = gv_aufpl.

          SELECT  SINGLE arbpl
                   INTO  lv_arbpl
                   FROM  crhd
                   WHERE objid = lv_arbid
                   AND STEUS = 'ZCO3'.


          IF sy-subrc EQ 0.
            SELECT SINGLE lgort
              FROM yam_wc_map_sloc INTO gv_lgort
              WHERE werks = i_aufm-werks AND arbpl = lv_arbpl.
          ELSE.
            gv_lgort = i_resb-lgort.
          ENDIF.

          IF gv_lgort IS INITIAL.
            lv_cnf_flag = 'E'.
          ENDIF.

          PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                  USING    'SAPLCOWB'  '0130'  'X'  ''  ''
                  CHANGING struct_bdcdata.
          APPEND struct_bdcdata  TO i_bdcdata.
          CLEAR  struct_bdcdata.

          PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                  USING    ''  ''  ''  'BDC_OKCODE'  '/00'
                  CHANGING struct_bdcdata.
          APPEND struct_bdcdata  TO i_bdcdata.
          CLEAR  struct_bdcdata.

          CONCATENATE 'COWB_COMP-MATNR(' g_ind ')' INTO gv_scr_field.
          PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                  USING    ''  ''  ''  'BDC_CURSOR'  gv_scr_field
                  CHANGING struct_bdcdata.
          APPEND struct_bdcdata  TO i_bdcdata.
          CLEAR  struct_bdcdata.

          PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                  USING    ''  ''  ''  gv_scr_field  i_resb-matnr
                  CHANGING struct_bdcdata.
          APPEND struct_bdcdata  TO i_bdcdata.
          CLEAR  struct_bdcdata.

          CONCATENATE 'COWB_COMP-ERFMG(' g_ind ')' INTO gv_scr_field.
          PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                  USING    ''  ''  ''  'BDC_CURSOR'  gv_scr_field
                  CHANGING struct_bdcdata.
          APPEND struct_bdcdata  TO i_bdcdata.
          CLEAR  struct_bdcdata.

          WRITE lv_total TO lv_total_c.

          PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                  USING    ''  ''  ''  gv_scr_field  lv_total_c
                  CHANGING struct_bdcdata.
          APPEND struct_bdcdata  TO i_bdcdata.
          CLEAR  struct_bdcdata.

          CONCATENATE 'COWB_COMP-WERKS(' g_ind ')' INTO gv_scr_field.
          PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                  USING    ''  ''  ''  'BDC_CURSOR'  gv_scr_field
                  CHANGING struct_bdcdata.
          APPEND struct_bdcdata  TO i_bdcdata.
          CLEAR  struct_bdcdata.

          PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                  USING    ''  ''  ''  gv_scr_field  i_resb-werks
                  CHANGING struct_bdcdata.
          APPEND struct_bdcdata  TO i_bdcdata.
          CLEAR  struct_bdcdata.

          CONCATENATE 'COWB_COMP-LGORT(' g_ind ')' INTO gv_scr_field.
          PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                  USING    ''  ''  ''  'BDC_CURSOR'  gv_scr_field
                  CHANGING struct_bdcdata.
          APPEND struct_bdcdata  TO i_bdcdata.
          CLEAR  struct_bdcdata.

          PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                 USING    ''  ''  ''  gv_scr_field  gv_lgort
                  CHANGING struct_bdcdata.
          APPEND struct_bdcdata  TO i_bdcdata.
          CLEAR  struct_bdcdata.

          CONCATENATE 'COWB_COMP-POSNR(' g_ind ')' INTO gv_scr_field.
          PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                  USING    ''  ''  ''  'BDC_CURSOR'  gv_scr_field
                  CHANGING struct_bdcdata.
          APPEND struct_bdcdata  TO i_bdcdata.
          CLEAR  struct_bdcdata.

          PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                  USING    ''  ''  ''  gv_scr_field  c_vornr
                  CHANGING struct_bdcdata.
          APPEND struct_bdcdata  TO i_bdcdata.
          CLEAR  struct_bdcdata.

          CONCATENATE 'COWB_COMP-BWART(' g_ind ')' INTO gv_scr_field.
          PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                  USING    ''  ''  ''  'BDC_CURSOR'  gv_scr_field
                  CHANGING struct_bdcdata.
          APPEND struct_bdcdata  TO i_bdcdata.
          CLEAR  struct_bdcdata.

          PERFORM fill_bdcdata IN PROGRAM yam_common_routines
* beging of change MOD-004
*         USING    ''  ''  ''  'COWB_COMP-BWART(01)'  p_bwart
                  USING    ''  ''  ''  gv_scr_field c_bwart
* end of change MOD-004
                  CHANGING struct_bdcdata.
          APPEND struct_bdcdata  TO i_bdcdata.
          CLEAR  struct_bdcdata.

          IF g_ind = 15.
            PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                    USING    'SAPLCOWB'  '0130'  'X'  ''  ''
                    CHANGING struct_bdcdata.
            APPEND struct_bdcdata  TO i_bdcdata.
            CLEAR  struct_bdcdata.

            PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                    USING    ''  ''  ''  'BDC_OKCODE'  '=P+'
                    CHANGING struct_bdcdata.
            APPEND struct_bdcdata  TO i_bdcdata.
            CLEAR  struct_bdcdata.
            g_ind = 1.
          ENDIF.

          g_ind = g_ind + 1.
        ENDIF.
      ENDIF.
* Begin of insert MOD-006
      ENDIF.
* End of insert MOD-006
    ENDLOOP.

    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
            USING    'SAPLCOWB'  '0130'  'X'  ''  ''
            CHANGING struct_bdcdata.
    APPEND struct_bdcdata  TO i_bdcdata.
    CLEAR  struct_bdcdata.

    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
            USING    ''  ''  ''  'BDC_OKCODE'  '=WEIT'
            CHANGING struct_bdcdata.
    APPEND struct_bdcdata  TO i_bdcdata.
    CLEAR  struct_bdcdata.

*  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*          USING    ''  ''  ''  'BDC_CURSOR'  'COWB_COMP-CHARG(01)'
*          CHANGING struct_bdcdata.
*  APPEND struct_bdcdata  TO i_bdcdata.
*  CLEAR  struct_bdcdata.
*
*  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*          USING    ''  ''  ''  'COWB_COMP-CHARG(01)'  gt_irec-charg
*          CHANGING struct_bdcdata.
*  APPEND struct_bdcdata  TO i_bdcdata.
*  CLEAR  struct_bdcdata.
* end of change MOD-004


  ENDIF. "lv_count

ENDFORM.                    "SET_CNFPARTS

************************************************************************
*  KO88 (Settlement)
************************************************************************
FORM set_settl TABLES i_bdcdata
               USING lv_aufnr TYPE aufnr
                     lv_per TYPE tvarvc-low
                     lv_yr  TYPE tvarvc-low.


  REFRESH i_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPLKO71' '1000' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
        USING    ''  ''  ''  'BDC_CURSOR'  'LKO74-TESTLAUF'
        CHANGING struct_bdcdata.

  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '=AUSF'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                       USING: '' '' '' 'LKO74-PERIO' lv_per
                       CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                       USING: '' '' '' 'LKO74-GJAHR' lv_yr
                       CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                       USING: '' '' '' 'LKO74-VAART' c_1
                       CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                       USING: '' '' '' 'LKO74-TESTLAUF' ''
                       CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                       USING: '' '' '' 'CODIA-AUFNR' lv_aufnr
                       CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

ENDFORM.                    "SET_SETTL

************************************************************************
*  SET TECO
************************************************************************
FORM set_teco TABLES i_bdcdata
              USING lv_aufnr TYPE aufnr
                    lv_qmnum TYPE qmel-qmnum
                    gv_retcd LIKE sy-subrc.

  DATA: lv_objnr_ord TYPE aufk-objnr,
        lv_warpl TYPE qmih-warpl.

  DATA:   BEGIN OF stat_tab OCCURS 0.    " Internal status setting table
          INCLUDE STRUCTURE jstat.                            "
  DATA:   END   OF stat_tab.

* Begin insert MOD-001
  DATA: lv_vkorg TYPE vkorg.
* End insert MOD-001

  DATA: lv_moff TYPE i,
        lv_moff1 TYPE i,
        lv_indtx TYPE indtx.
  CONSTANTS:  yes VALUE 'X'.

  DATA : lt_errors TYPE bal_t_msg,
         lv_error TYPE c,
         wa_errors TYPE bal_s_msg,
         gv_handle      TYPE balloghndl,
         is_msg         TYPE bal_s_msg,
         ls_return TYPE bapiret2,
         lt_return TYPE TABLE OF bapiret2.




  DATA:
        it_methods LIKE bapi_alm_order_method OCCURS 0 WITH HEADER LINE,
        it_header LIKE  bapi_alm_order_headers_i OCCURS 0 WITH HEADER LINE.

  CONCATENATE 'OR' lv_aufnr INTO lv_objnr_ord.



  it_methods-refnumber = '00001'.
  .
  it_methods-method = 'TECHNICALCOMPLETE'.
  it_methods-objectkey = lv_aufnr.
  it_methods-objecttype = 'HEADER'.
  APPEND it_methods.
  it_methods-refnumber = '00001'..
  it_methods-method = 'SAVE'.
  it_methods-objectkey = lv_aufnr.
  it_methods-objecttype = ' '.
  APPEND it_methods.

  it_header-orderid = lv_aufnr.
  it_header-teco_ref_date = sy-datum.
  APPEND it_header.

  CALL FUNCTION 'BAPI_ALM_ORDER_MAINTAIN'
    TABLES
      it_methods = it_methods
      it_header  = it_header
      return     = lt_return.


  LOOP AT lt_return TRANSPORTING NO FIELDS WHERE type = 'E' OR type = 'A'.
    EXIT.
  ENDLOOP.
  IF sy-subrc = 0.
    ROLLBACK WORK.
    gv_retcd = 4.
  ELSE.
    COMMIT WORK AND WAIT.
    gv_retcd = 0.

    WAIT UP TO 3 SECONDS.

    CLEAR lv_vkorg.
    SELECT SINGLE vkorg FROM viqmel INTO lv_vkorg
    WHERE qmnum = lv_qmnum.

    SUBMIT yam_close_notifs_for_order
     WITH  s_qmnum = lv_qmnum
     WITH  s_aufnr = lv_aufnr
     WITH  p_vkorg = lv_vkorg
     WITH p_test = ' '
     AND RETURN.

  ENDIF.
*

ENDFORM.                    "SET_TECO

************************************************************************
*  SET CLOSE
************************************************************************
FORM set_close  TABLES i_bdcdata
                USING lv_aufnr TYPE aufnr
                     ctamflag TYPE c.

  DATA: lv_objnr_ord TYPE aufk-objnr.

  DATA: lv_moff TYPE i,
        lv_moff1 TYPE i.

  CONSTANTS:  yes VALUE 'X'.
*Begin of comment MOD-002
*  CONCATENATE 'OR' lv_aufnr INTO lv_objnr_ord.
*  CALL FUNCTION 'STATUS_TEXT_EDIT'
*    EXPORTING
*      FLG_USER_STAT    = YES
*      OBJNR            = lv_objnr_ord
*      ONLY_ACTIVE      = YES
*      SPRAS            = sy-langu
*    IMPORTING
*      LINE             = CAUFVD-STTXT
*      USER_LINE        = CAUFVD-ASTTX
*    EXCEPTIONS
*      OBJECT_NOT_FOUND = 1
*      OTHERS           = 2.
*
*  CLEAR lv_moff.
*  CLEAR lv_moff1.
*  FIND 'FIFI' IN CAUFVD-ASTTX MATCH COUNT lv_moff.
*  IF lv_moff NE 0.
*    add 1 to lv_moff1.
*  ENDIF.
*
*  FIND 'CUFA' IN CAUFVD-ASTTX MATCH COUNT lv_moff.
*  IF lv_moff NE 0.
*    add 1 to lv_moff1.
*  ENDIF.
*
*  FIND 'PAMI' IN CAUFVD-ASTTX MATCH COUNT lv_moff.
*  IF lv_moff NE 0.
*    add 1 to lv_moff1.
*  ENDIF.
*
*  FIND 'TEPO' IN CAUFVD-ASTTX MATCH COUNT lv_moff.
*  IF lv_moff NE 0.
*    add 1 to lv_moff1.
*  ENDIF.
** Begin insert MOD-001
*  FIND 'NOLA' IN CAUFVD-ASTTX MATCH COUNT lv_moff.
*  IF lv_moff NE 0.
*    add 1 to lv_moff1.
*  ENDIF.
** End insert MOD-001
*
*  if lv_moff1 is initial.
*
*    SELECT SINGLE estat INTO g_estat
*            FROM tj30t
*            WHERE stsma = c_statprof
*             AND txt04 = c_FIFI
*             AND spras = sy-langu.
*
*    CALL FUNCTION 'STATUS_CHANGE_EXTERN'
*      EXPORTING
*        check_only                = ' '
*        client                    = sy-mandt
*        objnr                     = lv_objnr_ord
*        user_status               = g_estat
*        set_inact                 = ' '
**                  SET_CHGKZ                 =
*        no_check                  = ' '
**                IMPORTING
**                  STONR                     =
*      EXCEPTIONS
*      object_not_found          = 1
*      status_inconsistent       = 2
*      status_not_allowed        = 3
*      OTHERS                    = 4.
*    IF sy-subrc = 0.
*      COMMIT WORK AND WAIT.
*    ENDIF.
*
*  endif.
*End of comment MOD-002




  REFRESH i_bdcdata.
* First Screen
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPLCOIH' '0101' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '/00'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                       USING: '' '' '' 'CAUFVD-AUFNR' lv_aufnr
                       CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

*  IF ctamflag = 'N'.
*    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*                       USING: 'SAPLCOIH' '3000' 'X' ' ' ' '
*                       CHANGING struct_bdcdata.
*
*    APPEND struct_bdcdata TO i_bdcdata.
*    CLEAR  struct_bdcdata.
*
*    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*                        USING: '' '' '' 'BDC_OKCODE' '=ESPE'
*                        CHANGING struct_bdcdata.
*
*    APPEND struct_bdcdata TO i_bdcdata.
*    CLEAR  struct_bdcdata.
*  ENDIF.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPLCOIH' '3000' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                       USING: '' '' '' 'BDC_OKCODE' '=BABS'
                       CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.


*  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*                      USING: 'SAPLSPO1' '0100' 'X' ' ' ' '
*                      CHANGING struct_bdcdata.
*
*  APPEND struct_bdcdata TO i_bdcdata.
*  CLEAR  struct_bdcdata.
*
*  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*                       USING: '' '' '' 'BDC_OKCODE' '=YES'
*                       CHANGING struct_bdcdata.
*
*  APPEND struct_bdcdata TO i_bdcdata.
*  CLEAR  struct_bdcdata.
*
*  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*                    USING: 'SAPLCOIH' '3000' 'X' ' ' ' '
*                    CHANGING struct_bdcdata.
*
*  APPEND struct_bdcdata TO i_bdcdata.
*  CLEAR  struct_bdcdata.
*
*  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*                       USING: '' '' '' 'BDC_OKCODE' '=BU'
*                       CHANGING struct_bdcdata.
*
*  APPEND struct_bdcdata TO i_bdcdata.
*  CLEAR  struct_bdcdata.

ENDFORM.                    "SET_CLOSE


* Begin of insert MOD-005
FORM set_invoice USING lv_aufnr TYPE aufnr
                       lv_kdauf TYPE kdauf
                       ctamflag TYPE c
                       lv_langu TYPE kna1-spras
                       lv_vkorg TYPE vkorg
                       lv_sernr TYPE gernr
                       lv_name2 TYPE name2
                       lv_bstkd TYPE bstkd
                       lv_eqktx TYPE KTX01
                       gv_retcd LIKE sy-subrc.


  DATA : lv_textid TYPE tdobname,
         lv_quot TYPE vbeln,
         lv_salord TYPE vbeln,
         lv_fkart TYPE fkart.

  DATA: ls_vbakkom  TYPE vbakkom,
        ls_vbakkomx TYPE vbakkomx,
        ls_vbak     TYPE vbak.
  DATA: lt_vbpakom  TYPE STANDARD TABLE OF vbpakom.

  DATA: lv_spras       TYPE kna1-spras,
        lv_laiso       TYPE laiso,
        lt_partners_to TYPE TABLE OF vbpa2kom,
        ls_partners_to TYPE vbpa2kom,
        ls_partners TYPE yscs_partnerseo,
        lt_text_header TYPE STANDARD TABLE OF bapisdtext,
        ls_text_header TYPE bapisdtext.

  DATA: lt_return    TYPE STANDARD TABLE OF bapiret2,
        ls_return    TYPE bapiret2,
        lv_iphas       TYPE afih-iphas.

  DATA: lv_objnr TYPE j_objnr.


* Retrieve the sales order

  IF ctamflag = 'Y'.
    SELECT SINGLE vbeln FROM vbak INTO lv_quot
      WHERE aufnr = lv_aufnr AND
            vbtyp = 'B'.
    IF sy-subrc = 0.
      SELECT SINGLE vbeln FROM vbfa INTO lv_salord
        WHERE vbelv = lv_quot AND
              posnv = 0 AND
              vbtyp_n = 'L'.
    ENDIF.
  ELSE.
    lv_salord = lv_kdauf.
  ENDIF.

* Update the salesorder + remove the billing block
   ls_vbakkom-vbeln  = lv_salord.
   ls_vbakkomx-vbeln = lv_salord.

  ls_vbakkom-faksk  = ' '.
  ls_vbakkomx-faksk = 'X'.

  ls_vbakkomx-updkz = 'U'.


  CALL FUNCTION 'CONVERSION_EXIT_ISOLA_OUTPUT'
    EXPORTING
      input  = lv_langu
    IMPORTING
      output = lv_laiso.



  SELECT SINGLE textid
    FROM yse_close_inv INTO lv_textid
    WHERE vkorg = lv_vkorg
      AND doctyp = 'INV'.

  SELECT * FROM stxh INTO TABLE gt_stxh
       WHERE tdobject = 'TEXT'
         AND tdid ='ST'
         AND tdspras = lv_langu
         AND tdname LIKE  lv_textid.


CLEAR it_lines.
LOOP at gt_stxh.

      CALL FUNCTION 'READ_TEXT'
        EXPORTING
          id                    = 'ST'
          language              = lv_langu
          name                  = gt_stxh-tdname
          object                = 'TEXT'
*     LOCAL_CAT             = ' '
        IMPORTING
          header                = lv_header
        TABLES
          lines                 = it_lines
        EXCEPTIONS
         id                      = 1
          language                = 2
          name                    = 3
          not_found               = 4
          object                  = 5
          reference_check         = 6
          wrong_access_to_archive = 7
          OTHERS                  = 8.

endloop.

  LOOP AT it_lines.

    REPLACE '<(>&<)>SERNR&' WITH lv_sernr INTO it_lines-tdline.
    REPLACE '<(>&<)>CONTACT&' WITH lv_name2 INTO it_lines-tdline.
    REPLACE '<(>&<)>ORDER&' WITH lv_aufnr INTO it_lines-tdline.
    REPLACE '<(>&<)>PONR&' WITH lv_bstkd INTO it_lines-tdline.
    REPLACE '<(>&<)>EQUIP&' WITH lv_eqktx INTO it_lines-tdline.

    ls_text_header-doc_number = lv_salord.
    ls_text_header-itm_number = 0.
    ls_text_header-text_id    = '0001'.
    ls_text_header-langu      = lv_langu.
    ls_text_header-langu_iso  = lv_laiso.
    ls_text_header-format_col = it_lines-tdformat.
    ls_text_header-text_line  = it_lines-tdline.
    APPEND ls_text_header TO lt_text_header.
    CLEAR ls_text_header.

  ENDLOOP.



         SELECT SINGLE bstkd
              INTO lv_bstkd
              FROM vbkd WHERE vbeln = lv_salord
                          AND posnr = '000000'.
   IF lv_bstkd is INITIAL.
   CONCATENATE 'OR' lv_aufnr INTO lv_objnr.

   ls_vbakkom-bstkd = lv_bstkd.

   ls_vbakkomx-bstkd = 'X'.
   ENDIF.

  CALL FUNCTION 'SD_SALES_DOCU_MAINTAIN'
    EXPORTING
      i_vbakkom      = ls_vbakkom
      i_vbakkomx     = ls_vbakkomx
      i_call_bapi    = 'X'
      with_commit    = 'X'
    TABLES
      ix_text_header = lt_text_header
      ix_vbpa2kom    = lt_partners_to
      return         = lt_return.


  CLEAR: lt_vbrk, lt_vbrp, lt_vbss, lt_vbpa, lt_vbfs, lt_thead, lt_komv.
  REFRESH: lt_vbss.

  CLEAR ls_komfk.
  ls_komfk-vbeln = lv_salord.
  APPEND ls_komfk TO lt_komfk.


  IF ctamflag <> 'Y'.

    SELECT SINGLE *
      FROM vbap
      WHERE vbeln = lv_salord AND pstyv = 'ZOD5'.
    IF sy-subrc = 0.
      lv_fkart = 'ZF2D'.
    ELSE.
      lv_fkart = 'ZF2'.
    ENDIF.

  ELSE.
    lv_fkart = 'L2'.
  ENDIF.

WAIT UP TO 2 SECONDS.

*
  CALL FUNCTION 'RV_INVOICE_CREATE'
    EXPORTING
      invoice_type = lv_fkart
      invoice_date = sy-datum
      vbsk_i       = ls_vbsk
      with_posting = 'B'
    TABLES
      xkomfk       = lt_komfk
      xthead       = lt_thead
      xvbfs        = lt_vbfs
      xvbss        = lt_vbss
      xvbrk        = lt_vbrk
      xvbrp        = lt_vbrp
      xvbpa        = lt_vbpa
      xkomv        = lt_komv.

CLEAR lv_iphas.
SELECT SINGLE iphas INTO lv_iphas
  FROM afih WHERE aufnr = lv_aufnr.

READ TABLE lt_vbfs INTO ls_vbfs WITH KEY msgty = 'E'
                                         msgno = '142'
                                         msgid = 'VF'.
IF sy-subrc = 0.
   gv_retcd = 0.
   COMMIT WORK AND WAIT.
ELSE.
READ TABLE lt_vbfs INTO ls_vbfs WITH KEY msgty = 'E'.
IF sy-subrc = 0.
  ROLLBACK WORK.
  IF lv_iphas = '3'.  "  TECO
    PERFORM cancel_teco using lv_aufnr.
  ENDIF.
  gv_retcd = 5.
ELSE.
  gv_retcd = 0.
  COMMIT WORK AND WAIT.
ENDIF.
ENDIF.
*LOOP AT lt_vbfs INTO ls_vbfs.
*  CLEAR is_msg.
*  MOVE-CORRESPONDING ls_vbfs TO is_msg.
*  PERFORM add_message_to_log USING is_msg.
*ENDLOOP.

ENDFORM.                    "set_invoice
* End of insert MOD-005

*&---------------------------------------------------------------------*
*&      Form  ADD_ACTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->AUFNR      text
*      -->BUKRS      text
*----------------------------------------------------------------------*
FORM action1_nola USING lv_aufnr TYPE aufnr
                  CHANGING lv_msg TYPE char120.


  CONSTANTS :   c_currency  TYPE waerk   VALUE 'EUR'.      "Message typ
  DATA: ls_rihaufk TYPE rihaufk,
        lt_rihaufk TYPE STANDARD TABLE OF rihaufk,
        lt_list_pmco TYPE STANDARD TABLE OF pmco_ext,
        ls_list_pmco TYPE pmco_ext,
        lt_comp_pmco TYPE STANDARD TABLE OF pmco_kgr,
        ls_comp_pmco TYPE pmco_kgr.

  DATA: lv_moff TYPE i.
  DATA: lv_objnr_ord TYPE aufk-objnr,
        lv_labour       LIKE ce11000-vv300,
        lv_bukrs TYPE bukrs.
  DATA: lv_bemot TYPE bemot,
        lv_vaplz TYPE gewrk.

  SELECT SINGLE bukrs FROM aufk INTO lv_bukrs
    WHERE aufnr = lv_aufnr.
  IF sy-subrc = 0.
    SELECT SINGLE * FROM yam_ctam_ccodes
          WHERE bukrs = lv_bukrs.
    IF NOT sy-subrc = 0.
      ctamflag = 'N'.
    ELSE.
      ctamflag = 'Y'.
    ENDIF.
  ENDIF.

  IF ctamflag = 'Y'.
    gv_statprof = 'ZAM00001'.
  ELSE.
    gv_statprof = 'ZAM00006'.
  ENDIF.


  CONCATENATE 'OR' lv_aufnr INTO lv_objnr_ord.

  CALL FUNCTION 'STATUS_TEXT_EDIT'
    EXPORTING
      flg_user_stat    = yes
      objnr            = lv_objnr_ord
      only_active      = yes
      spras            = sy-langu
    IMPORTING
      line             = caufvd-sttxt
      user_line        = caufvd-asttx
    EXCEPTIONS
      object_not_found = 1
      OTHERS           = 2.


  CLEAR lv_moff.
  FIND 'FIFI' IN caufvd-asttx MATCH COUNT lv_moff.
  IF lv_moff EQ 0.

    CLEAR lv_moff.
    FIND 'CUFA' IN caufvd-asttx MATCH COUNT lv_moff.
    IF lv_moff EQ 0.

      CLEAR lv_moff.
      FIND 'PAMI' IN caufvd-asttx MATCH COUNT lv_moff.
      IF lv_moff EQ 0.

        CLEAR lv_moff.
        FIND 'TEPO' IN caufvd-asttx MATCH COUNT lv_moff.
        IF lv_moff EQ 0.

          CONCATENATE 'OR' lv_aufnr INTO ls_rihaufk-objnr.
          SELECT SINGLE waers FROM aufk INTO ls_rihaufk-waers
            WHERE aufnr = lv_aufnr.
          MOVE: lv_aufnr TO ls_rihaufk-aufnr.

          APPEND ls_rihaufk TO lt_rihaufk.

* get planned & actual costs for order
          CALL FUNCTION 'PM_WORKORDER_COSTS_LIST'
             EXPORTING
                pmco_detail    = 'X'
                list_currency  = c_currency
*            ALL_CURRENCIES = 'X'
                external_call  = 'X'
             TABLES
                list_aufk      = lt_rihaufk
                list_pmco      = lt_list_pmco
                comp_pmco      = lt_comp_pmco
             EXCEPTIONS
                no_orders      = 1
                no_currency    = 2
                no_costs_found = 3
                OTHERS         = 4.

          IF  lt_comp_pmco[] IS INITIAL.

            CALL FUNCTION 'PM_WORKORDER_COSTS_LIST'
              EXPORTING
                 pmco_detail    = 'X'
                 list_currency  = ls_rihaufk-waers
*            ALL_CURRENCIES = 'X'
                 external_call  = 'X'
              TABLES
                 list_aufk      = lt_rihaufk
                 list_pmco      = lt_list_pmco
                 comp_pmco      = lt_comp_pmco
              EXCEPTIONS
                 no_orders      = 1
                 no_currency    = 2
                 no_costs_found = 3
                 OTHERS         = 4.
          ENDIF.
          CLEAR lv_labour.
          LOOP AT lt_comp_pmco INTO ls_comp_pmco WHERE vorga = 'RKL'.
            lv_labour = lv_labour + ls_comp_pmco-ikostenkgr.
          ENDLOOP.

*    if not ls_list_pmco is initial.

* Check confirmed labour hours
*          SELECT * FROM CE11000
*           INTO table gt_ce11000
*           WHERE paledger eq c_02
*             AND vrgar    eq c_0
*             AND BUKRS    eq lv_bukrs
*             and rkaufnr  eq lv_aufnr.
*
*              clear lv_labour.
*              loop at gt_ce11000.
*               lv_labour = lv_labour +  gt_ce11000-vv300.
*              endloop.
          IF lv_labour IS INITIAL.

            SELECT SINGLE estat INTO g_estat
            FROM tj30t
            WHERE stsma = gv_statprof
             AND txt04 = c_nola
             AND spras = sy-langu.

            CALL FUNCTION 'STATUS_CHANGE_EXTERN'
              EXPORTING
                check_only                = ' '
                client                    = sy-mandt
                objnr                     = lv_objnr_ord
                user_status               = g_estat
                set_inact                 = ' '
*                  SET_CHGKZ                 =
                no_check                  = ' '
*                IMPORTING
*                  STONR                     =
              EXCEPTIONS
              object_not_found          = 1
              status_inconsistent       = 2
              status_not_allowed        = 3
              OTHERS                    = 4.
            IF sy-subrc = 0.
              COMMIT WORK AND WAIT.
              MESSAGE i001(00) WITH lv_aufnr '--> NOLA activated'
                                  INTO lv_msg.
*                   PERFORM add_message_to_tab USING gv_msg ' '.
              CLEAR: lv_vaplz, lv_bemot.
              SELECT SINGLE vaplz bemot INTO (lv_vaplz, lv_bemot)
                FROM aufk
                WHERE aufnr = lv_aufnr.

              PERFORM set_cnf IN PROGRAM yse_action_routines  USING lv_aufnr lv_vaplz lv_bemot.
              WAIT UP TO 3 SECONDS.

            ELSE.
              MESSAGE i001(00) WITH lv_aufnr '--> NOLA not activated'
                                  INTO lv_msg.
*                   PERFORM add_message_to_tab USING gv_msg ' '.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.


ENDFORM.                    "ADD_ACTION

*&---------------------------------------------------------------------*
*&      Form  CANCEL_TECO
*&---------------------------------------------------------------------*
*       Reset former status
*----------------------------------------------------------------------*
FORM cancel_teco using lv_aufnr.

  DATA lt_messages  TYPE bal_t_msg.
  DATA: lt_return    TYPE STANDARD TABLE OF bapiret2,
      ls_return    TYPE bapiret2.
*Begin of MOD-003
CALL FUNCTION 'CO_ZV_DATA_RESET'.
CALL FUNCTION 'CO_BH_DATA_RESET'.
*End of MOD-003
* Un-teco service order
  CALL FUNCTION 'IBAPI_ALM_ORDER_TECO_RESET'
    EXPORTING
      iv_orderid    = lv_aufnr
    TABLES
      et_messages   = lt_messages
      return        = lt_return
    EXCEPTIONS
      error_message = 1.



*
  READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
  IF sy-subrc <> 0.
    UPDATE afih set iphas = '2'
    where aufnr = lv_aufnr.

    update aufk set phas1 = 'X'
    where aufnr = lv_aufnr.

    update aufk set phas2 = ' '
    where aufnr = lv_aufnr.

  ENDIF.

*  LOOP AT lt_return INTO ls_return.
*    CLEAR is_msg.
*    is_msg-msgty = ls_return-type.
*    is_msg-msgid = ls_return-id.
*    is_msg-msgno = ls_return-number.
*    is_msg-msgv1 = ls_return-message_v1.
*    is_msg-msgv2 = ls_return-message_v2.
*    is_msg-msgv3 = ls_return-message_v3.
*    is_msg-msgv4 = ls_return-message_v4.
*    PERFORM add_message_to_log(ycs_create_invoice) USING is_msg.
*  ENDLOOP.
*
*  READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
*  IF sy-subrc = 0.
*    ROLLBACK WORK.
*  ELSE.
*    READ TABLE lt_return INTO ls_return WITH KEY type = 'A'.
*    IF sy-subrc = 0.
*      ROLLBACK WORK.
*    ELSE.
*      COMMIT WORK AND WAIT.
*    ENDIF.
*  ENDIF.

ENDFORM.                    " CANCEL_TECO
*&---------------------------------------------------------------------*
*&      Form  SET_CNF
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_I_BDCDATA  text
*      -->P_GT_SEO_AUFNR  text
*      <--P_GV_IND  text
*      <--P_LV_CNF_FLAG  text
*----------------------------------------------------------------------*
form SET_CNF  using  p_gt_seo_aufnr p_vaplz p_bemot.

CALL FUNCTION 'YSE_SET_CNF' STARTING NEW TASK 'CNF'
  EXPORTING
    ip_aufnr           = p_gt_seo_aufnr
    ip_vaplz           = p_vaplz
    ip_bemot           = p_bemot.





endform.                    " SET_CNF
