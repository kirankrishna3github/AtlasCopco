*&---------------------------------------------------------------------*
*&  Include           YSE_CCRDC_REPORT_FORMS
*&---------------------------------------------------------------------*
*----------------------------------------------------------------------*
* PROGRAM ID           : YSE_CCRDC_REPORT_FORMS                        *
* PROGRAM TITLE        : CC-RDC REPORTING                              *
* AUTHOR               : SHIREESHA DEPALA                              *
* DATE                 : 14/08/2015                                    *
* DEVELOPMENT ID       : CR3582                                        *
* CHANGE REQUEST NUMBER: CD1K986531                                    *
* PROGRAM DESCRIPTION  : Extraction of CC-RDC sales data               *
*----------------------------------------------------------------------*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
* MOD. NO.|  DATE    | NAME                 |CORRECTION NR| CHANGE REF *
*MOD-001  |01/04/2016| Uma M Rao            |CD1K988670 | CR3582       *
*                                            RDC line item issue
*----------------------------------------------------------------------*
*MOD-002  |14/04/2016| Uma M Rao            |CD1K988674 | CR3582       *
*                                         RDC PO docuemnt not displayed*
*----------------------------------------------------------------------*
*MOD-003  |27/06/2016| Uma M Rao            | CD1K989132| CR3582       *
*                                    CC RDC blank line output displayed*
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  OBLIGATORY_SELECTION_FIELDS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obligatory_selection_fields .
* Make Order creation date mandatory for low & high options
  LOOP AT SCREEN.
    IF screen-name = 'SO_ERDAT-HIGH'.
      screen-required = 1.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.
ENDFORM.                    " OBLIGATORY_SELECTION_FIELDS
*&---------------------------------------------------------------------*
*&      Form  CHECK_VALUES_ON_SELECTIONS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_values_on_selections .

* Local variable declaration
  DATA: lv_days TYPE i.

* Period Creation date SO line can not be > 3 months
  IF NOT so_erdat[] IS INITIAL.
    CALL FUNCTION 'HR_SGPBS_YRS_MTHS_DAYS'
      EXPORTING
        beg_da        = so_erdat-low
        end_da        = so_erdat-high
      IMPORTING
        no_cal_day    = lv_days
      EXCEPTIONS
        dateint_error = 1
        OTHERS        = 2.
    IF sy-subrc = 0.
* Check for 3 months
      IF lv_days > 92.
        MESSAGE e000(yse_sales_log) WITH text-e99.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.                    " CHECK_VALUES_ON_SELECTIONS
*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_data .
* Get CC SO header data
  SELECT vbeln  "Sales Document
         erdat  "Date on Which Record Was Created
         ernam  "Name of Person who Created the Object
         audat  "Document Date (Date Received/Sent)
         vbtyp  "SD document category
         auart  "Sales Document Type
         augru  "Order reason (reason for the business transaction)
         lifsk  "Delivery block (document header)
         vkorg  "Sales Organization
         vtweg  "Distribution Channel
         spart  "Division
         vkgrp  "Sales Group
         vsbed  "Shipping Conditions
         kunnr  "Sold-to party
         kvgr4  "Customer group 4
         FROM vbak
         INTO TABLE it_cc_vbak
         WHERE vbeln IN so_vbeln
         AND   erdat IN so_erdat
         AND   ernam IN so_ernam
         AND   audat IN so_audat
         AND   vkorg IN so_vkorg
         AND   vkgrp IN so_vkgrp.

  IF NOT it_cc_vbak[] IS INITIAL.
* Sort table
    SORT: it_cc_vbak BY vbeln ASCENDING.
* Delete sales orders for CN06 sales org
    DELETE it_cc_vbak WHERE vkorg = lc_cn06.
* Get CC SO item data
    SELECT vbeln   "Sales Document
           posnr   "Sales Document Item
           matnr   "Material Number
           matkl   "Material Group
           arktx   "Short text for sales order item
           pstyv   "Sales document item category
           abgru   "Reason for rejection of quotations and sales orders
           netwr   "Net value of the order item in document currency
           waerk   "SD Document Currency
           kwmeng  "Cumulative Order Quantity in Sales Units
           werks   "Plant (Own or External)
           lgort   "Storage Location
           route   "Route
           FROM vbap
           INTO TABLE it_cc_vbap
           FOR ALL ENTRIES IN it_cc_vbak
           WHERE vbeln = it_cc_vbak-vbeln.
    IF sy-subrc = 0.
* Sort table
      SORT: it_cc_vbap BY vbeln posnr ASCENDING.
    ENDIF.

* Get CC SO name of the orderer
    SELECT spras   "Language Key
           vkgrp   "Sales Group
           bezei   "Description
           FROM tvgrt
           INTO TABLE it_vkgrp
           FOR ALL ENTRIES IN it_cc_vbak
           WHERE spras = lc_en
           AND   vkgrp = it_cc_vbak-vkgrp.

* Get CC Sales Document Flow data
    SELECT vbelv   "Preceding sales and distribution document
           posnv   "Preceding item of an SD document
           vbeln   "Subsequent sales and distribution document
           posnn   "Subsequent item of an SD document
           vbtyp_n "Document category of subsequent document
           vbtyp_v "Document category of preceding SD document
           matnr   "Material Number
           FROM vbfa
           INTO TABLE it_cc_vbfa_j
           FOR ALL ENTRIES IN it_cc_vbak
           WHERE vbelv   = it_cc_vbak-vbeln
           AND   vbtyp_n = lc_j.
    IF sy-subrc = 0.
* Sort table
      SORT: it_cc_vbfa_j BY vbelv posnv vbeln posnn ASCENDING.
    ENDIF.
* Get CC Sales invoice data
    SELECT vbelv   "Preceding sales and distribution document
           posnv   "Preceding item of an SD document
           vbeln   "Subsequent sales and distribution document
           posnn   "Subsequent item of an SD document
           vbtyp_n "Document category of subsequent document
           vbtyp_v "Document category of preceding SD document
           matnr   "Material Number
           FROM vbfa
           INTO TABLE it_cc_vbfa_m
           FOR ALL ENTRIES IN it_cc_vbak
           WHERE vbelv   = it_cc_vbak-vbeln
           AND   vbtyp_n = lc_m.
    IF sy-subrc = 0.
* Sort table
      SORT: it_cc_vbfa_m BY vbelv posnv vbeln posnn ASCENDING.
    ENDIF.

    IF NOT it_cc_vbfa_j[] IS INITIAL.
* Get CC Sales invoice data from Delivery data
      SELECT vbelv   "Preceding sales and distribution document
             posnv   "Preceding item of an SD document
             vbeln   "Subsequent sales and distribution document
             posnn   "Subsequent item of an SD document
             vbtyp_n "Document category of subsequent document
             vbtyp_v "Document category of preceding SD document
             matnr   "Material Number
             FROM vbfa
             INTO TABLE it_cc_vbfa_mnew
             FOR ALL ENTRIES IN it_cc_vbfa_j
             WHERE vbelv   = it_cc_vbfa_j-vbeln
             AND   vbtyp_n = lc_m.
      IF sy-subrc = 0.
* Sort table
        SORT: it_cc_vbfa_mnew BY vbelv posnv vbeln posnn ASCENDING.
      ENDIF.
    ENDIF.
* Get CC Sales PO data
    SELECT vbelv   "Preceding sales and distribution document
           posnv   "Preceding item of an SD document
           vbeln   "Subsequent sales and distribution document
           posnn   "Subsequent item of an SD document
           vbtyp_n "Document category of subsequent document
           vbtyp_v "Document category of preceding SD document
           matnr   "Material Number
           FROM vbfa
           INTO TABLE it_cc_vbfa_v
           FOR ALL ENTRIES IN it_cc_vbak
           WHERE vbelv   = it_cc_vbak-vbeln
           AND   vbtyp_n = lc_v.
    IF sy-subrc = 0.
* Sort table
      SORT: it_cc_vbfa_v BY vbelv posnv vbeln posnn ASCENDING.
    ENDIF.

* Get CC SO Business Data data
    SELECT vbeln     "Sales and Distribution Document Number
           posnr     "Item number of the SD document
           bstkd     "Customer purchase order number
           bsark     "Customer purchase order type
           bstkd_e   "Ship-to Party's Purchase Order Number
           sdabw     "Special processing indicator
           FROM vbkd INTO TABLE it_cc_vbkd
           FOR ALL ENTRIES IN it_cc_vbak
           WHERE vbeln = it_cc_vbak-vbeln.
    IF sy-subrc = 0.
* Sort table
      SORT: it_cc_vbkd BY vbeln posnr ASCENDING.
    ENDIF.
  ENDIF.
  IF NOT so_rdcor[] IS INITIAL
    OR
    NOT so_ebeln[] IS INITIAL.
* Get RDC SO data linked to CC PO
    SELECT *
           FROM yrd_cc_link_rdc
           INTO TABLE it_ccrdc_vbak
           WHERE vbeln IN so_rdcor[]
           AND   ebeln IN so_ebeln[] . "MOD-002
  ELSE.
    IF NOT  it_cc_vbfa_v[] IS INITIAL.
* Sort table
      SORT: it_cc_vbfa_v BY vbelv posnv vbeln posnn ASCENDING.
* Get RDC SO data linked to CC PO based on CC PO
      SELECT *
             FROM yrd_cc_link_rdc
             INTO TABLE it_ccrdc_vbak
             FOR ALL ENTRIES IN it_cc_vbfa_v
             WHERE ebeln = it_cc_vbfa_v-vbeln.
    ENDIF.
  ENDIF.
  IF NOT it_ccrdc_vbak[] IS INITIAL.
* Sort table
    SORT: it_ccrdc_vbak BY vbeln posnr ebeln ebelp ASCENDING.
* Get RDC SO header data
    SELECT vbeln  "Sales Document
           erdat  "Date on Which Record Was Created
           ernam  "Name of Person who Created the Object
           audat  "Document Date (Date Received/Sent)
           vbtyp  "SD document category
           auart  "Sales Document Type
           augru  "Order reason (reason for the business transaction)
           lifsk  "Delivery block (document header)
           vkorg  "Sales Organization
           vtweg  "Distribution Channel
           spart  "Division
           vkgrp  "Sales Group
           vsbed  "Shipping Conditions
           kunnr  "Sold-to party
           kvgr4  "Customer group 4
           FROM vbak
           INTO TABLE it_rdc_vbak
           FOR ALL ENTRIES IN it_ccrdc_vbak
           WHERE vbeln = it_ccrdc_vbak-vbeln
           AND   audat IN so_audat
           AND   lifsk IN so_lifsk.
  ENDIF.

  IF NOT it_rdc_vbak[] IS INITIAL.
* Sort table
    SORT: it_rdc_vbak BY vbeln ASCENDING.
* Get RDC SO item data
    SELECT vbeln   "Sales Document
           posnr   "Sales Document Item
           matnr   "Material Number
           matkl   "Material Group
           arktx   "Short text for sales order item
           pstyv   "Sales document item category
           abgru   "Reason for rejection of quotations and sales orders
           netwr   "Net value of the order item in document currency
           waerk   "SD Document Currency
           kwmeng  "Cumulative Order Quantity in Sales Units
           werks   "Plant (Own or External)
           lgort   "Storage Location
           route   "Route
           FROM vbap
           INTO TABLE it_rdc_vbap
           FOR ALL ENTRIES IN it_rdc_vbak
           WHERE vbeln = it_rdc_vbak-vbeln
           AND   matnr IN so_matnr
           AND   pstyv IN so_pstyv.

    IF NOT it_rdc_vbap[] IS INITIAL.
* Sort table
      SORT: it_rdc_vbap BY vbeln posnr ASCENDING.
* Get RDC SO SLoc data for Material
      SELECT  matnr    "Material Number
              werks    "Plant
              lgort    "Storage Location
              labst    "Valuated Unrestricted-Use Stock
              FROM mard
              INTO TABLE it_rdc_mard
              FOR ALL ENTRIES IN it_rdc_vbap
              WHERE matnr = it_rdc_vbap-matnr
              AND   werks = it_rdc_vbap-werks.
      IF sy-subrc = 0.
* Sort table
        SORT: it_rdc_mard BY matnr werks ASCENDING.
      ENDIF.
* Get RDC SO Plant Data for Material
      SELECT matnr      "Material Number
             werks      "Plant
             dismm      "MRP Type Type
             FROM marc
             INTO TABLE it_rdc_marc
             FOR ALL ENTRIES IN it_rdc_vbap
             WHERE matnr = it_rdc_vbap-matnr
             AND   werks = it_rdc_vbap-werks.
      IF sy-subrc = 0.
* Sort table
        SORT: it_rdc_marc BY matnr werks ASCENDING.
      ENDIF.
    ENDIF.

* Get RDC SO delivery data
    SELECT vbelv   "Preceding sales and distribution document
           posnv   "Preceding item of an SD document
           vbeln   "Subsequent sales and distribution document
           posnn   "Subsequent item of an SD document
           vbtyp_n "Document category of subsequent document
           vbtyp_v "Document category of preceding SD document
           matnr   "Material Number
           FROM vbfa
           INTO TABLE it_rdc_vbfa_j
           FOR ALL ENTRIES IN it_rdc_vbak
           WHERE vbelv   = it_rdc_vbak-vbeln
           AND   vbtyp_n = lc_j.
    IF sy-subrc = 0.
* Sort table
      SORT: it_rdc_vbfa_j BY vbelv posnv vbeln posnn ASCENDING.
    ENDIF.

* Get RDC SO invoice data
    SELECT vbelv   "Preceding sales and distribution document
           posnv   "Preceding item of an SD document
           vbeln   "Subsequent sales and distribution document
           posnn   "Subsequent item of an SD document
           vbtyp_n "Document category of subsequent document
           vbtyp_v "Document category of preceding SD document
           matnr   "Material Number
           FROM vbfa
           INTO TABLE it_rdc_vbfa_m
           FOR ALL ENTRIES IN it_rdc_vbak
           WHERE vbelv   = it_rdc_vbak-vbeln
           AND   vbtyp_n = lc_m.

    IF NOT it_rdc_vbfa_m[]  IS INITIAL.
* Sort table
      SORT: it_rdc_vbfa_m BY vbelv posnv vbeln posnn ASCENDING.
* Get RDC billing data
      SELECT vbeln  "Billing Document
             fkart  "Billing Type
             fkdat  "Billing date for billing index and printout
             belnr  "Accounting Document Number
             gjahr  "Fiscal Year
             FROM vbrk
             INTO TABLE it_rdc_vbrk
             FOR ALL ENTRIES IN it_rdc_vbfa_m
             WHERE vbeln = it_rdc_vbfa_m-vbeln.
      IF sy-subrc = 0.
* Sort table
        SORT: it_rdc_vbrk BY vbeln ASCENDING.
      ENDIF.
    ENDIF.
* Get RDC SO PO data
    SELECT vbelv   "Preceding sales and distribution document
           posnv   "Preceding item of an SD document
           vbeln   "Subsequent sales and distribution document
           posnn   "Subsequent item of an SD document
           vbtyp_n "Document category of subsequent document
           vbtyp_v "Document category of preceding SD document
           matnr   "Material Number
           FROM vbfa
           INTO TABLE it_rdc_vbfa_v
           FOR ALL ENTRIES IN it_rdc_vbak
           WHERE vbelv   = it_rdc_vbak-vbeln
           AND   vbtyp_n = lc_v.

    IF NOT it_rdc_vbfa_v[] IS INITIAL.
* Sort table
      SORT: it_rdc_vbfa_v BY vbelv posnv vbeln posnn ASCENDING.
* Get RDC Purchasing Document data
      SELECT ebeln  "Purchasing Document Number
             bukrs  "Company Code
             bstyp  "Purchasing Document Category
             bsart  "Purchasing Document Type
             kunnr  "Customer Number
             FROM ekko
             INTO TABLE it_rdc_ekko
             FOR ALL ENTRIES IN it_rdc_vbfa_v
             WHERE ebeln = it_rdc_vbfa_v-vbeln.
      IF sy-subrc = 0.
* Sort table
        SORT: it_rdc_ekko BY ebeln ASCENDING.
      ENDIF.
    ENDIF.
* Get RDC SO Business Data data
    SELECT vbeln     "Sales and Distribution Document Number
           posnr     "Item number of the SD document
           bstkd     "Customer purchase order number
           bsark     "Customer purchase order type
           bstkd_e   "Ship-to Party's Purchase Order Number
           sdabw     "Special processing indicator
           FROM vbkd
           INTO TABLE it_rdc_vbkd
           FOR ALL ENTRIES IN it_rdc_vbak
           WHERE vbeln = it_rdc_vbak-vbeln.
    IF sy-subrc = 0.
* Sort table
      SORT: it_rdc_vbkd BY vbeln posnr ASCENDING.
    ENDIF.
* Get RDC SO Schedule Line Data
    SELECT vbeln    "Sales Document
           posnr    "Sales Document Item
           etenr    "Delivery Schedule Line Number
           ettyp    "Schedule line category
           edatu    "Schedule line date
           FROM vbep
           INTO TABLE it_rdc_vbep
           FOR ALL ENTRIES IN it_rdc_vbak
           WHERE vbeln = it_rdc_vbak-vbeln.
    IF sy-subrc = 0.
* Sort table
      SORT: it_rdc_vbep BY vbeln posnr ASCENDING.
    ENDIF.

* Get RDC SO header billing staus data
    SELECT vbeln  "Sales and Distribution Document Number
           lfstk  "Delivery status
           lfgsk  "Overall delivery status for all items
           wbstk  "Total goods movement status
           gbstk  "Overall processing status of document
           FROM vbuk
           INTO TABLE it_rdc_vbuk
           FOR ALL ENTRIES IN it_rdc_vbak
           WHERE vbeln = it_rdc_vbak-vbeln.

    IF sy-subrc = 0.
* Sort table
      SORT: it_rdc_vbuk BY vbeln ASCENDING.
    ENDIF.
* Get RDC SO item billing staus data
    SELECT vbeln  "Sales and Distribution Document Number
           posnr  "Item
           lfsta  "Delivery status
           gbsta  "Overall processing status of the SD document item
           FROM vbup
           INTO TABLE it_rdc_vbup
           FOR ALL ENTRIES IN it_rdc_vbak
           WHERE vbeln = it_rdc_vbak-vbeln
           AND   gbsta IN so_gbsta.
    IF sy-subrc = 0.
* Sort table
      SORT: it_rdc_vbup BY vbeln posnr ASCENDING.
    ENDIF.

* Get RDC SD doc delivery data
    SELECT vbeln    "Delivery
           wadat    "Planned goods movement date
           FROM likp
           INTO TABLE it_rdc_likp
           FOR ALL ENTRIES IN it_rdc_vbfa_j
           WHERE vbeln = it_rdc_vbfa_j-vbeln.
    IF sy-subrc = 0.
* Sort table
      SORT: it_rdc_likp BY vbeln ASCENDING.
    ENDIF.

* Get RDC SO delivery item data
    SELECT vbeln     "Delivery
           posnr     "Delivery Item
           pstyv     "Item category
           lfimg     "Actual quantity delivered (in sales units)
           vrkme     "Sales unit
           FROM lips
           INTO TABLE it_rdc_lips
           FOR ALL ENTRIES IN it_rdc_vbfa_j
           WHERE vbeln = it_rdc_vbfa_j-vbeln.
    IF sy-subrc = 0.
* Sort table
      SORT: it_rdc_lips BY vbeln posnr ASCENDING.
    ENDIF.
* Get RDC SO Partner data
    SELECT vbeln       "Sales and Distribution Document Number
           posnr       "Item number of the SD document
           parvw       "Partner Function
           kunnr       "Customer Number
           lifnr       "Account Number of Vendor or Creditor
           adrnr       "Address
           FROM vbpa
           INTO TABLE it_rdc_vbpa
           FOR ALL ENTRIES IN it_rdc_vbak
           WHERE vbeln = it_rdc_vbak-vbeln
           AND   parvw = lc_we.

    IF NOT it_rdc_vbpa[] IS INITIAL.
* Sort table
      SORT: it_rdc_vbpa BY vbeln posnr ASCENDING.
* Get RDC Ship-to address data
      SELECT addrnumber      "Address number
             name1           "Name 1
             name2           "Name 2
             city1           "City
             street          "Street
             FROM adrc
             INTO TABLE it_rdc_adrc
             FOR ALL ENTRIES IN it_rdc_vbpa
             WHERE addrnumber = it_rdc_vbpa-adrnr.
    ENDIF.
  ENDIF.
ENDFORM.                    " GET_DATA
*&---------------------------------------------------------------------*
*&      Form  PROCESS_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM process_data .

* Clear local variable
  CLEAR: lv_counter.

* Add counter field to each unqiue delivery for CC order
  LOOP AT it_cc_vbfa_j INTO wa_cc_vbfa_j.
    lv_counter = lv_counter + 1.
    AT NEW posnv.
      IF sy-tabix NE lc_1.
        lv_counter = lc_1.
      ENDIF.
    ENDAT.
    wa_cc_vbfa_j-counter = lv_counter.

    MODIFY it_cc_vbfa_j FROM wa_cc_vbfa_j TRANSPORTING counter.
* Clear local variable
    CLEAR: wa_cc_vbfa_j.
  ENDLOOP.
* Move data from one internal table to other
  it_cc_vbfa_new =  it_cc_vbfa_j.

* Clear local variable
  CLEAR: lv_counter.

* Add counter field to each unqiue delivery for RDC order
  LOOP AT it_rdc_vbfa_j INTO wa_rdc_vbfa_j.
    lv_counter = lv_counter + 1.
    AT NEW posnv.
      IF sy-tabix NE lc_1.
        lv_counter = lc_1.
      ENDIF.
    ENDAT.
    wa_rdc_vbfa_j-counter = lv_counter.

    MODIFY it_rdc_vbfa_j FROM wa_rdc_vbfa_j TRANSPORTING counter.
* Clear workarea
    CLEAR: wa_rdc_vbfa_j.
  ENDLOOP.

* Move data from one internal table to other
  it_rdc_vbfa_new =  it_rdc_vbfa_j.

* Get final data
  LOOP AT it_cc_vbfa_new INTO wa_cc_vbfa_new.
* Read CC header data
    READ TABLE it_cc_vbak INTO wa_cc_vbak WITH KEY vbeln = wa_cc_vbfa_new-vbelv
                                                   BINARY SEARCH.
    IF sy-subrc = 0.
* Read CC item data
      READ TABLE it_cc_vbap INTO wa_cc_vbap WITH KEY vbeln = wa_cc_vbfa_new-vbelv
                                                     posnr = wa_cc_vbfa_new-posnv
                                                     BINARY SEARCH.

      IF sy-subrc = 0.
        wa_final-cc_vbeln = wa_cc_vbak-vbeln. "CC Sales Document
        wa_final-cc_posnr = wa_cc_vbap-posnr. "CC Sales Document Item
        wa_final-cc_pstyv = wa_cc_vbap-pstyv. "CC Sales Document Item Category
        wa_final-cc_werks = wa_cc_vbap-werks. "CC Sales Document Item Plant
* Read CC sales grp name
        READ TABLE it_vkgrp INTO wa_vkgrp WITH KEY vkgrp = wa_cc_vbak-vkgrp.

        IF sy-subrc = 0.
          wa_final-cc_bezei = wa_vkgrp-bezei. "CC Sales grp name
        ENDIF.
* Read CC delivery
        wa_final-cc_vbeln_o = wa_cc_vbfa_new-vbeln. "CC Outbound document

* Read CC invoice
        READ TABLE it_cc_vbfa_mnew INTO wa_cc_vbfa_mnew WITH KEY vbelv = wa_cc_vbfa_new-vbeln
                                                                 posnv = wa_cc_vbfa_new-posnn
                                                                 BINARY SEARCH.
        IF sy-subrc = 0.
          wa_final-cc_vbeln_m = wa_cc_vbfa_mnew-vbeln. "CC Billing document
        ENDIF.
* Read CC PO
        READ TABLE it_cc_vbfa_v INTO wa_cc_vbfa_v WITH KEY vbelv = wa_cc_vbak-vbeln
                                                           posnv = wa_cc_vbap-posnr
                                                           BINARY SEARCH.
        IF sy-subrc = 0.
          wa_final-cc_ebeln = wa_cc_vbfa_v-vbeln. "CC Purchasing Document Number
* Read CC business data
          READ TABLE it_cc_vbkd INTO wa_cc_vbkd WITH KEY vbeln = wa_cc_vbak-vbeln
                                                         posnr = wa_cc_vbap-posnr
                                                         BINARY SEARCH.
* Read RDC SO from CC PO
          READ TABLE it_ccrdc_vbak INTO wa_ccrdc_vbak WITH KEY ebeln = wa_cc_vbfa_v-vbeln
                                                               posnr = wa_cc_vbfa_v-posnv
                                                               BINARY SEARCH.

          IF sy-subrc = 0.
* Read RDC SO data
            READ TABLE it_rdc_vbak INTO wa_rdc_vbak WITH KEY vbeln = wa_ccrdc_vbak-vbeln
                                                             BINARY SEARCH.
            IF sy-subrc = 0.
              wa_final-rdc_vbeln = wa_rdc_vbak-vbeln. "RDC Sales Document
              wa_final-rdc_audat = wa_rdc_vbak-audat. "RDC Document date
              wa_final-rdc_augru = wa_rdc_vbak-augru. "RDC So Order reason (reason for the business transaction)
              wa_final-rdc_kunnr = wa_rdc_vbak-kunnr. "Sold-to Customer
              wa_final-rdc_kvgr4 = wa_rdc_vbak-kvgr4. "RDC Customer Group
              wa_final-rdc_vsbed = wa_rdc_vbak-vsbed. "RDC SO Shipping Conditions
              wa_final-rdc_lifsk = wa_rdc_vbak-lifsk. "RDC SO Delivery block (document header)
* Read RDC SO item data
              READ TABLE it_rdc_vbap INTO wa_rdc_vbap WITH KEY vbeln = wa_rdc_vbak-vbeln
                                                               posnr = wa_ccrdc_vbak-posnr
                                                               BINARY SEARCH.
* Read RDC SO Material MRP Type
              IF sy-subrc = 0.
                wa_final-rdc_posnr = wa_rdc_vbap-posnr. "RDC Sales Document Item
                wa_final-rdc_matnr = wa_rdc_vbap-matnr. "Material Number
                wa_final-rdc_arktx = wa_rdc_vbap-arktx. "Material des (Short text of SO item)
                wa_final-rdc_kwmeng = wa_rdc_vbap-kwmeng. "RDC SO Delivery Quantity
                wa_final-rdc_pstyv = wa_rdc_vbap-pstyv. "RDC Sales document item category
                wa_final-rdc_waerk = wa_rdc_vbap-waerk. "RDC SD Document Currency
                wa_final-rdc_netwr = wa_rdc_vbap-netwr. "RDC Net value of the order item in document currency
                wa_final-rdc_route = wa_rdc_vbap-route. "RDC Route
                wa_final-rdc_abgru = wa_rdc_vbap-abgru. "RDC Reason for rejection of quotations and sales orders
                READ TABLE it_rdc_marc INTO wa_rdc_marc WITH KEY matnr = wa_rdc_vbap-matnr
                                                                 werks = wa_rdc_vbap-werks
                                                                 BINARY SEARCH.
                IF sy-subrc = 0.
                  wa_final-rdc_dismm = wa_rdc_marc-dismm. "RDC MRP Type

                ENDIF.
              ENDIF.
* Read RDC SO delivery
              READ TABLE it_rdc_vbfa_new INTO wa_rdc_vbfa_new WITH KEY vbelv = wa_rdc_vbak-vbeln
                                                                   posnv = wa_rdc_vbap-posnr
                                                                   rdc_counter = wa_cc_vbfa_new-cc_counter
                                                                   BINARY SEARCH.
              IF sy-subrc = 0.
                wa_final-rdc_vbeln_o = wa_rdc_vbfa_new-vbeln.
* Read RDC SO delivery Goods mov data
                READ TABLE it_rdc_likp INTO wa_rdc_likp WITH KEY vbeln = wa_rdc_vbfa_j-vbeln
                                                                 BINARY SEARCH.
                IF sy-subrc = 0.
                  wa_final-rdc_wadat = wa_rdc_likp-wadat. "Actual Deivery date
                ENDIF.
* Read RDC SO delivery qty item data
                READ TABLE it_rdc_lips INTO wa_rdc_lips WITH KEY vbeln = wa_rdc_vbfa_new-vbeln
                                                                 posnr = wa_rdc_vbap-posnr
                                                                 BINARY SEARCH.
                IF sy-subrc = 0.
                  wa_final-rdc_lfimg = wa_rdc_lips-lfimg. "Delivery Quantity
                  wa_final-rdc_vrkme = wa_rdc_lips-vrkme. "Sales Unit (UOM)
                ENDIF.
* Read RDC header SO billing status data
                READ TABLE it_rdc_vbuk INTO wa_rdc_vbuk WITH KEY vbeln = wa_rdc_vbak-vbeln
                                                                 BINARY SEARCH.
                IF sy-subrc = 0.
* Read RDC SO item billing status data
                  READ TABLE it_rdc_vbup INTO wa_rdc_vbup WITH KEY vbeln = wa_rdc_vbak-vbeln
                                                                   posnr = wa_rdc_vbap-posnr
                                                                   BINARY SEARCH.
                  wa_final-rdc_lfsta = wa_rdc_vbup-lfsta. "Delivery Status
                  wa_final-rdc_gbsta = wa_rdc_vbup-gbsta. "Overall delivery status for all items
                ENDIF.
* Get Available stock
                IF wa_rdc_vbuk-wbstk = lc_c.

                  lv_kwmeng = wa_rdc_vbap-kwmeng - wa_rdc_lips-lfimg.

                  IF lv_kwmeng LE 0.
                    wa_final-rdc_available = lc_y. "Availability
                  ELSE.
                    wa_final-rdc_available = lc_n. "Not Available
                  ENDIF.
                ELSE.
                  wa_final-rdc_available = lc_n. "Not Available
                ENDIF.
              ENDIF.
* Read RDC SO invoice
              READ TABLE it_rdc_vbfa_m INTO wa_rdc_vbfa_m WITH KEY vbelv = wa_rdc_vbak-vbeln
                                                                   posnv = wa_rdc_vbap-posnr
                                                                   BINARY SEARCH.
              IF sy-subrc = 0.
                wa_final-rdc_vbeln_m = wa_rdc_vbfa_m-vbeln. "RDC SO Billing document
* Read RDC billing data
                READ TABLE it_rdc_vbrk INTO wa_rdc_vbrk WITH KEY vbeln = wa_rdc_vbfa_m-vbeln
                                                                 BINARY SEARCH.
              ENDIF.
* Read RDC SO invoice
              READ TABLE it_rdc_vbfa_v INTO wa_rdc_vbfa_v WITH KEY vbelv = wa_rdc_vbak-vbeln
                                                                   posnv = wa_rdc_vbap-posnr
                                                                   BINARY SEARCH.
              IF sy-subrc = 0.
                wa_final-rdc_ebeln = wa_rdc_vbfa_v-vbeln. "RDC Purchasing Document Number
* Get PO Item text
                IF NOT wa_final-rdc_ebeln IS INITIAL.
* Convert PO item number into 5 digit character
                  lv_po_item = wa_rdc_vbfa_v-posnn+1(5).
* Concatenate PO number and Item number
                  CONCATENATE wa_final-rdc_ebeln lv_po_item
                              INTO lv_poit.
* Call function module to get PO Item text
                  CALL FUNCTION 'READ_TEXT'
                    EXPORTING
                      client                  = sy-mandt
                      id                      = 'F01'
                      language                = lang
                      name                    = lv_poit
                      object                  = 'EKPO'
                    TABLES
                      lines                   = gt_lines
                    EXCEPTIONS
                      id                      = 1
                      language                = 2
                      name                    = 3
                      not_found               = 4
                      object                  = 5
                      reference_check         = 6
                      wrong_access_to_archive = 7
                      OTHERS                  = 8.
                  IF sy-subrc = 0.
                    LOOP AT gt_lines INTO ga_lines.
                      wa_final-rdc_poitext = ga_lines-tdline. "PO Item text
                    ENDLOOP.
                  ENDIF.
                  CLEAR: lv_poit, lv_po_item.
                  REFRESH: gt_lines[].
                ENDIF.
* Read RDC PO
                READ TABLE it_rdc_ekko INTO wa_rdc_ekko WITH KEY ebeln = wa_rdc_vbfa_v-vbeln
                                                                 BINARY SEARCH.
              ENDIF.
* Read RDC So business data
              READ TABLE it_rdc_vbkd INTO wa_rdc_vbkd WITH KEY vbeln = wa_rdc_vbak-vbeln
                                                               posnr = wa_rdc_vbap-posnr
                                                               BINARY SEARCH.
              IF sy-subrc = 0.
                wa_final-rdc_sdabw   = wa_rdc_vbkd-sdabw.   "RDC SO Special processing indicator
                wa_final-rdc_bstkd_e = wa_rdc_vbkd-bstkd_e. "RDC Ship-to PO
              ENDIF.
* Read the lastest delv date from the schedule lines
* Refresh temporary data
              REFRESH: it_rdc_vbep1[].
              CLEAR: it_rdc_vbep1.
* Move VBEP data into an temp internal table
              MOVE it_rdc_vbep[] TO it_rdc_vbep1[].
* Sort table in descending order to get the latest record
              SORT: it_rdc_vbep1 BY vbeln posnr etenr DESCENDING.
* Delete duplicate records to get unique record
              DELETE ADJACENT DUPLICATES FROM it_rdc_vbep1[] COMPARING vbeln posnr.

              READ TABLE it_rdc_vbep1 INTO wa_rdc_vbep1 WITH KEY vbeln = wa_rdc_vbak-vbeln
                                                                posnr = wa_rdc_vbap-posnr
                                                                BINARY SEARCH.
              IF sy-subrc = 0.
                wa_final-rdc_edatu = wa_rdc_vbep1-edatu. "RDC Schedule line date
              ENDIF.
* Read RDC SO Ship-to partner data
              READ TABLE it_rdc_vbpa INTO wa_rdc_vbpa WITH KEY vbeln = wa_rdc_vbak-vbeln
                                                               parvw = lc_we
                                                               BINARY SEARCH.
              IF sy-subrc = 0.
* Read RDC SO Ship-to address data
                READ TABLE it_rdc_adrc INTO wa_rdc_adrc WITH KEY addrnumber = wa_rdc_vbpa-adrnr
                                                                 BINARY SEARCH.
                IF sy-subrc = 0.
                  wa_final-rdc_name1  = wa_rdc_adrc-name1.  "Ship-to Name1
                  wa_final-rdc_name2  = wa_rdc_adrc-name2.  "Ship-to Name2
                  wa_final-rdc_street = wa_rdc_adrc-street. "Street
                  wa_final-rdc_city1  = wa_rdc_adrc-city1.  "City
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
* Append data into final internal table
    APPEND wa_final TO it_final.
* Clear all workareas
    CLEAR: wa_cc_vbak, wa_cc_vbap,  wa_cc_vbfa_j, wa_cc_vbfa_v,wa_cc_vbfa_new,
           wa_vkgrp, wa_cc_vbkd, wa_ccrdc_vbak, wa_rdc_vbak, wa_rdc_vbap,
           wa_rdc_marc, wa_rdc_vbfa_j, wa_rdc_vbfa_m, wa_rdc_vbfa_v, wa_rdc_likp,
           wa_rdc_lips, wa_rdc_vbuk, lv_kwmeng, wa_rdc_vbrk, wa_rdc_ekko,
           wa_rdc_vbkd, wa_rdc_vbep1, wa_rdc_vbpa, wa_rdc_adrc, wa_final,wa_cc_vbfa_mnew, wa_rdc_vbfa_new.
  ENDLOOP.

* Get the Remained delivery records from RDC table
  LOOP AT it_rdc_vbfa_new INTO wa_rdc_vbfa_new.

* Get the RDC delivery entry which is not fetched already
    READ TABLE it_final INTO wa_final
             WITH KEY  rdc_vbeln = wa_rdc_vbfa_new-vbelv
                       rdc_posnr = wa_rdc_vbfa_new-posnv
                       rdc_vbeln_o = wa_rdc_vbfa_new-vbeln.

    IF sy-subrc NE 0.
      wa_final-rdc_vbeln = wa_rdc_vbfa_new-vbelv.    "RDC SO
*      wa_final-rdc_posnr = wa_rdc_vbfa_new-posnv.    "RDC SO Item "-MOD-001
      wa_final-rdc_vbeln_o = wa_rdc_vbfa_new-vbeln.  "RDC Outbound doc (Delivery no)

* Read RDC SO
      READ TABLE it_ccrdc_vbak INTO wa_ccrdc_vbak WITH KEY vbeln = wa_rdc_vbfa_new-vbelv.

* Read CC PO
      IF sy-subrc = 0.
        READ TABLE it_cc_vbfa_v INTO wa_cc_vbfa_v WITH KEY vbeln = wa_ccrdc_vbak-ebeln
                                                           posnn = wa_ccrdc_vbak-ebelp.
        IF sy-subrc = 0.
          wa_final-cc_vbeln = wa_cc_vbfa_v-vbelv.  "CC SO
*          wa_final-cc_posnr = wa_cc_vbfa_v-posnv.  "CC SO Item
          wa_final-cc_ebeln = wa_cc_vbfa_v-vbeln.  "CC PO
* Read CC header data
          READ TABLE it_cc_vbak INTO wa_cc_vbak WITH KEY vbeln = wa_cc_vbfa_v-vbelv.

* Read CC item data
          READ TABLE it_cc_vbap INTO wa_cc_vbap WITH KEY vbeln = wa_cc_vbfa_v-vbelv
                                                         posnr = wa_cc_vbfa_v-posnv
                                                         BINARY SEARCH.

          IF sy-subrc = 0.
            wa_final-cc_pstyv = wa_cc_vbap-pstyv. "CC Sales Document Item Category
            wa_final-cc_werks = wa_cc_vbap-werks. "CC Sales Document Item Plant
* Read CC sales grp name
            READ TABLE it_vkgrp INTO wa_vkgrp WITH KEY vkgrp = wa_cc_vbak-vkgrp.

            IF sy-subrc = 0.
              wa_final-cc_bezei = wa_vkgrp-bezei. "CC Sales grp name
            ENDIF.
          ENDIF.
        ENDIF.

* Read RDC SO data
        READ TABLE it_rdc_vbak INTO wa_rdc_vbak WITH KEY vbeln = wa_rdc_vbfa_new-vbelv
                                                         BINARY SEARCH.
        IF sy-subrc = 0.
          wa_final-rdc_vbeln = wa_rdc_vbak-vbeln. "RDC Sales Document
          wa_final-rdc_audat = wa_rdc_vbak-audat. "RDC Document date
          wa_final-rdc_augru = wa_rdc_vbak-augru. "RDC So Order reason (reason for the business transaction)
          wa_final-rdc_kunnr = wa_rdc_vbak-kunnr. "Sold-to Customer
          wa_final-rdc_kvgr4 = wa_rdc_vbak-kvgr4. "RDC Customer Group
          wa_final-rdc_vsbed = wa_rdc_vbak-vsbed. "RDC SO Shipping Conditions
          wa_final-rdc_lifsk = wa_rdc_vbak-lifsk. "RDC SO Delivery block (document header)
* Read RDC SO item data
          READ TABLE it_rdc_vbap INTO wa_rdc_vbap WITH KEY vbeln = wa_rdc_vbak-vbeln
                                                           posnr = wa_rdc_vbfa_new-posnv
                                                           BINARY SEARCH.
* Read RDC SO Material MRP Type
          IF sy-subrc = 0.
            wa_final-rdc_posnr = wa_rdc_vbap-posnr. "RDC Sales Document Item
            wa_final-rdc_matnr = wa_rdc_vbap-matnr. "Material Number
            wa_final-rdc_arktx = wa_rdc_vbap-arktx. "Material des (Short text of SO item)
            wa_final-rdc_kwmeng = wa_rdc_vbap-kwmeng. "RDC SO Delivery Quantity
            wa_final-rdc_pstyv = wa_rdc_vbap-pstyv. "RDC Sales document item category
            wa_final-rdc_waerk = wa_rdc_vbap-waerk. "RDC SD Document Currency
            wa_final-rdc_netwr = wa_rdc_vbap-netwr. "RDC Net value of the order item in document currency
            wa_final-rdc_route = wa_rdc_vbap-route. "RDC Route
            wa_final-rdc_abgru = wa_rdc_vbap-abgru. "RDC Reason for rejection of quotations and sales orders
            READ TABLE it_rdc_marc INTO wa_rdc_marc WITH KEY matnr = wa_rdc_vbap-matnr
                                                             werks = wa_rdc_vbap-werks
                                                             BINARY SEARCH.
            IF sy-subrc = 0.
              wa_final-rdc_dismm = wa_rdc_marc-dismm. "RDC MRP Type

            ENDIF.
          ENDIF.

          wa_final-rdc_vbeln_o = wa_rdc_vbfa_new-vbeln.
* Read RDC SO delivery Goods mov data
          READ TABLE it_rdc_likp INTO wa_rdc_likp WITH KEY vbeln = wa_rdc_vbfa_new-vbeln
                                                           BINARY SEARCH.
          IF sy-subrc = 0.
            wa_final-rdc_wadat = wa_rdc_likp-wadat. "Actual Deivery date
          ENDIF.
* Read RDC SO delivery qty item data
          READ TABLE it_rdc_lips INTO wa_rdc_lips WITH KEY vbeln = wa_rdc_vbfa_new-vbeln
                                                           posnr = wa_rdc_vbap-posnr
                                                           BINARY SEARCH.
          IF sy-subrc = 0.
            wa_final-rdc_lfimg = wa_rdc_lips-lfimg. "Delivery Quantity
            wa_final-rdc_vrkme = wa_rdc_lips-vrkme. "Sales Unit (UOM)
          ENDIF.
* Read RDC header SO billing status data
          READ TABLE it_rdc_vbuk INTO wa_rdc_vbuk WITH KEY vbeln = wa_rdc_vbak-vbeln
                                                           BINARY SEARCH.
          IF sy-subrc = 0.
* Read RDC SO item billing status data
            READ TABLE it_rdc_vbup INTO wa_rdc_vbup WITH KEY vbeln = wa_rdc_vbak-vbeln
                                                             posnr = wa_rdc_vbap-posnr
                                                             BINARY SEARCH.
            wa_final-rdc_lfsta = wa_rdc_vbup-lfsta. "Delivery Status
            wa_final-rdc_gbsta = wa_rdc_vbup-gbsta. "Overall delivery status for all items
          ENDIF.
* Get Available stock
          IF wa_rdc_vbuk-wbstk = lc_c.

            lv_kwmeng = wa_rdc_vbap-kwmeng - wa_rdc_lips-lfimg.

            IF lv_kwmeng LE 0.
              wa_final-rdc_available = lc_y. "Availability
            ELSE.
              wa_final-rdc_available = lc_n. "Not Available
            ENDIF.
          ELSE.
            wa_final-rdc_available = lc_n. "Not Available
          ENDIF.
* Read RDC SO invoice
          READ TABLE it_rdc_vbfa_m INTO wa_rdc_vbfa_m WITH KEY vbelv = wa_rdc_vbak-vbeln
                                                               posnv = wa_rdc_vbap-posnr
                                                               BINARY SEARCH.
          IF sy-subrc = 0.
            wa_final-rdc_vbeln_m = wa_rdc_vbfa_m-vbeln. "RDC SO Billing document
* Read RDC billing data
            READ TABLE it_rdc_vbrk INTO wa_rdc_vbrk WITH KEY vbeln = wa_rdc_vbfa_m-vbeln
                                                             BINARY SEARCH.
          ENDIF.
* Read RDC SO invoice
          READ TABLE it_rdc_vbfa_v INTO wa_rdc_vbfa_v WITH KEY vbelv = wa_rdc_vbak-vbeln
                                                               posnv = wa_rdc_vbap-posnr
                                                               BINARY SEARCH.
          IF sy-subrc = 0.
            wa_final-rdc_ebeln = wa_rdc_vbfa_v-vbeln. "RDC Purchasing Document Number
* Get PO Item text
            IF NOT wa_final-rdc_ebeln IS INITIAL.
* Convert PO item number into 5 digit character
              lv_po_item = wa_rdc_vbfa_v-posnn+1(5).
* Concatenate PO number and Item number
              CONCATENATE wa_final-rdc_ebeln lv_po_item
                          INTO lv_poit.
* Call function module to get PO Item text
              CALL FUNCTION 'READ_TEXT'
                EXPORTING
                  client                  = sy-mandt
                  id                      = 'F01'
                  language                = lang
                  name                    = lv_poit
                  object                  = 'EKPO'
                TABLES
                  lines                   = gt_lines
                EXCEPTIONS
                  id                      = 1
                  language                = 2
                  name                    = 3
                  not_found               = 4
                  object                  = 5
                  reference_check         = 6
                  wrong_access_to_archive = 7
                  OTHERS                  = 8.
              IF sy-subrc = 0.
                LOOP AT gt_lines INTO ga_lines.
                  wa_final-rdc_poitext = ga_lines-tdline. "PO Item text
                ENDLOOP.
              ENDIF.
              CLEAR: lv_poit, lv_po_item.
              REFRESH: gt_lines[].
            ENDIF.
* Read RDC PO
            READ TABLE it_rdc_ekko INTO wa_rdc_ekko WITH KEY ebeln = wa_rdc_vbfa_v-vbeln
                                                             BINARY SEARCH.
          ENDIF.
* Read RDC So business data
          READ TABLE it_rdc_vbkd INTO wa_rdc_vbkd WITH KEY vbeln = wa_rdc_vbak-vbeln
                                                           posnr = wa_rdc_vbap-posnr
                                                           BINARY SEARCH.
          IF sy-subrc = 0.
            wa_final-rdc_sdabw   = wa_rdc_vbkd-sdabw.   "RDC SO Special processing indicator
            wa_final-rdc_bstkd_e = wa_rdc_vbkd-bstkd_e. "RDC Ship-to PO
          ENDIF.
* Read the lastest delv date from the schedule lines
* Refresh temporary data
          REFRESH: it_rdc_vbep1[].
          CLEAR: it_rdc_vbep1.
* Move VBEP data into an temp internal table
          MOVE it_rdc_vbep[] TO it_rdc_vbep1[].
* Sort table in descending order to get the latest record
          SORT: it_rdc_vbep1 BY vbeln posnr etenr DESCENDING.
* Delete duplicate records to get unique record
          DELETE ADJACENT DUPLICATES FROM it_rdc_vbep1[] COMPARING vbeln posnr.

          READ TABLE it_rdc_vbep1 INTO wa_rdc_vbep1 WITH KEY vbeln = wa_rdc_vbak-vbeln
                                                            posnr = wa_rdc_vbap-posnr
                                                            BINARY SEARCH.
          IF sy-subrc = 0.
            wa_final-rdc_edatu = wa_rdc_vbep1-edatu. "RDC Schedule line date
          ENDIF.
* Read RDC SO Ship-to partner data
          READ TABLE it_rdc_vbpa INTO wa_rdc_vbpa WITH KEY vbeln = wa_rdc_vbak-vbeln
                                                           parvw = lc_we
                                                           BINARY SEARCH.
          IF sy-subrc = 0.
* Read RDC SO Ship-to address data
            READ TABLE it_rdc_adrc INTO wa_rdc_adrc WITH KEY addrnumber = wa_rdc_vbpa-adrnr
                                                             BINARY SEARCH.
            IF sy-subrc = 0.
              wa_final-rdc_name1  = wa_rdc_adrc-name1.  "Ship-to Name1
              wa_final-rdc_name2  = wa_rdc_adrc-name2.  "Ship-to Name2
              wa_final-rdc_street = wa_rdc_adrc-street. "Street
              wa_final-rdc_city1  = wa_rdc_adrc-city1.  "City
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
* Append final data
      APPEND wa_final TO it_final.
    ENDIF.
* Clear all workareas
    CLEAR: wa_cc_vbak, wa_cc_vbap,  wa_cc_vbfa_j, wa_cc_vbfa_v,wa_cc_vbfa_new,
           wa_vkgrp, wa_cc_vbkd, wa_ccrdc_vbak, wa_rdc_vbak, wa_rdc_vbap,
           wa_rdc_marc, wa_rdc_vbfa_j,  wa_rdc_vbfa_v, wa_rdc_likp,
           wa_rdc_lips, wa_rdc_vbuk, lv_kwmeng, wa_rdc_vbrk, wa_rdc_ekko,
           wa_rdc_vbkd, wa_rdc_vbep1, wa_rdc_vbpa, wa_rdc_adrc, wa_final,wa_cc_vbfa_mnew, wa_rdc_vbfa_new.

  ENDLOOP.

* Clear all workareas
  CLEAR: wa_cc_vbak, wa_cc_vbap, wa_cc_vbfa_j, wa_cc_vbfa_v,wa_cc_vbfa_new,
         wa_vkgrp, wa_cc_vbkd, wa_ccrdc_vbak, wa_rdc_vbak, wa_rdc_vbap,
         wa_rdc_marc, wa_rdc_vbfa_j,  wa_rdc_vbfa_v, wa_rdc_likp,
         wa_rdc_lips, wa_rdc_vbuk, lv_kwmeng,  wa_rdc_vbrk, wa_rdc_ekko,
         wa_rdc_vbkd, wa_rdc_vbep1, wa_rdc_vbpa, wa_rdc_adrc, wa_final,wa_cc_vbfa_mnew, wa_rdc_vbfa_new.

* Get all the CC and RDC sales orders which don't have deliveries,invoice,PO's
  SORT : it_cc_vbap BY vbeln ASCENDING.

  LOOP AT it_cc_vbak INTO wa_cc_vbak.
* Read sales orders from final table
    READ TABLE it_final INTO wa_final WITH KEY cc_vbeln = wa_cc_vbak-vbeln.

    IF sy-subrc <> 0.
* Read CC item data
      READ TABLE it_cc_vbap INTO wa_cc_vbap WITH KEY vbeln = wa_cc_vbak-vbeln.

      IF sy-subrc = 0.
        wa_final-cc_vbeln = wa_cc_vbak-vbeln. "CC Sales Document
        wa_final-cc_posnr = wa_cc_vbap-posnr. "CC Sales Document Item
        wa_final-cc_pstyv = wa_cc_vbap-pstyv. "CC Sales Document Item Category
        wa_final-cc_werks = wa_cc_vbap-werks. "CC Sales Document Item Plant
* Read CC sales grp name
        READ TABLE it_vkgrp INTO wa_vkgrp WITH KEY vkgrp = wa_cc_vbak-vkgrp.

        IF sy-subrc = 0.
          wa_final-cc_bezei = wa_vkgrp-bezei. "CC Sales grp name
        ENDIF.
      ENDIF.
      APPEND wa_final TO it_final.
      CLEAR: wa_final, wa_cc_vbak, wa_vkgrp, wa_cc_vbap.
    ENDIF.
  ENDLOOP.

* Refresh all internal tables
  REFRESH: it_cc_vbak, it_cc_vbap, it_vkgrp, it_cc_vbfa_j, it_cc_vbfa_v, it_cc_vbkd,
           it_rdc_vbak, it_rdc_vbap,  it_rdc_vbfa_j, it_rdc_vbfa_m, it_cc_vbfa_new,
           it_rdc_vbrk, it_rdc_vbfa_v, it_rdc_ekko, it_rdc_vbkd, it_rdc_vbep, it_rdc_vbfa_new,
           it_rdc_vbep1, it_rdc_vbuk, it_rdc_likp, it_rdc_lips, it_rdc_vbpa, it_cc_vbfa_mnew,
           it_rdc_adrc, it_ccrdc_vbak, it_rdc_mard, it_rdc_marc, it_cc_vbfa_v.
* Removing Non relevent data for RDC SO as given in input.
      if so_rdcor[] IS NOT INITIAL. "MOD-002
        loop at it_final into wa_final.
           if wa_final-rdc_vbeln in so_rdcor.
            ELSE.
            DELETE it_final INDEX sy-tabix.
            endif.
            clear wa_final.
        ENDLOOP.
      endif.
*Begin of insertion MOD-003
            loop at it_final into wa_final.
            if ( wa_final-cc_vbeln is INITIAL ) and  ( wa_final-cc_posnr is INITIAL )
              and ( wa_final-rdc_kwmeng is INITIAL ) .
              delete it_final index sy-tabix.
              endif.
              CLEAR :wa_final.
             ENDLOOP.
*End of insertion MOD-003

ENDFORM.                    " PROCESS_DATA
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM display_data .
  DATA: gr_table     TYPE REF TO cl_salv_table,
        gr_functions TYPE REF TO cl_salv_functions,
        gr_display   TYPE REF TO cl_salv_display_settings,
        gr_columns   TYPE REF TO cl_salv_columns_table,
        gr_column    TYPE REF TO cl_salv_column_table.

  DATA: lc_msg TYPE REF TO cx_salv_msg,
        lv_string TYPE string.

* Generate GR_TABLE
  TRY.
      cl_salv_table=>factory(
         IMPORTING
           r_salv_table = gr_table
         CHANGING
           t_table = it_final ).
    CATCH cx_salv_msg INTO lc_msg.
      lv_string = lc_msg->get_text( ).
      MESSAGE lv_string TYPE 'I'.
      CLEAR: lc_msg, lv_string.
  ENDTRY.

  IF gr_table IS INITIAL.
    MESSAGE e000(yse_sales_log) WITH text-002.
  ENDIF.
* Add all functions
  TRY.
      gr_functions = gr_table->get_functions( ).
      gr_functions->set_all( abap_true ).
    CATCH cx_salv_msg INTO lc_msg.
      lv_string = lc_msg->get_text( ).
      MESSAGE lv_string TYPE 'I'.
      CLEAR: lc_msg, lv_string.
  ENDTRY.

* Stripped version layout
  TRY.
      gr_display = gr_table->get_display_settings( ).
      gr_display->set_striped_pattern( cl_salv_display_settings=>true ).
    CATCH cx_salv_msg INTO lc_msg.
      lv_string = lc_msg->get_text( ).
      MESSAGE lv_string TYPE 'I'.
      CLEAR: lc_msg, lv_string.
  ENDTRY.

* Fill header descriptions for all the fields
  TRY.
      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'CC_VBELN' ).
      gr_column->set_long_text(  text-t01 ).
      gr_column->set_medium_text( text-t02 ).
      gr_column->set_short_text( text-t03 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'CC_POSNR' ).
      gr_column->set_long_text( text-t04 ).
      gr_column->set_medium_text( text-t05 ).
      gr_column->set_short_text( text-t06 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'CC_PSTYV' ).
      gr_column->set_long_text( text-s21 ).
      gr_column->set_medium_text( text-s22 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'CC_WERKS' ).
      gr_column->set_long_text( text-s24 ).
      gr_column->set_medium_text( text-s25 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'CC_EBELN' ).
      gr_column->set_long_text( text-t07 ).
      gr_column->set_medium_text( text-t08 ).
      gr_column->set_short_text( text-t09 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'CC_BEZEI' ).
      gr_column->set_long_text( text-t10 ).
      gr_column->set_medium_text( text-t11 ).
      gr_column->set_short_text( text-t12 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'CC_VBELN_O' ).
      gr_column->set_long_text( text-t13 ).
      gr_column->set_medium_text( text-t14 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'CC_VBELN_M' ).
      gr_column->set_long_text( text-t16 ).
      gr_column->set_medium_text( text-t17 ).
      gr_column->set_short_text( text-t18 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_VBELN' ).
      gr_column->set_long_text( text-t19 ).
      gr_column->set_medium_text( text-t20 ).
      gr_column->set_short_text( text-t21 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_POSNR' ).
      gr_column->set_long_text( text-t22 ).
      gr_column->set_medium_text( text-t23 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_MATNR' ).
      gr_column->set_long_text( text-t25 ).
      gr_column->set_medium_text( text-t26 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_ARKTX' ).
      gr_column->set_long_text( text-t28 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_KWMENG' ).
      gr_column->set_long_text( text-t31 ).
      gr_column->set_medium_text( text-t32 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_PSTYV' ).
      gr_column->set_long_text( text-t34 ).
      gr_column->set_medium_text( text-t35 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_AUGRU' ).
      gr_column->set_long_text( text-t37 ).
      gr_column->set_medium_text( text-t38 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_AUDAT' ).
      gr_column->set_long_text( text-t40 ).
      gr_column->set_medium_text( text-t41 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_VBELN_O' ).
      gr_column->set_long_text( text-t43 ).
      gr_column->set_medium_text( text-t44 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_VBELN_M' ).
      gr_column->set_long_text( text-t46 ).
      gr_column->set_medium_text( text-t47 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_LIFSK' ).
      gr_column->set_long_text( text-t49 ).
      gr_column->set_medium_text( text-t50 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_SDABW' ).
      gr_column->set_long_text( text-t52 ).
      gr_column->set_medium_text( text-t53 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_VSBED' ).
      gr_column->set_long_text( text-t55 ).
      gr_column->set_medium_text( text-t56 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_EDATU' ).
      gr_column->set_long_text( text-t58 ).
      gr_column->set_medium_text( text-t59 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_AVAILABLE' ).
      gr_column->set_long_text( text-t61 ).
      gr_column->set_medium_text( text-t62 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_KVGR4' ).
      gr_column->set_long_text( text-t64 ).
      gr_column->set_medium_text( text-t65 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_ABGRU' ).
      gr_column->set_long_text( text-t67 ).
      gr_column->set_medium_text( text-t68 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_ROUTE' ).
      gr_column->set_long_text( text-t70 ).
      gr_column->set_medium_text( text-t71 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_NETWR' ).
      gr_column->set_long_text( text-t73 ).
      gr_column->set_medium_text( text-t74 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_WAERK' ).
      gr_column->set_long_text( text-t76 ).
      gr_column->set_medium_text( text-t77 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_DISMM' ).
      gr_column->set_long_text( text-t79 ).
      gr_column->set_medium_text( text-t80 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_EBELN' ).
      gr_column->set_long_text( text-t82 ).
      gr_column->set_medium_text( text-t83 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_POITEXT' ).
      gr_column->set_long_text( text-t85 ).
      gr_column->set_medium_text( text-t86 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_BSTKD_E' ).
      gr_column->set_long_text( text-t88 ).
      gr_column->set_medium_text( text-t89 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_LFSTA' ).
      gr_column->set_long_text( text-t91 ).
      gr_column->set_medium_text( text-t92 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_GBSTA' ).
      gr_column->set_long_text( text-t94 ).
      gr_column->set_medium_text( text-t95 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_NAME1' ).
      gr_column->set_long_text( text-t97 ).
      gr_column->set_medium_text( text-t98 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_NAME2' ).
      gr_column->set_long_text( text-s01 ).
      gr_column->set_medium_text( text-s02 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_STREET' ).
      gr_column->set_long_text( text-s04 ).
      gr_column->set_medium_text( text-s05 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_CITY1' ).
      gr_column->set_long_text( text-s07 ).
      gr_column->set_medium_text( text-s08 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_WADAT' ).
      gr_column->set_long_text( text-s10 ).
      gr_column->set_medium_text( text-s11 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_LFIMG' ).
      gr_column->set_long_text( text-s13 ).
      gr_column->set_medium_text( text-s14 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_VRKME' ).
      gr_column->set_long_text( text-s16 ).
      gr_column->set_medium_text( text-s17 ).

      gr_columns = gr_table->get_columns( ).
      gr_column ?= gr_columns->get_column( 'RDC_KUNNR' ).
      gr_column->set_long_text( text-s19 ).
      gr_column->set_medium_text( text-s20 ).
    CATCH cx_salv_not_found.
  ENDTRY.

* Display data
  TRY.
      gr_table->display( ).
    CATCH cx_salv_msg INTO lc_msg.
      lv_string = lc_msg->get_text( ).
      MESSAGE lv_string TYPE 'I'.
      CLEAR: lc_msg, lv_string.
  ENDTRY.

ENDFORM.                    " DISPLAY_DATA
