*&---------------------------------------------------------------------*
*&  Include           YSE_VISA_AB_PROC_FORMS                           *
*&---------------------------------------------------------------------*

************************************************************************
* MOD. NO.|  DATE    | NAME     |CORRECTION NUMBER| CHANGE REFERENCE # *
*----------------------------------------------------------------------*
* MOD-001 |26/11/2009|J. Smets  |CD1K951942       | CR0873             *
*         |PO creation out of ASSO for Service Orders                  *
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
* MOD-002 | 07/05/2010 | Geert Rutten    |CR 1358       | CD1K956554   *
* Extension of table YSE_PO_PLDELTIME                                  *
*----------------------------------------------------------------------*
* MOD-003 | 12/03/2012 | Johnny Wu       |CR 2464       | CD1K970703   *
* Adapt to the 4th business Area CR                                    *
*----------------------------------------------------------------------*
* MOD-004 | 17/05/2012 | Johnny Wu       |CR 2537      | CD1K971822    *
* Special handling for CN02                                            *
************************************************************************

*&---------------------------------------------------------------------*
*&      Form  FILL_RANGES
*&---------------------------------------------------------------------*
form fill_ranges .

  gr_matkl_01_03-sign   = 'I'.
  gr_matkl_01_03-option = 'EQ'.
  gr_matkl_01_03-low    = '01'.
  append gr_matkl_01_03.
  gr_matkl_01_03-low    = '03'.
  append gr_matkl_01_03.

  gr_matkl_02_05-sign   = 'I'.
  gr_matkl_02_05-option = 'EQ'.
  gr_matkl_02_05-low    = '02'.
  append gr_matkl_02_05.
  gr_matkl_02_05-low    = '05'.
  append gr_matkl_02_05.

  gr_area_it_cmt-sign   = 'I'.
  gr_area_it_cmt-option = 'EQ'.
  gr_area_it_cmt-low    = 'IT'.
  append gr_area_it_cmt.
  gr_area_it_cmt-low    = 'CMT'.
  append gr_area_it_cmt.

  "MOD-003 begin
  gr_area_it_cmt-low    = 'CR'.
  append gr_area_it_cmt.
  "MOD-003 end
endform.                    " FILL_RANGES

*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
form get_data .

  refresh : it_ab_conf, it_ab_hist,it_ab_hist_po, it_ekpo,it_ekko, it_ekko_new,it_yse_po_sorg_porg, it_ekpo_new, it_yse_em_plant,
            it_eket,it_mara,it_vbap,it_ekkn,it_yse_po_pldeltime,it_eine,it_yse_po_confirm,it_rsdbs, it_vbap_new, it_resb, it_vbap_new1, it_marc,
            it_tvro, it_vbfa, it_ab_conf1, it_t001w, it_eban, it_yrd_cc_link_rdc, it_aufk .


* Get the AB Hist lines which are candidate to be processed based on their own status
  select * from yse_visa_ab_hist
           into table it_ab_conf
** Begin of MOD-006 MOD*********************
*           WHERE status EQ '00'
*              OR status EQ '10'.                        "#EC CI_NOFIELD
           where  docnum in s_docnum
              and ebeln  in s_ebeln
              and ebelp  in s_ebelp
              and bukrs  in s_bukrs
              and ekorg  in s_ekorg
              and ( status eq '00'
              or    status eq '10' ).                   "#EC CI_NOFIELD
** Begin of MOD-006 MOD*********************
  "For the performance improvement
  perform pre_processing.

* Begin of Insertion MOD-005
  if it_ab_conf[] is not initial.
* All sequential updates for a single PO item, should have increasing IDOC numbers
    sort it_ab_conf by ebeln ebelp docnum.
    it_ab_hist[] = it_ab_conf[].
    sort it_ab_hist by docnum descending ebeln ebelp ascending .

    select * from yse_visa_ab_hist
             into table it_ab_hist_po
             for all entries in it_ab_conf
             where ebeln = it_ab_conf-ebeln
             and status eq constant_20.

    sort it_ab_hist_po by ebeln ebelp.
* CHECK RDC.
    select vbeln                                        "#EC CI_NOFIRST
           posnr
           ebeln
           ebelp
           bsark
           vkorg
           pstyv
             from yrd_cc_link_rdc
             into table it_yrd_cc_link_rdc
            for all entries in it_ab_conf
            where ebeln = it_ab_conf-ebeln
              and ebelp = it_ab_conf-ebelp.

    sort it_yrd_cc_link_rdc by ebeln ebelp.
*  update sales data.
    select
      rsnum
      rspos
      rsart
      rsinz
      ebeln
      ebelp
    from rsdbs
    into table it_rsdbs
    for all entries in it_ab_conf
    where ebeln = it_ab_conf-ebeln
    and   ebelp = it_ab_conf-ebelp.

    sort it_rsdbs by ebeln ebelp.
    select
      banfn
      bnfpo
      webaz
      ebeln
      ebelp
      from eban
      into table it_eban
      for all entries in it_ab_conf
        where ebeln = it_ab_conf-ebeln
          and ebelp = it_ab_conf-ebelp.

    sort it_eban by ebeln ebelp.
    loop at it_ab_conf into wa_ab_conf.
      wa_ab_conf1-vbeln	  = wa_ab_conf-ebeln.  " Sales Document
      wa_ab_conf1-posnn	  = wa_ab_conf-ebelp.  " Sales Document Item
      append wa_ab_conf1 to it_ab_conf1.
      clear wa_ab_conf1.
    endloop.
    sort it_ab_conf1 by vbeln posnn.
    delete adjacent duplicates from it_ab_conf1 comparing vbeln posnn.
    clear wa_ab_conf.
    select
        vbelv
        posnv
        vbeln
        posnn
        vbtyp_n
        from vbfa
        into table it_vbfa
        for all entries in it_ab_conf1
               where vbeln = it_ab_conf1-vbeln
               and posnn = it_ab_conf1-posnn
               and vbtyp_v = constant_c.

    if it_vbfa[] is not initial.
      sort it_vbfa by vbeln posnn.
      select
          vbeln
          posnr
          zz_aso_rsnum
          zz_aso_rspos
          from vbap
          into table it_vbap_new
          for all entries in it_vbfa
          where vbeln = it_vbfa-vbelv
          and posnr = it_vbfa-posnv.

      if it_vbap_new[] is not initial.
        sort it_vbap_new by vbeln posnr.
        select
         rsnum
         rspos
         rsart
         matnr
         werks
         aufnr
         kdauf
         kdpos
         from resb
         into table it_resb
         for all entries in it_vbap_new
         where rsnum eq it_vbap_new-zz_aso_rsnum
          and rspos eq it_vbap_new-zz_aso_rspos.
        if it_resb[] is not initial.
          sort it_resb by rsnum rspos.
          select *
            from aufk
            into table it_aufk
            for all entries in it_resb
            where aufnr = it_resb-aufnr.
          sort it_aufk by aufnr.
          select
             vbeln
             posnr
             route
            from vbap
            into table it_vbap_new1
            for all entries in it_resb
            where vbeln eq it_resb-kdauf.

          sort it_vbap_new1 by vbeln.

          select
                 werks
                 fabkl
                 into table it_t001w
                 from t001w
                 for all entries in it_resb
                 where werks = it_resb-werks.
          sort it_t001w by werks.
          if it_vbap_new1[] is not initial.
            select
              route
              traztd
              from tvro
              into table it_tvro
              for all entries in it_vbap_new1
              where route = it_vbap_new1-route.
            sort it_tvro by route.
          endif.
          select
            matnr
            werks
            webaz
            from marc
            into table it_marc
            for all entries in it_resb
            where matnr = it_resb-matnr
              and werks = it_resb-werks.
          sort it_marc by matnr werks.
        endif.
      endif.
    endif.
*  Get ekko data.
    select
        ebeln bsart ekorg lifnr
           into table it_ekko_new
           from ekko
            for all entries in it_ab_conf
           where ebeln = it_ab_conf-ebeln.

    sort it_ekko_new by bsart ekorg lifnr.

    if it_ekko_new[] is not initial.
      select vkorg ekorg area                           "#EC CI_NOFIRST
             into table it_yse_po_sorg_porg
             from yse_po_sorg_porg
             for all entries in it_ekko_new
             where ekorg = it_ekko_new-ekorg.
      sort it_yse_po_sorg_porg by ekorg.

      loop at it_ekko_new into wa_ekko_new.
        wa_ekko-ebeln  = wa_ekko_new-ebeln.
        wa_ekko-bsart  = wa_ekko_new-bsart.
        wa_ekko-ekorg  = wa_ekko_new-ekorg.
        wa_ekko-lifnr  = wa_ekko_new-lifnr.

        clear wa_yse_po_sorg_porg .
        read table it_yse_po_sorg_porg into wa_yse_po_sorg_porg
                                      with key ekorg = wa_ekko_new-ekorg
                                      binary search.
        wa_ekko-area = wa_yse_po_sorg_porg-area.

        append wa_ekko to it_ekko.
      endloop.
      sort it_ekko by ebeln.
    endif.
* Get material group from MARA
    select matnr matkl into table it_mara
           from mara
           for all entries in it_ab_conf
           where matnr = it_ab_conf-matnr.
    if sy-subrc = 0.
      sort it_mara by matnr.
    endif.
    select
      mandt
      ebeln
      ebelp
      menge
      zzeindt
      xblnr
      from yse_po_confirm
      into table it_yse_po_confirm
      for all entries in it_ab_conf
       where ebeln = it_ab_conf-ebeln
       and   ebelp = it_ab_conf-ebelp.

    sort it_yse_po_confirm by ebeln ebelp.

    select
      ebeln
      ebelp
      zekkn
      vbeln
      vbelp
      from ekkn
      into table it_ekkn
      for all entries in it_ab_conf
      where ebeln eq it_ab_conf-ebeln
        and ebelp eq it_ab_conf-ebelp.

    sort it_ekkn by ebeln ebelp.
    if it_ekkn[] is not initial.
      select
          vbeln
          posnr
          matnr
          vstel
          werks
          from vbap
          into table it_vbap
          for all entries in it_ekkn
          where vbeln = it_ekkn-vbeln
          and   posnr = it_ekkn-vbelp.

      sort it_vbap by vbeln posnr.
    endif.

* If not found, that's OK
*
** Get the ordered quantity and req delivery date of first schedule line
*
    select ebeln ebelp menge meins werks banfn bnfpo
            bednr
            zztranspmode
            infnr
            afnam
            zzurgcode
            zzvtweg
           from ekpo
           into table it_ekpo_new
           for all entries in it_ab_conf
           where ebeln eq it_ab_conf-ebeln
           and   ebelp eq it_ab_conf-ebelp.

    if it_ekpo_new[] is not initial.
      sort it_ekpo_new by ebeln ebelp.
      select ebeln ebelp etenr eindt
             from eket
             into table it_eket
             for all entries in it_ekpo_new
             where ebeln eq it_ekpo_new-ebeln
                and ebelp eq it_ekpo_new-ebelp.
      sort it_eket by ebeln ebelp ascending.
      select  werks
              whtype
              whstdes
            from yse_em_plant
            into table it_yse_em_plant
            for all entries in it_ekpo_new
            where werks = it_ekpo_new-werks.
      sort it_yse_em_plant by werks.
    endif.
    sort it_yse_em_plant by werks.
    loop at it_ekpo_new into wa_ekpo_new.
      wa_ekpo-ebeln         = wa_ekpo_new-ebeln.
      wa_ekpo-ebelp         = wa_ekpo_new-ebelp.
      wa_ekpo-menge         = wa_ekpo_new-menge.
      wa_ekpo-meins         = wa_ekpo_new-meins.
      wa_ekpo-werks         = wa_ekpo_new-werks.
      wa_ekpo-banfn         = wa_ekpo_new-banfn.
      wa_ekpo-bnfpo         = wa_ekpo_new-bnfpo.
      wa_ekpo-bednr         = wa_ekpo_new-bednr.
      wa_ekpo-zztranspmode  = wa_ekpo_new-zztranspmode.
      wa_ekpo-infnr         = wa_ekpo_new-infnr.
      wa_ekpo-afnam         = wa_ekpo_new-afnam.
      wa_ekpo-zzurgcode     = wa_ekpo_new-zzurgcode.
      wa_ekpo-zzvtweg       = wa_ekpo_new-zzvtweg.

      clear wa_eket.
      read table it_eket into wa_eket
                         with key ebeln = wa_ekpo_new-ebeln ebelp = wa_ekpo_new-ebelp
                         binary search.
      if sy-subrc = 0.
        wa_ekpo-etenr = wa_eket-etenr.
        wa_ekpo-eindt = wa_eket-eindt.
      endif.

      clear wa_yse_em_plant.
      read table it_yse_em_plant into wa_yse_em_plant
                                 with key werks = wa_ekpo_new-werks
                                 binary search.
      if sy-subrc = 0.
        wa_ekpo-whtype = wa_yse_em_plant-whtype.
      endif.

      append wa_ekpo to it_ekpo.
    endloop.
    sort it_ekpo by ebeln ebelp.
    if it_ekko[] is not initial.
      select
          ekorg
          lifnr
          werks
          zztranspmode
          vtweg
          vstel
          plifz
        from yse_po_pldeltime
        into table it_yse_po_pldeltime
        for all entries in it_ekko
        where ekorg = it_ekko-ekorg
        and lifnr = it_ekko-lifnr.
    endif.
    sort it_yse_po_pldeltime by ekorg lifnr werks zztranspmode vtweg vstel.
    if it_ekpo[] is not initial.
      select
          infnr
          ekorg
          esokz
          werks
          aplfz
         from eine
         into table it_eine
         for all entries in it_ekpo
         where infnr = it_ekpo-infnr
         and werks = it_ekpo-werks
         and esokz = '0'.
      sort it_eine by infnr ekorg esokz aplfz.
    endif.
  endif.

* End of Insertion MOD-005.
endform.                    " GET_DATA

*&---------------------------------------------------------------------*
*&      Form  PROCESS_DATA
*&---------------------------------------------------------------------*
form process_data .

  data:
    lv_rcnt like sy-tabix.
* Begin of insertion by MOD-005
*  DATA: lc_yse_visa_ab_hist TYPE rstable-tabname VALUE 'YSE_VISA_AB_HIST',
*        lc_e                TYPE dd26e-enqmode   VALUE 'E'.
*
*  CALL FUNCTION 'ENQUEUE_E_TABLE'
*    EXPORTING
*      mode_rstable = lc_e
*      tabname      = lc_yse_visa_ab_hist.
*  IF sy-subrc <> 0.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF.
* End of Insertion by MOD-005
* Process the lines with status corresponding to "ready to be processed"
*  LOOP AT it_ab_conf.                                                        " -MOD-005
  loop at it_ab_conf into wa_ab_conf.                                         " +MOD-005
*   Start to Process IDOC: &
    message s026(yse_general) with wa_ab_conf-docnum.
*   Clear log handle
    clear gv_log_handle.
*   Clear message
*    it_ab_conf-text = space.                                                 " -MOD-005
    wa_ab_conf-text = space.                                                  " +MOD-005
*   Get full history for single PO item
    perform get_ab_hist.
*   Check if preceding Idocs' stati allow this item to be processed
    perform check_ab_hist_status.
*   If processing not allowed, go to next record
*    CHECK it_ab_conf-status EQ '20'.                                        " -MOD-005
    check wa_ab_conf-status eq '20'.                                         " +MOD-005
*   Update the records' status in the database table
    perform modify_line.
*   Get additional data
    perform get_add_data.
*   If additional data retrieval caused issues, go to next record
*    IF it_ab_conf-status NE '20'.                                           " -MOD-005
    if wa_ab_conf-status ne '20'.                                           " +MOD-005
      perform modify_line.
      continue.
    endif.
*   Check if confirmation should be ignored based on existing confirmation
    perform check_ignore.
*   If ignore code set, update the records' status in DB table and go to next record
*    IF it_ab_conf-status NE '20'.                                           " -MOD-005
    if wa_ab_conf-status ne '20'.                                           " +MOD-005
      perform modify_line.
      continue.
    endif.
*   Calculate date and quantity to be fed to PO and SO
    perform calc_datum_menge.
* begin of insert air21099 28/01/09
*   Set first confirmation date
    perform set_1st_conf_date.
* end of insert air21099 28/01/09
*   Have updates done in PO and SO
    perform update_po_so.
*   If error occured, update the records' status in DB table and go to next record
*    IF it_ab_conf-status NE '20'.                                           " -MOD-005
    if wa_ab_conf-status ne '20'.                                           " +MOD-005
      perform modify_line.
      continue.
    endif.
* begin of delete air21099 28/10/09
*   Set first confirmation date
*   PERFORM set_1st_conf_date.
* end of delete air21099 28/10/09
*   Update field Sortf table Resb
    if gv_acknl ne 'X'.
      perform update_sortf.
    endif.
*   Set Processed status
    perform set_processed_status.
*   Update the records' status in DB table
    perform modify_line.
    commit work and wait.
    perform wait_transaction.
  endloop.
* Begin of Insertion by MOD-005
*  CALL FUNCTION 'DEQUEUE_E_TABLE'
*    EXPORTING
*      mode_rstable = lc_e
*      tabname      = lc_yse_visa_ab_hist.
* End of insertion by MOD-005.
* End of processing
  describe table it_ab_conf lines lv_rcnt.
  write: 'End of processing:'(t06),
         lv_rcnt,
         'rows from YSE_VISA_AB_HIST considered/updated'(t07).

endform.                    " PROCESS_DATA

*&---------------------------------------------------------------------*
*&      Form  GET_AB_HIST
*&---------------------------------------------------------------------*
form get_ab_hist .

* Begin of Insertion MOD-005.
  clear: wa_ab_hist, wa_ab_hist_po.
  read table it_ab_hist into wa_ab_hist
                        with key ebeln  = wa_ab_conf-ebeln
                                 ebelp   = wa_ab_conf-ebelp.

* Get lines which are in process for this PO
  read table it_ab_hist_po into wa_ab_hist_po
                           with key ebeln  = wa_ab_conf-ebeln
                           binary search.
* End of Insertion MOD-005.
* Begin of Deletion MOD-005
** Get history for single PO item
*  CLEAR:
*    it_ab_hist[],
*    it_ab_hist,
*    it_ab_hist_po[],
*    it_ab_hist_po.
*  SELECT *
*         INTO TABLE it_ab_hist
*         FROM yse_visa_ab_hist
*        WHERE ebeln   = it_ab_conf-ebeln
*          AND ebelp   = it_ab_conf-ebelp
*          AND docnum LT it_ab_conf-docnum.
*          AND STATUS NE '00'
*          AND STATUS NE '10'.
*  SORT it_ab_hist BY docnum DESCENDING.
*
** Get lines which are in process for this PO
*  SELECT * FROM yse_visa_ab_hist
*           INTO TABLE it_ab_hist_po
*           WHERE ebeln  = it_ab_conf-ebeln
*             AND status = '20'.
* End of Deletion MOD-005.
endform.                    " GET_AB_HIST

*&---------------------------------------------------------------------*
*&      Form  GET_ADD_DATA
*&---------------------------------------------------------------------*
form get_add_data .

* Get additional data for current IT_AB_CONF line

* Get order header detail
  perform get_ekko.
* Get ordered quantity and already confirmed quantity
  perform get_ekpo_ekes_ab.
* Get material group
  perform get_matkl.
* begin of Workflow130 CR3022
* Check CC PO have RDC SO
  perform check_rdc_so.
* end of Workflow130 CR3022

endform.                    " GET_ADD_DATA

*&---------------------------------------------------------------------*
*&      Form  GET_EKPO_EKES_AB
*&---------------------------------------------------------------------*
form get_ekpo_ekes_ab .

* If an error already occured during 'GET_ADD_DATA', exit
*  CHECK it_ab_conf-status EQ '20'.                              " -MOD-005
  check wa_ab_conf-status eq '20'.                              " +MOD-005
* Get existing AB confirmation from EKES (it's assumed there is only 1)
  clear wa_ekes.
* Begin of Insertion MOD-005.
  select single ebeln ebelp etens ebtyp xblnr menge
           into wa_ekes from ekes
          where ebeln eq wa_ab_conf-ebeln
            and ebelp eq wa_ab_conf-ebelp
            and ebtyp eq constant_ab.

** Get the ordered quantity and req delivery date of first schedule line
  clear wa_ekpo.
  read table it_ekpo into wa_ekpo
                     with key ebeln = wa_ab_conf-ebeln
                              ebelp = wa_ab_conf-ebelp
                     binary search.
* If not found
  if wa_ekpo is initial.
    wa_ab_conf-status = '10'.
    wa_ab_conf-text   = 'Failed to find ordered quantity for the PO item'(t01).
  endif.
* End of Insertion MOD-005.
* Begin of Deletion MOD-005.
*  SELECT SINGLE ebeln ebelp etens ebtyp xblnr menge
*           INTO wa_ekes
*           FROM ekes
*          WHERE ebeln EQ it_ab_conf-ebeln
*            AND ebelp EQ it_ab_conf-ebelp
*            AND ebtyp EQ 'AB'.
** If not found, that's OK
*
** Get the ordered quantity and req delivery date of first schedule line
*
*  CLEAR wa_ekpo.
*  SELECT SINGLE ekpo~ebeln ekpo~ebelp etenr ekpo~menge meins
*                eindt ekpo~werks whtype bednr ekpo~banfn
*                ekpo~bnfpo zztranspmode infnr afnam zzurgcode
** Begin of insert MOD-002
*                zzvtweg
** End of insert MOD-002
*           INTO wa_ekpo
*           FROM ekpo
*           JOIN eket
*             ON ekpo~ebeln EQ eket~ebeln
*            AND ekpo~ebelp EQ eket~ebelp
*           JOIN yse_em_plant
*             ON ekpo~werks EQ yse_em_plant~werks
*          WHERE ekpo~ebeln EQ it_ab_conf-ebeln
*            AND ekpo~ebelp EQ it_ab_conf-ebelp
*            AND etenr EQ
*                ( SELECT MIN( etenr )
*                        FROM eket
*                       WHERE ebeln EQ it_ab_conf-ebeln
*                         AND ebelp EQ it_ab_conf-ebelp ).
** If not found
*  IF sy-subrc NE 0.
*    it_ab_conf-status = '10'.
*    it_ab_conf-text   = 'Failed to find ordered quantity for the PO item'(t01).
*  ENDIF.
*  End of Deletion MOD-005


endform.                    " GET_EKPO_EKES_AB

*&---------------------------------------------------------------------*
*&      Form  GET_MATKL
*&---------------------------------------------------------------------*
form get_matkl .
* Begin of Deletion MOD-005
** If an error already occured during 'GET_ADD_DATA', exit
*  CHECK it_ab_conf-status EQ '20'.
*
** Get material group from MARA
*  CLEAR gv_matkl.
*  SELECT SINGLE matkl INTO gv_matkl
*         FROM mara
*         WHERE matnr = it_ab_conf-matnr.
*
*  IF sy-subrc NE 0.
*    it_ab_conf-status = '10'.
*    it_ab_conf-text   = 'Failed to find material group'(t09).
*  ENDIF.
* End of Deletion MOD-005
* Begin of Insertion Mod-005
* If an error already occured during 'GET_ADD_DATA', exit
  check wa_ab_conf-status eq '20'.

* Get material group from MARA
  clear: gv_matkl, wa_mara.
  read table it_mara into wa_mara
                      with key matnr = wa_ab_conf-matnr
                      binary search.
  if sy-subrc ne 0.
    wa_ab_conf-status = '10'.
    wa_ab_conf-text   = 'Failed to find material group'(t09).
  endif.
  gv_matkl = wa_mara-matkl.
* End of Insertion MOD-005
endform.                    " GET_MATKL

*&---------------------------------------------------------------------*
*&      Form  GET_PLIFZ
*&---------------------------------------------------------------------*
form get_plifz .

  data:
    lv_vstel    type vstel,
*    lv_shipto   TYPE kunnr,                          " -mod-005
*    lv_tragr    TYPE tragr,                          " -mod-005
*    lv_route    TYPE route_vl,                       " -mod-005
*    lv_objnr    LIKE ihpa-objnr,                     " -mod-005
*    lv_dur      TYPE traztd,                         " -mod-005
*    lv_dur_days TYPE traztd,                         " -mod-005
* Begin of insert MOd-002
    lv_found    type c.
* End of insert MOd-002
* Begin of Deletion MOD-005
*    BEGIN OF wa_tvst,
*      vstel LIKE tvst-vstel,
*      aland LIKE tvst-aland,
*      azone LIKE tvst-azone,
*    END OF wa_tvst,
*    BEGIN OF wa_kna1,
*      kunnr LIKE kna1-kunnr,
**{   REPLACE        CD2K940613                                        1
**\      land1 LIKE kna1-land1,
**\      lzone LIKE kna1-lzone,
*      lzone LIKE kna1-lzone,
*      land1 LIKE kna1-land1,
**}   REPLACE
*    END OF wa_kna1.
* End of Deletion MOD-005

* Reset PLIFZ
  clear gv_plifz.

* Get shipping point depending on Purch DocType
  case wa_ekko-bsart.
*   For "PO DTC & Semi-DTC"
    when 'ZNB2'.
*     If warehouse type is DTC
      if wa_ekpo-whtype = 'D'.
*       Get shipping point from Sales Order
*    Begin of Insertion MOD-003\
        clear wa_vbap.
        read table it_vbap into wa_vbap
                            with key vbeln = wa_ab_conf-ebeln
                                     posnr = wa_ab_conf-ebelp
                            binary search.
        if sy-subrc = 0.
          lv_vstel = wa_vbap-vstel.
        endif.
*    End of Insertion MOD-003
*    Begin of Deletion MOD-003
*        SELECT SINGLE vbap~vstel
*                 INTO lv_vstel
*                 FROM ekkn
*                 JOIN vbap
*                   ON ekkn~vbeln EQ vbap~vbeln
*                  AND ekkn~vbelp EQ vbap~posnr
*                WHERE ekkn~ebeln EQ it_ab_conf-ebeln
*                  AND ekkn~ebelp EQ it_ab_conf-ebelp.
*    End of Deletion MOD-003
      endif.
*   For "PO AM DTC"
    when 'ZNB3'.
*     If warehouse type is DTC
      if wa_ekpo-whtype = 'D'.
*       If "Requirement tracking number" is filled in, use it as shipping point
        if not wa_ekpo-bednr is initial.
          lv_vstel = wa_ekpo-bednr.
*       Otherwise, default to 1000
        else.
* begin of change air21099 20090515
*         lv_vstel = '1000'.
          lv_vstel = '9999'.
* end of change air21099 20090515
        endif.
      endif.
  endcase.
* Begin of change MOD-002
* Get delivery leadtime
*  SELECT SINGLE plifz
*           INTO gv_plifz
*           FROM yse_po_pldeltime
*          WHERE ekorg         EQ wa_ekko-ekorg
*            AND lifnr         EQ wa_ekko-lifnr
*            AND werks         EQ wa_ekpo-werks
*            AND zztranspmode  EQ wa_ekpo-zztranspmode
*            AND vstel         EQ lv_vstel.

  lv_found = ' '.
* Begin of Insertion MOD-003.
  clear wa_yse_po_pldeltime.
  if not wa_ekpo-zzvtweg is initial.
    read table it_yse_po_pldeltime into wa_yse_po_pldeltime
                                  with key ekorg        = wa_ekko-ekorg
                                           lifnr        = wa_ekko-lifnr
                                           werks        = wa_ekpo-werks
                                           zztranspmode = wa_ekpo-zztranspmode
                                           vtweg        = wa_ekpo-zzvtweg
                                           vstel        = lv_vstel
                                   binary search.

    if sy-subrc = 0.
      lv_found = 'X'.
    else.
      read table it_yse_po_pldeltime into wa_yse_po_pldeltime
                                    with key ekorg        = wa_ekko-ekorg
                                             lifnr        = wa_ekko-lifnr
                                             werks        = wa_ekpo-werks
                                             zztranspmode = wa_ekpo-zztranspmode
                                             vtweg        = '*'
                                             vstel        = lv_vstel
                                     binary search.
      if sy-subrc = 0.
        lv_found = 'X'.
      endif.
    endif.
  else.
    read table it_yse_po_pldeltime into wa_yse_po_pldeltime
                                  with key ekorg        = wa_ekko-ekorg
                                           lifnr        = wa_ekko-lifnr
                                           werks        = wa_ekpo-werks
                                           zztranspmode = wa_ekpo-zztranspmode
                                           vtweg        = '01'
                                           vstel        = lv_vstel
                                   binary search.

    if sy-subrc = 0.
      lv_found = 'X'.
    else.
      read table it_yse_po_pldeltime into wa_yse_po_pldeltime
                                    with key ekorg        = wa_ekko-ekorg
                                             lifnr        = wa_ekko-lifnr
                                             werks        = wa_ekpo-werks
                                             zztranspmode = wa_ekpo-zztranspmode
                                             vtweg        = '*'
                                             vstel        = lv_vstel
                                     binary search.
      if sy-subrc = 0.
        lv_found = 'X'.
      endif.
    endif.
  endif.
  gv_plifz = wa_yse_po_pldeltime-plifz.
* If leadtime not found in YSE table, get it from PIR

  if lv_found is initial.
* End of change MOD-002
    clear wa_eine.
    read table it_eine into wa_eine
                       with key infnr = wa_ekpo-infnr
                                ekorg = wa_ekko-ekorg
                                werks = wa_ekpo-werks
                        binary search.
    if sy-subrc = 0.
      gv_plifz = wa_eine-aplfz.
    endif.
  endif.
* End of Insertion MOD-005
*    Begin of Deletion MOD-005.
*  IF NOT wa_ekpo-zzvtweg IS INITIAL.
*    SELECT SINGLE plifz FROM yse_po_pldeltime
*           INTO gv_plifz
*           WHERE ekorg        = wa_ekko-ekorg
*             AND lifnr        = wa_ekko-lifnr
*             AND werks        = wa_ekpo-werks
*             AND zztranspmode = wa_ekpo-zztranspmode
*             AND vtweg        = wa_ekpo-zzvtweg
*             AND vstel        = lv_vstel.
*    IF sy-subrc = 0.
*      lv_found = 'X'.
*    ELSE.
*      SELECT SINGLE plifz FROM yse_po_pldeltime
*           INTO gv_plifz
*           WHERE ekorg        = wa_ekko-ekorg
*             AND lifnr        = wa_ekko-lifnr
*             AND werks        = wa_ekpo-werks
*             AND zztranspmode = wa_ekpo-zztranspmode
*             AND vtweg        = '*'
*             AND vstel        = lv_vstel.
*      IF sy-subrc = 0.
*        lv_found = 'X'.
*      ENDIF.
*    ENDIF.
*  ELSE.
*    SELECT SINGLE plifz FROM yse_po_pldeltime
*               INTO gv_plifz
*               WHERE ekorg        = wa_ekko-ekorg
*                 AND lifnr        = wa_ekko-lifnr
*                 AND werks        = wa_ekpo-werks
*                 AND zztranspmode = wa_ekpo-zztranspmode
*                 AND vtweg        = '01'
*                 AND vstel        = lv_vstel.
*    IF sy-subrc = 0.
*      lv_found = 'X'.
*    ELSE.
*      SELECT SINGLE plifz FROM yse_po_pldeltime
*INTO gv_plifz
*WHERE ekorg        = wa_ekko-ekorg
*AND lifnr        = wa_ekko-lifnr
*AND werks        = wa_ekpo-werks
*AND zztranspmode = wa_ekpo-zztranspmode
*AND vtweg        = '*'
*AND vstel        = lv_vstel.
*      IF sy-subrc = 0.
*        lv_found = 'X'.
*      ENDIF.
*    ENDIF.
*  ENDIF.
*
*
** If leadtime not found in YSE table, get it from PIR
**  IF sy-subrc NE 0.
*  IF lv_found IS INITIAL.
** End of change MOD-002
*    SELECT SINGLE aplfz
*             INTO gv_plifz
*             FROM eine
*            WHERE infnr EQ wa_ekpo-infnr
*              AND ekorg EQ wa_ekko-ekorg
*              AND esokz EQ '0'
*              AND werks EQ wa_ekpo-werks.
*  ENDIF.
* End of Deletion MOD-005
* begin of delete air21099 20090515
** For ZNB3 PO's (AM DTC) also need to take into account the route from
** the shipping point's transp. zone to the cust's transp. zone
*  IF wa_ekko-bsart = 'ZNB3'.      "AM DTC PO
**   Redetermine shipping point from sales order
*    CLEAR lv_vstel.
*    SELECT SINGLE vbap~vstel
*             INTO lv_vstel
*             FROM ekkn
*             JOIN vbap
*               ON ekkn~vbeln EQ vbap~vbeln
*              AND ekkn~vbelp EQ vbap~posnr
*            WHERE ekkn~ebeln EQ it_ab_conf-ebeln
*              AND ekkn~ebelp EQ it_ab_conf-ebelp.
*
**   Get the shipping point's trans zone
*    SELECT SINGLE vstel aland azone
*             INTO wa_tvst
*             FROM tvst
*            WHERE vstel = lv_vstel.
*
**   Get the shipto partner
*    CONCATENATE 'OR' wa_ekpo-afnam INTO lv_objnr.
*    SELECT SINGLE parnr
*             INTO lv_shipto
*             FROM ihpa
*            WHERE objnr EQ lv_objnr
*              AND parvw = 'WE'.
*
**   If shipto found
*    IF sy-subrc EQ 0.
**     Get transportation zone of the shipto
*      SELECT SINGLE kunnr lzone land1
*               INTO wa_kna1
*               FROM kna1
*              WHERE kunnr = lv_shipto.
**     Shipto's transport zone found
*      IF sy-subrc EQ 0.
**       Get material's transportation group
*        SELECT SINGLE tragr
*                 INTO lv_tragr
*                 FROM mara
*                WHERE matnr = it_ab_conf-matnr.
**       If transp group not found or initial
*        IF sy-subrc NE 0 OR lv_tragr EQ space.
*          lv_tragr = 'Z001'.  " Default and currently only category
*        ENDIF.
*
**       Now get the route
*        SELECT SINGLE route
*                 INTO lv_route
*                 FROM trolz
*                WHERE aland = wa_tvst-aland
*                  AND azone = wa_tvst-azone
*                  AND vsbed = wa_ekpo-zzurgcode
*                  AND tragr = lv_tragr
*                  AND lland = wa_kna1-land1
*                  AND lzone = wa_kna1-lzone.
*
**       If route found
*        IF sy-subrc EQ 0.
**         Get the duration of the route
*          SELECT SINGLE traztd
*                   INTO lv_dur
*                   FROM tvro
*                  WHERE route = lv_route.
*
**         If duration of the route found
*          IF sy-subrc EQ 0.
**           Concert the internal format to days
*            CALL FUNCTION 'YSE_CONVERSION_EXIT_TSTRG_OUT'
*              EXPORTING
*                input  = lv_dur
*              IMPORTING
*                output = lv_dur_days.
*
**           Add the duration of the route to the delivery lead time
*            ADD lv_dur_days TO gv_plifz.
*
*          ENDIF.    " Duration of the route found
*        ENDIF.    " Route found
*      ENDIF.    " Transp zone of the shipto found
*    ENDIF.    " Ship to found
*  ENDIF.    " AM DTC PO
* end of change air21099 20090515

endform.                    " GET_PLIFZ

*&---------------------------------------------------------------------*
*&      Form  CALC_DATUM_MENGE
*&---------------------------------------------------------------------*
form calc_datum_menge .

  data:
    lv_datum like sy-datum.


* ************ *
* Part 1: Date
* ************ *
* Assume it's an actual confirmation (not just order acknowledgment)
  clear gv_acknl.
* Add 999 to required delivery date (into LV_DATUM)
  lv_datum = wa_ekpo-eindt + 999.
* Begin of Deletion MOD-005.
** If new conf date <= calculated date (999)
*  IF it_ab_conf-bbein LE lv_datum.
**   Set confirmation date to IDOC confirmation date + transp lead time
**   Get transportation lead time
*    PERFORM get_plifz.
**   Set calculated date
*    gv_bbein_calc = it_ab_conf-bbein + gv_plifz .
**   Set lead time in confirmation
*    it_ab_conf-plifz = gv_plifz.
** If new conf date > calculated date (999)
*  ELSE.
***   Set confirmation date to calculated date (999)
**    GV_BBEIN_CALC = LV_DATUM.
**   Set confirmation date to date from IDOC
*    gv_bbein_calc = it_ab_conf-bbein.
**   Set the order acknowledgment flag and don't calc qty
*    gv_acknl = 'X'.
*    CHECK 1 EQ 2.
*  ENDIF.
** Part 2: Quantity
** **************** *
** If IDOC conf status is higher than the DB table conf status
*  SET EXTENDED CHECK OFF. " To avoid error on character based comparison in following line
*  IF NOT wa_ekes IS INITIAL AND it_ab_conf-xblnr GT wa_ekes-xblnr.
*    SET EXTENDED CHECK ON.
**   If IDOC conf qty is 0
*    IF it_ab_conf-bbmng EQ 0.
**     Use already confirmed qty
*      gv_bbmng_calc = wa_ekes-menge.
*    ELSE.
**     Use IDOC conf qty
*      gv_bbmng_calc = it_ab_conf-bbmng.
*      "MOD-004 begin
*      "For CN02, the special handling. See CR2537
*      IF it_ab_conf-ekorg = 'CN02'.
*        IF gv_bbmng_calc < wa_ekes-menge.
*          gv_bbmng_calc = wa_ekes-menge.
*        ENDIF.
*      ENDIF.
*      "MOD-004 end
*    ENDIF.
** If IDOC conf qty is 0 and no AB conf exists yet
*  ELSEIF wa_ekes IS INITIAL AND it_ab_conf-bbmng EQ 0.
**   Use ordered qty
*    gv_bbmng_calc = wa_ekpo-menge.
** If MtlGrp is 1 or 3 and BArea is CT and IDOC conf qty is not 0
*  ELSEIF gv_matkl IN gr_matkl_01_03 AND wa_ekko-area = 'CT' AND it_ab_conf-bbmng NE 0.
**   Use IDOC conf qty
*    gv_bbmng_calc = it_ab_conf-bbmng.
** If MtlGrp is 1 or 3 and BArea is CT and IDOC conf qty is 0
*  ELSEIF gv_matkl IN gr_matkl_01_03 AND wa_ekko-area = 'CT' AND it_ab_conf-bbmng EQ 0.
**   Use already confirmed qty (WA_EKES is not initial since that is one of the cases above)
*    gv_bbmng_calc = wa_ekes-menge.
** In other cases
*  ELSE.
*
** begin of Workflow130 CR3022
*    IF gv_rdc = 'X'.
*      " RDC logic
*      IF it_ab_conf-xblnr = '100' AND gv_xblnr(3) = '087'.
*        gv_bbmng_calc = it_ab_conf-bbmng + wa_ekes-menge.
*      ELSE.
*        gv_bbmng_calc = it_ab_conf-bbmng.
*      ENDIF.
*    ELSE.
*      " Old logic
**     Use IDOC conf qty + already conf qty
*      gv_bbmng_calc = it_ab_conf-bbmng + wa_ekes-menge.
*    ENDIF.
** end of Workflow130 CR3022
*
*    "MOD-004 begin
*    "For CN02, the special handling. See CR2537
*    IF it_ab_conf-ekorg = 'CN02'.
*      IF gv_bbmng_calc GT wa_ekpo-menge.
*        gv_bbmng_calc = wa_ekpo-menge.
*      ENDIF.
*    ENDIF.
*    "MOD-004 end
*  ENDIF.

* eND OF Deletion MOD-005
* Begin of Insertion MOD-005.
* If new conf date <= calculated date (999)
  if wa_ab_conf-bbein le lv_datum.
*   Set confirmation date to IDOC confirmation date + transp lead time
*   Get transportation lead time
    perform get_plifz.
*   Set calculated date
    gv_bbein_calc = wa_ab_conf-bbein + gv_plifz .
*   Set lead time in confirmation
    wa_ab_conf-plifz = gv_plifz.
* If new conf date > calculated date (999)
  else.
**   Set confirmation date to calculated date (999)
*    GV_BBEIN_CALC = LV_DATUM.
*   Set confirmation date to date from IDOC
    gv_bbein_calc = wa_ab_conf-bbein.
*   Set the order acknowledgment flag and don't calc qty
    gv_acknl = 'X'.
    check 1 eq 2.
  endif.
* Part 2: Quantity
* **************** *
* If IDOC conf status is higher than the DB table conf status
  set extended check off. " To avoid error on character based comparison in following line
  if not wa_ekes is initial and wa_ab_conf-xblnr gt wa_ekes-xblnr.
    set extended check on.
*   If IDOC conf qty is 0
    if wa_ab_conf-bbmng eq 0.
*     Use already confirmed qty
      gv_bbmng_calc = wa_ekes-menge.
    else.
*     Use IDOC conf qty
      gv_bbmng_calc = wa_ab_conf-bbmng.
      "MOD-004 begin
      "For CN02, the special handling. See CR2537
      if wa_ab_conf-ekorg = 'CN02' or wa_ab_conf-ekorg = 'CN07'.
        if gv_bbmng_calc < wa_ekes-menge.
          gv_bbmng_calc = wa_ekes-menge.
        endif.
      endif.
      "MOD-004 end
    endif.
* If IDOC conf qty is 0 and no AB conf exists yet
  elseif wa_ekes is initial and wa_ab_conf-bbmng eq 0.
*   Use ordered qty
    gv_bbmng_calc = wa_ekpo-menge.
* If MtlGrp is 1 or 3 and BArea is CT and IDOC conf qty is not 0
  elseif gv_matkl in gr_matkl_01_03 and wa_ekko-area = 'CT' and wa_ab_conf-bbmng ne 0.
*   Use IDOC conf qty
    gv_bbmng_calc = wa_ab_conf-bbmng.
* If MtlGrp is 1 or 3 and BArea is CT and IDOC conf qty is 0
  elseif gv_matkl in gr_matkl_01_03 and wa_ekko-area = 'CT' and wa_ab_conf-bbmng eq 0.
*   Use already confirmed qty (WA_EKES is not initial since that is one of the cases above)
    gv_bbmng_calc = wa_ekes-menge.
* In other cases
  else.

* begin of Workflow130 CR3022
    if gv_rdc = 'X'.
      " RDC logic
      if wa_ab_conf-xblnr = '100' and gv_xblnr(3) = '087'.
        gv_bbmng_calc = wa_ab_conf-bbmng + wa_ekes-menge.
      else.
        gv_bbmng_calc = wa_ab_conf-bbmng.
      endif.
    else.
      " Old logic
*     Use IDOC conf qty + already conf qty
      gv_bbmng_calc = wa_ab_conf-bbmng + wa_ekes-menge.
    endif.
* end of Workflow130 CR3022

    "MOD-004 begin
    "For CN02, the special handling. See CR2537
    if wa_ab_conf-ekorg = 'CN02' or wa_ab_conf-ekorg = 'CN07'.
      if gv_bbmng_calc gt wa_ekpo-menge.
        gv_bbmng_calc = wa_ekpo-menge.
      endif.
    endif.
    "MOD-004 end
  endif.

* End of Insertion MOD-005.
* **************** *

endform.                    " CALC_DATUM_MENGE

*&---------------------------------------------------------------------*
*&      Form  UPDATE_PO_SO
*&---------------------------------------------------------------------*
form update_po_so.

  data:
    ls_ekpo  type bapimepoitem,
    ls_ekpox type bapimepoitemx,
*    lt_ekpo  LIKE ls_ekpo  OCCURS 0,    " -mod-005
*    lt_ekpox LIKE ls_ekpox OCCURS 0,    " -mod-005
    lt_ekpo  type standard table of bapimepoitem,            " +mod-005
    lt_ekpox type standard table of bapimepoitemx.          " +mod-005
* Begin of Deletion MOD-005
*
** In case it's just an acknowledgement
*  IF gv_acknl NE space.
**   Update the PO item's acknowledgment field (on confirmations tab)
*    CLEAR: it_return, it_return[].
*    ls_ekpo-po_item  = it_ab_conf-ebelp.
*    ls_ekpox-po_item = it_ab_conf-ebelp.
*    IF it_ab_conf-xblnr < 100.
*      ls_ekpo-acknowl_no = 'status < 100'.
*    ELSE.
*      ls_ekpo-acknowl_no = gv_bbein_calc.
*    ENDIF.
*    ls_ekpox-acknowl_no = 'X'.
*    APPEND ls_ekpo  TO lt_ekpo.
*    APPEND ls_ekpox TO lt_ekpox.
*    CALL FUNCTION 'BAPI_PO_CHANGE'
*      EXPORTING
*        purchaseorder = it_ab_conf-ebeln
*      TABLES
*        return        = it_return
*        poitem        = lt_ekpo
*        poitemx       = lt_ekpox.
*
**   If any messages returned
*    IF NOT it_return[] IS INITIAL.
**     Create application log
*      PERFORM bal_create.
**     Add the messages to the log (and write first E message to TEXT)
*      PERFORM bal_add_returntab.
**     Save the application log
*      PERFORM bal_save.
*    ENDIF.
*
**   If update on PO was successfull
*    IF it_ab_conf-status EQ '20'.
**     Commit the update on PO item
*      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*        EXPORTING
*          wait = 'X'.
*    ENDIF.
*
*  ELSE.
*
**   Have the confirmation updates done by the function module
*    CLEAR: it_return, it_return[].
**   Get GR
*    PERFORM get_webaz.
*
** begin of Workflow130 CR3022
*    IF gv_rdc = 'X' AND gv_length = 6.
*      it_ab_conf-xblnr = gv_xblnr.
*    ENDIF.
** end of Workflow130 CR3022
*
*    CALL FUNCTION 'YSE_VISA_PROCESS_CONF'
*      EXPORTING
*        iv_bbmng_calc = gv_bbmng_calc
*        iv_bbein_calc = gv_bbein_calc
*        is_ab         = it_ab_conf
*        iv_plifz      = gv_plifz
*        iv_webaz      = gv_webaz
*      TABLES
*        t_return      = it_return.
*
**   If any messages returned
*    IF NOT it_return[] IS INITIAL.
**     Create application log
*      PERFORM bal_create.
**     Add the messages to the log (and write first E message to TEXT)
*      PERFORM bal_add_returntab.
**     Save the application log
*      PERFORM bal_save.
*    ENDIF.
*
*  ENDIF.
*
* End of Deletion MOD-005
* Begin of Insertion MOD-005

* In case it's just an acknowledgement
  if gv_acknl ne space.
*   Update the PO item's acknowledgment field (on confirmations tab)
    clear: it_return, it_return[].
    ls_ekpo-po_item  = wa_ab_conf-ebelp.
    ls_ekpox-po_item = wa_ab_conf-ebelp.
    if wa_ab_conf-xblnr < 100.
      ls_ekpo-acknowl_no = 'status < 100'.
    else.
      ls_ekpo-acknowl_no = gv_bbein_calc.
    endif.
    ls_ekpox-acknowl_no = 'X'.
    append ls_ekpo  to lt_ekpo.
    append ls_ekpox to lt_ekpox.
    call function 'BAPI_PO_CHANGE'
      exporting
        purchaseorder = wa_ab_conf-ebeln
      tables
        return        = it_return
        poitem        = lt_ekpo
        poitemx       = lt_ekpox.

*   If any messages returned
    if not it_return[] is initial.
*     Create application log
      perform bal_create.
*     Add the messages to the log (and write first E message to TEXT)
      perform bal_add_returntab.
*     Save the application log
      perform bal_save.
    endif.

*   If update on PO was successfull
    if wa_ab_conf-status eq '20'.
*     Commit the update on PO item
      call function 'BAPI_TRANSACTION_COMMIT'
        exporting
          wait = 'X'.
    endif.

  else.

*   Have the confirmation updates done by the function module
    clear: it_return, it_return[].
*   Get GR
    perform get_webaz.

* begin of Workflow130 CR3022
    if gv_rdc = 'X' and gv_length = 6.
      wa_ab_conf-xblnr = gv_xblnr.
    endif.
* end of Workflow130 CR3022

    call function 'YSE_VISA_PROCESS_CONF'
      exporting
        iv_bbmng_calc = gv_bbmng_calc
        iv_bbein_calc = gv_bbein_calc
        is_ab         = wa_ab_conf
        iv_plifz      = gv_plifz
        iv_webaz      = gv_webaz
      tables
        t_return      = it_return.

*   If any messages returned
    if not it_return[] is initial.
*     Create application log
      perform bal_create.
*     Add the messages to the log (and write first E message to TEXT)
      perform bal_add_returntab.
*     Save the application log
      perform bal_save.
    endif.

  endif.

* End of Insertion MOD-005
endform.                    " UPDATE_PO_SO

*&---------------------------------------------------------------------*
*&      Form  CHECK_AB_HIST_STATUS
*&---------------------------------------------------------------------*
form check_ab_hist_status .
** Begin of Deletion MOD-005.
** Read previous entry for the PO item from history
*  READ TABLE it_ab_hist INDEX 1.
** In case there is history, and prev entry was not processed succesfully nor ignored
*  IF sy-subrc EQ 0 AND it_ab_hist-status NE '30' AND it_ab_hist-status NE '40'.
**   Leave status alone ("Not yet processed" or "Failed") and ignore
**   this confirmation for now
*    EXIT.
*  ENDIF.
*
** Check if any previous entry exists for the PO item with status 20
*  LOOP AT it_ab_hist_po WHERE status EQ '20'.
*    EXIT.
*  ENDLOOP.
*  IF sy-subrc EQ 0.
**   Leave status alone ("Not yet processed" or "Failed") and ignore
**   this confirmation for now
*    EXIT.
*  ENDIF.
**
** If we reached the end of this logic, processing is allowed
*  it_ab_conf-status = '20'.  " Set status to being processed
*  it_ab_conf-text   = 'Being processed'(101).
** End of Deletion MOD-005
* Begin of Insertion MOD-005.
* Read previous entry for the PO item from history
  clear wa_ab_hist.
  read table it_ab_hist into wa_ab_hist
                        with key ebeln = wa_ab_conf-ebeln
                                 ebelp = wa_ab_conf-ebelp.
*                        BINARY SEARCH.
* In case there is history, and prev entry was not processed succesfully nor ignored
  if sy-subrc eq 0 and wa_ab_hist-status ne '30' and wa_ab_hist-status ne '40'.
*   Leave status alone ("Not yet processed" or "Failed") and ignore
* If we reached the end of this logic, processing is allowed
    wa_ab_conf-status = '20'.  " Set status to being processed
    wa_ab_conf-text   = 'Being processed'(101).
  endif.

* Check if any previous entry exists for the PO item with status 20
  clear wa_ab_hist_po.
  read table it_ab_hist_po into wa_ab_hist_po
                           with key ebeln = wa_ab_conf-ebeln
                           binary search.
  if sy-subrc eq 0.
* If we reached the end of this logic, processing is allowed
    wa_ab_conf-status = '20'.  " Set status to being processed
    wa_ab_conf-text   = 'Being processed'(101).
  endif.

* End of Insertion MOD-005
endform.                    " CHECK_AB_HIST_STATUS

*&---------------------------------------------------------------------*
*&      Form  CHECK_IGNORE
*&---------------------------------------------------------------------*
form check_ignore .

  data:
    lv_menge_conf_tot     like wa_ekes-menge,
    lv_menge_conf_exc     type i,
    lv_menge_conf_exc_txt type string.


* Ignore codes only to be triggered when MatlGrp is 2 or (( MatlGrp is 1 or 3) and (BArea is IT or CMT))
  check           gv_matkl     in gr_matkl_02_05
         or (     gv_matkl     in gr_matkl_01_03
              and wa_ekko-area in gr_area_it_cmt ).

* Ignore codes only to be triggered if conf already exists
  check not wa_ekes is initial.
* Begin of Deletion MOD-005
** If the status of the DB table conf is higher than the new conf
*  SET EXTENDED CHECK OFF. " To avoid error on character based comparison in following line
*  IF wa_ekes-xblnr GT it_ab_conf-xblnr.
*
** begin of Workflow130 CR3022
*    IF gv_rdc = 'X'.
*      " RDC logic
*    ELSE.
*      " Old logic
*      SET EXTENDED CHECK ON.
**     Set ignore status
*      it_ab_conf-status = '30'.
*      it_ab_conf-text   = 'Confirmation already exists with a higher status'(t02).
*    ENDIF.
** end of Workflow130 CR3022
*
** If the status of the DB table conf is the same compared to new conf
*  ELSEIF wa_ekes-xblnr EQ it_ab_conf-xblnr.
*
**   Calculate total confirmed qty (DB data + new confirmation
*    lv_menge_conf_tot = wa_ekes-menge + it_ab_conf-bbmng.
*    "MOD-004 begin
*    "For CN02, the special handling. See CR2537
*    IF it_ab_conf-ekorg = 'CN02'.
*      IF lv_menge_conf_tot GT wa_ekpo-menge.
*        lv_menge_conf_tot = wa_ekpo-menge.
*      ENDIF.
*    ENDIF.
*    "MOD-004 end
**   If total confirmation quantity exceeds ordered qty
*    IF lv_menge_conf_tot GT wa_ekpo-menge.
*
**     Set ignore status
*      it_ab_conf-status = '30'.
**     Calculate by how much the confirmation would exceed the ordered qty
*      lv_menge_conf_exc = lv_menge_conf_tot - wa_ekpo-menge.
*      lv_menge_conf_exc_txt = lv_menge_conf_exc.
*      CONCATENATE
*                       'Confirmation Qty exceeds ordered Qty by'(t03)
*                       lv_menge_conf_exc_txt
*                       wa_ekpo-meins
*                  INTO it_ab_conf-text
*             SEPARATED BY space.
*
*    ENDIF.
*
*  ENDIF.
* End of Deletion MOD-005
* Begin of Insertion MOD-005

* If the status of the DB table conf is higher than the new conf
  set extended check off. " To avoid error on character based comparison in following line
  if wa_ekes-xblnr gt wa_ab_conf-xblnr.

* begin of Workflow130 CR3022
    if gv_rdc = 'X'.
      " RDC logic
    else.
      " Old logic
      set extended check on.
*     Set ignore status
      wa_ab_conf-status = '30'.
      wa_ab_conf-text   = 'Confirmation already exists with a higher status'(t02).
    endif.
* end of Workflow130 CR3022

* If the status of the DB table conf is the same compared to new conf
  elseif wa_ekes-xblnr eq wa_ab_conf-xblnr.

*   Calculate total confirmed qty (DB data + new confirmation
    lv_menge_conf_tot = wa_ekes-menge + wa_ab_conf-bbmng.
    "MOD-004 begin
    "For CN02, the special handling. See CR2537
    if wa_ab_conf-ekorg = 'CN02' or wa_ab_conf-ekorg = 'CN07'.
      if lv_menge_conf_tot gt wa_ekpo-menge.
        lv_menge_conf_tot = wa_ekpo-menge.
      endif.
    endif.
    "MOD-004 end
*   If total confirmation quantity exceeds ordered qty
    if lv_menge_conf_tot gt wa_ekpo-menge.

*     Set ignore status
      wa_ab_conf-status = '30'.
*     Calculate by how much the confirmation would exceed the ordered qty
      lv_menge_conf_exc = lv_menge_conf_tot - wa_ekpo-menge.
      lv_menge_conf_exc_txt = lv_menge_conf_exc.
      concatenate
                       'Confirmation Qty exceeds ordered Qty by'(t03)
                       lv_menge_conf_exc_txt
                       wa_ekpo-meins
                  into wa_ab_conf-text
             separated by space.

    endif.

  endif.
* End of Insertion MOD-005
endform.                    " CHECK_IGNORE

*&---------------------------------------------------------------------*
*&      Form  BAL_CREATE
*&---------------------------------------------------------------------*
form bal_create .

* Create application log
  check gv_log_handle is initial.
*  wa_s_log-extnumber = it_ab_conf-docnum.   " -MOD-005
  wa_s_log-extnumber = wa_ab_conf-docnum.   " +MOD-005
  wa_s_log-object    = 'YSE_VISA'.
  wa_s_log-subobject = 'YSE_AB_CONF'.
  wa_s_log-aldate    = sy-datlo.
  wa_s_log-altime    = sy-timlo.
  wa_s_log-aluser    = sy-uname.
  call function 'BAL_LOG_CREATE'
    exporting
      i_s_log      = wa_s_log
    importing
      e_log_handle = gv_log_handle.

endform.                    " BAL_CREATE

*&---------------------------------------------------------------------*
*&      Form  BAL_ADD_RETURNTAB
*&---------------------------------------------------------------------*
form bal_add_returntab.

  data:
    wa_s_msg  type bal_s_msg,  " BAL_LOG_CREATE - To send application message
    wa_return like line of it_return,
    ls_first  type c value 'X'.


* For every message in the return table
  loop at it_return into wa_return.
*   Move fields to structure for BAL
    move wa_return-type       to wa_s_msg-msgty.
    move wa_return-id         to wa_s_msg-msgid.
    move wa_return-number     to wa_s_msg-msgno.
    move wa_return-message_v1 to wa_s_msg-msgv1.
    move wa_return-message_v2 to wa_s_msg-msgv2.
    move wa_return-message_v3 to wa_s_msg-msgv3.
    move wa_return-message_v4 to wa_s_msg-msgv4.

*   Have the message added to the log
    call function 'BAL_LOG_MSG_ADD'
      exporting
        i_log_handle     = gv_log_handle
        i_s_msg          = wa_s_msg
      exceptions
        log_not_found    = 0
        msg_inconsistent = 0
        log_is_full      = 0
        others           = 0.
*   If this is the first error message, copy it to IT_AB_CONF-TEXT
    if ls_first ne space and wa_return-type eq 'E'.
      clear ls_first.
*    Begin of Deletion MOD-005
**     Set status
*      it_ab_conf-status = '10'.
*      it_ab_conf-text = wa_return-message.
*      REPLACE FIRST OCCURRENCE OF '&' IN it_ab_conf-text WITH wa_return-message_v1.
*      REPLACE FIRST OCCURRENCE OF '&' IN it_ab_conf-text WITH wa_return-message_v2.
*      REPLACE FIRST OCCURRENCE OF '&' IN it_ab_conf-text WITH wa_return-message_v3.
*      REPLACE FIRST OCCURRENCE OF '&' IN it_ab_conf-text WITH wa_return-message_v4.
*   End of Deletion MOD-005
*    Begin of Insertion MOD-005.
*     Set status
      wa_ab_conf-status = '10'.
      wa_ab_conf-text = wa_return-message.
      replace first occurrence of '&' in wa_ab_conf-text with wa_return-message_v1.
      replace first occurrence of '&' in wa_ab_conf-text with wa_return-message_v2.
      replace first occurrence of '&' in wa_ab_conf-text with wa_return-message_v3.
      replace first occurrence of '&' in wa_ab_conf-text with wa_return-message_v4.
*    End of Insertion MOD-005
    endif.
  endloop.

endform.                    " BAL_ADD_RETURNTAB

*&---------------------------------------------------------------------*
*&      Form  BAL_SAVE
*&---------------------------------------------------------------------*
form bal_save .

  data:
    lt_log_handle type bal_t_logh.            " BAL_DB_SAVE - to pass the logs to be saved


* Save application log to database
  append gv_log_handle to lt_log_handle.
  call function 'BAL_DB_SAVE'
    exporting
      i_save_all       = 'X'
      i_t_log_handle   = lt_log_handle
*    IMPORTING
*      E_NEW_LOGNUMBERS = LT_NEW_LOGNUMBERS
    exceptions
      log_not_found    = 0
      save_not_allowed = 0
      numbering_error  = 0
      others           = 0.

endform.                    " BAL_SAVE

*&---------------------------------------------------------------------*
*&      Form  SET_1ST_CONF_DATE
*&---------------------------------------------------------------------*
form set_1st_conf_date .

  data:
*    lv_datum      LIKE sy-datum,           " -mod-005
    wa_po_confirm type yse_po_confirm.


* Don't continue if calculated conf qty is different from ordered qty
  check gv_bbmng_calc eq wa_ekpo-menge.
** Check that confirmation date lies within tolerance interval
** Add 999 to required delivery date (into LV_DATUM)
*  LV_DATUM = WA_EKPO-EINDT + 999.
** Don't continue if conf date not within tolerance interval
*  CHECK GV_BBEIN_CALC LT LV_DATUM.
* Check it's a realistic date (and not the acknowledgement)
  check gv_acknl eq space.
*  Begin of Deletion MOD-005
* Check if an entry for this PO item already exists in YSE_PO_CONFIRM
*  SELECT SINGLE * FROM yse_po_confirm
*         INTO wa_po_confirm
*         WHERE ebeln = it_ab_conf-ebeln
*           AND ebelp = it_ab_conf-ebelp.
* Don't continue if entry already exist
*  CHECK sy-subrc NE 0.
** Add entry with first confirmation date
*  CLEAR wa_po_confirm.
*  wa_po_confirm-ebeln   = it_ab_conf-ebeln.
*  wa_po_confirm-ebelp   = it_ab_conf-ebelp.
*  wa_po_confirm-menge   = gv_bbmng_calc.
*  wa_po_confirm-zzeindt = gv_bbein_calc.
*  wa_po_confirm-xblnr   = it_ab_conf-xblnr.
*  INSERT yse_po_confirm FROM wa_po_confirm.
*  End of Deletion MOD-005
*  Begin of Insertion MOD-005\
  clear wa_po_confirm.
  read table it_yse_po_confirm into wa_po_confirm
                               with key ebeln = wa_ab_conf-ebeln
                                        ebelp = wa_ab_conf-ebelp
                                binary search.
* Don't continue if entry already exist
  check sy-subrc ne 0.
* Add entry with first confirmation date
  clear wa_po_confirm.
  wa_po_confirm-ebeln   = wa_ab_conf-ebeln.
  wa_po_confirm-ebelp   = wa_ab_conf-ebelp.
  wa_po_confirm-menge   = gv_bbmng_calc.
  wa_po_confirm-zzeindt = gv_bbein_calc.
  wa_po_confirm-xblnr   = wa_ab_conf-xblnr.
  insert yse_po_confirm from wa_po_confirm.
*  End of Insertion MOD-005

endform.                    " SET_1ST_CONF_DATE

*&---------------------------------------------------------------------*
*&      Form  SET_PROCESSED_STATUS
*&---------------------------------------------------------------------*
form set_processed_status .

  data:
    lv_bbmng     type i,
    lv_bbmng_txt type string.


*  it_ab_conf-status = '40'.               " -MOD-005
  wa_ab_conf-status = '40'.               " +MOD-005
  if gv_acknl eq space.
    lv_bbmng = gv_bbmng_calc.
    lv_bbmng_txt = lv_bbmng.
    concatenate          'Update done with date'(t04)
                         gv_bbein_calc
                         'and qty'(t05)
                         lv_bbmng_txt
*                    INTO it_ab_conf-text   " -MOD-005
                    into wa_ab_conf-text   " +MOD-005
               separated by space.
  else.
*    it_ab_conf-text = 'Acknowledgement registered'.      " -MOD-005
    wa_ab_conf-text = text-001.      " +MOD-005
  endif.

endform.                    " SET_PROCESSED_STATUS

*&---------------------------------------------------------------------*
*&      Form  MODIFY_LINE
*&---------------------------------------------------------------------*
form modify_line .
* Begin of Deletion MOD-005.
*  it_ab_conf-aedat  = sy-datum.
*  it_ab_conf-aezeit = sy-uzeit.
*  MODIFY yse_visa_ab_hist FROM it_ab_conf.
* End of Deletion MOD-005
* Begin of Insertion MOD-005
  wa_ab_conf-aedat  = sy-datum.
  wa_ab_conf-aezeit = sy-uzeit.
  modify yse_visa_ab_hist from wa_ab_conf.
* End of Insertion MOD-005
endform.                    " MODIFY_LINE

*&---------------------------------------------------------------------*
*&      Form  GET_EKKO
*&---------------------------------------------------------------------*
form get_ekko .
* Begin of Insertion MOD-005
* Get Purch DocType
  clear wa_ekko.
  read table it_ekko into wa_ekko
                     with key ebeln = wa_ab_conf-ebeln
                     binary search.
  if sy-subrc ne 0.
    wa_ab_conf-status = '10'.
    wa_ab_conf-text   = 'Failed to find PO header data'(t08).
  endif.
* End of Insertion MOD-005
* Begin of Deletion MOD-005
** Get Purch DocType
*  CLEAR wa_ekko.
*  SELECT SINGLE bsart ekko~ekorg lifnr area
*         INTO wa_ekko
*         FROM ekko
*             JOIN yse_po_sorg_porg
*               ON ekko~ekorg = yse_po_sorg_porg~ekorg
*         WHERE ebeln = it_ab_conf-ebeln.
*
*  IF sy-subrc NE 0.
*    it_ab_conf-status = '10'.
*    it_ab_conf-text   = 'Failed to find PO header data'(t08).
*  ENDIF.
* End of Deletion MOD-005
endform.                    " GET_EKKO

*&---------------------------------------------------------------------*
*&      Form  update_sortf
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
form update_sortf .

*  TABLES : resb, rsdbs, ekes.           " -mod-005
  data: " lv_rsdbs    LIKE rsdbs,       " -MOD-005
*        lv_eindt    TYPE eindt,        " -mod-005
*        lv_sortf    LIKE resb-sortf,   " -mod-005
         lv_sortf   type sortp,         " +MOD-005
*        lv_resb     LIKE resb,         " -MOD-005
        lv_route    type route,
        lv_webaz    type webaz,
        lv_dur      type traztd,
        lv_dur_days type traztd,
        lv_date     type datum,
        date_nok     type boolean,
*        lv_t001w     LIKE t001w,                              " -mod-005
        it_dates     type table of rke_dat with header line,
*        lv_work_days LIKE  komp-anz_tage,                     " -MOD-005
        lv_work_days type anz_tage,                             " +mod-005
        lv_tot_days type traztd,
*        lv_type      TYPE c,                                   " -mod-005
        lv_err       type c.

*** MOD-001 * begin ***
  data: lv_vbeln  type vbeln_va,
        lv_posnr  type posnr_va.
*** MOD-001 * end ***


** Begin of Deletion MOD-005
*  CLEAR: lv_resb, lv_route, lv_webaz, lv_dur, lv_dur_days, lv_err.
*  SELECT SINGLE * FROM rsdbs
*         INTO lv_rsdbs
*         WHERE ebeln = it_ab_conf-ebeln
*           AND ebelp = it_ab_conf-ebelp.
*
**** MOD-001 * begin ***
*  IF sy-subrc NE 0.
*    SELECT SINGLE vbelv posnv FROM vbfa
*           INTO (lv_vbeln, lv_posnr)
*           WHERE vbeln = it_ab_conf-ebeln
*             AND posnn = it_ab_conf-ebelp
*             AND vbtyp_v = 'C'.
*    IF sy-subrc = 0.
*      SELECT SINGLE zz_aso_rsnum zz_aso_rspos FROM vbap
*             INTO (lv_rsdbs-rsnum, lv_rsdbs-rspos)
*             WHERE vbeln = lv_vbeln
*               AND posnr = lv_posnr.
*    ENDIF.
*  ENDIF.
**** MOD-001 * end ***
*  IF sy-subrc EQ 0.
**CVM.sn
**   First select the Component Line(s)?
*    SELECT SINGLE *
*    INTO lv_resb
*    FROM resb
*    WHERE rsnum EQ lv_rsdbs-rsnum
*    AND rspos EQ lv_rsdbs-rspos.
**   Get the route from the SO
*    SELECT SINGLE route
*           INTO lv_route
*           FROM vbap
*           WHERE vbeln EQ lv_resb-kdauf.
**   Get Material Info
*    SELECT SINGLE webaz
*           INTO lv_webaz
*           FROM marc
*           WHERE matnr = lv_resb-matnr
*             AND werks = lv_resb-werks.
*
*    SELECT SINGLE traztd
*           INTO lv_dur
*           FROM tvro
*           WHERE route = lv_route.
**   If duration of the route found
*    IF sy-subrc EQ 0.
**           Convert the internal format to days
*      CALL FUNCTION 'YSE_CONVERSION_EXIT_TSTRG_OUT'
*        EXPORTING
*          input  = lv_dur
*        IMPORTING
*          output = lv_dur_days.
*    ENDIF.
*    lv_date =  gv_bbein_calc + lv_webaz + lv_dur_days.
*    lv_tot_days = lv_dur_days + lv_webaz + 1.
*    MOVE: space TO date_nok,
*          'W' TO lv_type.
*
**   Get the factory Calender
*    SELECT SINGLE * INTO lv_t001w
*           FROM t001w
*           WHERE werks = lv_resb-werks.
*    WHILE date_nok EQ space .
*      CALL FUNCTION 'RKE_SELECT_FACTDAYS_FOR_PERIOD'
*        EXPORTING
*          i_datab               = gv_bbein_calc
*          i_datbi               = lv_date
*          i_factid              = lv_t001w-fabkl
*        TABLES
*          eth_dats              = it_dates
*        EXCEPTIONS
*          date_conversion_error = 1
*          OTHERS                = 2.
*      IF sy-subrc EQ 0.
*        DESCRIBE TABLE it_dates LINES lv_work_days.
*        IF lv_tot_days EQ lv_work_days.
*          MOVE 'X' TO date_nok.
*        ELSE.
*          lv_date = lv_date + ( lv_tot_days - lv_work_days ).
*          IF lv_date LT sy-datum.
*            lv_date = sy-datum.
*            MOVE 'X' TO date_nok.
*          ENDIF.
*        ENDIF.
*      ELSE.
*        MOVE 'X' TO date_nok.
*        MOVE 'X' TO lv_err.
*      ENDIF.
*    ENDWHILE.
*
**CVM.en
*    IF lv_err  IS INITIAL.
*      WRITE lv_date DD/MM/YYYY TO lv_sortf.
*      UPDATE resb SET sortf = lv_sortf
*      WHERE rsnum EQ lv_rsdbs-rsnum
*      AND   rspos EQ lv_rsdbs-rspos.
*    ENDIF.
*  ENDIF.
*
**** MOD-001 * begin undelete ***
** begin of delete air21099 20090430
*  IF lv_err IS INITIAL.
*    PERFORM update_aso_line USING lv_date lv_resb lv_rsdbs.
*  ENDIF.
** end of delete air21099 20090430
**** MOD-001 * end undelete ***
* End of Deletion MOD-005
* Begin of Insertion MOD-005
  clear: lv_vbeln,lv_posnr, lv_route, lv_webaz, lv_dur, lv_dur_days, lv_err.
  clear wa_rsdbs.
  read table it_rsdbs into wa_rsdbs
                      with key ebeln = wa_ab_conf-ebeln
                               ebelp = wa_ab_conf-ebelp
                      binary search.

*** MOD-001 * begin ***
  if sy-subrc ne 0.
    clear wa_vbfa.
    read table it_vbfa into wa_vbfa
                       with key vbeln = wa_ab_conf-ebeln
                                posnn = wa_ab_conf-ebelp
                       binary search.

    if sy-subrc = 0.
      lv_vbeln = wa_vbfa-vbelv.
      lv_posnr = wa_vbfa-posnv.
      clear wa_vbap_new.
      read table it_vbap_new into wa_vbap_new
                          with key vbeln = lv_vbeln
                                   posnr = lv_posnr
                          binary search.
      wa_rsdbs-rsnum = wa_vbap_new-zz_aso_rsnum.
      wa_rsdbs-rspos = wa_vbap_new-zz_aso_rspos.
    endif.
  endif.
*** MOD-001 * end ***
  if sy-subrc eq 0.
*CVM.sn
*   First select the Component Line(s)?
    clear wa_resb.
    read table it_resb into wa_resb
                       with key rsnum = wa_rsdbs-rsnum
                                rspos = wa_rsdbs-rspos
                       binary search.
    if sy-subrc  = 0.
*   Get the route from the SO
      clear wa_vbap_new1.
      read table it_vbap_new1 into wa_vbap_new1
                              with key vbeln = wa_resb-kdauf
                              binary search.

      lv_route = wa_vbap_new1-route.
*   Get Material Info
      clear wa_marc.
      read table it_marc into wa_marc
                          with key matnr = wa_resb-matnr
                                   werks = wa_resb-werks
                          binary search.

      clear wa_tvro.
      read table it_tvro into wa_tvro
                          with key route = lv_route
                         binary search.

      lv_dur = wa_tvro-traztd.
    endif.
*   If duration of the route found
    if sy-subrc eq 0.
*           Convert the internal format to days
      call function 'YSE_CONVERSION_EXIT_TSTRG_OUT'
        exporting
          input  = lv_dur
        importing
          output = lv_dur_days.
    endif.
    lv_date =  gv_bbein_calc + lv_webaz + lv_dur_days.
    lv_tot_days = lv_dur_days + lv_webaz + 1.
    move: space to date_nok.
*          'W' TO lv_type.                                         " -mod-005

*   Get the factory Calender
    read table it_t001w into wa_t001w
                        with key werks = wa_resb-werks
                        binary search.

    while date_nok eq space .
      call function 'RKE_SELECT_FACTDAYS_FOR_PERIOD'
        exporting
          i_datab               = gv_bbein_calc
          i_datbi               = lv_date
          i_factid              = wa_t001w-fabkl
        tables
          eth_dats              = it_dates
        exceptions
          date_conversion_error = 1
          others                = 2.
      if sy-subrc eq 0.
        describe table it_dates lines lv_work_days.
        if lv_tot_days eq lv_work_days.
          move 'X' to date_nok.
        else.
          lv_date = lv_date + ( lv_tot_days - lv_work_days ).
          if lv_date lt sy-datum.
            lv_date = sy-datum.
            move 'X' to date_nok.
          endif.
        endif.
      else.
        move 'X' to date_nok.
        move 'X' to lv_err.
      endif.
    endwhile.

*CVM.en
    if lv_err  is initial.
      write lv_date dd/mm/yyyy to lv_sortf.
      update resb set sortf = lv_sortf
      where rsnum eq wa_rsdbs-rsnum
      and   rspos eq wa_rsdbs-rspos.
    endif.
  endif.

*** MOD-001 * begin undelete ***
* begin of delete air21099 20090430
  if lv_err is initial.
*    PERFORM update_aso_line USING lv_date wa_resb wa_rsdbs.     " -mod-005
    perform update_aso_line using lv_date wa_resb.     " +mod-005
  endif.
* end of delete air21099 20090430
*** MOD-001 * end undelete ***

* End of Insertion MOD-005

endform.                    " update_sortf

*&---------------------------------------------------------------------*
*&      Form  UPDATE_ASO_LINE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_DATE  text
*      -->P_LV_RESB  text
*      -->P_LV_RESDBS  text
*----------------------------------------------------------------------*
* Begin of Insertion MOD-005
form update_aso_line  using    p_lv_date type datum
                               p_lv_resb type ty_resb.
* End of Insertion MOD-005
* Begin of Deletion MOD-005
*FORM update_aso_line  USING    p_lv_date TYPE datum
*                               p_lv_resb TYPE resb
*                               p_lv_rsdbs TYPE rsdbs.
* End of Deletion MOD-005

  data: lv_objkey type swo_typeid,
      lv_aufk   type aufk,
*      lt_vbeln  TYPE vbeln_va OCCURS 0 WITH HEADER LINE,     " -MOD-005
*      it_vbap   TYPE vbap     OCCURS 0 WITH HEADER LINE,     " +mod-005
      lt_vbeln  type standard table of vbeln_va,              " +mod-005
      ls_vbeln  type vbeln,

      ls_headerx type bapisdh1x,
*      lt_item_in TYPE STANDARD TABLE OF bapisditm,         " -MOD-005
*      ls_item_in TYPE bapisditm,                           " -MOD-005
*      lt_item_inx TYPE STANDARD TABLE OF bapisditmx,       " -MOD-005
*      ls_item_inx TYPE bapisditmx,                         " -MOD-005
      lt_sched_in type standard table of bapischdl,
      ls_sched_in type bapischdl,
      lt_sched_inx type standard table of bapischdlx,
      ls_sched_inx type bapischdlx,
      lt_return type standard table of bapiret2,
      lt_vbap_temp   type standard table of ty_vbap.                    " +mod-005
*      it_ext TYPE STANDARD TABLE OF bapiparex WITH HEADER LINE.        " -mod-005


  clear: lv_aufk, lv_objkey.
* Begin of Insertion MOD-005
  read table it_aufk into lv_aufk
                     with key aufnr = p_lv_resb-aufnr
                     binary search.
* End of Insertion MOD-005
* Begin of Deletion MOD-005
*  SELECT SINGLE * FROM aufk
*         INTO lv_aufk
*         WHERE aufnr = p_lv_resb-aufnr.
* End of Deletion MOD-005
  if sy-subrc eq 0.
    move lv_aufk-aufnr to lv_objkey.
    clear: lt_vbeln[], lt_vbeln.

    call function 'ISM4_GET_EXISTING_LINK'
      exporting
        objectkey_imp = lv_objkey
        auart_imp     = lv_aufk-auart
      tables
        vbeln_exp     = lt_vbeln
      exceptions
        nonsense      = 1
        others        = 2.

    if sy-subrc eq 0.  "Linking check ok
*Check if a SO nr has been returned
*   Begin of  DELETION MOD-005
*      LOOP AT lt_vbeln INTO ls_vbeln.
*      ENDLOOP.
*   End of Deletion MOD-005
      read table lt_vbeln into ls_vbeln index 1.         " +mod-005

*  1)C)a  For asso
*     Select the the right order item(s)?
* Begin of Deletion MOD-005
*      SELECT * FROM vbap
*               INTO TABLE it_vbap
*               WHERE vbeln = ls_vbeln
*                 AND matnr = p_lv_resb-matnr
*                 AND werks = p_lv_resb-werks.
*     IF sy-subrc EQ 0.
*
*        ls_headerx-updateflag = 'U'.
*
*        LOOP AT it_vbap.
**         Schedule line for quantity
*          ls_sched_in-itm_number = it_vbap-posnr.
*          ls_sched_inx-itm_number = it_vbap-posnr.
*          ls_sched_inx-updateflag = 'U'.
*          ls_sched_in-req_date = p_lv_date.
*          ls_sched_inx-req_date = 'X'.
*          APPEND ls_sched_in TO lt_sched_in.
*          APPEND ls_sched_inx TO lt_sched_inx.
*        ENDLOOP.
*  End of Deletion MOD-005
* Begin of Insertion MOD-005
      refresh lt_vbap_temp.
      loop at it_vbap into wa_vbap where vbeln = ls_vbeln and matnr = p_lv_resb-matnr and werks = p_lv_resb-werks.
        append wa_vbap to lt_vbap_temp.
        clear wa_vbap.
      endloop.
      if sy-subrc eq 0.

        ls_headerx-updateflag = 'U'.

        loop at lt_vbap_temp into wa_vbap.
*         Schedule line for quantity
          ls_sched_in-itm_number = wa_vbap-posnr.
          ls_sched_inx-itm_number = wa_vbap-posnr.
          ls_sched_inx-updateflag = 'U'.
          ls_sched_in-req_date = p_lv_date.
          ls_sched_inx-req_date = 'X'.
          append ls_sched_in to lt_sched_in.
          append ls_sched_inx to lt_sched_inx.
        endloop.
* End of Insertion M0D-005
        call function 'BAPI_SALESORDER_CHANGE'
          exporting
            salesdocument    = ls_vbeln
            order_header_inx = ls_headerx
          tables
            return           = lt_return
            schedule_lines   = lt_sched_in
            schedule_linesx  = lt_sched_inx.

        call function 'BAPI_TRANSACTION_COMMIT'
          exporting
            wait = 'X'.

      endif.
    endif.
  endif.

endform.                    " UPDATE_ASO_LINE

*&---------------------------------------------------------------------*
*&      Form  GET_WEBAZ
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
form get_webaz .
  clear gv_webaz.
* Begin of Deletion MOD-005
*  SELECT SINGLE webaz
*        INTO gv_webaz
*        FROM eban
*        WHERE ebeln = it_ab_conf-ebeln
*          AND ebelp = it_ab_conf-ebelp.
* End of Deletion MOD-005
* Begin of Insertion MOD-005.
  clear wa_eban.
  read table it_eban into wa_eban
                     with key ebeln = wa_ab_conf-ebeln
                              ebelp = wa_ab_conf-ebelp
                     binary search.
  gv_webaz = wa_eban-webaz.
* End of Insertion MOD-005

endform.                    " GET_WEBAZ
*&---------------------------------------------------------------------*
*&      Form  CHECK_RDC_SO
*&---------------------------------------------------------------------*
form check_rdc_so .

*  DATA: ls_yrd_cc_link_rdc TYPE yrd_cc_link_rdc.                                " -MOD-005
  data: ls_yrd_cc_link_rdc type ty_yrd_cc_link_rdc.                              " +MOD-005
  clear: ls_yrd_cc_link_rdc.
  clear: gv_rdc,gv_xblnr,gv_length.
*  begin of deletion mod-005
*  SELECT SINGLE *
*           FROM yrd_cc_link_rdc
*           INTO ls_yrd_cc_link_rdc
*          WHERE ebeln = it_ab_conf-ebeln
*            AND ebelp = it_ab_conf-ebelp.
*  IF ls_yrd_cc_link_rdc-vkorg = 'CN06' AND ls_yrd_cc_link_rdc-bsark = 'SEED'.
*    gv_rdc = 'X'.
*
*    gv_length = STRLEN( it_ab_conf-xblnr ).
*    IF gv_length = 6.
*      gv_xblnr = it_ab_conf-xblnr(6).
*      it_ab_conf-xblnr = it_ab_conf-xblnr+3(3).
*    ENDIF.
*  ENDIF.
* End of Deletion mod-005
* Begin of Insertion MOD-005.
  read table it_yrd_cc_link_rdc into ls_yrd_cc_link_rdc
                                with key ebeln = wa_ab_conf-ebeln
                                         ebelp = wa_ab_conf-ebelp
                                binary search.

  if ls_yrd_cc_link_rdc-vkorg = 'CN06' and ls_yrd_cc_link_rdc-bsark = 'SEED'.
    gv_rdc = 'X'.

    gv_length = strlen( wa_ab_conf-xblnr ).
    if gv_length = 6.
      gv_xblnr = wa_ab_conf-xblnr(6).
      wa_ab_conf-xblnr = wa_ab_conf-xblnr+3(3).
    endif.
  endif.
* End of Insertion MOD-005.
endform.                    " CHECK_RDC_SO

*******Begin of MOD-006*******
*&---------------------------------------------------------------------*
*&      Form  SET_JOB
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*FORM set_job .
*  DATA: lv_jobname  TYPE  tbtcjob-jobname,
*        lv_proname  TYPE  sy-repid,
*        lv_interval TYPE i.
*
*  lv_jobname = sy-repid.
*  lv_proname = sy-repid .
*  lv_interval = 2400.
*  CALL METHOD ycl_se_utility=>schedule_job
*    EXPORTING
*      iv_jobname     = lv_jobname
*      iv_programname = lv_proname
*      iv_interval    = lv_interval.

*ENDFORM.                    " SET_JOB
*******End of MOD-006*******
*&---------------------------------------------------------------------*
*&      Form  PRE_PROCESSING
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
form pre_processing .
  data: "lt_ab_conf type table of yse_visa_ab_hist,
        ls_ab_conf type yse_visa_ab_hist,
        lv_lifnr    type ekko-lifnr,
        lv_index    type sy-tabix,
        lv_index1   type sy-tabix,
        lv_index2   type sy-tabix.
*VISA_AB_HIST-XBLNR = status 240
*VISA_AB_HIST-WMENG = Confirm Qty from Vendor 00330
*VISA_AB_HIST-BBMNG = Convert to 330
*VISA_AB_HIST-BBEIN = Confirm Date from Vendor
*VISA_AB_HIST-IDTNR = Material number from Vendor
*VISA_AB_HIST-EBELN = PO Number
*VISA_AB_HIST-EBELP = PO line Number
*VISA_AB_HIST-ERDAT  = SY-DATUM.
*VISA_AB_HIST-ERZEIT = SY-UZEIT
*WA_VISA_AB_HIST-BSTMG = 412 from PO line

  if it_ab_conf[] is initial.
    return.
  endif.

  sort it_ab_conf[] by xblnr descending ebeln ascending
                       ebelp ascending docnum descending.

  "    lt_ab_conf[] = it_ab_conf[].
  loop at it_ab_conf into ls_ab_conf.
    lv_index = sy-tabix.
    if ls_ab_conf-bukrs = 'MRUA' and ls_ab_conf-ekorg = 'RU01'
       and ls_ab_conf-xblnr = '270'.
      "Invalid IDOC for Status 270 from 102000000 to CT Russia
      clear: lv_lifnr.
      select single lifnr into lv_lifnr from ekko
              where ebeln = ls_ab_conf-ebeln.
      if lv_lifnr = '0102000000'.
        wa_ab_conf = ls_ab_conf.
        wa_ab_conf-status = '30'.
        wa_ab_conf-text   = 'Ignore Status 270'.
        perform modify_line.
        delete it_ab_conf index lv_index.
      endif.
    elseif ls_ab_conf-bukrs = 'CJAL'.
      if ls_ab_conf-bstmg = ls_ab_conf-bbmng.
        lv_index1 = lv_index + 1.
        "Placed Qty in PO = confirmed Qty in IDOC
        loop at it_ab_conf into wa_ab_conf from lv_index1
                         where ebeln = ls_ab_conf-ebeln
                           and ebelp = ls_ab_conf-ebelp.
          lv_index2 = sy-tabix.
          wa_ab_conf-status = '30'.
          wa_ab_conf-text   = 'Duplicated IDOC'.
          perform modify_line.
          delete it_ab_conf index lv_index2.
        endloop.
      elseif ls_ab_conf-bbmng = 0.
        wa_ab_conf = ls_ab_conf.
        wa_ab_conf-status = '30'.
        wa_ab_conf-text   = 'Ignore IDOC with Qty 0'.
        perform modify_line.
        delete it_ab_conf index lv_index.
      else.
        "Placed Qty in PO <> confirmed Qty in IDOC. Detel lower status.
        loop at it_ab_conf into wa_ab_conf
                         where ebeln = ls_ab_conf-ebeln
                           and ebelp = ls_ab_conf-ebelp
                           and xblnr < ls_ab_conf-xblnr.
          lv_index2 = sy-tabix.
          wa_ab_conf-status = '30'.
          wa_ab_conf-text = 'Confirmation already exists with a higher status'(t02).
          perform modify_line.
          delete it_ab_conf index lv_index2.
        endloop.
      endif.
    endif.
  endloop.

endform.                    " PRE_PROCESSING
*&---------------------------------------------------------------------*
*&      Form  WAIT_TRANSACTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
form wait_transaction .
  data: lt_enq type table of seqg3,
        lv_garg type seqg3-garg,
        lv_exit type boolean.

  concatenate wa_ab_conf-mandt wa_ab_conf-ebeln into lv_garg.

  while lv_exit = ''.
    clear lt_enq[].
    call function 'ENQUEUE_READ'
       exporting
*     GCLIENT                     = SY-MANDT
*     GNAME                       = ' '
*     GARG                        = ' '
         guname                      = sy-uname
*     LOCAL                       = ' '
*     FAST                        = ' '
*     GARGNOWC                    = ' '
*   IMPORTING
*     NUMBER                      =
*     SUBRC                       =
        tables
          enq                         = lt_enq
*   EXCEPTIONS
*     COMMUNICATION_FAILURE       = 1
*     SYSTEM_FAILURE              = 2
*     OTHERS                      = 3
                .
    if sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    endif.
    read table lt_enq transporting no fields
            with key gname = 'EKKO' garg = lv_garg.
    if sy-subrc = 0.
      wait up to 3 seconds.
    else.
      lv_exit = 'X'.
    endif.
  endwhile.
endform.                    " WAIT_TRANSACTION
