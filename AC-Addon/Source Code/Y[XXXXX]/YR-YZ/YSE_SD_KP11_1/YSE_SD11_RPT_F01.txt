*&---------------------------------------------------------------------*
*&  Include           YSE_SD_KP03_RPT_DATASEL                          *
*&---------------------------------------------------------------------*
***************************************************************************
*START-OF-SELECTION.
***************************************************************************

*START-OF-SELECTION.
*&---------------------------------------------------------------------*
*&      Form  select_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SELECT_DATA.

  SELECT      ISEG~WERKS ISEG~MATNR ISEG~IBLNR ISEG~GJAHR ISEG~ZEILI ISEG~LGORT
              ISEG~ZLDAT ISEG~BUCHM ISEG~MENGE ISEG~DMBTR ISEG~WRTBM MARA~MTART
              MARA~MATKL
         INTO TABLE IT_ISEG
         FROM ISEG
         INNER JOIN
         MARA
         ON MARA~MATNR EQ ISEG~MATNR
         WHERE ISEG~WERKS IN SO_WERKS AND
               ISEG~LGORT IN SO_LGORT AND
               ISEG~ZLDAT IN SO_DATE AND
               MARA~MTART IN SO_MTART AND
               MARA~MATKL IN SO_MATKL AND
               ISEG~XNZAE EQ SPACE AND
               ISEG~XDIFF EQ 'X' AND
               ISEG~XLOEK EQ ''.

ENDFORM.                    "select_data


*&---------------------------------------------------------------------*
*&      Form  process_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*

FORM PROCESS_DATA.

  DATA: LV_COUNT TYPE I.
  DATA: LV_CORR TYPE I.
  DATA: LV_CORR_YES TYPE C.
  DATA: LV_DMBTR TYPE DIFWR.
  DATA: LV_WRTBM TYPE DIFWR.

  SORT IT_ISEG BY WERKS MATNR.
  IT_ISEG_1[] = IT_ISEG[].

  LOOP AT IT_ISEG INTO wa_iseg.
*    CLEAR WA_ISEG.
*    WA_ISEG = IT_ISEG.

    AT NEW WERKS.
      CLEAR: LV_COUNT, LV_CORR, LV_DMBTR, LV_WRTBM.
    ENDAT.

    AT NEW MATNR.
      LV_COUNT = LV_COUNT + 1.
    ENDAT.

    LV_DMBTR = LV_DMBTR + WA_ISEG-DMBTR.
    LV_WRTBM = LV_WRTBM + WA_ISEG-WRTBM.


    AT END OF MATNR.
*Check if the material has been corrected
*At least 1 difference between BUCH and MENGE must exist for this material
      CLEAR: LV_CORR_YES.
      LOOP AT IT_ISEG_1
                  WHERE WERKS EQ WA_ISEG-WERKS AND
                        MATNR EQ WA_ISEG-MATNR.
        IF IT_ISEG_1-BUCHM <> IT_ISEG_1-MENGE.
          LV_CORR_YES = 'X'.
          EXIT.
        ENDIF.
      ENDLOOP.
      IF LV_CORR_YES EQ 'X'.
        LV_CORR = LV_CORR + 1.
      ENDIF.
    ENDAT.


    AT END OF WERKS.
      CLEAR IT_OUT.
      IT_OUT-WERKS = WA_ISEG-WERKS.
      IT_OUT-MATNR_COUN = LV_COUNT.
      IT_OUT-MATNR_CORR = LV_CORR.

      IF NOT IT_OUT-MATNR_COUN IS INITIAL.
        IT_OUT-PERC_CORR = IT_OUT-MATNR_CORR / IT_OUT-MATNR_COUN * 100.
      ENDIF.

      IT_OUT-DIFF_VAL = LV_DMBTR.
      IT_OUT-BOOK_VAL = LV_WRTBM.

      IF NOT IT_OUT-BOOK_VAL IS INITIAL.
        IT_OUT-DIFF_BOOK_VAL = IT_OUT-DIFF_VAL / IT_OUT-BOOK_VAL * 100.
      ENDIF.

      APPEND IT_OUT.
      CLEAR IT_OUT.
    ENDAT.
  ENDLOOP.
ENDFORM.                    "process_data

***************************************************************************
*END-OF-SELECTION.
***************************************************************************
*END-OF-SELECTION.


*&---------------------------------------------------------------------*
*&      Form  fill_gac_pgc_table
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*form fill_gac_pgc_table .
*
** Select all level 2 hierarchy codes from the prodh table
*  SELECT *
*         FROM t179
*         INTO TABLE it_t179
*        WHERE stufe = '2'.
*
** Default fields in range
*  r_prdha-sign   = 'I'.
*  r_prdha-option = 'EQ'.
*
*** Loop over hierarchy codes where the first 4 char's fit in S_GAC
**  IF NOT so_gac IS INITIAL.
**    LOOP AT it_t179 INTO wa_t179 WHERE prodh(4) IN so_gac.
**      r_prdha-low = wa_t179-prodh.
**      APPEND r_prdha.
**    ENDLOOP.
**  ENDIF.
*
** Loop over hierarchy codes where the second 4 char's fit in S_PGC
*  IF NOT so_pgc IS INITIAL.
*    LOOP AT it_t179 INTO wa_t179 WHERE prodh+4(4) IN so_pgc.
*      r_prdha-low = wa_t179-prodh.
*      APPEND r_prdha.
*    ENDLOOP.
*  ENDIF.
*
*endform.                    " fill_gac_pgc_table
*&---------------------------------------------------------------------*
*&      Form  add_days
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_DATE  text
*      -->P_LV_DAYS  text
*      <--P_LV_DATE_ADD  text
*----------------------------------------------------------------------*
FORM ADD_DAYS  USING    P_LV_DATE
                        P_LV_DAYS
                        P_LV_FABKL
               CHANGING P_LV_DATE_ADD.

  CALL FUNCTION 'WDKAL_DATE_ADD_FKDAYS'
    EXPORTING
      I_DATE        = P_LV_DATE
      I_FKDAY       = P_LV_DAYS
      I_FABKL       = P_LV_FABKL
   IMPORTING
     E_DATE        = P_LV_DATE_ADD
*         E_FKDAY       =
   EXCEPTIONS
     ERROR         = 1
     OTHERS        = 2
            .
  IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                    " add_days
*&---------------------------------------------------------------------*
*&      Form  check_authorisation
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_authorisation .
  DATA: t_t001w LIKE STANDARD TABLE OF t001w WITH HEADER LINE.

  SELECT *
  FROM t001w
  INTO TABLE t_t001w WHERE werks IN so_werks.

  LOOP AT t_t001w.
    AUTHORITY-CHECK OBJECT 'M_MATE_WRK'
             ID 'ACTVT' DUMMY
             ID 'WERKS' FIELD t_t001w-werks.
    IF sy-subrc = 4.
*   No authorisation to display data from Sales Organisation p_vkorg
      MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '010' WITH t_t001w-werks.
      EXIT.
    ELSEIF sy-subrc <> 0.
*   Error checking authorization.
      MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '004'.
      EXIT.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " check_authorisation
