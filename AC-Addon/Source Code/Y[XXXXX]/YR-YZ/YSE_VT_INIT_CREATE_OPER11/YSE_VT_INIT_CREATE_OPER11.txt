**------------------------------------------------------------------*
** Program ID          : YSE_VT_INIT_CREATE_OPER11
** Program Title       : VisiTour: Initial load
** Author              : Marc Jacobs
** Date                : 01.09.2009
** Change Request      : CD1K950108
** Description         : CR0969: Initial load programs
**==================================================================*
** Change History Log
**------------------------------------------------------------------*
**Mod. no.|  Date    | Name      | Corr. Nr   | Change
**------------------------------------------------------------------*
**MOD-001 |02/02/2010|M.Jacobs   | CD1K954248 | Bugfix
**
**------------------------------------------------------------------*
REPORT yse_vt_init_create_oper11.

TABLES: viauf_afvc.

CONSTANTS : c_stat_cnf(5) TYPE c VALUE 'I0009'.

DATA:
  gt_viauf_afvc TYPE STANDARD TABLE OF viauf_afvc,
  gv_flag,
  gv_lin TYPE i,
  wa_viauf_afvc LIKE LINE OF gt_viauf_afvc.

DATA  t_estpmco   LIKE pmco     OCCURS 0 WITH HEADER LINE.

DATA: BEGIN OF gt_output OCCURS 0,
        aufnr TYPE aufnr,
        vornr TYPE vornr,
      END OF gt_output.

DATA: BEGIN OF gt_aufnr OCCURS 0,
        aufnr TYPE aufnr,
        equnr TYPE equnr,
      END OF gt_aufnr.

DATA: gt_basic_data TYPE cuvtab OCCURS 0  WITH HEADER LINE,
      gt_value_n    TYPE cuvtab_valn OCCURS 0  WITH HEADER LINE,
      gt_value_c    TYPE cuvtab_valc OCCURS 0  WITH HEADER LINE.
DATA: gt_config     TYPE conf_out OCCURS 0 WITH HEADER LINE.

CONSTANTS :  c_blank(1)       VALUE ' ',
             c_z000001(7)     VALUE 'Z000001',
             c_operdesc(40)   VALUE 'Transport',
             c_zc04(4)        VALUE 'ZCO4',
             c_zam025(6)      VALUE 'ZAM025',
             c_002(3)         VALUE '002',
             c_0010(4)        VALUE '0010'.

DATA: lt_methods   LIKE bapi_alm_order_method OCCURS 0 WITH HEADER LINE,
      lt_component LIKE bapi_alm_order_component OCCURS 0 WITH HEADER LINE,
      lt_operation LIKE bapi_alm_order_operation OCCURS 0 WITH HEADER LINE,
      lt_operation_up LIKE bapi_alm_order_operation_up OCCURS 0 WITH HEADER LINE.
DATA: lt_return TYPE STANDARD TABLE OF bapiret2,
      ls_return LIKE bapiret2.

DATA: BEGIN OF i_operations OCCURS 100.
        INCLUDE STRUCTURE bapi_alm_order_operation_e.
DATA: END OF i_operations.

DATA: rspar_tab  TYPE TABLE OF rsparams,
      rspar_line TYPE          rsparams.

DATA : lt_msg TYPE bal_t_msg .
DATA :  lv_update(1)     TYPE c,
        lv_count         TYPE sy-tabix,
        gv_aufnr         TYPE aufnr,
        gv_oper          TYPE vornr,
        gv_aufpl         LIKE afko-aufpl,
        gv_afvgd_old     TYPE afvgd,
        gv_afvgd_new     TYPE afvgd,
        gv_extid         TYPE yextid,
        gv_new_oper(4)   TYPE c,
        gv_hrs           TYPE arbeit,
        gv_duration      TYPE arbeit,
        gv_arbei(8)      TYPE c,
        gv_vtid(9)       TYPE c,
        gc_z_vc_table    TYPE vtnam   VALUE 'Z_VC_TABLE',
        gc_country(20)   TYPE c       VALUE 'CH_EQUIPMENT_COUNTRY',
        gc_exlab(17)     TYPE c       VALUE 'CH_TL_EXTRALABOUR',
        gv_atinn_country TYPE atinn,
        gv_atinn_exlab   TYPE atinn,
        gv_bukrs         TYPE bukrs,
        gv_atwrt         LIKE ausp-atwrt,
        gv_cuobj         LIKE equi-cuobj,
        gv_objnr         LIKE jest-objnr,
        wa_jest          TYPE jest,
        gv_new_operi     TYPE i,
        ls_yse_vt_call_flds  TYPE yse_vt_call_flds.

PARAMETERS:
  p_iwerk TYPE iwerk OBLIGATORY,
  p_plgrp LIKE viauf_afvc-ingpr OBLIGATORY.
SELECT-OPTIONS:
  s_aufnr  FOR viauf_afvc-aufnr.
* begin of insertion MOD-001
PARAMETER : p_nec TYPE c AS CHECKBOX.
* end of insertion MOD-001
*-------------------------------------------------------------------*
START-OF-SELECTION.

  REFRESH: gt_aufnr.

  SELECT aufnr equnr INTO TABLE gt_aufnr FROM afih
    WHERE aufnr IN s_aufnr
                AND ingpr EQ p_plgrp
                AND iwerk EQ p_iwerk.

  IF gt_aufnr[] IS INITIAL.
    MESSAGE e001(00) WITH 'No orderdata selected'.
    EXIT.
  ENDIF.

  SELECT SINGLE bukrs INTO gv_bukrs  FROM t001k
   WHERE bwkey = p_iwerk.

  SELECT SINGLE atinn INTO gv_atinn_exlab
    FROM cabn
    WHERE atnam = gc_exlab.

  SELECT SINGLE atinn INTO gv_atinn_country
      FROM cabn
      WHERE atnam = gc_country.

* preselect variant table for central task lists
  CALL FUNCTION 'CUTX_INIT_STRUC_ENTRY_PLANNING'
    EXPORTING
      var_tab          = gc_z_vc_table
    TABLES
      et_basic_data    = gt_basic_data
      et_table_value_n = gt_value_n
      et_table_value_c = gt_value_c
    EXCEPTIONS
      table_not_found  = 1
      OTHERS           = 2.

  REFRESH gt_output.

  LOOP AT gt_aufnr.

    CONCATENATE 'OR' gt_aufnr-aufnr INTO gv_objnr.

* status may not be CNF (see remark in CR0969)
    SELECT SINGLE * INTO wa_jest FROM jest
      WHERE objnr = gv_objnr
        AND stat = c_stat_cnf
        AND inact = ' '.

    IF NOT sy-subrc = 0.
* extra line already created for this order ? (and send to visitour(new oper) ?
* to prevent orders being send more then once
* begin of insertion MOD-001
* force sy-subrc <> 0
      IF p_nec = 'X'.
        WRITE gt_aufnr-aufnr TO gv_aufnr NO-ZERO.
        CONCATENATE gv_aufnr '/%' INTO gv_extid.
        SELECT SINGLE * INTO ls_yse_vt_call_flds
           FROM yse_vt_call_flds
           WHERE extid EQ gv_extid.
      ELSE.
* end of insertion MOD-001
        WRITE gt_aufnr-aufnr TO gv_aufnr NO-ZERO.
        CONCATENATE gv_aufnr '/%' INTO gv_extid.
        SELECT SINGLE * INTO ls_yse_vt_call_flds
           FROM yse_vt_call_flds
           WHERE extid LIKE gv_extid.
* begin of insertion MOD-001
      ENDIF.
* end of insertion MOD-001
      IF sy-subrc <> 0.

        REFRESH gt_viauf_afvc.
        SELECT * INTO TABLE gt_viauf_afvc
           FROM viauf_afvc
           WHERE aufnr EQ gt_aufnr-aufnr.

        LOOP AT gt_viauf_afvc INTO wa_viauf_afvc WHERE steus = 'ZCO3'
                                                   AND iphas < '3'
                                                   AND vornr = '0010'.
          CLEAR gv_flag.
*  WA_VIAUF_AFVC-aufnr en WA_VIAUF_AFVC-vornr
          gv_aufnr = wa_viauf_afvc-aufnr.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input  = gv_aufnr
            IMPORTING
              output = gv_aufnr.

          REFRESH rspar_tab.

          rspar_line-selname = 'S_AUFNR'.
          rspar_line-kind    = 'S'.
          rspar_line-sign    = 'I'.
          rspar_line-option  = 'EQ'.
          rspar_line-low     = gv_aufnr.
          APPEND rspar_line TO rspar_tab.

          SUBMIT yse_vt_init_create_oper11_sub
                  WITH p_iwerk = p_iwerk
                  WITH p_plgrp = p_plgrp
* begin of insertion MOD-001
                  WITH p_nec = p_nec
* end of insertion MOD-001
                  WITH SELECTION-TABLE rspar_tab
                  AND RETURN.
          IF sy-subrc = 0.
            MOVE wa_viauf_afvc-aufnr TO gt_output-aufnr.
            MOVE wa_viauf_afvc-vornr TO gt_output-vornr.
            APPEND gt_output.
            CLEAR gt_output.
          ENDIF.
        ENDLOOP.
      ENDIF.

    ENDIF.

  ENDLOOP.
*-------------------------------------------------------------------*
END-OF-SELECTION.

  DESCRIBE TABLE gt_output LINES gv_lin.

  WRITE: text-001, gv_lin.

  CHECK gv_lin > 0.

  SKIP 2.

  LOOP AT gt_output.
    WRITE: /2 gt_output-aufnr,
              gt_output-vornr.
  ENDLOOP.

*Text symbol text£º

*001:Number of orders updated :
*Selection text£º
*P_IWERK:D       .
*P_NEC:        No extra check if order in VT
*P_PLGRP:        Planner group
*S_AUFNR:D       .
