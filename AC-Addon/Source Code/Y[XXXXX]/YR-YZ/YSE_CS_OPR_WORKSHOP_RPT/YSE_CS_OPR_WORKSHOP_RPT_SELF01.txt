
*----------------------------------------------------------------------*
***INCLUDE YSE_CS_OPR_WORKSHOP_RPT_SELF01 .
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  select_detail_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM select_detail_data.

  DATA: BEGIN OF lt_rel OCCURS 10,
          objnr TYPE j_objnr,
          chgnr TYPE j_chgnr,
          udate TYPE cddatum,
        END OF lt_rel.

  DATA: BEGIN OF lt_qm OCCURS 10,
          qmnum TYPE qmnum,
          erdat TYPE erdat,
          vbeln TYPE kdauf,
        END OF lt_qm.

  DATA: BEGIN OF lt_end OCCURS 10,
          objnr TYPE j_objnr,
          parvw TYPE parvw,
          parnr TYPE i_parnr,
        END OF lt_end.

  DATA: BEGIN OF lt_contractor OCCURS 10,
          objnr TYPE j_objnr,
          parvw TYPE parvw,
          parnr TYPE i_parnr,
        END OF lt_contractor.


  DATA: BEGIN OF lt_equi OCCURS 0,
          equnr TYPE equnr,
          sernr TYPE gernr,
        END OF lt_equi.

  DATA: BEGIN OF lt_vb OCCURS 10,
          vbelv TYPE vbeln_von,
          vbeln TYPE vbeln_nach,
          wadat_ist TYPE wadat_ist,
        END OF lt_vb.

  DATA: BEGIN OF lt_inv OCCURS 10,
          vbelv TYPE vbeln_von,
          vbeln TYPE vbeln_nach,
          fkdat TYPE fkdat,
        END OF lt_inv.

  DATA: BEGIN OF lt_oper OCCURS 10,
          aufpl TYPE co_aufpl,
          vornr TYPE vornr,
          steus TYPE steus,
          arbei TYPE arbeit,
          arbeh TYPE arbeite,
          mseh3 TYPE mseh3,
          larnt type lstar,
        END OF lt_oper.

  DATA: BEGIN OF lt_wrkcntr_descr OCCURS 0,
          objid TYPE objid,
          objty TYPE objty,
          ktext TYPE cr_ktext,
        END OF lt_wrkcntr_descr.

  DATA: BEGIN OF lt_comp OCCURS 0,
          rsnum TYPE rsnum,
          objnr TYPE j_objnr,
          matnr TYPE matnr,
          maktx TYPE maktx,
* begin of insert MOD-001
          bdmng type bdmng,
          bwart type bwart,
* end of insert MOD-001
        END OF lt_comp.

* begin of insert MOD-001
  DATA: BEGIN OF lt_aufm OCCURS 0,
          aufnr type aufnr,
          matnr type matnr,
          mblnr TYPE mblnr,
          mjahr TYPE mjahr,
          zeile TYPE mblpo,
          maktx TYPE maktx,
          menge type menge_d,
          bwart type bwart,
        END OF lt_aufm.
* end of insert MOD-001

  DATA: BEGIN OF lt_customer OCCURS 0,
          kunnr TYPE kunnr,
          name1 TYPE name1_gp,
        END OF lt_customer.

  DATA: BEGIN OF lt_cust_contr OCCURS 0,
          kunnr TYPE kunnr,
          name1 TYPE name1_gp,
        END OF lt_cust_contr.



  DATA: lt_comp_stat TYPE STANDARD TABLE OF jest.

  DATA: lv_ratio type F.

  FIELD-SYMBOLS: <fs_rel> LIKE LINE OF lt_rel,
                 <fs_qm> LIKE LINE OF lt_qm,
                 <fs_end> LIKE LINE OF lt_end,
                 <fs_contractor> LIKE LINE OF lt_end,
                 <fs_equi> LIKE LINE OF lt_equi,
                 <fs_vb> LIKE LINE OF lt_vb,
                 <fs_inv> LIKE LINE OF lt_inv,
                 <fs_oper> LIKE LINE OF lt_oper,
                 <fs_wrkcntr_descr> LIKE LINE OF lt_wrkcntr_descr,
                 <fs_comp> LIKE LINE OF lt_comp,
* begin of insert MOD-001
                 <fs_aufm> LIKE LINE OF lt_aufm,
* end of insert MOD-001
                 <fs_comp_stat> TYPE jest,
                 <fs_cust> LIKE LINE OF lt_customer,
                 <fs_cust_contr> LIKE LINE OF lt_cust_contr,
                 <fs_equ_des> LIKE LINE OF itt_equz.


  if gv_subrc eq 4.
    exit.
  endif.

  IF NOT p_rep_st IS INITIAL.
*Get service order components
    SELECT resb~rsnum resb~objnr resb~matnr
           makt~maktx
* begin of insert MOD-001
           resb~bdmng resb~bwart
* end of insert MOD-001
         FROM resb left JOIN makt
         ON makt~matnr = resb~matnr and
            makt~spras = sy-langu
         INTO TABLE lt_comp
         FOR ALL ENTRIES IN gt_main
         WHERE resb~rsnum = gt_main-rsnum.

*Get statusses of components
    SELECT * FROM jest
      INTO TABLE lt_comp_stat
      FOR ALL ENTRIES IN lt_comp
      WHERE objnr = lt_comp-objnr.

    SORT lt_comp_stat BY objnr.

*Remove components that have been deleted
    LOOP AT lt_comp ASSIGNING <fs_comp>.
      READ TABLE lt_comp_stat
        ASSIGNING <fs_comp_stat>
          WITH KEY objnr = <fs_comp>-objnr
               stat = 'I0013'
               inact = ' '.
      IF sy-subrc = 0.
        DELETE lt_comp
          WHERE objnr = <fs_comp>-objnr.
      ENDIF.
    ENDLOOP.

*Get release date for all service order numbers
    SELECT objnr chgnr udate FROM jcds
                         INTO TABLE lt_rel
                          FOR ALL ENTRIES IN gt_main
                        WHERE objnr = gt_main-objnr
                          AND inact NE 'X'
                          AND stat = 'I0002'.

    SORT lt_rel BY objnr chgnr DESCENDING.
    DELETE ADJACENT DUPLICATES FROM lt_rel COMPARING objnr.    "delete all but last duplicates

* begin of insert MOD-001
*Get the returned goods per service order
    SELECT aufm~mblnr aufm~mjahr aufm~matnr aufm~zeile
           makt~maktx aufm~aufnr aufm~menge aufm~bwart
         FROM aufm left JOIN makt
         ON makt~matnr = aufm~matnr and
            makt~spras = sy-langu
         INTO corresponding fields of TABLE lt_aufm
         FOR ALL ENTRIES IN gt_main
         WHERE aufm~aufnr = gt_main-aufnr
           and aufm~bwart = '262'.
* end of insert MOD-001

*Get notification creation date and sales order
    SELECT qmnum erdat vbeln
      FROM qmel INTO TABLE lt_qm
        FOR ALL ENTRIES IN gt_main
        WHERE qmnum EQ gt_main-qmnum.

    SORT lt_qm BY qmnum.

*Get the GI creation date from sales order document flow delivery
    SELECT vbfa~vbelv vbfa~vbeln
           likp~wadat_ist
      FROM vbfa INNER JOIN likp
      ON vbfa~vbeln = likp~vbeln
      INTO TABLE lt_vb
      FOR ALL ENTRIES IN gt_main
      WHERE vbfa~vbelv = gt_main-kdauf   "Sales order from notification
      AND vbfa~vbtyp_n = 'J'             "Delivery
* begin of change MOD-001
*     AND vbfa~bwart   = '601'.          "GI
      AND vbfa~bwart   = '261'.          "GI
* end of change MOD-001

    SORT lt_vb BY vbelv.

*Get the invoice date from sales order document flow invoice
    SELECT vbfa~vbelv vbfa~vbeln
           vbrk~fkdat
      FROM vbfa INNER JOIN vbrk
      ON vbfa~vbeln = vbrk~vbeln
      INTO TABLE lt_inv
      FOR ALL ENTRIES IN gt_main
      WHERE vbfa~vbelv = gt_main-kdauf   "Sales order from notification
      AND vbfa~vbtyp_n = 'M'.             "Invoice

    SORT lt_inv BY vbelv.




  ENDIF.


*Get end customers for all aufnr
    SELECT objnr parvw parnr
      FROM ihpa INTO TABLE lt_end
      FOR ALL ENTRIES IN gt_main
      WHERE objnr EQ gt_main-objnr
      AND parvw EQ 'ZE'.

    SORT lt_end BY objnr.

*Get contractors for all aufnr
    SELECT objnr parvw parnr
      FROM ihpa INTO TABLE lt_contractor
      FOR ALL ENTRIES IN gt_main
      WHERE objnr EQ gt_main-objnr
      AND parvw EQ 'ZS'.

    SORT lt_contractor BY objnr.




*Get operations for current aufnr
  SELECT afvc~aufpl afvc~vornr afvc~steus
         afvv~arbei afvv~arbeh
         t006a~mseh3 afvc~larnt
       FROM afvc INNER JOIN afvv
       ON afvc~aufpl = afvv~aufpl
       AND   afvc~aplzl = afvv~aplzl
       INNER JOIN t006a
       ON afvv~arbeh = t006a~msehi
       INTO TABLE lt_oper
       FOR ALL ENTRIES IN gt_main
       WHERE afvc~aufpl = gt_main-aufpl
*       and afvc~vornr = '0010'
       AND t006a~spras = sy-langu.


  SORT lt_oper BY aufpl.

*Get workcenter descriptions
  SELECT objid objty ktext
    FROM crtx
    INTO TABLE lt_wrkcntr_descr
    FOR ALL ENTRIES IN gt_main
    WHERE objty = 'A'
    AND objid = gt_main-arbid
    AND spras = sy-langu.

  SORT lt_wrkcntr_descr BY objid.

*****
*loop
*    READ TABLE gt_main assigning <fs_main>
*    WITH KEY kunnum = it_customer-kunnr.
*    IF sy-subrc EQ 0.
*      gt_main-cust_name = it_customer-name1.
*    endif.
*
*    READ TABLE gt_main WITH KEY objnr = lt_end-objnr
*    if sy-subrc EQ 0.
*      gt_main-end EQ lt_end-parnr.
*      gt_main-end_name EQ lt_customer-name1.
*    endif.


******

*Get customer details
  SELECT kunnr name1
    FROM kna1
    INTO TABLE lt_customer
    FOR ALL ENTRIES IN gt_main
    WHERE kunnr = gt_main-kunum.
*Get end customer details
  SELECT kunnr name1
    FROM kna1
    APPENDING TABLE lt_customer
    FOR ALL ENTRIES IN gt_main
    WHERE kunnr = gt_main-end.
*Get contractor details
  SELECT kunnr name1
    FROM kna1
    APPENDING TABLE lt_customer
    FOR ALL ENTRIES IN gt_main
    WHERE kunnr = gt_main-subc_nr.



  DELETE ADJACENT DUPLICATES FROM lt_customer.

  SORT lt_customer BY kunnr.
*Now loop over all the main aufnr and update the detail fields


  LOOP AT gt_main ASSIGNING <fs_main>.
    AT NEW aufnr.
**Get planned time of repair from operations with control key ZC03
      IF NOT <fs_main>-aufpl IS INITIAL.
        LOOP AT lt_oper ASSIGNING <fs_oper>
          WHERE aufpl = <fs_main>-aufpl.
*            and steus = 'ZCO3'.
*      read table lt_oper
*        with key aufpl = <fs_main>-aufpl
*        binary search
*        assigning <fs_oper>.
*      if sy-subrc eq 0.
          IF <fs_oper>-steus = 'ZCO3'.
            ADD <fs_oper>-arbei TO <fs_main>-arbei.
            MOVE <fs_oper>-mseh3 TO <fs_main>-mseh3.
*          ELSEIF <fs_oper>-mseh3 = 'KMT' OR <fs_oper>-mseh3 = 'MIL'.
* begin of change MOD-001
*         elseif <fs_oper>-larnt eq 'ZAM010'.  "mileage
          elseif <fs_oper>-larnt eq 'ZAM049'.  "mileage
* end of change MOD-001
*Mileage
            ADD <fs_oper>-arbei TO <fs_main>-dist.
            MOVE  <fs_oper>-mseh3 TO <fs_main>-mseh_dist.
* begin of change MOD-001
*         elseif <fs_oper>-larnt eq 'ZAM019'.  "subcontractor
          elseif <fs_oper>-larnt eq 'ZAM052'.  "subcontractor
* end of change MOD-001
*Subcontracting
            ADD <fs_oper>-arbei TO <fs_main>-subc_costs.
            MOVE  <fs_oper>-mseh3 TO <fs_main>-mseh_subc.
* begin of insert MOD-001
          elseif <fs_oper>-larnt eq 'ZAM050'.  "add.expenses
*Add. expenses
            ADD <fs_oper>-arbei TO <fs_main>-add_exp.
            MOVE  <fs_oper>-mseh3 TO <fs_main>-mseh_add_exp.
* end of insert MOD-001
          ENDIF.

        ENDLOOP.
*      endif.
      ENDIF.
*Get total of actual times (confirmations)
      LOOP AT gt_afru ASSIGNING <fs_afru>
        WHERE aufnr EQ <fs_main>-aufnr.
        IF <fs_afru>-ismne = 'STD'.
          ADD <fs_afru>-ismnw TO <fs_main>-total_ismnw.
        ENDIF.
      ENDLOOP.
    ENDAT.
*End at.
**------------------------------------------------------------------*
*Get customer name
    READ TABLE lt_customer
      ASSIGNING <fs_cust>
      WITH KEY kunnr = <fs_main>-kunum.
    IF sy-subrc EQ 0.
      MOVE <fs_cust>-name1 TO <fs_main>-cust_name.
    ENDIF.
*******copy end customer
    IF NOT <fs_main>-objnr IS INITIAL.
      READ TABLE lt_end
        WITH KEY objnr = <fs_main>-objnr
        BINARY SEARCH
        ASSIGNING <fs_end>.
      IF sy-subrc EQ 0.
        MOVE: <fs_end>-parnr TO <fs_main>-end.
      ENDIF.
*******copy subcontractor customer
      READ TABLE lt_contractor
        WITH KEY objnr = <fs_main>-objnr
        BINARY SEARCH
        ASSIGNING <fs_contractor>.
      IF sy-subrc EQ 0.
        MOVE: <fs_contractor>-parnr TO <fs_main>-subc_nr.
      ENDIF.



    ENDIF.

*Get end customer name
    READ TABLE lt_customer
      ASSIGNING <fs_cust>
      WITH KEY kunnr = <fs_main>-end.
    IF sy-subrc EQ 0.
      MOVE <fs_cust>-name1 TO <fs_main>-end_name.
    ENDIF.

*Get contractor name
    READ TABLE lt_customer
      ASSIGNING <fs_cust>
      WITH KEY kunnr = <fs_main>-subc_nr.
    IF sy-subrc EQ 0.
      MOVE <fs_cust>-name1 TO <fs_main>-subc_name.
    ENDIF.

*Get Equipment description and Equipment Const Type
    READ TABLE itt_equz
      WITH KEY equnr = <fs_main>-equnr
      BINARY SEARCH
      ASSIGNING <fs_equ_des>.
    IF sy-subrc EQ 0.
      MOVE  <fs_equ_des>-eqktx TO <fs_main>-eqktx.
      MOVE  <fs_equ_des>-submt TO <fs_main>-submt.

    ENDIF.



*****
**************************************************************************
*Update rel date in gt_main
    IF NOT <fs_main>-objnr IS INITIAL.
      READ TABLE lt_rel
        WITH KEY objnr = <fs_main>-objnr
        BINARY SEARCH
        ASSIGNING <fs_rel>.
      IF sy-subrc EQ 0.
        MOVE: <fs_rel>-udate TO <fs_main>-idat1.
      ENDIF.
    ENDIF.

*Update notif crea date in gt_main
    IF NOT <fs_main>-qmnum IS INITIAL.
      READ TABLE lt_qm
        WITH KEY qmnum = <fs_main>-qmnum
        BINARY SEARCH
        ASSIGNING <fs_qm>.
      IF sy-subrc EQ 0.
        MOVE: <fs_qm>-erdat TO <fs_main>-erdat_qm.
*              <fs_qm>-vbeln to <fs_main>-kdauf.
      ENDIF.
    ENDIF.

*Copy GI date
    IF NOT <fs_main>-kdauf IS INITIAL.
      READ TABLE lt_vb
        WITH KEY vbelv = <fs_main>-kdauf
        BINARY SEARCH
        ASSIGNING <fs_vb>.
      IF sy-subrc EQ 0.
        MOVE: <fs_vb>-wadat_ist TO <fs_main>-wadat_ist.
      ENDIF.
    ENDIF.
*Copy invoice date
    IF NOT <fs_main>-kdauf IS INITIAL.
      READ TABLE lt_inv
        WITH KEY vbelv = <fs_main>-kdauf
        BINARY SEARCH
        ASSIGNING <fs_inv>.
      IF sy-subrc EQ 0.
        MOVE: <fs_inv>-fkdat TO <fs_main>-fkdat.
      ENDIF.
    ENDIF.




*Copy wrkcntr descr
    IF NOT <fs_main>-arbid IS INITIAL.
      READ TABLE lt_wrkcntr_descr
        WITH KEY objid = <fs_main>-arbid
        BINARY SEARCH
        ASSIGNING <fs_wrkcntr_descr>.
      IF sy-subrc EQ 0.
        MOVE <fs_wrkcntr_descr>-ktext TO <fs_main>-ktext.
      ENDIF.
    ENDIF.
*If service variant report, calculate ratio and delta
    IF NOT p_ser_vr IS INITIAL.
      "Ratio
      IF <fs_main>-arbei = 0 AND <fs_main>-total_ismnw = 0.
        <fs_main>-ratio = 0.
      ELSEIF <fs_main>-arbei = 0.
        <fs_main>-ratio = 100.
      ELSEIF <fs_main>-total_ismnw = 0.
        <fs_main>-ratio = -100.
      ELSE.
*      <fs_main>-ratio = ( ( 1 - ( <fs_main>-total_ismnw / <fs_main>-arbei ) ) * -1 ) * 100.
*** lv_ratio (type i)      <fs_main>-ratio =  1 - ( <fs_main>-total_ismnw / <fs_main>-arbei ).
       lv_ratio =  ( <fs_main>-total_ismnw / <fs_main>-arbei ).
        IF lv_ratio GT -10 AND lv_ratio LT 10.
           lv_ratio = lv_ratio * 100.
           <fs_main>-ratio = lv_ratio.
        ELSE.
            lv_ratio = 999.
            <fs_main>-ratio = lv_ratio.
        ENDIF.
      ENDIF.

      "Delta
      <fs_main>-delta = <fs_main>-total_ismnw - <fs_main>-arbei.
    ENDIF.
  ENDLOOP.



*Add components to main table
  DATA: ls_append_comp TYPE ty_main.



  LOOP AT lt_comp ASSIGNING <fs_comp>.
    READ TABLE gt_main
      ASSIGNING <fs_main>
      WITH KEY rsnum = <fs_comp>-rsnum
           matnr = ' '.
    IF sy-subrc EQ 0.
      MOVE: <fs_comp>-matnr TO <fs_main>-matnr,
            <fs_comp>-maktx TO <fs_main>-maktx.
* begin of insert MOD-001
      MOVE: <fs_comp>-bdmng TO <fs_main>-bdmng,
            <fs_comp>-bwart TO <fs_main>-bwart.
* end of insert MOD-001
    ELSE.
      READ TABLE gt_main
          ASSIGNING <fs_main>
          WITH KEY rsnum = <fs_comp>-rsnum.
      IF sy-subrc NE 0.
        MESSAGE s000.
        gv_subrc = 4.
        EXIT.
      ELSE.
        MOVE: <fs_main>-aufnr TO ls_append_comp-aufnr,
              <fs_comp>-matnr TO ls_append_comp-matnr,
              <fs_comp>-maktx TO ls_append_comp-maktx.
* begin of insert MOD-001
        MOVE: <fs_comp>-bdmng TO ls_append_comp-bdmng,
              <fs_comp>-bwart TO ls_append_comp-bwart.
* end of insert MOD-001
        APPEND ls_append_comp TO gt_main.
      endif.
    ENDIF.
  ENDLOOP.

* begin of insert MOD-001
*Add returned goods to main table
  DATA: ls_append_aufm TYPE ty_main.

  LOOP AT lt_aufm ASSIGNING <fs_aufm>.
    READ TABLE gt_main
      ASSIGNING <fs_main>
      WITH KEY aufnr = <fs_aufm>-aufnr
           matnr = ' '.
    IF sy-subrc EQ 0.
      MOVE: <fs_aufm>-matnr TO <fs_main>-matnr,
            <fs_aufm>-maktx TO <fs_main>-maktx.
      MOVE: <fs_aufm>-menge TO <fs_main>-bdmng,
            <fs_aufm>-bwart TO <fs_main>-bwart.
    ELSE.
      READ TABLE gt_main
          ASSIGNING <fs_main>
          WITH KEY aufnr = <fs_aufm>-aufnr.
      IF sy-subrc NE 0.
        MESSAGE s000.
        gv_subrc = 4.
        EXIT.
      ELSE.
        MOVE: <fs_main>-aufnr TO ls_append_aufm-aufnr,
              <fs_aufm>-matnr TO ls_append_aufm-matnr,
              <fs_aufm>-maktx TO ls_append_aufm-maktx.
        MOVE: <fs_aufm>-menge TO ls_append_aufm-bdmng,
              <fs_aufm>-bwart TO ls_append_aufm-bwart.
        APPEND ls_append_aufm TO gt_main.
      endif.
    ENDIF.
  ENDLOOP.
* end of insert MOD-001

ENDFORM.                    " select_detail_data


*&---------------------------------------------------------------------*
*&      Form  FILL_GAC_PGC_TABLE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM fill_gac_pgc_table.

* Select all level 2 hierarchy codes from the prodh table
  SELECT *
         FROM t179
         INTO TABLE it_t179
        WHERE stufe = '2'.

* Default fields in range
  r_prdha-sign   = 'I'.
  r_prdha-option = 'EQ'.

* Loop over hierarchy codes where the first 4 char's fit in S_GAC
  IF NOT so_gac IS INITIAL.
    LOOP AT it_t179 INTO wa_t179 WHERE prodh(4) IN so_gac.
      r_prdha-low = wa_t179-prodh.
      APPEND r_prdha.
    ENDLOOP.
  ENDIF.

* Loop over hierarchy codes where the second 4 char's fit in S_PGC
  IF NOT so_pgc IS INITIAL.
    LOOP AT it_t179 INTO wa_t179 WHERE prodh+4(4) IN so_pgc.
      r_prdha-low = wa_t179-prodh.
      APPEND r_prdha.
    ENDLOOP.
  ENDIF.

ENDFORM.                    " FILL_GAC_PGC_TABLE




************************************************************************
**  Form LOAD_PGC_GAC                                                  *
************************************************************************
*FORM load_pgc_gac.
*
*  DESCRIBE TABLE R_PRDHA LINES lv_lines.
*  IF lv_lines > 0.
*
**   Fill table with PGC codes from it_eq
*    SORT R_PRDHA BY prodh.
*    LOOP AT R_PRDHA.
*      IF R_PRDHA-prodh <> it_pgc-pgc.
*        it_pgc-pgc = R_PRDHA-prodh.
*        APPEND it_pgc.
*      ENDIF.
*    ENDLOOP.
*
**   Get the corresponding GAC codes for the PGC codes
*    CALL FUNCTION 'YSE_CONVERT_PGC_GAC'
*      TABLES
*        it_pgc_gac = it_pgc.
*    SORT it_pgc BY pgc.
*  ENDIF.

*ENDFORM.    " load_pgc_gac
