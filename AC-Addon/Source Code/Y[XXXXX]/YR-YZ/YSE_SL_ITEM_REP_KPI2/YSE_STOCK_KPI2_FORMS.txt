*&---------------------------------------------------------------------*
*&  Include           YSE_STOCK_ITEM_FORMS_V2
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&  Include           YSE_STOCK_ITEM_FORMS                             *
*&---------------------------------------------------------------------*
* MOD-004|20160704|Anda Wu         |CD1K989216|    CR3998              *
*       Bugfix: Report changes after flow adjustment in CR3832         *
************************************************************************

*&---------------------------------------------------------------------*
*&      Form  FILL_GAC_PGC_TABLE
*&---------------------------------------------------------------------*
FORM fill_gac_pgc_table.

* Select all level 2 hierarchy codes from the prodh table
  SELECT *
         FROM t179
         INTO TABLE it_t179
        WHERE stufe = '2'.

ENDFORM.                    "fill_gac_pgc_table

*&---------------------------------------------------------------------*
*&      Form  CHECK_GAC_PGC
*&---------------------------------------------------------------------*
FORM  check_gac_pgc.

* Default fields in range
  r_prdha-sign   = 'I'.
  r_prdha-option = 'EQ'.

* Loop over hierarchy codes where the first 4 char's fit in S_GAC
  CLEAR wa_t179-prodh.
  IF NOT s_gac IS INITIAL.
    LOOP AT it_t179 INTO wa_t179 WHERE prodh(4) IN s_gac.
      r_prdha-low = wa_t179-prodh.
      APPEND r_prdha.
    ENDLOOP.
* Show message if s_gac is a non existing gac and therefore no selection is made
    IF wa_t179-prodh IS INITIAL.
      MESSAGE e043.
    ENDIF.
  ENDIF.

* Loop over hierarchy codes where the second 4 char's fit in S_PGC
  CLEAR wa_t179-prodh.
  IF NOT s_pgc IS INITIAL.
    LOOP AT it_t179 INTO wa_t179 WHERE prodh+4(4) IN s_pgc.
      r_prdha-low = wa_t179-prodh.
      APPEND r_prdha.
    ENDLOOP.
* Show message if s_pgc is a non existing gac and therefore no selection is made
    IF wa_t179-prodh IS INITIAL.
      MESSAGE e044.
    ENDIF.
  ENDIF.

ENDFORM.                    "CHECK_GAC_PGC

*&---------------------------------------------------------------------*
*&      Form  get_material_stock
*&---------------------------------------------------------------------*
FORM get_batch_stock.



* Select the materials which correspond to most of the selection crit.
  SELECT      a~matnr c~werks d~lgort a~mtart a~matkl
              a~prdha bc~maktx d~ersda
              c~dismm
************* Begin of MOD-004
              ha~bwtar
************* End of MOD-004
              ha~charg d~clabs d~cinsm d~cspem d~cretm d~cumlm
         INTO CORRESPONDING FIELDS OF TABLE it_material
         FROM mara AS a
        LEFT OUTER JOIN makt AS bc
           ON a~matnr = bc~matnr AND bc~spras EQ 'E'
        INNER JOIN marc AS c
           ON a~matnr = c~matnr
      INNER JOIN mcha AS ha
           ON c~matnr = ha~matnr
          AND c~werks = ha~werks
        LEFT OUTER JOIN mchb AS d
           ON ha~matnr = d~matnr
          AND ha~werks = d~werks
          AND ha~charg = d~charg
        WHERE a~lvorm EQ space
          AND a~matnr IN s_matnr
*          AND A~PRDHA IN R_PRDHA
          AND c~werks IN s_werks
          AND ha~charg IN s_charg.
*          AND D~LGORT EQ P_LGORT.


* Eliminate records where Storage location is filled but in conflict with selection parameter
*  LOOP AT it_material.
*    IF it_material-lgort NE space AND NOT it_material-lgort IN s_lgort.
*      DELETE it_material.
*    ENDIF.
*  ENDLOOP.

* Check if stock found
  IF sy-subrc NE 0.
    MESSAGE s002.  " No stock found
    gv_noresult = 'X'.
    EXIT.
  ELSE.
*   If stock found, sort the selected data
    SORT it_material BY matnr werks.
*Begin of Insertion by MOD-005
    it_material1[] = it_material[].
    SORT it_material1 BY matnr werks charg.
    DELETE ADJACENT DUPLICATES FROM it_material1 COMPARING matnr werks charg.
    IF it_material1[] IS NOT INITIAL.
      SELECT ebeln
             shkzg
             matnr
             werks
             charg
             FROM ekbe
             INTO TABLE it_ekbe1
             FOR ALL ENTRIES IN it_material1
             WHERE shkzg = 'S'
              AND  matnr = it_material1-matnr
              AND  werks = it_material1-werks
              AND  charg = it_material1-charg.
      IF sy-subrc = 0.
        SORT it_ekbe1 BY ebeln charg.
        DELETE ADJACENT DUPLICATES FROM it_ekbe1
        COMPARING ebeln charg.
        IF it_ekbe1[] IS NOT INITIAL.
          SELECT belnr
                 ebeln
                 matnr
                 bukrs
                 werks
                 wrbtr
                 menge
                 shkzg
                 bwtar
                 FROM rseg
                 INTO TABLE it_rseg
                 FOR ALL ENTRIES IN it_ekbe1
                 WHERE ebeln = it_ekbe1-ebeln AND
                       bwtar = it_ekbe1-charg AND
                       shkzg = it_ekbe1-shkzg.
          IF sy-subrc = 0.
            SORT it_rseg BY matnr werks bwtar.
            DELETE it_rseg WHERE wrbtr IS INITIAL.
            SELECT belnr
                   bukrs
                   waers
                   kursf
                   FROM rbkp
                   INTO TABLE it_rbkp
                   FOR ALL ENTRIES IN it_rseg
                   WHERE belnr = it_rseg-belnr
                   AND   bukrs = gc_bukrs.
            IF sy-subrc = 0.
              SORT it_rbkp BY belnr waers kursf.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
*End of Insertion by MOD-005
* Get sales order stock from MSKA
  SELECT      matnr werks charg SUM( e~kalab )
         INTO TABLE it_mska
         FROM mska AS e
        WHERE matnr IN s_matnr
          AND werks IN s_werks
          AND charg IN s_charg
          AND sobkz EQ 'E'
        GROUP BY matnr werks charg.

ENDFORM.                    " GET_MATERIAL_STOCK

*&---------------------------------------------------------------------*
*&      Form  output_table_fill
*&---------------------------------------------------------------------*
FORM output_table_fill.

  DATA:
    lv_skip TYPE c.

  DATA : gv_bukrs TYPE bukrs,
         gv_bwkey TYPE bwkey.


  TYPES: BEGIN OF ty_mcha,
          ersda TYPE ersda,
          matnr TYPE matnr,
          bwart TYPE bwart,
          charg TYPE charg_d,
         END OF   ty_mcha.

  DATA: lv_mblnr TYPE mblnr,
        lv_mjahr TYPE mjahr.



  CONSTANTS: lc_atnam       TYPE cabn-atnam  VALUE 'ZRU_GR_DATE'.

  DATA: lv_charg TYPE charg_d.

  DATA: v_cuobj_bm       TYPE mcha-cuobj_bm,
        inob_klart       TYPE inob-klart,
        inob_objek       TYPE inob-objek,
        inob_obtab       TYPE inob-obtab,
        it_class         TYPE TABLE OF sclass,
        it_clobjdat      TYPE TABLE OF clobjdat WITH HEADER LINE.



  SORT:
    it_eord         BY matnr werks,
    it_msku         BY matnr werks,
    it_mbew         BY matnr werks,
    it_matplant     BY matnr werks,
    it_eine         BY matnr werks,
    it_evers        BY evers,
    it_mvke         BY matnr,
    it_sohist       BY matnr,
    it_fchdr        BY matnr.

* Loop through stock per StLoc table
  LOOP AT it_material.




    CLEAR: gv_bukrs, gv_bwkey.
    SELECT SINGLE bwkey INTO gv_bwkey FROM t001w
      WHERE werks = it_material-werks.
    SELECT SINGLE bukrs INTO gv_bukrs FROM t001k
      WHERE bwkey = gv_bwkey.

*   Copy fields from master table to output table
    CLEAR wa_output.
* Begin of insert  MOD-001

    SELECT SINGLE lgpbe FROM mard INTO wa_output-lgpbe
      WHERE matnr = it_material-matnr AND werks = it_material-werks AND lgort = it_material-lgort.

    wa_output-lgort = it_material-lgort.       " Storage Location Batch
* End of insert  MOD-001
*   WA_OUTPUT-GAC   = IT_MATERIAL-PRDHA(4).    " GAC
*   WA_OUTPUT-PGC   = IT_MATERIAL-PRDHA+4(4).  " PGC
    wa_output-matnr = it_material-matnr.       " Material number
    wa_output-maktx = it_material-maktx.       " Material description
    wa_output-mtart = it_material-mtart.       " Mat type
    wa_output-matkl = it_material-matkl.       " Mat grp
    wa_output-werks = it_material-werks.       " Plant
    wa_output-charg = it_material-charg.       " Batch
    wa_output-ersda = it_material-ersda.       " storage date
    IF wa_output-ersda IS INITIAL.
      SELECT SINGLE  ersda INTO wa_output-ersda
        FROM mska
       WHERE matnr EQ it_material-matnr
         AND werks EQ it_material-werks
         AND charg EQ it_material-charg
         AND sobkz EQ 'E'.
    ENDIF.

* Begin of insert MOD-001
    IF wa_output-lgort IS INITIAL.
      SELECT SINGLE  lgort INTO wa_output-lgort
        FROM mska
       WHERE matnr EQ it_material-matnr
         AND werks EQ it_material-werks
         AND charg EQ it_material-charg
         AND sobkz EQ 'E'.


      SELECT SINGLE lgpbe FROM mard INTO wa_output-lgpbe
        WHERE matnr = it_material-matnr AND werks = it_material-werks AND lgort = wa_output-lgort.
    ENDIF.
* End of insert MOD-001
    wa_output-qonst = it_material-clabs + it_material-cinsm + it_material-cspem + it_material-cretm + it_material-cumlm.

*    wa_output-lgort = it_material-lgort.       " Storage location
* Sales Order Number, Inbound Delivery, Order type by Batch
    CLEAR lv_mblnr.
    CLEAR lv_mjahr.
    SELECT SINGLE kdauf mblnr mjahr FROM mseg INTO (wa_output-kdauf, lv_mblnr, lv_mjahr)
      WHERE matnr = it_material-matnr AND
            werks = it_material-werks AND
            charg = it_material-charg AND
            kdauf <> ' '.

    SELECT SINGLE auart FROM vbak INTO wa_output-auart
      WHERE vbeln = wa_output-kdauf.
*BEGIN OF CHANGE BY MOD-002.
    SELECT SINGLE kdauf FROM mseg INTO wa_output-kdauf
      WHERE matnr = it_material-matnr AND
            werks = it_material-werks AND
            charg = it_material-charg AND
            bwart = '411'.
    IF sy-subrc = 0.
      IF wa_output-kdauf IS NOT INITIAL.
        CLEAR wa_output-kdauf.
      ENDIF.
    ENDIF.
*END OF CHANGE BY MOD-002.
    SELECT SINGLE le_vbeln FROM mkpf INTO wa_output-vbeln
      WHERE mblnr = lv_mblnr AND
            mjahr = lv_mjahr.

*     IF not wa_output-kdauf is initial.
** Take price of sales order stock
*     select single netwr from vbap into wa_output-verpr
*       where vbeln  = wa_output-kdauf
*       and matnr = it_material-matnr.
*
*     ENDIF.
* Oldest batch
*      SELECT min( charg )
*            INTO lv_charg
*            FROM mchb
*          WHERE    mchb~matnr  EQ it_material-matnr AND
**                   mchb~lgort  EQ '1000' AND
*                   mchb~werks  EQ it_material-werks AND
*                   mchb~CLABS <> 0.
*
*    SELECT SINGLE CUOBJ_BM " for batch detail
*     FROM MCHA
*     INTO V_CUOBJ_BM
*     WHERE MATNR = it_material-matnr
*     AND CHARG = lv_charg
*     AND WERKS = it_material-werks.
*
*    IF V_CUOBJ_BM IS NOT INITIAL. " for object link with material
*      SELECT SINGLE KLART
*      OBJEK
*      OBTAB
*      FROM INOB
*      INTO (INOB_KLART,INOB_OBJEK,INOB_OBTAB)
*      WHERE CUOBJ = V_CUOBJ_BM.
*    ENDIF.
*
*    IF INOB_KLART IS NOT INITIAL
*    AND INOB_OBJEK IS NOT INITIAL
*    AND INOB_OBTAB IS NOT INITIAL.
*
*      CALL FUNCTION 'CLAF_CLASSIFICATION_OF_OBJECTS' " extract Batch Characteristics
*      EXPORTING
*      CLASSTYPE = INOB_KLART
*      FEATURES = 'X'
*      LANGUAGE = SY-LANGU
*      OBJECT = INOB_OBJEK
*      OBJECTTABLE = INOB_OBTAB
*      TABLES
*      T_CLASS = IT_CLASS
*      T_OBJECTDATA = IT_CLOBJDAT
*      EXCEPTIONS
*      NO_CLASSIFICATION = 1
*      NO_CLASSTYPES = 2
*      INVALID_CLASS_TYPE = 3
*      OTHERS = 4.
*
*      READ TABLE IT_CLOBJDAT WITH KEY ATNAM = lc_atnam.
*      IF SY-SUBRC = 0 .
*        concatenate IT_CLOBJDAT-AUSP1+6(4)  IT_CLOBJDAT-AUSP1+3(2) IT_CLOBJDAT-AUSP1+0(2) into wa_output-ersda.
*      ENDIF.
*    ENDIF.


*   Fixed vendor
    PERFORM find_fixed_vendor_for_mat CHANGING lv_skip.
*   If vendor not according to selection criteria, skip the material
    IF lv_skip NE space.
      CONTINUE.
    ENDIF.
*   GAC / PGC
    PERFORM set_sales_data CHANGING lv_skip.
*   Don't keep material if GAC / PGC not found (not meeting selection screen parameter)
    IF ( wa_output-gac EQ space AND wa_output-pgc EQ space ) OR wa_output-plc EQ space.
      CONTINUE.
    ENDIF.

*   MRP Type
    PERFORM set_mrp_type_for_mat.
*   Standard cost
    PERFORM set_stcost_for_mat.
* Sales Order Stock
    PERFORM set_so_stock_for_mat.

    IF wa_output-qonst = 0.
      CONTINUE.
    ENDIF.
*Begin of Insertion by MOD-005
    LOOP AT it_rseg INTO wa_rseg WHERE matnr = it_material-matnr AND
    werks = it_material-werks AND
    bwtar = it_material-charg.
      IF wa_rseg-menge <> '0' OR
      wa_rseg-menge IS NOT INITIAL.
        lv_unit_price = lv_unit_price + ( wa_rseg-wrbtr / wa_rseg-menge ).
      ENDIF.

      IF wa_rbkp IS INITIAL.
        READ TABLE it_rbkp INTO wa_rbkp WITH KEY belnr = wa_rseg-belnr.
        IF sy-subrc = 0.
          wa_output-waers = wa_rbkp-waers.
          wa_output-kursf = wa_rbkp-kursf.
        ENDIF.
      ENDIF.
    ENDLOOP.

    wa_output-trnsf =  lv_unit_price * wa_output-qonst.
    wa_output-total =  wa_output-verpr * wa_output-qonst.
    CLEAR: lv_unit_price, wa_rbkp.
*End of Insertion by MOD-005

*   Calculate "Total stock balance","Total stock value", "Stock available" ...
*    PERFORM calc_for_mat.
    APPEND wa_output TO it_output.

  ENDLOOP.


  SORT it_output BY gac pgc matnr.

ENDFORM.                    " OUTPUT_TABLE_FILL



*&---------------------------------------------------------------------*
*&      Form  view_material
*&---------------------------------------------------------------------*

FORM view_material  USING    p_e_row_id TYPE lvc_s_row.

  READ TABLE it_output INTO wa_output INDEX p_e_row_id.

  SET PARAMETER ID 'MAT' FIELD wa_output-matnr.
  CALL TRANSACTION 'MM03' AND SKIP FIRST SCREEN.

ENDFORM.                    " view_material

*&---------------------------------------------------------------------*
*&      Form  check_authorization
*&---------------------------------------------------------------------*

FORM check_authorization .

  DATA: t_t001w LIKE STANDARD TABLE OF t001w WITH HEADER LINE.

  SELECT *
  FROM t001w
  INTO TABLE t_t001w WHERE werks IN s_werks. " so_werks.

  LOOP AT t_t001w.
    AUTHORITY-CHECK OBJECT 'M_MATE_WRK'
             ID 'ACTVT' DUMMY
             ID 'WERKS' FIELD t_t001w-werks.
    IF sy-subrc = 4.
*   No authorisation to display data from Sales Organisation p_vkorg
      MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '008' WITH t_t001w-werks.
      EXIT.
    ELSEIF sy-subrc <> 0.
*   Error checking authorization.
      MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '004'.
      EXIT.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " check_authorization

*&---------------------------------------------------------------------*
*&      Form  VALREQ_WERKS
*&---------------------------------------------------------------------*
FORM valreq_werks.

  SELECT      a~werks a~whtype a~whstdes b~name1
*         INTO CORRESPONDING FIELDS OF TABLE IT_PLANT
         INTO TABLE it_plant
         FROM yse_em_plant AS a
        INNER JOIN t001w AS b
           ON a~werks = b~werks
        WHERE a~whtype NE 'D'   " Report only for non DTC plants
          AND b~spras  EQ 'E'.                         "#EC CI_BUFFJOIN

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'WERKS'
      window_title    = text-003
      value_org       = 'S'
    TABLES
      value_tab       = it_plant
      return_tab      = it_return_tab
    EXCEPTIONS
      parameter_error = 0
      no_values_found = 0
      OTHERS          = 0.

ENDFORM.                    " VALREQ_WERKS

*&---------------------------------------------------------------------*
*&      Form  SEND2SPOOL
*&---------------------------------------------------------------------*
FORM send2spool.

  DATA:
    fnam             LIKE rlgrap-filename,
    it_dd03l         LIKE dd03l OCCURS 0 WITH HEADER LINE,
    it_dd04t         LIKE dd04t OCCURS 0 WITH HEADER LINE,
    it_outxls(4096)  TYPE c OCCURS 0,
    wa_outxls(4096)  TYPE c.


  CONSTANTS:
    c_tab TYPE c VALUE cl_abap_char_utilities=>horizontal_tab.

* Get fields of structure 'YSE_BATCH_STOCK_OVERVIEW_ITEM'
  SELECT *
         FROM dd03l
         INTO TABLE it_dd03l
        WHERE tabname = 'YSE_BATCH_STOCK_OVERVIEW_ITEM'.

* Get the descriptions of the fields in the structure
  SELECT *
         FROM dd04t
         INTO TABLE it_dd04t
          FOR ALL ENTRIES IN it_dd03l
        WHERE rollname EQ it_dd03l-rollname
          AND ddlanguage EQ 'EN'.

* Build filename

* Begin of Deletion by MOD-003.
*    CONCATENATE '/var/load/' sy-sysid '/UK/original/YSE_ITEMREP_'
*                sy-uname '_' v_dat '_' v_tim '.TXT'
*           INTO fnam.
* End of Deletion by MOD-003.

* Begin of insertion by MOD-003.
  CONCATENATE '/var/load/' sy-sysid '/UK/original/YSE_ITEMREP_'
              sy-uname '_' sy-datum '_' sy-uzeit '.TXT'
         INTO fnam.
* End of insertion by MOD-003.

* Make the output table ; delimited


  CALL FUNCTION 'SAP_CONVERT_TO_CSV_FORMAT'
    TABLES
      i_tab_sap_data       = it_output
    CHANGING
      i_tab_converted_data = it_outxls
    EXCEPTIONS
      conversion_failed    = 1
      OTHERS               = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

* Open file
  OPEN DATASET fnam FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.
  IF sy-subrc <> 0.
    WRITE 'Error opening file. Action aborted.'(026).
    EXIT.
  ENDIF.

* Write header line
  CLEAR wa_outxls.
  SORT it_dd03l BY position.
  LOOP AT it_dd03l.
    READ TABLE it_dd04t WITH KEY rollname = it_dd03l-rollname.
    IF wa_outxls IS INITIAL.
      wa_outxls = it_dd04t-reptext.
    ELSE.
      CONCATENATE wa_outxls c_tab it_dd04t-reptext INTO wa_outxls.
    ENDIF.
  ENDLOOP.
  TRANSFER wa_outxls TO fnam.

* Process lines
  LOOP AT it_outxls INTO wa_outxls.
    REPLACE ALL OCCURRENCES OF ';' IN wa_outxls WITH c_tab.
    TRANSFER wa_outxls TO fnam.
  ENDLOOP.

  CLOSE DATASET fnam.

  WRITE: 'Report output written to file:'(027),
         fnam.

ENDFORM.                    " SEND2SPOOL






*&---------------------------------------------------------------------*
*&      Form  get_data_mkpf
*&---------------------------------------------------------------------*
FORM get_data_mkpf .

* Last receipt date.
  IF NOT it_material IS INITIAL.
    SELECT mkpf~mblnr mseg~matnr mseg~matnr mseg~werks mkpf~budat mseg~ebeln
        INTO TABLE gt_rec_dat
        FROM mseg
       INNER JOIN mkpf
          ON   mseg~mblnr EQ mkpf~mblnr
         AND   mseg~mjahr EQ mkpf~mjahr
     FOR ALL entries IN it_material
     WHERE    mseg~matnr  EQ it_material-matnr
          AND mseg~werks  IN s_werks " so_werks
          AND ( mseg~bwart EQ '101'
          OR   mseg~bwart EQ '651'
          OR   mseg~bwart EQ '634' ).
  ENDIF.

* Superseding materials for receipt date
  IF NOT it_supers[] IS INITIAL.
    SELECT mkpf~mblnr mseg~matnr mseg~werks mkpf~budat mseg~ebeln
*      INTO  CORRESPONDING FIELDS OF TABLE GT_REC_DAT1
        INTO TABLE gt_rec_dat1
        FROM mseg
       INNER JOIN mkpf
          ON   mseg~mblnr EQ mkpf~mblnr
         AND   mseg~mjahr EQ mkpf~mjahr
     FOR ALL entries IN it_supers
     WHERE    mseg~matnr  EQ it_supers-matnr
          AND mseg~werks  IN s_werks " so_werks
          AND ( mseg~bwart EQ '101'
          OR   mseg~bwart EQ '651'
          OR   mseg~bwart EQ '634' ).
  ENDIF.

* Append the superseded items to the table
  LOOP AT gt_rec_dat1.
    READ TABLE it_supers WITH KEY matnr = gt_rec_dat1-matnr.
    IF sy-subrc EQ 0.
      CLEAR gt_rec_dat.
      MOVE-CORRESPONDING gt_rec_dat1 TO gt_rec_dat.
      gt_rec_dat-nfmat = it_supers-nfmat.
      APPEND gt_rec_dat.
    ENDIF.
  ENDLOOP.

  SORT gt_rec_dat BY budat DESCENDING.

  LOOP AT gt_rec_dat.
    READ TABLE it_material
                  WITH KEY matnr = gt_rec_dat-nfmat
                           werks = gt_rec_dat-werks.
    IF sy-subrc NE 0.
      DELETE gt_rec_dat.
    ELSE.
*     Do another check on type of po linked, must not be ZUB1
      IF NOT gt_rec_dat-ebeln IS INITIAL.
*       Means it was a 101 movement
        SELECT SINGLE ebeln FROM ekko INTO ekko-ebeln
                     WHERE ebeln EQ gt_rec_dat-ebeln AND
                           bsart EQ 'ZUB1'.          "#EC CI_SEL_NESTED
        IF sy-subrc EQ 0.
          DELETE gt_rec_dat.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.


* Last issue date.
  IF NOT it_material[] IS INITIAL.
    SELECT mkpf~mblnr mseg~matnr mseg~matnr mseg~werks mkpf~budat
        INTO TABLE gt_iss_dat
        FROM mseg
       INNER JOIN mkpf
          ON   mseg~mblnr EQ mkpf~mblnr
         AND   mseg~mjahr EQ mkpf~mjahr
     FOR ALL entries IN it_material
     WHERE     mseg~matnr  EQ it_material-matnr
           AND mseg~werks  IN s_werks " so_werks
           AND ( mseg~bwart EQ '261'
            OR   mseg~bwart EQ '601'
            OR   mseg~bwart EQ '633' ).
  ENDIF.
* Get the superseded items
  IF NOT it_supers[] IS INITIAL.
    SELECT mkpf~mblnr mseg~matnr mseg~werks mkpf~budat
        INTO TABLE gt_iss_dat1
        FROM mseg
       INNER JOIN mkpf
          ON   mseg~mblnr EQ mkpf~mblnr
         AND   mseg~mjahr EQ mkpf~mjahr
     FOR ALL entries IN it_supers
     WHERE     mseg~matnr  EQ it_supers-matnr
           AND mseg~werks  IN s_werks " so_werks
           AND ( mseg~bwart EQ '261'
            OR   mseg~bwart EQ '601'
            OR   mseg~bwart EQ '633' ).

* Append the superseded items to the table
    LOOP AT gt_iss_dat1.
      READ TABLE it_supers WITH KEY matnr = gt_iss_dat1-matnr.
      IF sy-subrc EQ 0.
        CLEAR gt_iss_dat.
        MOVE-CORRESPONDING gt_iss_dat1 TO gt_iss_dat.
        gt_iss_dat-nfmat = it_supers-nfmat.
        APPEND gt_iss_dat.
      ENDIF.
    ENDLOOP.
  ENDIF.

  SORT gt_iss_dat BY budat DESCENDING.


  LOOP AT gt_iss_dat.
    READ TABLE it_material
                  WITH KEY matnr = gt_iss_dat-nfmat
                           werks = gt_iss_dat-werks.
    IF sy-subrc NE 0.
      DELETE gt_iss_dat.
    ELSE.
*     Do another check on type delivery.
      SELECT SINGLE likp~vbeln INTO likp-vbeln FROM likp
                        INNER JOIN vbfa
                        ON vbfa~vbeln EQ likp~vbeln
                        WHERE vbfa~vbeln EQ gt_iss_dat-mblnr AND
                              vbfa~vbtyp_v EQ 'J' AND
                              likp~lfart EQ 'NL'.    "#EC CI_SEL_NESTED
      IF sy-subrc EQ 0.
        DELETE gt_iss_dat.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " get_data_mkpf

*&---------------------------------------------------------------------*
*&      Form  SET_12_MONTH_PERIOD
*&---------------------------------------------------------------------*
FORM set_12_month_period.

  DATA:
    lv_datum      LIKE sy-datum.

* *****
* Start with current date
  MOVE sy-datum TO lv_datum.
* Set the "day" to 01 ==> first of current month
  lv_datum+6 = '01'.
* Go to the day before the first of current month ==> last day of last month
  lv_datum = lv_datum - 1.
* Set "last month" period
  wa_per_lastmonth = lv_datum(6).

* *****
* Go 11 months back from last month ==> 1 yr back
  CALL FUNCTION 'MONTH_PLUS_DETERMINE'
    EXPORTING
      months  = -11
      olddate = lv_datum
    IMPORTING
      newdate = lv_datum.
* Set "1 Year Back" period
  MOVE lv_datum(6) TO  wa_per_1yrback.

ENDFORM.                    " SET_12_MONTH_PERIOD


*&---------------------------------------------------------------------*
*&      Form  GET_ADD_DATA
*&---------------------------------------------------------------------*
FORM get_add_data .

* Get responsible POrg for the provided plant
  SELECT SINGLE ekorg
           INTO gv_ekorg
           FROM t001w
          WHERE werks IN s_werks.

* Get Material/plant parameters
  SELECT      *
         INTO TABLE it_matplant
         FROM yse_em_matplant
        WHERE matnr IN s_matnr
          AND werks IN s_werks.

* Get the sales data of the materials selected before
  IF NOT it_material[] IS INITIAL.
    SELECT      matnr vkorg vtweg prodh mtpos mvgr5 mvgr4
           INTO TABLE it_mvke
           FROM mvke
            FOR ALL ENTRIES IN it_material
          WHERE matnr EQ it_material-matnr
            AND vkorg EQ it_material-vkorg
            AND vtweg EQ '01'
            AND prodh IN r_prdha.                      "#EC CI_BUFFJOIN
  ENDIF.


* Fixed vendor
  IF NOT it_material[] IS INITIAL.
    SELECT      matnr eord~werks eord~lifnr flifn ktokk
           INTO TABLE it_eord
           FROM eord
          INNER JOIN lfa1
             ON eord~lifnr = lfa1~lifnr
            FOR ALL entries IN it_material
          WHERE matnr EQ it_material-matnr
            AND eord~werks IN s_werks
            AND flifn EQ c_x.                          "#EC CI_BUFFJOIN
  ENDIF.


* Material cost (standard price)
  IF NOT it_material[] IS INITIAL.
    SELECT      stprs matnr bwtar peinh werks
                verpr
           INTO CORRESPONDING FIELDS OF TABLE it_mbew
           FROM mbew
          INNER JOIN t001w
             ON mbew~bwkey = t001w~bwkey
            FOR ALL entries IN it_material
          WHERE matnr = it_material-matnr
            AND werks = it_material-werks
*  Begin of mod MOD-004
*            AND bwtar = it_material-charg.
            AND bwtar = it_material-bwtar.
*  End of mod MOD-004
  ENDIF.



ENDFORM.                    " GET_ADD_DATA


*&---------------------------------------------------------------------*
*&      Form  FIND_FIXED_VENDOR_FOR_MAT
*&---------------------------------------------------------------------*
FORM find_fixed_vendor_for_mat CHANGING p_skip TYPE c.

  DATA: teller TYPE i,
        line TYPE i.

* Assume we want to keep the material
  CLEAR p_skip.
* Supplier (fixed vendor)
  CLEAR sy-subrc.
* If current entry in EORD does not correspond to current materil
  IF    it_material-matnr NE it_eord-matnr
     OR it_material-werks NE it_eord-werks.
*   Read table EORD for current material
    READ TABLE it_eord WITH KEY matnr = it_material-matnr
                                werks = it_material-werks.
  ENDIF.
* If supplier found, check it against selection criteria
  IF sy-subrc EQ 0.
*   Copy supplier
    wa_output-lifnr = it_eord-lifnr.    " Supplier (fixed vendor)
*   If user specified vendor on selection screen
    IF NOT s_lifnr-low IS INITIAL OR NOT s_lifnr-high IS INITIAL.
*     If different from vendor of the material, skip the material
* To get automatic search help for vendor, another field was referenced. However, that
* field allows for 6 more positions, so that testing for equality fails. Therefore, copy
* to another range variable.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = s_lifnr-low
        IMPORTING
          output = s_lifnr10-low.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = s_lifnr-high
        IMPORTING
          output = s_lifnr10-high.

      s_lifnr10-sign = s_lifnr-sign.
      s_lifnr10-option = s_lifnr-option.
      APPEND s_lifnr10.

      SELECT  lifnr INTO CORRESPONDING FIELDS OF TABLE it_lifnr FROM lfa1
        WHERE lifnr IN s_lifnr10.

      DESCRIBE TABLE it_lifnr LINES line.
      IF line > 0.
        teller = 1.
        LOOP AT it_lifnr.
          IF it_lifnr-lifnr EQ it_eord-lifnr.
            teller = 0.
          ENDIF.
        ENDLOOP.
        IF teller = 1.
          p_skip = 'X'.
        ENDIF.
      ENDIF.
    ENDIF.
* Supplier not found, while vendor or vendor account group specified
* on selection screen, skip the material
  ELSEIF NOT s_lifnr-low IS INITIAL OR NOT s_lifnr-high IS INITIAL.
    p_skip = 'X'.
  ENDIF.

ENDFORM.                    " FIND_FIXED_VENDOR_FOR_MAT

*&---------------------------------------------------------------------*
*&      Form  SET_MRP_TYPE_FOR_MAT
**&---------------------------------------------------------------------*
FORM set_mrp_type_for_mat .
*
*  CASE it_material-dismm.
*    WHEN 'Z5'.
*      wa_output-stock_pol = 'ST'.
*    WHEN 'Z6' OR 'Z7'.
*      wa_output-stock_pol = 'NS'.
*  ENDCASE.
*
  wa_output-mrptp = it_material-dismm.
ENDFORM.                    " SET_MRP_TYPE_FOR_MAT




*&---------------------------------------------------------------------*
*&      Form  SET_STCOST_FOR_MAT
*&---------------------------------------------------------------------*
FORM set_stcost_for_mat .

  IF wa_output-verpr IS INITIAL.

    CLEAR it_mbew.
* Standard cost
    SORT it_mbew BY matnr werks bwtar.

    READ TABLE it_mbew WITH KEY matnr = it_material-matnr
                                werks = it_material-werks
********Begin of mod-004  MOD
*                                bwtar = it_material-charg
                                bwtar = it_material-bwtar
********End   of mod-004  MOD
                       BINARY SEARCH.
    IF sy-subrc EQ 0.
      IF it_mbew-peinh NE 0.
*      wa_output-stprs = it_mbew-stprs / it_mbew-peinh.
        wa_output-verpr = it_mbew-verpr / it_mbew-peinh.
      ENDIF.
    ENDIF.
  ENDIF.



ENDFORM.                    " SET_STCOST_FOR_MAT

*&---------------------------------------------------------------------*
*&      Form  CALC_FOR_MAT
*&---------------------------------------------------------------------*
*FORM calc_for_mat .
*
** Total stock balance
*  wa_output-total_stock = wa_output-labst +
*                          wa_output-insme +
*                          wa_output-speme +
*                          wa_output-retme +
*                          wa_output-umlmc +
*                          wa_output-umlme +
*                          wa_output-trame +
*                          wa_output-kulab.
*
** Total stock value/Goods in transit value
*  IF wa_output-stprs EQ '999999999'.
*    wa_output-total_value = wa_output-stprs.
*    wa_output-git = wa_output-stprs.
*    wa_output-total_value_mac = wa_output-verpr.
*    wa_output-git_mac = wa_output-verpr.
*  ELSE.
*    wa_output-total_value = wa_output-total_stock * wa_output-stprs.
*    wa_output-git = wa_output-goods_transit * wa_output-stprs.
*    wa_output-total_value_mac = wa_output-total_stock * wa_output-verpr.
*    wa_output-git_mac = wa_output-goods_transit * wa_output-verpr.
*  ENDIF.
*
** Stock available
*  wa_output-available = wa_output-labst - wa_output-ALLOCATED.
*
*ENDFORM.                    " CALC_FOR_MAT



*&---------------------------------------------------------------------*
*&      Form  SET_SALES_DATA
*&---------------------------------------------------------------------*
FORM set_sales_data  CHANGING p_skip TYPE c.

  DATA: lv_prctr_mat TYPE prctr,
        it_plc         TYPE k9rcd11000010    OCCURS 0 WITH HEADER LINE.
  DATA : gv_bukrs TYPE bukrs,
         gv_bwkey TYPE bwkey.

  CLEAR: gv_bukrs, gv_bwkey.
  SELECT SINGLE bwkey INTO gv_bwkey FROM t001w
    WHERE werks = it_material-werks.
  SELECT SINGLE bukrs INTO gv_bukrs FROM t001k
    WHERE bwkey = gv_bwkey.



* Read sales data
  READ TABLE it_mvke WITH KEY matnr = it_material-matnr
                              vkorg = it_material-vkorg
                     BINARY SEARCH.
  IF sy-subrc EQ 0.
    wa_output-gac   = it_mvke-prodh(4).    " GAC
    wa_output-pgc   = it_mvke-prodh+4(4).  " PGC

* Get PLC Data
    SELECT SINGLE prctr INTO lv_prctr_mat
                        FROM yse_prctr_deriv WHERE pgc = wa_output-pgc
                                             AND vtweg = '01'.
    IF sy-subrc = 0.

      CALL FUNCTION 'YSE_CONVERT_PRCTR_BL'
        EXPORTING
          prctr_in    = lv_prctr_mat
          bukrs       = gv_bukrs
        IMPORTING
          segment_out = lv_prctr_mat.
*.. Derive segment from profit center
      CLEAR it_plc[].
      SELECT      *
*         FROM K9RCD11000009
             FROM k9rcd11000010                             "20080417
             INTO TABLE it_plc.

      LOOP AT it_plc WHERE sour1_from LE lv_prctr_mat
                       AND sour1_to   GE lv_prctr_mat
                       AND valid_from LE sy-datum
                       AND target1 IN s_plc.
        wa_output-plc = it_plc-target1.
        EXIT.
      ENDLOOP.
    ENDIF.

  ELSE.
    p_skip = 'X'.
  ENDIF.

ENDFORM.                    " SET_SALES_DATA

*&---------------------------------------------------------------------*
*&      Form  FILL_RANGES
*&---------------------------------------------------------------------*
FORM fill_ranges .

  r_bwart_receipt-sign = 'I'.
  r_bwart_receipt-option = 'EQ'.
  r_bwart_receipt-low = '101'.
  APPEND r_bwart_receipt.
  r_bwart_receipt-low = '651'.
  APPEND r_bwart_receipt.
  r_bwart_receipt-low = '634'.
  APPEND r_bwart_receipt.

  r_bwart_issue-sign = 'I'.
  r_bwart_issue-option = 'EQ'.
  r_bwart_issue-low = '261'.
  APPEND r_bwart_issue.
  r_bwart_issue-low = '601'.
  APPEND r_bwart_issue.
  r_bwart_issue-low = '633'.
  APPEND r_bwart_issue.

  r_bwart_all[] = r_bwart_receipt[].
  APPEND LINES OF r_bwart_issue TO r_bwart_all.

ENDFORM.                    " FILL_RANGES




*&---------------------------------------------------------------------*
*&      Form  GET_SALESORG
*&---------------------------------------------------------------------*
FORM get_salesorg .

  DATA: lv_index TYPE sy-tabix.

  LOOP AT it_material.
    lv_index = sy-tabix.
    SELECT SINGLE vkorg
             INTO it_material-vkorg
             FROM tvkwz
            WHERE vtweg EQ '01'
              AND werks EQ it_material-werks.
    MODIFY it_material INDEX lv_index.
  ENDLOOP.

ENDFORM.                    " GET_SALESORG

*&---------------------------------------------------------------------*
*&      Form  OUTPUT_TABLE_RESTRICT
*&---------------------------------------------------------------------*
FORM output_table_restrict .

* Filter the extra selection criteria on the selection screen
  it_output1[] = it_output[].
  CLEAR it_output[].

* Filter all the values on the screen
  LOOP AT it_output1 INTO wa_output.
    CHECK wa_output-ersda IN s_ersda.
    CHECK wa_output-vbeln IN s_vbeln.
* Begin of insert MOD-001
    CHECK wa_output-lgort IN s_lgort.
* End of insert MOD-001
    APPEND wa_output TO it_output.
  ENDLOOP.

ENDFORM.                    " OUTPUT_TABLE_RESTRICT

*&---------------------------------------------------------------------*
*&      Form  set_so_stock_for_mat
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM set_so_stock_for_mat.

* Sales order stock (not on lgort level)
  SORT it_mska BY matnr werks charg.
  READ TABLE it_mska WITH KEY matnr = it_material-matnr
                              werks = it_material-werks
                              charg = it_material-charg
    BINARY SEARCH.
  IF sy-subrc EQ 0.
    wa_output-qonst = wa_output-qonst + it_mska-kalab.
  ENDIF.

ENDFORM.                    " SET_SO_STOCK_FOR_MAT
