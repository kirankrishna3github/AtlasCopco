*&---------------------------------------------------------------------*
*&  Include           YSE_SD_KP03_RPT_DATASEL                          *
*&---------------------------------------------------------------------*
***************************************************************************
*START-OF-SELECTION.
***************************************************************************
*  MOD-010 DO NOTHING JUST TO ALIGN THE VERSION WITH CQ1
*START-OF-SELECTION.
*&---------------------------------------------------------------------*
*&      Form  select_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM select_data.


  DATA: lt_vbak2 LIKE it_vbap OCCURS 0 WITH HEADER LINE,
        lt_vbak3 LIKE it_vbap OCCURS 0 WITH HEADER LINE,
        lt_vbak4 LIKE it_vbap OCCURS 0 WITH HEADER LINE.
  DATA: lt_vbak5 LIKE it_vbap OCCURS 0 WITH HEADER LINE.    "+Mod-003 (Satya)


  FIELD-SYMBOLS:  <l_mkpf> LIKE LINE OF it_mkpf.            "AIR23037

* BUDAT is the only obligatory field. Let's start with it then!      "air23037
*select MKPF data
  SELECT mseg~mblnr mseg~zeile
         mkpf~mjahr mkpf~xblnr  mkpf~budat
          mseg~bwart mseg~shkzg mseg~menge
         INTO TABLE it_mkpf
         FROM mkpf
         INNER JOIN mseg  ON  mseg~mblnr = mkpf~mblnr
                         AND  mseg~mjahr = mkpf~mjahr
            WHERE mkpf~budat IN so_budat
              AND mkpf~xblnr NE space   "must be filled in
              AND mseg~bwart IN so_bwart.
*Fill VBFA
*  CHECK SY-SUBRC EQ 0.
*  LOOP AT IT_MKPF ASSIGNING <l_mkpf>.
*    MOVE <l_mkpf>-XBLNR(10) TO <l_mkpf>-vbeln.
*  ENDLOOP.


* get the SO number FROM material movements for vbap
  SELECT vbelv vbfa~posnv        " SO doc number
         vbeln posnn             " Mat. doc  -vbtyp_n = 'R'
         FROM vbfa
         INTO TABLE it_vbfa
         FOR ALL ENTRIES IN it_mkpf
         WHERE vbeln = it_mkpf-mblnr
           AND ( vbtyp_n = 'R'  OR vbtyp_n = 'h' OR vbtyp_n = 'H' ) "AIR23037 WE need just the goods issue link and returns
           AND vbtyp_v = 'C'.                           "#EC CI_NOFIRST


*----------------------------------------------------
*Select vbak, vbap, vbup
  SELECT vbak~vbeln vbak~auart vbak~vkorg vbak~vtweg vbak~augru
         vbak~kunnr                                         "MOD-007  (Uzzawal)
         vbak~vkgrp                                         "MOD-009++
         vbak~vgbel                                         "MOD-009++
         vbap~posnr vbap~werks vbap~matnr vbap~matkl
         vbap~arktx                                         "+Mod-005 (Satya)
         vbap~prodh vbap~bwtar vbap~lgort
         vbup~lfgsa
         yse_em_plant~whtype
         vbak~waerk
         vbak~vsbed vbak~vkbur                              "+Mod-003 (Satya)
       INTO TABLE it_vbap
       FROM vbap
       JOIN vbak  ON vbak~vbeln = vbap~vbeln
       JOIN vbup  ON vbup~vbeln = vbap~vbeln
                 AND vbup~posnr = vbap~posnr
       JOIN mara  ON mara~matnr = vbap~matnr
       LEFT JOIN yse_em_plant
                  ON yse_em_plant~werks = vbap~werks
      FOR ALL entries IN it_vbfa                            "air23037
       WHERE      vbap~vbeln = it_vbfa-vbelv                "air23037
                AND vbap~posnr = it_vbfa-posnv              "air23037
                AND vbap~abgru = ''                         "air23037
                AND vbak~auart IN so_auart
                AND vbak~vkorg IN so_vkorg
                AND vbak~vtweg IN so_vtweg
                AND vbak~augru IN so_augru
                AND vbap~werks IN so_werks
                AND vbap~lgort IN so_lgort
                AND mara~mtart IN so_mtart
                AND vbap~matkl IN so_matkl
                AND vbak~kunnr IN so_kunnr.                 "MOD-007

  CHECK sy-subrc EQ 0.
*Begin of MOD-009++
  IF NOT it_vbap[] IS INITIAL.
    SELECT vbeln
           vkgrp
           vkbur
           FROM vbak
           INTO TABLE it_vbak
           FOR ALL ENTRIES IN it_vbap
           WHERE vbeln EQ it_vbap-vgbel.
  ENDIF.
*End of MOD-009++
*** Begin of Mod-006 (Satya) - fill up Material Sales Text (VBAP)
*** Check for Material Sales Text in STXL and fill up VBAP
  PERFORM fill_up_material_sales_text.              "+Mod-006 (Satya)
*** End of Mod-006 (Satya)

*----------------------------------------------------

  lt_vbak2[] = it_vbap[].
  SORT lt_vbak2 BY matnr werks.
  DELETE ADJACENT DUPLICATES FROM lt_vbak2 COMPARING matnr werks.
*Fill the MARC data
  SELECT marc~matnr marc~werks marc~prctr marc~dismm
         FROM marc
         INTO TABLE it_marc
         FOR ALL ENTRIES IN lt_vbak2
         WHERE marc~matnr EQ lt_vbak2-matnr AND
               marc~werks EQ lt_vbak2-werks.

*----------------------------------------------------
  lt_vbak3[] = it_vbap[].
  SORT lt_vbak3 BY matnr vkorg.
  DELETE ADJACENT DUPLICATES FROM lt_vbak3 COMPARING matnr vkorg.
*Fill the MVKE data
  SELECT mvke~matnr mvke~vkorg mvke~mtpos mvke~mvgr4
         FROM mvke
         INTO TABLE it_mvke
         FOR ALL ENTRIES IN lt_vbak3
         WHERE mvke~matnr EQ lt_vbak3-matnr
           AND mvke~vkorg EQ lt_vbak3-vkorg
           AND mvke~vtweg EQ lt_vbak3-vtweg                 "AIR23037
               .

*----------------------------------------------------
*Use it_vbap2 (is already sorted on matnr werks)
*Fill the MBEW data
  SELECT mbew~matnr mbew~bwkey mbew~stprs
* begin of insert MOD-004
         mbew~verpr
* end of insert MOD-004
         FROM mbew
         INTO TABLE it_mbew
         FOR ALL ENTRIES IN lt_vbak2
         WHERE mbew~matnr EQ lt_vbak2-matnr
           AND mbew~bwkey EQ lt_vbak2-werks
           AND mbew~bwtar = lt_vbak2-bwtar                  "air23037
               .

*-----------------------------------------------------
*Fill the EORD data
  SELECT eord~matnr eord~werks eord~lifnr eord~flifn
         FROM eord
         INTO TABLE it_eord
         FOR ALL ENTRIES IN lt_vbak2
         WHERE eord~matnr EQ lt_vbak2-matnr AND
               eord~werks EQ lt_vbak2-werks.

  REFRESH lt_vbak2.
  REFRESH lt_vbak3.

** Begin of Mod-003 (Satya) - Pre-fetch Sales-District
*----------------------------------------------------

  lt_vbak5[] = it_vbap[].                                    "+Mod-003 (Satya)
  SORT lt_vbak5 BY vbeln.
  DELETE ADJACENT DUPLICATES FROM lt_vbak5 COMPARING vbeln.  "+Mod-003 (Satya)
*Fill the VBKD data                                          "+Mod-003 (Satya)
  SELECT vbkd~vbeln vbkd~bzirk                               "+Mod-003 (Satya)
         FROM vbkd                                           "+Mod-003 (Satya)
         INTO TABLE it_vbkd                                  "+Mod-003 (Satya)
         FOR ALL ENTRIES IN lt_vbak5                         "+Mod-003 (Satya)
         WHERE vbkd~vbeln EQ lt_vbak5-vbeln AND              "+Mod-003 (Satya)
               vbkd~posnr EQ '000000'.                       "+Mod-003 (Satya)
  REFRESH lt_vbak5.                                          "+Mod-003 (Satya)
** End of Mod-003 (Satya)

*Fill VBEP
  SELECT vbep~vbeln vbep~posnr vbep~ettyp vbep~edatu vbep~wmeng vbep~aufnr
         FROM vbep
         INTO TABLE it_vbep
         FOR ALL ENTRIES IN it_vbap
         WHERE vbep~vbeln EQ it_vbap-vbeln AND
               vbep~posnr EQ it_vbap-posnr AND
               vbep~etenr EQ '0001'.   "first schedule line

  SELECT * FROM tvaut INTO TABLE it_tvaut
                WHERE spras EQ sy-langu OR
                      spras EQ 'E'.   "english

*Get the link between the advanced shipment number and item and the component
  SELECT resb~rsnum resb~rspos
         yse_adv_comp_lin~vbeln_adv yse_adv_comp_lin~posnr_adv
         resb~sobkz
       INTO TABLE it_comp
       FROM yse_adv_comp_lin
       JOIN resb ON resb~rsnum = yse_adv_comp_lin~rsnum
                AND resb~rspos = yse_adv_comp_lin~rspos
       FOR ALL entries IN it_vbap
            WHERE vbeln_adv EQ it_vbap-vbeln AND
                  posnr_adv EQ it_vbap-posnr.


ENDFORM.                    "select_data


*&---------------------------------------------------------------------*
*&      Form  process_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*

FORM process_data.

  FIELD-SYMBOLS:  <l_vbfa> LIKE LINE OF it_vbfa,
                  <l_vbap> LIKE LINE OF it_vbap,
                  <l_vbak> LIKE LINE OF it_vbak."MOD-009++
*** Begin of MOD-010 INSERT
  DATA: ls_t001 TYPE ty_t001.
*** End of MOD-010 inset

* begin of insertion MOD-002
  DATA : gv_bukrs TYPE bukrs.
* end of insetion MOD-002
  SORT it_mkpf BY mblnr zeile.
  SORT it_marc BY matnr werks.
* begin of insertion MOD-002
  LOOP AT it_marc.
    CLEAR gv_bukrs.
    SELECT SINGLE bukrs INTO gv_bukrs FROM t001k
      WHERE bwkey = it_marc-werks.
    CALL FUNCTION 'YSE_CONVERT_PRCTR_BL'
      EXPORTING
        prctr_in    = it_marc-prctr
        bukrs       = gv_bukrs
      IMPORTING
        segment_out = it_marc-prctr.
    MODIFY it_marc.
  ENDLOOP.
* end of insertion MOD-002
  SORT it_mvke BY matnr vkorg.
  SORT it_eord BY matnr werks flifn.
  SORT it_comp BY vbeln_adv posnr_adv.
  SORT it_mbew BY matnr bwkey.
  SORT it_vbep BY vbeln posnr.
  SORT it_tvaut BY augru spras.
  SORT it_vbfa BY vbeln posnn.
  SORT it_vbap BY vbeln posnr.
  SORT it_vbkd BY vbeln.                          "+Mod-003 (Satya)

***** START REPLACE ***********
*  LOOP AT IT_VBFA ASSIGNING <l_vbfa>.            "AIR23037
*
**First we check if this MKPF line is allowed
*    LOOP AT it_vbap ASSIGNING <l_vbap>
*              WHERE VBELN EQ IT_VBFA-VBELV AND
*                    POSNR EQ IT_VBFA-POSNV.
*
*      CLEAR IT_OUT.
*      MOVE-CORRESPONDING <l_vbap> TO IT_OUT.
*      CLEAR IT_OUT-PRODH.
*      IT_OUT-PRODH = <l_vbap>-PRODH+4(4).
*
** MKPF
*      READ TABLE it_mkpf WITH KEY XBLNR = <l_vbfa>-VBELN
*                                            BINARY SEARCH.
*      IF SY-SUBRC EQ 0.
*        MOVE-CORRESPONDING IT_MKPF TO IT_OUT.
*      ELSE.
*        CLEAR IT_MKPF.
*      ENDIF.
***** END REPLACE ***********
*Begin of MOD-008
  SORT it_vbfa BY vbelv DESCENDING.
*End of MOD-008
*** Begin of MOD-010 INSERT
  DATA: ls_vbap       LIKE LINE OF it_vbap,
        ls_vbfa       LIKE LINE OF it_vbfa,
        ls_mkpf       LIKE LINE OF it_mkpf,
        it_mkpf_temp  LIKE it_mkpf OCCURS 0,
        it_vbfa_temp  LIKE it_vbfa OCCURS 0.

  CHECK it_vbfa[] IS NOT INITIAL.
  CHECK it_vbap[] IS NOT INITIAL.
  LOOP AT it_vbap INTO ls_vbap.
    LOOP AT it_vbfa INTO ls_vbfa WHERE vbelv = ls_vbap-vbeln
                                  AND  posnv = ls_vbap-posnr.
      APPEND ls_vbfa TO it_vbfa_temp.
      READ TABLE it_mkpf INTO ls_mkpf
        WITH KEY mblnr = ls_vbfa-vbeln
                 zeile = ls_vbfa-posnn.
      IF sy-subrc = 0.
        APPEND ls_mkpf TO it_mkpf_temp[].
      ENDIF.
    ENDLOOP.
  ENDLOOP.
  REFRESH: it_mkpf, it_vbfa.
  APPEND LINES OF it_mkpf_temp[] TO it_mkpf[].
  APPEND LINES OF it_vbfa_temp[] TO it_vbfa[].
  REFRESH: it_mkpf_temp, it_vbfa_temp.
**** END OF MOD-010 INSERT
  LOOP AT it_mkpf.
* get VBFA (to link mkpf-xblnr TO vbap-vbeln)
    READ TABLE it_vbfa ASSIGNING <l_vbfa>
          WITH KEY vbeln = it_mkpf-mblnr posnn = it_mkpf-zeile.
    "BINARY SEARCH."--MOD-008
    CHECK sy-subrc = 0.
* get VBAP
    READ TABLE it_vbap ASSIGNING <l_vbap>
          WITH KEY vbeln = <l_vbfa>-vbelv posnr = <l_vbfa>-posnv
          BINARY SEARCH  .
    CHECK sy-subrc = 0.

* Move data from VBAP TO out
    CLEAR it_out.
    MOVE-CORRESPONDING <l_vbap> TO it_out.
*************Being of mod-010 insert
    IF it_out IS NOT INITIAL.
      CLEAR: ls_t001.
      READ TABLE gt_t001 INTO ls_t001
        WITH key BWKEY = it_out-werks.
      IF sy-subrc = 0.
        it_out-waers = ls_t001-waers.
      ENDIF.
    ENDIF.
************Begin of Mod-010 Insert
    CLEAR it_out-prodh.
*   it_out-prodh = <l_vbap>-prodh+4(4)."MOD-009--
    it_out-gac   = <l_vbap>-prodh+0(4)."MOD-009++
    it_out-pgc   = <l_vbap>-prodh+4(4)."MOD-009++
    it_out-prodh = <l_vbap>-prodh."MOD-009++
*Begin of MOD-009++
    READ TABLE it_vbak ASSIGNING <l_vbak> WITH KEY vbeln = <l_vbap>-vgbel.
    IF sy-subrc EQ 0.
      MOVE:  <l_vbak>-vkgrp TO it_out-vkgrp,
             <l_vbak>-vkbur TO it_out-vkbur.
    ENDIF.
*End of MOD-009++
    IF <l_vbap>-lfgsa EQ 'C'.
      it_out-compldel = '1'.
    ELSE.
      it_out-compldel = '0'.
    ENDIF.
    MOVE-CORRESPONDING it_mkpf TO it_out.

*MARC
    READ TABLE it_marc WITH KEY matnr = <l_vbap>-matnr
                                werks = <l_vbap>-werks
                                          BINARY SEARCH.
    IF sy-subrc EQ 0.
      it_out-prctr = it_marc-prctr.
      IF it_marc-dismm EQ 'Z5'.
        it_out-stockpol = 'ST'.
      ELSEIF it_marc-dismm EQ 'Z6' OR
             it_marc-dismm EQ 'Z7'.
        it_out-stockpol = 'NS'.
      ENDIF.
    ENDIF.
*MVKE
    READ TABLE it_mvke WITH KEY matnr = <l_vbap>-matnr
                                vkorg = <l_vbap>-vkorg
                         BINARY SEARCH  .
    IF sy-subrc EQ 0.
      IF it_mvke-mtpos EQ 'ZDTC'.
        it_out-distri_mode = 'DTC'.
      ELSEIF it_mvke-mtpos EQ 'NORM'.
        IF it_mvke-mvgr4 EQ ''.
          it_out-distri_mode = 'NDTC'.
        ELSEIF it_mvke-mvgr4 EQ 'LCL'.
          it_out-distri_mode = 'LCL'.
        ENDIF.
      ENDIF.
    ENDIF.

*MBEW
    READ TABLE it_mbew WITH KEY matnr = <l_vbap>-matnr
                                bwkey = <l_vbap>-werks
                   BINARY SEARCH
                                .
    IF sy-subrc EQ 0.
      it_out-stprs = it_mbew-stprs.
* begin of insert MOD-004
      it_out-verpr = it_mbew-verpr.
* end of insert MOD-004
    ENDIF.


*EORD
    READ TABLE it_eord WITH KEY matnr = <l_vbap>-matnr
                                werks = <l_vbap>-werks
                                flifn = 'X'
                   BINARY SEARCH .
    IF sy-subrc EQ 0.
      it_out-lifnr = it_eord-lifnr.
    ELSE.
*There could only be 1 line not indicated as fixed
      READ TABLE it_eord WITH KEY matnr = <l_vbap>-matnr
                                  werks = <l_vbap>-werks
                       BINARY SEARCH.
      IF sy-subrc EQ 0.
        it_out-lifnr = it_eord-lifnr.
      ELSE.
        CLEAR it_eord.
      ENDIF.
    ENDIF.


*Read the component link
    CLEAR it_comp.
    READ TABLE it_comp WITH KEY vbeln_adv = <l_vbap>-vbeln
                                posnr_adv = <l_vbap>-posnr
                                BINARY SEARCH.
    IF sy-subrc <> 0.
      CLEAR it_comp.
    ENDIF.

*VBEP
    READ TABLE it_vbep WITH KEY vbeln = <l_vbap>-vbeln
                                posnr = <l_vbap>-posnr
                                BINARY SEARCH.
    IF sy-subrc EQ 0.
*        IT_OUT-EDATU = IT_VBEP-EDATU.
*        IT_OUT-WMENG = IT_VBEP-WMENG.
      IF it_vbep-ettyp EQ 'Z2'.
        IF it_comp-sobkz EQ 'E'.
          it_out-dtc_sfs = 'DTC'.
        ELSE.
          it_out-dtc_sfs = 'SFS'.
        ENDIF.
      ELSE.
        IF it_vbep-ettyp EQ 'ZB'.
          it_out-dtc_sfs = 'DTC'.
        ELSE.
          it_out-dtc_sfs = 'SFS'.
        ENDIF.
      ENDIF.
    ENDIF.

**Direction
    IF it_mkpf-shkzg EQ 'S'.         " H is the normal outshippment
      it_out-menge = -1 * it_out-menge.
    ENDIF.

*Order reason text
    IF NOT <l_vbap>-augru IS INITIAL.
      READ TABLE it_tvaut WITH KEY augru = <l_vbap>-augru
                                   spras = sy-langu
                                   BINARY SEARCH.
      IF sy-subrc NE 0.
        READ TABLE it_tvaut WITH KEY augru = <l_vbap>-augru
                                     spras = 'E'
                                     BINARY SEARCH.
        IF sy-subrc EQ 0.
          it_out-bezei = it_tvaut-bezei.
        ENDIF.
      ELSE.
        it_out-bezei = it_tvaut-bezei.
      ENDIF.
      CLEAR it_tvaut.
    ENDIF.

** Begin of Mod-003 (Satya) - Fill itab with Sales-District
*VBKD
    READ TABLE it_vbkd WITH KEY vbeln = <l_vbap>-vbeln  "+Mod-003 (Satya)
                                BINARY SEARCH.          "+Mod-003 (Satya)
    IF sy-subrc EQ 0.                                   "+Mod-003 (Satya)
      it_out-bzirk = it_vbkd-bzirk.                     "+Mod-003 (Satya)
    ENDIF.                                              "+Mod-003 (Satya)
** End of Mod-003 (Satya)

    MOVE <l_vbfa>-vbelv TO it_out-vbeln.        " the SO doc number.
    MOVE <l_vbfa>-posnv TO it_out-posnr.        " the SO doc number.
    APPEND it_out.
*    ENDLOOP.                          "AIR23037
  ENDLOOP.


ENDFORM.                    "process_data
*&---------------------------------------------------------------------*
*&      Form  check_authorisation
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_authorisation .
  DATA: t_tvko LIKE STANDARD TABLE OF tvko WITH HEADER LINE.

  FREE t_tvko.
  SELECT *
  FROM tvko
  INTO TABLE t_tvko WHERE vkorg IN so_vkorg.


  LOOP AT t_tvko.
    AUTHORITY-CHECK OBJECT 'V_VBAK_VKO'
                    ID     'VKORG' FIELD t_tvko-vkorg
                    ID     'VTWEG' DUMMY
                    ID     'SPART' DUMMY
                    ID     'ACTVT' DUMMY.

    IF sy-subrc = 4.
*         No authorisation to display data from Sales Organisation
*         p_vkorg
      MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '006'
                               WITH t_tvko-vkorg.
    ELSEIF sy-subrc <> 0.
*         Error checking authorization.
      MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '004'.
    ENDIF.

  ENDLOOP.


  DATA: t_t001w LIKE STANDARD TABLE OF t001w WITH HEADER LINE.
  FREE t_t001w.
  SELECT *
  FROM t001w
  INTO TABLE t_t001w WHERE werks IN so_werks.

  LOOP AT t_t001w.
    AUTHORITY-CHECK OBJECT 'M_MATE_WRK'
             ID 'ACTVT' DUMMY
             ID 'WERKS' FIELD t_t001w-werks.
    IF sy-subrc = 4.
*   No authorisation to display data from Sales Organisation p_vkorg
      MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '010' WITH t_t001w-werks.
      EXIT.
    ELSEIF sy-subrc <> 0.
*   Error checking authorization.
      MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '004'.
      EXIT.
    ENDIF.
  ENDLOOP.
ENDFORM.                    " check_authorisation


*&---------------------------------------------------------------------*
*&      Form  SEND2SPOOL
*&---------------------------------------------------------------------*
FORM send2spool .

  DATA:
    fnam             LIKE rlgrap-filename,
    it_dd03l         LIKE dd03l OCCURS 0 WITH HEADER LINE,
    it_dd04t         LIKE dd04t OCCURS 0 WITH HEADER LINE,
    it_outxls(4096)  TYPE c OCCURS 0,
    wa_outxls(4096)  TYPE c,
    lv_alvnames(1)   TYPE c.


  CONSTANTS:
    c_tab TYPE c VALUE cl_abap_char_utilities=>horizontal_tab.

*   Get fields of structure 'YSE_SL_SCRAP_OUT'
  SELECT *
         FROM dd03l
         INTO TABLE it_dd03l
        WHERE tabname = 'YSE_SD_KP03_OUTPUT'.

  lv_alvnames = 'X'.
  IF lv_alvnames = 'X'.
* we use the alv names
    PERFORM create_fieldcat.    " into lt_fieldcat
  ELSE.

*   Get the descriptions of the fields in the structure
    SELECT *
           FROM dd04t
           INTO TABLE it_dd04t
            FOR ALL ENTRIES IN it_dd03l
          WHERE rollname EQ it_dd03l-rollname
            AND ddlanguage EQ 'EN'.
  ENDIF.

* Build filename
  v_dat = sy-datum.
  v_tim = sy-uzeit.
  user_name = sy-uname.
  CONCATENATE '/var/load/' sy-sysid '/UK/original/YSE_KP3_'
              user_name '_' v_dat '_' v_tim '.TXT'
         INTO fnam.

* Make the output table ; delimited
  CALL FUNCTION 'SAP_CONVERT_TO_CSV_FORMAT'
    TABLES
      i_tab_sap_data       = it_out
    CHANGING
      i_tab_converted_data = it_outxls
    EXCEPTIONS
      conversion_failed    = 1
      OTHERS               = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

* Open file
  OPEN DATASET fnam FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.
  IF sy-subrc <> 0.
    WRITE 'Error opening file. Action aborted.'.
    EXIT.
  ENDIF.

* Write header line
  CLEAR wa_outxls.

  SORT it_dd03l BY position.
  LOOP AT it_dd03l.

    IF lv_alvnames = 'X'.
      READ TABLE lt_fieldcat INTO ls_fieldcat WITH KEY fieldname = it_dd03l-fieldname.
      IF sy-subrc = 0.
        CONCATENATE wa_outxls ls_fieldcat-coltext c_tab  INTO wa_outxls.
      ELSE.
        CONCATENATE wa_outxls it_dd03l-fieldname c_tab INTO wa_outxls.
      ENDIF.
    ELSE.
      READ TABLE it_dd04t WITH KEY rollname = it_dd03l-rollname.
      IF wa_outxls IS INITIAL.
        wa_outxls = it_dd04t-reptext.
      ELSE.
        CONCATENATE wa_outxls c_tab it_dd04t-reptext INTO wa_outxls.
      ENDIF.
    ENDIF.
  ENDLOOP.
  TRANSFER wa_outxls TO fnam.

* Process lines
  LOOP AT it_outxls INTO wa_outxls.
    REPLACE ALL OCCURRENCES OF ';' IN wa_outxls WITH c_tab.
    TRANSFER wa_outxls TO fnam.
  ENDLOOP.

  CLOSE DATASET fnam.

  WRITE: 'Report output written to file: ',
         fnam.

ENDFORM.                    " SEND2SPOOL
*&---------------------------------------------------------------------*
*&      Form  FILL_UP_MATERIAL_SALES_TEXT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM fill_up_material_sales_text .
* Begin of Mod-006 (Satya)   T#10125 - Material Sales Text from SO Item

  DATA: wa_tdspras LIKE stxh-tdspras,
        wa_tdname  LIKE stxh-tdname.

  DATA: l_tdname TYPE char16.

  DATA: lt_hdrtxt_lines TYPE STANDARD TABLE OF tline INITIAL SIZE 0.
  DATA: lx_hdrtxt_lines TYPE tline,
        tt_hdrtxt_lines TYPE aco_string.


* fill in PO Header Text in table
*

  CLEAR wa_it_vbap.
  CLEAR wa_tdspras.
  CLEAR wa_tdname.
  LOOP AT it_vbap INTO   wa_it_vbap.
    CONCATENATE wa_it_vbap-vbeln wa_it_vbap-posnr INTO l_tdname.

    SELECT SINGLE tdspras INTO wa_tdspras
    FROM stxh    WHERE tdobject = 'VBBP'
                 AND   tdname   = l_tdname
                 AND   tdid     = '0001'.
    IF sy-subrc = 0.
      SELECT SINGLE tdname INTO wa_tdname
        FROM stxl  WHERE relid    = 'TX'
                   AND   tdobject = 'VBBP'
                   AND   tdname   = l_tdname
                   AND   tdid     = '0001'
                   AND   tdspras  = wa_tdspras.
      IF sy-subrc = 0.
        CLEAR tt_hdrtxt_lines.
        CLEAR lx_hdrtxt_lines.
        CLEAR lt_hdrtxt_lines.
        REFRESH lt_hdrtxt_lines.

        CALL FUNCTION 'READ_TEXT'
          EXPORTING
*         CLIENT                        = SY-MANDT
            id                            = '0001'
            language                      = wa_tdspras
            name                          = wa_tdname
            object                        = 'VBBP'
*         ARCHIVE_HANDLE                = 0
*         LOCAL_CAT                     = ' '
*       IMPORTING
*         HEADER                        =
          TABLES
            lines                         =  lt_hdrtxt_lines
*       EXCEPTIONS
*         ID                            = 1
*         LANGUAGE                      = 2
*         NAME                          = 3
*         NOT_FOUND                     = 4
*         OBJECT                        = 5
*         REFERENCE_CHECK               = 6
*         WRONG_ACCESS_TO_ARCHIVE       = 7
*         OTHERS                        = 8
                  .
        IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ELSE.
          " Get long text into final table variable
          LOOP AT lt_hdrtxt_lines INTO lx_hdrtxt_lines.
            CONCATENATE tt_hdrtxt_lines lx_hdrtxt_lines-tdline
                                                 INTO tt_hdrtxt_lines.
            CLEAR lx_hdrtxt_lines.
          ENDLOOP.

          CONCATENATE wa_it_vbap-zz_matl_text tt_hdrtxt_lines
                                               INTO wa_it_vbap-zz_matl_text.

        ENDIF.

      ENDIF.
    ENDIF.

    MODIFY it_vbap  FROM   wa_it_vbap.
    CLEAR wa_it_vbap.

  ENDLOOP.

* End of Mod-006 (Satya)

ENDFORM.                    " FILL_UP_MATERIAL_SALES_TEXT

********************Begin of MOD-010 INSERT
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_CURRENCY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_GET_CURRENCY .
  SELECT   t001k~BWKEY
           t001k~BUKRS
           t001~WAERS
    FROM t001k
    INNER JOIN t001
    on t001k~bukrs = t001~bukrs
    INTO TABLE gt_t001
    WHERE t001k~BWKEY in so_werks.
ENDFORM.                    " FRM_GET_CURRENCY
********************End of MOD-010 INSERT
