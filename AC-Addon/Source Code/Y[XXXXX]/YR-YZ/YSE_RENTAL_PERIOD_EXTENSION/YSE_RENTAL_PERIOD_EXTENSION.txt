*&---------------------------------------------------------------------*
*& Report  YSE_RENTAL_PERIOD_EXTENSION                                 *
*&                                                                     *
*&---------------------------------------------------------------------*
*&                                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*

************************************************************************
*Program ID           : YSE_RENTAL_PERIOD_EXTENSION
*Program Title        : Semi-automatic extension of estimated rental
*period extension
*Author               : Andr¨¦ Blommaert
*Date                 : 16.10.2006
*Change Request Number:
*CD1K907028-D015-RENT-OTH-contract_end_date_extension
*Description         : The purpose of this program is to extend
*individual contract-     *
*periods or to extend the periods of all selected contracts        *
*==================================================================*
* Copied From         : (Cloned Program)
* Title               : (Program Title)
* Other Related obj   : (Object names)
*==================================================================*
* Change History Log
*------------------------------------------------------------------*
*Mod. no.|  Date    | Name           | Correction Number  | Change
*Reference #  *
*------------------------------------------------------------------*
*MOD-001 |11/12/2007| CVM            | issue 3733         |CVM001
*
*------------------------------------------------------------------*
*MOD-001 |11/12/2007| Pdudas          | issue 4281        |DUD01
*  Add Sales office and sales group




* Description:
* the Function call to  SD_SALESDOCUMENT_CHANGE is expand with the
* tables lv_item_in and lv_item_inx.
* The reason for this is that now the userexit USEREXIT_CHECK_VBAP()
* is triggered, here is   screening if an equipment is already used
* during the same period is executed !!!!

*------------------------------------------------------------------*
* MOD-002 |dd/mm/yyyy| xxxxxxxxxxxxxx | XXXXxxxxxx
*
* Description:
********************************************************************
REPORT  yse_rental_period_extension   MESSAGE-ID yse_rental          .

*----------------------------------------------------------------------*
*       CLASS lcl_event_handler DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_event_handler DEFINITION.
  PUBLIC SECTION.
    METHODS:
*   Double click control
*    handle_double_click
*          FOR EVENT double_click OF cl_gui_alv_grid
*          IMPORTING e_row e_column,
*   Hotspot click control
    handle_hotspot_click
          FOR EVENT hotspot_click OF cl_gui_alv_grid
          IMPORTING e_row_id e_column_id es_row_no,

 handle_user_command
        FOR EVENT user_command OF cl_gui_alv_grid
            IMPORTING e_ucomm.


ENDCLASS.                    "lcl_event_handler DEFINITION

*---------------------------------------------------------------------*
*       CLASS lcl_event_handler IMPLEMENTATION
*---------------------------------------------------------------------*
CLASS lcl_event_handler IMPLEMENTATION.
* Handle double click
*  METHOD handle_double_click.
*    PERFORM handle_double_click USING e_row e_column.
*  ENDMETHOD.
* Handle hotspot click
  METHOD handle_hotspot_click.
    PERFORM handle_hotspot_click USING e_row_id e_column_id es_row_no.
  ENDMETHOD.                    "handle_hotspot_click

  METHOD handle_user_command .
    CASE e_ucomm.
      WHEN 'BACK'.


    ENDCASE.

  ENDMETHOD.                    "handle_user_command


ENDCLASS.                    "lcl_event_handler IMPLEMENTATION


*****************************
* TABLES
****************************
TABLES: veda, vbak.


*****************************
* TYPE-POOLS
****************************

TYPE-POOLS: icon.

*****************************
* DATA
****************************
DATA: wa_action_date LIKE sy-datum.

DATA: BEGIN OF wa_contract.
        INCLUDE STRUCTURE yse_ale_contr_ext.
DATA:    END OF wa_contract.
DATA: BEGIN OF wa_contract2.
        INCLUDE STRUCTURE yse_ale_contr_ext.
DATA: objnr LIKE vbak-objnr.
DATA:    END OF wa_contract2.

DATA: wa_vtweg LIKE vbak-vtweg.
*****************************
* INTERNAL TABLES
****************************
DATA: it_contract LIKE wa_contract OCCURS 0 .
DATA: it_contract2 LIKE wa_contract2 OCCURS 0 .
DATA: it_vbfa LIKE vbfa OCCURS 0 WITH HEADER LINE.
DATA: it_veda LIKE veda OCCURS 0 WITH HEADER LINE.

*****************************
* ALV DATA
****************************

DATA: obj_custom_container TYPE REF TO cl_gui_custom_container.
DATA: obj_alv_grid TYPE REF TO cl_gui_alv_grid.
DATA: obj_event_handler TYPE REF TO lcl_event_handler.
DATA: wa_layout TYPE lvc_s_layo.
DATA: it_sort TYPE lvc_t_sort.
DATA: it_fieldcat TYPE lvc_t_fcat.
DATA : wa_stabile TYPE lvc_s_stbl.
DATA: wa_mass_flag.
DATA: ok_code TYPE sy-ucomm.
DATA: it_rows  TYPE lvc_t_row.       " table selected rows ALV grid


****************************
* MASS UPDATE DATA
****************************
DATA: n    TYPE i.
DATA: answer TYPE c,
      commit_ok TYPE c.

RANGES:  lr_pstyv FOR vbap-pstyv,
         lr_auart FOR vbak-auart.

*****************************
* SELECTION SCREEN
****************************

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.

SELECT-OPTIONS: s_vbeln FOR veda-vbeln.

PARAMETERS: p_vkorg LIKE vbak-vkorg OBLIGATORY .
PARAMETERS: p_vtweg LIKE tvkov-vtweg DEFAULT '21' MODIF ID a.

PARAMETERS: p_wk_bef(2) TYPE n DEFAULT 1 OBLIGATORY.

PARAMETERS: p_wk_aft(2) TYPE n DEFAULT 1 OBLIGATORY.
SELECT-OPTIONS:
            s_vkbur  FOR vbak-vkbur,
            s_vkgrp  FOR vbak-vkgrp.



SELECTION-SCREEN END OF BLOCK b1.



*****************************
* AT SELECTION SCREEN
****************************
AT SELECTION-SCREEN OUTPUT.
  LOOP AT SCREEN.
    IF screen-group1 = 'A'.
      screen-input = '0'.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.

  GET PARAMETER ID 'VKO' FIELD p_vkorg.

AT SELECTION-SCREEN ON p_vkorg.


  SELECT SINGLE vtweg INTO wa_vtweg
      FROM tvkov
      WHERE vkorg EQ p_vkorg
      AND vtweg EQ p_vtweg.
  IF sy-subrc NE 0.
    MESSAGE e003 WITH p_vtweg p_vkorg.
  ENDIF.

  PERFORM check_authorization.


*****************************
* START-OF-SELECTION
****************************
INITIALIZATION.

  PERFORM fill_ranges.

START-OF-SELECTION.

  wa_action_date = sy-datum + ( p_wk_bef * 7 ).

* SELECT ALL CONTRACTS WITH STARTING DATE IN THE PAST OR TODAY
* AND ENDING DATE BEFORE ACTION DATE - ONLY RENTAL ITEMS
* AND NOT CANCELLED


  SELECT a~vbeln
        a~posnr
        b~kunnr
        c~name1
        a~arktx
        b~vkbur b~vkgrp

        INTO CORRESPONDING FIELDS OF TABLE it_contract
        FROM vbap AS a

        INNER JOIN vbak AS b
          ON a~vbeln = b~vbeln
        INNER JOIN kna1 AS c
          ON b~kunnr = c~kunnr
*        WHERE a~pstyv = 'ZMVN' " RENTAL ITEMS
        WHERE   a~vbeln IN s_vbeln
           AND b~vkbur IN s_vkbur
           AND b~vkgrp IN s_vkgrp
           AND  a~pstyv IN lr_pstyv " RENTAL ITEMS
*          AND b~auart = 'ZQP'    "CONTRACTS
           AND b~auart IN lr_auart
           AND b~vkorg EQ p_vkorg
           AND b~vtweg EQ p_vtweg.

*  SELECT
*      a~kunnr
*      a~guebg
*      a~gueen
*      b~vbeln
*      b~posnr
*      b~arktx
*      c~name1
*
**         b~objnr
*
*  INTO CORRESPONDING FIELDS OF TABLE it_contract
*    FROM vbap AS b
*      INNER JOIN vbak AS a
*        ON a~vbeln = b~vbeln
*      INNER JOIN kna1 AS c
*        ON a~kunnr = c~kunnr
*      INNER JOIN veda AS d
*        ON b~vbeln = d~vbeln
*    WHERE a~auart = 'ZQP'    "CONTRACTS
*      AND a~vbeln IN s_vbeln
*       AND a~vkorg EQ p_vkorg
*       AND a~vtweg EQ p_vtweg
*       AND b~pstyv = 'ZMVN'" RENTAL ITEMS
*       AND  d~vbegdat <= sy-datum
*       AND d~venddat <= wa_action_date.
**       AND d~veindat EQ space.
*

* DELETE ALL CONTRACTS THAT ARE CALLED OFF

  SELECT * INTO TABLE it_vbfa
  FROM vbfa
  FOR ALL ENTRIES IN it_contract
  WHERE vbelv = it_contract-vbeln
  AND   posnv = it_contract-posnr
  AND vbtyp_n = 'H'. "RETURNS

  SORT it_vbfa BY vbelv posnv.

* FIND CONTRACT ITEM BEGIN AND ENDDATE IN TABLE VEDA
* VEDA MAY NOT BE INCLUDED IN THE JOIN BECAUSE POSNR IS
* NOT FILLED IN IN VEDA WHEN THE BEGIN AND ENDDATES FOR
*THE ITEM ARE NOT DIFFERENT FROM OVERALL BEGIN AND ENDDATE
* OF THE CONTRACT


  SELECT * INTO TABLE it_veda
  FROM veda
  FOR ALL ENTRIES IN it_contract
  WHERE vbeln = it_contract-vbeln.


  SORT it_veda BY vbeln vposn.


  LOOP AT it_contract INTO wa_contract.
    READ TABLE it_vbfa WITH KEY  vbelv = wa_contract-vbeln
                                 posnv = wa_contract-posnr
                                 BINARY SEARCH.
    IF sy-subrc EQ 0.
      DELETE it_contract.
      CONTINUE.
    ENDIF.
    READ TABLE it_veda WITH KEY  vbeln = wa_contract-vbeln
                                 vposn = wa_contract-posnr
                                 BINARY SEARCH.
    IF sy-subrc EQ 0.

      IF it_veda-vbegdat <= sy-datum
      AND it_veda-venddat < wa_action_date
       AND it_veda-veindat < '19000101'.

        wa_contract-vbegdat = it_veda-vbegdat.
        wa_contract-venddat = it_veda-venddat.
        MODIFY it_contract FROM wa_contract.
        CONTINUE.
      ELSE.
        DELETE it_contract.
        CONTINUE.
      ENDIF.
    ELSE.
      READ TABLE it_veda WITH KEY  vbeln = wa_contract-vbeln
                                  BINARY SEARCH.
      IF sy-subrc EQ 0.
        IF it_veda-vbegdat <= sy-datum
         AND it_veda-venddat < wa_action_date
         AND  it_veda-veindat < '19000101'.
*          OR it_veda-veindat IS IN ).
          .
*        AND it_veda-veindat EQ space.

          wa_contract-vbegdat = it_veda-vbegdat.
          wa_contract-venddat = it_veda-venddat.
          MODIFY it_contract FROM wa_contract.
          CONTINUE.
        ENDIF.
      ENDIF.
    ENDIF.

    DELETE it_contract .

  ENDLOOP.

  SORT it_contract BY vbeln posnr.
  DELETE ADJACENT DUPLICATES FROM it_contract COMPARING vbeln posnr.

  DESCRIBE TABLE it_contract LINES n.

  IF sy-tfill EQ 0.

    WRITE: / 'No contracts found for this selection !'(002).


  ELSE.


    CALL SCREEN 100.
  ENDIF.


  INCLUDE yse_contr_rental_period_extf02.

  INCLUDE yse_contr_rental_period_exto01.

  INCLUDE yse_contr_rental_period_exto02.

  INCLUDE yse_contr_rental_period_exti01.
*&---------------------------------------------------------------------*
*&      Form  Check_Authorization
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_authorization .

  AUTHORITY-CHECK OBJECT 'V_VBAK_VKO'
                      ID 'VKORG' FIELD p_vkorg
                      ID 'VTWEG' FIELD p_vtweg
                      ID 'SPART' DUMMY
                      ID 'ACTVT' DUMMY.

  IF sy-subrc = 4.
*   No authorisation to display data from Sales Organisation p_vkorg
    MESSAGE ID 'YSE_RENTAL' TYPE 'E' NUMBER '041' WITH p_vkorg p_vtweg.
  ELSEIF sy-subrc <> 0.
*   Error checking authorization.
    MESSAGE ID 'YSE_RENTAL' TYPE 'E' NUMBER '046'.
  ENDIF.

ENDFORM.                    " Check_Authorization
*&---------------------------------------------------------------------*
*&      Form  mass_update
*&---------------------------------------------------------------------*

FORM mass_update .

  DATA:  lv_index   TYPE lvc_index,    " index alv grid
         lv_nr      TYPE i.

* MASS UPDATE MUST NOT BE DONE TWICE
  IF wa_mass_flag EQ 'N'.
    MESSAGE e001.  "Execute Mass Update only once  !!!
  ENDIF.


*---------POP UP--------------------------------------------------------*

*Select message needed for the pop up.
  SELECT SINGLE * FROM  t100
         WHERE  sprsl  = 'EN'
         AND    arbgb  = '0K'
         AND    msgnr  = '064'.

*Select the other elements for the pop up
*--- number of contrancts (cf. describe)
  DESCRIBE TABLE it_rows LINES lv_nr.
  question = lv_nr.
*--- additional tekst
  CONCATENATE       question
                  ' selected contract(s) will be updated.'
*                  t100-text
             INTO question
             SEPARATED BY space.
  CONCATENATE       question
                  '.'
             INTO question.
  CONCATENATE       question
                  'Are you sure you want to execute the mass update?'
             INTO question
             SEPARATED BY space.

*Create the pop up
  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = 'Mass Update'(004)
      text_question         = question
      display_cancel_button = space
    IMPORTING
      answer                = answer.

*If the user want to execute the mass update (answer = 1) continue, else exit.
  IF answer <> '1'.
    EXIT.
  ENDIF.
*---------------------------------------------------------------------------*


* WE INITIALIZE THE CREATED APPL LOG OBJECT YSE_CONTR AND FILL IN HEADER INFO FOR
* THIS LOG

  PERFORM initialize_application_log.

  lv_order_header_inx-updateflag = 'U'.
* FLAG ON ENDDATE AND ACTION DATE- IT WILL BE CHANGED
* AND RULES FOR ENDDATE AND ACTION DATE (THEY WILL BE INITIALISED)
  lv_it_sales_contract_inx-updateflag = 'U'.
  lv_it_sales_contract_inx-con_en_dat = 'X'.
  lv_it_sales_contract_inx-con_en_rul = 'X'.

* ACTION IS NO MORE USED (CUSTOMIZING)
*      lv_it_sales_contract_inx-action_dat = 'X'.
*      lv_it_sales_contract_inx-act_datrul = 'X'.

  APPEND lv_it_sales_contract_inx.

  lv_order_header_inx-ct_valid_t = 'X'.

  LOOP AT it_rows INTO lv_index .
    READ TABLE it_contract  INDEX lv_index INTO wa_contract.
    IF sy-subrc EQ 0.
*      LOOP AT it_contract INTO wa_contract.
      REFRESH:lv_it_return, lv_it_sales_contract_in.
      CLEAR: lv_it_return.
* * CONTRACT PERIOD WILL BE EXTENDED WITH (7 * NR OF WEEKS ) DAYS
* * IF ENDDATE OF THE CONTRACT IS EMPTY WE TAKE TODAY AS PREVIOUS ENDDATE

      IF  NOT wa_contract-venddat IS INITIAL.
        wa_contract-venddat =  wa_contract-venddat + ( 7 * p_wk_aft ).
      ELSE.

        wa_contract-venddat = sy-datum + ( 7 * p_wk_aft ).
      ENDIF.
* IF NEW ENDDATE IS STILL IN THE PAST WE TAKE SY-DATUM AS BASE FOR THE EXTENSION
      IF    wa_contract-venddat < sy-datum.
        wa_contract-venddat = sy-datum + ( 7 * p_wk_aft ).
      ENDIF.

* AS ACTION DATE WE TAKE TOMORROW OR OLD ENDDATE + 1
* ACTION DATE MUST BE IN THE FUTURE
* ATTENTION!!
* ACTION DATE IS NO MORE USED (CUSTOMIZING)
      lv_it_sales_contract_in-con_st_dat = wa_contract-vbegdat.
      lv_it_sales_contract_in-con_en_dat = wa_contract-venddat.
*        lv_it_sales_contract_in-action_dat = wa_contract-venddat - ( 7 * p_wk_aft ).
*        IF lv_it_sales_contract_in-action_dat <= sy-datum.
*          lv_it_sales_contract_in-action_dat = sy-datum + 1.
*        ENDIF.
      APPEND lv_it_sales_contract_in.

      lv_order_header_in-ct_valid_t = wa_contract-venddat.

      CLEAR: lv_item_inx[],lv_item_in[].

      LOOP AT it_contract INTO wa_contract
      WHERE vbeln EQ wa_contract-vbeln.

        lv_item_in-itm_number  = wa_contract-posnr.
        APPEND lv_item_in.

        lv_item_inx-itm_number = wa_contract-posnr.
        lv_item_inx-updateflag = 'U'.
*        lv_item_inx-short_text = 'X'.
        APPEND lv_item_inx.
      ENDLOOP.

      CALL FUNCTION 'SD_SALESDOCUMENT_CHANGE'
        EXPORTING
          salesdocument               = wa_contract-vbeln
          order_header_in             = lv_order_header_in
          order_header_inx            = lv_order_header_inx
*           SIMULATION                  = ' '
*           INT_NUMBER_ASSIGNMENT       = ' '
*             BEHAVE_WHEN_ERROR           = ' '
*           BUSINESS_OBJECT             = ' '
*           CONVERT_PARVW_AUART         = ' '
*           CALL_FROM_BAPI              = ' '
*           LOGIC_SWITCH                =
*           I_CRM_LOCK_MODE             = ' '
*         IMPORTING
*           SALES_HEADER_OUT            =
*           SALES_HEADER_STATUS         =
        TABLES
          return                       = lv_it_return
           item_in                     = lv_item_in
           item_inx                    = lv_item_inx
*           SCHEDULE_IN                 =
*           SCHEDULE_INX                =
*           PARTNERS                    =
*           PARTNERCHANGES              =
*           PARTNERADDRESSES            =
*           SALES_CFGS_REF              =
*           SALES_CFGS_INST             =
*           SALES_CFGS_PART_OF          =
*           SALES_CFGS_VALUE            =
*           SALES_CFGS_BLOB             =
*           SALES_CFGS_VK               =
*           SALES_CFGS_REFINST          =
*           SALES_CCARD                 =
*           SALES_TEXT                  =
*           SALES_KEYS                  =
*           CONDITIONS_IN               =
*           CONDITIONS_INX              =
         sales_contract_in              = lv_it_sales_contract_in
        sales_contract_inx              = lv_it_sales_contract_inx
*           EXTENSIONIN                 =
*           ITEMS_EX                    =
*           SCHEDULE_EX                 =
*           BUSINESS_EX                 =
*           INCOMPLETE_LOG              =
*           EXTENSIONEX                 =
*           CONDITIONS_EX               =
*           SALES_SCHED_CONF_IN         =
*           DEL_SCHEDULE_EX             =
*           DEL_SCHEDULE_IN             =
*           DEL_SCHEDULE_INX            =
*           CORR_CUMQTY_IN              =
*           CORR_CUMQTY_INX             =
*           CORR_CUMQTY_EX              =
*           PARTNERS_EX                 =
*           TEXTHEADERS_EX              =
*           TEXTLINES_EX                =
*           BATCH_CHARC                 =
                .

* IF NO ERROR OCCURS WE DO A DATABASE COMMIT AND MODIFY THE ENDDATE ON THE ALV SCREEN
      CLEAR commit_ok.
      READ TABLE lv_it_return WITH KEY type = 'E'.
      IF sy-subrc NE 0.
        commit_ok = 'X'.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
     EXPORTING
       wait          = 'X'
*       IMPORTING
*         RETURN        =
                  .
        MODIFY  it_contract FROM wa_contract INDEX lv_index.

      ENDIF.
* WE COLLECT SUCCESS AND ERROR MESSAGES AND TRANSFER THEM TO THE APPL LOG TABLE
      LOOP AT lv_it_return WHERE type EQ 'E' OR type EQ 'S'.

        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'
*         IMPORTING
*           RETURN        =
                  .

        CLEAR lv_it_messages.

        lv_it_messages-msgty = lv_it_return-type.

        lv_it_messages-msgv1 = wa_contract-vbeln.
        lv_it_messages-msgv2 = wa_contract-posnr.


        IF  lv_it_return-type = 'S' AND commit_ok EQ 'X'.

* IF SUCCESS WE GIVE THE NEW ENDDATE OF THE CONTRACT/CONTRACT ITEM


          lv_it_messages-msgid = 'YSE_RENTAL'.
          lv_it_messages-msgno = '004'.
          lv_it_messages-probclass = '4'.
          lv_it_messages-msgv3 = wa_contract-venddat.
          APPEND lv_it_messages.
          EXIT.

        ELSE.

*          MOVE lv_it_return-message_v1 TO lv_it_messages-msgv1.
          lv_it_messages-msgid = lv_it_return-id.
          lv_it_messages-msgno = lv_it_return-number.


          lv_it_messages-probclass = '1'.
          APPEND lv_it_messages.

        ENDIF.

      ENDLOOP.
    ENDIF.
  ENDLOOP.

* WRITE INFO MESSAGE WITH NR OF ENTRIES AND APPL LOG INFO
* CVM.sn
*  DESCRIBE TABLE it_contract.
*  MESSAGE i002 WITH sy-tfill.
  MESSAGE i002 WITH lv_nr.
*CVM.en
  wa_mass_flag = 'N'.


  CALL FUNCTION 'APPL_LOG_WRITE_MESSAGES'
   EXPORTING
     object                    =  'YSE_CONTR_EXT'
*   SUBOBJECT                 = ' '
*   LOG_HANDLE                = ' '' '
     update_or_insert          = 'I'
  TABLES
    messages                  = lv_it_messages

   EXCEPTIONS
     object_not_found          = 1
     subobject_not_found       = 2
     OTHERS                    = 3
      .
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  CALL FUNCTION 'APPL_LOG_WRITE_DB'
    EXPORTING
      object                      = 'YSE_CONTR_EXT'
*   SUBOBJECT                   = ' '
*   LOG_HANDLE                  = ' '
*   UPDATE_TASK                 = ' '
     TABLES
       object_with_lognumber       = lv_it_prot_tab
       EXCEPTIONS
      object_not_found            = 1
      subobject_not_found         = 2
      internal_error              = 3
      OTHERS                      = 4.
  .
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  CLEAR ok_code.

ENDFORM.                    " mass_update
**&---------------------------------------------------------------------*
**&      Form  LEAVE_TO_SEL_SCREEN
**&---------------------------------------------------------------------*
*
FORM leave_to_sel_screen .

  CALL METHOD obj_custom_container->free.
  CALL METHOD cl_gui_cfw=>flush.
  IF sy-subrc NE 0.
* add your handling, for example
    CALL FUNCTION 'POPUP_TO_INFORM'
      EXPORTING
        titel = sy-repid
        txt2  = sy-subrc
        txt1  = 'Error in Flush'(009).
  ENDIF.
  LEAVE TO SCREEN 0.
ENDFORM.                    " LEAVE_TO_SEL_SCREEN

*Text symbol text£º
*001:Selections
*002:No contracts found for this selection !
*004:Mass Update
*009:Error in flush
*C01:Contract
*C02:Sold to nr
*C03:Sold to
*C04:Material description
*C05:Start date

*C06:End date
*Selection text£º
*P_VKORG:        Sales organisation
*P_VTWEG:        Distribution channel
*P_WK_AFT:        Prolongation (weeks)
*P_WK_BEF:        Action time (weeks before)
*S_VBELN:        Contract nr
*S_VKBUR:D       Sales office
*S_VKGRP:D       Sales group
