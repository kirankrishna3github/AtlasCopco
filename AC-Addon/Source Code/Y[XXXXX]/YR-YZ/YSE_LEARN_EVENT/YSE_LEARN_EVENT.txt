*&---------------------------------------------------------------------*
*& Report  YSE_LEARN_EVENT
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  YSE_LEARN_EVENT.

DATA: lt_events TYPE STANDARD TABLE OF string,
      ls_event  TYPe string, "STRING HAVE A CHANGABLE LENGTH
      lv_WUL    TYPE MATNR,
      lv_WUL2 TYPE C LENGTH 18.

*1. LOAD-OF-PROGRAM：
*程序开始执行时候自动调用
*这个事件在 SUBMIT，CALL TRANSACTION，PERFORM 等执行的时候系统会自动 调用这个事件。所以无需声明即可。
  load-OF-PROGRAM.
  APPEND '[Load of program]' to lt_events.
*2. INITIALIZATION
*（1）.只能用于报表程序
*（2）.在选择屏幕出现之前执行，如果用逻辑数据库 数据库的话，这个是唯一能够修改选择 数据库 屏幕初始值的地方。
*（3）.通常的用法是在这里给选择屏幕中的字段赋值。


PARAMETERS: p_matnr TYPE marc-matnr.

*3. AT SelectION-SCREEN
*（1）.其实就像一个 FORM，所以在这个事件里声明的变量都是局部变量。
*（2）.根据 SY-UCOMM 这个系统变量可以判断用户的命令 。
*（3）.在这个事件里响应的是屏幕上选择条件中的事件，例如 CHECKBOX 的选择与 否，RADIOBUTTON 的选择，LISTBOX 的选择等等。所以分为以下几个方面：
*##1. ... ON psel ：在 PARAMETER 变化是触发的事件
*##2. ... ON END OF sel ：Select-OPTION 触发的事件
*##3. ... ON VALUE-REQUEST FOR psel_low_high ：选择的帮助(F4)
*##4. ... ON HELP-REQUEST FOR psel_low_high ：选择的帮助(F1)
*##5. ... ON RADIOBUTTON GROUP radi ：单选按钮事件
*##6. ... ON BLOCK block ：框架的触发事件
*##7. ... OUTPUT ：响应屏幕上的事件，修改选择屏幕的唯一方法

*5. GET 获得逻辑数据库的值。前提是必须首先声明逻辑数据库。
END-OF-SelectION.
  APPEND '[END-OF-SelectION]' to lt_events.

  LOOP AT lt_events into ls_event.
    WRITE: / ls_event.
  ENDLOOP.
*6. END-OF-SelectION 第二屏幕显示完毕，结束处理。
*7. MODULE 这个是当你调用自己定义的屏幕时，响应屏幕事件的方法。
*8. ENDMODULE
*9. CHECK 只对逻辑数据库使用，检查是否取得数据。
*10. REJECT 同样只对逻辑数据库使用，退出。
*11. STOP 结束一个处理块。
*12. RETURN 返回一个处理块。

 INITIALIZATION.
  APPEND '[INITIALIZATION]' to lt_events.

  AT SELECTION-SCREEN.
  APPEND '[AT SELECTION-SCREEN]' to lt_events.

*4. START-OF-SelectION 报表程序必须执行的事件，在进入第二屏幕之前触发。
START-OF-SelectION.
  APPEND '[START-OF-SelectION]-test' to lt_events.

*Selection text：
*P_MATNR:D       .
