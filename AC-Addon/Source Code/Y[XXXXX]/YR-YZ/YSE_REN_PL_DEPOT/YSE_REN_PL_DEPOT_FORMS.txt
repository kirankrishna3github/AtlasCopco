*&---------------------------------------------------------------------*
*&  Include           YSE_REN_PL_DEPOT_FORMS                           *
*&---------------------------------------------------------------------*

************************************************************************
* Form S0100_DOUBLE_CLICK                                              *
************************************************************************
*      -->P_E_ROW_ID     text                                          *
*      -->P_E_COLUMN_ID  text                                          *
*      -->P_ES_ROW_NO    text                                          *
************************************************************************
* When a field in the ALV grid has been double clicked, load the       *
* detail overview for that period and rental depot.                    *
************************************************************************
FORM S0100_DOUBLE_CLICK  USING    P_ROW_ID
                                  P_COLUMN_ID
                                  PS_ROW_NO STRUCTURE LVC_S_ROID.

  RANGES:
    LR_VKBUR FOR IT_DEPOTS-VKBUR.

  FIELD-SYMBOLS:
    <WA_RESULT>.                  " Working area for Dyn output table

* Check that a valid line was doubleclicked
  CHECK NOT PS_ROW_NO-ROW_ID IS INITIAL.

* Get working area for output table
  ASSIGN LOCAL COPY OF INITIAL LINE OF <IT_RESULT> TO <WA_RESULT>.

* Read the line from the output table which was doubleclicked
  READ TABLE <IT_RESULT> INTO <WA_RESULT> INDEX PS_ROW_NO-ROW_ID.
  CHECK SY-SUBRC EQ 0.

* Determine the type of row which was clicked based on the description/type column
  ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
  GV_RTYPE = <DYN_FIELD>.
* Don't continue if rowtype is neither of the following
  IF      GV_RTYPE NE '01'
      AND GV_RTYPE NE '02'
      AND GV_RTYPE NE '03'
      AND GV_RTYPE NE '04'.
    EXIT.
  ENDIF.

* Get fiscal period of the line doubleclicked
  ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
  SV_PERIOD = <DYN_FIELD>+37(2).

* Fill range with depots for which details should be shown
  LR_VKBUR-SIGN = 'I'.
  LR_VKBUR-OPTION = 'EQ'.
* Check if a specific depot was chosen
  READ TABLE IT_DEPOTS WITH KEY VKBUR = P_COLUMN_ID.
  IF SY-SUBRC EQ 0.
*   If a depot column was clicked
    LR_VKBUR-LOW = P_COLUMN_ID.
    APPEND LR_VKBUR.
  ELSE.
*   If another column was clicked, add all depots
    LOOP AT IT_DEPOTS.
      LR_VKBUR-LOW = IT_DEPOTS-VKBUR.
      APPEND LR_VKBUR.
    ENDLOOP.
  ENDIF.

* Get GAC / PGC of the line doubleclicked
  ASSIGN COMPONENT GC_COL_GAC OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
  SV_GAC = <DYN_FIELD>.
  ASSIGN COMPONENT GC_COL_PGC OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
  SV_PGC = <DYN_FIELD>.

* Build detail output table
  CLEAR: IT_DETAIL, IT_DETAIL[].
  CASE GV_RTYPE.
    WHEN '01'.
      LOOP AT IT_COPA_RV WHERE FPERD EQ SV_PERIOD
                           AND VKBUR IN LR_VKBUR
                           AND WW006 EQ SV_GAC
                           AND WW007 EQ SV_PGC
                           AND OWNED EQ 'X'.
        IT_DETAIL-EQUNR = IT_COPA_RV-EQUNR.
        IT_DETAIL-VKBUR = IT_COPA_RV-VKBUR.
        IT_DETAIL-WW006 = IT_COPA_RV-WW006.
        IT_DETAIL-WW007 = IT_COPA_RV-WW007.
        IT_DETAIL-VREVU = IT_COPA_RV-VREVU.
        APPEND IT_DETAIL.
      ENDLOOP.
    WHEN '02'.
      LOOP AT IT_COPA_RV WHERE FPERD EQ SV_PERIOD
                           AND VKBUR IN LR_VKBUR
                           AND WW006 EQ SV_GAC
                           AND WW007 EQ SV_PGC
                           AND OWNED EQ SPACE.
        IT_DETAIL-EQUNR = IT_COPA_RV-EQUNR.
        IT_DETAIL-VKBUR = IT_COPA_RV-VKBUR.
        IT_DETAIL-WW006 = IT_COPA_RV-WW006.
        IT_DETAIL-WW007 = IT_COPA_RV-WW007.
        IT_DETAIL-VREVU = IT_COPA_RV-VREVU.
        APPEND IT_DETAIL.
      ENDLOOP.
    WHEN '03' OR '04'.
      LOOP AT IT_COPA_CO WHERE FPERD EQ SV_PERIOD
                           AND VKBUR IN LR_VKBUR.
        IT_DETAIL-EQUNR = IT_COPA_CO-EQUNR.
        IT_DETAIL-VKBUR = IT_COPA_CO-VKBUR.
        IF GV_RTYPE = '03'.
          IT_DETAIL-VREVU = IT_COPA_CO-ADEPR.
        ELSE.
          IT_DETAIL-VREVU = IT_COPA_CO-VSERV.
        ENDIF.
        IF NOT IT_DETAIL-VREVU IS INITIAL.
          APPEND IT_DETAIL.
        ENDIF.
      ENDLOOP.

  ENDCASE.

  CALL SCREEN 0200.

ENDFORM.                    " S0100_DOUBLE_CLICK

*&---------------------------------------------------------------------*
*&      Form  CHECK_AUTHORIZATION
*&---------------------------------------------------------------------*
FORM CHECK_AUTHORIZATION.

  DATA:
    IT_T001K TYPE STANDARD TABLE OF T001K WITH HEADER LINE.

* Get the plants for this company code.
  SELECT      *
         FROM T001K
         INTO TABLE IT_T001K
        WHERE BUKRS = P_BUKRS.

** Check for every plant if authorisation OK
*  LOOP AT IT_T001K.
*
*    AUTHORITY-CHECK OBJECT 'I_SWERK'
*             ID 'TCD' DUMMY
*             ID 'SWERK' FIELD IT_T001K-BWKEY.
*
**   No authorisation to display data
*    IF SY-SUBRC = 4.
*     MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '008' WITH P_BUKRS.
*      EXIT.
**   Error checking authorization.
*    ELSEIF SY-SUBRC <> 0.
*      MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '004'.
*      EXIT.
*    ENDIF.
*  ENDLOOP.

ENDFORM.                    " CHECK_AUTHORIZATION

*&---------------------------------------------------------------------*
*&      Form  CHECK_PERIOD
*&---------------------------------------------------------------------*
* Checks if start and end period were entered, search for missing ones *
* and calculate number of periods to foresee number of columns in ALV. *
*&---------------------------------------------------------------------*
FORM CHECK_PERIOD.

* Check that endperiod is greater or equal to beginperiod
  IF P_START GT P_END.
    MESSAGE E070.
  ENDIF.

* Number of periods in this selection
  GV_PERIODS = P_END - P_START + 1.

ENDFORM.                             " CHECK_PERIOD

*&---------------------------------------------------------------------*
*&      Form  INITIALIZE_FIELDS
*&---------------------------------------------------------------------*
FORM INITIALIZE_FIELDS.

  DATA:
    LV_DATUM LIKE SY-DATUM.

* Calculate previous month
  LV_DATUM = SY-DATUM.
  CALL FUNCTION 'RE_ADD_MONTH_TO_DATE'
    EXPORTING
      MONTHS        = -1
      OLDDATE       = SY-DATUM
    IMPORTING
      NEWDATE       = LV_DATUM.

* Start period = previous month
  P_START(1)   = 0.
  P_START+1(2) = LV_DATUM+4(2).

* End period   = previous month
  P_END(1)     = 0.
  P_END+1(2)   = LV_DATUM+4(2).

ENDFORM.                    " INITIALIZE_FIELDS

*&---------------------------------------------------------------------*
*&      Form  INITIALIZE_SOOPTS
*&---------------------------------------------------------------------*
FORM INITIALIZE_SOOPTS.

TYPE-POOLS:
* Include type pool SSCR (selection screen restriction)
  SSCR.

DATA:
  LS_RESTRICT TYPE SSCR_RESTRICT," to define the select options' restrictions
  LS_OPTLIST  TYPE SSCR_OPT_LIST," to define type of restrictions
  LS_ASS      TYPE SSCR_ASS.     " to assign select option(s) to

* Local constants
  CONSTANTS:
    LC_OBJK1 TYPE STRING VALUE 'OBJK1'.

* Restrict Select options
  LS_OPTLIST-NAME = LC_OBJK1.
  LS_OPTLIST-OPTIONS-EQ = 'X'.
  APPEND LS_OPTLIST TO LS_RESTRICT-OPT_LIST_TAB.

  LS_ASS-OP_MAIN = LC_OBJK1.
  LS_ASS-KIND = 'S'.
  LS_ASS-NAME = 'SO_VKBUR'.
  LS_ASS-SG_MAIN = 'I'.
  LS_ASS-SG_ADDY = SPACE.
  APPEND LS_ASS TO LS_RESTRICT-ASS_TAB.

  CALL FUNCTION 'SELECT_OPTIONS_RESTRICT'
    EXPORTING
*     PROGRAM                      =
      RESTRICTION                  = LS_RESTRICT
*     DB                           = ' '
    EXCEPTIONS
      TOO_LATE                     = 0
      REPEATED                     = 0
      SELOPT_WITHOUT_OPTIONS       = 0
      SELOPT_WITHOUT_SIGNS         = 0
      INVALID_SIGN                 = 0
      EMPTY_OPTION_LIST            = 0
      INVALID_KIND                 = 0
      REPEATED_KIND_A              = 0
      OTHERS                       = 0.

ENDFORM.                    " INITIALIZE_SOOPTS

*&---------------------------------------------------------------------*
*& Form DYNTAB_CREATE                                                  *
*&---------------------------------------------------------------------*
*& Dynamically creates a table based on number of periods and number of
*& sales offices (1 if selected in selection options, otherwise all 4).
*&---------------------------------------------------------------------*
FORM DYNTAB_CREATE.

  DATA:
    TAB_REF     TYPE REF TO DATA.

* Get sales offices which meet sel.crit.(Note: alternatively use yse_rent_depot)
  SELECT      TVKBZ~VKBUR BEZEI
         INTO TABLE IT_DEPOTS
         FROM TVKBZ
         JOIN TVKBT
           ON TVKBZ~VKBUR EQ TVKBT~VKBUR
        WHERE VKORG EQ P_VKORG
          AND TVKBZ~VKBUR IN SO_VKBUR
          AND SPRAS EQ GC_ENGL. "#EC CI_BUFFJOIN
  SORT IT_DEPOTS.
  DELETE ADJACENT DUPLICATES FROM IT_DEPOTS.

* Initialize working area
  WA_FCAT_100-REF_TABLE = 'EQKT'.
  WA_FCAT_100-REF_FIELD = 'EQKTX'.

* Add column for "Period"
  WA_FCAT_100-FIELDNAME  = 'PERNR'.
  WA_FCAT_100-COLTEXT    = 'Period'(005).
  WA_FCAT_100-TOOLTIP    = 'Fiscal Period'(006).
  WA_FCAT_100-FIX_COLUMN = GC_TRUE.
  WA_FCAT_100-EMPHASIZE  = GC_TRUE.
  IF GV_PERIODS LT 2.
    WA_FCAT_100-NO_OUT   = GC_TRUE.
  ENDIF.
  APPEND WA_FCAT_100 TO IT_FCAT_100.
  WA_FCAT_100-NO_OUT   = SPACE.

* Add column for "Cost type"
  WA_FCAT_100-FIELDNAME    = 'COTYP'.
  WA_FCAT_100-COLTEXT      = 'Description'(007).
  WA_FCAT_100-TOOLTIP      = 'Description'(007).
  WA_FCAT_100-FIX_COLUMN   = GC_TRUE.
  WA_FCAT_100-EMPHASIZE    = GC_TRUE.
  APPEND WA_FCAT_100 TO IT_FCAT_100.

* Add column for "GAC"
  WA_FCAT_100-REF_TABLE    = 'CE11000'.
  WA_FCAT_100-REF_FIELD    = 'WW006'.
  WA_FCAT_100-FIELDNAME    = 'GAC'.
  WA_FCAT_100-COLTEXT      = 'GAC'(021).
  WA_FCAT_100-TOOLTIP      = 'GAC'(021).
  WA_FCAT_100-FIX_COLUMN   = GC_TRUE.
  WA_FCAT_100-EMPHASIZE    = GC_TRUE.
  APPEND WA_FCAT_100 TO IT_FCAT_100.

* Add column for "PGC"
  WA_FCAT_100-FIELDNAME    = 'PGC'.
  WA_FCAT_100-REF_FIELD    = 'WW007'.
  WA_FCAT_100-COLTEXT      = 'PGC'(022).
  WA_FCAT_100-TOOLTIP      = 'PGC'(022).
  WA_FCAT_100-FIX_COLUMN   = GC_TRUE.
  WA_FCAT_100-EMPHASIZE    = GC_TRUE.
  APPEND WA_FCAT_100 TO IT_FCAT_100.

* Add column for each sales office
  WA_FCAT_100-REF_TABLE    = 'YSE_REN_ALV_COPA_ALLOC'.
  WA_FCAT_100-REF_FIELD    = 'VREVU'.       " TYPE CURR FIELD
  WA_FCAT_100-FIX_COLUMN   = SPACE.
  WA_FCAT_100-EMPHASIZE    = SPACE.
  LOOP AT IT_DEPOTS.
    WA_FCAT_100-FIELDNAME  = IT_DEPOTS-VKBUR.
    WA_FCAT_100-COLTEXT    = IT_DEPOTS-BEZEI.
    WA_FCAT_100-TOOLTIP    = IT_DEPOTS-VKBUR.
    APPEND WA_FCAT_100 TO IT_FCAT_100.
  ENDLOOP.

* If multiple depots output
  DESCRIBE TABLE IT_DEPOTS LINES SY-TFILL.
  IF SY-TFILL GT 1.
*   Add column for unassigned costs
    WA_FCAT_100-FIELDNAME   = 'UNASSIGNED'.
    WA_FCAT_100-COLTEXT     = 'Unassigned'(T01).
    WA_FCAT_100-TOOLTIP     = 'Unassigned'(T01).
    APPEND WA_FCAT_100 TO IT_FCAT_100.
*   Save column number of the "unassigned" costs
    GV_COL_NA = SY-TABIX.
*   Add one column to add all costs
    WA_FCAT_100-FIELDNAME   = 'TOTAL'.
    WA_FCAT_100-COLTEXT     = 'Total'(T02).
    WA_FCAT_100-TOOLTIP     = 'Total'(T02).
    APPEND WA_FCAT_100 TO IT_FCAT_100.
*   Save column number of the "totals" column
    GV_COL_TOT = SY-TABIX.
  ENDIF.

* Build internal table
  CALL METHOD CL_ALV_TABLE_CREATE=>CREATE_DYNAMIC_TABLE
    EXPORTING
      IT_FIELDCATALOG = IT_FCAT_100[]
    IMPORTING
      EP_TABLE        = TAB_REF.

  ASSIGN TAB_REF->* TO <IT_RESULT>.

ENDFORM.   " DYNTAB_CREATE

*&---------------------------------------------------------------------*
*& Form DYNTAB_FILL                                                    *
*&---------------------------------------------------------------------*
FORM DYNTAB_FILL.

  DATA:
    LV_PERIOD     TYPE I.         " Absolute period

  FIELD-SYMBOLS:
    <WA_RESULT>.                  " Working area for Dyn output table

* Get working area for output table
  ASSIGN LOCAL COPY OF INITIAL LINE OF <IT_RESULT> TO <WA_RESULT>.

* We have to add x lines (cost types) for EVERY period
  LV_PERIOD = P_START.                    " period counter
* Loop over periods
  WHILE LV_PERIOD LE P_END.

*   Reset depot totals
    REFRESH: IT_DEPOT_TOT.

*   Add line for rental revenue
    PERFORM DYNTAB_FILL_LINE_REVENUE    USING LV_PERIOD.

*   Add line for revenue from re-rent
    PERFORM DYNTAB_FILL_LINE_REV_RERENT USING LV_PERIOD.

*   Add line for Depreciation costs
    PERFORM DYNTAB_FILL_LINE_DEPREC     USING LV_PERIOD.

*   Add line for Service costs
    PERFORM DYNTAB_FILL_LINE_SERVC      USING LV_PERIOD.

*   Add line for Re-rent Costs
    PERFORM DYNTAB_FILL_LINE_REREC      USING LV_PERIOD.

*   Add lines for Rental GP (no re-rent = owned) value and perc
    PERFORM DYNTAB_FILL_LINE_GPO        USING LV_PERIOD.

*   Add lines for Rental GP (re-rent = not owned) value and perc
    PERFORM DYNTAB_FILL_LINE_GPN        USING LV_PERIOD.

*   Add lines for Rental GP (all eq) value and perc
    PERFORM DYNTAB_FILL_LINE_GPA        USING LV_PERIOD.

*   Go to next period
    LV_PERIOD = LV_PERIOD + 1.

  ENDWHILE.

ENDFORM.                    " DYNTAB_FILL

*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
*& Load data prepared in YSE tables
*&---------------------------------------------------------------------*
FORM GET_DATA .

* Costs owned equipments
  SELECT      *
         FROM YSE_RENT_COPA_CO
         INTO TABLE IT_COPA_CO
        WHERE BUKRS EQ P_BUKRS
          AND VKORG EQ P_VKORG
          AND FYEAR EQ P_GJAHR
          AND FPERD GE P_START
          AND FPERD LE P_END. "#EC CI_NOFIRST
* Costs not owned equipments
  SELECT      *
         FROM YSE_RENT_COPA_CN
         INTO TABLE IT_COPA_CN
        WHERE BUKRS EQ P_BUKRS
          AND VKORG EQ P_VKORG
          AND FYEAR EQ P_GJAHR
          AND FPERD GE P_START
          AND FPERD LE P_END.
* Revenue (all equipments)
  SELECT      *
         FROM YSE_RENT_COPA_RV
         INTO TABLE IT_COPA_RV
        WHERE BUKRS EQ P_BUKRS
          AND VKORG EQ P_VKORG
          AND FYEAR EQ P_GJAHR
          AND FPERD GE P_START
          AND FPERD LE P_END. "#EC CI_NOFIRST

ENDFORM.                    " GET_DATA

*&---------------------------------------------------------------------*
*&      Form  DYNTAB_FILL_LINE_REVENUE
*&---------------------------------------------------------------------*
FORM DYNTAB_FILL_LINE_REVENUE USING P_PERIOD.

  DATA:
    LV_COLUMN TYPE I,
    LV_INSERT TYPE C.

  FIELD-SYMBOLS:
    <WA_RESULT>.                  " Working area for Dyn output table

* Get working area for output table
  ASSIGN LOCAL COPY OF INITIAL LINE OF <IT_RESULT> TO <WA_RESULT>.

* Set last not-depot column
  LV_COLUMN = GC_COL_PGC.

* Loop through the depots
  LOOP AT IT_DEPOTS.

*   Go to next column (or depot)
    LV_COLUMN = LV_COLUMN + 1.

*   Calculate Revenue for current depot / period
    LOOP AT IT_COPA_RV WHERE VKBUR = IT_DEPOTS-VKBUR AND FPERD = P_PERIOD AND OWNED = GC_TRUE.
      CLEAR: <WA_RESULT>, IT_DEPOT_TOT.
*     Fill period in working area
      ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = P_PERIOD.
*     Fill cost type in working area
      ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = '01. Rental Revenue'(C01).
*     Fill GAC in working area
      ASSIGN COMPONENT GC_COL_GAC OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = IT_COPA_RV-WW006.
*     Fill PGC in working area
      ASSIGN COMPONENT GC_COL_PGC OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = IT_COPA_RV-WW007.
*     Fill depot's revenue on own equipments
      ASSIGN COMPONENT LV_COLUMN OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = IT_COPA_RV-VREVU.
*     Fill line's total revenue on own equipments
      IF NOT GV_COL_TOT IS INITIAL.
        ASSIGN COMPONENT GV_COL_TOT OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
        <DYN_FIELD> = IT_COPA_RV-VREVU.
      ENDIF.
*     Collect
      COLLECT <WA_RESULT> INTO <IT_RESULT>.
*     Also update depot totals
      IT_DEPOT_TOT-VKBUR   = IT_DEPOTS-VKBUR.
      IT_DEPOT_TOT-VREVU_O = IT_COPA_RV-VREVU.
      COLLECT IT_DEPOT_TOT.
*     Update insert flag
      LV_INSERT = GC_TRUE.
    ENDLOOP.

  ENDLOOP.

* If no sales office specified, add unassigned revenue and total
  IF SO_VKBUR IS INITIAL.
*   Calculate Revenue for unassigned depots.
    LOOP AT IT_COPA_RV WHERE VKBUR = SPACE AND FPERD = P_PERIOD AND OWNED = GC_TRUE.
      CLEAR: <WA_RESULT>, IT_DEPOT_TOT.
*     Fill period in working area
      ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = P_PERIOD.
*     Fill cost type in working area
      ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = '01. Rental Revenue'(C01).
*     Fill GAC in working area
      ASSIGN COMPONENT GC_COL_GAC OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = IT_COPA_RV-WW006.
*     Fill PGC in working area
      ASSIGN COMPONENT GC_COL_PGC OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = IT_COPA_RV-WW007.
*     Fill unassigned revenue on own equipments
      ASSIGN COMPONENT GV_COL_NA OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = IT_COPA_RV-VREVU.
*     Fill line's total revenue on own equipments
      IF NOT GV_COL_TOT IS INITIAL.
        ASSIGN COMPONENT GV_COL_TOT OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
        <DYN_FIELD> = IT_COPA_RV-VREVU.
      ENDIF.
*     Collect
      COLLECT <WA_RESULT> INTO <IT_RESULT>.
*     Also update depot totals
      IT_DEPOT_TOT-VKBUR   = SPACE.
      IT_DEPOT_TOT-VREVU_O = IT_COPA_RV-VREVU.
      COLLECT IT_DEPOT_TOT.
*     Update insert flag
      LV_INSERT = GC_TRUE.
    ENDLOOP.
  ENDIF.

* If loops not gone into, than no line was inserted, need to do it now
  IF LV_INSERT EQ SPACE.

*   Add line with 0 values
    CLEAR <WA_RESULT>.
*   Fill period in working area
    ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
    <DYN_FIELD> = P_PERIOD.
*   Fill cost type in working area
    ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
    <DYN_FIELD> = '01. Rental Revenue'(C01).
*   Collect
    COLLECT <WA_RESULT> INTO <IT_RESULT>.

  ENDIF.

ENDFORM.                    " DYNTAB_FILL_LINE_REVENUE

*&---------------------------------------------------------------------*
*&      Form  DYNTAB_FILL_LINE_REV_RERENT
*&---------------------------------------------------------------------*
FORM DYNTAB_FILL_LINE_REV_RERENT  USING    P_PERIOD.

  DATA:
    LV_COLUMN TYPE I,
    LV_INSERT TYPE C.

  FIELD-SYMBOLS:
    <WA_RESULT>.                  " Working area for Dyn output table

* Get working area for output table
  ASSIGN LOCAL COPY OF INITIAL LINE OF <IT_RESULT> TO <WA_RESULT>.

* Set last not-depot column
  LV_COLUMN = GC_COL_PGC.

* Loop through the depots
  LOOP AT IT_DEPOTS.

*   Go to next column (or depot)
    LV_COLUMN = LV_COLUMN + 1.

*   Calculate Revenue re-rent for current depot / period
    LOOP AT IT_COPA_RV WHERE VKBUR = IT_DEPOTS-VKBUR AND FPERD = P_PERIOD AND OWNED = SPACE.
      CLEAR: <WA_RESULT>, IT_DEPOT_TOT.
*     Fill period in working area
      ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = P_PERIOD.
*     Fill cost type in working area
      ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = '02. Rental Revenue (re-rent)'(C02).
*     Fill GAC in working area
      ASSIGN COMPONENT GC_COL_GAC OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = IT_COPA_RV-WW006.
*     Fill PGC in working area
      ASSIGN COMPONENT GC_COL_PGC OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = IT_COPA_RV-WW007.
*     Fill depot's revenue on not owned equipments
      ASSIGN COMPONENT LV_COLUMN OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = IT_COPA_RV-VREVU.
*     Fill line's total revenue on not owned equipments
      IF NOT GV_COL_TOT IS INITIAL.
        ASSIGN COMPONENT GV_COL_TOT OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
        <DYN_FIELD> = IT_COPA_RV-VREVU.
      ENDIF.
*     Collect
      COLLECT <WA_RESULT> INTO <IT_RESULT>.
*     Also update depot totals
      IT_DEPOT_TOT-VKBUR   = IT_DEPOTS-VKBUR.
      IT_DEPOT_TOT-VREVU_N = IT_COPA_RV-VREVU.
      COLLECT IT_DEPOT_TOT.
*     Update insert flag
      LV_INSERT = GC_TRUE.
    ENDLOOP.

  ENDLOOP.

* If no sales office specified, add unassigned revenue (not owned eq) and total
  IF SO_VKBUR IS INITIAL.
*   Calculate Revenue not owned for unassigned depots.
    LOOP AT IT_COPA_RV WHERE VKBUR = SPACE AND FPERD = P_PERIOD AND OWNED = SPACE.
      CLEAR: <WA_RESULT>, IT_DEPOT_TOT.
*     Fill period in working area
      ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = P_PERIOD.
*     Fill cost type in working area
      ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = '02. Rental Revenue (re-rent)'(C02).
*     Fill GAC in working area
      ASSIGN COMPONENT GC_COL_GAC OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = IT_COPA_RV-WW006.
*     Fill PGC in working area
      ASSIGN COMPONENT GC_COL_PGC OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = IT_COPA_RV-WW007.
*     Fill unassigned revenue on not owned equipments
      ASSIGN COMPONENT GV_COL_NA OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = IT_COPA_RV-VREVU.
*     Fill line's total revenue on not owned equipments
      IF NOT GV_COL_TOT IS INITIAL.
        ASSIGN COMPONENT GV_COL_TOT OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
        <DYN_FIELD> = IT_COPA_RV-VREVU.
      ENDIF.
*     Collect
      COLLECT <WA_RESULT> INTO <IT_RESULT>.
*     Also update depot totals
      IT_DEPOT_TOT-VKBUR   = SPACE.
      IT_DEPOT_TOT-VREVU_N = IT_COPA_RV-VREVU.
      COLLECT IT_DEPOT_TOT.
*     Update insert flag
      LV_INSERT = GC_TRUE.
    ENDLOOP.
  ENDIF.

* If loops not gone into, than no line was inserted, need to do it now
  IF LV_INSERT EQ SPACE.

*   Add line with 0 values
    CLEAR <WA_RESULT>.
*   Fill period in working area
    ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
    <DYN_FIELD> = P_PERIOD.
*   Fill cost type in working area
    ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
    <DYN_FIELD> = '02. Rental Revenue (re-rent)'(C02).
*   Collect
    COLLECT <WA_RESULT> INTO <IT_RESULT>.

  ENDIF.

ENDFORM.                    " DYNTAB_FILL_LINE_REV_RERENT

*&---------------------------------------------------------------------*
*&      Form  DYNTAB_FILL_LINE_DEPREC
*&---------------------------------------------------------------------*
FORM DYNTAB_FILL_LINE_DEPREC  USING    P_PERIOD.

  DATA:
    LV_COLUMN TYPE I,
    LV_INSERT TYPE C.

  FIELD-SYMBOLS:
    <WA_RESULT>.                  " Working area for Dyn output table

* Get working area for output table
  ASSIGN LOCAL COPY OF INITIAL LINE OF <IT_RESULT> TO <WA_RESULT>.

* Set last not-depot column
  LV_COLUMN = GC_COL_PGC.

* Loop through the depots
  LOOP AT IT_DEPOTS.

*   Go to next column (or depot)
    LV_COLUMN = LV_COLUMN + 1.

*   Calculate depreciation for current depot / period
    LOOP AT IT_COPA_CO WHERE VKBUR = IT_DEPOTS-VKBUR AND FPERD = P_PERIOD.
      CLEAR: <WA_RESULT>, IT_DEPOT_TOT.
*     Fill period in working area
      ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = P_PERIOD.
*     Fill cost type in working area
      ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = '03. Depreciation Costs'(C03).
*     Fill depot's depreciation on owned equipments
      ASSIGN COMPONENT LV_COLUMN OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = IT_COPA_CO-ADEPR.
*     Fill line's total depreciation on owned equipments
      IF NOT GV_COL_TOT IS INITIAL.
        ASSIGN COMPONENT GV_COL_TOT OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
        <DYN_FIELD> = IT_COPA_CO-ADEPR.
      ENDIF.
*     Collect
      COLLECT <WA_RESULT> INTO <IT_RESULT>.
*     Also update depot totals
      IT_DEPOT_TOT-VKBUR   = IT_DEPOTS-VKBUR.
      IT_DEPOT_TOT-ADEPR   = IT_COPA_CO-ADEPR.
      COLLECT IT_DEPOT_TOT.
*     Update insert flag
      LV_INSERT = GC_TRUE.
    ENDLOOP.

  ENDLOOP.

* If no sales office specified, add unassigned depreciation (owned eq) and total
  IF SO_VKBUR IS INITIAL.
*   Calculate depreciation for unassigned depots
    LOOP AT IT_COPA_CO WHERE VKBUR = SPACE AND FPERD = P_PERIOD.
      CLEAR: <WA_RESULT>, IT_DEPOT_TOT.
*     Fill period in working area
      ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = P_PERIOD.
*     Fill cost type in working area
      ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = '03. Depreciation Costs'(C03).
*     Fill depreciation on owned equipments
      ASSIGN COMPONENT GV_COL_NA OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = IT_COPA_CO-ADEPR.
*     Fill line's total depreciation on owned equipments
      IF NOT GV_COL_TOT IS INITIAL.
        ASSIGN COMPONENT GV_COL_TOT OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
        <DYN_FIELD> = IT_COPA_CO-ADEPR.
      ENDIF.
*     Collect
      COLLECT <WA_RESULT> INTO <IT_RESULT>.
*     Also update depot totals
      IT_DEPOT_TOT-VKBUR   = SPACE.
      IT_DEPOT_TOT-ADEPR   = IT_COPA_CO-ADEPR.
      COLLECT IT_DEPOT_TOT.
*     Update insert flag
      LV_INSERT = GC_TRUE.
    ENDLOOP.
  ENDIF.

* If loops not gone into, than no line was inserted, need to do it now
  IF LV_INSERT EQ SPACE.

*   Add line with 0 values
    CLEAR <WA_RESULT>.
*   Fill period in working area
    ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
    <DYN_FIELD> = P_PERIOD.
*   Fill cost type in working area
    ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
    <DYN_FIELD> = '03. Depreciation Costs'(C03).
*   Collect
    COLLECT <WA_RESULT> INTO <IT_RESULT>.

  ENDIF.

ENDFORM.                    " DYNTAB_FILL_LINE_DEPREC
*&---------------------------------------------------------------------*
*&      Form  DYNTAB_FILL_LINE_SERVC
*&---------------------------------------------------------------------*
FORM DYNTAB_FILL_LINE_SERVC  USING    P_PERIOD.

  DATA:
    LV_COLUMN TYPE I,
    LV_INSERT TYPE C.

  FIELD-SYMBOLS:
    <WA_RESULT>.                  " Working area for Dyn output table

* Get working area for output table
  ASSIGN LOCAL COPY OF INITIAL LINE OF <IT_RESULT> TO <WA_RESULT>.

* Set last not-depot column
  LV_COLUMN = GC_COL_PGC.

* Loop through the depots
  LOOP AT IT_DEPOTS.

*   Go to next column (or depot)
    LV_COLUMN = LV_COLUMN + 1.

*   Calculate service costs for current depot / period
    LOOP AT IT_COPA_CO WHERE VKBUR = IT_DEPOTS-VKBUR AND FPERD = P_PERIOD.
      CLEAR: <WA_RESULT>, IT_DEPOT_TOT.
*     Fill period in working area
      ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = P_PERIOD.
*     Fill cost type in working area
      ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = '04. Service Costs'(C04).
*     Fill depot's service cost on owned equipments
      ASSIGN COMPONENT LV_COLUMN OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = IT_COPA_CO-VSERV.
*     Fill line's total service cost on owned equipments
      IF NOT GV_COL_TOT IS INITIAL.
        ASSIGN COMPONENT GV_COL_TOT OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
        <DYN_FIELD> = IT_COPA_CO-VSERV.
      ENDIF.
*     Collect
      COLLECT <WA_RESULT> INTO <IT_RESULT>.
*     Also update depot totals
      IT_DEPOT_TOT-VKBUR   = IT_DEPOTS-VKBUR.
      IT_DEPOT_TOT-VSERV   = IT_COPA_CO-VSERV.
      COLLECT IT_DEPOT_TOT.
*     Update insert flag
      LV_INSERT = GC_TRUE.
    ENDLOOP.

  ENDLOOP.

* If no sales office specified, add unassigned service cost (owned eq) and total
  IF SO_VKBUR IS INITIAL.
*   Calculate service cost for unassigned depots
    LOOP AT IT_COPA_CO WHERE VKBUR = SPACE AND FPERD = P_PERIOD.
      CLEAR: <WA_RESULT>, IT_DEPOT_TOT.
*     Fill period in working area
      ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = P_PERIOD.
*     Fill cost type in working area
      ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = '04. Service Costs'(C04).
*     Fill service cost on owned equipments
      ASSIGN COMPONENT GV_COL_NA OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = IT_COPA_CO-VSERV.
*     Fill line's total service cost on owned equipments
      IF NOT GV_COL_TOT IS INITIAL.
        ASSIGN COMPONENT GV_COL_TOT OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
        <DYN_FIELD> = IT_COPA_CO-VSERV.
      ENDIF.
*     Collect
      COLLECT <WA_RESULT> INTO <IT_RESULT>.
*     Also update depot totals
      IT_DEPOT_TOT-VKBUR   = SPACE.
      IT_DEPOT_TOT-VSERV   = IT_COPA_CO-VSERV.
      COLLECT IT_DEPOT_TOT.
*     Update insert flag
      LV_INSERT = GC_TRUE.
    ENDLOOP.
  ENDIF.

* If loops not gone into, than no line was inserted, need to do it now
  IF LV_INSERT EQ SPACE.

*   Add line with 0 values
    CLEAR <WA_RESULT>.
*   Fill period in working area
    ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
    <DYN_FIELD> = P_PERIOD.
*   Fill cost type in working area
    ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
    <DYN_FIELD> = '04. Service Costs'(C04).
*   Collect
    COLLECT <WA_RESULT> INTO <IT_RESULT>.

  ENDIF.

ENDFORM.                    " DYNTAB_FILL_LINE_SERVC

*&---------------------------------------------------------------------*
*&      Form  DYNTAB_FILL_LINE_REREC
*&---------------------------------------------------------------------*
FORM DYNTAB_FILL_LINE_REREC  USING    P_PERIOD.

  DATA:
    LV_COLUMN TYPE I,
    LV_INSERT TYPE C.

  FIELD-SYMBOLS:
    <WA_RESULT>.                  " Working area for Dyn output table

* Get working area for output table
  ASSIGN LOCAL COPY OF INITIAL LINE OF <IT_RESULT> TO <WA_RESULT>.

* Set last not-depot column
  LV_COLUMN = GC_COL_PGC.

* Loop through the depots
  LOOP AT IT_DEPOTS.

*   Go to next column (or depot)
    LV_COLUMN = LV_COLUMN + 1.

*   Calculate re-rent costs for current depot / period
    LOOP AT IT_COPA_CN WHERE VKBUR = IT_DEPOTS-VKBUR AND FPERD = P_PERIOD.
      CLEAR: <WA_RESULT>, IT_DEPOT_TOT.
*     Fill period in working area
      ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = P_PERIOD.
*     Fill cost type in working area
      ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = '05. Re-rent Costs'(C05).
*     Fill depot's re-rent costs
      ASSIGN COMPONENT LV_COLUMN OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = IT_COPA_CN-VOTHR.
*     Fill line's total re-rent cost
      IF NOT GV_COL_TOT IS INITIAL.
        ASSIGN COMPONENT GV_COL_TOT OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
        <DYN_FIELD> = IT_COPA_CN-VOTHR.
      ENDIF.
*     Collect
      COLLECT <WA_RESULT> INTO <IT_RESULT>.
*     Also update depot totals
      IT_DEPOT_TOT-VKBUR   = IT_DEPOTS-VKBUR.
      IT_DEPOT_TOT-VOTHR   = IT_COPA_CN-VOTHR.
      COLLECT IT_DEPOT_TOT.
*     Update insert flag
      LV_INSERT = GC_TRUE.
    ENDLOOP.

  ENDLOOP.

* If no sales office specified, add unassigned re-rent cost and total
  IF SO_VKBUR IS INITIAL.
*   Calculate re-rent cost for unassigned depots
    LOOP AT IT_COPA_CN WHERE VKBUR = SPACE AND FPERD = P_PERIOD.
      CLEAR: <WA_RESULT>, IT_DEPOT_TOT.
*     Fill period in working area
      ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = P_PERIOD.
*     Fill cost type in working area
      ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = '05. Re-rent Costs'(C05).
*     Fill re-rent cost
      ASSIGN COMPONENT GV_COL_NA OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = IT_COPA_CN-VOTHR.
*     Fill line's total re-rent cost
      IF NOT GV_COL_TOT IS INITIAL.
        ASSIGN COMPONENT GV_COL_TOT OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
        <DYN_FIELD> = IT_COPA_CN-VOTHR.
      ENDIF.
*     Collect
      COLLECT <WA_RESULT> INTO <IT_RESULT>.
*     Also update depot totals
      IT_DEPOT_TOT-VKBUR   = SPACE.
      IT_DEPOT_TOT-VOTHR   = IT_COPA_CN-VOTHR.
      COLLECT IT_DEPOT_TOT.
*     Update insert flag
      LV_INSERT = GC_TRUE.
    ENDLOOP.
  ENDIF.

* If loops not gone into, than no line was inserted, need to do it now
  IF LV_INSERT EQ SPACE.

*   Add line with 0 values
    CLEAR <WA_RESULT>.
*   Fill period in working area
    ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
    <DYN_FIELD> = P_PERIOD.
*   Fill cost type in working area
    ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT> TO <DYN_FIELD>.
      <DYN_FIELD> = '05. Re-rent Costs'(C05).
*   Collect
    COLLECT <WA_RESULT> INTO <IT_RESULT>.

  ENDIF.

ENDFORM.                    " DYNTAB_FILL_LINE_REREC

*&---------------------------------------------------------------------*
*&      Form  DYNTAB_FILL_LINE_GPO
*&---------------------------------------------------------------------*
FORM DYNTAB_FILL_LINE_GPO  USING    P_PERIOD.

  DATA:
    LV_COLUMN TYPE I,
    LV_TEMP   TYPE I,                      " to round percentages
    LV_TOTNOM LIKE IT_DEPOT_TOT-VREVU_O,   " Total of all GP  (Gr Prof own eq)
    LV_TOTDEN LIKE IT_DEPOT_TOT-VREVU_O.   " Total of all 1's (Revenue own eq)

  FIELD-SYMBOLS:
    <WA_RESULT_VAL>,                  " Working area for Dyn output table
    <WA_RESULT_PRC>.

* Get working area's for output table
  ASSIGN LOCAL COPY OF INITIAL LINE OF <IT_RESULT> TO <WA_RESULT_VAL>.
  ASSIGN LOCAL COPY OF INITIAL LINE OF <IT_RESULT> TO <WA_RESULT_PRC>.

* Fill period in working area's
  ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT_VAL> TO <DYN_FIELD>.
  <DYN_FIELD> = P_PERIOD.
  ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT_PRC> TO <DYN_FIELD>.
  <DYN_FIELD> = P_PERIOD.

* Fill types in working area's
  ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT_VAL> TO <DYN_FIELD>.
  <DYN_FIELD> = '06. Rental GP (no re-rent) Value'(C06).
  ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT_PRC> TO <DYN_FIELD>.
  <DYN_FIELD> = '07. Rental GP (no re-rent) Perct'(C07).

* Set last not-depot column
  LV_COLUMN = GC_COL_PGC.

* Loop through the depots
  LOOP AT IT_DEPOTS.

*   Go to next column (or depot)
    LV_COLUMN = LV_COLUMN + 1.

*   Find depot totals
    READ TABLE IT_DEPOT_TOT WITH KEY VKBUR = IT_DEPOTS-VKBUR.
    IF SY-SUBRC NE 0.
      CONTINUE.
    ENDIF.

*   Grab the current depot's column on the value working area and assign value
    ASSIGN COMPONENT LV_COLUMN OF STRUCTURE <WA_RESULT_VAL> TO <DYN_FIELD>.
    <DYN_FIELD> = IT_DEPOT_TOT-VREVU_O - IT_DEPOT_TOT-ADEPR - IT_DEPOT_TOT-VSERV.
*   Update total gross profit (own eq) across depots
    LV_TOTNOM = LV_TOTNOM + <DYN_FIELD>.
*   Update total revenue (own eq) across depots
    LV_TOTDEN = LV_TOTDEN + IT_DEPOT_TOT-VREVU_O.

*   Grab the current depot's colum on the percentage working area and assign value
    ASSIGN COMPONENT LV_COLUMN OF STRUCTURE <WA_RESULT_PRC> TO <DYN_FIELD>.
    IF IT_DEPOT_TOT-VREVU_O NE 0.
      LV_TEMP = ( IT_DEPOT_TOT-VREVU_O - IT_DEPOT_TOT-ADEPR - IT_DEPOT_TOT-VSERV ) / IT_DEPOT_TOT-VREVU_O * 100.
      <DYN_FIELD> = LV_TEMP.
    ELSE.
      <DYN_FIELD> = 0.
    ENDIF.

  ENDLOOP.

* Also for unassigned
  READ TABLE IT_DEPOT_TOT WITH KEY VKBUR = SPACE.
  IF SY-SUBRC EQ 0.

*   Grab the current depot's column on the value working area and assign value
    ASSIGN COMPONENT GV_COL_NA OF STRUCTURE <WA_RESULT_VAL> TO <DYN_FIELD>.
    <DYN_FIELD> = IT_DEPOT_TOT-VREVU_O - IT_DEPOT_TOT-ADEPR - IT_DEPOT_TOT-VSERV.
*   Update total gross profit (own eq) across depots
    LV_TOTNOM = LV_TOTNOM + <DYN_FIELD>.
*   Update total revenue (own eq) across depots
    LV_TOTDEN = LV_TOTDEN + IT_DEPOT_TOT-VREVU_O.

*   Grab the current depot's colum on the percentage working area and assign value
    ASSIGN COMPONENT GV_COL_NA OF STRUCTURE <WA_RESULT_PRC> TO <DYN_FIELD>.
    IF IT_DEPOT_TOT-VREVU_O NE 0.
      LV_TEMP = ( IT_DEPOT_TOT-VREVU_O - IT_DEPOT_TOT-ADEPR - IT_DEPOT_TOT-VSERV ) / IT_DEPOT_TOT-VREVU_O * 100.
      <DYN_FIELD> = LV_TEMP.
    ELSE.
      <DYN_FIELD> = 0.
    ENDIF.

  ENDIF.

* If all depots requested, also fill total column
  IF NOT GV_COL_TOT IS INITIAL.
*   Fill value line's total
    ASSIGN COMPONENT GV_COL_TOT OF STRUCTURE <WA_RESULT_VAL> TO <DYN_FIELD>.
    <DYN_FIELD> = LV_TOTNOM.
*   Fill percentage line's total
    ASSIGN COMPONENT GV_COL_TOT OF STRUCTURE <WA_RESULT_PRC> TO <DYN_FIELD>.
    IF LV_TOTDEN NE 0.
      LV_TEMP = LV_TOTNOM / LV_TOTDEN * 100.
      <DYN_FIELD> = LV_TEMP.
    ELSE.
      <DYN_FIELD> = 0.
    ENDIF.
  ENDIF.

  COLLECT <WA_RESULT_VAL> INTO <IT_RESULT>.
  COLLECT <WA_RESULT_PRC> INTO <IT_RESULT>.

ENDFORM.                    " DYNTAB_FILL_LINE_GPO

*&---------------------------------------------------------------------*
*&      Form  DYNTAB_FILL_LINE_GPN
*&---------------------------------------------------------------------*
FORM DYNTAB_FILL_LINE_GPN  USING    P_PERIOD.

  DATA:
    LV_COLUMN TYPE I,
    LV_TEMP   TYPE I,                      " to round percentages
    LV_TOTNOM LIKE IT_DEPOT_TOT-VREVU_O,   " Total of all GP  (Gr Prof own eq)
    LV_TOTDEN LIKE IT_DEPOT_TOT-VREVU_O.   " Total of all 1's (Revenue own eq)

  FIELD-SYMBOLS:
    <WA_RESULT_VAL>,                  " Working area for Dyn output table
    <WA_RESULT_PRC>.

* Get working area's for output table
  ASSIGN LOCAL COPY OF INITIAL LINE OF <IT_RESULT> TO <WA_RESULT_VAL>.
  ASSIGN LOCAL COPY OF INITIAL LINE OF <IT_RESULT> TO <WA_RESULT_PRC>.

* Fill period in working area's
  ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT_VAL> TO <DYN_FIELD>.
  <DYN_FIELD> = P_PERIOD.
  ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT_PRC> TO <DYN_FIELD>.
  <DYN_FIELD> = P_PERIOD.

* Fill types in working area's
  ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT_VAL> TO <DYN_FIELD>.
  <DYN_FIELD> = '08. Rental GP (re-rent) Value'(C08).
  ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT_PRC> TO <DYN_FIELD>.
  <DYN_FIELD> = '09. Rental GP (re-rent) Perct'(C09).

* Set last not-depot column
  LV_COLUMN = GC_COL_PGC.

* Loop through the depots
  LOOP AT IT_DEPOTS.

*   Go to next column (or depot)
    LV_COLUMN = LV_COLUMN + 1.

*   Find depot totals
    READ TABLE IT_DEPOT_TOT WITH KEY VKBUR = IT_DEPOTS-VKBUR.
    IF SY-SUBRC NE 0.
      CONTINUE.
    ENDIF.

*   Grab the current depot's column on the value working area and assign value
    ASSIGN COMPONENT LV_COLUMN OF STRUCTURE <WA_RESULT_VAL> TO <DYN_FIELD>.
    <DYN_FIELD> = IT_DEPOT_TOT-VREVU_N - IT_DEPOT_TOT-VOTHR.
*   Update total gross profit (own eq) across depots
    LV_TOTNOM = LV_TOTNOM + <DYN_FIELD>.
*   Update total revenue (own eq) across depots
    LV_TOTDEN = LV_TOTDEN + IT_DEPOT_TOT-VREVU_N.

*   Grab the current depot's colum on the percentage working area and assign value
    ASSIGN COMPONENT LV_COLUMN OF STRUCTURE <WA_RESULT_PRC> TO <DYN_FIELD>.
    IF IT_DEPOT_TOT-VREVU_N NE 0.
      LV_TEMP = ( IT_DEPOT_TOT-VREVU_N - IT_DEPOT_TOT-VOTHR ) / IT_DEPOT_TOT-VREVU_N * 100.
      <DYN_FIELD> = LV_TEMP.
    ELSE.
      <DYN_FIELD> = 0.
    ENDIF.

  ENDLOOP.

* Also for unassigned
  READ TABLE IT_DEPOT_TOT WITH KEY VKBUR = SPACE.
  IF SY-SUBRC EQ 0.

*   Grab the current depot's column on the value working area and assign value
    ASSIGN COMPONENT GV_COL_NA OF STRUCTURE <WA_RESULT_VAL> TO <DYN_FIELD>.
    <DYN_FIELD> = IT_DEPOT_TOT-VREVU_N - IT_DEPOT_TOT-VOTHR.
*   Update total gross profit (own eq) across depots
    LV_TOTNOM = LV_TOTNOM + <DYN_FIELD>.
*   Update total revenue (own eq) across depots
    LV_TOTDEN = LV_TOTDEN + IT_DEPOT_TOT-VREVU_N.

*   Grab the current depot's colum on the percentage working area and assign value
    ASSIGN COMPONENT GV_COL_NA OF STRUCTURE <WA_RESULT_PRC> TO <DYN_FIELD>.
    IF IT_DEPOT_TOT-VREVU_O NE 0.
      LV_TEMP = ( IT_DEPOT_TOT-VREVU_N - IT_DEPOT_TOT-VOTHR ) / IT_DEPOT_TOT-VREVU_N * 100.
      <DYN_FIELD> = LV_TEMP.
    ELSE.
      <DYN_FIELD> = 0.
    ENDIF.

  ENDIF.

* If all depots requested, also fill total column
  IF NOT GV_COL_TOT IS INITIAL.
*   Fill value line's total
    ASSIGN COMPONENT GV_COL_TOT OF STRUCTURE <WA_RESULT_VAL> TO <DYN_FIELD>.
    <DYN_FIELD> = LV_TOTNOM.
*   Fill percentage line's total
    ASSIGN COMPONENT GV_COL_TOT OF STRUCTURE <WA_RESULT_PRC> TO <DYN_FIELD>.
    IF LV_TOTDEN NE 0.
      LV_TEMP = LV_TOTNOM / LV_TOTDEN * 100.
      <DYN_FIELD> = LV_TEMP.
    ELSE.
      <DYN_FIELD> = 0.
    ENDIF.
  ENDIF.

  COLLECT <WA_RESULT_VAL> INTO <IT_RESULT>.
  COLLECT <WA_RESULT_PRC> INTO <IT_RESULT>.

ENDFORM.                    " DYNTAB_FILL_LINE_GPN

*&---------------------------------------------------------------------*
*&      Form  DYNTAB_FILL_LINE_GPA
*&---------------------------------------------------------------------*
FORM DYNTAB_FILL_LINE_GPA  USING    P_PERIOD.

  DATA:
    LV_COLUMN TYPE I,
    LV_TEMP   TYPE I,                      " to round percentages
    LV_DEN    LIKE IT_DEPOT_TOT-VREVU_O,
    LV_TOTNOM LIKE IT_DEPOT_TOT-VREVU_O,   " Total of all GP  (Gr Prof own eq)
    LV_TOTDEN LIKE IT_DEPOT_TOT-VREVU_O.   " Total of all 1's (Revenue own eq)

  FIELD-SYMBOLS:
    <WA_RESULT_VAL>,                  " Working area for Dyn output table
    <WA_RESULT_PRC>.

* Get working area's for output table
  ASSIGN LOCAL COPY OF INITIAL LINE OF <IT_RESULT> TO <WA_RESULT_VAL>.
  ASSIGN LOCAL COPY OF INITIAL LINE OF <IT_RESULT> TO <WA_RESULT_PRC>.

* Fill period in working area's
  ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT_VAL> TO <DYN_FIELD>.
  <DYN_FIELD> = P_PERIOD.
  ASSIGN COMPONENT GC_COL_PER OF STRUCTURE <WA_RESULT_PRC> TO <DYN_FIELD>.
  <DYN_FIELD> = P_PERIOD.

* Fill types in working area's
  ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT_VAL> TO <DYN_FIELD>.
  <DYN_FIELD> = '10. Rental GP Value'(C10).
  ASSIGN COMPONENT GC_COL_TYPE OF STRUCTURE <WA_RESULT_PRC> TO <DYN_FIELD>.
  <DYN_FIELD> = '11. Rental GP Perct'(C11).

* Set last not-depot column
  LV_COLUMN = GC_COL_PGC.

* Loop through the depots
  LOOP AT IT_DEPOTS.

*   Go to next column (or depot)
    LV_COLUMN = LV_COLUMN + 1.

*   Find depot totals
    READ TABLE IT_DEPOT_TOT WITH KEY VKBUR = IT_DEPOTS-VKBUR.
    IF SY-SUBRC NE 0.
      CONTINUE.
    ENDIF.

*   Grab the current depot's column on the value working area and assign value
    ASSIGN COMPONENT LV_COLUMN OF STRUCTURE <WA_RESULT_VAL> TO <DYN_FIELD>.
    <DYN_FIELD> =   IT_DEPOT_TOT-VREVU_O + IT_DEPOT_TOT-VREVU_N
                  - IT_DEPOT_TOT-ADEPR   - IT_DEPOT_TOT-VSERV
                  - IT_DEPOT_TOT-VOTHR .
*   Update total gross profit (own eq) across depots
    LV_TOTNOM = LV_TOTNOM + <DYN_FIELD>.
*   Update total revenue (own eq) across depots
    LV_TOTDEN = LV_TOTDEN + IT_DEPOT_TOT-VREVU_O + IT_DEPOT_TOT-VREVU_N.

*   Grab the current depot's colum on the percentage working area and assign value
    ASSIGN COMPONENT LV_COLUMN OF STRUCTURE <WA_RESULT_PRC> TO <DYN_FIELD>.
    LV_DEN = ( IT_DEPOT_TOT-VREVU_O + IT_DEPOT_TOT-VREVU_N ).
    IF LV_DEN NE 0.
      LV_TEMP = (   IT_DEPOT_TOT-VREVU_O + IT_DEPOT_TOT-VREVU_N
                  - IT_DEPOT_TOT-ADEPR   - IT_DEPOT_TOT-VSERV
                  - IT_DEPOT_TOT-VOTHR )
               / LV_DEN * 100.
      <DYN_FIELD> = LV_TEMP.
    ELSE.
      <DYN_FIELD> = 0.
    ENDIF.

  ENDLOOP.

* Also for unassigned
  READ TABLE IT_DEPOT_TOT WITH KEY VKBUR = SPACE.
  IF SY-SUBRC EQ 0.

*   Grab the current depot's column on the value working area and assign value
    ASSIGN COMPONENT GV_COL_NA OF STRUCTURE <WA_RESULT_VAL> TO <DYN_FIELD>.
    <DYN_FIELD> = IT_DEPOT_TOT-VREVU_O + IT_DEPOT_TOT-VREVU_N
                  - IT_DEPOT_TOT-ADEPR   - IT_DEPOT_TOT-VSERV
                  - IT_DEPOT_TOT-VOTHR .
*   Update total gross profit (own eq) across depots
    LV_TOTNOM = LV_TOTNOM + <DYN_FIELD>.
*   Update total revenue (own eq) across depots
    LV_TOTDEN = LV_TOTDEN + IT_DEPOT_TOT-VREVU_O + IT_DEPOT_TOT-VREVU_N.

*   Grab the current depot's colum on the percentage working area and assign value
    ASSIGN COMPONENT GV_COL_NA OF STRUCTURE <WA_RESULT_PRC> TO <DYN_FIELD>.
    LV_DEN = ( IT_DEPOT_TOT-VREVU_O + IT_DEPOT_TOT-VREVU_N ).
    IF LV_DEN NE 0.
      LV_TEMP = (   IT_DEPOT_TOT-VREVU_O + IT_DEPOT_TOT-VREVU_N
                  - IT_DEPOT_TOT-ADEPR   - IT_DEPOT_TOT-VSERV
                  - IT_DEPOT_TOT-VOTHR )
              / LV_DEN * 100.
      <DYN_FIELD> = LV_TEMP.
    ELSE.
      <DYN_FIELD> = 0.
    ENDIF.

  ENDIF.

* If all depots requested, also fill total column
  IF NOT GV_COL_TOT IS INITIAL.
*   Fill value line's total
    ASSIGN COMPONENT GV_COL_TOT OF STRUCTURE <WA_RESULT_VAL> TO <DYN_FIELD>.
    <DYN_FIELD> = LV_TOTNOM.
*   Fill percentage line's total
    ASSIGN COMPONENT GV_COL_TOT OF STRUCTURE <WA_RESULT_PRC> TO <DYN_FIELD>.
    IF LV_TOTDEN NE 0.
      LV_TEMP = LV_TOTNOM / LV_TOTDEN * 100.
      <DYN_FIELD> = LV_TEMP.
    ELSE.
      <DYN_FIELD> = 0.
    ENDIF.
  ENDIF.

  COLLECT <WA_RESULT_VAL> INTO <IT_RESULT>.
  COLLECT <WA_RESULT_PRC> INTO <IT_RESULT>.

ENDFORM.                    " DYNTAB_FILL_LINE_GPA
