*&---------------------------------------------------------------------*
*&  Include           YSE_CS_UPD_EQUIP_PART_INFO_FRM
*&---------------------------------------------------------------------*


*&---------------------------------------------------------------------*
*&      Form  UPLOAD_FILE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM UPLOAD_FILE .
  CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
    EXPORTING
* I_FIELD_SEPERATOR          =
* I_LINE_HEADER              =
      I_TAB_RAW_DATA             = I_TAB_RAW_DATA
      I_FILENAME                 = P_FILE
    TABLES
      I_TAB_CONVERTED_DATA       = GT_UPLOAD
  EXCEPTIONS
   CONVERSION_FAILED          = 1
   OTHERS                     = 2
            .
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
           WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  SORT GT_UPLOAD BY EQUNR.
  DELETE ADJACENT DUPLICATES FROM GT_UPLOAD COMPARING ALL FIELDS.

  LOOP AT GT_UPLOAD.
    GT_UPLOAD-SNO = SY-TABIX.

* Copy the upload file into temp table to display the status to the user in the same format.
    GT_UPLOAD_STATUS = GT_UPLOAD.
    APPEND GT_UPLOAD_STATUS.
    CLEAR GT_UPLOAD_STATUS.


*  Put the leading zeros for the equipment numbers just incase the user has missed it
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = GT_UPLOAD-EQUNR
      IMPORTING
        OUTPUT = GT_UPLOAD-EQUNR.

* Just incase the user has entered the partner function in lowercase (bp)...
    TRANSLATE GT_UPLOAD-PARVW TO UPPER CASE.

*  Change the partner function from SP to AG (and BP to RE) in order for the system to understand
    CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
      EXPORTING
        INPUT  = GT_UPLOAD-PARVW
      IMPORTING
        OUTPUT = GT_UPLOAD-PARVW.


    MODIFY GT_UPLOAD TRANSPORTING EQUNR PARVW SNO.

  ENDLOOP.

ENDFORM.                    " UPLOAD_FILE




*&---------------------------------------------------------------------*
*&      Form  GET_EQUI_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_EQUI_DATA .
  IF NOT GT_UPLOAD[] IS INITIAL.
    SELECT EQUNR
           OBJNR
           FROM EQUI
           INTO TABLE GT_EQUI
           FOR ALL ENTRIES IN GT_UPLOAD
           WHERE EQUNR = GT_UPLOAD-EQUNR.
  ENDIF.

  IF NOT GT_EQUI[] IS INITIAL.
    SELECT OBJNR
           PARVW
           COUNTER
           FROM IHPA
           INTO TABLE GT_IHPA
           FOR ALL ENTRIES IN GT_EQUI
           WHERE OBJNR = GT_EQUI-OBJNR.
  ENDIF.


ENDFORM.                    " GET_EQUI_OBJNR


*&---------------------------------------------------------------------*
*&      Form  UPDATE_PARTNER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM UPDATE_PARTNER .
  IF NOT GT_UPLOAD[] IS INITIAL.
    LOOP AT GT_UPLOAD.
      IF NOT GT_UPLOAD-PARNR IS INITIAL.
      CLEAR GT_EQUI.
      READ TABLE GT_EQUI WITH KEY EQUNR = GT_UPLOAD-EQUNR.
      IF SY-SUBRC = 0.
        CLEAR GT_IHPA.
        READ TABLE GT_IHPA WITH KEY OBJNR = GT_EQUI-OBJNR
                                    PARVW = GT_UPLOAD-PARVW.
        IF SY-SUBRC = 0.
          IT_FXIHPA-MANDT   = SY-MANDT.
          IT_FXIHPA-OBJNR   = GT_IHPA-OBJNR.
          IT_FXIHPA-PARVW   = GT_IHPA-PARVW.
          IT_FXIHPA-COUNTER = GT_IHPA-COUNTER.
          IT_FXIHPA-OBTYP   = C_IEQ.
          IT_FXIHPA-PARNR   = GT_UPLOAD-PARNR.
          IT_FXIHPA-UPDKZ   = C_U.
          IT_FXIHPA-ERDAT   = SY-DATUM.
          IT_FXIHPA-ERZEIT  = SY-UZEIT.
          IT_FXIHPA-ERNAM   = SY-UNAME.
          IT_FXIHPA-AEDAT   = SY-DATUM.
          IT_FXIHPA-AEZEIT  = SY-UZEIT.
          IT_FXIHPA-AENAM   = SY-UNAME.
          APPEND IT_FXIHPA.
          CLEAR  IT_FXIHPA.

          CALL FUNCTION 'PM_PARTNER_UPDATE'
            TABLES
              FXIHPA = IT_FXIHPA.

        ELSE.
*   If the partner function(type) is not found in the system
          CLEAR GT_UPLOAD_STATUS.
          READ TABLE GT_UPLOAD_STATUS WITH KEY SNO = GT_UPLOAD-SNO.
          GT_FAIL-EQUNR = GT_UPLOAD_STATUS-EQUNR.
          GT_FAIL-PARVW = GT_UPLOAD_STATUS-PARVW.
          GT_FAIL-PARNR = GT_UPLOAD_STATUS-PARNR.
          GT_FAIL-MESSAGE = 'Partner function is not found in the system for the above equipment'.
          APPEND GT_FAIL.
          CLEAR  GT_FAIL.
        ENDIF.
      ELSE.
*   If equipment number is not found in the system
          CLEAR GT_UPLOAD_STATUS.
          READ TABLE GT_UPLOAD_STATUS WITH KEY SNO = GT_UPLOAD-SNO.
          GT_FAIL-EQUNR = GT_UPLOAD_STATUS-EQUNR.
          GT_FAIL-PARVW = GT_UPLOAD_STATUS-PARVW.
          GT_FAIL-PARNR = GT_UPLOAD_STATUS-PARNR.
          GT_FAIL-MESSAGE = 'Equipment number is not found in the system'.
          APPEND GT_FAIL.
          CLEAR  GT_FAIL.
      ENDIF.
    ELSE.
*   If partner number is inital, don't allow to update.
          CLEAR GT_UPLOAD_STATUS.
          READ TABLE GT_UPLOAD_STATUS WITH KEY SNO = GT_UPLOAD-SNO.
          GT_FAIL-EQUNR = GT_UPLOAD_STATUS-EQUNR.
          GT_FAIL-PARVW = GT_UPLOAD_STATUS-PARVW.
          GT_FAIL-MESSAGE = 'Partner number missing in the upload file'.
          APPEND GT_FAIL.
          CLEAR  GT_FAIL.
   ENDIF.
   ENDLOOP.
  ENDIF.
ENDFORM.                    " UPDATE_PARTNER



*&---------------------------------------------------------------------*
*&      Form  DISP_STATUS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DISP_STATUS .

* As the FM does not have a return parameter, check manually to find if the update is succesful.
*for the  equipment and partner function, check if the new partner is same as the one in the UPLOAD file.

  IF NOT GT_EQUI[] IS INITIAL.
    SELECT OBJNR
           PARVW
           COUNTER
           FROM IHPA
           INTO TABLE GT_IHPA_STATUS
           FOR ALL ENTRIES IN GT_EQUI
           WHERE OBJNR = GT_EQUI-OBJNR.
  ENDIF.

  IF NOT GT_UPLOAD[] IS INITIAL.
    LOOP AT GT_UPLOAD WHERE PARNR IS NOT INITIAL.
      CLEAR GT_EQUI.
      READ TABLE GT_EQUI WITH KEY EQUNR = GT_UPLOAD-EQUNR.
      IF SY-SUBRC = 0.
        CLEAR GT_IHPA.
        READ TABLE GT_IHPA WITH KEY OBJNR = GT_EQUI-OBJNR
                                    PARVW = GT_UPLOAD-PARVW.
        IF SY-SUBRC = 0.
          CLEAR GT_IHPA_STATUS.
          READ TABLE GT_IHPA_STATUS WITH KEY OBJNR   = GT_IHPA-OBJNR
                                             PARVW   = GT_IHPA-PARVW
                                             COUNTER = GT_IHPA-COUNTER.
          IF SY-SUBRC = 0.
*          Means it is same, so update was successful.
            CLEAR GT_UPLOAD_STATUS.
            READ TABLE GT_UPLOAD_STATUS WITH KEY SNO = GT_UPLOAD-SNO.
            GT_SUCC-EQUNR = GT_UPLOAD_STATUS-EQUNR.
            GT_SUCC-PARVW = GT_UPLOAD_STATUS-PARVW.
            GT_SUCC-PARNR = GT_UPLOAD_STATUS-PARNR.
            APPEND GT_SUCC.
            CLEAR  GT_SUCC.

          ELSE.
*          Means it is not same, so update failed.
            CLEAR GT_UPLOAD_STATUS.
            READ TABLE GT_UPLOAD_STATUS WITH KEY SNO = GT_UPLOAD-SNO.
            GT_FAIL-EQUNR = GT_UPLOAD_STATUS-EQUNR.
            GT_FAIL-PARVW = GT_UPLOAD_STATUS-PARVW.
            GT_FAIL-PARNR = GT_UPLOAD_STATUS-PARNR.
            GT_FAIL-MESSAGE = 'Update failed.'.
            APPEND GT_FAIL.
            CLEAR  GT_FAIL.
          ENDIF.

        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.

  DESCRIBE TABLE GT_UPLOAD LINES GV_TOTAL.
  DESCRIBE TABLE GT_SUCC LINES GV_SUCC.
  DESCRIBE TABLE GT_FAIL LINES GV_FAIL.



  WRITE : /'**********************************************************************'.
  FORMAT COLOR COL_HEADING INTENSIFIED.
  WRITE : /'Total Number of records                                :  ',  GV_TOTAL.
  FORMAT RESET.
  WRITE : /'**********************************************************************'.


  IF GV_SUCC > 0.
    SKIP 2.
    WRITE : /'**********************************************************************'.
    FORMAT COLOR COL_POSITIVE INTENSIFIED.
    WRITE : /'The equipments successfully updated are :  '  .
    FORMAT RESET.
    LOOP AT GT_SUCC.
      CLEAR GV_PARVW.
      MOVE  GT_SUCC-PARVW TO GV_PARVW.      " So that conversion routine does not kick in
      WRITE /:''.
      WRITE : GT_SUCC-EQUNR, GV_PARVW, GT_SUCC-PARNR.
    ENDLOOP.
    WRITE : /'**********************************************************************'.
  ENDIF.

  IF GV_FAIL > 0.
    SKIP 2.
    WRITE : /'**********************************************************************'.
    FORMAT COLOR COL_GROUP INTENSIFIED.
    WRITE : /'The equipments not updated are :  '.
    FORMAT RESET.
    LOOP AT GT_FAIL.
      CLEAR GV_PARVW.
      MOVE  GT_FAIL-PARVW TO GV_PARVW.      " So that conversion routine does not kick in
      SKIP 1.
      WRITE : GT_FAIL-EQUNR, GV_PARVW,  GT_FAIL-PARNR.
      WRITE /: GT_FAIL-MESSAGE.
      SKIP 1.
    ENDLOOP.
    WRITE : /'**********************************************************************'.
  ENDIF.

  IF GV_SUCC > 0 OR GV_FAIL > 0.
    SKIP 2.
    WRITE : /'**********************************************************************'.
    IF GV_SUCC > 0.
      FORMAT COLOR COL_POSITIVE INTENSIFIED.
      WRITE :  /'Number of records updated successfully                 :  ',  GV_SUCC.
      FORMAT RESET.
    ENDIF.
    IF GV_FAIL > 0.
      FORMAT COLOR COL_NEGATIVE INTENSIFIED.
      WRITE : /'Total Number of records not updated                    :  ',  GV_FAIL.
      FORMAT RESET.
    ENDIF.
    WRITE : /'**********************************************************************'.
  ENDIF.



ENDFORM.                    " DISP_STATUS



*&---------------------------------------------------------------------*
*&      Form  CHECK_AUTHORIZATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CHECK_AUTHORIZATION .
* Get the plant for the equipments for checking authorizations
  IF NOT GT_UPLOAD[] IS INITIAL.
    SELECT EQUNR
           IWERK
           FROM AFIH
           INTO TABLE GT_AFIH
           FOR ALL ENTRIES IN GT_UPLOAD
           WHERE EQUNR = GT_UPLOAD-EQUNR.
  ENDIF.
  DELETE ADJACENT DUPLICATES FROM GT_AFIH COMPARING IWERK.

* Check if the user has authorization for the plant where the equipment is located.
  IF NOT GT_AFIH[] IS INITIAL.

    LOOP AT GT_AFIH.
      AUTHORITY-CHECK OBJECT 'I_IWERK'
                 ID 'ACTVT' DUMMY
                 ID 'IWERK' FIELD GT_AFIH-IWERK.
      IF SY-SUBRC = 4.
*   No authorisation to display data from the plant
        MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '010' WITH GT_AFIH-IWERK.
        EXIT.
      ELSEIF SY-SUBRC <> 0.
*   Error checking authorization.
        MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '004'.
        EXIT.
      ENDIF.

    ENDLOOP.

  ENDIF.


ENDFORM.                    " CHECK_AUTHORIZATION
