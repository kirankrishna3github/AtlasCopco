*&---------------------------------------------------------------------*
*&  Include           J_3R_OS_F04
*&---------------------------------------------------------------------*

FORM fill_os1_s2t  USING    ps_table4 TYPE j_3r_invc_s4.

  DATA: ls_os1_s2t TYPE j_3r_os1_s2t,
        ls_table7d TYPE j_3r_invc_s7d,
        ls_anlav   TYPE anlav.


  LOOP AT gt_table7d INTO ls_table7d
                     WHERE bukrs EQ ps_table4-bukrs
                       AND anln1 EQ ps_table4-anln1
                       AND anln2 EQ ps_table4-anln2.

    READ TABLE gt_anlav INTO ls_anlav
                        WITH KEY bukrs = ls_table7d-bukrs
                                 anln1 = ls_table7d-anln1
                                 anln2 = ls_table7d-anln2.

    IF ls_anlav-menge EQ 0.
      MOVE 1 TO ls_anlav-menge.
    ENDIF.

    MOVE:
          ls_anlav-bukrs     TO ls_os1_s2t-bukrs,
          ls_anlav-anln1     TO ls_os1_s2t-anln1,
          ls_anlav-anln2     TO ls_os1_s2t-anln2,
          ls_anlav-txt50       TO ls_os1_s2t-n62_col1_obj_name,
          ls_anlav-menge       TO ls_os1_s2t-n62_col2_obj_qnty,
*      ls_table7d-PRECCODE  to
          ls_table7d-okpcode   TO ls_os1_s2t-n62_col4_pr_mat_nom_nr,
          ls_table7d-descript  TO ls_os1_s2t-n62_col3_pr_mat_name,
*      ls_table7d-COUNTABLE to
          ls_table7d-quantity  TO ls_os1_s2t-n62_col6_pr_mat_qnty,
          ls_table7d-mass      TO ls_os1_s2t-n62_col7_pr_mat_mass,
          ls_table7d-wunit     TO ls_os1_s2t-unit.
           if ls_table7d-quantity is not INITIAL .
              PERFORM update_precm_unit USING ls_table7d-qunit gs_t001-spras
                                     CHANGING ls_os1_s2t-n62_col5_pr_mat_uom.
*             MOVE ls_table7d-qunit     TO ls_os1_s2t-n62_col5_pr_mat_uom.

          ELSE.
              PERFORM update_precm_unit USING ls_table7d-wunit gs_t001-spras
                                     CHANGING ls_os1_s2t-n62_col5_pr_mat_uom.
*             MOVE ls_table7d-wunit     TO ls_os1_s2t-n62_col5_pr_mat_uom.
          endif.
    APPEND ls_os1_s2t TO gt_os1_s2t.
    CLEAR ls_os1_s2t.
  ENDLOOP.

  IF sy-subrc NE 0.
    MOVE '-' TO: ls_os1_s2t-n62_col3_pr_mat_name,
                 ls_os1_s2t-n62_col4_pr_mat_nom_nr,
                 ls_os1_s2t-n62_col5_pr_mat_uom.
*                 ls_os1_s2t-n62_col6_pr_mat_qnty,
*                 ls_os1_s2t-n62_col7_pr_mat_mass.
    APPEND ls_os1_s2t TO gt_os1_s2t.
  ENDIF.

*    N62_COL1_OBJ_NAME
*    N62_COL2_OBJ_QNTY
*    N62_COL3_PR_MAT_NAME
*    N62_COL4_PR_MAT_NOM_NR
*    N62_COL5_PR_MAT_UOM
*    N62_COL6_PR_MAT_QNTY
*    N62_COL7_PR_MAT_MASS
*    N62_COL7_NOTE
*    N62_4A_COL1_SEQ_NR
*    N62_4A_COL2_TECH_PASSPORT_NR
*    N62_4A_COL3_ENGINE_NR
*    N62_4A_COL4_CHASSIS_NR
*    N62_4A_COL5_CAPACITY
*    N62_4A_COL6_MASS
* APPEND ls_os1_s2t TO gt_os1_s2t.

* change according to the request in the Internal message> 0120061532 0002940769 2006
  DATA: lv_os1_s1t_row_count TYPE i,
        lv_os1_s2t_row_count TYPE i,
        lv_row_difference TYPE i.

  DESCRIBE TABLE gt_os1_s1t LINES lv_os1_s1t_row_count.
  DESCRIBE TABLE gt_os1_s2t LINES lv_os1_s2t_row_count.
  lv_row_difference = lv_os1_s1t_row_count - lv_os1_s2t_row_count.
  IF lv_row_difference > 0.
    CLEAR ls_os1_s2t.
    DO lv_row_difference TIMES.
      APPEND ls_os1_s2t TO gt_os1_s2t.
    ENDDO.
  ENDIF.


ENDFORM.                    " fill_os1_s2t

*&---------------------------------------------------------------------*
*&      Form  fill_os1b_s1d
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_FILLING_RULE  text
*----------------------------------------------------------------------*
FORM fill_os1b_s1d  USING    p_filling_rule TYPE char10.

* OS1b, OS2
  DATA: lv_acq_val_sum    TYPE j_3r_acq_val,
        lv_orig_costs_sum TYPE j_3r_orig_costs,
        ls_os1_s1t        TYPE j_3r_os1_s1t.


  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '2-IT' OR '2-TD'.
      LOOP AT gt_os1_s1t INTO ls_os1_s1t.
        lv_acq_val_sum = lv_acq_val_sum + ls_os1_s1t-n57_acq_value.
        lv_orig_costs_sum = lv_orig_costs_sum + ls_os1_s1t-n58_orig_costs.
      ENDLOOP.
  ENDCASE.

  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '2-IT' OR '2-TD'.
      gs_os1b_s1d-n57_total_acq_value = lv_acq_val_sum.
  ENDCASE.

  CASE p_filling_rule.
    WHEN '1-A' OR '1-R'.
      gs_os1b_s1d-n58_total_costs = lv_orig_costs_sum.
  ENDCASE.

ENDFORM.                    "fill_os1b_s1d


*&---------------------------------------------------------------------*
*&      Form  fill_OS1_S3T
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_FILLING_RULE  text
*----------------------------------------------------------------------*
FORM fill_os1_s3t USING p_filling_rule TYPE char10.

  DATA: ls_os1_s3t TYPE j_3r_os1_s3t.

  CASE p_filling_rule.
    WHEN '1-A' OR '1_R'.
*    N63A_COL1_MAIN_OBJ
*    N63A_COL2_CHARACT1
*    N63A_COL3_ CHARACT2
*    N63A_COL4_ CHARACT3
*    N63A_COL5_ CHARACT4
*    N63A_COL6_NOTE
    WHEN OTHERS.
  ENDCASE.

*  APPEND ls_os1_s3t TO gt_os1_s3t.

ENDFORM.                    "fill_os1_s3t

*&---------------------------------------------------------------------*
*&      Form  fill_os4_s3t
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_FILLING_RULE  text
*----------------------------------------------------------------------*
FORM fill_os4_s3t USING p_filling_rule TYPE char10
                        ps_table4      TYPE j_3r_invc_s4.

*  OS4, OS4a, OS4b
  DATA: ls_os4_s3t TYPE j_3r_os4_s3t.
  data ls_table4_add TYPE j_3r_invc_s4_cost.
  data ls_formatted_date(10) type c.
*  DATA: lt_anea TYPE TABLE OF anea,
*        lt_anlb TYPE TABLE OF anlb,
*        ls_anea TYPE anea.

*  N63_4_DISM_AMOUNT
  check p_filling_rule = '4'.
  loop at gt_table4_add  into ls_table4_add where bukrs = ps_table4-bukrs and
                               anln1 = ps_table4-anln1 and
                               anln2 = ps_table4-anln2.

    ls_os4_s3t-n63_4_dism_amount = ls_table4_add-verko.




*  if the sum value is 0, the current line should be printed and should be skipped because it means that
*  there are no dismantling costs.
   IF ls_os4_s3t-n63_4_dism_amount = 0 AND ( p_formna = 'OS4' OR p_formna = 'OS4A' ).
     continue.
   ENDIF.
     ls_os4_s3t-n61_4_dism_work_type = ls_table4_add-opertype. "gs_bseg-anbwa.

*   N62_4_DISM_DOCUMENT
      write ls_table4_add-datedoc to ls_formatted_date.
       CONCATENATE ls_formatted_date ls_table4_add-numbdoc "ls_bkpf-bldat ls_bkpf-xblnr
         INTO ls_os4_s3t-n62_4_dism_document
         SEPARATED BY space.

*   N64_4_DISM_DEBIT_ACC
*   N65_4_DISM_CREDIT_ACC
*   N71_4_WROFF_DOCUMENT
*   N72_4_MAT_ASS_NAME
*   N73_4_MAT_ASS_NOM_NR
*   N74_4_MAT_ASS_UOM
*   N75_4_MAT_ASS_QNTY
*   N76_4_MAT_ASS_UNIT_VAL
*   N78_4_MAT_ASS _VAL
*   N79_4_WROFF_DEBIT_ACC
*   N80_4_WROFF_CREDIT_ACC
*   N71_4B_1_WROFF_DOC_NAME
*   N71_4B_2_WROFF_DOC_DATE
*   N71_4B_3_WROFF_DOC_NR
*   N77_4_ MAT_ASS _VAL
*   N80_4B_SEQ_NR

* Reference fields for customer's BADi
  ls_os4_s3t-gjahr = ls_table4_add-gjahr.
  ls_os4_s3t-lnran = ls_table4_add-lnran.
  ls_os4_s3t-buzei = ls_table4_add-buzei.

   APPEND ls_os4_s3t TO gt_os4_s3t.
 endloop.
ENDFORM.                    "fill_os4_s3t

*&---------------------------------------------------------------------*
*&      Form  fill_os4_s3d
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_FILLING_RULE  text
*----------------------------------------------------------------------*
FORM fill_os4_s3d USING p_filling_rule TYPE char10.

  DATA: ls_os4_s3t           TYPE j_3r_os4_s3t,
        lv_total_dism_amount TYPE j_3r_wr_off_amount_total,
        lv_total_mat_ass_val TYPE j_3r_mat_ass_val_total.

  CASE p_filling_rule.
    WHEN '4'.
      LOOP AT gt_os4_s3t INTO ls_os4_s3t.
        lv_total_dism_amount = lv_total_dism_amount + ls_os4_s3t-n63_4_dism_amount.
        lv_total_mat_ass_val = lv_total_mat_ass_val + ls_os4_s3t-n78_4_mat_ass_val.
      ENDLOOP.
    WHEN OTHERS.
  ENDCASE.

*  N63_4_TOTAL_DISM_AMOUNT
  CASE p_filling_rule.
    WHEN '4'.
      gs_os4_s3d-n63_4_total_dism_amount = lv_total_dism_amount.
    WHEN OTHERS.
  ENDCASE.

*  N78_4_TOTAL_MAT_ASS_VAL
  CASE p_filling_rule.
    WHEN '4'.
      gs_os4_s3d-n78_4_total_mat_ass_val = lv_total_mat_ass_val.
    WHEN OTHERS.
  ENDCASE.
ENDFORM.                    "fill_os4_s3d

*&---------------------------------------------------------------------*
*&      Form  fill_os4a_s3t
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_FILLING_RULE  text
*----------------------------------------------------------------------*
FORM fill_os4a_s3t  USING    p_filling_rule TYPE char10.

  DATA: ls_os4a_s3t TYPE j_3r_os4a_s3t.

  CASE p_filling_rule.
    WHEN '4'.
*      N80_4A_COL1_PARTS_ORDER_NR
*      N80_4A_COL2_ PARTS_CATAL_NR
*      N80_4A_COL3_ PARTS_NOM_NR
*      N80_4A_COL4_ PARTS_NAME
*      N80_4A_COL5_ PARTS_UOM
*      N80_4A_COL6_ PARTS_QNTY
*      N80_4A_COL7_ PARTS_UNIT_VALUE
*      N80_4A_COL8_ PARTS_VALUE
*      N80_4A_COL9_ PARTS_NOTE
    WHEN OTHERS.
  ENDCASE.

*  APPEND ls_os4a_s3t TO gt_os4a_s3t.

ENDFORM.                    "fill_os4a_s3t

*&---------------------------------------------------------------------*
*&      Form  fill_os4b_s2d
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_FILLING_RULE  text
*----------------------------------------------------------------------*
FORM fill_os4b_s2d  USING p_filling_rule TYPE char10.

  CASE p_filling_rule.
    WHEN '4'.
*      N77_4_TOTAL_MAT_ASS_VAL
*     gs_os4b_s2d-n77_4_total_mat_ass_val =
    WHEN OTHERS.
  ENDCASE.

ENDFORM.                    "fill_os4b_s2d

*&---------------------------------------------------------------------*
*&      Form  fill_os4b_s2t
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_FILLING_RULE  text
*----------------------------------------------------------------------*
FORM fill_os4b_s1t USING p_filling_rule TYPE char10
                         ps_table4      TYPE j_3r_invc_s4.

  DATA: ls_os4b_s1t TYPE j_3r_os4b_s1t,
        ls_anlav    TYPE anlav,
        ls_header   TYPE j_3r_invc_header,
        ls_table1   TYPE j_3r_invc_s1,
        ls_table7d  TYPE j_3r_invc_s7d.

*  DATA: lt_anea TYPE TABLE OF anea,
*        lt_anlb TYPE TABLE OF anlb,
*        ls_anlb TYPE anlb,
*        ls_anea TYPE anea.

  DATA: lt_langs TYPE umgtlangcp,
        ls_langs TYPE umgslangcp,
        ls_t003t TYPE t003t.

*read language vector
  CALL FUNCTION 'UMG_READ_LANG_INFO'
    IMPORTING
      ex_langcp_itab        = lt_langs
    EXCEPTIONS
      no_codepage_avaiable  = 1
      empty_language_vector = 2
      OTHERS                = 3.

  READ TABLE gt_header
    INTO ls_header
    WITH KEY  bukrs = ps_table4-bukrs
              anln1 = ps_table4-anln1
              anln2 = ps_table4-anln2.

*OS6 table1 information
  READ TABLE gt_table1
  INTO ls_table1
  WITH KEY bukrs  = ps_table4-bukrs
            anln1 = ps_table4-anln1
            anln2 = ps_table4-anln2.

* asset information
*  READ TABLE gt_anlav
*      INTO ls_anlav
*      with key bukrs = ps_table4-bukrs
*               anln1 = ps_table4-anln1
*               anln2 = ps_table4-anln2.

  SORT gt_anlav BY bukrs anln1 anln2 bdatu.
  LOOP AT gt_anlav
    INTO ls_anlav
    WHERE bukrs = ps_table4-bukrs AND
                 anln1 = ps_table4-anln1 AND
                 anln2 = ps_table4-anln2 AND
                 bdatu >= ps_table4-daccept AND
                 adatu <= ps_table4-daccept.
  ENDLOOP.

*asset proportional information
*  CALL FUNCTION 'ANEA_READ_MULTIPLE_GJAHR_ALL'
*    EXPORTING
*      i_anln1          = ps_table4-anln1
*      i_anln2          = ps_table4-anln2
**   I_BISGJAHR       = '0000'
*      i_bukrs          = ps_table4-bukrs
*      i_gjahr          = ps_table4-gjahr
*    TABLES
*      t_anea           = lt_anea
*      t_anlb           = lt_anlb
*   EXCEPTIONS
*     not_found        = 1
*     OTHERS           = 2
*            .
*  IF sy-subrc <> 0.
*    PERFORM message_add USING sy-msgty sy-msgno sy-msgid sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ELSE.
*    SORT lt_anlb DESCENDING BY bdatu.
*    LOOP AT lt_anlb INTO ls_anlb.
*      IF ls_anlb-bdatu < gv_repdt AND ls_anlb-afabe = '01'.
*        EXIT.
*      ENDIF.
*    ENDLOOP.
*
*    LOOP AT lt_anea INTO ls_anea.
*      IF ls_anea-lnran = ps_table4-lnran AND ls_anea-afabe = '01'.
*        EXIT.
*      ENDIF.
*    ENDLOOP.
*
*  ENDIF.

*   N49B_SEQ_NR
  PERFORM get_next_seq_nr
            USING    gt_os4b_s1t
            CHANGING ls_os4b_s1t-n49b_seq_nr.

*   N30_ASSET_DSCR
*  CONCATENATE ls_header-alasname
*              ls_header-almodel
*      INTO ls_os4b_s1t-n30_asset_dscr
*      SEPARATED BY space.
  CONCATENATE ls_anlav-txt50 ls_anlav-txa50 INTO  ls_os4b_s1t-n30_asset_dscr
  SEPARATED BY space.

*   N18_INVENTORY_NR
  ls_os4b_s1t-n18_inventory_nr = ls_header-alnmb3.

*   N53_ACT_USE_LIFE
  ls_os4b_s1t-n53_act_use_life_year = ls_table1-fdjar.
  ls_os4b_s1t-n53_act_use_life_per  = ls_table1-fdper.

* Reference fields for customer's BAdis
  ls_os4b_s1t-bukrs = ps_table4-bukrs.
  ls_os4b_s1t-anln1 = ps_table4-anln1.
  ls_os4b_s1t-anln2 = ps_table4-anln2.
  ls_os4b_s1t-gjahr = ps_table4-gjahr.
  ls_os4b_s1t-lnran = ps_table4-lnran.
  ls_os4b_s1t-buzei = ps_table4-buzei.

*   N50_4_BALANCE_VAL
  IF ps_table4-anbtr > 0.
    ls_os4b_s1t-n50_4_balance_val = ps_table4-anbtr. "nbvalue.
  ELSE.
    ls_os4b_s1t-n50_4_balance_val = -1 * ps_table4-anbtr. "nbvalue.
  ENDIF.

*   N55_DPR_AMNT
*  ls_os4b_s1t-n55_dpr_amnt = ls_anea-nafav + ls_anea-safav + ls_anea-aafav + ls_anea-aufnv +
*                             ls_anea-nafal + ls_anea-safal + ls_anea-aafal + ls_anea-aufnv.
*  ls_os4b_s1t-n55_dpr_amnt = abs( ps_table4-depreciation ).
* Depreciation + (value adjustments if customized)
  PERFORM depr_and_val_adjustments USING ps_table4-depreciation
                                       ps_table4-valadjust
                              CHANGING ls_os4b_s1t-n55_dpr_amnt.
 ls_os4b_s1t-n55_dpr_amnt = abs( ls_os4b_s1t-n55_dpr_amnt ).

*   N56_NET_VALUE
  IF ps_table4-nbvalue > 0.
    ls_os4b_s1t-n56_net_value = ps_table4-nbvalue.
  ELSE.
    ls_os4b_s1t-n56_net_value = -1 * ps_table4-nbvalue.
  ENDIF.

*   N30_4_WROFF_REASON
*  IF lt_langs IS NOT INITIAL.
*    LOOP AT lt_langs INTO ls_langs.
*
*      SELECT SINGLE *
*        FROM  t003t
*        INTO  ls_t003t
*        WHERE spras = ls_langs-langu AND
*              blart = ps_table4-blart. "gs_bkpf-blart.
*
*      IF sy-subrc = 0.
*        ls_os4b_s1t-n30_4_wroff_reason = ls_t003t-ltext. "T003T-LTEXT
*        EXIT.
*      ENDIF.
*    ENDLOOP.
*  ENDIF.
  PERFORM get_write_off_reason using ps_table4
                               CHANGING ls_os4b_s1t-n30_4_wroff_reason.
*  ls_os4b_s1t-n30_4_wroff_reason = ps_table4-bktxt.
* Preciuos material part
  LOOP AT gt_table7d INTO ls_table7d
                     WHERE bukrs EQ ls_anlav-bukrs
                       AND anln1 EQ ls_anlav-anln1
                       AND anln2 EQ ls_anlav-anln2.

    MOVE:
*      ls_table7d-PRECCODE  to
          ls_table7d-okpcode   TO ls_os4b_s1t-n62_col4_pr_mat_nom_nr,
          ls_table7d-descript  TO ls_os4b_s1t-n62_col3_pr_mat_name,
*      ls_table7d-COUNTABLE to
          ls_table7d-quantity  TO ls_os4b_s1t-n62_col6_pr_mat_qnty,
          ls_table7d-mass      TO ls_os4b_s1t-n62_col7_pr_mat_mass,
          ls_table7d-wunit     TO ls_os4b_s1t-unit.
          if ls_table7d-quantity is not INITIAL .
             PERFORM update_precm_unit USING ls_table7d-qunit gs_t001-spras
                                     CHANGING ls_os4b_s1t-n62_col5_pr_mat_uom.
*             MOVE ls_table7d-qunit     TO ls_os4b_s1t-n62_col5_pr_mat_uom.
          ELSE.
             PERFORM update_precm_unit USING ls_table7d-wunit gs_t001-spras
                                     CHANGING ls_os4b_s1t-n62_col5_pr_mat_uom.
*             MOVE ls_table7d-wunit     TO ls_os4b_s1t-n62_col5_pr_mat_uom.
          endif.
    APPEND ls_os4b_s1t TO gt_os4b_s1t.
    CLEAR ls_os4b_s1t.
  ENDLOOP.

  IF sy-subrc NE 0.
    MOVE '-' TO: ls_os4b_s1t-n62_col3_pr_mat_name,
                 ls_os4b_s1t-n62_col4_pr_mat_nom_nr.
*                 ls_os4b_s1t-n62_col5_pr_mat_uom,
*                 ls_os4b_s1t-n62_col6_pr_mat_qnty,
*                 ls_os4b_s1t-n62_col7_pr_mat_mass.
    APPEND ls_os4b_s1t TO gt_os4b_s1t.
  ENDIF.

ENDFORM.                    "fill_os4b_s1t

*&---------------------------------------------------------------------*
*&      Form  fill_os3_s2t
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_FILLING_RULE  text
*----------------------------------------------------------------------*
FORM fill_os3_s2t  USING p_filling_rule TYPE char10
                         p_table5       TYPE j_3r_invc_s5
                         p_table6       TYPE j_3r_invc_s6.

  DATA: ls_os3_s2t TYPE j_3r_os3_s2t,
        ls_header  TYPE j_3r_invc_header.

      PERFORM get_next_seq_nr
               USING    gt_os3_s2t
               CHANGING ls_os3_s2t-n49b_seq_nr.


  CASE p_filling_rule.
    WHEN '3-PM'.

*        N49B_SEQ_NR

*        N30_ASSET_DSCR
      READ TABLE gt_header
        INTO ls_header
        WITH KEY bukrs = p_table6-bukrs
                 anln1 = p_table6-anln1
                 anln2 = p_table6-anln2.

      CONCATENATE ls_header-alasname
                  ls_header-almodel
          INTO ls_os3_s2t-n30_asset_dscr
          SEPARATED BY space.

*       N63_3_WORK_TYPE
      ls_os3_s2t-n63_3_work_type = p_table6-opertype.

*      N65_3_ORD_REPAIR_COST
      ls_os3_s2t-n65_3_ord_repair_cost = p_table6-expsum_plan.

*      N67_3_ACT_REPAIR_COST
      ls_os3_s2t-n67_3_act_repair_cost = p_table6-expsum.

*      N64_3_DISM_EXP           (not to fill)
*      N66_3_ORD_REST_COST      (not to fill)
*      N68_3_ACT_REST_COST      is filled in case of modernization (FI-AA posting)
*      N69_3_ACT_EQ_TRANSP_COST (not to fill)
*      N70_3_NOTE               (not to fill)

    WHEN OTHERS.
  IF ls_os3_s2t-n65_3_ord_repair_cost IS INITIAL AND
    ls_os3_s2t-n67_3_act_repair_cost IS INITIAL.
      ls_os3_s2t-n66_3_ord_rest_cost = p_table5-expsum.
      ls_os3_s2t-n68_3_act_rest_cost = p_table5-expsum.
  ENDIF.
  ENDCASE.
  if ls_os3_s2t-n63_3_work_type is INITIAL.
    ls_os3_s2t-n63_3_work_type = p_wotype.
  endif.
  ls_os3_s2t-n30_asset_dscr = gs_os1_s1t-n30_asset_dscr.
  APPEND ls_os3_s2t TO gt_os3_s2t.

ENDFORM.                    "fill_OS3_S2T

*&---------------------------------------------------------------------*
*&      Form  fill_os3_s2d
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_FILLING_RULE  text
*----------------------------------------------------------------------*
FORM fill_os3_s2d USING p_filling_rule TYPE char10.

  DATA: ls_os3_s2t             TYPE j_3r_os3_s2t,
        lv_dism_exp_total      TYPE j_3r_dism_exp_total,
        lv_ord_repair_total    TYPE j_3r_ord_repair_cost_total,
        lv_ord_rest_total      TYPE j_3r_ord_rest_total,
        lv_act_repair_total    TYPE j_3r_act_repair_total,
        lv_act_rest_total      TYPE j_3r_act_rest_total,
        lv_act_eq_transp_total TYPE j_3r_act_eq_transp_total.

  DATA: ls_os1_s1t   TYPE j_3r_os1_s1t,
        lv_net_value TYPE j_3r_os1_s1t-n56_net_value.

*  CASE p_filling_rule.

*    WHEN '3-PM'.

      LOOP AT gt_os3_s2t INTO ls_os3_s2t.
        lv_dism_exp_total      = lv_dism_exp_total      + ls_os3_s2t-n64_3_dism_exp.
        lv_ord_repair_total    = lv_ord_repair_total    + ls_os3_s2t-n65_3_ord_repair_cost.
        lv_ord_rest_total      = lv_ord_rest_total      + ls_os3_s2t-n66_3_ord_rest_cost.
        lv_act_repair_total    = lv_act_repair_total    + ls_os3_s2t-n67_3_act_repair_cost.
        lv_act_rest_total      = lv_act_rest_total      + ls_os3_s2t-n68_3_act_rest_cost.
        lv_act_eq_transp_total = lv_act_eq_transp_total + ls_os3_s2t-n69_3_act_eq_transp_cost.
      ENDLOOP.

*      N71_3_DISM_EXP_TOTAL
      gs_os3_s2d-n71_3_dism_exp_total        = lv_dism_exp_total.
*      N72_3_ORD_REPAIR_COST_TOTAL
      gs_os3_s2d-n72_3_ord_repair_cost_total = lv_ord_repair_total.
*      N73_3_ORD_REST_TOTAL
      gs_os3_s2d-n73_3_ord_rest_total        = lv_ord_rest_total.
*      N74_3_ACT_REPAIR_TOTAL
      gs_os3_s2d-n74_3_act_repair_total      = lv_act_repair_total.
*      N75_3_ACT_REST_TOTAL
      gs_os3_s2d-n75_3_act_rest_total        = lv_act_rest_total.
*      N76_3_ACT_EQ_TRANSP_TOTAL
      gs_os3_s2d-n76_3_act_eq_transp_total   = lv_act_eq_transp_total.

*    WHEN '3-AA'.
*      N77_3_NET_BOOK_VALUE
      LOOP AT gt_os1_s1t INTO ls_os1_s1t.
        lv_net_value = lv_net_value + ls_os1_s1t-n56_net_value.
        exit.
      ENDLOOP.

      gs_os3_s2d-n77_3_net_book_value = lv_net_value + gs_os3_s2d-n75_3_act_rest_total.

*    WHEN OTHERS.
*  ENDCASE.

ENDFORM.                    "fill_os3_s2d


*&---------------------------------------------------------------------*
*&      Form  fill_os6a_s1t
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_FILLING_RULE  text
*----------------------------------------------------------------------*
FORM fill_os6a_s1t USING p_filling_rule TYPE char10
                         p_table4       TYPE j_3r_invc_s4.

  DATA: ls_os6a_s1t     TYPE j_3r_os6a_s1t,
        ls_header       TYPE j_3r_invc_header,
        ls_table1       TYPE j_3r_invc_s1,
        ls_table2       TYPE j_3r_invc_s2,
        ls_table3       TYPE j_3r_invc_s3,
        ls_t4_1st       TYPE j_3r_invc_s4.

  DATA: ls_t4_remove  TYPE j_3r_invc_s4,
        ls_asset_move TYPE j_3r_invc_asset_move,
        lv_rep_date   TYPE dats.

  DATA: ls_os6a_reval TYPE j_3r_os6a_revaluation,
        lt_os6a_reval TYPE j_3r_os6a_revaluation_tab.

  READ TABLE gt_header
    INTO ls_header
    WITH KEY bukrs = p_table4-bukrs
             anln1 = p_table4-anln1
             anln2 = p_table4-anln2.

  READ TABLE gt_table1
    INTO ls_table1
    WITH KEY bukrs = p_table4-bukrs
             anln1 = p_table4-anln1
             anln2 = p_table4-anln2.

  READ TABLE gt_table2
    INTO ls_table2
    WITH KEY bukrs = p_table4-bukrs
             anln1 = p_table4-anln1
             anln2 = p_table4-anln2.

  CASE p_filling_rule.
    WHEN '6'.
* Asset key for customer's BADI's
      ls_os6a_s1t-bukrs  = ls_header-bukrs.
      ls_os6a_s1t-anln1  = ls_header-anln1.
      ls_os6a_s1t-anln2  = ls_header-anln2.

*      ND1_SEQ_NR
      PERFORM get_next_seq_nr
        USING    gt_os6a_s1t
        CHANGING ls_os6a_s1t-nd1_seq_nr.

*      N30_ASSET_DSCR
      CONCATENATE ls_header-alasname
                  ls_header-almodel
          INTO ls_os6a_s1t-n30_asset_dscr
          SEPARATED BY space.

*      N18_INVENTORY_NR
      ls_os6a_s1t-n18_inventory_nr = ls_header-alnmb3.

*      N16_OKOF
      ls_os6a_s1t-n16_okof = ls_header-alokof.

*      N50_PROD_YEAR
      ls_os6a_s1t-n50_prod_year = ls_table1-dcons(4).

*      ND6N_REC_DOC_DATE
      ls_os6a_s1t-nd6d_rec_doc_date = ls_table1-dsdoc.

*      ND6N_REC_DOC_NR
      ls_os6a_s1t-nd6d_rec_doc_nr = ls_table1-numbersdoc.

*      ND7N_BOOK_DATE
      ls_os6a_s1t-nd7n_book_date = ls_header-albuydate.

*      ND10N_DPR_AMOUNT (as of date beginning of interval)
      PERFORM depr_and_val_adjustments USING ls_table1-depreciation
                                       ls_table1-valadjust
                              CHANGING ls_os6a_s1t-nd10n_dpr_amount.
*      ND11N_REM_VALUE (as of date beginning of interval)

       ls_os6a_s1t-nd11n_rem_value = ls_table1-nbvalue.
*      ND8N_INIT_VAL
* It was an error in SRS OS-6A(B)
*      ls_os6a_s1t-nd8n_init_val = ls_os6a_s1t-nd10n_dpr_amount +
*                                  ls_os6a_s1t-nd11n_rem_value.
       ls_os6a_s1t-nd8n_init_val = ls_table2-kansw.
*      N54_USE_LIFE_YEAR
      ls_os6a_s1t-n54_use_life_year = ls_table2-ndjar.
*      N54_USE_LIFE_PER
      ls_os6a_s1t-n54_use_life_per = ls_table2-ndper.

      IF p_formna = 'OS6B'.
        lv_rep_date = so_repdt-high.
      ELSE.
        lv_rep_date = p_repdt.
      ENDIF.

      IF p_table4-bdatu <= lv_rep_date.

        " asset was removed from inventory card (retirement or internal transfer)
        " searching the reason of why the asset was removed from asset group: int.transf, retirement
        " reason can be found in the next row of table4
        CLEAR ls_t4_remove.

        LOOP AT gt_table4 INTO ls_t4_remove
            WHERE bukrs = p_table4-bukrs AND
                  anln1 = p_table4-anln1 AND
                  anln2 = p_table4-anln2 AND
                  anlu1 = p_table4-anlu1 AND
                  anlu2 = p_table4-anlu2 AND
                  daccept >= p_table4-bdatu.
          EXIT.
        ENDLOOP.
*         NT1N_RET_DOC_DATE
        ls_os6a_s1t-nt1n_ret_doc_date = ls_t4_remove-daccept.
*         NT1N_RET_DOC_NR
        ls_os6a_s1t-nt1n_ret_doc_nr = ls_t4_remove-numaccept.
*         NT2N_RET_REASON 4T2
        ls_os6a_s1t-nt2n_ret_reason = ls_t4_remove-opertype.

        IF ls_t4_remove-gitcol IS INITIAL.
          " should be filled only for internla transfer (internal message: 0120061532 0001788686 2006)
          " removed by internal transfer, new structdiv and resp. pers. are in next entry
*           NT3N_STRUCT_SUBDIV
          ls_os6a_s1t-nt3n_struct_subdiv = ls_t4_remove-structdiv.
*           NT4N_RESP_PERS
          ls_os6a_s1t-nt4n_resp_pers = ls_t4_remove-surname.

*        ELSE.
*          "removed by retirement transfer, new structiv and resp. pers is in table asset_move
*          " not to fill
*          READ TABLE gt_asset_mov INTO ls_asset_move
*              with key bukrs  = ls_t4_remove-bukrs
*                       alnmb1 = ls_t4_remove-anlu1
*                       alnmb2 = ls_t4_remove-anlu2
*                       zugdt  = ls_t4_remove-daccept
*                       anln1  = ' '.
*
**           NT3N_STRUCT_SUBDIV
*          ls_os6a_s1t-nt3n_struct_subdiv = ls_asset_move-structdiv.
**           NT4N_RESP_PERS
*          ls_os6a_s1t-nt4n_resp_pers = ls_asset_move-surname.
        ENDIF.

      ENDIF.

*     As of date of taking onto books
      READ TABLE gt_table4
        INTO ls_t4_1st
        WITH KEY bukrs   = p_table4-bukrs
                 anlu1   = p_table4-anln1
                 anlu2   = p_table4-anln2
                 grtype  = '1'.

*      N6N_STRUCT_SUBDIV  h2 for date h14
      ls_os6a_s1t-n6n_struct_subdiv = ls_t4_1st-structdiv.

*      N7N_RESP_PERS
*      READ TABLE gt_table4 INDEX 1 INTO ls_t4_1st.
      ls_os6a_s1t-n7n_resp_pers = ls_t4_1st-surname.

*     filling the revaluation sub-table for asset
*     while this asset belonged to the groupcard
      LOOP AT gt_table3 INTO ls_table3
                        WHERE bukrs = p_table4-bukrs AND
                              anln1 = p_table4-anln1 AND
                              anln2 = p_table4-anln2 AND
                              dtrev >= p_table4-daccept AND
                              dtrev <= p_table4-bdatu.

*        NR1N_REVAL_DATE
        ls_os6a_reval-nr1n_reval_date = ls_table3-dtrev.
*        NR2N_REVAL_RATIO
        ls_os6a_reval-nr2n_reval_ratio = ls_table3-kfrev.
*        NR3N_REVAL_REPL_VAL
        ls_os6a_reval-nr3n_reval_repl_val = ls_table3-replv.

        APPEND ls_os6a_reval TO lt_os6a_reval.

**        NR1N_REVAL_DATE
*        ls_os6a_reval
*        ls_os6a_s1t-nr1n_reval_date = ls_table3-dtrev.
**        NR2N_REVAL_RATIO
*        ls_os6a_s1t-nr2n_reval_ratio = ls_table3-kfrev.
**        NR3N_REVAL_REPL_VAL
*        ls_os6a_s1t-nr3n_reval_repl_val = ls_table3-replv.

      ENDLOOP.

      ls_os6a_s1t-nr1n_reval = lt_os6a_reval.

    WHEN OTHERS.

  ENDCASE.

  APPEND ls_os6a_s1t TO gt_os6a_s1t.

ENDFORM.                    "fill_os6a_s1t

*&---------------------------------------------------------------------*
*&      Form  fill_os14_s1t
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_FILLING_RULE  text
*----------------------------------------------------------------------*
FORM fill_os14_s1t  USING p_filling_rule TYPE char10.

  DATA: ls_os14_s1t TYPE j_3r_os14_s1t.

  CASE p_filling_rule.
    WHEN '14'.
      "N40_EQDISP_SEND_STATION
      ls_os14_s1t-n40_eqdisp_send_station = p_sstatd.
      "N41_EQDISP_SEND_STORAGE
      ls_os14_s1t-n41_eqdisp_send_storage = p_sstord.
      "N42_EQARR_REC_POINT
      ls_os14_s1t-n42_eqarr_rec_point     = p_recpd.
      "N40B_EQDISP_SEND_STATION_TIME
      ls_os14_s1t-n40b_eqdisp_send_station_time = p_sstatt.
      "N41B_EQDISP_SEND_STORAGE_TIME
      ls_os14_s1t-n41b_eqdisp_send_storage_time = p_sstort.
      "N42B_EQARR_REC_POINT_TIME
      ls_os14_s1t-n42b_eqarr_rec_point_time     = p_recpt.
      "N43_EQACC_START_DATE
      ls_os14_s1t-n43_eqacc_start_date    = p_startd.
      "N44_EQACC_STOP_DATE
      ls_os14_s1t-n44_eqacc_stop_date     = p_stopd.
      "N45_EQACC_RENEWAL_DATE
      ls_os14_s1t-n45_eqacc_renewal_date  = p_renewd.
      "N46_EQACC_END_DATE
      ls_os14_s1t-n46_eqacc_end_date      = p_endd.
      "N43B_EQACC_START_TIME
      ls_os14_s1t-n43b_eqacc_start_time   = p_startt.
      "N44B_EQACC_STOP_TIME
      ls_os14_s1t-n44b_eqacc_stop_time    = p_stopt.
      "N45B_EQACC_RENEWAL_TIME
      ls_os14_s1t-n45b_eqacc_renewal_time = p_renewt.
      "N46B_EQACC_END_TIME
      ls_os14_s1t-n46b_eqacc_end_time     = p_endt.

  ENDCASE.

  APPEND ls_os14_s1t TO gt_os14_s1t.

ENDFORM.                    "fill_os14_s1t

*&---------------------------------------------------------------------*
*&      Form  fill_os14_s2t
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_FILLING_RULE  text
*----------------------------------------------------------------------*
FORM fill_os14_s2t  USING p_filling_rule TYPE char10
                          p_bukrs        TYPE bukrs
                          p_anln1        TYPE anln1
                          p_anln2        TYPE anln2.

  DATA: ls_os14_s2t TYPE j_3r_os14_s2t,
        ls_header   TYPE j_3r_invc_header.

  READ TABLE gt_header
    INTO ls_header
    WITH KEY bukrs = p_bukrs
             anln1 = p_anln1
             anln2 = p_anln2.

  CONCATENATE ls_header-alasname
              ls_header-almodel
      INTO ls_os14_s2t-n30_asset_dscr
      SEPARATED BY space.

*  ls_os14_s2t-n19_serial_nr = ls_header-alsern.
       PERFORM GET_SERIAL_NUMBER USING  ls_header-alsern
                                        ls_header-glo_rus_sernr
                                 CHANGING ls_os14_s2t-n19_serial_nr.

  APPEND ls_os14_s2t TO gt_os14_s2t.

** filled via user exit
* E3_EQ_TYPE
* E4_PACK_TYPE
* E5_REC_EQ_UOM
* E6_LOC_NUM_DELIV_ORG
* E7_LOAD_MASS_SENDER
* E8_LOAD_MASS_ROAD
* E9_REC_EQ_UNIT_VAL
* E10_REC_EQ_VAL
* E11_LADING_BILL_MARK
* E12_LOC_NUM_ACT_ACC
* E13_LOAD_MASS_ACT_ACC
* E14_ACT_ACC_DET_DEFECTS
* E15_NOTE

ENDFORM.                    "fill_os14_s2t

*&---------------------------------------------------------------------*
*&      Form  get_next_seq_nr
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->PT_TABLE        text
*      -->PT_NEXT_SEQ_NR  text
*----------------------------------------------------------------------*
FORM get_next_seq_nr
      USING    pt_table TYPE ANY TABLE
      CHANGING pv_next_seq_nr TYPE numc4.

  DATA lv_lines TYPE i.

  DESCRIBE TABLE pt_table LINES lv_lines.

  pv_next_seq_nr = lv_lines + 1.

ENDFORM.                    "get_next_seq_nr

*&---------------------------------------------------------------------*
*&      Form  call_badi_handler
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->pv_func   text
*      <--PT_CONTENT  table
*----------------------------------------------------------------------*
FORM call_badi_handler USING pv_func TYPE char20
                       CHANGING pt_content TYPE ANY TABLE.

  IF pv_func = 'INIT'.
* Let's assume that BADI exists
* GET BADI will be called later to avoid short-dumps
* if p_formna is changed
     gv_badi_exists = 1.
  ELSE.
    CASE pv_func.
      WHEN 'SET_DEFAULT'.
        PERFORM init_os_badi .
        if gv_badi_exists = 0.
*         GET BADI will be called  on pv_func = 'INPUT'
            gv_badi_exists = 1.
            exit.
        endif.
        CASE p_formna.
          WHEN 'OS1'.
            CALL BADI gp_os1_badi->set_default_values
              EXPORTING
                it_sel_params_list   = t_original_parameters
              IMPORTING
                et_sel_params_values = t_new_parameters.
          WHEN 'OS1A'.
            CALL BADI gp_os1a_badi->set_default_values
              EXPORTING
                it_sel_params_list   = t_original_parameters
              IMPORTING
                et_sel_params_values = t_new_parameters.
          WHEN 'OS1B'.
            CALL BADI gp_os1b_badi->set_default_values
              EXPORTING
                it_sel_params_list   = t_original_parameters
              IMPORTING
                et_sel_params_values = t_new_parameters.
          WHEN 'OS4'.
            CALL BADI gp_os4_badi->set_default_values
              EXPORTING
                it_sel_params_list   = t_original_parameters
              IMPORTING
                et_sel_params_values = t_new_parameters.
          WHEN 'OS4A'.
            CALL BADI gp_os4a_badi->set_default_values
              EXPORTING
                it_sel_params_list   = t_original_parameters
              IMPORTING
                et_sel_params_values = t_new_parameters.
          WHEN 'OS4B'.
            CALL BADI gp_os4b_badi->set_default_values
              EXPORTING
                it_sel_params_list   = t_original_parameters
              IMPORTING
                et_sel_params_values = t_new_parameters.
          WHEN 'OS2'.
            CALL BADI gp_os2_badi->set_default_values
              EXPORTING
                it_sel_params_list   = t_original_parameters
              IMPORTING
                et_sel_params_values = t_new_parameters.
          WHEN 'OS3'.
            CALL BADI gp_os3_badi->set_default_values
              EXPORTING
                it_sel_params_list   = t_original_parameters
              IMPORTING
                et_sel_params_values = t_new_parameters.
* 12/05/2006: The program was enhanced to be able to generate OS-6 printout
          WHEN 'OS6'.
            CALL BADI gp_os6_badi->set_default_values
              EXPORTING
                it_sel_params_list   = t_original_parameters
              IMPORTING
                et_sel_params_values = t_new_parameters.
          WHEN 'OS6A'.
            CALL BADI gp_os6a_badi->set_default_values
              EXPORTING
                it_sel_params_list   = t_original_parameters
              IMPORTING
                et_sel_params_values = t_new_parameters.
          WHEN 'OS6B'.
            CALL BADI gp_os6b_badi->set_default_values
              EXPORTING
                it_sel_params_list   = t_original_parameters
              IMPORTING
                et_sel_params_values = t_new_parameters.
          WHEN 'OS14'.
            CALL BADI gp_os14_badi->set_default_values
              EXPORTING
                it_sel_params_list   = t_original_parameters
              IMPORTING
                et_sel_params_values = t_new_parameters.
          WHEN OTHERS.
*            CALL BADI gp_os14_badi->set_default_values
*              EXPORTING
*                it_sel_params_list   = t_original_parameters
*              IMPORTING
*                et_sel_params_values = t_new_parameters.
        ENDCASE.

      WHEN 'INPUT'.

        PERFORM init_os_badi.
        CHECK gv_badi_exists = 1.
        CASE p_formna.
          WHEN 'OS1'.
            CALL BADI gp_os1_badi->input_control
              EXPORTING
                it_input      = t_original_parameters
              IMPORTING
                et_input      = t_new_parameters
              EXCEPTIONS
                error_occured = 1
                OTHERS        = 2.
          WHEN 'OS1A'.
            CALL BADI gp_os1a_badi->input_control
              EXPORTING
                it_input      = t_original_parameters
              IMPORTING
                et_input      = t_new_parameters
              EXCEPTIONS
                error_occured = 1
                OTHERS        = 2.
          WHEN 'OS1B'.
            CALL BADI gp_os1b_badi->input_control
              EXPORTING
                it_input      = t_original_parameters
              IMPORTING
                et_input      = t_new_parameters
              EXCEPTIONS
                error_occured = 1
                OTHERS        = 2.
          WHEN 'OS4'.
            CALL BADI gp_os4_badi->input_control
              EXPORTING
                it_input      = t_original_parameters
              IMPORTING
                et_input      = t_new_parameters
              EXCEPTIONS
                error_occured = 1
                OTHERS        = 2.
          WHEN 'OS4A'.
            CALL BADI gp_os4a_badi->input_control
              EXPORTING
                it_input      = t_original_parameters
              IMPORTING
                et_input      = t_new_parameters
              EXCEPTIONS
                error_occured = 1
                OTHERS        = 2.
          WHEN 'OS4B'.
            CALL BADI gp_os4b_badi->input_control
              EXPORTING
                it_input      = t_original_parameters
              IMPORTING
                et_input      = t_new_parameters
              EXCEPTIONS
                error_occured = 1
                OTHERS        = 2.
          WHEN 'OS2'.
            CALL BADI gp_os2_badi->input_control
              EXPORTING
                it_input      = t_original_parameters
              IMPORTING
                et_input      = t_new_parameters
              EXCEPTIONS
                error_occured = 1
                OTHERS        = 2.
          WHEN 'OS3'.
            CALL BADI gp_os3_badi->input_control
              EXPORTING
                it_input      = t_original_parameters
              IMPORTING
                et_input      = t_new_parameters
              EXCEPTIONS
                error_occured = 1
                OTHERS        = 2.
* 12/05/2006: The program was enhanced to be able to generate OS-6 printout
          WHEN 'OS6'.
            CALL BADI gp_os6_badi->input_control
              EXPORTING
                it_input      = t_original_parameters
              IMPORTING
                et_input      = t_new_parameters
              EXCEPTIONS
                error_occured = 1
                OTHERS        = 2.
          WHEN 'OS6A'.
            CALL BADI gp_os6a_badi->input_control
              EXPORTING
                it_input      = t_original_parameters
              IMPORTING
                et_input      = t_new_parameters
              EXCEPTIONS
                error_occured = 1
                OTHERS        = 2.
          WHEN 'OS6B'.
            CALL BADI gp_os6b_badi->input_control
              EXPORTING
                it_input      = t_original_parameters
              IMPORTING
                et_input      = t_new_parameters
              EXCEPTIONS
                error_occured = 1
                OTHERS        = 2.
          WHEN 'OS14'.
            CALL BADI gp_os14_badi->input_control
              EXPORTING
                it_input      = t_original_parameters
              IMPORTING
                et_input      = t_new_parameters
              EXCEPTIONS
                error_occured = 1
                OTHERS        = 2.
          WHEN OTHERS.
*            CALL BADI gp_os1_badi->input_control
*              EXPORTING
*                it_input      = t_original_parameters
*              IMPORTING
*                et_input      = t_new_parameters
*              EXCEPTIONS
*                error_occured = 1
*                OTHERS        = 2.

        ENDCASE.
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                     WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.


      WHEN 'POST_CTRL'.

        CASE p_formna.
          WHEN 'OS1'.
            CALL BADI gp_os1_badi->post_selection_control
                CHANGING
*            ct_input = pt_content
                  ct_content = pt_content
                EXCEPTIONS
                  OTHERS   = 1.
          WHEN 'OS1A'.
            CALL BADI gp_os1a_badi->post_selection_control
                CHANGING
*            ct_input = pt_content
                  ct_content = pt_content
                EXCEPTIONS
                  OTHERS   = 1.
          WHEN 'OS1B'.
            CALL BADI gp_os1b_badi->post_selection_control
                CHANGING
*            ct_input = pt_content
                  ct_content = pt_content
                EXCEPTIONS
                  OTHERS   = 1.
          WHEN 'OS4'.
            CALL BADI gp_os4_badi->post_selection_control
                CHANGING
*            ct_input = pt_content
                  ct_content = pt_content
                EXCEPTIONS
                  OTHERS   = 1.
          WHEN 'OS4A'.
            CALL BADI gp_os4a_badi->post_selection_control
                CHANGING
*            ct_input = pt_content
                  ct_content = pt_content
                EXCEPTIONS
                  OTHERS   = 1.
          WHEN 'OS4B'.
            CALL BADI gp_os4b_badi->post_selection_control
                CHANGING
*            ct_input = pt_content
                  ct_content = pt_content
                EXCEPTIONS
                  OTHERS   = 1.
          WHEN 'OS2'.
            CALL BADI gp_os2_badi->post_selection_control
                CHANGING
*            ct_input = pt_content
                  ct_content = pt_content
                EXCEPTIONS
                  OTHERS   = 1.
          WHEN 'OS3'.
            CALL BADI gp_os3_badi->post_selection_control
                CHANGING
*            ct_input = pt_content
                  ct_content = pt_content
                EXCEPTIONS
                  OTHERS   = 1.
* 12/05/2006: The program was enhanced to be able to generate OS-6 printout
          WHEN 'OS6'.
            CALL BADI gp_os6_badi->post_selection_control
              CHANGING
                ct_content = pt_content
              EXCEPTIONS
                OTHERS     = 1.
          WHEN 'OS6A'.
            CALL BADI gp_os6a_badi->post_selection_control
                CHANGING
*            ct_input = pt_content
                  ct_content = pt_content
                EXCEPTIONS
                  OTHERS   = 1.
          WHEN 'OS6B'.
            CALL BADI gp_os6b_badi->post_selection_control
                CHANGING
*            ct_input = pt_content
                  ct_content = pt_content
                EXCEPTIONS
                  OTHERS   = 1.
          WHEN 'OS14'.
            CALL BADI gp_os14_badi->post_selection_control
                CHANGING
*            ct_input = pt_content
                  ct_content = pt_content
                EXCEPTIONS
                  OTHERS   = 1.

          WHEN OTHERS.
*            CALL BADI gp_os1_badi->post_selection_control
*                CHANGING
**            ct_input = pt_content
*                  ct_content = pt_content
*                EXCEPTIONS
*                  OTHERS   = 1.

        ENDCASE.

        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                     WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.

    ENDCASE.
  ENDIF.

ENDFORM.                    " call_badi_handler

FORM init_os_badi .
*  Obligatory call "GET BADI"  - before "CALL BADI"
* To avoid short-dump when p_formna is changed
* after F4-variant selection
    DATA: lo_ref TYPE REF TO cx_root.
    TRY.
        gv_badi_exists = 0.
        CASE p_formna.
          WHEN 'OS1'.
            GET BADI gp_os1_badi.
          WHEN 'OS1A'.
            GET BADI gp_os1a_badi.
          WHEN 'OS1B'.
            GET BADI gp_os1b_badi.
          WHEN 'OS4'.
            GET BADI gp_os4_badi.
          WHEN 'OS4A'.
            GET BADI gp_os4a_badi.
          WHEN 'OS4B'.
            GET BADI gp_os4b_badi.
          WHEN 'OS2'.
            GET BADI gp_os2_badi.
          WHEN 'OS3'.
            GET BADI gp_os3_badi.
* 12/05/2006: The program was enhanced to be able to generate OS-6 printout
          WHEN 'OS6'.
            GET BADI gp_os6_badi.
          WHEN 'OS6A'.
            GET BADI gp_os6a_badi.
          WHEN 'OS6B'.
            GET BADI gp_os6b_badi.
          WHEN 'OS14'.
            GET BADI gp_os14_badi.
          WHEN OTHERS.
*            GET BADI gp_os1_badi.
        ENDCASE.
        gv_badi_exists = 1.
      CATCH cx_badi_not_implemented INTO lo_ref.        "#EC NO_HANDLER
      CATCH cx_badi_multiply_implemented INTO lo_ref.
        MESSAGE e001.
      CATCH cx_badi_initial_context INTO lo_ref.
        MESSAGE e002.
    ENDTRY.
ENDFORM.
