*&---------------------------------------------------------------------*
*&  Include           J_3R_RU_COMMON_OUTPUT
*&---------------------------------------------------------------------*

*&--------------------------------------------------------------------*
*       Output of the form
*---------------------------------------------------------------------*
* Outputs the results of the form. The results are collected in a
* table. Each line corresponds to a different ALV list or PDF document.
* If printing needed in several copies, set the 'PS_OUTPAR-COPIES'
* attribute to the value needed
*---------------------------------------------------------------------*
FORM output_document
            USING
                  value(pv_structure_name) TYPE char30
                  value(pv_outputtype) TYPE j_3r_otptyp
*                  value(pv_outputname) TYPE j_3r_otpnam
            CHANGING ps_outpar      TYPE sfpoutputparams
                     pt_content     TYPE ANY TABLE
                     ps_docpar      TYPE sfpdocparams
                     pv_printed_cnt TYPE i.

  DATA: ls_daratab TYPE toa_dara.

  DATA: lv_ddstate TYPE ddgotstate,                         "#EC NEEDED
        ls_dd02v   TYPE dd02v,                              "#EC NEEDED
        ls_dd09l   TYPE dd09l,                              "#EC NEEDED
        lt_dd03p   TYPE TABLE OF dd03p,
        ls_dd03p   TYPE dd03p.

  DATA: lv_stat_fieldname TYPE char30,
        lv_msg_fieldname  TYPE char30.

  DATA: save_spras    LIKE t687t-spras.

  FIELD-SYMBOLS: <fs_msg>  TYPE ANY,
                 <fs_stat> TYPE ANY.

  CASE 'X'.
    WHEN alv_pre.
*     ALV

      CALL METHOD cl_structured_alv=>alv_content_display
        EXPORTING
          it_content         = pt_content
          iv_structure_name  = pv_structure_name
*          IS_DISPLAY_PROFILE =
          it_excluded_fields = gt_excluded_fields
      EXCEPTIONS
        program_error      = 1
        OTHERS             = 2.

      IF sy-subrc <> 0.
        MESSAGE e056.
*        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.


    WHEN pdf_pre.
*     Print preview
      ps_outpar-noprint = 'X'.
      ps_outpar-device = 'PRINTER'.
*      pt_content-fp-display_mode = 'PREVIEW'.
*      Print Immediately
      clear ps_outpar-reqimm.
*      PDF to be generated with tags
      ps_outpar-pdftagged = 'X'.

    WHEN pdf_prn.
*     Direct printing
      ps_outpar-nopributt = 'X'.
      ps_outpar-device = 'PRINTER'.
*     ps_content-fp-display_mode = 'NORMAL'.
*     Auto archiving setting
      ps_outpar-arcmode = '3'.
*     Mass printing setting
      ps_outpar-nopdf = 'X'.
*     Suppress dialog
      ps_outpar-nodialog = 'X'.
*      Print Immediately
      ps_outpar-reqimm = 'X' .
*      PDF to be generated with tags
      ps_outpar-pdftagged = 'X'.

    WHEN pdf_int.
*    Interactive PDF Preview
*      ps_outpar-noprint = 'X'.
      ps_outpar-device = 'PRINTER'.
*    Interactive setting
      ps_docpar-fillable = 'X'.
*      Print Immediately
      clear ps_outpar-reqimm.
*      PDF to be generated with tags
      ps_outpar-pdftagged = 'X'.

  ENDCASE.

    select single spras from T002C into save_spras
       where spras = 'R'
         and LAINST = 'X'.
    if sy-subrc eq 0.
      ps_docpar-langu = 'R'.
      ps_docpar-country = 'RU'.
    endif.

*    ps_docpar-langu = 'R'.
*    ps_docpar-country = 'RU'.
  IF pdf_prn = 'X' OR pdf_pre = 'X' OR pdf_int = 'X'.

    IF gv_archive = abap_true.
*     Setting the parametres for PDF Archiving
      ls_daratab-function   = 'DARA'.
      ls_daratab-mandant    = sy-mandt.
      ls_daratab-del_date   = '00000000'.
      ls_daratab-sap_object = 'BUS0815'.  " modify this
      ls_daratab-ar_object  = 'RU-ADDON'. " modify this
      ls_daratab-formarchiv = 'A2'.
      ls_daratab-reserve    = 'COMMIT'.
      ps_outpar-arcmode     = '3'. " Print and Archive

      CONCATENATE gv_form_name sy-uname sy-datum sy-uzeit
                INTO ls_daratab-object_id
                RESPECTING BLANKS.

      ls_daratab-notiz      = 'PDF'.
      APPEND ls_daratab TO ps_docpar-daratab.
    ENDIF.

    CALL METHOD yse_j_3r_cl_lf_general=>output_document
      EXPORTING
        it_form_content    = pt_content
        iv_structure_name  = pv_structure_name
        iv_output_type     = pv_outputtype
        iv_output_name     = p_printr
        is_docparams       = ps_docpar
        iv_archive         = gv_archive  " gv_archive should be filled if Archiving is requested
        iv_ind             = p_m11fm
      IMPORTING
        cs_printed_cntn    = pv_printed_cnt
      CHANGING
        cs_outputpar       = ps_outpar
      EXCEPTIONS
        context_not_active = 1
        context_not_found  = 2
        api_exception      = 3
        OTHERS             = 4.
    IF sy-subrc <> 0.
*     clear output params
*     this is a comment for the line below
      CLEAR ps_outpar.
      CLEAR ps_docpar.
      MESSAGE e057.
    ENDIF.

    IF gv_msg_alv = 'X'.
*     If no ALV is displayed Put an ALV with the Messages and with the statistics

      CALL FUNCTION 'DDIF_TABL_GET'
        EXPORTING
          name          = gv_structure_name
          langu         = sy-langu
        IMPORTING
          gotstate      = lv_ddstate
          dd02v_wa      = ls_dd02v
          dd09l_wa      = ls_dd09l
        TABLES
          dd03p_tab     = lt_dd03p
        EXCEPTIONS
          illegal_input = 1
          OTHERS        = 2.

      IF sy-subrc <> 0.
        MESSAGE e058.
      ENDIF.

      SORT lt_dd03p BY tabname position ASCENDING.

      LOOP AT lt_dd03p INTO ls_dd03p.
        CASE ls_dd03p-rollname.
          WHEN 'IDALV_T_MSG'.
            lv_msg_fieldname = ls_dd03p-fieldname.
          WHEN 'IDALV_T_STAT'.
            lv_stat_fieldname = ls_dd03p-fieldname.
        ENDCASE.
      ENDLOOP.

*     Collect the messages and the statistics
      LOOP AT pt_content INTO gs_content.

*       Copy the message and statistics structure to the output-message structure
        IF lv_msg_fieldname IS NOT INITIAL.
          ASSIGN COMPONENT lv_msg_fieldname OF STRUCTURE gs_content TO <fs_msg>.
          IF sy-subrc = 0.
            MOVE <fs_msg> TO gs_content_msg-s1m.
          ENDIF.
        ENDIF.

        IF lv_stat_fieldname IS NOT INITIAL.
          ASSIGN COMPONENT lv_stat_fieldname OF STRUCTURE gs_content TO <fs_stat>.
          IF sy-subrc = 0.
            MOVE <fs_stat> TO gs_content_msg-s1s.
          ENDIF.
        ENDIF.

        IF gs_content_msg-s1s IS INITIAL AND gs_content_msg-s1m IS INITIAL.
          CONTINUE.
        ENDIF.

        gs_content_msg-alv_text = gs_content-alv_text.
        APPEND gs_content_msg TO gt_content_msg.
      ENDLOOP.

*     Call the ALV output with the messages and the statistics
      CALL METHOD cl_structured_alv=>alv_content_display
        EXPORTING
          it_content         = gt_content_msg
          iv_structure_name  = 'J_3R_MESSAGES'
*         IS_DISPLAY_PROFILE =
*          it_excluded_fields =
        EXCEPTIONS
          program_error      = 1
          OTHERS             = 2.

      IF sy-subrc <> 0.
        MESSAGE e056.
*        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

    ENDIF.

  ENDIF.

* Clear output params
  CLEAR ps_outpar.
  CLEAR ps_docpar.

ENDFORM.                    "output_document













*******************************************************************
*  The flow logic of the savement of the forms                    *
*******************************************************************
* returns the formkeys of the same selections
*FORM before_data_gathering.
*
*  DATA: lv_same_selection_nr TYPE i,
*        ls_formkey           TYPE j_3r_lf_key,
*        ls_choice            TYPE spopli,
*        lt_choice            TYPE TABLE OF spopli,
*        lv_choice            TYPE char2,
*        lv_num               TYPE i.
*
** Selecting formkeys with identical selection parameters
*  CALL METHOD j_3r_cl_lf_general=>retrieve_matching_selection
*    EXPORTING
*      iv_seldparkey     = gv_seldkey
*      it_selected_param = gt_seld
*    IMPORTING
*      et_formkey        = gt_formkey
*    EXCEPTIONS
*      not_found         = 1
*      cluster_error     = 2
*      OTHERS            = 3.
*
*  IF sy-subrc = 0.
*********************************************************************
**   choose from versions with identical sel params for output    *
*********************************************************************
*    LOOP AT gt_formkey INTO ls_formkey.
*      DESCRIBE TABLE lt_choice LINES lv_num.
*      IF lv_num = 25.
*        EXIT.
*      ENDIF.
*      ls_choice-varoption = ls_formkey-form_nr.
*      APPEND ls_choice TO lt_choice.
*    ENDLOOP.
*
*
**    CALL FUNCTION 'STC1_POPUP_WITH_TABLE_CONTROL'
**      EXPORTING
**        header                  = 'Form number of stored document'
**        tabname                 = 'J_3r_LF_KEY'
***   DISPLAY_ONLY            =
***   ENDLESS                 =
**   DISPLAY_TOGGLE          = 'X'
***   SORT_FORBIDDEN          =
***   MODIFY_CHECK            =
***   INSERT_CHECK            =
***   DELETE_CHECK            =
***   MODIFY_DISP_FIELD       =
***   NO_INSERT               =
***   NO_DELETE               =
***   NO_MOVE                 =
***   NO_UNDO                 =
**        no_button               = 'X'
***   X_START                 = 5
***   Y_START                 = 5
***   X_END                   = 80
***   Y_END                   = 25
**      TABLES
***    NAMETAB                 =
**        table                   = gt_formkey
***    FIELDDIF                =
**      EXCEPTIONS
**        no_more_tables          = 1
**        too_many_fields         = 2
**        nametab_not_valid       = 3
**        handle_not_valid        = 4
**        OTHERS                  = 5.
*
*
**    CALL FUNCTION 'POPUP_WITH_TABLE_DISPLAY_OK'
**      EXPORTING
**        endpos_col         = '10'
**        endpos_row         = '10'
**        startpos_col       = '50'
**        startpos_row       = '50'
**        titletext          = 'e'
**     IMPORTING
**       CHOISE             = lv_choice
**      tables
**        valuetab           = gt_formkey "lt_choice
**     EXCEPTIONS
**       BREAK_OFF          = 1
**       OTHERS             = 2
**              .
*
*
*    CALL FUNCTION 'POPUP_TO_DECIDE_LIST'
*      EXPORTING
**       CURSORLINE   = 1
**       MARK_FLAG    = ' '
*       mark_max      = 1
**       START_COL    = 0
**       START_ROW    = 0
*        textline1    = 'Form number of stored document'
**       TEXTLINE2    = ' '
**       TEXTLINE3    = ' '
*        titel        = 'Choose version!'
**       DISPLAY_ONLY = ' '
*     IMPORTING
*       answer        = lv_choice
*     TABLES
*       t_spopli      = lt_choice
*     EXCEPTIONS
*       not_enough_answers = 1
*       too_much_answers   = 2
*       too_much_marks     = 3
*       OTHERS             = 4.
*
*    IF sy-subrc <> 0.
*      MESSAGE e051.
*    ENDIF.
*
*    IF lv_choice <> 'A'.
**     output of stored document
*      CALL METHOD j_3r_cl_lf_general=>get_form_content
*        EXPORTING
*          is_formkey = ls_formkey
*        CHANGING
*          es_content = gs_content.
*
*      gv_output = 'X'.
*
*    ENDIF.
*  ELSEIF sy-subrc = 1.
*********************************************************************
**   no identific selection found                                 *
*********************************************************************
*  ELSE.
*    MESSAGE i052.
*  ENDIF.
*
*ENDFORM.                    "before_data_gathering
*
*
**&--------------------------------------------------------------------*
**&      Form  after_data_gathering
**&--------------------------------------------------------------------*
*FORM after_data_gathering.
*
*  DATA: lv_savedoc         TYPE c,
*        lv_same_selscr_nr  TYPE i,
*        lv_same_content_nr TYPE i,
*        lt_formkey_same    TYPE TABLE OF j_3r_lf_key,
*        ls_formkey         TYPE j_3r_lf_key,
*        ls_cont_choice     TYPE spopli,
*        lt_cont_choice     TYPE TABLE OF spopli,
*        lv_cont_choice     TYPE c,
*        lv_popup_answer    TYPE c,
*        ls_pripar          TYPE pri_params.
*
*  DESCRIBE TABLE gt_formkey LINES lv_same_selscr_nr.
*
**   The content has to be stored
*  IF lv_same_selscr_nr = 0.
*    lv_savedoc = 'X'.
*
*  ELSE.
*    CALL METHOD j_3r_cl_lf_general=>retrieve_matching_content
*      EXPORTING
*        is_form_content     = gs_content
*        it_selected_formkey = gt_formkey
*      IMPORTING
*        et_matching_formkey = lt_formkey_same
*      EXCEPTIONS
*        not_found           = 1
*        cluster_error       = 2
*        OTHERS              = 3.
*
*    IF sy-subrc <> 0.
**     MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**                WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*    ENDIF.
*
*    DESCRIBE TABLE lt_formkey_same LINES lv_same_content_nr.
*
*    IF lv_same_content_nr = 0.
*      lv_savedoc = 'X'.
*    ELSE.
**     Choose from similar stored content         *
*      LOOP AT lt_formkey_same INTO ls_formkey.
*        ls_cont_choice-varoption = ls_formkey-form_nr.
*        APPEND ls_cont_choice TO lt_cont_choice.
*      ENDLOOP.
*
*      CALL FUNCTION 'POPUP_TO_DECIDE_LIST'
*        EXPORTING
**         CURSORLINE   = 1
**         MARK_FLAG    = ' '
*          mark_max     = 1
**         START_COL    = 0
**         START_ROW    = 0
*          textline1    = text-051
**         TEXTLINE2    = ' '
**         TEXTLINE3    = ' '
*          titel        = text-050
**         DISPLAY_ONLY = ' '
*        IMPORTING
*          answer       = lv_cont_choice
*        TABLES
*          t_spopli     = lt_cont_choice
*        EXCEPTIONS
*          not_enough_answers = 1
*          too_much_answers   = 2
*          too_much_marks     = 3
*          OTHERS             = 4.
*
*      IF sy-subrc <> 0.
*        MESSAGE e051.
*      ENDIF.
*
*      IF lv_cont_choice = 'A'.
*        lv_savedoc = 'X'.
*      ELSE.
*        CALL FUNCTION 'POPUP_TO_CONFIRM'
*          EXPORTING
**             titlebar       = text-052
*             text_question  = text-052
*             text_button_1  = 'Yes'(001)
**            ICON_BUTTON_1  = ' '
*             text_button_2  = 'No'(002)
**            ICON_BUTTON_2  = ' '
*             default_button = '1'
*             display_cancel_button = ' '
*         IMPORTING
*           answer           = lv_popup_answer
*         EXCEPTIONS
*            text_not_found  = 1
*            OTHERS          = 2.
*
*        IF sy-subrc <> 0.
*          MESSAGE e053.
*        ENDIF.
*
*        IF lv_popup_answer = '1'.
*          lv_savedoc = 'X'.
*        ENDIF.
*
*        READ TABLE lt_formkey_same INDEX lv_cont_choice INTO ls_formkey.
*        IF sy-subrc <> 0.
*          MESSAGE e054.
*        ENDIF.
*
*        CALL METHOD j_3r_cl_lf_general=>get_form_content
*          EXPORTING
*            is_formkey = ls_formkey
*          CHANGING
*            es_content = gs_content.
*
*      ENDIF.
*
*    ENDIF.
*
*  ENDIF.
*
*  IF lv_savedoc = 'X'.
**   saving the content
*    CALL METHOD j_3r_cl_lf_general=>save_document
*      EXPORTING
*        iv_selnkey         = gv_selnkey
*        iv_seldkey         = gv_seldkey
*        it_selection_param = gt_seln
*        it_selected_param  = gt_seld
*        is_outpar          = ls_pripar
*        iv_outputtyp       = gv_outputtype
*        iv_outputname      = p_printr
*        is_content         = gs_content
*      CHANGING
*        is_formkey         = gs_formkey
*      EXCEPTIONS
*        saving_failed      = 1
*        header_error       = 2
*        OTHERS             = 3.
*
*    IF sy-subrc <> 0.
*      MESSAGE e055.
*    ENDIF.
*
*  ENDIF.
*
*ENDFORM.                    "after_data_gathering
*

*&--------------------------------------------------------------------*
*& Finishing the procedure of saving and outputting
*& for reports where the data selection contains logical databases
*&--------------------------------------------------------------------*
*FORM output_for_logdb
*            TABLES pt_content
*            USING value(pv_structure_name).
*
*  DATA: lv_alv_screen TYPE dynpronr VALUE '0100'.
*
** Call Post_Selection_Value_Modification BAPI method
*  IF gv_badi_exists = 1.
*    CALL METHOD gp_badi->post_selection_modification
*      CHANGING
*        cs_content = gs_content.
*
*  ENDIF.
*
*  IF gv_save = 'X'.
*    PERFORM after_data_gathering.
*  ENDIF.
*
*  PERFORM output_document
*        TABLES pt_content
*        USING pv_structure_name
*              gv_outputtype
*              p_printr
*              gs_docpar
*              lv_alv_screen
*        CHANGING gs_outpar.
*
*
*ENDFORM.                    "output_for_logdb
*&---------------------------------------------------------------------*
*&      Form  DATE_IN_WORDS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GS_CONTENT_FSD_N08A_DATADATE  text
*      <--P_GS_CONTENT_FSD_N08A_DATADATE_T  text
*----------------------------------------------------------------------*
form DATE_IN_WORDS  using    p_date
                    changing cv_date_text.
data: lv_day(2) type c,
      lv_month(10)  type c,
      lv_year(4) type c.
CALL FUNCTION 'J_3RF_DATE'
  EXPORTING
    f_date        = p_date
  IMPORTING
   F_DAY         = lv_day
   F_MONTH       = lv_month
   F_YEAR        = lv_year     .

CONCATENATE lv_day lv_month lv_year into cv_date_text SEPARATED BY space.

endform.                    " DATE_IN_WORDS
*&---------------------------------------------------------------------*
*&      Form  DATE_IN_WORDS_WITH_QUOTAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GS_CONTENT_FSD_N08A_DATADATE  text
*      <--P_GS_CONTENT_FSD_N08A_DATADATE_T  text
*----------------------------------------------------------------------*
form DATE_IN_WORDS_WITH_QUOTAS  using    p_date
                    changing cv_date_text.
data: lv_day(2) type c,
      lv_month(10)  type c,
      lv_year(4) type c.
DATA lv_day_q(6) TYPE c.
CALL FUNCTION 'J_3RF_DATE'
  EXPORTING
    f_date        = p_date
  IMPORTING
   F_DAY         = lv_day
   F_MONTH       = lv_month
   F_YEAR        = lv_year     .

CONCATENATE '"' lv_day '"' into lv_day_q.
CONCATENATE lv_day_q lv_month lv_year into cv_date_text SEPARATED BY space.


endform.                    " DATE_IN_WORDS_QUOTAS
*&---------------------------------------------------------------------*
*&      Form  DATE_SPLIT_TO_COMPONENTS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GS_CONTENT_FSD_N50_SIGNDATE1  text
*      <--P_GS_CONTENT_FSD_N50_SIGNDATE1_D  text
*      <--P_GS_CONTENT_FSD_N50_SIGNDATE1_M  text
*      <--P_GS_CONTENT_FSD_N50_SIGNDATE1_Y  text
*----------------------------------------------------------------------*
form DATE_SPLIT_TO_COMPONENTS  using    p_date
                               changing cv_day
                                        cv_month
                                        cv_year.
CALL FUNCTION 'J_3RF_DATE'
  EXPORTING
    f_date        = p_date
  IMPORTING
   F_DAY         = cv_day
   F_MONTH       = cv_month
   F_YEAR        = cv_year     .

endform.                    " DATE_SPLIT_TO_COMPONENTS
