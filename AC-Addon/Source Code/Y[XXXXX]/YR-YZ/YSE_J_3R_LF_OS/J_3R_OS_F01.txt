*&---------------------------------------------------------------------*
*&  Include           J_3R_OS_F01
*&---------------------------------------------------------------------*
FORM do_selection.

  DATA: lt_anlav TYPE TABLE OF anlav.
  FIELD-SYMBOLS <fs_anlav> TYPE anlav.
  DATA: lt_bkpf TYPE TABLE OF bkpf,
        ls_bkpf TYPE bkpf.
  DATA: lt_bseg TYPE TABLE OF bseg,
        ls_bseg TYPE bseg.

  DATA: lt_header  TYPE j_3r_invc_header_tab, " WITH HEADER LINE,
        lt_table1  TYPE j_3r_invc_s1_tab, "  WITH HEADER LINE,
        lt_table2  TYPE j_3r_invc_s2_tab, " WITH HEADER LINE,
        lt_table3  TYPE j_3r_invc_s3_tab, " WITH HEADER LINE,
        lt_table4  TYPE j_3r_invc_s4_tab, " WITH HEADER LINE,
        lt_table4_add  TYPE j_3r_invc_s4_cost_tab, " WITH HEADER LINE,
        lt_table5  TYPE j_3r_invc_s5_tab, " WITH HEADER LINE,
        lt_table6  TYPE j_3r_invc_s6_tab, " WITH HEADER LINE,
        lt_table7  TYPE j_3r_invc_s7_tab, " WITH HEADER LINE,
        lt_table7d TYPE j_3r_invc_s7d_tab, " WITH HEADER LINE,
        lt_tlines  TYPE j_3r_invc_tline_tab, " WITH HEADER LINE,
        lt_asset_mov TYPE j_3r_invc_asset_move_tab, " WITH HEADER LINE.
        lt_mesg    TYPE tsmesg.
  DATA l_retired_assets type boolean.

  REFRESH: gt_anlav, gt_bkpf, gt_bseg.

  CASE p_formna.
    WHEN 'OS6B'.
      READ TABLE so_repdt INDEX 1
                          INTO so_repdt
                          TRANSPORTING high.
      if so_repdt-high is not INITIAL.
          gv_repdt = so_repdt-high.
      else.
          gv_repdt = so_repdt-low.
      endif.
    WHEN OTHERS.
      gv_repdt = p_repdt.
  ENDCASE.
 l_retired_assets = abap_true.
* Retured asset flag is set only in OS-6 forms
  CASE p_formna.
      WHEN 'OS6' OR 'OS6A'.
        l_retired_assets = p_retir.
  ENDCASE.

  IF gv_repdt IS INITIAL.
* valszeg hiba.
  ENDIF.


* Select all relevant assets into gt_anlav
* Further info:
*  selected documents in gt_bkpf & gt_bseg if FI selection is ON
  PERFORM select_assets.

* Collecting data via FM - just one times for an asset!
  SORT gt_anlav BY bukrs anln1 anln2 adatu.
  if l_retired_assets is INITIAL .
      delete gt_anlav WHERE deakt is NOT INITIAL  and  deakt < gv_repdt.
  endif.
  data lv_ankatype type J_3RFANKA-ANKA_TYPE.

 DATA  lt_j_3rfanka type table of J_3RFANKA.
 FIELD-SYMBOLS <fs_j_3rfanka> type J_3RFANKA.
  if p_formna = 'OS14'.
      lv_ankatype = '*'.
      CALL FUNCTION 'J_3R_ANKATYPE_GET'
            TABLES et_j3rfanka = lt_j_3rfanka.
  else.
      lv_ankatype = 'FIXEDASSET'.
  endif.

  LOOP AT gt_anlav ASSIGNING  <fs_anlav> .
    AT NEW anln2.
        if p_formna = 'OS14'.
          READ TABLE lt_j_3rfanka WITH KEY anlkl = <fs_anlav>-anlkl
          ASSIGNING <fs_j_3rfanka>.
          CHECK sy-subrc = 0.
          CHECK  <fs_j_3rfanka>-anka_type = 'FIXEDASSET' or
          <fs_j_3rfanka>-anka_type = 'CAPINVEST' or
          <fs_j_3rfanka>-anka_type = 'UNDERCONST'.
*         Other asset types are out of scope of OS-14
        endif.
      CALL FUNCTION 'J_3R_ASSET_INVCARD_GET'
        EXPORTING
          iv_anln1                         = <fs_anlav>-anln1
          iv_anln2                         = <fs_anlav>-anln2
          iv_bukrs                         = <fs_anlav>-bukrs
          iv_brdatu                        = gv_repdt
          iv_afabe                         = p_afabe
*       IV_XHEAD                         =
*       IV_NO_POPUP                      = 'X'
       IV_KEYSET                        =  p_keyset
       IV_ANKATYPE                      =  lv_ankatype
       iv_gr1day                        = p_gr1day
        CHANGING
          ct_header                        = lt_header
          ct_table1                        = lt_table1
          ct_table2                        = lt_table2
          ct_table3                        = lt_table3
          ct_table4                        = lt_table4
          ct_table4_add                    = lt_table4_add
          ct_table5                        = lt_table5
          ct_table6                        = lt_table6
          ct_table7                        = lt_table7
          ct_table7d                       = lt_table7d
          ct_tlines                        = lt_tlines
          ct_asset_mov                     = lt_asset_mov
          ct_mesg                          = lt_mesg
*      EXCEPTIONS
*        message_handler_not_active       = 1
*        OTHERS                           = 2
                .

*    IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*    ENDIF.

* Message handling
* ...

      INSERT lines of:
              lt_header INTO TABLE gt_header,
              lt_table1 INTO TABLE gt_table1,
              lt_table2 INTO TABLE gt_table2,
              lt_table3 INTO TABLE gt_table3,
              lt_table4 INTO TABLE gt_table4,
              lt_table4_add INTO TABLE gt_table4_add,
              lt_table5 INTO TABLE gt_table5,
              lt_table6 INTO TABLE gt_table6,
              lt_table7 INTO TABLE gt_table7,
              lt_table7d INTO TABLE gt_table7d,
              lt_tlines INTO TABLE gt_tlines,
              lt_asset_mov INTO TABLE gt_asset_mov.

      CLEAR: lt_header, lt_table1, lt_table2, lt_table3,
             lt_table4, lt_table5, lt_table6, lt_table7,
             lt_table7d, lt_tlines, lt_asset_mov.

    ENDAT.

  ENDLOOP.

ENDFORM.                    "do_selection

*&---------------------------------------------------------------------*
*&      Form  select_assets
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ANLA  text
*----------------------------------------------------------------------*
FORM select_assets.
  DATA: lt_anla_aa TYPE TABLE OF anlav,
        lt_anla_fi TYPE TABLE OF anlav,
        ls_anlav TYPE anlav.

  IF p_xselaa EQ 'X'.
    PERFORM select_assets_aa TABLES lt_anla_aa.
    INSERT lines of lt_anla_aa INTO TABLE gt_anlav.
  ENDIF.

  IF p_xselfi EQ 'X'.
    PERFORM select_assets_fi TABLES lt_anla_fi.
    INSERT lines of lt_anla_fi INTO TABLE gt_anlav.
  ENDIF.


ENDFORM.                    " select_assets
*&---------------------------------------------------------------------*
*&      Form  select_assets_aa
*&---------------------------------------------------------------------*
*       Asset master record selection from asset master record tables
*       regarding selection input data.
*----------------------------------------------------------------------*
*FORM select_assets_aa  TABLES    pt_anla_aa STRUCTURE anlav.
FORM select_assets_aa  TABLES pt_anla_aa.

  DATA: lt_anlav TYPE TABLE OF anlav,
        ls_anlav TYPE anlav,
        lt_anlz TYPE TABLE OF anlz,
        ls_anlz TYPE anlz.

  SELECT        * FROM  anla
                  INTO CORRESPONDING FIELDS OF TABLE lt_anlav
         WHERE  bukrs  EQ p_bukrs
         AND    anln1  IN so_anln1
         AND    anln2  IN so_anln2
         AND    invnr  IN so_invnr
         AND    anlkl  IN so_asscl.
  CHECK lt_anlav[] is not INITIAL.
* check time dependent data
  SELECT        * FROM  anlz
                  INTO TABLE lt_anlz
         FOR ALL ENTRIES IN lt_anlav
         WHERE  bukrs  = lt_anlav-bukrs
         AND    anln1  = lt_anlav-anln1
         AND    anln2  = lt_anlav-anln2
         AND    bdatu  GE gv_repdt
         AND    adatu  LE gv_repdt
         AND    gsber  IN so_busar
         AND    kostl  IN so_coctr
         AND    werks  IN so_plant
         AND    stort  IN so_locat
         AND    raumn  IN so_room
         AND    pernr  IN so_pernr.
* store if correcponding time dependent data is given
  LOOP AT lt_anlz INTO ls_anlz.
    READ TABLE lt_anlav INTO ls_anlav
         with key bukrs = ls_anlz-bukrs
                  anln1 = ls_anlz-anln1
                  anln2 = ls_anlz-anln2.
    IF sy-subrc EQ 0.
      MOVE-CORRESPONDING ls_anlz TO ls_anlav.               "#EC ENHOK
      APPEND ls_anlav TO pt_anla_aa.
    ENDIF.

* Further check will be neccesary: Group Inventory Card

  ENDLOOP.

ENDFORM.                    " select_assets_aa
*&---------------------------------------------------------------------*
*&      Form  select_assets_fi
*&---------------------------------------------------------------------*
*       Asset master record selection from selected FI document
*       line items.
*----------------------------------------------------------------------*
*FORM select_assets_fi  TABLES pt_anla_fi  STRUCTURE anlav.
FORM select_assets_fi  TABLES pt_anla_fi."  STRUCTURE anlav.

  DATA: lt_anlav TYPE TABLE OF anlav,
        ls_anlav TYPE anlav,
        lt_anlz TYPE TABLE OF anlz,
        ls_anlz TYPE anlz.
  DATA: ls_bkpf TYPE bkpf,
        lt_bseg TYPE TABLE OF bseg,
        ls_bseg TYPE bseg.

  SELECT        * FROM  bkpf
                  INTO TABLE gt_bkpf
         WHERE  bukrs  EQ p_bukrs
         AND    belnr  IN so_docnr
         AND    gjahr  IN so_docdt
         AND    budat  IN so_posdt
         AND    xblnr  IN so_redoc
         AND    usnam  IN so_user.

  LOOP AT gt_bkpf INTO ls_bkpf.

    SELECT        * FROM  bseg
                    INTO TABLE lt_bseg
           WHERE  bukrs  = ls_bkpf-bukrs
           AND    belnr  = ls_bkpf-belnr
           AND    gjahr  = ls_bkpf-gjahr
           AND    koart  = 'A'.

    LOOP AT lt_bseg INTO ls_bseg.
      APPEND ls_bseg TO gt_bseg.
      SELECT SINGLE * FROM  anla
                      INTO CORRESPONDING FIELDS OF ls_anlav
             WHERE  bukrs  = ls_bseg-bukrs
             AND    anln1  = ls_bseg-anln1
             AND    anln2  = ls_bseg-anln2.
      SELECT        * FROM  anlz
                      INTO ls_anlz
               WHERE  bukrs  = ls_bseg-bukrs
               AND    anln1  = ls_bseg-anln1
               AND    anln2  = ls_bseg-anln2
               AND    bdatu  GE p_repdt
               AND    adatu  LE p_repdt.

      ENDSELECT.
      MOVE-CORRESPONDING ls_anlz TO ls_anlav.               "#EC ENHOK
      APPEND ls_anlav TO pt_anla_fi.
    ENDLOOP.

  ENDLOOP.







ENDFORM.                    " select_assets_fi
*&---------------------------------------------------------------------*
*&      Form  SET_COMPANY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_company .

  MOVE p_bukrs TO gv_bukrs.

ENDFORM.                    " SET_COMPANY
