*&---------------------------------------------------------------------*
*&  Include           J_3R_OS_F05
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  fill_os1_fsd
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_FILLING_RULE  text
*----------------------------------------------------------------------*
FORM fill_os1_fsd
  USING    p_filling_rule TYPE char10
           ps_table4       TYPE j_3r_invc_s4
           ps_table5       TYPE j_3r_invc_s5
           ps_table6       TYPE j_3r_invc_s6.

  DATA:  ls_header LIKE LINE OF gt_header, " j_3r_invc_header
         ls_os6_settings TYPE j_3ros6_settings.

  DATA: lv_bldat TYPE bkpf-bldat.

  DATA:  ls_anlav TYPE anlav,
         ls_t087t TYPE t087t,
         ls_adrc TYPE adrc,
         lt_adrc TYPE TABLE OF adrc,
         ls_company_bankdata(140),
         ls_vendor TYPE lfa1,
         ls_vendor_bankdata(140) TYPE c,
         ls_vendor_adrc TYPE adrc,
         lt_vendor_adrc TYPE TABLE OF adrc,
         ls_customer TYPE kna1,
         ls_customer_bankdata(140) TYPE c,
         ls_customer_adrc TYPE adrc,
         lt_customer_adrc TYPE TABLE OF adrc.

  DATA: ls_tline TYPE tline,
        ls_ankt TYPE ankt,
*        ls_anlb TYPE  ANLB,
*        lt_anlb TYPE TABLE OF anlb,
*        lt_anea TYPE TABLE OF anea,
*        ls_anea TYPE anea,
        ls_t003t TYPE t003t,
*        ls_bkpf TYPE bkpf,
*        ls_bseg TYPE bseg,
        ls_afko TYPE afko,
        ls_hiko TYPE hiko.

  DATA: lt_langs TYPE umgtlangcp,
        ls_langs TYPE umgslangcp.



  CLEAR: ls_anlav, ls_adrc, lt_adrc, ls_vendor, ls_vendor_adrc, lt_vendor_adrc, ls_customer, ls_customer_adrc, lt_customer_adrc.


* selection from fm and system tables ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

* find bseg record
*  READ TABLE gt_bseg
*    INTO ls_bseg
*    with key bukrs = ps_table4-bukrs
*             belnr = ps_table4-numaccept
*             gjahr = ps_table4-gjahr
*             buzei = ps_table4-buzei.

  SELECT SINGLE bldat FROM bkpf INTO lv_bldat
    WHERE bukrs = ps_table4-bukrs
      AND belnr = ps_table4-numaccept
      AND gjahr = ps_table4-gjahr.

*read language vector
*  CALL FUNCTION 'UMG_READ_LANG_INFO'
*    IMPORTING
*      ex_langcp_itab        = lt_langs
*    EXCEPTIONS
*      no_codepage_avaiable  = 1
*      empty_language_vector = 2
*      OTHERS                = 3.

* Define the order of languages trying to fetch
  ls_langs-langu = sy-langu.
  APPEND ls_langs TO lt_langs.
  ls_langs-langu = 'EN'.
  APPEND ls_langs TO lt_langs.
  ls_langs-langu = 'DE'.
  APPEND ls_langs TO lt_langs.

*  IF sy-subrc <> 0.
*    PERFORM message_add USING sy-msgty sy-msgno sy-msgid sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
**    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
**            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF.

* selections from os6 tables
  READ TABLE gt_header
  INTO ls_header
  WITH KEY bukrs = ps_table4-bukrs
           anln1 = ps_table4-anln1
           anln2 = ps_table4-anln2.

* os6 settings
  SELECT SINGLE *
    FROM j_3ros6_settings
    INTO ls_os6_settings
    WHERE keyset = p_keyset.

* asset information
*  READ TABLE gt_anlav
*  INTO ls_anlav
*  with key bukrs = ps_table4-bukrs
*           anln1 = ps_table4-anln1
*           anln2 = ps_table4-anln2.
*SORT gt_anlav BY bukrs anln1 anln2 bdatu.
  LOOP AT gt_anlav
    INTO ls_anlav
    WHERE bukrs = ps_table4-bukrs AND
                 anln1 = ps_table4-anln1 AND
                 anln2 = ps_table4-anln2 AND
                 bdatu > ps_table4-daccept AND
                 adatu < ps_table4-daccept.
  ENDLOOP.
  IF ls_anlav IS INITIAL. "There are no valid time dependent data maintained. Even in this case we need the the fields of ANLA; Note 1125900
    READ TABLE gt_anlav                                              "Note 1125900
    INTO ls_anlav                                                    "Note 1125900
    WITH KEY bukrs = ps_table4-bukrs                                 "Note 1125900
             anln1 = ps_table4-anln1                                 "Note 1125900
             anln2 = ps_table4-anln2.                                "Note 1125900
    "Note 1125900
    CLEAR ls_anlav-pernr.   "Time dependent data shall be cleared    "Note 1125900
  ENDIF.                                                              "Note 1125900


*asset proportional information
*  CALL FUNCTION 'ANEA_READ_MULTIPLE_GJAHR_ALL'
*    EXPORTING
*      i_anln1          = ps_table4-anln1
*      i_anln2          = ps_table4-anln2
**   I_BISGJAHR       = '0000'
*      i_bukrs          = ps_table4-bukrs
*      i_gjahr          = ps_table4-gjahr
*    TABLES
*      t_anea           = lt_anea
*      t_anlb           = lt_anlb
*   EXCEPTIONS
*     not_found        = 1
*     OTHERS           = 2
*            .
*  IF sy-subrc <> 0.
*    PERFORM message_add USING sy-msgty sy-msgno sy-msgid sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ELSE.
*
**    SORT lt_anlb DESCENDING BY bdatu.
**    LOOP AT lt_anlb INTO ls_anlb.
**      IF ls_anlb-bdatu < gv_repdt AND ls_anlb-AFABE = '01'.
**        EXIT.
**      ENDIF.
**    ENDLOOP.
*
*    LOOP AT lt_anea INTO ls_anea.
*      IF ls_anea-lnran = ps_table4-lnran AND ls_anea-afabe = '01'. "ls_bseg-lnran
*        EXIT.
*      ENDIF.
*    ENDLOOP.
*
*  ENDIF.

** vendor information
*  CALL FUNCTION 'GET_VENDOR_DETAILS'
*    EXPORTING
*      i_lifnr               = ls_anlav-lifnr
**   I_GET_ADDRESS         = ' '
*   IMPORTING
*     e_lfa1                = ls_vendor
*   EXCEPTIONS
*     not_found             = 1
*     parameter_error       = 2
*     OTHERS                = 3
*            .
  SELECT SINGLE * INTO ls_vendor
   FROM  lfa1
   WHERE lifnr = ls_anlav-lifnr.
  .
  IF sy-subrc <> 0.
*    PERFORM message_add USING sy-msgty sy-msgno sy-msgid sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

* customer information
  IF ps_table4-kunnr IS NOT INITIAL.
    CALL FUNCTION 'CUSTOMER_READ'
      EXPORTING
        i_bukrs         = ps_table4-bukrs
        i_kunnr         = ps_table4-kunnr "ls_bseg-kunnr "does not exist in table4!
     IMPORTING
       e_kna1          = ls_customer
*     E_KNB1          =
     EXCEPTIONS
       not_found       = 1
       OTHERS          = 2
              .
    IF sy-subrc <> 0.
      PERFORM message_add USING sy-msgty sy-msgno sy-msgid sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*   MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*           WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDIF.
* Bank data: Company, Vendor, Customer
  PERFORM get_all_bank_data  USING ls_anlav-bukrs ls_anlav-lifnr ps_table4-kunnr
                             CHANGING ls_company_bankdata ls_customer_bankdata
                               ls_vendor_bankdata.

*  address information
  CALL FUNCTION 'ADDR_SELECT_ADRC_SINGLE'
    EXPORTING
      addrnumber        = gs_t001-adrnr
    TABLES
      et_adrc           = lt_adrc
    EXCEPTIONS
      address_not_exist = 1
      parameter_error   = 2
      internal_error    = 3
      OTHERS            = 4.
  IF sy-subrc <> 0.
    PERFORM message_add USING sy-msgty sy-msgno sy-msgid sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    SORT lt_adrc DESCENDING BY date_from.
    LOOP AT lt_adrc INTO ls_adrc WHERE nation = 'R'.   "EC_NOTEXT
      IF ls_adrc-date_from < gv_repdt.                 "Note-1156792
        EXIT.                                          "Note-1156792
      ENDIF.                                           "Note-1156792
    ENDLOOP.                                           "Note-1156792
    IF sy-subrc = 4.                  "In case the Russian version does not exist
      LOOP AT lt_adrc INTO ls_adrc.
        IF ls_adrc-date_from < gv_repdt.
          EXIT.
        ENDIF.
      ENDLOOP.
    ENDIF.                                              "Note-1156792

  ENDIF.

* customer address
  CALL FUNCTION 'ADDR_SELECT_ADRC_SINGLE'
    EXPORTING
      addrnumber        = ls_customer-adrnr
    TABLES
      et_adrc           = lt_customer_adrc
    EXCEPTIONS
      address_not_exist = 1
      parameter_error   = 2
      internal_error    = 3
      OTHERS            = 4.
  IF sy-subrc <> 0.
    PERFORM message_add USING sy-msgty sy-msgno sy-msgid sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    SORT lt_customer_adrc DESCENDING BY date_from.
    LOOP AT lt_customer_adrc INTO ls_customer_adrc WHERE nation = 'R'.     "EC_NOTEXT
      IF ls_customer_adrc-date_from < gv_repdt.                            "Note-1156792
        EXIT.                                                              "Note-1156792
      ENDIF.                                                               "Note-1156792
    ENDLOOP.                                                               "Note-1156792
    IF sy-subrc = 4.         "In case the Russian version does not exist    Note-1156792
      LOOP AT lt_customer_adrc INTO ls_customer_adrc.
        IF ls_customer_adrc-date_from < gv_repdt.
          EXIT.
        ENDIF.
      ENDLOOP.
    ENDIF.                                                                 "Note-1156792
  ENDIF.

* vendor address
  CALL FUNCTION 'ADDR_SELECT_ADRC_SINGLE'
    EXPORTING
      addrnumber        = ls_vendor-adrnr
    TABLES
      et_adrc           = lt_vendor_adrc
    EXCEPTIONS
      address_not_exist = 1
      parameter_error   = 2
      internal_error    = 3
      OTHERS            = 4.
  IF sy-subrc <> 0.
    PERFORM message_add USING sy-msgty sy-msgno sy-msgid sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    SORT lt_vendor_adrc DESCENDING BY date_from.
    LOOP AT lt_vendor_adrc INTO ls_vendor_adrc WHERE nation = 'R'. "EC_NOTEST
      IF ls_vendor_adrc-date_from < gv_repdt.                      "Note-1156792
        EXIT.                                                      "Note-1156792
      ENDIF.                                                       "Note-1156792
    ENDLOOP.                                                       "Note-1156792
    IF sy-subrc = 4.    "In case the Russian version does not exist Note-1156792
      LOOP AT lt_vendor_adrc INTO ls_vendor_adrc.
        IF ls_vendor_adrc-date_from < gv_repdt.
          EXIT.
        ENDIF.
      ENDLOOP.
    ENDIF.                                                         "Note-1156792

  ENDIF.

* Region information
  DATA: lv_region TYPE bezei20,
        lv_vendor_region TYPE bezei20,
        lv_customer_region TYPE bezei20.

  SELECT  SINGLE bezei
    FROM  t005u
    INTO  lv_region
* Begin of Change IMP RU AIR21243
*    WHERE spras = ls_adrc-langu AND
     WHERE spras = 'RU' AND
* End of Change IMP RU AIR21243
          land1 = ls_adrc-country AND
          bland = ls_adrc-region.
  SELECT  SINGLE bezei
    FROM  t005u
    INTO  lv_vendor_region
* Begin of Change IMP RU AIR21243
*    WHERE spras = ls_vendor_adrc-langu AND
    WHERE spras = 'RU' AND
* End of Change IMP RU AIR21243
          land1 = ls_vendor_adrc-country AND
          bland = ls_vendor_adrc-region.
  SELECT  SINGLE bezei
    FROM  t005u
    INTO  lv_customer_region
* Begin of Change IMP RU AIR21243
*    WHERE spras = ls_customer_adrc-langu AND
    WHERE spras = 'RU' AND
* End of Change IMP RU AIR21243
          land1 = ls_customer_adrc-country AND
          bland = ls_customer_adrc-region.



* Order master data
*  SELECT SINGLE *
*    FROM AUFK
*    INTO ls_aufk
*    WHERE AUFNR = ls_table6-NUMBASQ.



  SELECT SINGLE *
    FROM afko
    INTO ls_afko
    WHERE aufnr = ps_table6-numbasq.

  SELECT SINGLE *
    FROM hiko
    INTO ls_hiko
    WHERE aufnr = ps_table6-numbasq.


* fill content fields ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  IF p_m11fm EQ 'X'.
    SELECT SINGLE *
          FROM t087t
          INTO ls_t087t
          WHERE spras EQ sy-langu
          AND  ordnr EQ '4'
          AND  ord4x EQ ls_anlav-ord44.
  ENDIF.

*N1_HND_ORG_CEO_POS
  CASE p_filling_rule.
    WHEN '1-R' OR '4'.
      gs_os1_fsd-n1_hnd_org_ceo_pos = b_ceopos.
    WHEN '1-A'.
      gs_os1_fsd-n1_hnd_org_ceo_pos = p_ceopos.
  ENDCASE.

*N2_HND_ORG_CEO_NAME
  CASE p_filling_rule.
    WHEN '1-R' OR '4'.
      PERFORM f_get_company_param  USING ps_table4-bukrs gc_org_ceo_type CHANGING  gs_os1_fsd-n2_hnd_org_ceo_name.
    WHEN '1-A'.
      gs_os1_fsd-n2_hnd_org_ceo_name = p_hndnam.
    WHEN OTHERS.
*      gs_os1_fsd-N2_HND_ORG_CEO_NAME = ''.
  ENDCASE.

*N3_HND_ORG_NAME
  CASE p_filling_rule.
    WHEN '1-A' OR '14'.
      "gs_os1_fsd-n3_hnd_org_name = ls_anlav-lifnr. "Change request Internal Message:0120061532 0002445056 2006
      CONCATENATE  ls_vendor_adrc-name1 ls_vendor_adrc-name2 ls_vendor_adrc-name3 ls_vendor_adrc-name4
           INTO gs_os1_fsd-n3_hnd_org_name
           SEPARATED BY space.
    WHEN '1-R' OR '4'.
      "CONCATENATE  ls_adrc-name1 ls_adrc-name2 "Change request Internal Message:0120061532 0002445056 2006
      CONCATENATE  ls_adrc-name1 ls_adrc-name2 ls_adrc-name3 ls_adrc-name4
           INTO gs_os1_fsd-n3_hnd_org_name
           SEPARATED BY space.
    WHEN  '2-TD' OR '2-IT'.
*      gs_os1_fsd-n3_hnd_org_name = gs_t001-butxt. "Change request Internal Message:0120061532 0002887483 2006
      CONCATENATE  ls_adrc-name1 ls_adrc-name2 ls_adrc-name3 ls_adrc-name4
           INTO gs_os1_fsd-n3_hnd_org_name
           SEPARATED BY space.
    WHEN  '6' OR 'OS6'.
*      gs_os1_fsd-n3_hnd_org_name = ls_header-alcomname.  "Change request Internal Message:0120061532 0002789775 2006
      CONCATENATE  ls_adrc-name1 ls_adrc-name2 ls_adrc-name3 ls_adrc-name4
           INTO gs_os1_fsd-n3_hnd_org_name
           SEPARATED BY space.
    WHEN OTHERS.
*      gs_os1_fsd-N3_HND_ORG_NAME = ''.
  ENDCASE.

*N3A_HND_ORG_OKPO
  CASE p_filling_rule.
    WHEN '1-R' OR '2-TD' OR '2-IT' OR '4' OR 'OS6'.
      PERFORM f_get_company_param  USING ps_table4-bukrs gc_okpo_type CHANGING gs_os1_fsd-n3a_hnd_org_okpo.
    WHEN '6' OR '14'.
      gs_os1_fsd-n3a_hnd_org_okpo = ls_header-alokpo.       "OS6-H8
    WHEN OTHERS.
*      gs_os1_fsd-N1_HND_ORG_CEO_POS = ''.
  ENDCASE.


*N4_HND_ORG_ADDR
  CASE p_filling_rule.
    WHEN '1-A' OR '14'.
      "CONCATENATE ls_vendor-regio ls_vendor-ort01 ls_vendor-stras "Change request Internal Message:0120061532 0002445056 2006
      CONCATENATE ls_vendor_adrc-post_code1 lv_vendor_region ls_vendor_adrc-city1 ls_vendor_adrc-street
                  ls_vendor_adrc-house_num1 ls_vendor_adrc-tel_number ls_vendor_adrc-fax_number
            INTO gs_os1_fsd-n4_hnd_org_addr
            SEPARATED BY space.
    WHEN '1-R' OR '4'.
      "CONCATENATE  ls_adrc-region ls_adrc-city1 ls_adrc-street ls_adrc-house_num1 ls_adrc-tel_number ls_adrc-fax_number "Change request Internal Message:0120061532 0002445056 2006
      CONCATENATE ls_adrc-post_code1 lv_region ls_adrc-city1 ls_adrc-street
                  ls_adrc-house_num1 ls_adrc-tel_number ls_adrc-fax_number
          INTO gs_os1_fsd-n4_hnd_org_addr
          SEPARATED BY space.
    WHEN OTHERS.
*      gs_os1_fsd-N4_HND_ORG_ADDR = ''.
  ENDCASE.

*N5_HND_ORG_BANK
  CASE p_filling_rule.
    WHEN '1-R'.
      gs_os1_fsd-n5_hnd_org_bank = ls_company_bankdata.
    WHEN '1-A'.
      IF p_bankde IS NOT INITIAL.
        gs_os1_fsd-n5_hnd_org_bank = p_bankde.
      ELSE.
        gs_os1_fsd-n5_hnd_org_bank = ls_vendor_bankdata.
      ENDIF.
  ENDCASE.




*N6_HND_ORG_SUBDIV_NAME
  CASE p_filling_rule.
    WHEN '1-R' OR '4' OR '6' OR 'OS6'.
      gs_os1_fsd-n6_hnd_org_subdiv_name = ps_table4-structdiv. "table4-STRUCTDIV
    WHEN '2-IT' OR '2-TD'.
      gs_os1_fsd-n6_hnd_org_subdiv_name = ps_table4-structdiv_old. "table4-STRUCTDIV
    WHEN OTHERS.
*      gs_os1_fsd-N6_HND_ORG_SUBDIV_NAME = ''.
  ENDCASE.

*N7_ACC_ORG_NAME
  CASE p_filling_rule.
    WHEN '1-A' OR '14'.
      "CONCATENATE  ls_adrc-name1 ls_adrc-name2  "Change request Internal Message:0120061532 0002445056 2006
      IF p_m11fm NE 'X'.
        CONCATENATE  ls_adrc-name1 ls_adrc-name2 ls_adrc-name3 ls_adrc-name4
             INTO gs_os1_fsd-n7_acc_org_name
             SEPARATED BY space.
      ELSE.
        CONCATENATE  ls_adrc-name1 ls_adrc-name2 ls_t087t-ordtx
          INTO gs_os1_fsd-n7_acc_org_name
          SEPARATED BY space.
      ENDIF.                           "OS6-H1
    WHEN '1-R'.
      "gs_os1_fsd-n7_acc_org_name = ls_customer-name1. "Change request Internal Message:0120061532 0002445056 2006
      IF p_m11fm NE 'X'.
        CONCATENATE  ls_customer_adrc-name1 ls_customer_adrc-name2 ls_customer_adrc-name3 ls_customer_adrc-name4
             INTO gs_os1_fsd-n7_acc_org_name
             SEPARATED BY space.
      ELSE.
        CONCATENATE  ls_customer_adrc-name1 ls_customer_adrc-name2 ls_t087t-ordtx
           INTO gs_os1_fsd-n7_acc_org_name
           SEPARATED BY space.
      ENDIF.
    WHEN OTHERS.
*      gs_os1_fsd-N7_ACC_ORG_NAME = ''.
  ENDCASE.


*N7A_ACC_ORG_OKPO
  CASE p_filling_rule.
    WHEN '1-A' OR '14'.
      PERFORM f_get_company_param  USING ps_table4-bukrs gc_okpo_type CHANGING gs_os1_fsd-n7a_acc_org_okpo."OS6-H8
    WHEN OTHERS.
*      gs_os1_fsd-N7A_ACC_ORG_OKPO = ''.
  ENDCASE.

*N8_ACC_ORG_ADDR
  CASE p_filling_rule.
*    WHEN '1-A' OR '14'. "Message 0000870114/2007
    WHEN '1-A'.
      "CONCATENATE  ls_adrc-region ls_adrc-city1 ls_adrc-street ls_adrc-house_num1 ls_adrc-tel_number ls_adrc-fax_number"Change request Internal Message:0120061532 0002445056 2006
      "INTO gs_os1_fsd-n8_acc_org_addr
      "SEPARATED BY space.
      CONCATENATE ls_adrc-post_code1 lv_region  ls_adrc-city1 ls_adrc-street
                   ls_adrc-house_num1 ls_adrc-tel_number ls_adrc-fax_number
      INTO gs_os1_fsd-n8_acc_org_addr
      SEPARATED BY space.
    WHEN '14'. "Message 0000870114/2007
      CONCATENATE ls_adrc-tel_number ls_adrc-fax_number "Message 0000870114/2007
      INTO gs_os1_fsd-n8_acc_org_addr "Message 0000870114/2007
      SEPARATED BY space. "Message 0000870114/2007
    WHEN '1-R'.
      "CONCATENATE  ls_customer-regio ls_customer-ort01 ls_customer-stras"Change request Internal Message:0120061532 0002445056 2006
      "INTO gs_os1_fsd-n8_acc_org_addr
      "SEPARATED BY space.
      CONCATENATE ls_customer_adrc-post_code1 lv_customer_region ls_customer_adrc-city1 ls_customer_adrc-street
                  ls_customer_adrc-house_num1 ls_customer_adrc-tel_number ls_customer_adrc-fax_number
      INTO gs_os1_fsd-n8_acc_org_addr
      SEPARATED BY space.
    WHEN OTHERS.
*      gs_os1_fsd-N8_ACC_ORG_ADDR = ''.
  ENDCASE.

*N9_ACC_ORG_BANK
  gs_os1_fsd-n9_acc_org_bank = ''.
  CASE p_filling_rule.
    WHEN '1-A'.
      gs_os1_fsd-n9_acc_org_bank  = ls_company_bankdata.
    WHEN '1-R'.
      IF r_bankde IS NOT INITIAL.
        gs_os1_fsd-n9_acc_org_bank  = r_bankde.
      ELSE.
        gs_os1_fsd-n9_acc_org_bank = ls_customer_bankdata.
      ENDIF.
  ENDCASE.

*N10_ACC_ORG_SUBDIV_NAME
* masik idopontra kellene keresni az ls_table4-et, mert igy ugyanaz van az aatadonal es az atvevonel?!
  CASE p_filling_rule.
    WHEN '1-A' OR '2-TD' OR '2-IT' OR '14'.
      gs_os1_fsd-n10_acc_org_subdiv_name = ps_table4-structdiv. "table4-STRUCTDIV
    WHEN OTHERS.
*      gs_os1_fsd-N10_ACC_ORG_SUBDIV_NAME = ''.
  ENDCASE.

*N11_ACC_ORG_CEO_POS
  CASE p_filling_rule.
    WHEN '1-A' OR '3-AA' OR '3-PM'.
      gs_os1_fsd-n11_acc_org_ceo_pos = b_ceopos.
    WHEN '1-R'.
      gs_os1_fsd-n11_acc_org_ceo_pos = r_ceopos.
  ENDCASE.

*N12_ACC_ORG_CEO_NAME
  CASE p_filling_rule.
    WHEN '1-A' OR '3-AA' OR '3-PM' OR '14'.
      PERFORM f_get_company_param  USING ps_table4-bukrs gc_org_ceo_type CHANGING gs_os1_fsd-n12_acc_org_ceo_name.
    WHEN OTHERS.
*      gs_os1_fsd-N12_ACC_ORG_CEO_NAME = ''.
  ENDCASE.

*N13_TAKING_BK_DATE
  CASE p_filling_rule.
    WHEN '1-A'.
      gs_os1_fsd-n13_taking_bk_date = ps_table4-daccept. "ls_bkpf-budat.
    WHEN 'OS6'.                                               "Note 1067392
      gs_os1_fsd-n13_taking_bk_date = ls_header-albuydate.    "Note 1067392
    WHEN OTHERS.
*      gs_os1_fsd-N13_TAKING_BK_DATE = ''.
  ENDCASE.

*N14_DISCH_BK_DATE
  CASE p_filling_rule.
    WHEN '1-R' OR '4'.
      gs_os1_fsd-n14_disch_bk_date = ps_table4-daccept.   "ls_bkpf-budat.
    WHEN 'OS6'.                                           "Note 1067392
      gs_os1_fsd-n14_disch_bk_date = ls_header-alretdate. "Note 1067392
    WHEN OTHERS.
*      gs_os1_fsd-N14_DISCH_BK_DATE = ''.
  ENDCASE.

*N15_ACCOUNT
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4' OR '6' OR '14' OR 'OS6'.
      gs_os1_fsd-n15_account = ls_header-alaccam. "T095-KTANSW.
    WHEN OTHERS.
*      gs_os1_fsd-N15_ACCOUNT = ''.
  ENDCASE.




*N16_OKOF
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '14' OR 'OS6'.
      gs_os1_fsd-n16_okof = ls_header-alokof. "OS6 H9 or GLOFAAASSETDATA-GLO_RUS_OKOF.
    WHEN OTHERS.
*      gs_os1_fsd-N16_OKOF = ''.
  ENDCASE.

*N17_DPR_GROUP
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '6' OR '14' OR 'OS6'.
      gs_os1_fsd-n17_dpr_group = ls_header-alamgr.
*      SELECT SINGLE GLO_RUS_DEPGR
*        FROM GLOFAAASSETDATA
*        INTO gs_os1_fsd-N17_DPR_GROUP
*        WHERE BUKRS = gs_t001-bukrs
*          AND ANLN1 = ls_anlav-anln1
*          AND ANLN2 = ls_anlav-anln2. "GLOFAAASSETDATA-GLO_RUS_DEPGR.
    WHEN OTHERS.
*      gs_os1_fsd-N17_DPR_GROUP = ''.
  ENDCASE.

*N18_INVENTORY_NR
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4'.
      gs_os1_fsd-n18_inventory_nr = ls_header-alnmb3. " gs_anlav-(j_3r_os6_settings fields)
    WHEN 'OS6'.

* create inventory card number from asset number and subnumber
      PERFORM make_asset_number USING ls_header-anln1 ls_header-anln2
                               ls_header-alnmb3
                               ls_os6_settings-invnaumber
                         CHANGING  gs_os1_fsd-n18_inventory_nr.
    WHEN OTHERS.
*      gs_os1_fsd-N18_INVENTORY_NR = ''.
  ENDCASE.

*N19_SERIAL_NR
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4' OR '14'.
      gs_os1_fsd-n19_serial_nr = ls_anlav-sernr.
*      gs_os1_fsd-N19_SERIAL_NR = ls_header-alsern. "OS6-H12
    WHEN 'OS6'.
      gs_os1_fsd-n19_serial_nr = ls_header-alsern.          "OS6-H12
    WHEN OTHERS.
*    gs_os1_fsd-N19_SERIAL_NR = "".
  ENDCASE.

*N20_ST_REG_NR
*  gs_os1_fsd-N20_ST_REG_NR = ''.

*N21_ST_REG_DATE
*  gs_os1_fsd-N21_ST_REG_DATE = ''.

*N22_DOC_NR
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4' OR '2-IT' OR 'OS6'.
      gs_os1_fsd-n22_doc_nr = ps_table4-numaccept. "ls_bkpf-belnr.
    WHEN '14'.
      gs_os1_fsd-n22_doc_nr = ps_table4-numaccept. "Message Number 0120061532 0002918855 2006
    WHEN '3-AA' OR '3-PM'.
      gs_os1_fsd-n22_doc_nr = ps_table5-numbasq.
    WHEN OTHERS.
*    gs_os1_fsd-N22_DOC_NR = ''.
  ENDCASE.

*N23_DOC_DATE
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4' OR '2-IT' OR '2-TD' OR '14'.
      gs_os1_fsd-n23_doc_date = lv_bldat.
*      gs_os1_fsd-n23_doc_date = ps_table4-daccept.
    WHEN '3-AA'.
      gs_os1_fsd-n23_doc_date = ps_table5-dateasq.
    WHEN '3-PM'.
      gs_os1_fsd-n23_doc_date = ps_table6-dateasq.
    WHEN 'OS6'.
      gs_os1_fsd-n23_doc_date = ls_header-alicdate.
    WHEN OTHERS.
*    gs_os1_fsd-N23_DOC_DATE = ''.
  ENDCASE.

*N24_REP_REASON
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4' OR '14'.
      gs_os1_fsd-n24_rep_reason = p_repgen.
    WHEN OTHERS.
*    gs_os1_fsd-N24_REP_REASON = ''.
  ENDCASE.

*N25_REP_NR
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4' OR '14'.
      gs_os1_fsd-n25_rep_nr = p_repnr.
    WHEN '3-PM'.
      gs_os1_fsd-n25_rep_nr = ps_table6-numbasq. " os6 table6 -numbasq
    WHEN OTHERS.
*    gs_os1_fsd-N25_REP_NR = ''.
  ENDCASE.

*N26_REP_DATE
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4' OR '14' OR '3-AA'.
      gs_os1_fsd-n26_rep_date = p_orddt. "p_repdt.
    WHEN '3-PM'.
*      SELECT SINGLE ERDAT FROM HIKO WHERE AUFNR = ls_bseg-aufnr. ?
*      gs_os1_fsd-N26_REP_DATE = ls_aufk-erdat. " manual/table6-NUMBASQ->AUFK-ERDAT
      gs_os1_fsd-n26_rep_date = ps_table6-dateasq.

    WHEN OTHERS.
*    gs_os1_fsd-N26_REP_DATE = ''.
  ENDCASE.

*N30_ASSET_DSCR
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4' OR 'OS6'.    "Note 1067392
      gs_os1_fsd-n30_asset_dscr = ls_anlav-txt50.
*      gs_os1_fsd-N30_ASSET_DSCR = ls_header-alasname. "OS6 H3
* Begin of INSERT MOD-002.
      DATA: ls_vin TYPE fleet_vin.
      SELECT SINGLE glo_rus_ttx_vin
        FROM glofaaassetdata
        INTO ls_vin
        WHERE bukrs = gs_t001-bukrs
          AND anln1 = ls_anlav-anln1
          AND anln2 = ls_anlav-anln2. "GLOFAAASSETDATA-GLO_RUS_DEPGR.
      IF ls_vin IS NOT INITIAL.
        CONCATENATE gs_os1_fsd-n30_asset_dscr ', VIN: ' ls_vin INTO gs_os1_fsd-n30_asset_dscr.
      ENDIF.
* Begin of INSERT MOD-002.
    WHEN OTHERS.
*    gs_os1_fsd-N30_ASSET_DSCR = ''.
  ENDCASE.


*N30_LN2_ASSET_DSCR
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4' OR 'OS6'.    "Note 1067392
      gs_os1_fsd-n30_ln2_asset_dscr = ls_anlav-txa50.
*      gs_os1_fsd-N30_LN2_ASSET_DSCR = ls_header-alasmodel. "OS6 H4
    WHEN OTHERS.
*    gs_os1_fsd-N30_LN2_ASSET_DSCR = ''.
  ENDCASE.

*N31_ASSET_LOC
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '14' OR 'OS6'.
*      gs_os1_fsd-N31_ASSET_LOC = ls_anlav- kostl/gsber/raumn/stort.
      gs_os1_fsd-n31_asset_loc = ls_header-allocation.      "OS6 H5
    WHEN OTHERS.
*    gs_os1_fsd-N30_LN2_ASSET_DSCR = ''.
  ENDCASE.

*N31_LN2_ASSET_LOC
*      gs_os1_fsd-N31_LN2_ASSET_LOC = ''.

*N32_MANUFACTURER
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '14' OR 'OS6'.
*      gs_os1_fsd-N32_MANUFACTURER = ls_anlav-herst.
      gs_os1_fsd-n32_manufacturer = ls_header-alproducer.   "OS6 H6
    WHEN OTHERS.
*    gs_os1_fsd-N32_MANUFACTURER = ''.
  ENDCASE.

*N32_ LN2_MANUFACTURER
*    gs_os1_fsd-N32_ LN2_MANUFACTURER = ''.

*N33_COOWN_PART1
*    gs_os1_fsd-N33_COOWN_PART1 = ''.

*N34_COOWN_PERC1
*    gs_os1_fsd-N34_COOWN_PERC1 = ''.

*N35_COOWN_PART2
*    gs_os1_fsd-N35_COOWN_PART2 = ''.

*N36_COOWN_PERC2
*    gs_os1_fsd-N36_COOWN_PERC2 = ''.

*N37_FOR_CURR
*    gs_os1_fsd-N37_FOR_CURR = ''.

*N38_EXCH_RATE
*    gs_os1_fsd-N38_EXCH_RATE = ''.

*N39_EXCH_DATE
*    gs_os1_fsd-N39_EXCH_DATE = ''.

*N40_EXCH_AMNT
*    gs_os1_fsd-N40_EXCH_AMNT = ''.
  "Note 1067392
*N54_3_PASSPORT_NR                                          "Note 1067392
  CASE p_filling_rule.                                    "Note 1067392
    WHEN 'OS6'.                                           "Note 1067392
      gs_os1_fsd-n54_3_passport_nr = ls_header-alpasp.    " OS6 H11 "Note 1067392
    WHEN OTHERS.                                          "Note 1067392
*      ls_os1_s1t-N54_3_PASSPORT_NR = ''.                   "Note 1067392
  ENDCASE.                                                "Note 1067392

*N63_CHARACTERISTICS
* CLEAR gs_os1_fsd-N63_CHARACTERISTICS.

*N64_TEST_DATE
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R'.
      gs_os1_fsd-n64_test_date = p_tstdat.
    WHEN OTHERS.
*    gs_os1_fsd-N64_TEST_DATE = ''.
  ENDCASE.

*N65_COMPLY
*no data entry, always underlined

*N66_REWORK
*no data entry, always underlined

*N67_INCOMPLIANCE_REASON
*    gs_os1_fsd-N67_INCOMPLIANCE_REASON = ''.

*N67_LN2_INCOMPLIANCE_REASON
*    gs_os1_fsd-N67_LN2_INCOMPLIANCE_REASON = ''.

*N67_LN3_INCOMPLIANCE_REASON
*    gs_os1_fsd-N67_LN3_INCOMPLIANCE_REASON = ''.

*N68_REWORK
*    gs_os1_fsd-N68_REWORK = ''.

*N68_LN2_REWORK
*    gs_os1_fsd-N68_LN2_REWORK = ''.

*N68_LN3_REWORK
*    gs_os1_fsd-N68_LN3_REWORK = ''.

*N69_CONCL_COMMISSION
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4' OR '3-AA' OR '3-PM' OR '14'.
      gs_os1_fsd-n69_concl_commission = p_concco.
    WHEN OTHERS.
*    gs_os1_fsd-N69_CONCL_COMMISSION = ''.
  ENDCASE.

*N69_LN2_CONCL_COMMISSION
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4' OR '3-AA' OR '3-PM' OR '14'.
      gs_os1_fsd-n69_ln2_concl_commission = p_concc2.
    WHEN OTHERS.
*    gs_os1_fsd-N69_LN2_CONCL_COMMISSION = ''.
  ENDCASE.

*N70_TECH_DOC
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4' OR '3-AA' OR '3-PM' OR '14'.
      gs_os1_fsd-n70_tech_doc = p_tecdoc.
    WHEN OTHERS.
*    gs_os1_fsd-N70_TECH_DOC_COMMISSION = ''.
  ENDCASE.


*N71_CHMAN_POS
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4' OR '3-AA' OR '3-PM' OR '14'.
      gs_os1_fsd-n71_chman_pos = p_chmnpo.
    WHEN OTHERS.
*    gs_os1_fsd-N71_CHMAN_ POS = ''.
  ENDCASE.

*N72_CHMAN_NAME
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4' OR '3-AA' OR '3-PM' OR '14'.
      gs_os1_fsd-n72_chman_name = p_chmnna.
    WHEN OTHERS.
*    gs_os1_fsd-N72_CHMAN_NAME = ''.
  ENDCASE.

*N73_MEMBER1_POS
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4' OR '3-AA' OR '3-PM' OR '14'.
      gs_os1_fsd-n73_member1_pos = p_mbr1po.
    WHEN OTHERS.
*    gs_os1_fsd-N73_MEMBER1_POS = ''.
  ENDCASE.

*N74_MEMBER1_NAME
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4' OR '3-AA' OR '3-PM' OR '14'.
      gs_os1_fsd-n74_member1_name = p_mbr1na.
    WHEN OTHERS.
*    gs_os1_fsd-N74_MEMBER1_NAME = ''.
  ENDCASE.

*N75_MEMBER2_POS
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4' OR '3-AA' OR '3-PM' OR '14'.
      gs_os1_fsd-n75_member2_pos = p_mbr2po.
    WHEN OTHERS.
*    gs_os1_fsd-N75_MEMBER2_POS = ''.
  ENDCASE.

*N76_MEMBER2_NAME
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4' OR '3-AA' OR '3-PM' OR '14'.
      gs_os1_fsd-n76_member2_name = p_mbr2na.
    WHEN OTHERS.
*    gs_os1_fsd-N76_MEMBER2_NAME = ''.
  ENDCASE.

*N77_HND_RESP_PERSON_POS
  CASE p_filling_rule.
    WHEN '1-A'.
      gs_os1_fsd-n77_hnd_resp_person_pos = p_hndpos.
    WHEN '1-R'.
      gs_os1_fsd-n77_hnd_resp_person_pos = p_hndpos.
    WHEN '4' OR '2-TD' OR '2-IT' OR '3-AA' OR '3-PM'.
      gs_os1_fsd-n77_hnd_resp_person_pos = p_hndpos.
    WHEN OTHERS.
*    gs_os1_fsd-N77_HND_RESP_PERSON_POS = ''.
  ENDCASE.

*N78_HND_RESP_PERSON_NAME
  CASE p_filling_rule.
*     CALL FUNCTION 'BAPI_EMPLOYEE_GETDATA'
    WHEN '1-R' OR '4' OR '2-TD' OR '2-IT'.
      gs_os1_fsd-n78_hnd_resp_person_name = ps_table4-surname_old."OS6 4T5
    WHEN '3-AA' OR '3-PM'.
      gs_os1_fsd-n78_hnd_resp_person_name = p_hndnam.
    WHEN OTHERS.
*      gs_os1_fsd-N78_HND_RESP_PERSON_NAME = ''.
  ENDCASE.

*N81_HND_RESP_PERSON_NR
  CASE p_filling_rule.
    WHEN '1-R' OR '4' OR '2-TD' OR '2-IT'.
*      IF ls_os6_settings-resp_person EQ 'PERNR'.
*        gs_os1_fsd-n81_hnd_resp_person_nr = ls_anlav-pernr. "OS6SETTINGS-RESP_PERSON = PERNR -> anlz-pernr ELSE EMPTY.
*      ENDIF.
      gs_os1_fsd-n81_hnd_resp_person_nr = ps_table4-pernr_old.
    WHEN OTHERS.
*      gs_os1_fsd-N81_HND_RESP_PERSON_NR = ''.
  ENDCASE.

*N94_HND_CH_ACC_NAME
  CASE p_filling_rule.
    WHEN '1-R' OR '4' OR '2-TD' OR '2-IT' OR '3-AA' OR '3-PM'.
      PERFORM f_get_company_param  USING ps_table4-bukrs gc_ch_accountant_type CHANGING gs_os1_fsd-n94_hnd_ch_acc_name.
    WHEN OTHERS.
*      gs_os1_fsd-N94_HND_CH_ACC_NAME = ''.
  ENDCASE.

*N88_ACC_RESP_PERSON_POS
  CASE p_filling_rule.
    WHEN '1-A'.
      IF p_aspepo IS NOT INITIAL.
        gs_os1_fsd-n88_acc_resp_person_pos = p_aspepo.
      ELSE.
        gs_os1_fsd-n88_acc_resp_person_pos =  ps_table4-position.
      ENDIF.
    WHEN '1-R'.
      gs_os1_fsd-n88_acc_resp_person_pos = p_aspepo.
  ENDCASE.


*N89_ACC_RESP_PERSON_NAME
  CASE p_filling_rule.
    WHEN '1-A' OR '6' OR '14'.
      IF ls_os6_settings-resp_person = 'KOSTL'. " OS6SETTINGS-ANLZ_KOSTL->CSKS-VERAK
        " gs_os1_fsd-N89_ACC_RESP_PERSON_NAME = ls_csks-VERAK.
        gs_os1_fsd-n89_acc_resp_person_name =  ps_table4-surname.
      ELSE. "OS6SETTINGS-PERNR->PA0002-NACHN+VORNA
        gs_os1_fsd-n89_acc_resp_person_name =  ps_table4-surname.
      ENDIF.
    WHEN OTHERS.
*      gs_os1_fsd-N89_ACC_RESP_PERSON_NAME = ''.
  ENDCASE.


*N91_ACC_RESP_PERSON_NR
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '2-TD' OR '2-IT' OR '6' OR '14'.
*      IF ls_os6_settings-resp_person EQ 'PERNR'.
*        gs_os1_fsd-n91_acc_resp_person_nr = ls_anlav-pernr.
*      ENDIF.
      gs_os1_fsd-n91_acc_resp_person_nr = ps_table4-pernr.
    WHEN OTHERS.
*      gs_os1_fsd-N91_ACC_RESP_PERSON_NR = ''.
  ENDCASE.

*N95_ACC_CH_ACC_NAME
  CASE p_filling_rule.
    WHEN '1-A' OR '14'.
      PERFORM f_get_company_param  USING ps_table4-bukrs gc_ch_accountant_type CHANGING gs_os1_fsd-n95_acc_ch_acc_name.
    WHEN OTHERS.
*      gs_os1_fsd-N95_ACC_CH_ACC_NAME = ''.
  ENDCASE.

*N82_ACC_PERSON_POS
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '2-TD' OR '2-IT' OR '3-AA' OR '3-PM' OR '14'.
      gs_os1_fsd-n82_acc_person_pos = p_acbypo.
    WHEN OTHERS.
*      gs_os1_fsd-N82_ACC_PERSON_POS = ''.
  ENDCASE.

*N83_ACC_PERSON_NAME
  CASE p_filling_rule.
    WHEN '1-A'  OR '14'.
      gs_os1_fsd-n83_acc_person_name = p_acbyna.
    WHEN '2-TD' OR '2-IT'.
      gs_os1_fsd-n83_acc_person_name = ps_table4-surname.
    WHEN '3-AA' OR '3-PM'.
      IF ls_os6_settings-resp_person = 'KOSTL'. "OS6 resp pers if kostl then cc respnsible person
        "gs_os1_fsd-N83_ACC_PERSON_NAME = ls_csks-verak.
        gs_os1_fsd-n83_acc_person_name = ps_table4-surname.
      ELSEIF ls_os6_settings-resp_person = 'PERNR'. "elseif pernr then hr info
        gs_os1_fsd-n83_acc_person_name = ps_table4-surname.
      ENDIF.
    WHEN OTHERS.
*      gs_os1_fsd-N83_ACC_PERSON_NAME = ''.
  ENDCASE.

*N85_ATT_LETTER_DATE
  CASE p_filling_rule.
    WHEN '1-A' OR '14'.
      gs_os1_fsd-n85_att_letter_date = p_atltdt.
    WHEN OTHERS.
*      gs_os1_fsd-N85_ATT_LETTER_DATE = ''.
  ENDCASE.

*N86_ATT_LETTER_NR
  CASE p_filling_rule.
    WHEN '1-A' OR '14'.
      gs_os1_fsd-n86_att_letter_nr = p_atltnr.
    WHEN OTHERS.
*      gs_os1_fsd-N86_ATT_LETTER_NR = ''.
  ENDCASE.

*N87_ATT_LETTER_ISSUER
  CASE p_filling_rule.
    WHEN '1-A' OR '14'.
      gs_os1_fsd-n87_att_letter_issuer = p_atltis.
    WHEN OTHERS.
*      gs_os1_fsd-N87_ATT_LETTER_ISSUER = ''.
  ENDCASE.

*N92_INV_DOC_NR
  CASE p_filling_rule.
    WHEN '1-A'.
*        CONCATENATE gs_anlav-anln1 gs_anlav-anln2
*        INTO gs_os1_fsd-N92_INV_DOC_NR
*        SEPARATED BY SPACE.
      "gs_os1_fsd-n92_inv_doc_nr = ls_header-alnmb.  "Changed according to IntMsg0120061532 0002334246 2006         "OS6 18
      gs_os1_fsd-n92_inv_doc_nr = ls_header-alnmb3.
    WHEN 'OS6'. "Message 0000870114 2007
      IF ls_os6_settings-cardnumber = 'ASSNUM' OR
         ls_os6_settings-cardnumber = 'INVNR'.
* Generate inventory card number from the asset.
        PERFORM make_asset_number USING ls_header-anln1 ls_header-anln2
                           ls_header-alnmb3
                           ls_os6_settings-cardnumber
                     CHANGING  gs_os1_fsd-n92_inv_doc_nr.
      ELSE.
        gs_os1_fsd-n92_inv_doc_nr = ls_header-glo_rus_icnmb.
      ENDIF.
    WHEN 'OS14'.
      gs_os1_fsd-n92_inv_doc_nr = ls_header-glo_rus_icnmb.    "Note 1067392
    WHEN OTHERS.
*      gs_os1_fsd-N92_INV_DOC_NR = ''.
  ENDCASE.

*N93_INV_DOC_DATE
  CASE p_filling_rule.
    WHEN '1-A'.
      gs_os1_fsd-n93_inv_doc_date = ls_anlav-zugdt.
*    WHEN 'OS6'.                                               "Note 1067392
    WHEN 'OS6' OR '14'. "Message 0000870114 2007
      gs_os1_fsd-n93_inv_doc_date = ls_header-albuydate.      "Note 1067392
    WHEN OTHERS.
*      gs_os1_fsd-N93_INV_DOC_DATE = ''.
  ENDCASE.


*N30B_TRANSFER_PURPOSE
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R'.

      IF lt_langs IS NOT INITIAL.
        LOOP AT lt_langs INTO ls_langs.

          SELECT SINGLE *
            FROM  ankt
            INTO  ls_ankt
            WHERE spras = ls_langs-langu AND
                  anlkl = ls_anlav-anlkl.

          IF sy-subrc = 0.
            ls_tline-tdline = ls_ankt-txk50. "ankt-txk50 or long text
            EXIT.
          ENDIF.
        ENDLOOP.
      ENDIF.

      APPEND ls_tline TO gs_os1_fsd-n30b_transfer_purpose.
    WHEN OTHERS.
*      gs_os1_fsd-N30B_TRANSFER_PURPOSE = ''.
  ENDCASE.

*N30_4_WROFF_REASON
  CASE p_filling_rule.
    WHEN '4'.
*Note 1172676 START
*      IF lt_langs IS NOT INITIAL.
*        LOOP AT lt_langs INTO ls_langs.
*
*          SELECT SINGLE *
*            FROM  t003t
*            INTO  ls_t003t
*            WHERE spras = ls_langs-langu AND
*                  blart = ps_table4-blart. "gs_bkpf-blart.
*
*          IF sy-subrc = 0.
*            gs_os1_fsd-n30_4_wroff_reason = ls_t003t-ltext. "T003T-LTEXT
*            EXIT.
*          ENDIF.
*        ENDLOOP.
*      ENDIF.
*      gs_os1_fsd-n30_4_wroff_reason = ps_table4-bktxt.
      PERFORM get_write_off_reason   USING  ps_table4
                                     CHANGING gs_os1_fsd-n30_4_wroff_reason.
*Note 1172676 END
    WHEN OTHERS.
*      gs_os1_fsd-N30_4_WROFF_REASON = ''.
  ENDCASE.

*N90_4_WROFF_RESULTS
  CASE p_filling_rule.
    WHEN '4'.
      gs_os1_fsd-n90_4_wroff_results = p_wrores.
    WHEN OTHERS.
*      gs_os1_fsd-N90_4_WROFF_RESULTS = ''.
  ENDCASE.

*N57_4_SLS_REVENUE
  CASE p_filling_rule.
    WHEN '4'.
*      gs_os1_fsd-n57_4_sls_revenue = ls_anea-erlbt - ls_anea-verko.
      gs_os1_fsd-n57_4_sls_revenue = ps_table4-saleincome - ps_table4-salecost.
      DATA: lv_spell TYPE spell.
      CALL FUNCTION 'SPELL_AMOUNT'
       EXPORTING
         amount          = gs_os1_fsd-n57_4_sls_revenue
         currency        = gs_t001-waers
*         FILLER          = ' '
         language        = gc_ru
       IMPORTING
         in_words        = lv_spell
       EXCEPTIONS
         not_found       = 1
         too_large       = 2
         OTHERS          = 3.

      IF sy-subrc <> 0.
*            MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        PERFORM message_add USING 'E' 106 'J3R_LEGAL_FORMS' gs_os1_fsd-n57_4_sls_revenue sy-langu gs_t001-waers ''.
      ELSE.
        DATA: lv_decword TYPE string.

        IF sy-langu = 'R' AND lv_spell-decword(1) = '0'.
          PERFORM trim_currency CHANGING lv_spell-word.
        ELSE.
          CONCATENATE ',' lv_spell-decword INTO lv_decword.
        ENDIF.
        CONCATENATE lv_spell-word lv_decword INTO gs_os1_fsd-n57_4_sls_revenue_let.

        IF sy-subrc NE 0. "text amount is too long to display on the form
          PERFORM message_add USING 'E' 106 'J3R_LEGAL_FORMS' gs_os1_fsd-n57_4_sls_revenue sy-langu gs_t001-waers ''.
        ENDIF.
      ENDIF.

    WHEN OTHERS.
*      gs_os1_fsd-N57_4_SLS_REVENUE = ''.
  ENDCASE.

*N19_4A_PLATE_NR
  CASE p_filling_rule.
    WHEN '4'.
*      gs_os1_fsd-N19_4A_PLATE_NR = ls_glofaatmdpndnt-GLO_RUS_TTX_LNUM.
      gs_os1_fsd-n19_4a_plate_nr = ls_header-glo_rus_ttx_lnum.
    WHEN OTHERS.
*      gs_os1_fsd-N19_4A_PLATE_NR = ''.
  ENDCASE.

*N1_3_CUST_ORG_NAME
  CASE p_filling_rule.
    WHEN '3-AA' OR '3-PM'.
*      gs_os1_fsd-n1_3_cust_org_name = ls_header-alcomname.  " OS6 H1 "Changed by IntMsgReq: 0120061532 0002887488 2006
      CONCATENATE  ls_adrc-name1 ls_adrc-name2 ls_adrc-name3 ls_adrc-name4
           INTO gs_os1_fsd-n1_3_cust_org_name
           SEPARATED BY space.
    WHEN OTHERS.
*      gs_os1_fsd-N1_3_CUST_ORG_NAME = ''.
  ENDCASE.

*N3_3_CUST_ORG_SUBDIV_NAME
  CASE p_filling_rule.
    WHEN '3-AA' OR '3-PM'.
      gs_os1_fsd-n3_3_cust_org_subdiv_name = ls_header-aldivision." OS6 H2
    WHEN OTHERS.
*      gs_os1_fsd-N3_3_CUST_ORG_SUBDIV_NAME = ''.
  ENDCASE.

*N4_3_PERF_ORG_SUBDIV_NAME
  CASE p_filling_rule.
    WHEN '3-AA' .
      gs_os1_fsd-n4_3_perf_org_subdiv_name = ls_header-aldivision."
    WHEN '3-PM'.
      gs_os1_fsd-n4_3_perf_org_subdiv_name = ls_hiko-vaplz."
    WHEN OTHERS.
*      gs_os1_fsd-N4_3_PERF_ORG_SUBDIV_NAME = ''.
  ENDCASE.


*N2_3_CUST_ORG_OKPO
  CASE p_filling_rule.
    WHEN '3-AA' OR '3-PM'.
      gs_os1_fsd-n2_3_cust_org_okpo = ls_header-alokpo.     "OS6 H8
    WHEN OTHERS.
*      gs_os1_fsd-N2_3_CUST_ORG_OKPO = ''.
  ENDCASE.

*N5_3_PERF_ORG_OKPO
* gs_os1_fsd-N5_3_PERF_ORG_OKPO = ''.

*N8_3_ORD_REP_PER_FROM
  CASE p_filling_rule.
    WHEN '3-AA'.
      gs_os1_fsd-n8_3_ord_rep_per_from = p_plrepf.
    WHEN '3-PM'.
      gs_os1_fsd-n8_3_ord_rep_per_from = ls_afko-gstrp.
    WHEN OTHERS.
*      gs_os1_fsd-N8_3_ORD_REP_PER_FROM = ''.
  ENDCASE.

*N9_3_ORD_REP_PER_TO
  CASE p_filling_rule.
    WHEN '3-AA'.
      gs_os1_fsd-n9_3_ord_rep_per_to = p_plrept.
    WHEN '3-PM'.
      gs_os1_fsd-n9_3_ord_rep_per_to = ls_afko-gltrp.
    WHEN OTHERS.
*      gs_os1_fsd-N9_3_ORD_REP_PER_TO = ''.
  ENDCASE.

*N10_3_ACT_REP_PER_FROM
  CASE p_filling_rule.
    WHEN '3-AA'.
      gs_os1_fsd-n10_3_act_rep_per_from = p_acrepf.
    WHEN '3-PM'.
      gs_os1_fsd-n10_3_act_rep_per_from = ls_afko-gstrp. "gstri
    WHEN OTHERS.
*      gs_os1_fsd-N10_3_ACT_REP_PER_FROM = ''.
  ENDCASE.

*N11_3_ACT_REP_PER_TO
  CASE p_filling_rule.
    WHEN '3-AA'.
      gs_os1_fsd-n11_3_act_rep_per_to = p_acrept.
    WHEN '3-PM'.
      gs_os1_fsd-n11_3_act_rep_per_to = ps_table6-dateasq.
    WHEN OTHERS.
*      gs_os1_fsd-N11_3_ACT_REP_PER_TO = ''.
  ENDCASE.

*N15_3_WORK_COMPLETED
* gs_os1_fsd-N15_3_WORK_COMPLETED = ''.

*N16_3_NOT_COMPLETED
* gs_os1_fsd-N16_3_NOT_COMPLETED = ''.

*N17_3_WORK_TYPE
  CASE p_filling_rule.
    WHEN '3-AA'.
      gs_os1_fsd-n17_3_work_type = p_wotype.
    WHEN '3-PM'.
      gs_os1_fsd-n17_3_work_type = text-rep.
    WHEN OTHERS.
*      gs_os1_fsd-N17_3_WORK_TYPE = ''.
  ENDCASE.


*N18_3_ASSET_CHANGES
* CLEAR gs_os1_fsd-N18_3_ASSET_CHANGES.

*N22N_DOC_NR
  CASE p_filling_rule.
    WHEN '6'.
      gs_os1_fsd-n22n_doc_nr = ps_table4-groupnum.
    WHEN '14'.
      gs_os1_fsd-n22n_doc_nr = ls_header-alnmb. "Message Number 0120061532 0002918855 2006
    WHEN OTHERS.
*      gs_os1_fsd-N22N_DOC_NR = ''.
  ENDCASE.


*N7N_DOC_DATE
  CASE p_filling_rule.
    WHEN '6'.
      gs_os1_fsd-n7n_doc_date = ps_table4-daccept.  "p_docdat.
    WHEN OTHERS.
*      gs_os1_fsd-N7N_DOC_DATE = ''.
  ENDCASE.

  DATA: ls_os6a_s1t TYPE j_3r_os6a_s1t,
        lv_empty TYPE char1.
*N8N_ACC_ORG_SUBDIV_NAME
  CASE p_filling_rule.
    WHEN '6'.
      " have to fill when all assets have been removed from card group with internal transfer
      LOOP AT gt_os6a_s1t INTO ls_os6a_s1t.
        IF ls_os6a_s1t-nt1n_ret_doc_date IS INITIAL.
          lv_empty = abap_true.
          EXIT.
        ENDIF.
      ENDLOOP.

      IF lv_empty = abap_false.
        gs_os1_fsd-n8n_acc_org_subdiv_name = ls_os6a_s1t-nt3n_struct_subdiv."OS6 4T3
      ENDIF.

    WHEN OTHERS.
*      gs_os1_fsd-N8N_ACC_ORG_SUBDIV_NAME = ''.
  ENDCASE.

*N11N_INV_CARD_RESP_POS
  CASE p_filling_rule.
    WHEN '6'.
      IF p_formna  ='OS6B'.
        gs_os1_fsd-n11n_inv_card_resp_pos = p_bopepo.
      ELSE.
        gs_os1_fsd-n11n_inv_card_resp_pos = p_capepo.
      ENDIF.

    WHEN OTHERS.
*      gs_os1_fsd-N11N_INV_CARD_RESP_POS = ''.
  ENDCASE.

*N12N_INV_CARD_RESP_NAME
  CASE p_filling_rule.
    WHEN '6'.
      IF p_formna  ='OS6B'.
        gs_os1_fsd-n12n_inv_card_resp_name = p_bopena.
      ELSE.
        gs_os1_fsd-n12n_inv_card_resp_name = p_capena.
      ENDIF.
    WHEN OTHERS.
*      gs_os1_fsd-N12N_INV_CARD_RESP_NAME = ''.
  ENDCASE.


*NH3_N_PER_START
  CASE p_filling_rule.
    WHEN '6'.
      gs_os1_fsd-nh3_n_per_start = so_repdt-low. " p_persta.
    WHEN OTHERS.
*      gs_os1_fsd-NH3_N_PER_START = ''.
  ENDCASE.

*NH4_N_PER_END
  CASE p_filling_rule.
    WHEN '6'.
      gs_os1_fsd-nh4_n_per_end = so_repdt-high. " p_perend.
    WHEN OTHERS.
*      gs_os1_fsd-NH4_N_PER_END = ''.
  ENDCASE.

*N13N_INV_CARD_RESP_PERNR
  CASE p_filling_rule.
    WHEN '6'.
      gs_os1_fsd-n13n_inv_card_resp_pernr = p_capenr.
    WHEN OTHERS.
*      gs_os1_fsd-N13N_INV_CARD_RESP_PERNR = ''.
  ENDCASE.

*N89_N1_ASS_ACC_PERS_POS
  CASE p_filling_rule.
    WHEN '6'.
      gs_os1_fsd-n89_n1_ass_acc_pers_pos = p_aspepo.
    WHEN OTHERS.
*      gs_os1_fsd-N89_N1_ASS_ACC_PERS_POS = ''.
  ENDCASE.

*N89_N1_ASS_ACC_PERS_NAME
  CASE p_filling_rule.
    WHEN '6'.
      gs_os1_fsd-n89_n1_ass_acc_pers_name = p_aspena.
    WHEN OTHERS.
*      gs_os1_fsd-N89_N1_ASS_ACC_PERS_NAME = ''.
  ENDCASE.

*N89_N1_ASS_ACC_PERS_PERNR
  CASE p_filling_rule.
    WHEN '6'.
      gs_os1_fsd-n89_n1_ass_acc_pers_pernr = p_aspenr.
    WHEN OTHERS.
*      gs_os1_fsd-N89_N1_ASS_ACC_PERS_PERNR = ''.
  ENDCASE.

*N13N_TAKING_BOOK_DATE
* gs_os1_fsd-N13N_TAKING_BOOK_DATE = ''.

*N32AN_MANUFACTURER_OKPO
* gs_os1_fsd-N32AN_MANUFACTURER_OKPO = ''.

*N33N_CARRIER_ORG
  CASE p_filling_rule.
    WHEN '14'.
      gs_os1_fsd-n33n_carrier_org = p_carorg.
    WHEN OTHERS.
*      gs_os1_fsd-N33N_CARRIER_ORG = ''.
  ENDCASE.

*N33AN_CARRIER_OKPO
* gs_os1_fsd-N33AN_CARRIER_OKPO = ''.

*N34N_CARRIER_BANK
* gs_os1_fsd-N34N_CARRIER_BANK = ''.

*N35N_VEHICLE_TYPE
  CASE p_filling_rule.
    WHEN '14'.
      gs_os1_fsd-n35n_vehicle_type = p_vehtyp.
    WHEN OTHERS.
*      gs_os1_fsd-N35N_VEHICLE_TYPE = ''.
  ENDCASE.

*N36N_VEHICLE_NUM
  CASE p_filling_rule.
    WHEN '14'.
      gs_os1_fsd-n36n_vehicle_num = p_vehnum.
    WHEN OTHERS.
*      gs_os1_fsd-N36N_VEHICLE_NUM = ''.
  ENDCASE.

*N31N_SEAL_PRESENCE
  CASE p_filling_rule.
    WHEN '14'.
      gs_os1_fsd-n31n_seal_presence = p_sealpr.
    WHEN OTHERS.
*      gs_os1_fsd-N31N_SEAL_PRESENCE = ''.
  ENDCASE.

*N37N_LADING_BILL_SERIES
  CASE p_filling_rule.
    WHEN '14'.
      gs_os1_fsd-n37n_lading_bill_series = p_lndser.
    WHEN OTHERS.
*      gs_os1_fsd-N37N_LADING_BILL_SERIES = ''.
  ENDCASE.

*N38N_LADING_BILL_NUMBER
  CASE p_filling_rule.
    WHEN '14'.
      gs_os1_fsd-n38n_lading_bill_number = p_lndnum.
    WHEN OTHERS.
*      gs_os1_fsd-N38N_LADING_BILL_NUMBER = ''.
  ENDCASE.

*N39N_LADING_BILL_DATE
  CASE p_filling_rule.
    WHEN '14'.
      gs_os1_fsd-n39n_lading_bill_date = p_lnddat.
    WHEN OTHERS.
*      gs_os1_fsd-N39N_LADING_BILL_DATE = ''.
  ENDCASE.


*N65N_PACK_DAMAGE
* gs_os1_fsd-N65N_PACK_DAMAGE = ''. "Always underline not damaged

*N67_PACK_DAMAGE_SPEC
* gs_os1_fsd-N67_PACK_DAMAGE_SPEC = ''.

*N66N_DELIV_COMPLETENESS
* gs_os1_fsd-N66N_DELIV_COMPLETENESS = ''. "Always underline complete

*N68N_DELIV_INCOMPLETNESS_SPEC
* gs_os1_fsd-N68N_DELIV_INCOMPLETNESS_SPEC = ''.

*N72N_COMM_MEMBER_1_DOC
  CASE p_filling_rule.
    WHEN '14'.
      gs_os1_fsd-n72n_comm_member_1_doc = p_codoc1.
    WHEN OTHERS.
*      gs_os1_fsd-N72N_COMM_MEMBER_1_DOC = ''.
  ENDCASE.


*N74N_COMM_MEMBER_2_DOC
  CASE p_filling_rule.
    WHEN '14'.
      gs_os1_fsd-n74n_comm_member_2_doc = p_codoc2.
    WHEN OTHERS.
*      gs_os1_fsd-N74N_COMM_MEMBER_1_DOC = ''.
  ENDCASE.


*N76N_COMM_MEMBER_3_DOC
  CASE p_filling_rule.
    WHEN '14'.
      gs_os1_fsd-n76n_comm_member_3_doc = p_codoc3.
    WHEN OTHERS.
*      gs_os1_fsd-N76N_COMM_MEMBER_1_DOC = ''.
  ENDCASE.

  IF p_m11fm EQ 'X'.
    gs_os1_fsd-n54_3_passport_nr = ls_anlav-kostl.
  ENDIF.

ENDFORM.                    " fill_os1_fsd

*&---------------------------------------------------------------------*
*&      Form  fill_os1_s1t
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_FILLING_RULE  text
*----------------------------------------------------------------------*
FORM fill_os1_s1t  USING    p_filling_rule TYPE char10
                            ps_table4      TYPE j_3r_invc_s4
                            ps_table5      TYPE j_3r_invc_s5
                            ps_table6      TYPE j_3r_invc_s6.

  DATA: ls_os1_s1t TYPE j_3r_os1_s1t.

*  DATA: ls_anlb TYPE anlb,
*        ls_anea TYPE anea,
*        ls_anep TYPE anep,
*        lt_anep TYPE TABLE OF anep,
  DATA: ls_anlav TYPE anlav.

*  DATA: lt_anea TYPE TABLE OF anea,
*        lt_anlb TYPE TABLE OF anlb.

  DATA: lt_langs TYPE umgtlangcp,
        ls_langs TYPE umgslangcp.

*  DATA: ls_t090nat TYPE t090nat.

  DATA:  ls_header LIKE LINE OF gt_header,
         ls_os6_settings TYPE j_3ros6_settings,
         ls_table1 LIKE LINE OF gt_table1,
         ls_table2 LIKE LINE OF gt_table2.

  DATA lv_afapl TYPE t093c-afapl.

  DATA: lv_datum      TYPE dats,
        lv_fact_life(10) TYPE n,
        lv_year_afabg(4)  TYPE n,  " year of Depreciation start date
        lv_month_afabg(2) TYPE n,  " month of Depreciation start date
        lv_end_date TYPE dats,
        lv_end_next TYPE dats.

  DATA: lv_start_trav TYPE stzahl,
        lv_rep_trav   TYPE stzahl,
        lv_year_from TYPE ggjahr,
        lv_year_to   TYPE ggjahr,
        lv_per_from  TYPE afper,
        lv_per_to    TYPE afper,
        lt_t090l     TYPE TABLE OF t090l,
        ls_t090l     TYPE t090l.

* Selection from fm tables and system database++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

* os6 header information
  READ TABLE gt_header
  INTO ls_header
  WITH KEY bukrs  = ps_table4-bukrs
            anln1 = ps_table4-anln1
            anln2 = ps_table4-anln2.

*OS6 table1 information
  READ TABLE gt_table1
  INTO ls_table1
  WITH KEY bukrs  = ps_table4-bukrs
            anln1 = ps_table4-anln1
            anln2 = ps_table4-anln2.

*OS6 table2 information
  READ TABLE gt_table2
  INTO ls_table2
  WITH KEY bukrs  = ps_table4-bukrs
            anln1 = ps_table4-anln1
            anln2 = ps_table4-anln2.

* os6 settings
  SELECT SINGLE *
    FROM j_3ros6_settings
    INTO ls_os6_settings
    WHERE keyset = p_keyset.

* asset information
*  READ TABLE gt_anlav
*  INTO ls_anlav
*  with key bukrs = ps_table4-bukrs
*           anln1 = ps_table4-anln1
*           anln2 = ps_table4-anln2.
*SORT gt_anlav BY bukrs anln1 anln2 bdatu.
  LOOP AT gt_anlav
    INTO ls_anlav
    WHERE bukrs = ps_table4-bukrs AND
                 anln1 = ps_table4-anln1 AND
                 anln2 = ps_table4-anln2 AND
                 bdatu > ps_table4-daccept AND
                 adatu < ps_table4-daccept.
  ENDLOOP.

*read language vector
  CALL FUNCTION 'UMG_READ_LANG_INFO'
    IMPORTING
      ex_langcp_itab        = lt_langs
    EXCEPTIONS
      no_codepage_avaiable  = 1
      empty_language_vector = 2
      OTHERS                = 3.

  IF sy-subrc <> 0.
    PERFORM message_add USING sy-msgty sy-msgno sy-msgid sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

* Company codes in Asset Accounting
  SELECT SINGLE afapl
    FROM t093c
    INTO lv_afapl
    WHERE bukrs = ps_table4-bukrs.

*asset proportional information
*  CALL FUNCTION 'ANEA_READ_MULTIPLE_GJAHR_ALL'
*    EXPORTING
*      i_anln1          = ps_table4-anln1
*      i_anln2          = ps_table4-anln2
**   I_BISGJAHR       = '0000'
*      i_bukrs          = ps_table4-bukrs
*      i_gjahr          = ps_table4-gjahr
*    TABLES
*      t_anea           = lt_anea
*      t_anlb           = lt_anlb
*   EXCEPTIONS
*     not_found        = 1
*     OTHERS           = 2.
*
*  IF sy-subrc <> 0.
*    PERFORM message_add USING sy-msgty sy-msgno sy-msgid sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ELSE.
*    SORT lt_anlb DESCENDING BY bdatu.
*    LOOP AT lt_anlb INTO ls_anlb.
*      IF ls_anlb-bdatu < gv_repdt AND ls_anlb-afabe = '01'.
*        EXIT.
*      ENDIF.
*    ENDLOOP.
*
*    LOOP AT lt_anea INTO ls_anea.
*      IF ls_anea-lnran = ps_table4-lnran AND ls_anea-afabe = '01'.
*        EXIT.
*      ENDIF.
*    ENDLOOP.
*
*  ENDIF.

** Asset Line Items information
*  SELECT *
*    FROM anep
*    INTO TABLE lt_anep
*    WHERE bukrs = ps_table4-bukrs AND
*          anln1 = ps_table4-anln1 AND
*          anln2 = ps_table4-anln2 AND
*          gjahr = ps_table4-gjahr AND
*          lnran = ps_table4-lnran AND
*          afabe = '01'.
*
*  LOOP AT lt_anep INTO ls_anep.
*  ENDLOOP.

* Fill content fields with value ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*N50_PROD_YEAR
  CASE p_filling_rule.
    WHEN  '4'.
*      ls_os1_s1t-N50_PROD_YEAR = ''.
    WHEN '1-A' OR '1-R'.
      IF p_filling_rule = '1-R' OR ls_anlav-xafabch = abap_true.
        IF ls_anlav-ehwzu IS NOT INITIAL.
          CALL FUNCTION 'DATE_TO_PERIOD_CONVERT'
            EXPORTING
              i_date               = ls_anlav-ehwzu
*             I_MONMIT             = 00
                  i_periv              = gs_t001-periv
                IMPORTING
*             E_BUPER              =
              e_gjahr              = ls_os1_s1t-n50_prod_year
           EXCEPTIONS
             input_false          = 1
             t009_notfound        = 2
             t009b_notfound       = 3
             OTHERS               = 4.

          IF sy-subrc <> 0.
            PERFORM message_add USING sy-msgty sy-msgno sy-msgid sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
          ENDIF.
        ENDIF.
      ENDIF.
    WHEN OTHERS.
*      ls_os1_s1t-N50_PROD_YEAR = ''.
  ENDCASE.


*N51_STARTUP_DATE
  CASE p_filling_rule.
    WHEN '1-A'.
      IF ls_anlav-xafabch = abap_true.
        ls_os1_s1t-n51_startup_date = ls_header-albuydate.
      ELSE.
        ls_os1_s1t-n51_startup_date = ''.
      ENDIF.
    WHEN '1-R' OR '4' OR '2-TD' OR '2-IT'.
      ls_os1_s1t-n51_startup_date = ls_header-albuydate. "OS6 header-albuydate or anla-zugdt
    WHEN OTHERS.
*      ls_os1_s1t-N51_STARTUP_DATE = ''.
  ENDCASE.

*N52_OVERHAUL_DATE
  CASE p_filling_rule.
    WHEN '1-A'.
      ls_os1_s1t-n52_overhaul_date = ''.
    WHEN '1-R' OR '4'.
      ls_os1_s1t-n52_overhaul_date = ls_table1-dlrep. "OS6 TABLE1-DLREP
    WHEN OTHERS.
*      ls_os1_s1t-N52_OVERHAUL_DATE = ''.
  ENDCASE.

*N53_ACT_USE_LIFE
  CASE p_filling_rule.
    WHEN '1-A'.
*      ls_os1_s1t-N53_ACT_USE_LIFE_YEAR = ''.
*      ls_os1_s1t-N53_ACT_USE_LIFE_PER = ''.
    WHEN '1-R' OR '4'.
      ls_os1_s1t-n53_act_use_life_year = ls_table1-fdjar. "OS6 TABLE1-FDJAR
      ls_os1_s1t-n53_act_use_life_per = ls_table1-fdper. "OS6 TABLE1-FDPER
    WHEN '3-AA' OR '3-PM'.
      IF p_plrept IS NOT INITIAL.
        lv_datum = p_plrept.
      ELSE.
        lv_datum = p_orddt. "p_repdt.
      ENDIF.

      IF ls_header-alretdate IS INITIAL OR ls_header-alretdate >= lv_datum.
        lv_end_date = lv_datum.
      ELSE.
        lv_end_date =  ls_header-alretdate.
      ENDIF.

      lv_end_next = lv_end_date + 1.

      lv_year_afabg  = ls_header-afabg(4).
      lv_month_afabg = ls_header-afabg+4(2).

      lv_fact_life = ( 12 * ( lv_end_date(4) - lv_year_afabg ) +
                       lv_end_date+4(2) - lv_month_afabg ).

      IF lv_fact_life < 0.
        lv_fact_life = 0.
      ENDIF.

      IF lv_end_next+6(2) = '01'.
        lv_fact_life =  lv_fact_life + 1.
      ENDIF.

      ls_os1_s1t-n53_act_use_life_year = lv_fact_life DIV 12.
      ls_os1_s1t-n53_act_use_life_per  = lv_fact_life MOD 12.

    WHEN OTHERS.
*      ls_os1_s1t-N53_ACT_USE_LIFE_YEAR = ''.
*      ls_os1_s1t-N53_ACT_USE_LIFE_PER = ''.
  ENDCASE.

*N54_USE_LIFE
  CASE p_filling_rule.
    WHEN '1-A'.
      IF ls_anlav-xafabch = abap_true.
        ls_os1_s1t-n54_use_life_year = ls_table2-ndjar. "OS6 TABLE1-FDJAR
        ls_os1_s1t-n54_use_life_per = ls_table2-ndper. "OS6 TABLE1-FDPER
      ENDIF.
*      ls_os1_s1t-N54_USE_LIFE_YEAR = ''.
*      ls_os1_s1t-N54_USE_LIFE_PER = ''.
    WHEN '1-R'.
      ls_os1_s1t-n54_use_life_year = ls_table2-ndjar. "OS6 HTABLE2-NDJAR
      ls_os1_s1t-n54_use_life_per = ls_table2-ndper.  "OS6 HTABLE2-NDPER
    WHEN OTHERS.
*      ls_os1_s1t-N54_USE_LIFE_YEAR = ''.
*      ls_os1_s1t-N54_USE_LIFE_PER = ''.
  ENDCASE.

*N55_DPR_AMNT
  CASE p_filling_rule.
    WHEN '1-A'.
*      ls_os1_s1t-N55_DPR_AMNT = ''.
    WHEN '1-R' OR '4'.
*        ls_os1_s1t-n55_dpr_amnt = ls_anea-nafav + ls_anea-safav + ls_anea-aafav + ls_anea-aufnv +
*                                  ls_anea-nafal + ls_anea-safal + ls_anea-aafal + ls_anea-aufnv.    "ps_table4-depreciation
*       ls_os1_s1t-n55_dpr_amnt = ps_table4-depreciation. " Changed by the internal message Message Number 0120061532 0002824638 2006

      ls_os1_s1t-n55_dpr_amnt = ps_table4-depreciation.        "Note 1067392
*       IF ps_table4-depreciation < 0.
*         ls_os1_s1t-n55_dpr_amnt = -1 * ps_table4-depreciation .
*       ENDIF.

      ls_os1_s1t-n55_dpr_amnt = ABS( ls_os1_s1t-n55_dpr_amnt ).

    WHEN OTHERS.
*      ls_os1_s1t-N55_DPR_AMNT = ''.
  ENDCASE.

*N56_NET_VALUE
  CASE p_filling_rule.
    WHEN '1-A'.
*      ls_os1_s1t-N56_NET_VALUE = ''.
    WHEN '1-R' OR '4'.
*      IF ls_anep-anbtr >= 0.
*        ls_os1_s1t-n56_net_value = ls_anep-anbtr - ls_os1_s1t-n55_dpr_amnt. "OS6 TABLE1-NBVALUE
*      ELSE.
*        ls_os1_s1t-n56_net_value = ( -1 * ls_anep-anbtr ) - ls_os1_s1t-n55_dpr_amnt. "OS6 TABLE1-NBVALUE
*      ENDIF.
      IF ps_table4-nbvalue >= 0.
        ls_os1_s1t-n56_net_value = ps_table4-nbvalue.
      ELSE.
        ls_os1_s1t-n56_net_value = ( -1 * ps_table4-nbvalue ).
      ENDIF.
    WHEN '3-AA' OR '3-PM'.
      CASE p_filling_rule.
        WHEN '3-AA'.
*         net book value as of date before FI document
          ls_os1_s1t-n56_net_value = ps_table5-nbvalue.
        WHEN '3-PM'.
*         net value on date of "planned repair period to" ?
          ls_os1_s1t-n56_net_value = ps_table6-nbvalue_old.
        WHEN OTHERS.
*      ls_os1_s1t-N56_NET_VALUE = ''.
      ENDCASE.
  ENDCASE.

*N57_ACQ_VALUE
  CASE p_filling_rule.
    WHEN '4'.
      ls_os1_s1t-n57_acq_value = ''.
    WHEN '1-A' .
      IF ls_anlav-xafabch = abap_true.
        ls_os1_s1t-n57_acq_value = ps_table4-anbtr.
      ELSE.
        ls_os1_s1t-n57_acq_value = ''.
      ENDIF.
    WHEN '1-R'.
*        ls_os1_s1t-n57_acq_value = ps_table4-anbtr. "ps_table4-nbvalue + ps_table4-depreciation.
      ls_os1_s1t-n57_acq_value = ABS( ps_table4-erlbt ). "ps_table4-nbvalue + ps_table4-depreciation. "Note 1248103
    WHEN '2-TD' OR '2-IT'.
      IF ps_table4-nbvalue >= 0.
        ls_os1_s1t-n57_acq_value = ps_table4-nbvalue.
      ELSE.
        ls_os1_s1t-n57_acq_value = ( -1 * ps_table4-nbvalue ).
      ENDIF.
    WHEN OTHERS.
*      ls_os1_s1t-N57_ACQ_VALUE = ''.
  ENDCASE.

*N58_ORIG_COSTS
  CASE p_filling_rule.
    WHEN '1-A' .

      DATA: ls_table4 TYPE j_3r_invc_s4.
      ls_os1_s1t-n58_orig_costs = 0.

      "Changed according to IntMsg:0120061532 0002736432 2006 to SELECT SUM(anbtr) from ps_table4-anbtr.
      LOOP AT gt_table4
        INTO ls_table4
        WHERE daccept = ps_table4-daccept AND
              anlu1 = ps_table4-anlu1     AND
              anlu2 = ps_table4-anlu2     AND
              ( gitcol = '1' OR gitcol = '3' ).

        ls_os1_s1t-n58_orig_costs = ls_os1_s1t-n58_orig_costs + ls_table4-anbtr.

      ENDLOOP.

      ls_os1_s1t-n58_orig_costs = ABS( ls_os1_s1t-n58_orig_costs ).

    WHEN OTHERS.
*      ls_os1_s1t-N58_ORIG_COSTS = ''.
  ENDCASE.

*N59_PER_USE_LIFE_YEAR
  CASE p_filling_rule.
    WHEN '1-A' .
      ls_os1_s1t-n59_per_use_life_year =  ls_table2-ndjar.
    WHEN OTHERS.
*      ls_os1_s1t-N59_PER_USE_LIFE_PER = ''.
  ENDCASE.

*N59_PER_USE_LIFE_PER
  CASE p_filling_rule.
    WHEN '1-A' .
      ls_os1_s1t-n59_per_use_life_per =  ls_table2-ndper.
    WHEN OTHERS.
*      ls_os1_s1t-N59_PER_USE_LIFE_PER = ''.
  ENDCASE.



*N60_DPR_RULE_NAME
  CASE p_filling_rule.
    WHEN '1-A' .

*      IF lt_langs IS NOT INITIAL.
*        LOOP AT lt_langs INTO ls_langs.
*
*          SELECT  SINGLE *
*            FROM t090nat
*            INTO ls_t090nat
*            WHERE spras = ls_langs-langu AND
*                  afapl = lv_afapl AND
*                  afasl = ls_anlb-afasl.
*
*          IF sy-subrc = 0.
*            ls_os1_s1t-n60_dpr_rule_name = ls_t090nat-afatxt.
*            EXIT.
*          ENDIF.
*        ENDLOOP.
*      ENDIF.
      ls_os1_s1t-n60_dpr_rule_name = ls_table2-afatxt.

    WHEN OTHERS.
*      ls_os1_s1t-N60_DPR_RULE_NAME = ''.
  ENDCASE.

*N61_DPR_RATE

  CASE p_filling_rule.
    WHEN '1-A' .
      ls_os1_s1t-n61_dpr_rate = ls_table2-rate.
*    DATA ls_t090 TYPE T090.
*    SELECT SINGLE *
*      FROM T090
*      INTO ls_t090
*      WHERE AFARSL = ____.
*    ls_os1_s1t-N61_DPR_RATE = ls_t090-maxprz.
*
*    IF ls_os1_s1t-N61_DPR_RATE > 0.
*       ls_os1_s1t-N61_DPR_RATE = 12 / ls_os1_s1t-N61_DPR_RATE * 100 .
*    ENDIF.
    WHEN OTHERS.
*      ls_os1_s1t-N61_DPR_RATE = ''.
  ENDCASE.

*N50a_CONSTR_START_DATE
  CASE p_filling_rule.
    WHEN '1-A'.
      ls_os1_s1t-n50a_constr_start_date = ''.
    WHEN OTHERS.
*      ls_os1_s1t-N50a_CONSTR_START_DATE = ''.
  ENDCASE.

*N52a_LAST_RECONSTR_DATE
  CASE p_filling_rule.
    WHEN '1-R'.
*        ls_os1_s1t-N52a_LAST_RECONSTR_DATE = ''.
    WHEN '1-A'.
      ls_os1_s1t-n52a_last_reconstr_date = ps_table5-dateasq.
    WHEN OTHERS.
*      ls_os1_s1t-N52a_LAST_RECONSTR_DATE = ''.
  ENDCASE.


*N49B_SEQ_NR
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '2-TD' OR '2-IT' OR '3-AA' OR '3-PM'.
      DESCRIBE TABLE gt_os1_s1t LINES ls_os1_s1t-n49b_seq_nr.
      ls_os1_s1t-n49b_seq_nr = ls_os1_s1t-n49b_seq_nr + 1.
    WHEN OTHERS.
*      ls_os1_s1t-N49B_SEQ_NR = ''.
  ENDCASE.

*N30_ASSET_DSCR
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4'.
      ls_os1_s1t-n30_asset_dscr = ls_anlav-txt50.
*     ls_os1_s1t-N30_ASSET_DSCR = ls_header-alasname. "OS6 H3
    WHEN '2-IT' OR '2-TD' OR '3-PM' OR '3-AA'.
      CONCATENATE ls_header-alasname                        "OS6 H3
                  ls_header-almodel                         "OS6 H4
            INTO ls_os1_s1t-n30_asset_dscr
            SEPARATED BY space.
    WHEN OTHERS.
*    ls_os1_s1t-N30_ASSET_DSCR = ''.
  ENDCASE.

*N17_DPR_GROUP
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '6' OR '14'.
      ls_os1_s1t-n17_dpr_group = ls_header-alamgr.
*      ls_os1_s1t-N17_DPR_GROUP = ls_GLOFAAASSETDATA-GLO_RUS_DEPGR.
    WHEN OTHERS.
*      ls_os1_s1t-N17_DPR_GROUP = ''.
  ENDCASE.

*N18_INVENTORY_NR
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R' OR '4' OR '2-IT' OR '2-TD' OR '3-PM' OR '3-AA'.
      ls_os1_s1t-n18_inventory_nr = ls_header-alnmb3. " gs_anlav-(j_3r_os6_settings fields)
    WHEN OTHERS.
*      ls_os1_s1t-N18_INVENTORY_NR = ''.
  ENDCASE.

*N19_SERIAL_NR
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R'.
      ls_os1_s1t-n19_serial_nr = ls_anlav-sernr.
    WHEN '3-PM' OR '3-AA' OR '4' OR '14'.
      ls_os1_s1t-n19_serial_nr = ls_header-alsern.          "OS6-H12
    WHEN OTHERS.
*    ls_os1_s1t-N19_SERIAL_NR = ''.
  ENDCASE.

*N57B_ACQ_VAL_PER_UNIT
  CASE p_filling_rule.
    WHEN '1-A'.
*      ls_os1_s1t-N57B_ACQ_VAL_PER_UNIT = ''.
    WHEN '1-R' OR '2-TD' OR '2-IT'.
      IF ls_anlav-menge > 0.
        ls_os1_s1t-n57b_acq_val_per_unit = ls_os1_s1t-n57_acq_value / ls_anlav-menge.
      ELSE.
        ls_os1_s1t-n57b_acq_val_per_unit = ls_os1_s1t-n57_acq_value.
      ENDIF.
    WHEN OTHERS.
*    ls_os1_s1t-N57B_ACQ_VAL_PER_UNIT = ''.
  ENDCASE.

*N58B_COOWN_RIGHT_SHARE
  CASE p_filling_rule.
    WHEN '1-A' OR '1-R'.
      ls_os1_s1t-n58b_coown_right_share = ''.
    WHEN OTHERS.
*      ls_os1_s1t-N58B_COOWN_RIGHT_SHARE = ''.
  ENDCASE.

*N50_4_BALANCE_VAL
  CASE p_filling_rule.
    WHEN '4'.
      IF ps_table4-anbtr >= 0.
        ls_os1_s1t-n50_4_balance_val = ps_table4-anbtr.
      ELSE.
        ls_os1_s1t-n50_4_balance_val = ( -1 * ps_table4-anbtr ).
      ENDIF.
    WHEN OTHERS.
*      ls_os1_s1t-N50_4_BALANCE_VAL = ''.
  ENDCASE.

*N50_4A_PROD_YEAR
  CASE p_filling_rule.
    WHEN '4'.
      IF ls_header-glo_rus_ttx_mnfd IS NOT INITIAL.
        CALL FUNCTION 'DATE_TO_PERIOD_CONVERT'
          EXPORTING
            i_date               = ls_header-glo_rus_ttx_mnfd
*           I_MONMIT             = 00
            i_periv              = gs_t001-periv
          IMPORTING
*           E_BUPER              =
            e_gjahr              = ls_os1_s1t-n50_4a_prod_year
          EXCEPTIONS
            input_false          = 1
            t009_notfound        = 2
            t009b_notfound       = 3
            OTHERS               = 4.

        IF sy-subrc <> 0.
          PERFORM message_add USING sy-msgty sy-msgno sy-msgid sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.
      ENDIF.

    WHEN OTHERS.
*      ls_os1_s1t-N50_4A_PROD_YEAR = ''.
  ENDCASE.

*N51_4A_START_DATE
  CASE p_filling_rule.
    WHEN '4'.
      ls_os1_s1t-n51_4a_start_date = ls_anlav-zugdt.
    WHEN OTHERS.
*      ls_os1_s1t-N51_4A_START_DATE = ''.
  ENDCASE.

*N52_4A1_DEREG
  CASE p_filling_rule.
    WHEN '4'.
      ls_os1_s1t-n52_4a1_dereg = ls_header-glo_rus_ttx_rmvd.
    WHEN OTHERS.
*      ls_os1_s1t-N52_4A1_DEREG = ''.
  ENDCASE.

*  determination of year_to and per_to for determining the traveled kilometrs
  CALL FUNCTION 'DATE_TO_PERIOD_CONVERT'
    EXPORTING
      i_date               = p_repdt
*     I_MONMIT             = 00
      i_periv              = gs_t001-periv
    IMPORTING
      e_buper              = lv_per_to
      e_gjahr              = lv_year_to
    EXCEPTIONS
      input_false          = 1
      t009_notfound        = 2
      t009b_notfound       = 3
      OTHERS               = 4.

  IF sy-subrc <> 0.
    PERFORM message_add USING sy-msgty sy-msgno sy-msgid sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*N52_4A2_START_TRAV
  CASE p_filling_rule.
    WHEN '4'.
      IF ls_table1-start_trav_km IS NOT INITIAL.
        ls_os1_s1t-n52_4a2_start_trav = ls_table1-start_trav_km.
      ELSE.

        CALL FUNCTION 'DATE_TO_PERIOD_CONVERT'
          EXPORTING
            i_date               = ls_os1_s1t-n51_4a_start_date
*           I_MONMIT             = 00
            i_periv              = gs_t001-periv
         IMPORTING
           e_buper              = lv_per_from
           e_gjahr              = lv_year_from
         EXCEPTIONS
           input_false          = 1
           t009_notfound        = 2
           t009b_notfound       = 3
           OTHERS               = 4.

        IF sy-subrc <> 0.
          PERFORM message_add USING sy-msgty sy-msgno sy-msgid sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.

        SELECT * FROM t090l
                 INTO TABLE lt_t090l
                 WHERE bukrs  = ls_header-bukrs AND
                       afasl  = ls_table2-afasl.

        LOOP AT lt_t090l INTO ls_t090l.
          IF ( ls_t090l-ggjahr = lv_year_from AND ls_t090l-afper >= lv_per_from ) OR
             ( ls_t090l-ggjahr = lv_year_to   AND ls_t090l-afper <= lv_per_to ) OR
             ( ls_t090l-ggjahr > lv_year_from AND ls_t090l-ggjahr < lv_year_to ).

            lv_start_trav = lv_start_trav + ls_t090l-stzahl.
          ENDIF.
        ENDLOOP.

*          IF ls_t090l-ggjahr >= lv_year_from AND ls_t090l-ggjahr <= lv_year_to.
*            IF ls_t090l-ggjahr = lv_year_from AND ls_t090l-afper >= lv_per_from.
*              lv_start_trav = lv_start_trav + ls_t090l-stzahl.
*            ELSEIF ls_t090l-ggjahr =  lv_year_to AND ls_t090l-afper <= lv_per_to.
*              lv_start_trav = lv_start_trav + ls_t090l-stzahl.
*            ELSE.
*              lv_start_trav = lv_start_trav + ls_t090l-stzahl.
*            ENDIF.

        ls_os1_s1t-n52_4a2_start_trav = lv_start_trav.
      ENDIF.
  ENDCASE.

  CLEAR: lt_t090l, ls_t090l.

*N52_4A3_REP_TRAV
  CASE p_filling_rule.
    WHEN '4'.
      IF ls_table1-rep_trav_km IS NOT INITIAL.
        ls_os1_s1t-n52_4a3_rep_trav = ls_table1-rep_trav_km.
      ELSEIF ls_os1_s1t-n52_overhaul_date IS NOT INITIAL.

        CALL FUNCTION 'DATE_TO_PERIOD_CONVERT'
         EXPORTING
           i_date               = ls_os1_s1t-n52_overhaul_date
*           I_MONMIT             = 00
           i_periv              = gs_t001-periv
        IMPORTING
          e_buper              = lv_per_from
          e_gjahr              = lv_year_from
        EXCEPTIONS
          input_false          = 1
          t009_notfound        = 2
          t009b_notfound       = 3
          OTHERS               = 4.

        IF sy-subrc <> 0.
          PERFORM message_add USING sy-msgty sy-msgno sy-msgid sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.

        SELECT * FROM t090l
                 INTO TABLE lt_t090l
                 WHERE bukrs  = ls_header-bukrs AND
                       afasl  = ls_table2-afasl. "ls_anlb-afasl.

        LOOP AT lt_t090l INTO ls_t090l.
          IF ( ls_t090l-ggjahr = lv_year_from AND ls_t090l-afper >= lv_per_from ) OR
             ( ls_t090l-ggjahr = lv_year_to   AND ls_t090l-afper <= lv_per_to ) OR
             ( ls_t090l-ggjahr > lv_year_from AND ls_t090l-ggjahr < lv_year_to ).

            lv_rep_trav = lv_rep_trav + ls_t090l-stzahl.
          ENDIF.
        ENDLOOP.

        ls_os1_s1t-n52_4a3_rep_trav = lv_rep_trav.
      ENDIF.
  ENDCASE.

*N14_2_INT_TRANSF_QUANT
  CASE p_filling_rule.
    WHEN '2-TD' OR '2-IT'.
      IF ls_anlav-menge > 0.
        ls_os1_s1t-n14_2_int_transf_quant = ls_anlav-menge.
      ELSE.
        ls_os1_s1t-n14_2_int_transf_quant = 1.
      ENDIF.
    WHEN OTHERS.
*      ls_os1_s1t-N14_2_INT_TRANSF_QUANT = ''.
  ENDCASE.

*N54_3_PASSPORT_NR
  CASE p_filling_rule.
    WHEN '3-AA' OR '3-PM'.
      ls_os1_s1t-n54_3_passport_nr = ls_header-alpasp.      " OS6 H11
    WHEN OTHERS.
*      ls_os1_s1t-N54_3_PASSPORT_NR = ''.
  ENDCASE.

  APPEND ls_os1_s1t TO gt_os1_s1t.

ENDFORM.                    " fill_os1_s1t

*&---------------------------------------------------------------------*
*&      Form make_asset_number
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ICHEADER_ALNMB1  text
*      -->P_ICHEADER_ALNMB2  text
*      <--P_TB_HEADER_ALNMB3  text
*----------------------------------------------------------------------*
* inventory number concatenate
FORM make_asset_number USING    p_alnmb1
                             p_alnmb2
                             p_invnr
                             p_rules
                     CHANGING v_invnr.
  DATA:  pn2 TYPE anln2.
  IF p_rules = 'ASSNUM'.
    pn2 = p_alnmb2.
    SHIFT pn2 LEFT DELETING LEADING '0'.
    IF pn2 IS INITIAL.
      pn2 = '0'.
    ENDIF.
    CONCATENATE p_alnmb1 '-' pn2 INTO v_invnr.
  ELSE.
    v_invnr = p_invnr.
  ENDIF.
  SHIFT v_invnr LEFT DELETING LEADING '0'.
ENDFORM.                    " make_asset_number
* Get bank data for Company code,  Vendor and Customer
FORM get_all_bank_data
              USING  p_bukrs p_lifnr p_kunnr
              CHANGING bukrs_bankdata
                       customer_bankdata
                       vendor_bankdata .
  DATA language TYPE sy-langu.
  DATA l_lang TYPE sy-langu.
  STATICS: o_bukrs LIKE t001-bukrs,
          o_kunnr LIKE bseg-kunnr,
          o_lifnr LIKE bseg-lifnr,
          o_bukrs_bankdata(140),
          o_customer_bankdata(140),
          o_vendor_bankdata(140).

  SELECT SINGLE spras FROM t001 INTO language
      WHERE bukrs = p_bukrs.
  SELECT SINGLE spras FROM t002c INTO language
     WHERE spras = language
       AND lainst = 'X'.
  IF sy-subrc EQ 0.
    l_lang = sy-langu.
    SET LOCALE LANGUAGE language.
  ELSE.
    CLEAR l_lang .
  ENDIF.
  DATA lv_dummy_bank TYPE j_3rf_bank_data.
* Home bank for company code
  IF o_bukrs NE p_bukrs.
    PERFORM home_bank_data(j_3rv_deliv_pdf)
                USING
                   p_bukrs
                CHANGING
                   bukrs_bankdata
                   lv_dummy_bank.

    o_bukrs = p_bukrs.
    o_bukrs_bankdata = bukrs_bankdata.
  ELSE.
    bukrs_bankdata = o_bukrs_bankdata.
  ENDIF.

  IF o_lifnr NE p_lifnr.
*   Vendor bank data
    PERFORM vend_bank_data(j_3rvttn_pdf)
                USING
                   p_lifnr
                CHANGING
                   vendor_bankdata.
    o_lifnr = p_lifnr.
    o_vendor_bankdata = vendor_bankdata.
  ELSE.
    vendor_bankdata = o_vendor_bankdata.
  ENDIF.

  IF o_kunnr NE p_kunnr.
*   Customer bank data
    PERFORM partn_bank_data(j_3rv_deliv_pdf)
                USING
                   p_kunnr
                CHANGING
                   customer_bankdata
                   lv_dummy_bank..
    o_kunnr = p_kunnr.
    o_customer_bankdata = customer_bankdata.
  ELSE.
    customer_bankdata = o_customer_bankdata.
  ENDIF.

  IF l_lang IS NOT INITIAL.
    SET LOCALE LANGUAGE l_lang.
  ENDIF.
ENDFORM.                    "get_all_bank_data
