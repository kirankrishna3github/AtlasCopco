*&---------------------------------------------------------------------*
*&  Include           J_3R_OS_F02
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  fill_content
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM fill_content .

*  TABLES V_TABWT_01.

* CONTENT DATA STRUCTURE>
* gs_formname_fsd - form single data of the form content
* gs_formname_snd - form single data of the section n
* gs_formname_snt - form table data of the section n
* gs_formname - individual output content
* gt_formname - table of output contents

  CLEAR: gs_os1_fsd, gt_os1_s1t. "extend clear action for every component !
  CLEAR: gt_os1_s2t, gt_os1_s3t, gs_os1b_s1d, gs_os3_s2d, gt_os3_s2t.
  CLEAR: gs_os4_s3d, gt_os4_s3t, gt_os4a_s3t, gt_os4b_s1t, gs_os4b_s2d.
  CLEAR: gt_os6a_s1t, gt_os14_s1t, gt_os14_s2t.

  CLEAR: gs_os1, gt_os1, gs_os1a, gt_os1a, gs_os1b, gt_os1b.
  CLEAR: gs_os4, gt_os4, gs_os4a, gt_os4a, gs_os4b, gt_os4b.
  CLEAR: gs_os2, gt_os2, gs_os6a, gt_os6a, gs_os6b, gt_os6b.
  CLEAR: gs_os3, gt_os3, gs_os14, gt_os14.

  CASE p_formna. "Form specific content filling

    WHEN 'OS1' OR 'OS1A' OR 'OS1B' OR 'OS4' OR 'OS4A' OR 'OS4B'.
      PERFORM fill_content_os_1_4_document.

    WHEN 'OS2'.
      PERFORM fill_content_os_2_document.

    WHEN 'OS3'.
      PERFORM fill_content_os_3_document.

* 12/05/2006: The program was enhanced to be able to generate OS-6 printout
    WHEN 'OS6'.
      PERFORM fill_content_os_6_document.

    WHEN 'OS6A'.
      PERFORM fill_content_os_6a_document.

    WHEN 'OS6B'.
      PERFORM fill_content_os_6b_document.

    WHEN 'OS14'.
      PERFORM fill_content_os_14_document.

*  when c_os1.
* perform fill_os1.
* ...
    WHEN OTHERS.
* bevitel ellen#rz¨¦s?
  ENDCASE.



ENDFORM.                    " fill_content



*&---------------------------------------------------------------------*
*&      Form  create_new_os1_content
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_new_os1_content .

  MOVE-CORRESPONDING gs_os1_fsd TO gs_os1-fsd.
  MOVE gt_os1_s1t TO gs_os1-s1t.
  MOVE gt_os1_s2t TO gs_os1-s2t.

  APPEND gs_os1 TO gt_os1.
  CLEAR: gs_os1, gt_os1_s1t, gt_os1_s2t, gs_os1_fsd.


ENDFORM.                    " create_new_os1_content

*&---------------------------------------------------------------------*
*&      Form  create_new_os1a_content
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_new_os1a_content .

  MOVE-CORRESPONDING gs_os1_fsd TO gs_os1a-fsd.
  MOVE gt_os1_s1t TO gs_os1a-s1t.
  MOVE gt_os1_s2t TO gs_os1a-s2t.
  MOVE gt_os1_s3t TO gs_os1a-s3t.

  APPEND gs_os1a TO gt_os1a.
  CLEAR: gs_os1a, gt_os1_s1t, gt_os1_s2t, gt_os1_s3t, gs_os1_fsd.


ENDFORM.                    " create_new_os1a_content
*&---------------------------------------------------------------------*
*&      Form  create_new_os1b_content
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_new_os1b_content .

  MOVE-CORRESPONDING gs_os1_fsd TO gs_os1b-fsd.
  MOVE-CORRESPONDING gs_os1b_s1d TO gs_os1b-s1d.

  MOVE gt_os1_s1t TO gs_os1b-s1t.
  MOVE gt_os1_s2t TO gs_os1b-s2t.

  APPEND gs_os1b TO gt_os1b.
  CLEAR: gs_os1b, gt_os1_s1t, gt_os1_s2t, gs_os1b_s1d, gs_os1_fsd.

ENDFORM.                    " create_new_os1b_content
*&---------------------------------------------------------------------*
*&      Form  create_new_os4_content
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_new_os4_content .

  MOVE-CORRESPONDING gs_os1_fsd TO gs_os4-fsd.
  MOVE-CORRESPONDING gs_os4_s3d TO gs_os4-s3d.

  MOVE gt_os1_s1t TO gs_os4-s1t.
  MOVE gt_os1_s2t TO gs_os4-s2t.
  MOVE gt_os4_s3t TO gs_os4-s3t.

  APPEND gs_os4 TO gt_os4.
  CLEAR: gs_os4, gt_os4_s3t, gt_os1_s2t, gt_os1_s1t, gs_os4_s3d, gs_os1_fsd.

ENDFORM.                    " create_new_os4_content
*&---------------------------------------------------------------------*
*&      Form  create_new_os4a_content
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_new_os4a_content .

  MOVE-CORRESPONDING gs_os1_fsd TO gs_os4a-fsd.
  MOVE-CORRESPONDING gs_os4_s3d TO gs_os4a-s4d. "os4-s3d = os4a-s4d. the same information appears, in an other section, not a mistake

  MOVE gt_os1_s1t TO gs_os4a-s1t.
  MOVE gt_os1_s2t TO gs_os4a-s2t.
  MOVE gt_os4a_s3t TO gs_os4a-s3t.
  MOVE gt_os4_s3t TO gs_os4a-s4t.

  APPEND gs_os4a TO gt_os4a.
  CLEAR: gs_os4a, gt_os4_s3t, gt_os4a_s3t, gt_os1_s2t, gt_os1_s1t, gs_os4_s3d, gs_os1_fsd.

ENDFORM.                    " create_new_os4a_content
*&---------------------------------------------------------------------*
*&      Form  create_new_os4b_content
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_new_os4b_content .

  MOVE-CORRESPONDING gs_os1_fsd TO gs_os4b-fsd.
  MOVE-CORRESPONDING gs_os4b_s2d TO gs_os4b-s2d.

  MOVE gt_os4b_s1t TO gs_os4b-s1t.
  MOVE gt_os4_s3t TO gs_os4b-s2t.

  APPEND gs_os4b TO gt_os4b.
  CLEAR: gs_os4b, gt_os4_s3t, gt_os4b_s1t, gs_os4b_s2d, gs_os1_fsd.

ENDFORM.                    " create_new_os4b_content

**********************************************************************
* FORM    :  create_new_os2_content
* Created :  17.03.2006 10:34:18
**********************************************************************
FORM create_new_os2_content.

  MOVE-CORRESPONDING gs_os1_fsd TO gs_os2-fsd.
  MOVE-CORRESPONDING gs_os1b_s1d TO gs_os2-s1d.

  MOVE gt_os1_s1t TO gs_os2-s1t.

  APPEND gs_os2 TO gt_os2.

  CLEAR: gs_os1_fsd, gs_os1b_s1d, gt_os1_s1t, gs_os2.

ENDFORM. "create_new_os_2_content

**********************************************************************
* FORM    :  create_new_os3_content
* Created :  17.03.2006 10:24:00
**********************************************************************
FORM create_new_os3_content.

  MOVE-CORRESPONDING gs_os1_fsd TO gs_os3-fsd.
  MOVE-CORRESPONDING gs_os3_s2d TO gs_os3-s2d.

  MOVE gt_os1_s1t TO gs_os3-s1t.
  MOVE gt_os3_s2t TO gs_os3-s2t.

  APPEND gs_os3 TO gt_os3.

  CLEAR: gs_os1_fsd, gs_os3_s2d, gt_os1_s1t, gt_os3_s2t, gs_os3.

ENDFORM. "create_new_os_3_content

* 12/05/2006: The program was enhanced to be able to generate OS-6 printout
**********************************************************************
* FORM    :  create_new_OS6_content
* Created :  05.12.2006 14:22:17
**********************************************************************
FORM create_new_os6_content.

  MOVE-CORRESPONDING gs_os1_fsd TO gs_os6-fsd.

  MOVE gt_os6_s1t TO gs_os6-s1t.
  MOVE gt_os6_s2t TO gs_os6-s2t.
  MOVE gt_os6_s3t TO gs_os6-s3t.
  MOVE gt_os6_s4t TO gs_os6-s4t.
  MOVE gt_os6_s5t TO gs_os6-s5t.
  MOVE gt_os6_s6t TO gs_os6-s6t.
  MOVE gt_os6_s7t TO gs_os6-s7t.

  APPEND gs_os6 TO gt_os6.

  CLEAR: gs_os1_fsd, gt_os6_s1t, gt_os6_s2t, gt_os6_s3t,
         gt_os6_s3t, gt_os6_s4t, gt_os6_s5t, gt_os6_s6t,
         gt_os6_s7t, gs_os6.

ENDFORM. "create_new_os_6_content

**********************************************************************
* FORM    :  create_new_OS6A_content
* Created :  17.03.2006 10:36:37
**********************************************************************
FORM create_new_os6a_content.

  MOVE-CORRESPONDING gs_os1_fsd TO gs_os6a-fsd.

  MOVE gt_os6a_s1t TO gs_os6a-s1t.

  APPEND gs_os6a TO gt_os6a.

  CLEAR: gs_os1_fsd, gt_os6a_s1t, gs_os6a.

ENDFORM. "create_new_os_6a_content

**********************************************************************
* FORM    :  create_new_os6b_content
* Created :  17.03.2006 10:36:37
**********************************************************************
FORM create_new_os6b_content.

  MOVE-CORRESPONDING gs_os1_fsd TO gs_os6b-fsd.

  MOVE gt_os6a_s1t TO gs_os6b-s1t.

  APPEND gs_os6b TO gt_os6b.

  CLEAR: gs_os1_fsd, gt_os6a_s1t, gs_os6b.

ENDFORM. "create_new_os_6a_content

**********************************************************************
* FORM    :  create_new_os14_content
* Created :  17.03.2006 10:40:33
**********************************************************************
FORM create_new_os14_content.

  MOVE-CORRESPONDING gs_os1_fsd TO gs_os14-fsd.

  MOVE gt_os14_s1t TO gs_os14-s1t.
  MOVE gt_os14_s2t TO gs_os14-s2t.

  APPEND gs_os14 TO gt_os14.

  CLEAR: gs_os1_fsd, gt_os14_s1t, gt_os14_s2t, gs_os14.

ENDFORM. "create_new_os_14_content

*&---------------------------------------------------------------------*
*&      Form  set_os1_filling_rule
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_BSEG_ANBWA  text
*      <--P_FILLING_RULE  text
*----------------------------------------------------------------------*
FORM set_os1_filling_rule  USING    p_bseg_anbwa    TYPE anbwa
                           CHANGING p_filling_rule  TYPE char10.
* two relevant transactions for the forms: acquisition and retirement
  DATA:   lv_trtyp_group TYPE bwagrp,
          lv_trtyp_group_cl TYPE gitcol.
*           set filling rule
  SELECT SINGLE bwagrp
     FROM tabw
     INTO lv_trtyp_group
     WHERE bwasl = p_bseg_anbwa.

  SELECT SINGLE gitcol
    FROM tabwg
    INTO lv_trtyp_group_cl
    WHERE bwagrp = lv_trtyp_group.

  CASE lv_trtyp_group_cl.
    WHEN '1' OR '3'.
      p_filling_rule = '1-A'.
    WHEN '2' OR '4'.
      p_filling_rule = '1-R'.
    WHEN OTHERS.
      p_filling_rule = 'IRRELEVANT'.
  ENDCASE.


ENDFORM.                    " set_os1_filling_rule

TYPES  BEGIN OF ty_control_table.                           "1656231
        INCLUDE TYPE ty_sort.
        INCLUDE TYPE j_3r_invc_s4.
*  INCLUDE TYPE bseg.
TYPES  END OF ty_control_table.

TYPES:
    ty_control_table_tt TYPE TABLE OF ty_control_table.

*&---------------------------------------------------------------------*
*&      Form  fill_content_os_1_4_document
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM fill_content_os_1_4_document .

  DATA: lv_filling_rule(10) TYPE c.
  DATA: lv_invcard_groupnr TYPE j3rfa_ltable4-groupnum.
  DATA: ls_table4    TYPE j_3r_invc_s4,
        lt_table4    TYPE j_3r_invc_s4_tab,
        ls_table5    TYPE j_3r_invc_s5,
        ls_table6    TYPE j_3r_invc_s6,
        ls_table1    TYPE j_3r_invc_s1,
        lv_cnt       TYPE i,
        ls_header    LIKE LINE OF gt_header.

  DATA: lt_control TYPE TABLE OF ty_control_table,
        ls_control TYPE ty_control_table.
  FIELD-SYMBOLS <fs_control>  type ty_control_table.
  " ls_control_buffer TYPE ty_sort.

*  IF p_xselfi NE 'X'.
*    PERFORM select_fi_data. " call form routine which collects fi docs based on os6 tables
*  ENDIF.

  CLEAR: ls_control, lt_control.

* fill control table (separating individual outputs)
* LOOP AT gt_bseg INTO gs_bseg.

  IF p_formna+0(3) EQ 'OS4' AND p_os4pr IS NOT INITIAL. "Note 1656231 begin

* Flag IF Record is added
    DATA GV_RECORD_ADDED TYPE BOOLEAN.
    LOOP AT gt_header INTO ls_header.
      CLEAR lv_cnt.
      CLEAR lt_table4.

      "read lines of table into

      LOOP AT gt_table4 INTO ls_table4
        WHERE bukrs = ls_header-bukrs
        AND   anln1 = ls_header-anln1
        AND   anln2 = ls_header-anln2
        AND   gitcol BETWEEN 1 AND 3. " 1920907
        PERFORM append_line_to_table4
          USING
            ls_table4
          CHANGING
            lt_table4
          .
      ENDLOOP.

      loop at  lt_table4 INTO ls_table4 WHERE gitcol = 2.
        MOVE-CORRESPONDING ls_table4 TO ls_control.
        PERFORM append_line_to_control
          USING
            ls_control
          CHANGING
            lt_control .
        GV_RECORD_ADDED  = ABAP_TRUE.
        EXIT.
      endloop.
      IF GV_RECORD_ADDED  = ABAP_TRUE. " 1920907
        CONTINUE.
      ENDIF.
      loop at lt_table4 INTO ls_table4 where gitcol = 1 or gitcol = 3.  " 1920907
        IF ls_table4-depreciation IS INITIAL.
          READ TABLE gt_table1 INTO ls_table1 WITH KEY
             anln1 = ls_header-anln1
             anln2 = ls_header-anln2
             bukrs = ls_header-bukrs.
          IF sy-subrc EQ 0.
            ls_table4-depreciation = ls_table1-depreciation.
            ls_table4-valadjust    = ls_table1-valadjust.
            ls_table4-nbvalue      = ls_table1-nbvalue.
          ENDIF.
        ENDIF.
        clear:                  "clear fields for they do not go to the screen
          ls_table4-numaccept,
          ls_table4-bktxt,
          ls_table4-sgtxt.

          ls_table4-daccept = p_repdt. " current date of document
        MOVE-CORRESPONDING ls_table4 TO ls_control.
        PERFORM append_line_to_control
          USING
            ls_control
          CHANGING
            lt_control.
            GV_RECORD_ADDED  = ABAP_TRUE.
        EXIT.
      ENDLOOP.
      IF GV_RECORD_ADDED  = ABAP_TRUE. " 1920907
        CONTINUE.
      ENDIF.

      MOVE-CORRESPONDING ls_header TO ls_control.

      READ TABLE gt_table1 INTO ls_table1 WITH KEY
         anln1 = ls_header-anln1
         anln2 = ls_header-anln2
         bukrs = ls_header-bukrs.

      IF sy-subrc EQ 0.
        ls_control-depreciation = ls_table1-depreciation.
        ls_control-nbvalue      = ls_table1-nbvalue.
      ENDIF.

      PERFORM append_line_to_control
        USING
          ls_control
        CHANGING
          lt_control
        .

    ENDLOOP.

    LOOP AT lt_control INTO ls_control.
      ls_control-srtf1 = ls_control-gjahr.
      ls_control-srtf2 = ls_control-numaccept.
      ls_control-srtf3 = ls_control-anln1.
      ls_control-srtf4 = ls_control-anln2.
      MODIFY lt_control FROM ls_control.
    ENDLOOP.

  ELSE.

    LOOP AT gt_table4
    INTO ls_table4
    WHERE gitcol >= 1 AND gitcol <= 4 .

*   OS4, OS4A and OS4B are printted only for retirement
    CASE p_formna.
      WHEN 'OS4' OR 'OS4A' OR 'OS4B'.
        CHECK ls_table4-gitcol = 2.
    ENDCASE.

*    MOVE-CORRESPONDING gs_bseg TO ls_control.
    MOVE-CORRESPONDING ls_table4 TO ls_control.             "#EC ENHOK

    CASE p_formna.
      WHEN 'OS1' OR 'OS1A' OR 'OS4' OR 'OS4A'.
*        ls_control-srtf1 = gs_bseg-gjahr.
        ls_control-srtf1 = ls_table4-gjahr.
*        ls_control-srtf2 = gs_bseg-belnr.
        ls_control-srtf2 = ls_table4-numaccept.
*       ls_control-srtf3 = gs_bseg-anln1.
        ls_control-srtf3 = ls_table4-anln1.
*        ls_control-srtf4 = gs_bseg-anln2.
        ls_control-srtf4 = ls_table4-anln2.

      WHEN 'OS1B' OR 'OS4B'.

        IF p_gr_str = 'X'.
          ls_control-srtf1 = ls_table4-daccept.
          ls_control-srtf2 = ls_table4-structdiv_int.     "structdiv to
          ls_control-srtf3 = ls_table4-surname.           "resp person to
        ELSE.
          lv_invcard_groupnr = ls_table4-groupnum.
        ls_control-srtf1 = ls_table4-gjahr.
        ls_control-srtf2 = ls_table4-numaccept.
        ls_control-srtf3 = lv_invcard_groupnr.
        ENDIF.

    ENDCASE.

      PERFORM append_line_to_control
        USING
          ls_control
        CHANGING
          lt_control
        .

  ENDLOOP.


  ENDIF.

  SORT lt_control BY srtf1 srtf2 srtf3 srtf4.

* loop through control table to fill content for relevant line items
  LOOP AT lt_control INTO ls_control.

    MOVE-CORRESPONDING ls_control TO ls_table4.             "#EC ENHOK

* set filling rule
    CASE p_formna.
      WHEN 'OS1' OR 'OS1A' OR 'OS1B'.
*        PERFORM set_os1_filling_rule USING    gs_bseg-anbwa
*                                     CHANGING lv_filling_rule.
        CASE ls_control-gitcol.
          WHEN '1' OR '3'.
            lv_filling_rule = '1-A'.
          WHEN '2' OR '4'.
            lv_filling_rule = '1-R'.
          WHEN OTHERS.
            lv_filling_rule = 'IRRELEVANT'.
        ENDCASE.

      WHEN 'OS4' OR 'OS4A' OR 'OS4B'.
        lv_filling_rule = '4'.
    ENDCASE.

* handle only relevant transactions
    IF lv_filling_rule EQ '1-A' OR lv_filling_rule EQ '1-R' OR lv_filling_rule EQ '4'.

*       fill sections with tables (SnT)

*      in OS4B OS1_S1T is not used
      IF p_formna <> 'OS4B'.
        PERFORM fill_os1_s1t USING lv_filling_rule
                                    ls_table4
                                    ls_table5
                                    ls_table6.
      ENDIF.

      CASE p_formna.
        WHEN 'OS1'.
*          PERFORM fill_os1_s2t USING lv_filling_rule.

        WHEN 'OS1A'.
*          PERFORM fill_os1_s2t USING lv_filling_rule.
          PERFORM fill_os1_s3t USING lv_filling_rule.

        WHEN 'OS1B'.
*          PERFORM fill_os1_s2t USING lv_filling_rule.

        WHEN 'OS4'.
*          PERFORM fill_os1_s2t USING lv_filling_rule.
          PERFORM fill_os4_s3t USING lv_filling_rule ls_table4.

        WHEN 'OS4A'.
*          PERFORM fill_os1_s2t USING lv_filling_rule.
          PERFORM fill_os4a_s3t USING lv_filling_rule.
          PERFORM fill_os4_s3t USING lv_filling_rule ls_table4.

        WHEN 'OS4B'.
          PERFORM fill_os4b_s1t USING lv_filling_rule ls_table4.
          PERFORM fill_os4_s3t USING lv_filling_rule ls_table4.

      ENDCASE.

      AT END OF srtf4.

*       fill sections with form single values
        PERFORM fill_os1_fsd USING lv_filling_rule
                                   ls_table4
                                   ls_table5
                                   ls_table6.

* Fill precious material data
        PERFORM fill_os1_s2t USING ls_table4.

        CASE p_formna.
          WHEN 'OS1'.
            CONCATENATE   ls_control-srtf2 ls_control-srtf3 ls_control-srtf4 INTO gs_os1-alv_text SEPARATED BY '-'.
            PERFORM create_new_os1_content.
          WHEN 'OS1A'.
            CONCATENATE   ls_control-srtf2 ls_control-srtf3 ls_control-srtf4 INTO gs_os1a-alv_text SEPARATED BY '-'.
            PERFORM create_new_os1a_content.
          WHEN 'OS1B'.
            CONCATENATE   ls_control-srtf2 ls_control-srtf3 INTO gs_os1b-alv_text SEPARATED BY '-'.
            PERFORM fill_os1b_s1d USING lv_filling_rule.
            PERFORM create_new_os1b_content.
          WHEN 'OS4'.
            CONCATENATE   ls_control-srtf2 ls_control-srtf3 ls_control-srtf4 INTO gs_os4-alv_text SEPARATED BY '-'.
            PERFORM fill_os4_s3d USING lv_filling_rule.
            PERFORM create_new_os4_content.
          WHEN 'OS4A'.
            CONCATENATE   ls_control-srtf2 ls_control-srtf3 ls_control-srtf4 INTO gs_os4a-alv_text SEPARATED BY  '-'.
            PERFORM fill_os4_s3d USING lv_filling_rule.
            PERFORM create_new_os4a_content.
          WHEN 'OS4B'.
            CONCATENATE   ls_control-srtf2 ls_control-srtf3 INTO gs_os4b-alv_text SEPARATED BY '-'.
            PERFORM fill_os4b_s2d USING lv_filling_rule.
            PERFORM create_new_os4b_content.
          WHEN OTHERS.
            EXIT.
        ENDCASE.

      ENDAT.

    ENDIF.
  ENDLOOP.

* assign given content to common content
  CASE p_formna.
    WHEN 'OS1'.
      ASSIGN gt_os1 TO <gt_content>.
    WHEN 'OS1A'.
      ASSIGN gt_os1a TO <gt_content>.
    WHEN 'OS1B'.
      ASSIGN gt_os1b TO <gt_content>.
    WHEN 'OS4'.
      ASSIGN gt_os4 TO <gt_content>.
    WHEN 'OS4A'.
      ASSIGN gt_os4a TO <gt_content>.
    WHEN 'OS4B'.
      ASSIGN gt_os4b TO <gt_content>.
    WHEN OTHERS.
  ENDCASE.


ENDFORM.                    " fill_content_os_1_4_document


*&---------------------------------------------------------------------*
*&      Form  fill_content_os_2_document
*&---------------------------------------------------------------------*
FORM fill_content_os_2_document.
  DATA: lv_filling_rule(10) TYPE c.

  TYPES BEGIN OF ty_control_table.
  INCLUDE TYPE ty_sort.
  INCLUDE TYPE j_3r_invc_s4.
  TYPES END OF ty_control_table.

  DATA: lt_control      TYPE TABLE OF ty_control_table,
        ls_control      TYPE ty_control_table.

  DATA: ls_table4        TYPE j_3r_invc_s4,
        ls_table5        TYPE j_3r_invc_s5,
        ls_table6        TYPE j_3r_invc_s6,
        ls_asset_mov     TYPE j_3r_invc_asset_move,
        lv_move_date     TYPE dats,
        lv_structdiv_new TYPE j_3rstructdiv,
        lv_surname_new   TYPE j_3rsurname.

  CLEAR: ls_control, lt_control.
  DATA: lv_structdiv_move_filled type boolean,
        lv_surname_move_filled type boolean.
* fill control table
* collecting lines for OS2-IT (posted asset movements)
  LOOP AT gt_asset_mov INTO ls_asset_mov.

    IF ls_asset_mov-deakt IS NOT INITIAL.
      " this line corresponds to the new asset
      lv_move_date = ls_asset_mov-deakt.
      CLEAR: lv_structdiv_new, lv_surname_new.
    ELSE.
      " this line corresponds to the origin asset
      lv_move_date = ls_asset_mov-zugdt.
      lv_structdiv_new = ls_asset_mov-structdiv.
      lv_surname_new = ls_asset_mov-surname.
    ENDIF.

    CLEAR ls_table4. " Message Number 0120061532 0003053567 2006

    READ TABLE gt_table4
      INTO ls_table4
      WITH KEY bukrs = ls_asset_mov-bukrs
               anlu1 = ls_asset_mov-alnmb1
               anlu2 = ls_asset_mov-alnmb2
               daccept = lv_move_date.

    IF sy-subrc <> 0.
*      no entry found in gt_table4, Message Number 0120061532 0003053567 2006
      CONTINUE.
    ENDIF.
   lv_structdiv_move_filled = lv_surname_move_filled = abap_true.
    IF lv_structdiv_new IS INITIAL.
      lv_structdiv_new = ls_table4-structdiv.
      CLEAR lv_structdiv_move_filled.
    ENDIF.
    IF lv_surname_new IS INITIAL.
      lv_surname_new = ls_table4-surname.
      CLEAR lv_surname_move_filled.
    ENDIF.

*   asset 'from' and 'to' shall have different structural division
    IF lv_structdiv_new <> ls_table4-structdiv_old or
       lv_surname_new <> ls_table4-surname_old.
      CLEAR ls_control.
      ls_control-srtf1 = ls_table4-daccept.
      ls_control-srtf2 = ls_table4-numaccept.
      ls_control-srtf3 = ls_table4-structdiv_int_old. "structdiv from
      if lv_structdiv_move_filled = abap_true.
* Filling from asset transfer table
          ls_control-srtf4 = ls_asset_mov-structdiv_int.     "structdiv to
      else.
* Filling from OS6 table 4
          ls_control-srtf4 = ls_table4-structdiv_int.     "structdiv to
      endif.
      ls_control-srtf5 = ls_table4-surname_old.       "resp person from
      IF lv_surname_move_filled = abap_true.
* Filling from asset transfer table
        ls_control-srtf6 = ls_asset_mov-surname.     "resp person to
      ELSE.
* Filling from OS6 table 4
        ls_control-srtf6 = ls_table4-surname.        "resp person to
      ENDIF.

      MOVE-CORRESPONDING ls_table4 TO ls_control.           "#EC ENHOK
* Update from variables: source table4 or
* asse transfer table depending
      ls_control-structdiv = lv_structdiv_new.
      ls_control-surname   = lv_surname_new.

      APPEND ls_control TO lt_control.

    ENDIF.

*    CLEAR ls_control.
  ENDLOOP.

  IF p_xselaa = 'X'. "Asset filtering is active
* collecting lines for OS2-TD (internal transfers)
    LOOP AT gt_table4 INTO ls_table4 WHERE aloptypecode IS INITIAL. " where grtype is initial
* Only changed Structural division or surnames shall be printed
      CHECK ls_table4-structdiv_int_old ne ls_table4-structdiv_int
        or ls_table4-surname_old ne ls_table4-surname.
      MOVE-CORRESPONDING ls_table4 TO ls_control.           "#EC ENHOK
      ls_control-srtf1 = ls_table4-daccept.
      ls_control-srtf3 = ls_table4-structdiv_int_old. "structdiv from
      ls_control-srtf4 = ls_table4-structdiv_int.     "structdiv to
      ls_control-srtf5 = ls_table4-surname_old.       "resp person from
      ls_control-srtf6 = ls_table4-surname.           "resp person to
      APPEND ls_control TO lt_control.
      CLEAR ls_control.
    ENDLOOP.
  ENDIF.

  SORT lt_control BY srtf1 srtf2 srtf3 srtf4 srtf5 srtf6.
* Check implemented in the loop
*  delete ADJACENT DUPLICATES FROM  lt_control COMPARING
*  srtf1 srtf2 srtf3 srtf4 srtf5 srtf6.

* loop through control table to fill content for relevant line items
  LOOP AT lt_control INTO ls_control.

    MOVE-CORRESPONDING ls_control TO ls_table4.             "#EC ENHOK

*     set filling rule
    IF NOT ls_control-grtype IS INITIAL. "Note 1843009
      lv_filling_rule = '2-IT'.  "internal transfer
    ELSE.
      lv_filling_rule = '2-TD'. "Posted asset movement
    ENDIF.

*    fill sections with tables (SnT)
    PERFORM fill_os1_s1t USING lv_filling_rule
                               ls_table4
                               ls_table5    " isn't used but needed because of form interface
                               ls_table6.   " isn't used but needed because of form interface

*    content separation for every sort field change based on buffer variables
    AT END OF srtf6.

*      fill sections with form single values
      PERFORM fill_os1_fsd USING lv_filling_rule
                                 ls_table4
                                 ls_table5   " isn't used but needed because of form interface
                                 ls_table6.  " isn't used but needed because of form interface

      PERFORM fill_os1b_s1d USING lv_filling_rule.

      IF ls_control-srtf2 IS INITIAL.
        CONCATENATE ls_control-srtf1
                    ls_control-srtf3
                    ls_control-srtf4
                    ls_control-srtf5
                    ls_control-srtf6
               INTO gs_os2-alv_text SEPARATED BY ' - '.
      ELSE.
        CONCATENATE ls_control-srtf1
                    ls_control-srtf2
                    ls_control-srtf3
                    ls_control-srtf4
                    ls_control-srtf5
                    ls_control-srtf6
               INTO gs_os2-alv_text SEPARATED BY ' - '.
      ENDIF.

      PERFORM create_new_os2_content.

    ENDAT.

  ENDLOOP.

* assign given content to common content
  ASSIGN gt_os2 TO <gt_content>.

ENDFORM.                    "fill_content_os_2_document


*&---------------------------------------------------------------------*
*&      Form  fill_content_os_3_document
*&---------------------------------------------------------------------*
FORM fill_content_os_3_document.

  TYPES BEGIN OF ty_control_table.
  INCLUDE TYPE ty_sort.
  INCLUDE TYPE j_3r_os3_control.
  TYPES END OF ty_control_table.

  DATA: lv_filling_rule(10) TYPE c,
        lt_control      TYPE TABLE OF ty_control_table,
        ls_control      TYPE ty_control_table.

  DATA: ls_table4  TYPE j_3r_invc_s4,
        ls_t4_prev TYPE j_3r_invc_s4,
        ls_table5  TYPE j_3r_invc_s5,
        ls_table6  TYPE j_3r_invc_s6.

  CLEAR: ls_control, lt_control.

* fill control table
* OS-3 FI-AA
  LOOP AT gt_table5 INTO ls_table5.
    CLEAR ls_control.

    IF p_xselfi = 'X'. "FI filtering is active
      CHECK ls_table5-numbasq IN so_docnr.
    ENDIF.

*   determining the row in table4 before this document
    LOOP AT gt_table4 INTO ls_table4
      WHERE bukrs = ls_table5-bukrs AND
            anln1 = ls_table5-anln1 AND
            anln2 = ls_table5-anln2.

      IF ls_table4-daccept <= ls_table5-dateasq.
        ls_t4_prev = ls_table4.
      ELSE.
        EXIT.
      ENDIF.
    ENDLOOP.
    ls_table4 = ls_t4_prev.

*    Separate OS3 form should be printed for one FI document for different structural
*    division and/or responsible person. It means, that if in one FI document we have
*    two structural division and two responsible person for one of them,
*    then we shoul print 3 instances of OS3 form.
    ls_control-srtf1 = ls_table5-numbasq.
    ls_control-srtf2 = ls_table4-structdiv_int.
    if ls_control-srtf2 is INITIAL.
        ls_control-srtf2 = ' $ 1'.
    endif.

    ls_control-srtf3 = ls_table4-surname.

    ls_control-srtf4 = ls_table5-anln1.
    ls_control-srtf5 = ls_table5-anln2.

    ls_control-table4 = ls_table4.
    ls_control-table5 = ls_table5.
*    ls_control-j_3r_invc_s4 = ls_table4.
*    ls_control-j_3r_invc_s5 = ls_table5.

    APPEND ls_control TO lt_control.
  ENDLOOP.

* OS-3 FI-PM
  IF p_xselaa = 'X'. "Asset filtering is active
    LOOP AT gt_table6 INTO ls_table6.
      CLEAR ls_control.
*   determining the row in table4 before this document
      LOOP AT gt_table4 INTO ls_table4
        WHERE bukrs = ls_table6-bukrs AND
              anln1 = ls_table6-anln1 AND
              anln2 = ls_table6-anln2.

        IF ls_table4-daccept <= ls_table6-dateasq.
          ls_t4_prev = ls_table4.
        ELSE.
          EXIT.
        ENDIF.
      ENDLOOP.
      ls_table4 = ls_t4_prev.

      ls_control-srtf1 = ls_table6-numbasq.
      ls_control-srtf4 = ls_table6-anln1.
      ls_control-srtf5 = ls_table6-anln2.
      ls_control-table4 = ls_table4.
      ls_control-table6 = ls_table6.

      APPEND ls_control TO lt_control.
    ENDLOOP.

  ENDIF.

  SORT lt_control BY srtf1 srtf2 srtf3 srtf4 srtf5.

* loop through control table to fill content for relevant line items
  LOOP AT lt_control INTO ls_control.

    ls_table4 = ls_control-table4.
    ls_table5 = ls_control-table5.
    ls_table6 = ls_control-table6.

*    set filling rule
    IF ls_control-srtf2 IS INITIAL.
      lv_filling_rule = '3-PM'. "grouping by asset
    ELSE.
      lv_filling_rule = '3-AA'. "grouping by structdiv and resp. pers.
    ENDIF.

*    fill sections with tables (SnT)
    PERFORM fill_os1_s1t USING lv_filling_rule
                               ls_table4
                               ls_table5
                               ls_table6.

    PERFORM fill_os3_s2t USING lv_filling_rule
                               ls_table5
                               ls_table6.

    AT END OF srtf5.

*       fill sections with form single values
      PERFORM fill_os1_fsd USING lv_filling_rule
                                 ls_table4
                                 ls_table5
                                 ls_table6.

*     If it is not an internel transfer then the
*     performer orgainzation shall be empty
      IF ls_table4-gitcol IS NOT INITIAL AND lv_filling_rule = '3-AA'.
        CLEAR gs_os1_fsd-n4_3_perf_org_subdiv_name.
      ENDIF.

      PERFORM fill_os3_s2d USING lv_filling_rule.

      IF ls_control-srtf2 IS INITIAL.
        CONCATENATE ls_control-srtf1
                    ls_control-srtf4
                    ls_control-srtf5
               INTO gs_os3-alv_text SEPARATED BY ' - '.
      ELSE.
        CONCATENATE ls_control-srtf1
                    ls_control-srtf2
                    ls_control-srtf3
                    ls_control-srtf4
                    ls_control-srtf5
               INTO gs_os3-alv_text SEPARATED BY ' - '.
      ENDIF.

      PERFORM create_new_os3_content.

    ENDAT.

  ENDLOOP.

* assign given content to common content
  ASSIGN gt_os3 TO <gt_content>.

ENDFORM.                    "fill_content_os_3_document

* 12/05/2006: The program was enhanced to be able to generate OS-6 printout
*&---------------------------------------------------------------------*
*&      Form  fill_content_os_6_document
*&---------------------------------------------------------------------*
FORM fill_content_os_6_document.

*  TYPES BEGIN OF ty_control_table.
*  INCLUDE TYPE ty_sort.
*  INCLUDE TYPE j_3r_invc_s4.
*  TYPES END OF ty_control_table.

  DATA: lv_filling_rule(10) TYPE c,
        lv_firstline_s7t    TYPE c, "Only the 1st line of s7t shall be filled with description
*        lt_control  TYPE TABLE OF ty_control_table,
*        ls_control  TYPE ty_control_table,
        ls_header   TYPE j_3r_invc_header,
        ls_table1   TYPE j_3r_invc_s1,
        ls_table2   TYPE j_3r_invc_s2,
        ls_table3   TYPE j_3r_invc_s3,
        ls_table4   TYPE j_3r_invc_s4,
        ls_table5   TYPE j_3r_invc_s5,
        ls_table6   TYPE j_3r_invc_s6,
        ls_table7   TYPE j_3r_invc_s7,
        ls_table7d   TYPE j_3r_invc_s7d.

  DATA: ls_os6_s1t     TYPE j_3r_os6_s1t,
        ls_os6_s2t     TYPE j_3r_os6_s2t,
        ls_os6_s3t     TYPE j_3r_os6_s3t,
        ls_os6_s4t     TYPE j_3r_os6_s4t,
        ls_os6_s5t     TYPE j_3r_os6_s5t,
        ls_os6_s6t     TYPE j_3r_os6_s6t,
        ls_os6_s7t     TYPE j_3r_os6_s7t.
*        lv_groupnum TYPE j_3rgroupnum,
*        lv_first    TYPE c


*  CLEAR: ls_control, lt_control.

* set filling rule
  lv_filling_rule = 'OS6'.

* fill control table
  LOOP AT gt_header INTO ls_header.

* Filling ls_table4 with initial value
    CLEAR ls_table4.

    LOOP AT gt_table4 INTO ls_table4
      WHERE
            bukrs = ls_header-bukrs
      AND   anln1 = ls_header-anln1
      AND   anln2 = ls_header-anln2.

      IF p_repdt BETWEEN ls_table4-daccept
        AND ls_table4-bdatu.
        EXIT.
      ENDIF.
      AT LAST.
        CLEAR ls_table4.
      ENDAT.
    ENDLOOP.

*    READ TABLE gt_table4 WITH KEY "Note 1654233
*          bukrs = ls_header-bukrs
*          anln1 = ls_header-anln1
*          anln2 = ls_header-anln2
*
*
*          INTO ls_table4.
* If gt_table4 is empte try to use other initial value from ls_header.
    IF ls_table4 IS INITIAL.
      ls_table4-bukrs = ls_header-bukrs.
      ls_table4-anln1 = ls_header-anln1.
      ls_table4-anln2 = ls_header-anln2.
    ENDIF.

*      fill sections with form single values
    PERFORM fill_os1_fsd USING lv_filling_rule
                               ls_table4
                               ls_table5   "is not used but needed because of the inteface of the form
                               ls_table6.  "is not used but needed because of the inteface of the form

*   fill 1st section
    LOOP AT gt_table1 INTO ls_table1
          WHERE bukrs = ls_header-bukrs AND
                anln1 = ls_header-anln1 AND
                anln2 = ls_header-anln2.

      ls_os6_s1t-1t1_prod_date    = ls_table1-dcons.
      ls_os6_s1t-1t2_dlrep        = ls_table1-dlrep.
      ls_os6_s1t-1t3_namedsdoc    = ls_table1-namesdoc.
      ls_os6_s1t-1t4_numbersdoc   = ls_table1-numbersdoc.
      ls_os6_s1t-1t5_dsdoc        = ls_table1-dsdoc.
      ls_os6_s1t-1t6_fdjar        = ls_table1-fdjar.
      ls_os6_s1t-1t6_fdper        = ls_table1-fdper.
* Depreciation + (Value adjustments if customized)
      PERFORM depr_and_val_adjustments USING ls_table1-depreciation
                                             ls_table1-valadjust
                                    CHANGING ls_os6_s1t-1t7_depreciation.

      ls_os6_s1t-1t8_net_val      = abs( ls_table1-nbvalue ).
*        ls_os6_s1t-cuky =
*        ls_os6_s1t-unit =
      APPEND ls_os6_s1t TO gt_os6_s1t.

    ENDLOOP.

*   fill 2nd section
    LOOP AT gt_table2 INTO ls_table2
          WHERE bukrs = ls_header-bukrs AND
                anln1 = ls_header-anln1 AND
                anln2 = ls_header-anln2.

      ls_os6_s2t-2t1_kansw = ls_table2-kansw.
      ls_os6_s2t-2t2_ndjar = ls_table2-ndjar.
      ls_os6_s2t-2t2_ndper = ls_table2-ndper.
*        ls_os6_s1t-cuky =
*        ls_os6_s1t-unit =
      APPEND ls_os6_s2t TO gt_os6_s2t.
    ENDLOOP.

*   fill 3rd section
    LOOP AT gt_table3 INTO ls_table3
          WHERE bukrs = ls_header-bukrs AND
                anln1 = ls_header-anln1 AND
                anln2 = ls_header-anln2.

      ls_os6_s3t-3t1_dtrev = ls_table3-dtrev.
      ls_os6_s3t-3t2_kfrev = ls_table3-kfrev.
      ls_os6_s3t-3t3_replv = ls_table3-replv.
*        ls_os6_s1t-cuky =
*        ls_os6_s1t-unit =
      APPEND ls_os6_s3t TO gt_os6_s3t.
    ENDLOOP.

*   fill 4th section
    LOOP AT gt_table4 INTO ls_table4
          WHERE bukrs = ls_header-bukrs AND
                anln1 = ls_header-anln1 AND
                anln2 = ls_header-anln2.

      ls_os6_s4t-4t1_daccept     = ls_table4-daccept.
      ls_os6_s4t-4t1_numaccept   = ls_table4-numaccept.
      ls_os6_s4t-4t2_opertype    = ls_table4-opertype.
      ls_os6_s4t-4t3_structdiv   = ls_table4-structdiv.
      ls_os6_s4t-4t4_nbvalue_old = abs( ls_table4-nbvalue ).
      ls_os6_s4t-4t5_surname     = ls_table4-surname.
* Reference fields for customer's BADi
      ls_os6_s4t-gjahr          = ls_table4-gjahr.
      ls_os6_s4t-lnran          = ls_table4-lnran.
      ls_os6_s4t-buzei          = ls_table4-buzei.
*        ls_os6_s1t-cuky =
*        ls_os6_s1t-unit =
      APPEND ls_os6_s4t TO gt_os6_s4t.
    ENDLOOP.

*   fill 5th section
    LOOP AT gt_table5 INTO ls_table5
          WHERE bukrs = ls_header-bukrs AND
                anln1 = ls_header-anln1 AND
                anln2 = ls_header-anln2.

      ls_os6_s5t-5t1_opertype   = ls_table5-opertype.
      ls_os6_s5t-5t2_nameasq    = ls_table5-nameasq .
      ls_os6_s5t-5t3_dateasquis = ls_table5-dateasq.
      ls_os6_s5t-5t4_numbasq    = ls_table5-numbasq .
      ls_os6_s5t-5t5_expsum     = ls_table5-expsum.
* Reference fields for customer's BADi
      ls_os6_s5t-gjahr          = ls_table5-gjahr.
      ls_os6_s5t-lnran          = ls_table5-lnran.
      ls_os6_s5t-buzei          = ls_table5-buzei.

*        ls_os6_s1t-cuky =
*        ls_os6_s1t-unit =
      APPEND ls_os6_s5t TO gt_os6_s5t.
    ENDLOOP.

*   fill 6th section
    LOOP AT gt_table6 INTO ls_table6
          WHERE bukrs = ls_header-bukrs AND
                anln1 = ls_header-anln1 AND
                anln2 = ls_header-anln2.

      ls_os6_s6t-6t1_opertype   = ls_table6-opertype.
      ls_os6_s6t-6t2_nameasq    = ls_table6-nameasq .
      ls_os6_s6t-6t3_dateasquis = ls_table6-dateasq.
      ls_os6_s6t-6t4_numbasq    = ls_table6-numbasq .
      ls_os6_s6t-6t5_expsum     = ls_table6-expsum.

*        ls_os6_s1t-cuky =
*        ls_os6_s1t-unit =
      APPEND ls_os6_s6t TO gt_os6_s6t.
    ENDLOOP.

*   fill 7th section
*    PERFORM fill_os6_s7t tables gt_table7d
*                                gt_os6_s7t
*                         using ls_header-bukrs
*                               ls_header-anln1
*                               ls_header-anln2.

*    CLEAR lv_firstline_s7t.
    LOOP AT gt_table7d INTO ls_table7d
          WHERE bukrs = ls_header-bukrs AND
                anln1 = ls_header-anln1 AND
                anln2 = ls_header-anln2.

      CLEAR ls_os6_s7t.

*      AT FIRST.
      IF ( lv_firstline_s7t IS INITIAL ).

        lv_firstline_s7t = 'X'.
        ls_os6_s7t-7t1_nameobj   = gs_os1_fsd-n30_asset_dscr.
        IF ( ls_header-alquant IS INITIAL OR ls_header-alquant = 0 ).
          ls_os6_s7t-7t2_menge   = 1.
        ENDIF.
      ENDIF.
*      ENDAT.
      ls_os6_s7t-7t3_descript  = ls_table7d-descript.
      ls_os6_s7t-7t4_okpcode   = ls_table7d-okpcode.

*
      ls_os6_s7t-7t6_quantity  = ls_table7d-quantity.
      if alv_pre is INITIAL.
          PERFORM update_precm_unit USING ls_table7d-qunit gs_t001-spras
                                     CHANGING ls_os6_s7t-7t5_qunit.
          PERFORM update_precm_unit USING ls_table7d-wunit gs_t001-spras
                                     CHANGING ls_os6_s7t-7t7_wunit.
      else.
              ls_os6_s7t-7t5_qunit     = ls_table7d-qunit.
              ls_os6_s7t-7t7_wunit     = ls_table7d-wunit.
      endif.
      ls_os6_s7t-7t8_mass      = ls_table7d-mass.

*        ls_os6_s1t-cuky =
*        ls_os6_s1t-unit =
      APPEND ls_os6_s7t TO gt_os6_s7t.
    ENDLOOP.

    CONCATENATE ls_header-bukrs ls_header-anln1 ls_header-anln2
      INTO gs_os6-alv_text SEPARATED BY SPACE.

    PERFORM create_new_os6_content.
  ENDLOOP.

* assign given content to common content
  ASSIGN gt_os6 TO <gt_content>.

ENDFORM.                    "fill_content_os_6_document

*&---------------------------------------------------------------------*
*&      Form  fill_content_os_6a_document
*&---------------------------------------------------------------------*
FORM fill_content_os_6a_document.

  TYPES BEGIN OF ty_control_table.
  INCLUDE TYPE ty_sort.
  INCLUDE TYPE j_3r_invc_s4.
  TYPES END OF ty_control_table.

  DATA: lv_filling_rule(10) TYPE c,
        lt_control  TYPE TABLE OF ty_control_table,
        ls_control  TYPE ty_control_table,
        ls_header   TYPE j_3r_invc_header,
        ls_table4   TYPE j_3r_invc_s4,
        ls_table5   TYPE j_3r_invc_s5,
        ls_table6   TYPE j_3r_invc_s6,
        lv_groupnum TYPE j_3rgroupnum,
        lv_first    TYPE c.

  CLEAR: ls_control, lt_control.

* set filling rule
  lv_filling_rule = '6'.

* fill control table
  LOOP AT gt_header INTO ls_header.

    lv_first = 'X'.

*    those table4 rows which correspond for an acquisition,
*    retirement/acquiring transfer or internal transfer and 'anlu' = 'anln'
    LOOP AT gt_table4 INTO ls_table4
            WHERE bukrs = ls_header-bukrs AND
                  anlu1 = ls_header-anln1 AND
                  anlu2 = ls_header-anln2 AND
                  ( gitcol = '1' OR      " acquisition
                    gitcol = '3' OR      " acquiring transfer
                    gitcol IS INITIAL ). " (result of) internal transfer

      IF p_xselfi = 'X'. "FI filtering is active
        CHECK ls_table4-numaccept IN so_docnr.
      ENDIF.

      IF lv_first = 'X' OR ls_table4-groupnum <> lv_groupnum.
        " group card number changed => new OS6a is needed
* New selection screen parameter is needed to implement filtering by inventory
* group number
*        IF ls_table4-groupnum IN so_invnr.
          ls_control-srtf1 = ls_table4-groupnum.  " Asset group card number
          ls_control-srtf2 = ls_table4-daccept.   " interval start data
          ls_control-srtf3 = ls_table4-bdatu.     " interval end data
          MOVE-CORRESPONDING ls_table4 TO ls_control.       "#EC ENHOK

          APPEND ls_control TO lt_control.
          CLEAR ls_control.
*        ENDIF.

        lv_groupnum = ls_table4-groupnum.
        CLEAR lv_first.
*      ELSE.
*        "groupcard number was not changed
      ENDIF.

    ENDLOOP.
  ENDLOOP.

  SORT lt_control BY srtf1 srtf2 srtf3. " Sorting by asset group card number

* loop through control table to fill content for relevant line items, only for relevant inventory card group
  LOOP AT lt_control INTO ls_control.

    MOVE-CORRESPONDING ls_control TO ls_table4.             "#EC ENHOK

*    fill sections with tables (SnT)
    PERFORM fill_os6a_s1t USING lv_filling_rule
                                ls_table4.

*    content separation for every sort field change based on buffer variables
    AT END OF srtf1.

*      fill sections with form single values
      PERFORM fill_os1_fsd USING lv_filling_rule
                                 ls_table4
                                 ls_table5   "is not used but needed because of the inteface of the form
                                 ls_table6.  "is not used but needed because of the inteface of the form

      gs_os6a-alv_text = ls_control-srtf1.

      PERFORM create_new_os6a_content.
    ENDAT.

  ENDLOOP.

* assign given content to common content
  ASSIGN gt_os6a TO <gt_content>.

ENDFORM.                    "fill_content_os_6a_document

*&---------------------------------------------------------------------*
*&      Form  fill_content_os_6b_document
*&---------------------------------------------------------------------*
FORM fill_content_os_6b_document.

  TYPES BEGIN OF ty_control_table.
  INCLUDE TYPE ty_sort.
  INCLUDE TYPE j_3r_invc_s4.
  TYPES END OF ty_control_table.

  DATA: lv_filling_rule(10) TYPE c,
        ls_header           TYPE j_3r_invc_header,
        ls_table4           TYPE j_3r_invc_s4,
        ls_table5           TYPE j_3r_invc_s5,
        ls_table6           TYPE j_3r_invc_s6,
        lt_control          TYPE TABLE OF ty_control_table,
        ls_control          TYPE ty_control_table.

  CLEAR: ls_control, lt_control.

*  set filling rule
  lv_filling_rule = '6'.

* fill control table
* only those documents that took place during reporting period (so_repdt)
  LOOP AT gt_header INTO ls_header.
* Skip asset retired before OS6-start date
    if ls_header-alretdate is not INITIAL.
        CHECK ls_header-alretdate >= so_repdt-low.
    endif.
*   Have to skip the assets which were acquired after the report period and
*   those assets which were already transfered before the report period.
    LOOP AT gt_table4 INTO ls_table4
              WHERE bukrs = ls_header-bukrs  AND
                    anlu1 = ls_header-anln1  AND
                    anlu2 = ls_header-anln2  AND
                    ( ( gitcol = '1' AND                " acquisition
                        daccept <= so_repdt-high ) OR   " asset was acquired before report period
                      ( ( gitcol = '3' OR               " acquiring transfer
                          gitcol IS INITIAL ) AND       " (result of) internal transfer.
                        daccept >= so_repdt-low ) ).    " asset was transfered only after reporting period

      IF p_xselfi = 'X'. "FI filtering is active
        CHECK ls_table4-numaccept IN so_docnr.
      ENDIF.

      ls_control-srtf1 = ls_table4-structdiv. " Structural division
      ls_control-srtf2 = ls_table4-anlu1.
      ls_control-srtf3 = ls_table4-anlu2.

      MOVE-CORRESPONDING ls_table4 TO ls_control.           "#EC ENHOK
      APPEND ls_control TO lt_control.
      CLEAR ls_control.

    ENDLOOP.

  ENDLOOP.

  SORT lt_control BY srtf1 srtf2 srtf3 daccept.

* loop through control table to fill content for relevant line items
  LOOP AT lt_control INTO ls_control.

    MOVE-CORRESPONDING ls_control TO ls_table4.             "#EC ENHOK

*   Loop till the last entry for the corresponding asset, because only one
*   line per asset shall appear in OS6b form for a structural division!
    AT END OF srtf3.
*      fill sections with tables (SnT)
      PERFORM fill_os6a_s1t USING lv_filling_rule
                                  ls_table4.
    ENDAT.

*    content separation for every sort field change based on buffer variables
    AT END OF srtf1.
*      fill sections with form single values
      PERFORM fill_os1_fsd USING lv_filling_rule
                                 ls_table4
                                 ls_table5   "is not used but needed because of the inteface of the form
                                 ls_table6.  "is not used but needed because of the inteface of the form

      gs_os6b-alv_text = ls_control-srtf1.

      PERFORM create_new_os6b_content.
    ENDAT.

  ENDLOOP.

* assign given content to common content
  ASSIGN gt_os6b TO <gt_content>.

ENDFORM.                    "fill_content_os_6b_document


*&---------------------------------------------------------------------*
*&      Form  fill_content_os_14_document
*&---------------------------------------------------------------------*
FORM fill_content_os_14_document.

  TYPES BEGIN OF ty_control_table.
  INCLUDE TYPE ty_sort.
  INCLUDE TYPE j_3r_invc_s4.
  TYPES END OF ty_control_table.

  DATA: lv_filling_rule(10) TYPE c,
        lt_control          TYPE TABLE OF ty_control_table,
        ls_control          TYPE ty_control_table,
        ls_table4           TYPE j_3r_invc_s4,
        ls_table5           TYPE j_3r_invc_s5,
        ls_table6           TYPE j_3r_invc_s6.

  CLEAR: ls_control, lt_control.

*    set filling rule
  lv_filling_rule = '14'.

*determinig all the different assets which where accepted from vendor (acquisition)
  LOOP AT gt_table4 INTO ls_table4
                    WHERE gitcol = '1'  " Acquisition
                        or  gitcol = '3'. " Incoming transfer

    CLEAR ls_control.

    IF p_xselfi = 'X'. "FI filtering is active
      CHECK ls_table4-numaccept IN so_docnr.
    ENDIF.

    ls_control-srtf1 = ls_table4-anln1.  " original asset nr
    ls_control-srtf2 = ls_table4-anln2.  " original asset subnr
    MOVE-CORRESPONDING ls_table4 TO ls_control.             "#EC ENHOK
    APPEND ls_control TO lt_control.
  ENDLOOP.

  SORT lt_control BY srtf1 srtf2.

  LOOP AT lt_control INTO ls_control.

    MOVE-CORRESPONDING ls_control TO ls_table4.             "#EC ENHOK

*    fill sections with tables (SnT)
    PERFORM fill_os14_s1t USING lv_filling_rule.
    PERFORM fill_os14_s2t USING lv_filling_rule
                                ls_table4-bukrs
                                ls_table4-anln1
                                ls_table4-anln2.

*    fill sections with form single values
    PERFORM fill_os1_fsd USING lv_filling_rule
                               ls_table4
                               ls_table5   "is not used but needed because of the inteface of the form
                               ls_table6.  "is not used but needed because of the inteface of the form

    CONCATENATE ls_control-srtf1
                ls_control-srtf2
            INTO gs_os14-alv_text SEPARATED BY ' - '.

    PERFORM create_new_os14_content.

  ENDLOOP.

* assign given content to common content
  ASSIGN gt_os14 TO <gt_content>.

ENDFORM.                    "fill_content_os_14_document
*&---------------------------------------------------------------------*
*&      Form  append_line_to_table4
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LINE     text
*      -->P_TABLE    text
*----------------------------------------------------------------------*
FORM append_line_to_table4
        USING
            p_line    TYPE j_3r_invc_s4
        CHANGING
            p_table TYPE j_3r_invc_s4_tab.

  FIELD-SYMBOLS:
                  <fs_control> TYPE j_3r_invc_s4.


  IF p_xselfi <> 'X' OR ( p_xselfi = 'X' AND p_line-numaccept IN so_docnr ).
    UNASSIGN <fs_control>.
    IF p_gr1day IS NOT INITIAL.
      LOOP AT p_table ASSIGNING <fs_control>
        WHERE bukrs   = p_line-bukrs  AND
              anln1   = p_line-anln1  AND
              anln2   = p_line-anln2  AND
              gitcol  = p_line-gitcol AND
              daccept = p_line-daccept.
        <fs_control>-anbtr = <fs_control>-anbtr + p_line-anbtr.
        <fs_control>-depreciation = <fs_control>-depreciation + p_line-depreciation.
        <fs_control>-nbvalue = <fs_control>-nbvalue + p_line-nbvalue.
        EXIT.
      ENDLOOP.
    ENDIF.

    IF <fs_control> IS NOT ASSIGNED.
      APPEND p_line TO p_table.
    ENDIF.
  ENDIF.
ENDFORM.                    "append_line_to_table_by_daccept

*&---------------------------------------------------------------------*
*&      Form  append_line_to_control
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LINE     text
*      -->P_TABLE    text
*----------------------------------------------------------------------*
FORM append_line_to_control "note 1656231
        USING
            p_line    TYPE ty_control_table
        CHANGING
            p_table TYPE ty_control_table_tt.

  FIELD-SYMBOLS:
                  <fs_control> TYPE ty_control_table.


  IF p_xselfi <> 'X' OR ( p_xselfi = 'X' AND p_line-numaccept IN so_docnr ).
    UNASSIGN <fs_control>.
    IF p_gr1day IS NOT INITIAL.
      LOOP AT p_table ASSIGNING <fs_control>
        WHERE bukrs   = p_line-bukrs  AND
              anln1   = p_line-anln1  AND
              anln2   = p_line-anln2  AND
              gitcol  = p_line-gitcol AND
              daccept = p_line-daccept.
        <fs_control>-anbtr = <fs_control>-anbtr + p_line-anbtr.
        <fs_control>-depreciation = <fs_control>-depreciation + p_line-depreciation.
        <fs_control>-nbvalue = <fs_control>-nbvalue + p_line-nbvalue.
        EXIT.
      ENDLOOP.
    ENDIF.

    IF <fs_control> IS NOT ASSIGNED.
      APPEND p_line TO p_table.
    ENDIF.
  ENDIF.
ENDFORM.                    "append_line_to_table_by_daccept
