*&---------------------------------------------------------------------*
*& Report  YSE_HRLOAD_FILE_MATDET_EF                                   *
*&                                                                     *
*&---------------------------------------------------------------------*
*&                                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*

REPORT  YSE_HRLOAD_FILE_MATDET_EF               .

TYPES: BEGIN  OF t_mat_det_in,
       KSCHL(4)    TYPE c, " Condition type
       VKORG(4)    TYPE c, " Sales Organization
       VTWEG(2)    TYPE c, " Distribution Channel
       DATAB(8)    TYPE c, " valid From
       DATBI(8)    TYPE c, " Valid To
       SUGRV(4)    TYPE c, " Proposed reason
       MATWA(18)   TYPE c, " Material entered
       SMATN(18)   TYPE c, " Material
       MEINS(3)    TYPE c, " Base Unit of Measure
       SUGRD(4)    TYPE c, " Substitution reason
       OLDMOK(1)   TYPE c, " Flag = Y, Old material exists for sales org/DC
       NEWMOK(1)   TYPE c, " Flag = Y, New material exists for sales org/DC
       SAPMATWA(18)   TYPE c, " Material entered
       SAPSMATN(18)   TYPE c, " Material

       END OF t_mat_det_in.


TYPES: BEGIN  OF t_mat_full_creation,
       updtype       TYPE  c,
       oldmatnr      TYPE  mara-matnr,
       matnr         TYPE  mara-matnr,
      END OF t_mat_full_creation.

*TYPES: BEGIN  OF t_mat_partial_creation,
*       matnr      TYPE  mara-matnr,
*       END OF t_mat_partial_creation.

*DATA: i_mat_partial_creation            TYPE TABLE OF t_mat_partial_creation.
*DATA: wa_mat_partial_creation           TYPE          t_mat_partial_creation.

DATA: i_mat_full_creation            TYPE TABLE OF t_mat_full_creation.
DATA: wa_mat_full_creation           TYPE          t_mat_full_creation.

DATA: i_mat_det_in            TYPE TABLE OF t_mat_det_in.
DATA: wa_mat_det_in           TYPE          t_mat_det_in.


DATA: GV_PHYS_FILE(60) TYPE C.

DATA: BEGIN OF GI_INP OCCURS 0,
        DATA(650),
      END OF GI_INP.

TABLES: MVKE.


PARAMETER: P_INP LIKE  RLGRAP-FILENAME DEFAULT 'c:\ATLAS-TEST-SEED-MATDET-TST.TXT' ,
           P_INPTP LIKE  RLGRAP-FILETYPE DEFAULT 'ASC'.
*           P_OUTP LIKE  FILENAME-FILEINTERN DEFAULT 'HR_DATASET'.




START-OF-SELECTION.

* Get the physical path for the logical filename.
*  CALL FUNCTION 'FILE_GET_NAME'
*    EXPORTING
**   CLIENT                        = SY-MANDT
*      LOGICAL_FILENAME              = P_OUTP
**   OPERATING_SYSTEM              = SY-OPSYS
**   PARAMETER_1                   = ' '
**   PARAMETER_2                   = ' '
**   PARAMETER_3                   = ' '
**   USE_PRESENTATION_SERVER       = ' '
**   WITH_FILE_EXTENSION           = ' '
**   USE_BUFFER                    = ' '
**   ELEMINATE_BLANKS              = 'X'
*    IMPORTING
**   EMERGENCY_FLAG                =
**   FILE_FORMAT                   =
*      FILE_NAME                     = GV_PHYS_FILE
** EXCEPTIONS
**   FILE_NOT_FOUND                = 1
**   OTHERS                        = 2
*            .
*  IF SY-SUBRC <> 0.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.


* Upload the file.
  CALL FUNCTION 'WS_UPLOAD'
    EXPORTING
*   CODEPAGE                      = ' '
      FILENAME                      = P_INP
      FILETYPE                      = P_INPTP
*   HEADLEN                       = ' '
*   LINE_EXIT                     = ' '
*   TRUNCLEN                      = ' '
*   USER_FORM                     = ' '
*   USER_PROG                     = ' '
*   DAT_D_FORMAT                  = ' '
* IMPORTING
*   FILELENGTH                    =
    TABLES
*      DATA_TAB                      = GI_INP
      DATA_TAB                      = i_mat_det_in
* EXCEPTIONS
*   CONVERSION_ERROR              = 1
*   FILE_OPEN_ERROR               = 2
*   FILE_READ_ERROR               = 3
*   INVALID_TYPE                  = 4
*   NO_BATCH                      = 5
*   UNKNOWN_ERROR                 = 6
*   INVALID_TABLE_WIDTH           = 7
*   GUI_REFUSE_FILETRANSFER       = 8
*   CUSTOMER_ERROR                = 9
*   NO_AUTHORITY                  = 10
*   OTHERS                        = 11
            .
  IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.



  DESCRIBE TABLE  i_mat_det_in  LINES  sy-tfill.
  CHECK sy-tfill NE 0.


  CLEAR wa_mat_det_in.

  LOOP AT i_mat_det_in  INTO wa_mat_det_in.


    SELECT SINGLE MATNR  FROM MARA
                         INTO wa_mat_det_in-SAPMATWA
                        WHERE BISMT = wa_mat_det_in-MATWA.
    IF sy-subrc = 0.
      SELECT SINGLE MATNR  FROM MVKE
                         INTO wa_mat_det_in-SAPMATWA
                        WHERE
                             matnr = wa_mat_det_in-SAPMATWA
                         AND vkorg = wa_mat_det_in-vkorg
                         AND vtweg = wa_mat_det_in-vtweg.
      IF sy-subrc = 0.
        MOVE 'Y'       to wa_mat_det_in-OLDMOK.
      ELSE.
        MOVE '2'       to wa_mat_det_in-OLDMOK.
      ENDIF.
    ELSE.
      MOVE '1'       to wa_mat_det_in-OLDMOK.
    ENDIF.
*
*
    SELECT SINGLE MATNR  FROM MARA
                             INTO  wa_mat_det_in-SAPSMATN
                             WHERE BISMT = wa_mat_det_in-SMATN.
    IF sy-subrc = 0.
      SELECT SINGLE MATNR  FROM MVKE
                       INTO wa_mat_det_in-SAPSMATN
                      WHERE
                           matnr = wa_mat_det_in-SAPSMATN
                       AND vkorg = wa_mat_det_in-vkorg
                       AND vtweg = wa_mat_det_in-vtweg.

      IF sy-subrc = 0.
        MOVE 'Y'     to wa_mat_det_in-NEWMOK.
      ELSE.
        MOVE '2'       to wa_mat_det_in-NEWMOK.
      ENDIF.
    ELSE.
      MOVE '1'       to wa_mat_det_in-NEWMOK.
    ENDIF.



    CASE  wa_mat_det_in-OLDMOK.
      WHEN '1'.
        move '1'                         to  wa_mat_full_creation-updtype.
        move    wa_mat_det_in-MATWA      to  wa_mat_full_creation-oldmatnr.
        move    wa_mat_det_in-SAPMATWA   to  wa_mat_full_creation-matnr.
        append  wa_mat_full_creation  to  i_mat_full_creation.
      WHEN '2'.
*        move    wa_mat_det_in-MATWA     to  wa_mat_partial_creation-matnr.
*        append  wa_mat_partial_creation to  i_mat_partial_creation.
       move '2'                         to   wa_mat_full_creation-updtype.
        move    wa_mat_det_in-MATWA      to  wa_mat_full_creation-oldmatnr.
        move    wa_mat_det_in-SAPMATWA   to  wa_mat_full_creation-matnr.
        append  wa_mat_full_creation  to  i_mat_full_creation.

    ENDCASE.

    CASE  wa_mat_det_in-NEWMOK.
      WHEN '1'.
        move '1'                         to  wa_mat_full_creation-updtype.
        move  wa_mat_det_in-SMATN        to  wa_mat_full_creation-oldmatnr.
        move  wa_mat_det_in-SAPSMATN     to  wa_mat_full_creation-matnr.
        append  wa_mat_full_creation     to i_mat_full_creation.
      WHEN '2'.
*        move  wa_mat_det_in-SMATN to  wa_mat_partial_creation-matnr.
*        append  wa_mat_partial_creation to  i_mat_partial_creation.
        move '2'                         to  wa_mat_full_creation-updtype.
        move  wa_mat_det_in-SMATN        to  wa_mat_full_creation-oldmatnr.
        move  wa_mat_det_in-SAPSMATN     to  wa_mat_full_creation-matnr.
        append  wa_mat_full_creation     to i_mat_full_creation.

    ENDCASE.

    MODIFY i_mat_det_in  FROM  wa_mat_det_in.

  ENDLOOP.


  SORT i_mat_full_creation.
  DELETE ADJACENT DUPLICATES FROM  i_mat_full_creation.

*  SORT i_mat_partial_creation.
*  DELETE ADJACENT DUPLICATES FROM  i_mat_partial_creation.


*
*  LOOP AT i_mat_det_in  INTO wa_mat_det_in where OLDMOK = ' '  OR NEWMOK = ' '.
*
*    WRITE: / '??????? ERROR =  ' , wa_mat_det_in.
*
*  ENDLOOP.
