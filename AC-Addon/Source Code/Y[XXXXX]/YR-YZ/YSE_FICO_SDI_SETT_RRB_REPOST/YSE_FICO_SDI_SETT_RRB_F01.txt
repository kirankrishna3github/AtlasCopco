*----------------------------------------------------------------------*
***INCLUDE YSE_FICO_SDI_SETT_RRB_F01 .
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  copy_chars
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM COPY_CHARS USING P_ITEM.

  FIELD-SYMBOLS: <FS_FIELD> TYPE ANY.

  DATA: REF_TABLE_DES  TYPE REF TO CL_ABAP_TABLEDESCR,
        STRUCTREF  TYPE REF TO CL_ABAP_STRUCTDESCR,
        IDETAILS   TYPE ABAP_COMPDESCR_TAB,
        XDETAILS   TYPE ABAP_COMPDESCR.


  STRUCTREF ?= CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( 'CE41000' ).

  IDETAILS[] = STRUCTREF->COMPONENTS[].


  LOOP AT IDETAILS INTO XDETAILS WHERE NAME NE 'MANDT'.
    IF SY-SUBRC NE 0.
      EXIT.
    ELSEIF XDETAILS-NAME EQ 'AKTBO'
      OR   XDETAILS-NAME EQ 'PAOBJNR'
      OR   XDETAILS-NAME EQ 'PASUBNR'
      OR   XDETAILS-NAME EQ 'BISDAT'
      OR   XDETAILS-NAME EQ 'KNT_FRM_KZ'
      OR   XDETAILS-NAME EQ 'UNUSED_CE3'.
*     or   XDETAILS-NAME eq 'AUFNR'
*     or   XDETAILS-NAME eq 'MEINH'.
      CONTINUE.
    ELSE.
      CLEAR GS_CRITERIA.
      ASSIGN COMPONENT XDETAILS-NAME OF STRUCTURE GS_CE41000 TO <FS_FIELD>.
      MOVE:  P_ITEM         TO   GS_CRITERIA-ITEMNO_ACC,
*             xdetails-name  to   gs_criteria-fieldname,
             <FS_FIELD>     TO   GS_CRITERIA-CHARACTER.
      CASE XDETAILS-NAME.
        WHEN 'AUFNR'.
          MOVE 'RKAUFNR' TO GS_CRITERIA-FIELDNAME.
        WHEN 'MEINH'.
          MOVE 'VV010_ME' TO GS_CRITERIA-FIELDNAME.
        WHEN OTHERS.
          MOVE XDETAILS-NAME  TO   GS_CRITERIA-FIELDNAME.
      ENDCASE.
      APPEND GS_CRITERIA TO GT_CRITERIA.
    ENDIF.
  ENDLOOP.


ENDFORM.                    " copy_chars
*&---------------------------------------------------------------------*
*&      Form  create_line_10
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM   CREATE_LINE_10 .
  PERFORM COPY_CHARS USING '10'.              "Copy the chars for item 10

  CLEAR GS_VALUEFIELD.
  GS_VALUEFIELD-ITEMNO_ACC = '10'.
  GS_VALUEFIELD-FIELDNAME = 'VV100'.
  GS_VALUEFIELD-AMT_VALCOM = GS_DMR-NETWR * -1.
  GS_VALUEFIELD-CURRENCY = GV_WAERS.
  APPEND GS_VALUEFIELD TO GT_VALUEFIELD.

  CLEAR: GS_ACCOUNTGL.
  GS_ACCOUNTGL-ITEMNO_ACC = '10'.
  GS_ACCOUNTGL-GL_ACCOUNT = P_RE_REV.
  GS_ACCOUNTGL-TAX_CODE   = GV_TAX_CODE.
  GS_ACCOUNTGL-ITEM_TEXT  = 'RRB reposting'.                "#EC *
  GS_ACCOUNTGL-COMP_CODE  = GV_BUKRS.
  GS_ACCOUNTGL-FUNC_AREA  = '2051'.
  GS_ACCOUNTGL-PLANT      = GS_CE41000-WERKS.
  GS_ACCOUNTGL-FIS_PERIOD = GV_PERIOD.
  GS_ACCOUNTGL-FISC_YEAR  = SO_LETJA-LOW.
  GS_ACCOUNTGL-PSTNG_DATE = GV_DOC_DATE.
  CONCATENATE GS_DMR-VGBEL GS_DMR-VGPOS INTO GS_ACCOUNTGL-ALLOC_NMBR SEPARATED BY SPACE.
  GS_ACCOUNTGL-PROFIT_CTR = GS_CE41000-PRCTR.
  APPEND GS_ACCOUNTGL TO GT_ACCOUNTGL.

  CLEAR GS_CURRENCYAMOUNT.
  GS_CURRENCYAMOUNT-ITEMNO_ACC = '10'.
  GS_CURRENCYAMOUNT-CURRENCY = GV_WAERS.
  GS_CURRENCYAMOUNT-AMT_DOCCUR = GS_DMR-NETWR.
  APPEND GS_CURRENCYAMOUNT TO GT_CURRENCYAMOUNT.

ENDFORM.                    " create_line_10
*&---------------------------------------------------------------------*
*&      Form  create_line_20
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CREATE_LINE_20 .
  PERFORM COPY_CHARS USING '20'.              "Copy the chars for item 20

  CLEAR GS_VALUEFIELD.
  GS_VALUEFIELD-ITEMNO_ACC = '20'.
  GS_VALUEFIELD-FIELDNAME = 'VV200'.
  GS_VALUEFIELD-AMT_VALCOM = GS_DMR-WAVWR * -1.
  GS_VALUEFIELD-CURRENCY = GS_DMR-WAERK.
  APPEND GS_VALUEFIELD TO GT_VALUEFIELD.

  CLEAR: GS_ACCOUNTGL.
  GS_ACCOUNTGL-ITEMNO_ACC = '20'.
  GS_ACCOUNTGL-GL_ACCOUNT = P_RE_COS.
  GS_ACCOUNTGL-ITEM_TEXT  = 'RRB reposting'.
  GS_ACCOUNTGL-COMP_CODE  = GV_BUKRS.
  GS_ACCOUNTGL-FUNC_AREA  = '2061'.
  GS_ACCOUNTGL-PLANT      = GS_CE41000-WERKS.
  GS_ACCOUNTGL-FIS_PERIOD = GV_PERIOD.
  GS_ACCOUNTGL-FISC_YEAR  = SO_LETJA-LOW.
  GS_ACCOUNTGL-PSTNG_DATE = GV_DOC_DATE.
  CONCATENATE GS_DMR-VGBEL GS_DMR-VGPOS INTO GS_ACCOUNTGL-ALLOC_NMBR SEPARATED BY SPACE.
  GS_ACCOUNTGL-PROFIT_CTR = GS_CE41000-PRCTR.
  APPEND GS_ACCOUNTGL TO GT_ACCOUNTGL.

  CLEAR GS_CURRENCYAMOUNT.
  GS_CURRENCYAMOUNT-ITEMNO_ACC = '20'.
  GS_CURRENCYAMOUNT-CURRENCY = GV_WAERS.
  GS_CURRENCYAMOUNT-AMT_DOCCUR = GS_DMR-WAVWR * -1.
  APPEND GS_CURRENCYAMOUNT TO GT_CURRENCYAMOUNT.

ENDFORM.                    " create_line_20
*&---------------------------------------------------------------------*
*&      Form  create_line_30
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CREATE_LINE_30 .
  PERFORM COPY_CHARS USING '30'.              "Copy the chars for item 30

  PERFORM RRB_PC_DERIVATION USING '30'.

  GS_VALUEFIELD-ITEMNO_ACC = '30'.
  GS_VALUEFIELD-FIELDNAME = 'VV100'.
  GS_VALUEFIELD-AMT_VALCOM = GS_DMR-NETWR.
  GS_VALUEFIELD-CURRENCY = GV_WAERS.
  APPEND GS_VALUEFIELD TO GT_VALUEFIELD.

  CLEAR: GS_ACCOUNTGL.
  GS_ACCOUNTGL-ITEMNO_ACC = '30'.
  GS_ACCOUNTGL-GL_ACCOUNT = P_REVS.
  GS_ACCOUNTGL-TAX_CODE   = GV_TAX_CODE.
  GS_ACCOUNTGL-ITEM_TEXT  = 'RRB reposting'.
  GS_ACCOUNTGL-COMP_CODE  = GV_BUKRS.
  GS_ACCOUNTGL-FUNC_AREA  = '2051'.
  GS_ACCOUNTGL-PLANT      = GS_CE41000-WERKS.
  GS_ACCOUNTGL-FIS_PERIOD = GV_PERIOD.
  GS_ACCOUNTGL-FISC_YEAR  = SO_LETJA-LOW.
  GS_ACCOUNTGL-PSTNG_DATE = GV_DOC_DATE.
  CONCATENATE GS_DMR-VGBEL GS_DMR-VGPOS INTO GS_ACCOUNTGL-ALLOC_NMBR SEPARATED BY SPACE.
  READ TABLE GT_CRITERIA INTO GS_CRITERIA
  WITH KEY ITEMNO_ACC = '30'
       FIELDNAME = 'PRCTR'.
  GS_ACCOUNTGL-PROFIT_CTR = GS_CRITERIA-CHARACTER.
  APPEND GS_ACCOUNTGL TO GT_ACCOUNTGL.

  CLEAR GS_CURRENCYAMOUNT.
  GS_CURRENCYAMOUNT-ITEMNO_ACC = '30'.
  GS_CURRENCYAMOUNT-CURRENCY = GV_WAERS.
  GS_CURRENCYAMOUNT-AMT_DOCCUR = GS_DMR-NETWR * -1.
  APPEND GS_CURRENCYAMOUNT TO GT_CURRENCYAMOUNT.

ENDFORM.                    " create_line_30
*&---------------------------------------------------------------------*
*&      Form  create_line_40
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CREATE_LINE_40 .
  PERFORM COPY_CHARS USING '40'.              "Copy the chars for item 40

  PERFORM RRB_PC_DERIVATION USING '40'.

  CLEAR GS_VALUEFIELD.
  GS_VALUEFIELD-ITEMNO_ACC = '40'.
  GS_VALUEFIELD-FIELDNAME = 'VV200'.
  GS_VALUEFIELD-AMT_VALCOM = GS_DMR-WAVWR.
  GS_VALUEFIELD-CURRENCY = GS_DMR-WAERK.
  APPEND GS_VALUEFIELD TO GT_VALUEFIELD.

  CLEAR: GS_ACCOUNTGL.
  GS_ACCOUNTGL-ITEMNO_ACC = '40'.
  GS_ACCOUNTGL-GL_ACCOUNT = P_COSTS.
  GS_ACCOUNTGL-ITEM_TEXT  = 'RRB reposting'.
  GS_ACCOUNTGL-COMP_CODE  = GV_BUKRS.
  GS_ACCOUNTGL-FUNC_AREA  = '2061'.
  GS_ACCOUNTGL-PLANT      = GS_CE41000-WERKS.
  GS_ACCOUNTGL-FIS_PERIOD = GV_PERIOD.
  GS_ACCOUNTGL-FISC_YEAR  = SO_LETJA-LOW.
  GS_ACCOUNTGL-PSTNG_DATE = GV_DOC_DATE.
  CONCATENATE GS_DMR-VGBEL GS_DMR-VGPOS INTO GS_ACCOUNTGL-ALLOC_NMBR SEPARATED BY SPACE.
  READ TABLE GT_CRITERIA INTO GS_CRITERIA
  WITH KEY ITEMNO_ACC = '40'
       FIELDNAME = 'PRCTR'.
  GS_ACCOUNTGL-PROFIT_CTR = GS_CRITERIA-CHARACTER.
  APPEND GS_ACCOUNTGL TO GT_ACCOUNTGL.

  CLEAR GS_CURRENCYAMOUNT.
  GS_CURRENCYAMOUNT-ITEMNO_ACC = '40'.
  GS_CURRENCYAMOUNT-CURRENCY = GV_WAERS.
  GS_CURRENCYAMOUNT-AMT_DOCCUR = GS_DMR-WAVWR.
  APPEND GS_CURRENCYAMOUNT TO GT_CURRENCYAMOUNT.

ENDFORM.                    " create_line_40
*&---------------------------------------------------------------------*
*&      Form  create_header
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CREATE_HEADER .

  GS_DOCUMENTHEADER-HEADER_TXT =  'RRB reposting'.          "#EC *
  GS_DOCUMENTHEADER-COMP_CODE  =  GV_BUKRS.
  GS_DOCUMENTHEADER-USERNAME   =  SY-UNAME.
  GS_DOCUMENTHEADER-BUS_ACT    =  'RFBU'.
*  gs_documentheader-doc_date   =  gv_doc_date.
*  gs_documentheader-pstng_date =  sy-datum.
*CGEE 03/09/2007 Turn the assignment to these variables around
  GS_DOCUMENTHEADER-DOC_DATE   =  SY-DATUM.
  GS_DOCUMENTHEADER-PSTNG_DATE =  GV_DOC_DATE.
*------------------------------------------------
  GS_DOCUMENTHEADER-FISC_YEAR  =  SO_LETJA-LOW.
  GS_DOCUMENTHEADER-FIS_PERIOD =  GV_PERIOD.
  GS_DOCUMENTHEADER-DOC_TYPE   =  'SA'.
  GS_DOCUMENTHEADER-REF_DOC_NO =  GS_DMR-VGBEL.

ENDFORM.                    " create_header
*&---------------------------------------------------------------------*
*&      Form  execute_repost
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM EXECUTE_REPOST .
  IF NOT GS_DMR-ORIG_REPOST IS INITIAL.
    PERFORM REVERSE_POSTING CHANGING GV_SUBRC.
  ENDIF.
  IF GV_SUBRC NE 0.
    "Write error log
  ELSE.
    CLEAR: GT_RETURN[], GV_OBJKEY.
    CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
      EXPORTING
        DOCUMENTHEADER = GS_DOCUMENTHEADER
      IMPORTING
        OBJ_KEY        = GV_OBJKEY
        OBJ_TYPE       = GV_OBTYPE
        OBJ_SYS        = GV_OBSYS
      TABLES
        ACCOUNTGL      = GT_ACCOUNTGL
        CURRENCYAMOUNT = GT_CURRENCYAMOUNT
        CRITERIA       = GT_CRITERIA
        VALUEFIELD     = GT_VALUEFIELD
        RETURN         = GT_RETURN.

    LOOP AT GT_RETURN INTO GS_RETURN
      WHERE TYPE EQ 'E'.
      "Show error messages
      WRITE: /, 'E',GS_RETURN-MESSAGE.
    ENDLOOP.
    IF SY-SUBRC NE 0.      "No error messages, so commit and show success message
      READ TABLE GT_RETURN INTO GS_RETURN INDEX 1.
      WRITE: /, 'S', GS_RETURN-MESSAGE, GS_DMR-VBELN, GS_DMR-VGBEL, GS_DMR-VGPOS.
      CLEAR GS_REPOST.
      MOVE: GV_BUKRS        TO GS_REPOST-BUKRS,
            GV_OBJKEY       TO GS_REPOST-OBJ_KEY,
            GV_OBTYPE       TO GS_REPOST-OBJ_TYP,
            GV_OBSYS        TO GS_REPOST-OBJ_SYS,
            'RFBU'          TO GS_REPOST-BUS_ACT,
            SO_LETJA-LOW    TO GS_REPOST-GJAHR,
            GS_DMR-VBELN    TO GS_REPOST-KDAUF,
            GS_DMR-POSNR    TO GS_REPOST-KDPOS,
            GS_DMR-BILLING_DOC TO GS_REPOST-BILLING_DOC.
      INSERT INTO YSE_COBRB_PROCES VALUES GS_REPOST.

      COMMIT WORK AND WAIT.
    ENDIF.
  ENDIF.


ENDFORM.                    " execute_repost
*&---------------------------------------------------------------------*
*&      Form  reverse_posting
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM REVERSE_POSTING CHANGING P_SUBRC.
  DATA: LS_REVERSAL TYPE BAPIACREV.
  CLEAR: LS_REVERSAL, GT_RETURN[].
*Fill reversal structure
  MOVE: GS_DMR-ORIG_REPOST TO LS_REVERSAL-OBJ_KEY,
        GS_DMR-ORIG_TYPE TO LS_REVERSAL-OBJ_TYPE,
        GS_DMR-ORIG_SYS TO LS_REVERSAL-OBJ_SYS,
        GS_DMR-ORIG_REPOST TO LS_REVERSAL-OBJ_KEY_R,
        GV_DOC_DATE TO LS_REVERSAL-PSTNG_DATE,
        GV_PERIOD TO LS_REVERSAL-FIS_PERIOD.


  CALL FUNCTION 'BAPI_ACC_DOCUMENT_REV_POST'
    EXPORTING
      REVERSAL       = LS_REVERSAL
      BUS_ACT        = GS_DMR-ORIG_BUS_ACT
   IMPORTING
*     OBJ_TYPE       =
     OBJ_KEY        = GS_REVERSE-OBJ_KEY_REV
*     OBJ_SYS        =
    TABLES
      RETURN         = GT_RETURN
            .

  LOOP AT GT_RETURN INTO GS_RETURN
    WHERE TYPE EQ 'E'.
  ENDLOOP.
  IF SY-SUBRC NE 0.
    MOVE: GV_BUKRS              TO GS_REVERSE-BUKRS,
          GS_DMR-ORIG_REPOST    TO GS_REVERSE-OBJ_KEY,
          GS_DMR-ORIG_TYPE       TO GS_REVERSE-OBJ_TYP,
          GS_DMR-ORIG_SYS        TO GS_REVERSE-OBJ_SYS,
          GS_DMR-ORIG_BUS_ACT    TO GS_REVERSE-BUS_ACT,
          GS_DMR-ORIG_GJAHR    TO GS_REVERSE-GJAHR,
          GS_DMR-VBELN    TO GS_REVERSE-KDAUF,
          GS_DMR-POSNR    TO GS_REVERSE-KDPOS.
    MODIFY YSE_COBRB_PROCES FROM GS_REVERSE.
    P_SUBRC = 0.
    COMMIT WORK AND WAIT.
  ELSE.
    P_SUBRC = 4.
  ENDIF.



ENDFORM.                    " reverse_posting
*&---------------------------------------------------------------------*
*&      Form  rrb_pc_derivation
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM RRB_PC_DERIVATION USING P_ITEM.
*  append gs_criteria to gt_criteria.
  DATA: LV_EQUNR TYPE EQUNR,
        LV_WERKS TYPE WERKS,
        LV_MATNR_EQUNR TYPE MATNR,
        LV_PRDHA_EQUNR TYPE PRODH_D,
        LV_PRDHA_PRCTR TYPE PRCTR,
        LV_PLC_TEMP(4) TYPE C,
        LV_PRDHA_PLC(4) TYPE C,
        LV_KUNNR TYPE KUNNR.

  DATA: WA_PRCTR TYPE YSE_PRCTR_DERIV.

*Get the equnr and plant from char table
  READ TABLE GT_CRITERIA INTO GS_CRITERIA
    WITH KEY ITEMNO_ACC = P_ITEM
         FIELDNAME = 'EQUNR'.
  IF SY-SUBRC EQ 0.
    MOVE GS_CRITERIA-CHARACTER TO LV_EQUNR.
  ENDIF.
  READ TABLE GT_CRITERIA INTO GS_CRITERIA
  WITH KEY ITEMNO_ACC = P_ITEM
       FIELDNAME = 'WERKS'.
  IF SY-SUBRC EQ 0.
    MOVE GS_CRITERIA-CHARACTER TO LV_WERKS.
  ENDIF.
  READ TABLE GT_CRITERIA INTO GS_CRITERIA
  WITH KEY ITEMNO_ACC = P_ITEM
       FIELDNAME = 'KNDNR'.
  IF SY-SUBRC EQ 0.
    MOVE GS_CRITERIA-CHARACTER TO LV_KUNNR.
  ENDIF.


*  SELECT SINGLE MATNR FROM V_EQUI INTO LV_MATNR_EQUNR
*    WHERE EQUNR EQ lv_EQUNR.

  IF SY-SUBRC EQ 0.
*    SELECT SINGLE PRDHA FROM MARA INTO LV_PRDHA_EQUNR
**               WHERE MATNR EQ LV_MATNR_EQUNR.
*                WHERE MATNR EQ gs_dmr-matnr.
    SELECT SINGLE PRODH FROM MVKE INTO LV_PRDHA_EQUNR
                WHERE MATNR EQ GS_DMR-MATNR
                  AND VKORG EQ GS_DMR-VKORG
                  AND VTWEG EQ GS_DMR-VTWEG.

    IF SY-SUBRC EQ 0.
      SELECT SINGLE PRCTR FROM MARC INTO LV_PRDHA_PRCTR
               WHERE MATNR EQ GS_DMR-MATNR        "changed to vbap-matnr
               AND WERKS = LV_WERKS.

*Begin Addition of prctr from derive table
      SELECT SINGLE * FROM YSE_PRCTR_DERIV INTO WA_PRCTR
                              WHERE VTWEG EQ '01' AND
                                    PGC EQ LV_PRDHA_EQUNR+4(4).
      IF SY-SUBRC EQ 0.
        MOVE WA_PRCTR-PRCTR TO LV_PRDHA_PRCTR.
      ENDIF.

*End addition

*        IF SY-SUBRC = 0.
      IF NOT LV_PRDHA_PRCTR IS INITIAL.
        LV_PLC_TEMP = LV_PRDHA_PRCTR+6(4).
        SELECT SINGLE TARGET1 FROM K9RCD11000009 INTO LV_PRDHA_PLC"#EC *
               WHERE SOUR1_FROM >= LV_PLC_TEMP              "#EC *
                AND SOUR1_TO <= LV_PLC_TEMP                 "#EC *
                AND VALID_FROM <= SY-DATUM.
      ENDIF.
    ENDIF.
  ENDIF.


*  ---------------------------------------------------------------------------  *
*  New logic for it derivation                                                  *
*  ---------------------------------------------------------------------------  *
  DATA: WA_PRCTR_VKORG TYPE YSE_PRCTR_VKORG.
  DATA: V_BRAN1 TYPE KNA1-BRAN1.
  DATA: WA_PRCTR_CLASS TYPE YSE_PRCTR_CLASS.
  DATA: V_CLASS TYPE CHAR4.
*DATA: WA_PRCTR TYPE YSE_PRCTR_DERIV.
  DATA: LV_PRCTR TYPE PRCTR.

  CLEAR WA_PRCTR_VKORG.
*SELECTION 1
  SELECT SINGLE * FROM YSE_PRCTR_VKORG INTO WA_PRCTR_VKORG
    WHERE VKORG EQ GS_DMR-VKORG.

  IF SY-SUBRC EQ 0.
*SELECTION 2
    CLEAR V_BRAN1.
    SELECT SINGLE BRAN1 FROM KNA1 INTO V_BRAN1
           WHERE KUNNR EQ LV_KUNNR.
    IF SY-SUBRC EQ 0.
      CLEAR WA_PRCTR_CLASS.
      SELECT SINGLE * FROM YSE_PRCTR_CLASS INTO WA_PRCTR_CLASS
             WHERE SPART EQ GS_DMR-SPART AND
             BRAN1 EQ V_BRAN1.
      IF SY-SUBRC EQ 0.
        V_CLASS = WA_PRCTR_CLASS-CLASS.
      ENDIF.
    ENDIF.

*-----------------------
*V_class will be default empty or it will be filled in in the logic above via the 2 extra tables.
    CLEAR WA_PRCTR.
    SELECT SINGLE * FROM YSE_PRCTR_DERIV INTO WA_PRCTR
                      WHERE VTWEG EQ GS_DMR-VTWEG AND
                            PGC EQ LV_PRDHA_EQUNR+4(4) AND
                            CLASS EQ V_CLASS.
    IF SY-SUBRC EQ 0.
*Excellent, now get the GAC and PGC and assign accordingly
      LV_PRDHA_EQUNR(4) = WA_PRCTR-REP_GAC.
      LV_PRDHA_EQUNR+4(4) = WA_PRCTR-REP_PGC.
*    lv_prctr         = WA_PRCTR-prctr.
      LV_PRDHA_PRCTR   = WA_PRCTR-PRCTR.
    ENDIF.

**Overwrite prctr
*  read table gt_criteria into gs_criteria
*  with key itemno_acc = p_item
*       fieldname = 'PRCTR'.
*  if sy-subrc eq 0.
*    move lv_prctr to gs_criteria-CHARACTER.
*    modify gt_criteria from gs_criteria
*      transporting character
*      where ( itemno_acc = p_item )
*        and ( fieldname = 'PRCTR' ).
*  endif.
  ENDIF.
*  ---------------------------------------------------------------------------  *
*  End of new logic for it derivation                                           *
*  ---------------------------------------------------------------------------  *


*Overwrite prodh
  READ TABLE GT_CRITERIA INTO GS_CRITERIA
  WITH KEY ITEMNO_ACC = P_ITEM
       FIELDNAME = 'PRODH'.
  IF SY-SUBRC EQ 0.
    MOVE LV_PRDHA_EQUNR TO GS_CRITERIA-CHARACTER.
    MODIFY GT_CRITERIA FROM GS_CRITERIA
      TRANSPORTING CHARACTER
      WHERE ( ITEMNO_ACC = P_ITEM )
        AND ( FIELDNAME = 'PRODH' ).
  ENDIF.

*Overwrite profitcenter
  READ TABLE GT_CRITERIA INTO GS_CRITERIA
  WITH KEY ITEMNO_ACC = P_ITEM
       FIELDNAME = 'PRCTR'.
  IF SY-SUBRC EQ 0.
    MOVE LV_PRDHA_PRCTR TO GS_CRITERIA-CHARACTER.
    MODIFY GT_CRITERIA FROM GS_CRITERIA
      TRANSPORTING CHARACTER
      WHERE ( ITEMNO_ACC = P_ITEM )
        AND ( FIELDNAME = 'PRCTR' ).
  ENDIF.
*Overwrite PLC
  READ TABLE GT_CRITERIA INTO GS_CRITERIA
  WITH KEY ITEMNO_ACC = P_ITEM
  FIELDNAME = 'WW002'.
  IF SY-SUBRC EQ 0.
    MOVE LV_PRDHA_PLC TO GS_CRITERIA-CHARACTER.
    MODIFY GT_CRITERIA FROM GS_CRITERIA
    TRANSPORTING CHARACTER
    WHERE ( ITEMNO_ACC = P_ITEM )
      AND ( FIELDNAME = 'WW002' ).

  ENDIF.
*Overwrite GAC
  READ TABLE GT_CRITERIA INTO GS_CRITERIA
  WITH KEY ITEMNO_ACC = P_ITEM
       FIELDNAME = 'WW006'.
  IF SY-SUBRC EQ 0.
    MOVE LV_PRDHA_EQUNR(4) TO GS_CRITERIA-CHARACTER.
    MODIFY GT_CRITERIA FROM GS_CRITERIA
      TRANSPORTING CHARACTER
      WHERE ( ITEMNO_ACC = P_ITEM )
        AND ( FIELDNAME = 'WW006' ).
  ENDIF.
*Overwrite GAC
  READ TABLE GT_CRITERIA INTO GS_CRITERIA
  WITH KEY ITEMNO_ACC = P_ITEM
       FIELDNAME = 'WW007'.
  IF SY-SUBRC EQ 0.
    MOVE LV_PRDHA_EQUNR+4(4) TO GS_CRITERIA-CHARACTER.
    MODIFY GT_CRITERIA FROM GS_CRITERIA
      TRANSPORTING CHARACTER
      WHERE ( ITEMNO_ACC = P_ITEM )
        AND ( FIELDNAME = 'WW007' ).
  ENDIF.

*delete gt_criteria where itemno_acc = p_item
*      and fieldname = 'KAUFN'.
*
*delete gt_criteria where itemno_acc = p_item
*      and fieldname = 'KDPOS'.


ENDFORM.                    " rrb_pc_derivation
*&---------------------------------------------------------------------*
*&      Form  execute_copa_repost_sdi
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM EXECUTE_COPA_REPOST_SDI .
*Get all SDI's of current DMR.
  DATA: LS_COMWA TYPE VBCO6,
        LT_VBFA TYPE STANDARD TABLE OF VBFA,
        LT_SDI_COPA TYPE STANDARD TABLE OF YSE_SDI_COPA,
        LS_SDI_COPA TYPE YSE_SDI_COPA,
        LV_COPAS TYPE I.


  FIELD-SYMBOLS: <FS_VBFA> TYPE VBFA,
                 <FS_CE11DEL> TYPE CE11000.

*Read doc flow of DMR
  MOVE: GS_LAST_DMR-VBELN TO LS_COMWA-VBELN,
        GS_LAST_DMR-POSNR TO LS_COMWA-POSNR.

  CALL FUNCTION 'RV_ORDER_FLOW_INFORMATION'
    EXPORTING
      COMWA    = LS_COMWA
    TABLES
      VBFA_TAB = LT_VBFA.
*Get SDI's from document flow
  LOOP AT LT_VBFA ASSIGNING <FS_VBFA>
    WHERE VBELN EQ GS_LAST_DMR-VBELN
    AND POSNN > 0
    AND VBTYP_V = 'C'.
    MOVE: <FS_VBFA>-VBELV TO GS_SDI-VBELN.
*          <fs_vbfa>-posnv to gs_sdi-posnr.

    APPEND GS_SDI TO GT_SDI.
  ENDLOOP.
*Delete duplicates
  DELETE ADJACENT DUPLICATES FROM GT_SDI.
  DATA: BEGIN OF LT_SALES_MAT OCCURS 0,
          VBELN TYPE VBELN,
          POSNR TYPE POSNR,
          MATNR TYPE MATNR,
          PSTYV TYPE PSTYV,
        END OF LT_SALES_MAT.
  DATA: LS_SALES_MAT LIKE LINE OF LT_SALES_MAT.

  DATA: LV_TMP TYPE AD01INVMAT.

*
  SELECT VBELN POSNR MATNR PSTYV FROM VBAP INTO CORRESPONDING FIELDS OF TABLE LT_SALES_MAT
    FOR ALL ENTRIES IN GT_SDI
    WHERE VBELN = GT_SDI-VBELN
    AND ( PSTYV = 'ZO04' OR PSTYV = 'ZO03' ).

**Check every material for raw material by checking the material group, only repost zmat
  DATA: LV_MATNR TYPE MATNR,
        LV_MTART TYPE MTART.

  LOOP AT LT_SALES_MAT INTO LS_SALES_MAT WHERE PSTYV = 'ZO04'.
    SELECT SINGLE MATNR MTART FROM MARA INTO (LV_MATNR, LV_MTART)
      WHERE MATNR = LS_SALES_MAT-MATNR.
    IF LV_MTART <> 'ZMAT'.
      DELETE LT_SALES_MAT WHERE MATNR EQ LV_MATNR.
    ENDIF.

  ENDLOOP.

  CLEAR GT_SDI[].

  LOOP AT LT_SALES_MAT INTO LS_SALES_MAT.
    MOVE: LS_SALES_MAT-VBELN TO GS_SDI-VBELN,
          LS_SALES_MAT-POSNR TO GS_SDI-POSNR,
          LS_SALES_MAT-PSTYV TO GS_SDI-PSTYV.
    APPEND GS_SDI TO GT_SDI.
  ENDLOOP.

*For all found SDI's material items, read copa data and repost
  LOOP AT GT_SDI ASSIGNING <FS_SDI>.

*Get all copa postings to filter out the not yet processed ones
    SELECT * FROM CE11000 INTO TABLE GT_CE11000
      WHERE KAUFN EQ <FS_SDI>-VBELN
            AND KDPOS EQ <FS_SDI>-POSNR
            AND VRGAR = 'A'
            ORDER BY STO_BELNR.

    SELECT * FROM YSE_SDI_COPA INTO TABLE LT_SDI_COPA
      FOR ALL ENTRIES IN GT_CE11000
*      where PALEDGER = gt_ce11000-paledger
*      and VRGAR = gt_ce11000-vrgar
*      and VERSI = gt_ce11000-versi
      WHERE PERIO = GT_CE11000-PERIO
*      and PAOBJNR = gt_ce11000-paobjnr
*      and PASUBNR = gt_ce11000-pasubnr
      AND BELNR = GT_CE11000-BELNR.
*      and POSNR = gt_ce11000-posnr.

    IF SY-SUBRC EQ 0.  "Delete already processed copa items, they don't need to be reposted again.
      LOOP AT GT_CE11000 ASSIGNING <FS_CE11000>.
        READ TABLE LT_SDI_COPA INTO LS_SDI_COPA
          WITH KEY MANDT = <FS_CE11000>-MANDT
*             PALEDGER = <fs_ce11000>-paledger
*            VRGAR = <fs_ce11000>-vrgar
*            VERSI = <fs_ce11000>-versi
            PERIO = <FS_CE11000>-PERIO
*            PAOBJNR = <fs_ce11000>-paobjnr
*            PASUBNR = <fs_ce11000>-pasubnr
            BELNR = <FS_CE11000>-BELNR.
*            POSNR = <fs_ce11000>-posnr.
        IF SY-SUBRC EQ 0.
          DELETE GT_CE11000
            WHERE MANDT = <FS_CE11000>-MANDT
*            where PALEDGER = <fs_ce11000>-paledger
*            and VRGAR = <fs_ce11000>-vrgar
*            and VERSI = <fs_ce11000>-versi
             AND PERIO = <FS_CE11000>-PERIO
*            and PAOBJNR = <fs_ce11000>-paobjnr
*            and PASUBNR = <fs_ce11000>-pasubnr
            AND BELNR = <FS_CE11000>-BELNR.
*            and POSNR = <fs_ce11000>-posnr.
        ENDIF.
      ENDLOOP.
    ENDIF.

***All copa postings that havent been reposted yet have to be reposted, the already reposted items are stored in a custom table
    DESCRIBE TABLE GT_CE11000 LINES LV_COPAS.
    CHECK LV_COPAS > 0.

*Now we can copy them, derive the new GAC and PGC and repost them
**Check if we only have to reverse and repost the parts of the service product
    IF <FS_SDI>-PSTYV = 'ZO03'.    "Service product
      PERFORM REVERSE_ONLY_PARTS_SDI.
    ELSE.

      CLEAR GT_ITEMS[].
      LOOP AT GT_CE11000 ASSIGNING <FS_CE11000>.
        MOVE-CORRESPONDING <FS_CE11000> TO LS_SDI_COPA.
        INSERT YSE_SDI_COPA FROM LS_SDI_COPA.
        COMMIT WORK AND WAIT.
*Reversal
        PERFORM REVERSE_ITEM.
      ENDLOOP.
      PERFORM EXECUTE_SDI_REPOST.

      CLEAR GT_ITEMS[].
      LOOP AT GT_CE11000 ASSIGNING <FS_CE11000>.
*Repost with new GAC, PGC etc.
        PERFORM REPOST_ITEM.
      ENDLOOP.
      PERFORM EXECUTE_SDI_REPOST.
    ENDIF.
  ENDLOOP.


ENDFORM.                    " execute_copa_repost_sdi
*&---------------------------------------------------------------------*
*&      Form  set_reverse_number
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_GS_ITEMS_VV010  text
*----------------------------------------------------------------------*
FORM SET_REVERSE_NUMBER  CHANGING P_GS_ITEM.

  P_GS_ITEM = P_GS_ITEM * -1.

ENDFORM.                    " set_reverse_number
*&---------------------------------------------------------------------*
*&      Form  reverse_item
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM REVERSE_ITEM .
  MOVE: <FS_CE11000> TO GS_ITEMS.

  PERFORM: SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV010,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV100,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV110,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV200,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV300,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV400,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV500,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV600,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV120,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV101,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV199,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV111,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV112,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV130,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV140,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV150,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV650,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV700,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV710,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV720,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV113,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV114,
           SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV115.

  CLEAR: GS_ITEMS-MANDT, GS_ITEMS-VERSI, GS_ITEMS-PAOBJNR, GS_ITEMS-PASUBNR, GS_ITEMS-BELNR, GS_ITEMS-POSNR.

  MOVE GV_PERIO_COPA TO GS_ITEMS-PERIO.

*  move <fs_ce11000>-belnr to gs_items-STO_BELNR.

  APPEND GS_ITEMS TO GT_ITEMS.
ENDFORM.                    " reverse_item
*&---------------------------------------------------------------------*
*&      Form  repost_item
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM REPOST_ITEM .
  CLEAR GS_ITEMS.
  MOVE: <FS_CE11000> TO GS_ITEMS.
*  append gs_criteria to gt_criteria.
  DATA: LV_EQUNR TYPE EQUNR,
        LV_WERKS TYPE WERKS,
        LV_MATNR TYPE MATNR,
        LV_MATNR_EQUNR TYPE MATNR,
        LV_PRDHA_EQUNR TYPE PRODH_D,
        LV_PRDHA_PRCTR TYPE PRCTR,
        LV_PLC_TEMP(4) TYPE C,
        LV_PRDHA_PLC(4) TYPE C.


*Get the equnr and plant
  MOVE <FS_CE11000>-EQUNR TO LV_EQUNR.
  MOVE <FS_CE11000>-WERKS TO LV_WERKS.
*Get matnr
  SELECT SINGLE MATNR FROM VBAP INTO LV_MATNR
    WHERE VBELN EQ <FS_SDI>-VBELN
    AND POSNR EQ <FS_SDI>-POSNR.
*  SELECT SINGLE MATNR FROM V_EQUI INTO LV_MATNR_EQUNR
*    WHERE EQUNR EQ lv_EQUNR.

  IF SY-SUBRC EQ 0.
    SELECT SINGLE PRDHA FROM MARA INTO LV_PRDHA_EQUNR
*               WHERE MATNR EQ LV_MATNR_EQUNR.
                WHERE MATNR EQ GS_LAST_DMR-MATNR.

    IF SY-SUBRC EQ 0.
      SELECT SINGLE PRCTR FROM MARC INTO LV_PRDHA_PRCTR
               WHERE MATNR EQ LV_MATNR        "changed to vbap-matnr
               AND WERKS = LV_WERKS.
      IF SY-SUBRC = 0.
        LV_PLC_TEMP = LV_PRDHA_PRCTR+6(4).
        SELECT SINGLE TARGET1 FROM K9RCD11000009 INTO LV_PRDHA_PLC"#EC *
               WHERE SOUR1_FROM >= LV_PLC_TEMP              "#EC *
                AND SOUR1_TO <= LV_PLC_TEMP                 "#EC *
                AND VALID_FROM <= SY-DATUM.
      ENDIF.
    ENDIF.
  ENDIF.
*Overwrite prodh
  MOVE LV_PRDHA_EQUNR TO GS_ITEMS-PRODH.

*Overwrite profitcenter
  MOVE LV_PRDHA_PRCTR TO GS_ITEMS-PRCTR.
*Overwrite PLC
  MOVE LV_PRDHA_PLC TO GS_ITEMS-WW002.

*Overwrite GAC
  MOVE LV_PRDHA_EQUNR(4) TO GS_ITEMS-WW006.
*Overwrite GAC
  MOVE LV_PRDHA_EQUNR+4(4) TO GS_ITEMS-WW007.

  CLEAR: GS_ITEMS-MANDT, GS_ITEMS-VERSI, GS_ITEMS-PAOBJNR, GS_ITEMS-PASUBNR, GS_ITEMS-BELNR, GS_ITEMS-POSNR.

  MOVE GV_PERIO_COPA TO GS_ITEMS-PERIO.

  APPEND GS_ITEMS TO GT_ITEMS.

ENDFORM.                    " repost_item
*&---------------------------------------------------------------------*
*&      Form  execute_SDi_repost
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM EXECUTE_SDI_REPOST .
  DATA:  LV_ERKRS TYPE ERKRS VALUE '1000',
         LT_PALEDG TYPE COPA_YT_PALEDGER,
         LS_PALEDG TYPE LEDBO,
         LS_SDI_COPA TYPE YSE_SDI_COPA.

  CLEAR: LT_PALEDG[].

  LS_PALEDG = '01'.
  APPEND LS_PALEDG TO LT_PALEDG.

  LS_PALEDG = '02'.
  APPEND LS_PALEDG TO LT_PALEDG.

  CALL FUNCTION 'RKE_POST_ACT_LINE_ITEM_CORE'
    EXPORTING
      ERKRS                      = '1000'
      BUTYP                      = '3'
      CHECK_BELNR                = 'X'
      IS_REVERSAL                = ' '
      T_PALEDGER                 = LT_PALEDG
*   I_SCHEDMAN_KEY             =
    TABLES
      LINE_ITEM_TAB              = GT_ITEMS
   EXCEPTIONS
     ALREADY_EXISTS             = 1
     DOC_NR_IV_NOT_EXISTS       = 2
     DOC_NR_IV_OVERFLOW         = 3
     FOREIGN_LOCK               = 4
     SYSTEM_FAILURE             = 5
     OTHERS                     = 6
            .
  IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ELSE.
    MOVE-CORRESPONDING GT_ITEMS TO LS_SDI_COPA.
    INSERT YSE_SDI_COPA FROM LS_SDI_COPA.
    COMMIT WORK AND WAIT.
  ENDIF.

ENDFORM.                    " execute_SDi_repost
*&---------------------------------------------------------------------*
*&      Form  reverse_only_parts_sdi
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM REVERSE_ONLY_PARTS_SDI .
*Get all SDI's of current DMR.
  DATA: LS_COMWA TYPE VBCO6,
        LT_VBFA TYPE STANDARD TABLE OF VBFA,
        LT_SDI_COPA TYPE STANDARD TABLE OF YSE_SDI_COPA,
        LS_SDI_COPA TYPE YSE_SDI_COPA.

  CLEAR GT_ITEMS[].
  LOOP AT GT_CE11000 ASSIGNING <FS_CE11000>.
    MOVE-CORRESPONDING <FS_CE11000> TO LS_SDI_COPA.
    INSERT YSE_SDI_COPA FROM LS_SDI_COPA.
    COMMIT WORK AND WAIT.
*Reversal
    PERFORM REVERSE_ITEM_PARTS_SDI_ONLY.
  ENDLOOP.
  PERFORM EXECUTE_SDI_REPOST.

  CLEAR GT_ITEMS[].
  LOOP AT GT_CE11000 ASSIGNING <FS_CE11000>.
*Repost with new GAC, PGC etc.
    PERFORM REPOST_ITEM_SDI_PARTS_ONLY.
  ENDLOOP.
  PERFORM EXECUTE_SDI_REPOST.


ENDFORM.                    " reverse_only_parts_sdi
*&---------------------------------------------------------------------*
*&      Form  reverse_item_parts_sdi_only
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM REVERSE_ITEM_PARTS_SDI_ONLY .
  MOVE: <FS_CE11000> TO GS_ITEMS.

  CLEAR:   GS_ITEMS-VV010,
           GS_ITEMS-VV100,
           GS_ITEMS-VV110,
           GS_ITEMS-VV300,
           GS_ITEMS-VV400,
           GS_ITEMS-VV500,
           GS_ITEMS-VV600,
           GS_ITEMS-VV120,
           GS_ITEMS-VV101,
           GS_ITEMS-VV199,
           GS_ITEMS-VV111,
           GS_ITEMS-VV112,
           GS_ITEMS-VV130,
           GS_ITEMS-VV140,
           GS_ITEMS-VV150,
           GS_ITEMS-VV650,
           GS_ITEMS-VV700,
           GS_ITEMS-VV710,
           GS_ITEMS-VV720,
           GS_ITEMS-VV113,
           GS_ITEMS-VV114,
           GS_ITEMS-VV115.

  CLEAR: GS_ITEMS-MANDT, GS_ITEMS-VERSI, GS_ITEMS-PAOBJNR, GS_ITEMS-PASUBNR, GS_ITEMS-BELNR, GS_ITEMS-POSNR.

*  move <fs_ce11000>-belnr to gs_items-STO_BELNR.
  PERFORM: SET_REVERSE_NUMBER CHANGING GS_ITEMS-VV200.

  MOVE GV_PERIO_COPA TO GS_ITEMS-PERIO.

  APPEND GS_ITEMS TO GT_ITEMS.

ENDFORM.                    " reverse_item_parts_sdi_only
*&---------------------------------------------------------------------*
*&      Form  repost_item_sdi_parts_only
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM REPOST_ITEM_SDI_PARTS_ONLY .
  CLEAR GS_ITEMS.
  MOVE: <FS_CE11000> TO GS_ITEMS.
*  append gs_criteria to gt_criteria.
  DATA: LV_EQUNR TYPE EQUNR,
        LV_WERKS TYPE WERKS,
        LV_MATNR TYPE MATNR,
        LV_MATNR_EQUNR TYPE MATNR,
        LV_PRDHA_EQUNR TYPE PRODH_D,
        LV_PRDHA_PRCTR TYPE PRCTR,
        LV_PLC_TEMP(4) TYPE C,
        LV_PRDHA_PLC(4) TYPE C.


*Get the equnr and plant
  MOVE <FS_CE11000>-EQUNR TO LV_EQUNR.
  MOVE <FS_CE11000>-WERKS TO LV_WERKS.
*Get matnr
  SELECT SINGLE MATNR FROM VBAP INTO LV_MATNR
    WHERE VBELN EQ <FS_SDI>-VBELN
    AND POSNR EQ <FS_SDI>-POSNR.
*  SELECT SINGLE MATNR FROM V_EQUI INTO LV_MATNR_EQUNR
*    WHERE EQUNR EQ lv_EQUNR.

  IF SY-SUBRC EQ 0.
    SELECT SINGLE PRDHA FROM MARA INTO LV_PRDHA_EQUNR
*               WHERE MATNR EQ LV_MATNR_EQUNR.
                WHERE MATNR EQ GS_LAST_DMR-MATNR.

    IF SY-SUBRC EQ 0.
      SELECT SINGLE PRCTR FROM MARC INTO LV_PRDHA_PRCTR
               WHERE MATNR EQ LV_MATNR        "changed to vbap-matnr
               AND WERKS = LV_WERKS.
      IF SY-SUBRC = 0.
        LV_PLC_TEMP = LV_PRDHA_PRCTR+6(4).
        SELECT SINGLE TARGET1 FROM K9RCD11000009 INTO LV_PRDHA_PLC"#EC *
               WHERE SOUR1_FROM >= LV_PLC_TEMP              "#EC *
                AND SOUR1_TO <= LV_PLC_TEMP                 "#EC *
                AND VALID_FROM <= SY-DATUM.
      ENDIF.
    ENDIF.
  ENDIF.
*Overwrite prodh
  MOVE LV_PRDHA_EQUNR TO GS_ITEMS-PRODH.

*Overwrite profitcenter
  MOVE LV_PRDHA_PRCTR TO GS_ITEMS-PRCTR.
*Overwrite PLC
  MOVE LV_PRDHA_PLC TO GS_ITEMS-WW002.

*Overwrite GAC
  MOVE LV_PRDHA_EQUNR(4) TO GS_ITEMS-WW006.
*Overwrite GAC
  MOVE LV_PRDHA_EQUNR+4(4) TO GS_ITEMS-WW007.

  CLEAR: GS_ITEMS-MANDT, GS_ITEMS-VERSI, GS_ITEMS-PAOBJNR, GS_ITEMS-PASUBNR, GS_ITEMS-BELNR, GS_ITEMS-POSNR.

  CLEAR:   GS_ITEMS-VV010,
           GS_ITEMS-VV100,
           GS_ITEMS-VV110,
           GS_ITEMS-VV300,
           GS_ITEMS-VV400,
           GS_ITEMS-VV500,
           GS_ITEMS-VV600,
           GS_ITEMS-VV120,
           GS_ITEMS-VV101,
           GS_ITEMS-VV199,
           GS_ITEMS-VV111,
           GS_ITEMS-VV112,
           GS_ITEMS-VV130,
           GS_ITEMS-VV140,
           GS_ITEMS-VV150,
           GS_ITEMS-VV650,
           GS_ITEMS-VV700,
           GS_ITEMS-VV710,
           GS_ITEMS-VV720,
           GS_ITEMS-VV113,
           GS_ITEMS-VV114,
           GS_ITEMS-VV115.

  MOVE GV_PERIO_COPA TO GS_ITEMS-PERIO.

  APPEND GS_ITEMS TO GT_ITEMS.

ENDFORM.                    " repost_item_sdi_parts_only
*&---------------------------------------------------------------------*
*&      Form  get_last_date_of_period
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_LAST_DATE_OF_PERIOD .

  IF SO_LETPE-HIGH IS INITIAL.  "No range so take low
    GV_PERIOD = SO_LETPE-LOW.

    CONCATENATE SO_LETJA-LOW SO_LETPE-LOW INTO GV_PERIO_COPA.

    CALL FUNCTION 'LAST_DAY_IN_PERIOD_GET'
      EXPORTING
        I_GJAHR              = SO_LETJA-LOW
*     I_MONMIT             = 00
        I_PERIV              = 'K4'
        I_POPER              = SO_LETPE-LOW
      IMPORTING
        E_DATE               = GV_DOC_DATE
      EXCEPTIONS
        INPUT_FALSE          = 1
        T009_NOTFOUND        = 2
        T009B_NOTFOUND       = 3
        OTHERS               = 4
              .
  ELSE.  "Take highest value of range
    GV_PERIOD = SO_LETPE-HIGH.
    CONCATENATE SO_LETJA-LOW SO_LETPE-HIGH INTO GV_PERIO_COPA.

    CALL FUNCTION 'LAST_DAY_IN_PERIOD_GET'
    EXPORTING
      I_GJAHR              = SO_LETJA-LOW
*     I_MONMIT             = 00
      I_PERIV              = 'K4'
      I_POPER              = SO_LETPE-HIGH
    IMPORTING
      E_DATE               = GV_DOC_DATE
    EXCEPTIONS
      INPUT_FALSE          = 1
      T009_NOTFOUND        = 2
      T009B_NOTFOUND       = 3
      OTHERS               = 4
            .
  ENDIF.
ENDFORM.                    " get_last_date_of_period
