
*&---------------------------------------------------------------------*
*&  Include           YSE_SD_DTC_AUTOMATION_02_EV                      *
*&---------------------------------------------------------------------*
START-OF-SELECTION.

*----------------------------------------------------------------------*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
* MOD. NO.|  DATE    | NAME                 |CORRECTION NR| CHANGE REF *
*----------------------------------------------------------------------*
* MOD-002 |09.03.2016|Dashamntha            |             |CR3843      *
* Status check should be on VBUP-WBSTA instead of VBUP-LFSTA           *
*----------------------------------------------------------------------*

*Select all relevant sales docs/purchase req's/purchase order's

*  select vepvg~vbeln vepvg~vstel vepvg~ledat vepvg~kunwe
*         ekkn~ebeln ekkn~ebelp ekkn~vbelp
*         ekko~lifnr ekko~ekorg
*         vbap~werks vbap~matnr
*         marc~sernp
*    into corresponding fields of table gt_sales
*    from vepvg
*     inner join ekkn
*     on vepvg~vbeln = ekkn~vbeln
*     inner join ekko
*     on ekko~ebeln = ekkn~ebeln
*     inner join ekes
*     on ekes~ebeln = ekkn~ebeln
*     and ekes~ebelp = ekkn~ebelp
*     inner join vbap
*     on vbap~posnr = ekkn~vbelp
*     and vbap~vbeln = ekkn~vbeln
*     inner join yse_em_plant
*     on yse_em_plant~werks = vbap~werks
*     inner join marc
*     on marc~matnr = vbap~matnr
*     and marc~werks = vbap~werks
*     where vepvg~vstel in so_vstel
*     and vepvg~auart in so_auart
*     and vepvg~ledat <= p_due
*     and ekes~ebtyp = 'LA'
*
*     and vepvg~vbeln in so_vbeln.

*select   vbep~vbeln  vbep~edatu
*         ekkn~ebeln ekkn~ebelp ekkn~vbelp
*         ekko~lifnr ekko~ekorg
*         vbap~werks vbap~matnr vbap~vstel
*         marc~sernp
*    into corresponding fields of table gt_sales
*    from vbak
*      inner join vbuk on
*      vbak~vbeln = vbuk~vbeln
*      inner join vbep
*      on vbuk~vbeln = vbep~vbeln
*     inner join ekkn
*     on vbep~vbeln = ekkn~vbeln
*     and vbep~vbeln = ekkn~vbelp
*     inner join ekko
*     on ekko~ebeln = ekkn~ebeln
*     inner join ekes
*     on ekes~ebeln = ekkn~ebeln
*     and ekes~ebelp = ekkn~ebelp
*     inner join vbap
*     on vbap~posnr = ekkn~vbelp
*     and vbap~vbeln = ekkn~vbeln
*     inner join yse_em_plant
*     on yse_em_plant~werks = vbap~werks
*     inner join marc
*     on marc~matnr = vbap~matnr
*     and marc~werks = vbap~werks
*     where vbap~vstel in so_vstel
*     and vbak~auart in so_auart
*     and vbep~edatu <= p_due
*     and vbep~BMENG > 0
*     and ekes~ebtyp = 'LA'
*     and vbak~vbeln in so_vbeln
*     and vbuk~lfstk <> 'C'.

*select vbep~vbeln vbep~posnr vbep~edatu
*       vbap~werks vbap~matnr

  DATA:
    lv_condition TYPE string.
* Build condition dynamically (depending on chosen option on selection screen)
  CONCATENATE    'vbap~vstel in so_vstel'
             'and vbak~auart in so_auart'
        INTO lv_condition SEPARATED BY space.
  IF p_cdd NE space.
    CONCATENATE     lv_condition
               'and vbep~edatu <= p_due'
          INTO lv_condition SEPARATED BY space.
  ELSEIF p_mad NE space.
    CONCATENATE     lv_condition
               'and vbep~MBDAT <= p_due'
          INTO lv_condition SEPARATED BY space.
  ENDIF.
  CONCATENATE      lv_condition
              'and vbak~vbeln in so_vbeln'
              'and vbak~vkorg in so_vkorg'
              'and vbep~BMENG > 0'
              'and ekes~ebtyp = ''LA'''
              'and vbup~lfsta <> ''C'''
         INTO lv_condition SEPARATED BY space.

  SELECT   vbak~vbeln
*           vbup~lfsta     "        CR3993 del CR3993
           vbep~posnr
           vbup~lfsta      "        CR3993 INS CR3993
           vbep~edatu
           vbap~werks vbap~matnr vbap~vstel
           marc~sernp
           ekkn~ebeln ekkn~ebelp
           ekko~lifnr ekko~ekorg
* begin of insert MOD-001
           ekko~bukrs
* end of insert MOD-001

           INTO CORRESPONDING FIELDS OF TABLE gt_sales

           FROM vbak INNER JOIN vbep
             ON vbak~vbeln = vbep~vbeln
           INNER JOIN vbup
             ON vbup~vbeln = vbep~vbeln
             AND vbup~posnr = vbep~posnr
           INNER JOIN vbap
             ON vbep~vbeln = vbap~vbeln
             AND vbep~posnr = vbap~posnr
           INNER JOIN marc
             ON vbap~matnr = marc~matnr
             AND vbap~werks = marc~werks
           INNER JOIN ekkn
             ON vbap~vbeln = ekkn~vbeln
             AND vbap~posnr = ekkn~vbelp
           INNER JOIN ekes
             ON ekkn~ebeln = ekes~ebeln
             AND ekkn~ebelp = ekes~ebelp
           INNER JOIN ekko
             ON ekko~ebeln = ekes~ebeln

           WHERE (lv_condition).




  IF sy-subrc NE 0.
    IF sy-batch IS INITIAL.
      MESSAGE s000(yse_sdmm_dtc02).
      EXIT.
    ELSE.
      WRITE: 'No items selected'.                           "#EC *
      EXIT.
    ENDIF.
  ENDIF.

END-OF-SELECTION.

  DELETE ADJACENT DUPLICATES FROM gt_sales COMPARING vbeln posnr.

*Sort by vendor.
  SORT gt_sales BY vbeln posnr.

**Exclude all irelevant vendors
*  LOOP AT GT_SALES ASSIGNING <FS_SALES>.
**Check if it is a relevant vendor
*    IF NOT GT_EX_VENDORS[] IS INITIAL.
*      READ TABLE GT_EX_VENDORS ASSIGNING <FS_EX_VEND>
*        WITH KEY EKORG = <FS_SALES>-EKORG
*            LIFNR = <FS_SALES>-LIFNR.
*      IF SY-SUBRC EQ 0 AND <FS_SALES>-WERKS <> 'CN91'.      "CD1K973202
*        DELETE GT_SALES WHERE EKORG = <FS_SALES>-EKORG
*                        AND LIFNR = <FS_SALES>-LIFNR.
*        CONTINUE.
*      ENDIF.
*    ELSE.
*
*      SELECT * FROM YSE_SD_VEND_LLAB APPENDING TABLE GT_EX_VENDORS
*        WHERE EKORG EQ <FS_SALES>-EKORG
*        AND LIFNR EQ <FS_SALES>-LIFNR.
*      IF SY-SUBRC EQ 0 AND <FS_SALES>-WERKS <> 'CN91'.      "CD1K973204
*        DELETE GT_SALES WHERE EKORG = <FS_SALES>-EKORG
*                          AND LIFNR = <FS_SALES>-LIFNR.
*
*        CONTINUE.
*      ENDIF.
*    ENDIF.
*  ENDLOOP.

  DATA: it_sales TYPE TABLE OF ty_sales WITH HEADER LINE.
  CLEAR: it_sales,it_sales[].
  it_sales[] = gt_sales[].

  LOOP AT it_sales.
    IF ( it_sales-ekorg = 'CN01' AND ( it_sales-lifnr = '0102000722' or it_sales-lifnr = '0102000895' or "CQ
                                      it_sales-lifnr = '0102000906' ) ) OR  "CP)
       ( it_sales-ekorg = 'CN05' AND it_sales-lifnr = '0102000722' ) OR
       ( it_sales-ekorg = 'CN03' AND it_sales-lifnr = '0102000722' ).    " +Mod CR 3381 DTC plants Split
    ELSE.
      DELETE it_sales.
    ENDIF.
  ENDLOOP.

  CLEAR: gt_sales[].
  gt_sales[] = it_sales[].



  DESCRIBE TABLE gt_sales LINES gv_count.

  IF gv_count = 0.
    IF sy-batch IS INITIAL.
      MESSAGE s001(yse_sdmm_dtc02).
      EXIT.
    ELSE.
      WRITE: 'No sales documents found for involved vendors'. "#EC *
      EXIT.
    ENDIF.
  ENDIF.

*        CR3993 ADD log for analysis  INSERT Begin
  DATA: lv_guid TYPE cats_cproject_objguid,
        lv_erdat  TYPE sy-datum,
        lv_erzet  TYPE sy-uzeit.
  CONCATENATE sy-datum sy-uzeit INTO lv_guid.
  SORT gt_sales BY vbeln posnr.
*        CR3993 ADD log for analysis  INSERT End
*Now we can start processing the sales orders
* begin of mod CR3993 20160714
  LOOP AT gt_sales ASSIGNING <fs_sales>.
*  LOOP AT gt_sales INTO gs_sales.
* end of mod CR3993 20160714
    AT NEW vbeln.
      CLEAR: gt_sales_sernr[],
             gt_request[],
             gt_items[],
             gt_return[],
             gt_sernr[].
      LOOP AT gt_sales ASSIGNING <fs_to_do>
            WHERE vbeln EQ <fs_sales>-vbeln.

        PERFORM get_sernrs_of_so_stock.
*Start filling the sales order line item tables to process all line items together per sales order afterwards
        PERFORM fill_processing_tables.
      ENDLOOP.
*Once all line items of current order are processed, create delivery.
      CALL FUNCTION 'BAPI_DELIVERYPROCESSING_EXEC'
        TABLES
          request      = gt_request
          createditems = gt_items
          return       = gt_return.

*Check if any erros occured
      LOOP AT gt_return ASSIGNING <fs_return>
        WHERE type = 'E'.
* begin of mod CR3993 20160714
        WRITE: / <fs_sales>-vbeln, <fs_sales>-posnr, <fs_return>-message.
*        WRITE: / gs_sales-vbeln, gs_sales-posnr, <fs_return>-message.
** end of mod CR3993 20160714
      ENDLOOP.
******MOD-003 Begain***************************************************
      IF gt_items IS INITIAL AND sy-subrc EQ 0.
*      if sy-subrc eq 0.  "If errors, exit current loop
******MOD-003 End******************************************************
        CONTINUE.
      ELSE.
*       TVO 21/01/2008 -- Since in a below step (FM SD_DELIVERY_UPDATE_PICKING_1)
*       SAP standard wants to delete and re-add the serial numbers, the serial
*       numbers added by BADI YCL_IM_SE_SDMM_DEL_CRE_SP first need to be commited
*       (otherwise, a dump occurs)
        COMMIT WORK AND WAIT.
*        CR3993 ADD log for analysis  INSERT Begin 20160714
        WAIT UP TO 1 SECONDS.
*        CR3993 ADD log for analysis  INSERT End 20160714
      ENDIF.
      CLEAR: gt_return[].
*Perform picking of quantity with sernrs
      CLEAR: gt_vbpok, gs_vbkok.
*     CR3993  mod Begin 20160714

      DATA: ls_temp_vbeln TYPE vbeln,                       "insert
            ls_items      TYPE bapideliciouscreateditems.   "insert
      SORT gt_items BY document_numb document_item.         "insert
      LOOP AT gt_items INTO ls_items.                       "insert
        IF ls_items-document_numb <> ls_temp_vbeln.           "insert
          LOOP AT gt_items INTO gs_items_2
              WHERE document_numb = ls_items-document_numb."insert
*          LOOP AT gt_items ASSIGNING <fs_items>.   "del
            MOVE: gs_items_2-document_numb TO gs_vbkok-vbeln_vl.  "insert

*            WRITE: / <fs_sales>-vbeln, '|', gs_items_2-document_numb, '<>' , "inset
*                  gs_vbkok-vbeln_vl, '-1, OB generated'. " insert


*            MOVE: <fs_items>-document_numb TO gs_vbpok-vbeln_vl,  "del
*                  <fs_items>-document_item TO gs_vbpok-posnr_vl,  "del
*                  <fs_items>-quantity_sales_uom TO gs_vbpok-pikmg,  "del
*                  <fs_items>-document_numb TO gs_vbpok-vbeln,  "del
*                  <fs_items>-document_item TO gs_vbpok-posnn.  "del
            MOVE: gs_items_2-document_numb TO gs_vbpok-vbeln_vl,  "insert
                  gs_items_2-document_item TO gs_vbpok-posnr_vl,  "insert
                  gs_items_2-quantity_sales_uom TO gs_vbpok-pikmg,  "insert
                  gs_items_2-document_numb TO gs_vbpok-vbeln,  "insert
                  gs_items_2-document_item TO gs_vbpok-posnn.  "insert
*         CR3993  mod End 20160714

            APPEND gs_vbpok TO gt_vbpok.
*    Assign sernrs to delivery item if any sernr found
            LOOP AT gt_sernr ASSIGNING <fs_sernr>.
              LOOP AT gt_request INTO gs_request WHERE document_numb = <fs_sernr>-rfbel
                                                 AND document_item = <fs_sernr>-rfpos.
                LOOP AT gt_items INTO gs_items WHERE id = gs_request-id.
                  MOVE: gs_items-document_numb TO <fs_sernr>-rfbel,
                        gs_items-document_item TO <fs_sernr>-rfpos.
                ENDLOOP.
              ENDLOOP.
            ENDLOOP.
          ENDLOOP.                          "insert
          PERFORM process_pgi.              "insert
          CLEAR: gs_vbkok, gv_input.        " insert
          REFRESH:  gt_sernr[],             " insert
                    gt_vbpok[].             " insert
        ENDIF.
          ls_temp_vbeln = ls_items-document_numb. "insert

      ENDLOOP.
*******BEGIN OF CR3993 - FIX BUG -INSERT 20160718
      IF sy-subrc <> 0.
        WRITE: / 'No delivery to pick and issue for sales order ', <fs_sales>-vbeln. "#EC *
      ENDIF.
      IF 1 = 1.
        CONTINUE.
      ENDIF.
*******END OF CR3993 - FIX BUG -INSERT 20160718
      IF sy-subrc EQ 0.
*        CR3993 ADD log for analysis  INSERT Begin
*        IF sy-batch IS NOT INITIAL.
*          IF sy-datum < '20161231'.
*            WAIT UP TO 1 SECONDS.
*            lv_erdat = sy-datum.
*            lv_erzet = sy-uzeit.
**        CR3993 ADD log for analysis  INSERT Begin.
*            WRITE: / <fs_sales>-vbeln, '|', gs_vbkok-vbeln_vl, '-line302'.
**        CR3993 ADD log for analysis  INSERT End
*            CALL FUNCTION 'YSE_LOG_AUTOMATION_02'
*              EXPORTING
*                iv_guid  = lv_guid
*                iv_erdat = lv_erdat
*                iv_erzet = lv_erzet
*                gs_vbkok = gs_vbkok
*              TABLES
*                gt_items = gt_items
*                gt_sernr = gt_sernr
*                gt_vbpok = gt_vbpok.
*          ENDIF.
*        ENDIF.
*        CR3993 ADD log for analysis  INSERT End

        CALL FUNCTION 'SD_DELIVERY_UPDATE_PICKING_1'
          EXPORTING
            vbkok_wa        = gs_vbkok
            it_sernr_update = gt_sernr
          TABLES
            vbpok_tab       = gt_vbpok.
        IF sy-subrc EQ 0.                                   "#EC *
          COMMIT WORK AND WAIT.
        ELSE.
          WRITE: / 'Error during picking, no goods issue'.  "#EC *
          CONTINUE.
        ENDIF.
*     CR3993  mod Begin 20160714
*Next post goods issue
*        MOVE: <fs_items>-document_numb TO gv_del,    "del
*              <fs_items>-document_numb TO gs_header-deliv_numb, "del
*              <fs_items>-document_numb TO gs_control-deliv_numb,"del
*              'X' TO gs_control-post_gi_flg. "del
        MOVE: gs_items_2-document_numb TO gv_del,"insert
              gs_items_2-document_numb TO gs_header-deliv_numb,"insert
              gs_items_2-document_numb TO gs_control-deliv_numb,"insert
              'X' TO gs_control-post_gi_flg.  "insert
*     CR3993  mod End 20160714
        CLEAR: gt_return.

* begin of insert MOD-001
*...... Check posting date in valid period

        CONCATENATE sy-datum <fs_sales>-bukrs INTO gv_input.

        CALL FUNCTION 'CONVERSION_EXIT_YPSTD_INPUT'
          EXPORTING
            input     = gv_input
          IMPORTING
            output    = gv_wadat
          EXCEPTIONS
            not_found = 1
            OTHERS    = 2.

        CLEAR: gt_return[], ls_deadlines, lt_deadlines[].
        ls_deadlines-deliv_numb = gv_del.
        ls_deadlines-timetype = 'WSHDRWADTI '.
        CONVERT DATE gv_wadat TIME sy-uzeit
                   INTO TIME STAMP ls_deadlines-timestamp_utc TIME ZONE sy-zonlo.
        APPEND ls_deadlines TO lt_deadlines.
* end of insert MOD-001

        CALL FUNCTION 'BAPI_OUTB_DELIVERY_CONFIRM_DEC'
          EXPORTING
            header_data    = gs_header
            header_control = gs_control
            delivery       = gv_del
          TABLES
* begin of change MOD-001
*           RETURN         = gt_return.
            return           = gt_return
            header_deadlines = lt_deadlines.

*Check if any erros occured
        LOOP AT gt_return ASSIGNING <fs_return>
          WHERE type = 'E'.

          WRITE: / <fs_sales>-vbeln, <fs_sales>-posnr, <fs_return>-message.

        ENDLOOP.

        IF sy-subrc EQ 0.  "If errors, exit current loop
          CONTINUE.
        ELSE.  "Delivery create, picking and goods issue was succesfull
          WRITE: / 'Delivery creation, picking and goods issue was succesfull for sales order ',<fs_sales>-vbeln. "#EC *
        ENDIF.

        COMMIT WORK AND WAIT.

      ELSE.  "No delivery to pick

        WRITE: / 'No delivery to pick and issue for sales order ', <fs_sales>-vbeln. "#EC *

      ENDIF.
    ENDAT.

  ENDLOOP.
