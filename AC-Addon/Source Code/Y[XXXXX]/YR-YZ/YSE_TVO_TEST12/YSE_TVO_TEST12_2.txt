*----------------------------------------------------------------------*
***INCLUDE YSE_CONTR_RENTAL_PERIOD_EXTI01 .
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.
  DATA: lv_order_header_in LIKE bapisdhd1,
        lv_order_header_inx LIKE bapisdhd1x,
        lv_it_return LIKE bapiret2 OCCURS 0 WITH HEADER LINE,
        lv_it_sales_contract_in LIKE bapictr OCCURS 0 WITH HEADER LINE,
        lv_it_sales_contract_inx LIKE bapictrx OCCURS 0 WITH HEADER LINE,
        lv_it_messages LIKE balmi OCCURS 0 WITH HEADER LINE,
        lv_it_prot_tab LIKE balnri OCCURS 0 WITH HEADER LINE,
        lv_nr_of_contracts TYPE i.

  .




  CASE ok_code.
    WHEN 'BACK' OR '%EX' OR 'RW'.
      PERFORM exit_program.
    WHEN 'SAVE'.
    WHEN 'MASS_UPD'.
* MASS UPDATE MUST NOT BE DONE TWICE
      IF wa_mass_flag EQ 'N'.
        MESSAGE e001.
      ENDIF.

* WE INITIALIZE THE CREATED APPL LOG OBJECT YSE_CONTR AND FILL IN HEADER INFO FOR
* THIS LOG

      PERFORM initialize_application_log.

      lv_order_header_inx-updateflag = 'U'.
* FLAG ON ENDDATE AND ACTION DATE- IT WILL BE CHANGED
* AND RULES FOR ENDDATE AND ACTION DATE (THEY WILL BE INITIALISED)
      lv_it_sales_contract_inx-updateflag = 'U'.
      lv_it_sales_contract_inx-con_en_dat = 'X'.
      lv_it_sales_contract_inx-con_en_rul = 'X'.

* ACTION IS NO MORE USED (CUSTOMIZING)
*      lv_it_sales_contract_inx-action_dat = 'X'.
*      lv_it_sales_contract_inx-act_datrul = 'X'.

      APPEND lv_it_sales_contract_inx.

      lv_order_header_inx-ct_valid_t = 'X'.


      LOOP AT it_contract INTO wa_contract.
        REFRESH:lv_it_return, lv_it_sales_contract_in.
        CLEAR: lv_it_return.
* * CONTRACT PERIOD WILL BE EXTENDED WITH (7 * NR OF WEEKS ) DAYS
* * IF ENDDATE OF THE CONTRACT IS EMPTY WE TAKE TODAY AS PREVIOUS ENDDATE

        IF  NOT wa_contract-venddat IS INITIAL.
          wa_contract-venddat =  wa_contract-venddat + ( 7 * p_wk_aft ).
        ELSE.

          wa_contract-venddat = sy-datum + ( 7 * p_wk_aft ).
        ENDIF.
* IF NEW ENDDATE IS STILL IN THE PAST WE TAKE SY-DATUM AS BASE FOR THE EXTENSION
        IF    wa_contract-venddat < sy-datum.
          wa_contract-venddat = sy-datum + ( 7 * p_wk_aft ).
        ENDIF.

* AS ACTION DATE WE TAKE TOMORROW OR OLD ENDDATE + 1
* ACTION DATE MUST BE IN THE FUTURE
* ATTENTION!!
* ACTION DATE IS NO MORE USED (CUSTOMIZING)
        lv_it_sales_contract_in-con_st_dat = wa_contract-vbegdat.
        lv_it_sales_contract_in-con_en_dat = wa_contract-venddat.
*        lv_it_sales_contract_in-action_dat = wa_contract-venddat - ( 7 * p_wk_aft ).
*        IF lv_it_sales_contract_in-action_dat <= sy-datum.
*          lv_it_sales_contract_in-action_dat = sy-datum + 1.
*        ENDIF.
        APPEND lv_it_sales_contract_in.

        lv_order_header_in-ct_valid_t = wa_contract-venddat.


        CALL FUNCTION 'SD_SALESDOCUMENT_CHANGE'
          EXPORTING
            salesdocument               = wa_contract-vbeln
           order_header_in             =  lv_order_header_in
            order_header_inx            =  lv_order_header_inx
*           SIMULATION                  = ' '
*           INT_NUMBER_ASSIGNMENT       = ' '
*             BEHAVE_WHEN_ERROR           = ' '
*           BUSINESS_OBJECT             = ' '
*           CONVERT_PARVW_AUART         = ' '
*           CALL_FROM_BAPI              = ' '
*           LOGIC_SWITCH                =
*           I_CRM_LOCK_MODE             = ' '
*         IMPORTING
*           SALES_HEADER_OUT            =
*           SALES_HEADER_STATUS         =
          TABLES
            return                      = lv_it_return
*           ITEM_IN                     =
*           ITEM_INX                    =
*           SCHEDULE_IN                 =
*           SCHEDULE_INX                =
*           PARTNERS                    =
*           PARTNERCHANGES              =
*           PARTNERADDRESSES            =
*           SALES_CFGS_REF              =
*           SALES_CFGS_INST             =
*           SALES_CFGS_PART_OF          =
*           SALES_CFGS_VALUE            =
*           SALES_CFGS_BLOB             =
*           SALES_CFGS_VK               =
*           SALES_CFGS_REFINST          =
*           SALES_CCARD                 =
*           SALES_TEXT                  =
*           SALES_KEYS                  =
*           CONDITIONS_IN               =
*           CONDITIONS_INX              =
           sales_contract_in           = lv_it_sales_contract_in
          sales_contract_inx          = lv_it_sales_contract_inx
*           EXTENSIONIN                 =
*           ITEMS_EX                    =
*           SCHEDULE_EX                 =
*           BUSINESS_EX                 =
*           INCOMPLETE_LOG              =
*           EXTENSIONEX                 =
*           CONDITIONS_EX               =
*           SALES_SCHED_CONF_IN         =
*           DEL_SCHEDULE_EX             =
*           DEL_SCHEDULE_IN             =
*           DEL_SCHEDULE_INX            =
*           CORR_CUMQTY_IN              =
*           CORR_CUMQTY_INX             =
*           CORR_CUMQTY_EX              =
*           PARTNERS_EX                 =
*           TEXTHEADERS_EX              =
*           TEXTLINES_EX                =
*           BATCH_CHARC                 =
                  .

* IF NO ERROR OCCURS WE DO A DATABASE COMMIT AND MODIFY THE ENDDATE ON THE ALV SCREEN
        READ TABLE lv_it_return WITH KEY type = 'E'.
        IF sy-subrc NE 0.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
       EXPORTING
         wait          = 'X'
*       IMPORTING
*         RETURN        =
                    .
          MODIFY  it_contract FROM wa_contract.

        ENDIF.
* WE COLLECT SUCCESS AND ERROR MESSAGES AND TRANSFER THEM TO THE APPL LOG TABLE
        LOOP AT lv_it_return WHERE type EQ 'E' OR type EQ 'S'.
          CLEAR lv_it_messages.

          lv_it_messages-msgty = lv_it_return-type.

          lv_it_messages-msgv1 = wa_contract-vbeln.
          lv_it_messages-msgv2 = wa_contract-posnr.


          IF  lv_it_return-type = 'S'.

* IF SUCCESS WE GIVE THE NEW ENDDATE OF THE CONTRACT/CONTRACT ITEM


            lv_it_messages-msgid = 'YSE_RENTAL'.
            lv_it_messages-msgno = '004'.
            lv_it_messages-probclass = '4'.
            lv_it_messages-msgv3 = wa_contract-venddat.
            APPEND lv_it_messages.
            EXIT.

          ELSE.

*          MOVE lv_it_return-message_v1 TO lv_it_messages-msgv1.
            lv_it_messages-msgid = lv_it_return-id.
            lv_it_messages-msgno = lv_it_return-number.


            lv_it_messages-probclass = '1'.
            APPEND lv_it_messages.




          ENDIF.



          .

        ENDLOOP.

      ENDLOOP.

* WRITE INFO MESSAGE WITH NR OF ENTRIES AND APPL LOG INFO



      DESCRIBE TABLE it_contract.
      MESSAGE i002 WITH sy-tfill.
      wa_mass_flag = 'N'.


      CALL FUNCTION 'APPL_LOG_WRITE_MESSAGES'
       EXPORTING
         object                    =  'YSE_CONTR_EXT'
*   SUBOBJECT                 = ' '
*   LOG_HANDLE                = ' '' '
         update_or_insert          = 'I'
      TABLES
        messages                  = lv_it_messages

       EXCEPTIONS
         object_not_found          = 1
         subobject_not_found       = 2
         OTHERS                    = 3
          .
      IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

      CALL FUNCTION 'APPL_LOG_WRITE_DB'
        EXPORTING
          object                      = 'YSE_CONTR_EXT'
*   SUBOBJECT                   = ' '
*   LOG_HANDLE                  = ' '
*   UPDATE_TASK                 = ' '
         TABLES
           object_with_lognumber       = lv_it_prot_tab
           EXCEPTIONS
          object_not_found            = 1
          subobject_not_found         = 2
          internal_error              = 3
          OTHERS                      = 4.
      .
      IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

      CLEAR ok_code.

  ENDCASE.


ENDMODULE.                 " USER_COMMAND_0100  INPUT
