*&---------------------------------------------------------------------*
*&      Form  ALV_VARIANT_F4
*&---------------------------------------------------------------------*
FORM ALV_VARIANT_F4 CHANGING PA_VARI.
  DATA: RS_VARIANT LIKE DISVARIANT.
  DATA NOF4 TYPE C.

  CLEAR NOF4.
  LOOP AT SCREEN.
    IF SCREEN-NAME = 'PA_VARI'.
      IF SCREEN-INPUT = 0.
        NOF4 = 'X'.
      ENDIF.
    ENDIF.
  ENDLOOP.

  RS_VARIANT-REPORT   = G_REPID.
  RS_VARIANT-USERNAME = SY-UNAME.
  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      IS_VARIANT = RS_VARIANT
      I_SAVE     = 'A'
    IMPORTING
      ES_VARIANT = RS_VARIANT
    EXCEPTIONS
      OTHERS     = 1.
  IF SY-SUBRC = 0 AND NOF4 EQ SPACE.
    PA_VARI = RS_VARIANT-VARIANT.
  ENDIF.
ENDFORM.                               " ALV_VARIANT_F4

*&---------------------------------------------------------------------*
*&      Form  CB_ITEM_ALV_USERCOMM
*&---------------------------------------------------------------------*
FORM CB_ITEM_ALV_USERCOMM  USING  R_UCOMM     LIKE SY-UCOMM
                                  RS_SELFIELD TYPE SLIS_SELFIELD.
  DATA: RT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV.
  DATA: LD_REFRESH_COUNT    TYPE I,
        LD_MEMORY_ID(40)    TYPE C.
  DATA: LS_VARIANT          TYPE DISVARIANT,
        LT_SELSCREEN        LIKE RSPARAMS OCCURS 5 WITH HEADER LINE,
        LD_MEMORY_ID2(40)   TYPE C.

  CASE R_UCOMM.
    WHEN '&OL0' OR '&OAD' OR '&OLX'.
*.... ALV change display variant. get new field catalog:
      IF X_GRID IS INITIAL.
        CALL FUNCTION 'REUSE_ALV_LIST_LAYOUT_INFO_GET'
          IMPORTING
            ET_FIELDCAT   = RT_FIELDCAT
          EXCEPTIONS
            NO_INFOS      = 1
            PROGRAM_ERROR = 2
            OTHERS        = 3.
      ELSE.
        CALL FUNCTION 'REUSE_ALV_GRID_LAYOUT_INFO_GET'
          IMPORTING
            ET_FIELDCAT   = RT_FIELDCAT
          EXCEPTIONS
            NO_INFOS      = 1
            PROGRAM_ERROR = 2
            OTHERS        = 3.
      ENDIF.
      IF SY-SUBRC <> 0.
        EXIT.
      ENDIF.
*     analyze new fieldcat:
      PERFORM ANALYZE_ACT_FIELDCAT  TABLES RT_FIELDCAT.
*     treat new special fields:
      PERFORM READ_SPECIAL_TABLES.
    WHEN 'REFR' OR 'LTOG'.
*.... list refresh:
      IF X_GRID IS INITIAL.
        CALL FUNCTION 'REUSE_ALV_LIST_LAYOUT_INFO_GET'
          IMPORTING
            ES_VARIANT    = LS_VARIANT
          EXCEPTIONS
            NO_INFOS      = 1
            PROGRAM_ERROR = 2
            OTHERS        = 3.
      ELSE.
        CALL FUNCTION 'REUSE_ALV_GRID_LAYOUT_INFO_GET'
          IMPORTING
            ES_VARIANT    = LS_VARIANT
          EXCEPTIONS
            NO_INFOS      = 1
            PROGRAM_ERROR = 2
            OTHERS        = 3.
      ENDIF.
      IF SY-SUBRC = 0 AND NOT LS_VARIANT-VARIANT IS INITIAL.
        LD_MEMORY_ID2 = G_REPID.
        WRITE '/LAYO' TO LD_MEMORY_ID2+35(5).
        CONDENSE LD_MEMORY_ID2 NO-GAPS.
        EXPORT LAYOUT FROM LS_VARIANT-VARIANT
               TO MEMORY ID LD_MEMORY_ID2.
      ENDIF.
      LD_MEMORY_ID = G_REPID.
      WRITE '/REFR' TO LD_MEMORY_ID+35(5).
      CONDENSE LD_MEMORY_ID NO-GAPS.
      IMPORT COUNTER TO LD_REFRESH_COUNT
             FROM MEMORY ID LD_MEMORY_ID.
      ADD 1 TO LD_REFRESH_COUNT.
      EXPORT COUNTER FROM LD_REFRESH_COUNT
             TO MEMORY ID LD_MEMORY_ID.
      IF LD_REFRESH_COUNT > 1.
        LEAVE PROGRAM.
      ENDIF.
      WHILE LD_REFRESH_COUNT > 0.
        CLEAR LS_VARIANT.
        LT_SELSCREEN[] = GT_SELSCREEN[].
        IMPORT LAYOUT TO LS_VARIANT-VARIANT
               FROM MEMORY ID LD_MEMORY_ID2.
        IF SY-SUBRC = 0 AND NOT LS_VARIANT-VARIANT IS INITIAL.
          READ TABLE LT_SELSCREEN WITH KEY SELNAME = 'PA_VARI'.
          IF SY-SUBRC = 0.
            LT_SELSCREEN-LOW = LS_VARIANT-VARIANT.
            MODIFY LT_SELSCREEN INDEX SY-TABIX.
          ENDIF.
        ENDIF.
        SUBMIT (G_REPID) WITH SELECTION-TABLE LT_SELSCREEN
                         WITH FREE SELECTIONS GT_DYN_TEXPR
                         WITH KD_INDEX EQ GT_SEARCHPATTERN
                         WITH DD_INDEX EQ GT_SEARCHPATTERN
                         WITH SD_INDEX EQ GT_SEARCHPATTERN
                         AND RETURN.
        CLEAR LD_REFRESH_COUNT.
        IMPORT COUNTER TO LD_REFRESH_COUNT
               FROM MEMORY ID LD_MEMORY_ID.
        IF LD_REFRESH_COUNT > 0.
          SUBTRACT 1 FROM LD_REFRESH_COUNT.
        ENDIF.
        EXPORT COUNTER FROM LD_REFRESH_COUNT
               TO MEMORY ID LD_MEMORY_ID.
      ENDWHILE.
      IF GD_DYNP_VAL = 0.
        SUBMIT (G_REPID) WITH SELECTION-TABLE GT_SELSCREEN
                         WITH FREE SELECTIONS GT_DYN_TEXPR
                         WITH KD_INDEX EQ GT_SEARCHPATTERN
                         WITH DD_INDEX EQ GT_SEARCHPATTERN
                         WITH SD_INDEX EQ GT_SEARCHPATTERN
                         VIA SELECTION-SCREEN.
      ELSE.
        LEAVE PROGRAM.
      ENDIF.

  ENDCASE.

ENDFORM.                               " CB_ITEM_ALV_USERCOMM

*&---------------------------------------------------------------------*
*&      Form  SPECIAL_FIELDS
*&---------------------------------------------------------------------*
FORM SPECIAL_FIELDS_INIT USING   RS_VARIANT LIKE DISVARIANT.
  DATA: IT_VAR_FIELDCAT  TYPE SLIS_T_FIELDCAT_ALV WITH HEADER LINE,
        IT_MAX_FIELDCAT  TYPE SLIS_T_FIELDCAT_ALV,
        DUMMY_LAYOUT     TYPE SLIS_LAYOUT_ALV.

* ... get existing variant:
  PERFORM GET_EXISTING_VARIANT USING RS_VARIANT.
*... get fieldcat of initial variant:
  PERFORM GET_INITIAL_FIELDCAT   TABLES IT_VAR_FIELDCAT
                                 USING  RS_VARIANT.
*... analyze initial fieldcat:
  PERFORM ANALYZE_ACT_FIELDCAT  TABLES IT_VAR_FIELDCAT.
*... read required special tables and fill item fields:
  PERFORM READ_SPECIAL_TABLES.

ENDFORM.                               " SPECIAL_FIELDS_INIT

*&---------------------------------------------------------------------*
*&      Form GET_INITIAL_FIELDCAT
*&---------------------------------------------------------------------*
FORM GET_INITIAL_FIELDCAT  TABLES RT_VAR_FIELDCAT
                                      TYPE SLIS_T_FIELDCAT_ALV
                           USING  RS_VARIANT LIKE DISVARIANT.
  DATA: IT_MAX_FIELDCAT  TYPE SLIS_T_FIELDCAT_ALV,
        DUMMY_LAYOUT     TYPE SLIS_LAYOUT_ALV,
        LS_VARIANT       TYPE DISVARIANT,
        LD_EXIT          TYPE C.

  LS_VARIANT = RS_VARIANT.

*... build maximal fieldcat:
  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      I_BUFFER_ACTIVE        = 'X'
      I_PROGRAM_NAME         = G_REPID
      I_STRUCTURE_NAME       = 'RFPOSXEXT'
    CHANGING
      CT_FIELDCAT            = IT_MAX_FIELDCAT
    EXCEPTIONS
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      OTHERS                 = 3.
  IF SY-SUBRC <> 0.
    MESSAGE A011.
  ENDIF.
*... get variant fieldcat:
  CALL FUNCTION 'REUSE_ALV_VARIANT_SELECT'
    EXPORTING
      I_DIALOG            = ' '
      I_USER_SPECIFIC     = 'X'
      IT_DEFAULT_FIELDCAT = IT_MAX_FIELDCAT
      I_LAYOUT            = DUMMY_LAYOUT
      I_BUFFER_ACTIVE     = 'X'
    IMPORTING
      E_EXIT              = LD_EXIT
      ET_FIELDCAT         = RT_VAR_FIELDCAT[]
    CHANGING
      CS_VARIANT          = LS_VARIANT
    EXCEPTIONS
      WRONG_INPUT         = 1
      FC_NOT_COMPLETE     = 2
      NOT_FOUND           = 3
      PROGRAM_ERROR       = 4
      OTHERS              = 5.
  IF SY-SUBRC <> 0.
*... take maximal fieldcat for special fields:
    RT_VAR_FIELDCAT[] = IT_MAX_FIELDCAT[].
  ENDIF.

ENDFORM.                               " GET_INITIAL_FIELDCAT

*&---------------------------------------------------------------------*
*&      Form  INIT_ADMIN_TABLES
*&---------------------------------------------------------------------*
FORM INIT_ADMIN_TABLES.
  DATA: FIELD_N   LIKE DD03P-FIELDNAME,
        FIELD_N_2 LIKE DD03P-FIELDNAME,
        TABLE_N   LIKE DD03P-TABNAME.
  FIELD-SYMBOLS: <FSYM>.
  DATA: LD_OBJECT       TYPE DDOBJNAME,
        LD_FIELD        LIKE DFIES-LFIELDNAME,
        LS_DFIES        TYPE DFIES,
        LD_REFFIELD(10) TYPE C.

*... first get T021S:
  SELECT * FROM T021S INTO TABLE IT_T021S WHERE LSTCL = 2.
* Add field for bill of exchange problems.
  PERFORM INIT_ADMIN_TABLES_BOE.
  SORT IT_T021S BY TNAME FNAME.
  DELETE ADJACENT DUPLICATES FROM IT_T021S COMPARING TNAME FNAME.
*... now make other administration tables:
  CLEAR IT_SPECTAB.
  CLEAR IT_SPECFLD.
  CLEAR IT_MOVEFLD.
  CLEAR IT_MOVEREF.
  LOOP AT IT_T021S.
    CHECK NOT IT_T021S-TNAME IS INITIAL.
*... status table of special tables:
    WRITE IT_T021S-TNAME TO TABLE_N.
    IT_SPECTAB-TNAME = TABLE_N.
    APPEND IT_SPECTAB.
*   expiring currencies:
    IF IT_T021S-TNAME = 'BSEG'.
      LD_OBJECT = IT_T021S-TNAME.
      LD_FIELD  = IT_T021S-FNAME.
      CALL FUNCTION 'DDIF_NAMETAB_GET'
        EXPORTING
          TABNAME    = LD_OBJECT
          LFIELDNAME = LD_FIELD
        IMPORTING
          DFIES_WA   = LS_DFIES
        EXCEPTIONS
          NOT_FOUND  = 1
          OTHERS     = 2.
      IF SY-SUBRC = 0.
        CLEAR LD_REFFIELD.
        WRITE LS_DFIES-REFTABLE TO LD_REFFIELD.
        WRITE '-'               TO LD_REFFIELD+4.
        WRITE LS_DFIES-REFFIELD TO LD_REFFIELD+5.
        IF  LS_DFIES-DATATYPE = 'CURR'
        AND ( LD_REFFIELD = 'BKPF-WAERS' OR
              LD_REFFIELD = 'BSEG-PYCUR' ).
          GD_EXPCUR_BSEG = 'X'.
        ENDIF.
      ENDIF.
    ENDIF.
*... status table of field names:
    IT_SPECFLD-TNAME = TABLE_N.
    WRITE IT_T021S-FNAME TO FIELD_N.
    IT_SPECFLD-FNAME = FIELD_N.
    PERFORM EXTND_FIELDNAME USING    FIELD_N
                            CHANGING IT_SPECFLD-FNAME_2.
    APPEND IT_SPECFLD.
*... move map table:
    IT_MOVEFLD-TNAME = TABLE_N.
    WRITE IT_T021S-FNAME TO FIELD_N.
    PERFORM EXTND_FIELDNAME USING    FIELD_N
                            CHANGING FIELD_N_2.
*   original table work area field:
    WRITE 'WA_'   TO IT_MOVEFLD-TABFLD.
    WRITE TABLE_N TO IT_MOVEFLD-TABFLD+4.
    WRITE '-'     TO IT_MOVEFLD-TABFLD+19.
    WRITE FIELD_N TO IT_MOVEFLD-TABFLD+20.
    CONDENSE IT_MOVEFLD-TABFLD NO-GAPS.
*   item table work area field:
    WRITE 'IT_POS'   TO IT_MOVEFLD-TABFLD_2.
    WRITE '-'        TO IT_MOVEFLD-TABFLD_2+19.
    WRITE FIELD_N_2  TO IT_MOVEFLD-TABFLD_2+20.
    CONDENSE IT_MOVEFLD-TABFLD_2 NO-GAPS.
    APPEND IT_MOVEFLD.
*... move reference table (parallel to move map table):
    IT_MOVEREF-TNAME = IT_MOVEFLD-TNAME.
    ASSIGN (IT_MOVEFLD-TABFLD) TO <FSYM>.
    GET REFERENCE OF <FSYM> INTO IT_MOVEREF-FLDREF.
    ASSIGN (IT_MOVEFLD-TABFLD_2) TO <FSYM>.
    GET REFERENCE OF <FSYM> INTO IT_MOVEREF-FLDREF_2.
    APPEND IT_MOVEREF.
*... that's it.
  ENDLOOP.
*... document text fields:
  IT_SPECTAB-TNAME = '_TEXT'.
  APPEND IT_SPECTAB.

  DELETE ADJACENT DUPLICATES FROM IT_SPECTAB.

ENDFORM.                               " INIT_ADMIN_TABLES

*&---------------------------------------------------------------------*
*&      Form  EXTND_FIELDNAME
*&---------------------------------------------------------------------*
FORM EXTND_FIELDNAME USING    P_FIELDN
                     CHANGING P_FIELDN_EXT.
  DATA: TEXT(40)  TYPE C.

  WRITE 'U_' TO TEXT.
  WRITE P_FIELDN TO TEXT+2.
  WRITE TEXT TO P_FIELDN_EXT.

ENDFORM.                               " EXTND_FIELDNAME

*&---------------------------------------------------------------------*
*&      Form  ANALYZE_ACT_FIELDCAT
*&      Updating status tables it_specfld and it_spectab.
*&---------------------------------------------------------------------*
FORM ANALYZE_ACT_FIELDCAT TABLES   RT_VAR_FIELDCAT
                                       TYPE SLIS_T_FIELDCAT_ALV.
  DATA: PREFIX(2)  TYPE C,
        LD_LINES   TYPE I,
        LD_COUNT   TYPE I,
        LD_BUKRS(25) TYPE C.

  STATICS LD_SUPRESS_MSG(1) TYPE C.

* company code with tranfer prices
  DESCRIBE TABLE IT_TP_AUTH LINES LD_LINES.

  LOOP AT RT_VAR_FIELDCAT.
*   field displayed in variant?
    IF RT_VAR_FIELDCAT-NO_OUT = 'X'.
      CONTINUE.
    ENDIF.
*   company code with tp
    IF LD_LINES GT 0 AND LD_SUPRESS_MSG = SPACE.
*     tp field
      READ TABLE IT_TP_FIELDS WITH KEY
                             FNAME = RT_VAR_FIELDCAT-FIELDNAME.
      IF SY-SUBRC EQ 0.
*       check authority
        LD_COUNT = 0. LD_BUKRS = SPACE.
        LOOP AT IT_TP_AUTH WHERE AUTH = SPACE.
          CONCATENATE LD_BUKRS IT_TP_AUTH-BUKRS INTO LD_BUKRS
                                                 SEPARATED BY SPACE.
          LD_COUNT = LD_COUNT + 1.
          IF LD_COUNT > 3. EXIT. ENDIF.
        ENDLOOP.
        IF LD_COUNT > 0.
          LD_SUPRESS_MSG = 'X'.
          MESSAGE I036 WITH LD_BUKRS.
        ENDIF.
      ENDIF.
    ENDIF.

*   document text field?
    IF RT_VAR_FIELDCAT-FIELDNAME = 'TDID' OR
       RT_VAR_FIELDCAT-FIELDNAME = 'XTEXT'.
      READ TABLE IT_SPECTAB WITH KEY TNAME = '_TEXT'.
      IF SY-SUBRC = 0 AND IT_SPECTAB-TSTAT = SPACE.
        IT_SPECTAB-TSTAT = 'P'.
        MODIFY IT_SPECTAB INDEX SY-TABIX.
      ENDIF.
      CONTINUE.
    ENDIF.
*   special field?
    WRITE RT_VAR_FIELDCAT-FIELDNAME TO PREFIX(2).
    IF PREFIX NE 'U_'.
      CONTINUE.
    ENDIF.
*   check special field status table:
    READ TABLE IT_SPECFLD WITH KEY FNAME_2 = RT_VAR_FIELDCAT-FIELDNAME.
    IF SY-SUBRC NE 0.
*     horror case:
      MESSAGE W012.
      EXIT.
    ENDIF.
*   special field status = initial?
    IF IT_SPECFLD-FSTAT = SPACE.
*     set status 'pending':
      IT_SPECFLD-FSTAT = 'P'.
      MODIFY IT_SPECFLD INDEX SY-TABIX.
*     check corresponding table status:
      READ TABLE IT_SPECTAB WITH KEY TNAME = IT_SPECFLD-TNAME.
      IF SY-SUBRC NE 0.
*       horror case:
        MESSAGE W012.
        EXIT.
      ENDIF.
      IF IT_SPECTAB-TSTAT = SPACE.
        IT_SPECTAB-TSTAT = 'P'.
        MODIFY IT_SPECTAB INDEX SY-TABIX.
      ENDIF.
    ENDIF.
*   Handle additional special fields for bill of exchange.
    PERFORM ANALYZE_ACT_FIELDCAT_BOE.
  ENDLOOP.

ENDFORM.                               " ANALYZE_ACT_FIELDCAT

*&---------------------------------------------------------------------*
*&      Form  READ_SPECIAL_TABLES
*&---------------------------------------------------------------------*
FORM READ_SPECIAL_TABLES.
  DATA: POSINDEX   LIKE SY-TABIX.

*... check item table filled?
  READ TABLE IT_POS INDEX 1.
  CHECK SY-SUBRC = 0.
*... loop over all pending tables:
  LOOP AT IT_SPECTAB WHERE TSTAT = 'P'.
* building additional help tables for BKPF and BSEG for optimized
* database selections.
    PERFORM CREATE_PERFORMANCE_TABLES USING IT_SPECTAB-TNAME.
    CASE IT_SPECTAB-TNAME.
      WHEN 'BKPF'.
        PERFORM SPECIAL_FIELDS_USED USING IT_SPECTAB-TNAME.
        IF SY-SUBRC = 0.
          PERFORM COMPLETE_BKPF.
        ENDIF.
      WHEN 'BSEG'.
        PERFORM COMPLETE_BSEG.
      WHEN 'BSEGC'.
        PERFORM SPECIAL_FIELDS_USED USING IT_SPECTAB-TNAME.
        IF SY-SUBRC = 0.
          PERFORM COMPLETE_BSEGC.
        ENDIF.
      WHEN 'BSEC'.
        PERFORM COMPLETE_BSEC.
      WHEN 'BSED'.
        PERFORM COMPLETE_BSED.
      WHEN 'BSBV'.
        PERFORM COMPLETE_BSBV.
      WHEN 'PAYR'.
        PERFORM COMPLETE_PAYR.
      WHEN '_TEXT'.
        PERFORM COMPLETE_DOCUMENT_TEXT.
    ENDCASE.
  ENDLOOP.
*... final bookkeeping: status of special tables & fields
  PERFORM UPD_SPECIAL_STATUS.

ENDFORM.                               " READ_SPECIAL_TABLES

*&---------------------------------------------------------------------*
*&      Form  COMPLETE_BKPF
*&---------------------------------------------------------------------*
FORM COMPLETE_BKPF.

  DATA:  LD_INDEX  LIKE SY-TABIX,
         LD_INDEXH LIKE SY-TABIX.
  STATICS: SD_LOGSYS TYPE LOGSYSTEM,
           SD_LSFLAG TYPE C.
  DATA:    LD_TABLENAME LIKE DD03P-TABNAME.


  CLEAR: WA_BKPF, WA_VBKPF.

  SORT IT_POS STABLE BY BUKRS BELNR GJAHR.

* get logical system id once:
  IF SD_LSFLAG IS INITIAL.
    CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
      IMPORTING
        OWN_LOGICAL_SYSTEM = SD_LOGSYS
      EXCEPTIONS
        OTHERS             = 1.
    SD_LSFLAG = 'X'.
  ENDIF.

  IF GD_USEAR IS INITIAL AND GD_USEDB IS INITIAL.
    GD_USEDB = 'X'.
  ENDIF.

* reading special fields from archiv infos.
  IF GD_USEAR = 'X'.
    LOOP AT GT_POS_ARCHIVED ASSIGNING <GFS_POS_REDUCED>.
      READ TABLE XBKPF INTO WA_BKPF
                       WITH TABLE KEY BUKRS = <GFS_POS_REDUCED>-BUKRS
                                      BELNR = <GFS_POS_REDUCED>-BELNR
                                      GJAHR = <GFS_POS_REDUCED>-GJAHR.
*   fill logical system id:
      IF WA_BKPF-AWSYS IS INITIAL.
        WA_BKPF-AWSYS = SD_LOGSYS.
      ENDIF.
*   expiring currencies:
      IF NOT GD_EXPCUR_FLAG IS INITIAL.
        PERFORM ITEM_CURR_CONVERT_BKPF USING    GD_EXPCUR_PROC
                                                PA_STIDA
                                       CHANGING WA_BKPF.
      ENDIF.
*   fill special fields for all lines of document:
      READ TABLE IT_POS WITH KEY BUKRS = WA_BKPF-BUKRS
                                 BELNR = WA_BKPF-BELNR
                                 GJAHR = WA_BKPF-GJAHR
                                 BINARY SEARCH.
      IF SY-SUBRC EQ 0.
        PERFORM MOVE_SPECIAL_FIELDS USING IT_SPECTAB-TNAME.
        MODIFY IT_POS INDEX SY-TABIX.
        LD_INDEX = SY-TABIX + 1.
        LOOP AT IT_POS FROM LD_INDEX.
          IF IT_POS-BUKRS = WA_BKPF-BUKRS AND
             IT_POS-BELNR = WA_BKPF-BELNR AND
             IT_POS-GJAHR = WA_BKPF-GJAHR.
            PERFORM MOVE_SPECIAL_FIELDS USING IT_SPECTAB-TNAME.
            MODIFY IT_POS.
          ELSE.
            EXIT.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDLOOP.
  ENDIF.
* reading special fields from database
  IF GD_USEDB = 'X'.
*... first posted items table:
    IF B0SG-XSTAN = 'X' AND NOT GT_POS_POSTED[] IS INITIAL.
      SELECT       (GT_SPEC_FIELDS)
              FROM BKPF
              INTO CORRESPONDING FIELDS OF WA_BKPF
               FOR ALL ENTRIES IN GT_POS_POSTED
                    WHERE BUKRS = GT_POS_POSTED-BUKRS
                    AND   BELNR = GT_POS_POSTED-BELNR
                    AND   GJAHR = GT_POS_POSTED-GJAHR.
*   fill logical system id:
        IF WA_BKPF-AWSYS IS INITIAL.
          WA_BKPF-AWSYS = SD_LOGSYS.
        ENDIF.
*   expiring currencies:
        IF NOT GD_EXPCUR_FLAG IS INITIAL.
          PERFORM ITEM_CURR_CONVERT_BKPF USING    GD_EXPCUR_PROC
                                                  PA_STIDA
                                         CHANGING WA_BKPF.
        ENDIF.
*   fill special fields for all lines of document:
        READ TABLE IT_POS WITH KEY BUKRS = WA_BKPF-BUKRS
                                   BELNR = WA_BKPF-BELNR
                                   GJAHR = WA_BKPF-GJAHR
                                   BINARY SEARCH.
        IF SY-SUBRC EQ 0.
          PERFORM MOVE_SPECIAL_FIELDS USING IT_SPECTAB-TNAME.
          MODIFY IT_POS INDEX SY-TABIX.
          LD_INDEX = SY-TABIX + 1.
          LOOP AT IT_POS FROM LD_INDEX.
            IF IT_POS-BUKRS = WA_BKPF-BUKRS AND
               IT_POS-BELNR = WA_BKPF-BELNR AND
               IT_POS-GJAHR = WA_BKPF-GJAHR.
              PERFORM MOVE_SPECIAL_FIELDS USING IT_SPECTAB-TNAME.
              MODIFY IT_POS.
            ELSE.
              EXIT.
            ENDIF.
          ENDLOOP.
        ENDIF.

      ENDSELECT.
    ENDIF.

*... now parked items table:
    IF B0SG-XSTAV = 'X' AND NOT GT_POS_PARKED[] IS INITIAL.
      CLEAR WA_BKPF.
      LD_TABLENAME = 'VBKPF'.
      PERFORM SPECIAL_FIELDS_MODIFY USING LD_TABLENAME.
      SELECT       (GT_SPEC_FIELDS)
           FROM VBKPF
           INTO CORRESPONDING FIELDS OF WA_BKPF
               FOR ALL ENTRIES IN GT_POS_PARKED
             WHERE BUKRS = GT_POS_PARKED-BUKRS
               AND BELNR = GT_POS_PARKED-BELNR
               AND GJAHR = GT_POS_PARKED-GJAHR
               AND BUDAT = GT_POS_PARKED-BUDAT.
*   fill logical system id:
        IF WA_BKPF-AWSYS IS INITIAL.
          WA_BKPF-AWSYS = SD_LOGSYS.
        ENDIF.
*   expiring currencies:
        IF NOT GD_EXPCUR_FLAG IS INITIAL.
          PERFORM ITEM_CURR_CONVERT_BKPF USING    GD_EXPCUR_PROC
                                                  PA_STIDA
                                         CHANGING WA_BKPF.
        ENDIF.
*   fill special fields for all lines of document:
        READ TABLE IT_POS WITH KEY BUKRS = WA_BKPF-BUKRS
                                   BELNR = WA_BKPF-BELNR
                                   GJAHR = WA_BKPF-GJAHR
                                   BUDAT = WA_BKPF-BUDAT
                                   BINARY SEARCH.
        IF SY-SUBRC EQ 0.
          PERFORM MOVE_SPECIAL_FIELDS USING IT_SPECTAB-TNAME.
          MODIFY IT_POS INDEX SY-TABIX.
          LD_INDEX = SY-TABIX + 1 .
          LOOP AT IT_POS FROM LD_INDEX.
            IF IT_POS-BUKRS = WA_BKPF-BUKRS AND
               IT_POS-BELNR = WA_BKPF-BELNR AND
               IT_POS-GJAHR = WA_BKPF-GJAHR AND
               IT_POS-BUDAT = WA_BKPF-BUDAT.
              PERFORM MOVE_SPECIAL_FIELDS USING IT_SPECTAB-TNAME.
              MODIFY IT_POS.
            ELSE.
              EXIT.
            ENDIF.
          ENDLOOP.
        ENDIF.
      ENDSELECT.
    ENDIF.
  ENDIF.

  PERFORM IT_POS_SORT_BACK TABLES IT_POS.

ENDFORM.                               " COMPLETE_BKPF


*&---------------------------------------------------------------------*
*&      Form  COMPLETE_BSEG
*&---------------------------------------------------------------------*
FORM COMPLETE_BSEG.
  DATA: POSINDEX   LIKE SY-TABIX.
  DATA: LD_WAERS   TYPE WAERS.

* needed for join with VBKPF and VBSEGS
  DATA: BEGIN OF WA_VBSEGS_EXT.
          INCLUDE STRUCTURE WA_VBSEGS.
  DATA:           BUDAT LIKE VBKPF-BUDAT,
                  WAERS LIKE VBKPF-WAERS,
       END OF WA_VBSEGS_EXT.

* due to selection for parked documents
  RANGES LT_SELOPTION FOR VBKPF-AUSBK.

  CLEAR: WA_BSEG, WA_VBSEGD, WA_VBSEGK, WA_VBSEGS.

* sort due to binary search
  SORT IT_POS STABLE BY BUKRS BELNR GJAHR BUZEI.

  IF GD_USEAR IS INITIAL AND GD_USEDB IS INITIAL.
    GD_USEDB = 'X'.
  ENDIF.

  IF GD_USEAR = 'X'.
    LOOP AT GT_POS_ARCHIVED ASSIGNING <GFS_POS_REDUCED>.
      READ TABLE XBSEG INTO WA_BSEG
                       WITH TABLE KEY BUKRS = <GFS_POS_REDUCED>-BUKRS
                                      BELNR = <GFS_POS_REDUCED>-BELNR
                                      GJAHR = <GFS_POS_REDUCED>-GJAHR
                                      BUZEI = <GFS_POS_REDUCED>-BUZEI.
      IF WA_BSEG-SHKZG = 'H'.
        WA_BSEG-MENGE = WA_BSEG-MENGE * ( -1 ).
        WA_BSEG-NEBTR = WA_BSEG-NEBTR * ( -1 ).
        WA_BSEG-BDIFF = WA_BSEG-BDIFF * ( -1 ).             "883851
        WA_BSEG-BDIF2 = WA_BSEG-BDIF2 * ( -1 ).
        WA_BSEG-BDIF3 = WA_BSEG-BDIF3 * ( -1 ).
        WA_BSEG-RDIFF = WA_BSEG-RDIFF * ( -1 ).
        WA_BSEG-RDIF2 = WA_BSEG-RDIF2 * ( -1 ).
        WA_BSEG-RDIF3 = WA_BSEG-RDIF3 * ( -1 ).             "883851
      ENDIF.
*     invoice reference:
      IF  WA_BSEG-REBZG IS INITIAL
      AND WA_BSEG-REBZT IS INITIAL.
        WA_BSEG-REBZG = WA_BSEG-BELNR.
      ENDIF.
*     fill special fields:
      READ TABLE IT_POS WITH KEY BUKRS = WA_BSEG-BUKRS
                           BELNR = WA_BSEG-BELNR
                           GJAHR = WA_BSEG-GJAHR
                           BUZEI = WA_BSEG-BUZEI
                           BINARY SEARCH.
      IF SY-SUBRC = 0.
        POSINDEX = SY-TABIX.
*       expiring currencies:
        IF  NOT GD_EXPCUR_FLAG IS INITIAL
        AND NOT GD_EXPCUR_BSEG IS INITIAL.
          READ TABLE XBKPF INTO WA_BKPF
                           WITH TABLE KEY BUKRS = WA_BSEG-BUKRS
                                          BELNR = WA_BSEG-BELNR
                                          GJAHR = WA_BSEG-GJAHR.
          LD_WAERS = WA_BKPF-WAERS.
          PERFORM ITEM_CURR_CONVERT_BSEG USING    GD_EXPCUR_PROC
                                                  IT_POS-HWAER
                                                  LD_WAERS
                                                  PA_STIDA
                                         CHANGING WA_BSEG.
        ENDIF.
        PERFORM MOVE_SPECIAL_FIELDS USING IT_SPECTAB-TNAME.
        MODIFY IT_POS INDEX POSINDEX.
      ENDIF.
    ENDLOOP.
  ENDIF.
  IF GD_USEDB = 'X'.
*... first posted items table:
    IF B0SG-XSTAN = 'X' AND NOT GT_POS_POSTED[] IS INITIAL.
      SELECT * FROM BSEG INTO WA_BSEG FOR ALL ENTRIES IN GT_POS_POSTED
                  WHERE BUKRS = GT_POS_POSTED-BUKRS
                  AND   BELNR = GT_POS_POSTED-BELNR
                  AND   GJAHR = GT_POS_POSTED-GJAHR
                  AND   BUZEI = GT_POS_POSTED-BUZEI.
        IF WA_BSEG-SHKZG = 'H'.
          WA_BSEG-MENGE = WA_BSEG-MENGE * ( -1 ).
          WA_BSEG-NEBTR = WA_BSEG-NEBTR * ( -1 ).
          WA_BSEG-BDIFF = WA_BSEG-BDIFF * ( -1 ).           "883851
          WA_BSEG-BDIF2 = WA_BSEG-BDIF2 * ( -1 ).
          WA_BSEG-BDIF3 = WA_BSEG-BDIF3 * ( -1 ).
          WA_BSEG-RDIFF = WA_BSEG-RDIFF * ( -1 ).
          WA_BSEG-RDIF2 = WA_BSEG-RDIF2 * ( -1 ).
          WA_BSEG-RDIF3 = WA_BSEG-RDIF3 * ( -1 ).           "883851
        ENDIF.
*     invoice reference:
        IF  WA_BSEG-REBZG IS INITIAL
        AND WA_BSEG-REBZT IS INITIAL.
          WA_BSEG-REBZG = WA_BSEG-BELNR.
        ENDIF.
*     fill special fields:
        READ TABLE IT_POS WITH KEY BUKRS = WA_BSEG-BUKRS
                             BELNR = WA_BSEG-BELNR
                             GJAHR = WA_BSEG-GJAHR
                             BUZEI = WA_BSEG-BUZEI
                             BINARY SEARCH.
        IF SY-SUBRC = 0.
          POSINDEX = SY-TABIX.
*       expiring currencies:
          IF  NOT GD_EXPCUR_FLAG IS INITIAL
          AND NOT GD_EXPCUR_BSEG IS INITIAL.
            SELECT SINGLE WAERS FROM BKPF INTO LD_WAERS
                                WHERE BUKRS = WA_BSEG-BUKRS
                                AND   BELNR = WA_BSEG-BELNR
                                AND   GJAHR = WA_BSEG-GJAHR.
            PERFORM ITEM_CURR_CONVERT_BSEG USING    GD_EXPCUR_PROC
                                                    IT_POS-HWAER
                                                    LD_WAERS
                                                        PA_STIDA
                                           CHANGING WA_BSEG.
          ENDIF.
          PERFORM MOVE_SPECIAL_FIELDS USING IT_SPECTAB-TNAME.
          MODIFY IT_POS INDEX POSINDEX.
        ENDIF.
      ENDSELECT.
    ENDIF.

*... now parked items tables:
    IF B0SG-XSTAV = 'X' AND NOT GT_POS_PARKED[] IS INITIAL.
      CLEAR WA_BSEG.
      CASE IT_POS-KOART.
        WHEN C_KOART_AR.
          SELECT * FROM VBSEGD INTO WA_VBSEGD
                   FOR ALL ENTRIES IN GT_POS_PARKED
                       WHERE AUSBK = GT_POS_PARKED-BUKRS
                       AND   BELNR = GT_POS_PARKED-BELNR
                       AND   GJAHR = GT_POS_PARKED-GJAHR
                       AND   BUKRS = GT_POS_PARKED-BUKRS
                       AND   BUZEI = GT_POS_PARKED-BUZEI.
            MOVE-CORRESPONDING WA_VBSEGD TO WA_BSEG.
            IF WA_BSEG-SHKZG = 'H'.
              WA_BSEG-MENGE = WA_BSEG-MENGE * ( -1 ).
            ENDIF.
            READ TABLE IT_POS WITH KEY BUKRS = WA_BSEG-BUKRS
                                 BELNR = WA_BSEG-BELNR
                                 GJAHR = WA_BSEG-GJAHR
                                 BUZEI = WA_BSEG-BUZEI
                                 BINARY SEARCH.
            IF SY-SUBRC = 0.
              POSINDEX = SY-TABIX.
*           expiring currencies:
              IF  NOT GD_EXPCUR_FLAG IS INITIAL
              AND NOT GD_EXPCUR_BSEG IS INITIAL.
                SELECT SINGLE WAERS FROM VBKPF INTO LD_WAERS
                                    WHERE AUSBK = WA_BSEG-BUKRS
                                    AND   BUKRS = WA_BSEG-BUKRS
                                    AND   BELNR = WA_BSEG-BELNR
                                    AND   GJAHR = WA_BSEG-GJAHR.
                PERFORM ITEM_CURR_CONVERT_BSEG USING    GD_EXPCUR_PROC
                                                        IT_POS-HWAER
                                                        LD_WAERS
                                                            PA_STIDA
                                               CHANGING WA_BSEG.
              ENDIF.
              PERFORM MOVE_SPECIAL_FIELDS USING IT_SPECTAB-TNAME.
              MODIFY IT_POS INDEX POSINDEX.
            ENDIF.
          ENDSELECT.
        WHEN C_KOART_AP.
          SELECT * FROM VBSEGK INTO WA_VBSEGK
                   FOR ALL ENTRIES IN GT_POS_PARKED
                       WHERE AUSBK = GT_POS_PARKED-BUKRS
                       AND   BELNR = GT_POS_PARKED-BELNR
                       AND   GJAHR = GT_POS_PARKED-GJAHR
                       AND   BUKRS = GT_POS_PARKED-BUKRS
                       AND   BUZEI = GT_POS_PARKED-BUZEI.
            MOVE-CORRESPONDING WA_VBSEGK TO WA_BSEG.
            IF WA_BSEG-SHKZG = 'H'.
              WA_BSEG-MENGE = WA_BSEG-MENGE * ( -1 ).
            ENDIF.
            READ TABLE IT_POS WITH KEY BUKRS = WA_BSEG-BUKRS
                                 BELNR = WA_BSEG-BELNR
                                 GJAHR = WA_BSEG-GJAHR
                                 BUZEI = WA_BSEG-BUZEI
                                 BINARY SEARCH.
            IF SY-SUBRC = 0.
              POSINDEX = SY-TABIX.
*           expiring currencies:
              IF  NOT GD_EXPCUR_FLAG IS INITIAL
              AND NOT GD_EXPCUR_BSEG IS INITIAL.
                SELECT SINGLE WAERS FROM VBKPF INTO LD_WAERS
                                    WHERE AUSBK = WA_BSEG-BUKRS
                                    AND   BUKRS = WA_BSEG-BUKRS
                                    AND   BELNR = WA_BSEG-BELNR
                                    AND   GJAHR = WA_BSEG-GJAHR.
                PERFORM ITEM_CURR_CONVERT_BSEG USING    GD_EXPCUR_PROC
                                                        IT_POS-HWAER
                                                        LD_WAERS
                                                            PA_STIDA
                                               CHANGING WA_BSEG.
              ENDIF.
              PERFORM MOVE_SPECIAL_FIELDS USING IT_SPECTAB-TNAME.
              MODIFY IT_POS INDEX POSINDEX.
            ENDIF.
          ENDSELECT.
        WHEN C_KOART_GL.

          LOOP AT IT_POS WHERE BSTAT = 'V'.
*         ausbk and bukrs is equal if buzei = 001
            REFRESH LT_SELOPTION.
            CLEAR LT_SELOPTION.
            IF IT_POS-BUZEI = '001'.
              LT_SELOPTION-SIGN  = 'I'.
              LT_SELOPTION-OPTION = 'EQ'.
              LT_SELOPTION-LOW = IT_POS-BUKRS.
              APPEND LT_SELOPTION.
            ENDIF.

            CLEAR: WA_VBSEGS_EXT, WA_BSEG.
            SELECT SINGLE *
                    INTO CORRESPONDING FIELDS OF WA_VBSEGS_EXT
                    FROM VBSEGS INNER JOIN VBKPF
                    ON   VBSEGS~AUSBK = VBKPF~AUSBK
                    AND  VBSEGS~BUKRS = VBKPF~BUKRS
                    AND  VBSEGS~BELNR = VBKPF~BELNR
                    AND  VBSEGS~GJAHR = VBKPF~GJAHR
                    WHERE VBSEGS~AUSBK IN LT_SELOPTION
                    AND   VBSEGS~BELNR = IT_POS-BELNR
                    AND   VBSEGS~GJAHR = IT_POS-GJAHR
                    AND   VBSEGS~BUKRS = IT_POS-BUKRS
                    AND   VBSEGS~BUZEI = IT_POS-BUZEI
                    AND   VBKPF~BUDAT  = IT_POS-BUDAT.

            MOVE-CORRESPONDING WA_VBSEGS_EXT TO WA_BSEG.
            WA_BSEG-PPRCT = WA_VBSEGS_EXT-PPRCTR.
            WA_BSEG-BEWAR = WA_VBSEGS_EXT-RMVCT.
            IF WA_BSEG-SHKZG = 'H'.
              WA_BSEG-MENGE = WA_BSEG-MENGE * ( -1 ).
            ENDIF.
            READ TABLE IT_POS WITH KEY BUKRS = WA_BSEG-BUKRS
                                 BELNR = WA_BSEG-BELNR
                                 GJAHR = WA_BSEG-GJAHR
                                 BUZEI = WA_BSEG-BUZEI
                                 BUDAT = WA_VBSEGS_EXT-BUDAT
                                 BINARY SEARCH.
            IF SY-SUBRC = 0.
              POSINDEX = SY-TABIX.
*           expiring currencies:
              IF  NOT GD_EXPCUR_FLAG IS INITIAL
              AND NOT GD_EXPCUR_BSEG IS INITIAL.

                PERFORM ITEM_CURR_CONVERT_BSEG USING   GD_EXPCUR_PROC
                                                       IT_POS-HWAER
                                                    WA_VBSEGS_EXT-WAERS
                                                            PA_STIDA
                                              CHANGING WA_BSEG.
              ENDIF.
              PERFORM MOVE_SPECIAL_FIELDS USING IT_SPECTAB-TNAME.
              MODIFY IT_POS INDEX POSINDEX.
            ENDIF.
          ENDLOOP.

      ENDCASE.
    ENDIF.
  ENDIF.

  PERFORM IT_POS_SORT_BACK TABLES IT_POS.

ENDFORM.                               " COMPLETE_BSEG


*&---------------------------------------------------------------------*
*&      Form  COMPLETE_BSEGC
*&---------------------------------------------------------------------*
FORM COMPLETE_BSEGC.

  CLEAR: WA_BSEGC.
  SELECT       (GT_SPEC_FIELDS)
        FROM BSEGC
        INTO CORRESPONDING FIELDS OF WA_BSEGC
         FOR ALL ENTRIES IN IT_POS
       WHERE BUKRS = IT_POS-BUKRS
         AND BELNR = IT_POS-BELNR
         AND GJAHR = IT_POS-GJAHR
         AND RFZEI = IT_POS-RFZEI.
*   fill special fields for all lines of document:
    LOOP AT IT_POS WHERE BUKRS = WA_BSEGC-BUKRS
                   AND   BELNR = WA_BSEGC-BELNR
                   AND   GJAHR = WA_BSEGC-GJAHR
                   AND   RFZEI = WA_BSEGC-RFZEI.
      PERFORM MOVE_SPECIAL_FIELDS USING IT_SPECTAB-TNAME.
      MODIFY IT_POS.
    ENDLOOP.
  ENDSELECT.

ENDFORM.                               " COMPLETE_BSEGC

*&---------------------------------------------------------------------*
*&      Form  COMPLETE_BSEC
*&---------------------------------------------------------------------*
FORM COMPLETE_BSEC.
  DATA: POSINDEX   LIKE SY-TABIX.
  DATA: F_BSEC_SEL(40) TYPE C,
        LT_BSEC_SEL    LIKE TABLE OF F_BSEC_SEL,
        LT_BSEC        LIKE WA_BSEC OCCURS 0 WITH HEADER LINE,
        LV_LEN         TYPE I.

  CLEAR: WA_BSEC, WA_VBSEC.

*... posted items:
*... NOTE 798255
  IF NOT IT_POS[] IS INITIAL.
    FREE LT_BSEC_SEL.
    APPEND 'BUKRS' TO LT_BSEC_SEL.
    APPEND 'BELNR' TO LT_BSEC_SEL.
    APPEND 'GJAHR' TO LT_BSEC_SEL.
    APPEND 'BUZEI' TO LT_BSEC_SEL.
    SELECT FNAME FROM T021S APPENDING TABLE LT_BSEC_SEL
                                         WHERE LSTCL = 2
                                           AND TNAME = 'BSEC'.

    SELECT (LT_BSEC_SEL) FROM BSEC
      INTO CORRESPONDING FIELDS OF TABLE LT_BSEC
      FOR ALL ENTRIES IN IT_POS
                WHERE BUKRS = IT_POS-BUKRS
                AND   BELNR = IT_POS-BELNR
                AND   GJAHR = IT_POS-GJAHR
                AND   BUZEI = IT_POS-BUZEI.

    SORT LT_BSEC BY BUKRS BELNR GJAHR BUZEI.

    LOOP AT IT_POS.
      POSINDEX = SY-TABIX.
      READ TABLE LT_BSEC INTO WA_BSEC
        WITH KEY BUKRS = IT_POS-BUKRS
                 BELNR = IT_POS-BELNR
                 GJAHR = IT_POS-GJAHR
                 BUZEI = IT_POS-BUZEI
        BINARY SEARCH.
      IF SY-SUBRC = 0.
        PERFORM MOVE_SPECIAL_FIELDS USING IT_SPECTAB-TNAME.
        MODIFY IT_POS INDEX POSINDEX.
      ENDIF.
    ENDLOOP.
  ENDIF.
*... NOTE 798255

*... parked items:
  IF B0SG-XSTAV = 'X'.
    CLEAR WA_BSEC.
    SELECT * FROM VBSEC INTO WA_VBSEC FOR ALL ENTRIES IN IT_POS
                  WHERE AUSBK = IT_POS-BUKRS
                  AND   BELNR = IT_POS-BELNR
                  AND   GJAHR = IT_POS-GJAHR
                  AND   BUZEI = IT_POS-BUZEI.
      MOVE-CORRESPONDING WA_VBSEC TO WA_BSEC.
      WA_BSEC-BUKRS = WA_VBSEC-AUSBK.
      READ TABLE IT_POS WITH KEY BUKRS = WA_BSEC-BUKRS
                               BELNR = WA_BSEC-BELNR
                               GJAHR = WA_BSEC-GJAHR
                               BUZEI = WA_BSEC-BUZEI.
      IF SY-SUBRC = 0.
        POSINDEX = SY-TABIX.
        PERFORM MOVE_SPECIAL_FIELDS USING IT_SPECTAB-TNAME.
        MODIFY IT_POS INDEX POSINDEX.
      ENDIF.
    ENDSELECT.
  ENDIF.

ENDFORM.                               " COMPLETE_BSEC

*&---------------------------------------------------------------------*
*&      Form  COMPLETE_BSED
*&---------------------------------------------------------------------*
FORM COMPLETE_BSED.
  DATA: POSINDEX   LIKE SY-TABIX.

  CLEAR: WA_BSED.
  SELECT * FROM BSED INTO WA_BSED FOR ALL ENTRIES IN IT_POS
                WHERE BUKRS = IT_POS-BUKRS
                AND   BELNR = IT_POS-BELNR
                AND   GJAHR = IT_POS-GJAHR
                AND   BUZEI = IT_POS-BUZEI.
    READ TABLE IT_POS WITH KEY BUKRS = WA_BSED-BUKRS
                             BELNR = WA_BSED-BELNR
                             GJAHR = WA_BSED-GJAHR
                             BUZEI = WA_BSED-BUZEI.
    IF SY-SUBRC = 0.
      POSINDEX = SY-TABIX.
      PERFORM MOVE_SPECIAL_FIELDS USING IT_SPECTAB-TNAME.
*     Handle additional special fields for bill of exchange.
      PERFORM MOVE_SPECIAL_FIELDS_BOE.
      MODIFY IT_POS INDEX POSINDEX.
    ENDIF.
  ENDSELECT.

ENDFORM.                               " COMPLETE_BSED

*&---------------------------------------------------------------------*
*&      Form  COMPLETE_PAYR
*&---------------------------------------------------------------------*
FORM COMPLETE_PAYR.
  DATA: NUMBER LIKE BSEG-AUGBL.

  LOOP AT IT_POS.
    CLEAR: WA_PAYR.
    SHIFT WA_PAYR-VOIDR BY 2 PLACES.
*   prospects of finding something in PAYR:
    IF IT_POS-KOART CO 'DK'.
      IF IT_POS-AUGBL IS INITIAL OR
         IT_POS-SHKZG EQ 'S' AND IT_POS-XZAHL EQ 'X'.
        NUMBER = IT_POS-BELNR.
      ELSE.
        NUMBER = IT_POS-AUGBL.
      ENDIF.
    ELSE.
      NUMBER = IT_POS-BELNR.
    ENDIF.
    CALL FUNCTION 'GET_CHECK_INFORMATION'
      EXPORTING
        I_AUGBL = NUMBER
        I_AUGDT = IT_POS-AUGDT
        I_BELNR = IT_POS-BELNR
        I_BUKRS = IT_POS-BUKRS
        I_GJAHR = IT_POS-GJAHR
        I_SHKZG = IT_POS-SHKZG
        I_XZAHL = IT_POS-XZAHL
        I_CALL  = SPACE
        I_KOART = IT_POS-KOART
      IMPORTING
        E_PAYR  = WA_PAYR
      EXCEPTIONS
        OTHERS  = 4.
    IF WA_PAYR-VOIDR IS INITIAL.
      SHIFT WA_PAYR-VOIDR BY 2 PLACES.
    ENDIF.
    PERFORM MOVE_SPECIAL_FIELDS USING IT_SPECTAB-TNAME.
    MODIFY IT_POS.
  ENDLOOP.

ENDFORM.                               " COMPLETE_PAYR

*&---------------------------------------------------------------------*
*&      Form  COMPLETE_BSBV
*&---------------------------------------------------------------------*
FORM COMPLETE_BSBV.

  LOOP AT IT_POS.
    CLEAR: WA_BSBV.
    CALL FUNCTION 'VALUATION_FETCH_BSBV'
      EXPORTING
        I_BUKRS = IT_POS-BUKRS
        I_GJAHR = IT_POS-GJAHR
        I_BELNR = IT_POS-BELNR
        I_BUZEI = IT_POS-BUZEI
        I_KUNNR = IT_POS-KONTO
      IMPORTING
        E_BSBV  = WA_BSBV.
    IF IT_POS-SHKZG = 'H'.                                  "1002712
      WA_BSBV-BWSHB1 = WA_BSBV-BWSHB1 * ( -1 ).             "1002712
      WA_BSBV-BWSHB2 = WA_BSBV-BWSHB2 * ( -1 ).             "1002712
      WA_BSBV-BWSHB3 = WA_BSBV-BWSHB3 * ( -1 ).             "1002712
      WA_BSBV-BWSHB4 = WA_BSBV-BWSHB4 * ( -1 ).             "1002712
      WA_BSBV-BWSHB5 = WA_BSBV-BWSHB5 * ( -1 ).             "1002712
      WA_BSBV-BWSHB6 = WA_BSBV-BWSHB6 * ( -1 ).             "1002712
    ENDIF.                                                  "1002712
    PERFORM MOVE_SPECIAL_FIELDS USING IT_SPECTAB-TNAME.
    MODIFY IT_POS.
  ENDLOOP.

ENDFORM.                               " COMPLETE_BSBV

*&---------------------------------------------------------------------*
*&      Form  MOVE_SPECIAL_FIELDS
*&---------------------------------------------------------------------*
FORM MOVE_SPECIAL_FIELDS  USING  P_TNAME LIKE DD03P-TABNAME.
  FIELD-SYMBOLS: <FS_SP_TAB>, <FS_IT_POS>.

  LOOP AT IT_MOVEREF WHERE TNAME = P_TNAME.
    ASSIGN IT_MOVEREF-FLDREF->*   TO <FS_SP_TAB>.
    ASSIGN IT_MOVEREF-FLDREF_2->* TO <FS_IT_POS>.
    MOVE <FS_SP_TAB> TO <FS_IT_POS>.
  ENDLOOP.

ENDFORM.                               " MOVE_SPECIAL_FIELDS

*&---------------------------------------------------------------------*
*&      Form  UPD_SPECIAL_STATUS
*&---------------------------------------------------------------------*
FORM UPD_SPECIAL_STATUS.

*... special table status: pending -> processed
  LOOP AT IT_SPECTAB WHERE TSTAT = 'P'.
    IT_SPECTAB-TSTAT = 'X'.
    MODIFY IT_SPECTAB.
*... corresponding special field status: ? -> processed
    LOOP AT IT_SPECFLD WHERE TNAME = IT_SPECTAB-TNAME.
      IT_SPECFLD-FSTAT = 'X'.
      MODIFY IT_SPECFLD.
    ENDLOOP.
  ENDLOOP.

ENDFORM.                               " UPD_SPECIAL_STATUS

*&---------------------------------------------------------------------*
*&      Form  CHECK_ITEM_OK
*&---------------------------------------------------------------------*
FORM CHECK_ITEM_OK USING    P_NORM
                            P_SHBV
                            P_MERK
                            P_PARK
                            P_ITEM    LIKE RFPOSXEXT
                   CHANGING P_OKAY.

  CLEAR P_OKAY.
* normal document:
  IF P_NORM = 'X'.
    IF ( P_ITEM-BSTAT = SPACE ) AND ( P_ITEM-UMSKZ = SPACE ).
      P_OKAY = 'X'.
    ENDIF.
  ENDIF.
* SHB item:
  IF P_SHBV = 'X'.
    IF ( P_ITEM-UMSKZ NE SPACE ) AND ( P_ITEM-BSTAT NE 'S' ) AND
       ( P_ITEM-BSTAT NE 'V' )   AND ( P_ITEM-BSTAT NE 'W' ) AND
       ( P_ITEM-BSTAT NE 'Z' ).
      P_OKAY = 'X'.
    ENDIF.
  ENDIF.
* Merkposten:
  IF P_MERK = 'X'.
    IF P_ITEM-BSTAT = 'S'.
      P_OKAY = 'X'.
    ENDIF.
  ENDIF.
* parked document:
  IF P_PARK = 'X'.
    IF ( P_ITEM-BSTAT = 'V' ) OR ( P_ITEM-BSTAT = 'W' ).
      P_OKAY = 'X'.
    ENDIF.
  ENDIF.

ENDFORM.                               " CHECK_ITEM_OK

*&---------------------------------------------------------------------*
*&      Form  INIT_KKCURR_TABLE
*&---------------------------------------------------------------------*
FORM INIT_KKCURR_TABLE.
  SELECT KKBER WAERS FROM T014 INTO IT_KKCURR.
    INSERT TABLE IT_KKCURR.
  ENDSELECT.
ENDFORM.                               " INIT_KKCURR_TABLE

*&---------------------------------------------------------------------*
*&      Form  ITEM_CURRENCY_FIELDS
*&---------------------------------------------------------------------*
FORM ITEM_CURRENCY_FIELDS.
  WA_POS-HWAE2 = WA_X001-HWAE2.
  WA_POS-HWAE3 = WA_X001-HWAE3.
  READ TABLE IT_KKCURR WITH KEY KKBER = WA_POS-KKBER
                       BINARY SEARCH.
  IF SY-SUBRC = 0.
    WA_POS-KKBWR = IT_KKCURR-CURRY.
  ENDIF.
ENDFORM.                               " ITEM_CURRENCY_FIELDS

*&---------------------------------------------------------------------*
*&      Form  ACCTAB_FILL
*&---------------------------------------------------------------------*
FORM FILL_ACCT_TABLE  USING  P_KOART LIKE RFEPK-KOART
                             P_KONTO LIKE RFEPK-KONTO
                             P_BUKRS LIKE RFEPK-BUKRS
                             P_REFKT LIKE RFEPK-REFKT
                             P_NAME1 LIKE RFEPK-NAME1
                             P_SAKAN LIKE RFEPK-SAKAN.

  CLEAR: IT_ACCTS.
  IT_ACCTS-KONTO = P_KONTO.
  IT_ACCTS-BUKRS = P_BUKRS.
  IT_ACCTS-KOART = P_KOART.
  IT_ACCTS-REFKT = P_REFKT.
  IT_ACCTS-NAME1 = P_NAME1.
  IT_ACCTS-SAKAN = P_SAKAN.
  APPEND IT_ACCTS.

ENDFORM.                    "fill_acct_table

*&---------------------------------------------------------------------*
*&      Form  COMTAB_FILL
*&---------------------------------------------------------------------*
FORM FILL_COMP_TABLE  USING  P_BUKRS LIKE RFEPB-BUKRS
                             P_WAERS LIKE RFEPB-WAERS
                             P_KKBER LIKE RFEPB-KKBER.

  CLEAR: IT_COMPS.
  CALL FUNCTION 'FI_PERIOD_DETERMINE'
       EXPORTING
            I_BUDAT        = SY-DATLO
            I_BUKRS        = P_BUKRS
*           I_PERIV        = ' '
*           I_GJAHR        = 0000
*           I_MONAT        = 00
*           X_XMO16        = ' '
       IMPORTING
            E_GJAHR        = IT_COMPS-GJAHR
            .
  IF SY-SUBRC NE 0.
  ENDIF.
  IT_COMPS-BUKRS = P_BUKRS.
  IT_COMPS-WAERS = P_WAERS.
  IT_COMPS-KKBER = P_KKBER.
  APPEND IT_COMPS.
ENDFORM.                    "fill_comp_table

*&---------------------------------------------------------------------*
*&      Form  ITEM_CHECK_APPEND
*&---------------------------------------------------------------------*
FORM ITEM_CHECK_APPEND.
  DATA: GTEXT(60)    TYPE C,
        IGUI         TYPE I.
  DATA: LD_SHKZG     LIKE BSEG-SHKZG.
  CONSTANTS:
        LDC_DEBIT    LIKE BSEG-SHKZG VALUE 'S',
        LDC_CREDIT   LIKE BSEG-SHKZG VALUE 'H'.

  CHECK: WA_POS-BWWRT IN SO_BWWRT,
         WA_POS-BWWR2 IN SO_BWWR2,
         WA_POS-BWWR3 IN SO_BWWR3,
         WA_POS-DMSHB IN SO_DMSHB,
         WA_POS-HWAER IN SO_HWAER,
         WA_POS-DMBE2 IN SO_DMBE2,
         WA_POS-HWAE2 IN SO_HWAE2,
         WA_POS-DMBE3 IN SO_DMBE3,
         WA_POS-HWAE3 IN SO_HWAE3,
         WA_POS-FAEDT IN SO_FAEDT,
         WA_POS-JAMON IN SO_JAMON,
         WA_POS-KOART IN SO_KOART.

  CHECK: WA_POS-QBSHB IN SO_QBSHB,
         WA_POS-QSFBT IN SO_QSFBT,
         WA_POS-QSSHB IN SO_QSSHB,
         WA_POS-SKFBT IN SO_SKFBT,
         WA_POS-WSKTO IN SO_WSKTO,
         WA_POS-SKNTO IN SO_SKNTO,
         WA_POS-VERZ1 IN SO_VERZ1,
         WA_POS-VERZN IN SO_VERZN,
         WA_POS-WRSHB IN SO_WRSHB,
         WA_POS-PSWSL IN SO_WAERS,
         WA_POS-ZALDT IN SO_ZALDT,
         WA_POS-ZINSZ IN SO_ZINSZ.

  CHECK: WA_POS-ASKTO IN SO_ASKTO,
         WA_POS-KURSE IN SO_KURSE,
         WA_POS-KKBWR IN SO_KKBWR.

  CHECK: WA_POS-GSBER IN SO_GSBER.

* check debit/credit flag according to negative posting:
  IF WA_POS-XNEGP IS INITIAL.
    LD_SHKZG = WA_POS-SHKZG.
  ELSE.
    IF WA_POS-SHKZG = LDC_DEBIT.
      LD_SHKZG = LDC_CREDIT.
    ELSE.
      LD_SHKZG = LDC_DEBIT.
    ENDIF.
  ENDIF.
  CHECK: LD_SHKZG IN SO_SHKZG.

*>>>>> Begin of EXTUVE
  move-corresponding wa_pos to wa_pos2.
  APPEND  WA_POS2 TO IT_POS.
*>>>>> End of EXTUVE

* number of selected items on gui:
  IGUI = SY-TABIX MOD C_GUICNT.
  IF IGUI = 0.
    WRITE SY-TABIX TO GTEXT+0.
    CONDENSE GTEXT.
    WRITE TEXT-008 TO GTEXT+20.
    CONDENSE GTEXT.
    CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
      EXPORTING
        TEXT = GTEXT.
  ENDIF.

ENDFORM.                               " ITEM_CHECK_APPEND

*&---------------------------------------------------------------------*
*&      Form  GET_GENERAL_PARAM
*&---------------------------------------------------------------------*
FORM GET_GENERAL_PARAM.
  DATA: CHARH(16)   TYPE C,
        LD_NUM(16)  TYPE N.
  DATA: LS_RFOPT  TYPE RFOPT.
  DATA: LD_PARID TYPE USR05-PARID.

*... get checkbox stuff depending on acc.type:
  CASE SY-REPID.
    WHEN C_REPID_AR.
      GET PARAMETER ID 'FIT_X_AR' FIELD CHARH.
      GET PARAMETER ID 'FIT_ALV_AR' FIELD PA_VARI.
      LD_PARID = 'FIT_ALV_AR'.
    WHEN C_REPID_AP.
      GET PARAMETER ID 'FIT_X_AP' FIELD CHARH.
      GET PARAMETER ID 'FIT_ALV_AP' FIELD PA_VARI.
      LD_PARID = 'FIT_ALV_AP'.
    WHEN C_REPID_GL.
      GET PARAMETER ID 'FIT_X_GL' FIELD CHARH.
      GET PARAMETER ID 'FIT_ALV_GL' FIELD PA_VARI.
      LD_PARID = 'FIT_ALV_GL'.
    WHEN OTHERS.
*     horror case!
      EXIT.
  ENDCASE.
  IF NOT CHARH IS INITIAL.
    X_NORM = CHARH(1).
    X_SHBV = CHARH+1(1).
    X_MERK = CHARH+2(1).
    X_PARK = CHARH+3(1).
    X_APAR = CHARH+4(1).
  ENDIF.

*...changing of pa_vari (default value FIT_ALV_**)
  GET PARAMETER ID 'FOP' FIELD LS_RFOPT.
  IF NOT LS_RFOPT-XARBV IS INITIAL.
    SELECT SINGLE PARVA FROM USR05 INTO (PA_VARI)
                        WHERE BNAME = SY-UNAME
                        AND PARID = LD_PARID.
    IF SY-SUBRC <> 0.
      CLEAR PA_VARI.
    ENDIF.
  ENDIF.

*... get item number limit:
  GET PARAMETER ID 'FIT_X_NMAX' FIELD LD_NUM.
  IF LD_NUM CO ' 0123456789'.
    PA_NMAX = LD_NUM.
  ENDIF.

ENDFORM.                               " GET_GENERAL_PARAM

*&---------------------------------------------------------------------*
*&      Form  SET_GENERAL_PARAM
*&---------------------------------------------------------------------*
FORM SET_GENERAL_PARAM.

  DATA: LS_RFOPT  TYPE RFOPT.
  DATA: CHARH(16) TYPE C,
        LD_NUM(16)  TYPE N,
        LS_USR05  LIKE USR05.
  DATA: LD_REFRESH_COUNT   TYPE I,
        LD_MEMORY_ID(40)   TYPE C.

  CHECK SY-CALLD IS INITIAL.
  CHECK SY-TCODE CP 'FBL+N' OR
      ( SY-TCODE CP 'S+38' AND SY-REPID CP 'RFITEM++' ) OR
      ( SY-TCODE EQ 'SE80' AND SY-REPID CP 'RFITEM++' ).

  CHARH(1)   = X_NORM.
  CHARH+1(1) = X_SHBV.
  CHARH+2(1) = X_MERK.
  CHARH+3(1) = X_PARK.
  CHARH+4(1) = X_APAR.
* if in refresh call, then do not update layout parameter:
  LD_MEMORY_ID = SY-REPID.
  WRITE '/REFR' TO LD_MEMORY_ID+35(5).
  CONDENSE LD_MEMORY_ID NO-GAPS.
  IMPORT COUNTER TO LD_REFRESH_COUNT
         FROM MEMORY ID LD_MEMORY_ID.
  CASE SY-REPID.
    WHEN C_REPID_AR.
      SET PARAMETER ID 'FIT_X_AR'   FIELD CHARH.
      IF LD_REFRESH_COUNT = 0.
        GET PARAMETER ID 'FOP' FIELD LS_RFOPT.
        IF LS_RFOPT-XARBV IS INITIAL.
          SET PARAMETER ID 'FIT_ALV_AR' FIELD PA_VARI.
          WRITE 'FIT_ALV_AR' TO LS_USR05-PARID.
        ELSE.
          SET PARAMETER ID 'FIT_ALV_AR' FIELD SPACE.
        ENDIF.
      ENDIF.
    WHEN C_REPID_AP.
      SET PARAMETER ID 'FIT_X_AP'   FIELD CHARH.
      IF LD_REFRESH_COUNT = 0.
        GET PARAMETER ID 'FOP' FIELD LS_RFOPT.
        IF LS_RFOPT-XARBV IS INITIAL.
          SET PARAMETER ID 'FIT_ALV_AP' FIELD PA_VARI.
          WRITE 'FIT_ALV_AP' TO LS_USR05-PARID.
        ELSE.
          SET PARAMETER ID 'FIT_ALV_AP' FIELD SPACE.
        ENDIF.
      ENDIF.
    WHEN C_REPID_GL.
      SET PARAMETER ID 'FIT_X_GL'   FIELD CHARH.
      IF LD_REFRESH_COUNT = 0.
        GET PARAMETER ID 'FOP' FIELD LS_RFOPT.
        IF LS_RFOPT-XARBV IS INITIAL.
          SET PARAMETER ID 'FIT_ALV_GL' FIELD PA_VARI.
          WRITE 'FIT_ALV_GL' TO LS_USR05-PARID.
        ELSE.
          SET PARAMETER ID 'FIT_ALV_GL' FIELD SPACE.
        ENDIF.
      ENDIF.
    WHEN OTHERS.
*     horror case!
      EXIT.
  ENDCASE.
  IF LD_REFRESH_COUNT = 0.
    GET PARAMETER ID 'FOP' FIELD LS_RFOPT.
    IF LS_RFOPT-XARBV IS INITIAL.
      LS_USR05-BNAME = SY-UNAME.
      WRITE PA_VARI TO LS_USR05-PARVA.
      IF LS_USR05-PARVA IS INITIAL.
        DELETE FROM USR05 WHERE BNAME = LS_USR05-BNAME
                          AND   PARID = LS_USR05-PARID.
      ELSE.
        MODIFY USR05 FROM LS_USR05.
      ENDIF.
      COMMIT WORK.
    ENDIF.
  ENDIF.
  LD_NUM = PA_NMAX.
  SET PARAMETER ID 'FIT_X_NMAX' FIELD LD_NUM.

ENDFORM.                               " SET_GENERAL_PARAM

*&---------------------------------------------------------------------*
*&      Form  SAVE_ALL_SELECTIONS
*&---------------------------------------------------------------------*
FORM SAVE_ALL_SELECTIONS.

*... set pa_cent finally:
  PERFORM SET_PA_CENT.

*... get report selection-screen selections:
  CALL FUNCTION 'RS_REFRESH_FROM_SELECTOPTIONS'
    EXPORTING
      CURR_REPORT     = G_REPID
    IMPORTING
      SP              = GT_SEARCHPATTERN
    TABLES
      SELECTION_TABLE = GT_SELSCREEN
    EXCEPTIONS
      NOT_FOUND       = 1
      NO_REPORT       = 2
      OTHERS          = 3.
  IF SY-SUBRC > 1.
    EXIT.
  ENDIF.
*... get report dynamic selections:
  CALL FUNCTION 'RS_REFRESH_FROM_DYNAMICAL_SEL'
    EXPORTING
      CURR_REPORT        = G_REPID
      MODE_WRITE_OR_MOVE = 'M'
    IMPORTING
      P_TRANGE           = GT_DYN_TRANGE
    EXCEPTIONS
      NOT_FOUND          = 1
      WRONG_TYPE         = 2
      OTHERS             = 3.
  IF SY-SUBRC > 1.
    EXIT.
  ENDIF.
  CALL FUNCTION 'FREE_SELECTIONS_RANGE_2_EX'
    EXPORTING
      FIELD_RANGES = GT_DYN_TRANGE
    IMPORTING
      EXPRESSIONS  = GT_DYN_TEXPR.

ENDFORM.                               " SAVE_ALL_SELECTIONS

*&---------------------------------------------------------------------*
*&      Form  SET_PA_CENT
*&---------------------------------------------------------------------*
FORM SET_PA_CENT.
  DATA: LB_CENT_FILLED TYPE C,
        LB_CENT_EMPTY  TYPE C.

* already non initial => exit:
  CHECK PA_CENT IS INITIAL.
* no branch/central entries => exit:
  READ TABLE IT_CENTRAL INDEX 1.
  CHECK SY-SUBRC = 0.
* check for either filled or empty central entries:
  LOOP AT IT_CENTRAL WHERE NOT CENTRAL IS INITIAL.
    LB_CENT_FILLED = C_TRUE.
    EXIT.
  ENDLOOP.
  LOOP AT IT_CENTRAL WHERE CENTRAL IS INITIAL.
    LB_CENT_EMPTY = C_TRUE.
    EXIT.
  ENDLOOP.
  IF LB_CENT_FILLED NE LB_CENT_EMPTY.
*   pure case:
    IF LB_CENT_FILLED = C_TRUE.
*     all filled, none empty
      PA_CENT = 'Y'.
    ELSE.
*     none filled, all empty
      PA_CENT = 'N'.
    ENDIF.
  ELSE.
*   mixed case: prompt user
    CLEAR PA_CENT.
  ENDIF.

ENDFORM.                               " SET_PA_CENT


*&---------------------------------------------------------------------*
*&      Form  display_grid_or_classic
*&---------------------------------------------------------------------*
FORM DISPLAY_GRID_OR_CLASSIC.
  DATA: LD_PARAM    TYPE C.

*... set list display type depending on parameters:
  CASE PA_GRID.
    WHEN 'Y'.
      X_GRID = C_X.
    WHEN 'N'.
      CLEAR X_GRID.
    WHEN OTHERS.
      GET PARAMETER ID 'FIT_ALVC' FIELD LD_PARAM.
      IF NOT LD_PARAM IS INITIAL.
        X_GRID = C_X.
      ELSE.
        CLEAR X_GRID.
      ENDIF.
  ENDCASE.

*... if programm is running in batch, choose ALV list.
  IF SY-BATCH = 'X'.
    CLEAR X_GRID.
  ENDIF.

ENDFORM.                               " display_grid_or_classic

*&---------------------------------------------------------------------*
*&      Form  start_again
*&---------------------------------------------------------------------*
FORM START_AGAIN.

  MESSAGE S033.
  SUBMIT (G_REPID) WITH SELECTION-TABLE GT_SELSCREEN
                   WITH FREE SELECTIONS GT_DYN_TEXPR
                   WITH KD_INDEX EQ GT_SEARCHPATTERN
                   WITH DD_INDEX EQ GT_SEARCHPATTERN
                   WITH SD_INDEX EQ GT_SEARCHPATTERN
                   VIA SELECTION-SCREEN.

ENDFORM.                               " start_again

*&---------------------------------------------------------------------*
*&      Form  MAKE_FIELDCATALOG
*&---------------------------------------------------------------------*
FORM MAKE_FIELDCATALOG.
  DATA: LT_DFIES_RFPOSX   LIKE DFIES OCCURS  50 WITH HEADER LINE,
        LT_DFIES_BSIX     LIKE DFIES OCCURS 100 WITH HEADER LINE,
        LT_DUPLICATES     TYPE TPIT_T_FNAME WITH HEADER LINE,
        LD_FNAME          LIKE DFIES-FIELDNAME,
        LD_NAME_BSIX      LIKE DCOBJDEF-NAME,
        LT_FMRFC          LIKE FMRFC OCCURS 1.

*...define icon fields:

  CLEAR GT_FIELDCAT.
  GT_FIELDCAT-FIELDNAME = 'SYM_AUGP'.
  GT_FIELDCAT-SYMBOL    = 'X'.
  APPEND GT_FIELDCAT.
  CLEAR GT_FIELDCAT.
  GT_FIELDCAT-FIELDNAME = 'ICO_AUGP'.
  GT_FIELDCAT-ICON      = 'X'.
  APPEND GT_FIELDCAT.
  CLEAR GT_FIELDCAT.
  GT_FIELDCAT-FIELDNAME = 'ICO_DUE'.
  GT_FIELDCAT-ICON      = 'X'.
  APPEND GT_FIELDCAT.
  CLEAR GT_FIELDCAT.
  GT_FIELDCAT-FIELDNAME = 'ICO_DUE1'.
  GT_FIELDCAT-ICON      = 'X'.
  APPEND GT_FIELDCAT.

*...define technical and obsolete fields (static):

  CLEAR GT_FIELDCAT.
  GT_FIELDCAT-FIELDNAME = 'ACTIV'.
  GT_FIELDCAT-TECH      = 'X'.
  APPEND GT_FIELDCAT.
  CLEAR GT_FIELDCAT.
  GT_FIELDCAT-FIELDNAME = 'STAKZ'.
  GT_FIELDCAT-TECH      = 'X'.
  APPEND GT_FIELDCAT.
  CLEAR GT_FIELDCAT.
  GT_FIELDCAT-FIELDNAME = 'XAUGP'.
  GT_FIELDCAT-TECH      = 'X'.
  APPEND GT_FIELDCAT.
  CLEAR GT_FIELDCAT.
  GT_FIELDCAT-FIELDNAME = 'COLOR'.
  GT_FIELDCAT-TECH      = 'X'.
  APPEND GT_FIELDCAT.
  CLEAR GT_FIELDCAT.
  GT_FIELDCAT-FIELDNAME = 'XZAHL'.
  GT_FIELDCAT-TECH      = 'X'.
  APPEND GT_FIELDCAT.
* DLA long procurement number longnum  ERP05
  DATA:  CL_CHANGE TYPE REF TO /SAPPSPRO/CL_NUMBERS,
         LF_ACTIVE TYPE BOOLEAN.
  CREATE OBJECT CL_CHANGE.
  CALL METHOD CL_CHANGE->IS_ACTIVE
    RECEIVING
      RV_ACTIVE = LF_ACTIVE.
* hide LONGNUM if DLA is not active
  IF LF_ACTIVE = SPACE.
    CLEAR GT_FIELDCAT.
    GT_FIELDCAT-FIELDNAME = 'LONGNUM'.
    GT_FIELDCAT-TECH      = 'X'.
    APPEND GT_FIELDCAT.
  ENDIF.
* hide GKONT and GKART, if OPEN FI exit 1650 not used:
  CALL FUNCTION 'BF_FUNCTIONS_FIND'
    EXPORTING
      I_EVENT       = '00001650'
    TABLES
      T_FMRFC       = LT_FMRFC
    EXCEPTIONS
      NOTHING_FOUND = 1
      OTHERS        = 2.
  IF SY-SUBRC NE 0.
    CLEAR GT_FIELDCAT.
    GT_FIELDCAT-FIELDNAME = 'GKONT'.
    GT_FIELDCAT-TECH      = 'X'.
    APPEND GT_FIELDCAT.
    CLEAR GT_FIELDCAT.
    GT_FIELDCAT-FIELDNAME = 'GKART'.
    GT_FIELDCAT-TECH      = 'X'.
    APPEND GT_FIELDCAT.
  ENDIF.

*...define obsolete fields (dynamic):

* check for existence of special fields:
  READ TABLE IT_T021S INDEX 1.
  CHECK SY-SUBRC = 0.

* get RFPOSX field list:
  CALL FUNCTION 'DDIF_NAMETAB_GET'
       EXPORTING
            TABNAME     = 'RFPOSX'
       TABLES
*           X031L_TAB   =
            DFIES_TAB   = LT_DFIES_RFPOSX
       EXCEPTIONS
            NOT_FOUND   = 1
            OTHERS      = 2
            .
  CHECK SY-SUBRC = 0.

* collect duplicates = special fields which are contained in RFPOSX:
  LOOP AT IT_T021S.
    CHECK NOT IT_T021S-TNAME IS INITIAL.
    READ TABLE LT_DFIES_RFPOSX WITH KEY
                               FIELDNAME = IT_T021S-FNAME.
    CHECK SY-SUBRC = 0.
    LT_DUPLICATES-FNAME = IT_T021S-FNAME.
    APPEND LT_DUPLICATES.
  ENDLOOP.

* found duplicates?
  READ TABLE LT_DUPLICATES INDEX 1.
  CHECK SY-SUBRC = 0.

* get BSIx field list:
  CASE G_REPID.
    WHEN C_REPID_AR.
      LD_NAME_BSIX = 'BSID'.
    WHEN C_REPID_AP.
      LD_NAME_BSIX = 'BSIK'.
    WHEN C_REPID_GL.
      LD_NAME_BSIX = 'BSIS'.
  ENDCASE.
  CALL FUNCTION 'DDIF_NAMETAB_GET'
       EXPORTING
            TABNAME     = LD_NAME_BSIX
       TABLES
*           X031L_TAB   =
            DFIES_TAB   = LT_DFIES_BSIX
       EXCEPTIONS
            NOT_FOUND   = 1
            OTHERS      = 2
            .
  CHECK SY-SUBRC = 0.

* check whether duplicates are contained in BSIx:
  LOOP AT LT_DUPLICATES.
    CLEAR LD_FNAME.
    READ TABLE LT_DFIES_BSIX WITH KEY
                             FIELDNAME = LT_DUPLICATES-FNAME.
    IF SY-SUBRC = 0.
*     standard field ok. set special field to 'tech':
      LD_FNAME = 'U_'.
      WRITE LT_DUPLICATES-FNAME TO LD_FNAME+2.
    ELSE.
*     special field ok. set standard field to 'tech':
      LD_FNAME = LT_DUPLICATES-FNAME.
    ENDIF.
    CLEAR GT_FIELDCAT.
    GT_FIELDCAT-FIELDNAME = LD_FNAME.
    GT_FIELDCAT-TECH      = 'X'.
    APPEND GT_FIELDCAT.
  ENDLOOP.

ENDFORM.                               " MAKE_FIELDCATALOG


*&---------------------------------------------------------------------*
*&      Form  make_fieldcatalog2
*&      set TP-fields as TECH if TP-authority doesn't exists
*&---------------------------------------------------------------------*
FORM MAKE_FIELDCATALOG2.

* remove tp table entries
  LOOP AT IT_TP_FIELDS.
    DELETE GT_FIELDCAT WHERE FIELDNAME = IT_TP_FIELDS-FNAME.
  ENDLOOP.

* check transfer price authority
  PERFORM CHECK_TP_AUTH.

* if authority is missing: field = tech
  READ TABLE IT_TP_AUTH WITH KEY AUTH = SPACE.
  IF SY-SUBRC EQ 0.
    LOOP AT IT_TP_FIELDS.
      CLEAR GT_FIELDCAT.
      GT_FIELDCAT-FIELDNAME = IT_TP_FIELDS-FNAME.
      GT_FIELDCAT-TECH = 'X'.
      APPEND GT_FIELDCAT.
    ENDLOOP.
  ENDIF.

ENDFORM.                    " make_fieldcatalog2


*&---------------------------------------------------------------------*
*&      Form  dynp_get_status
*&---------------------------------------------------------------------*
FORM DYNP_GET_STATUS USING    ID_FUN
                     CHANGING CD_VAL.
  DATA: LD_VAL_SAVE TYPE I.

  LD_VAL_SAVE = CD_VAL.
  CALL 'DYNP_GET_STATUS'
         ID 'FUNCTION' FIELD ID_FUN
         ID 'VALUE'    FIELD CD_VAL.
  IF SY-SUBRC NE 0.
    CD_VAL = LD_VAL_SAVE.
  ENDIF.

ENDFORM.                               " dynp_get_status

*&---------------------------------------------------------------------*
*&      Form  export_filitexts_data
*&---------------------------------------------------------------------*
FORM EXPORT_FILITEXTS_DATA.

  EXPORT STIDA FROM PA_STIDA_DEFAULT
         TO MEMORY ID 'FILITXT01'.

ENDFORM.                               " export_filitexts_data
*----------------------------------------------------------------------*
*   form wl_memory_set_get
*   set/get parameter for worklist setting
*----------------------------------------------------------------------*
FORM WL_MEMORY_SET_GET  USING    ID_SET    TYPE C
                        CHANGING CD_WL_ON  TYPE C.

  IF ID_SET IS INITIAL.
    GET PARAMETER ID 'FIT_WL' FIELD CD_WL_ON.
  ELSE.
    SET PARAMETER ID 'FIT_WL' FIELD CD_WL_ON.
  ENDIF.

ENDFORM.                    "wl_memory_set_get

*----------------------------------------------------------------------*
*   form wl_flag_and_button
*   set global flag and button text according to static memory
*----------------------------------------------------------------------*
FORM WL_FLAG_AND_BUTTON.

  PERFORM WL_MEMORY_SET_GET USING SPACE
                                  GD_WL_ON.
  IF GD_WL_ON IS INITIAL.
    SSCRFIELDS-FUNCTXT_01 = TEXT-W01.
  ELSE.
    SSCRFIELDS-FUNCTXT_01 = TEXT-W04.
  ENDIF.

ENDFORM.                    "wl_flag_and_button

*----------------------------------------------------------------------*
*   form worklist_on_off
*   set worklist flag on <-> off, set button text accordingly
*----------------------------------------------------------------------*
FORM WORKLIST_ON_OFF.

  DATA: LD_VALUE   TYPE C.

  IF GD_WL_ON = C_X.
    PERFORM WL_MEMORY_SET_GET USING C_X
                                    LD_VALUE.
  ELSE.
    LD_VALUE = C_X.
    PERFORM WL_MEMORY_SET_GET USING C_X
                                    LD_VALUE.
  ENDIF.
  PERFORM WL_FLAG_AND_BUTTON.

ENDFORM.                    "worklist_on_off

*----------------------------------------------------------------------*
*   form wl_modify_screen
*   hide screen fields according to worklist flag setting
*----------------------------------------------------------------------*
FORM WL_MODIFY_SCREEN.

  IF GD_WL_ON IS INITIAL.
*   worklist off -> hide worklist layout:
    IF SCREEN-GROUP1 = 'WKL'.
      SCREEN-ACTIVE    = 0.
      SCREEN-INVISIBLE = 1.
    ENDIF.
  ELSE.
*   worklist on -> hide LDB layout:
    IF SCREEN-GROUP2 = 'DBS'.
      SCREEN-ACTIVE    = 0.
      SCREEN-INVISIBLE = 1.
    ENDIF.
  ENDIF.

ENDFORM.                    "wl_modify_screen

*----------------------------------------------------------------------*
*   form resolve_worklist
*   read worklist table entries for a given worklist identifier
*----------------------------------------------------------------------*
FORM RESOLVE_WORKLIST  TABLES ET_COSEL TYPE TCOSEL
                       USING  ID_WORKLIST LIKE TFAV-IDENT
                              ID_OBJCT    LIKE TFAV-OBJCT.

  DATA: LT_TFAVW TYPE STANDARD TABLE OF TFAVW WITH HEADER LINE.

  REFRESH ET_COSEL.
  CALL FUNCTION 'RF_WORKLISTS_VALUES_GET'
    EXPORTING
      ID_OBJCT     = ID_OBJCT
      ID_IDENT     = ID_WORKLIST
    TABLES
      ET_TFAVW     = LT_TFAVW
    EXCEPTIONS
      NOT_EXISTING = 1.
  IF SY-SUBRC NE 0.
    MESSAGE E040(MSITEM) WITH ID_WORKLIST.
  ENDIF.
  ET_COSEL-FIELD  = ID_OBJCT.
  ET_COSEL-SIGN   = 'I'.
  ET_COSEL-OPTION = 'EQ'.
  CLEAR ET_COSEL-HIGH.
  LOOP AT LT_TFAVW.
    ET_COSEL-LOW = LT_TFAVW-VALUE.
    APPEND ET_COSEL.
  ENDLOOP.

ENDFORM.                    "resolve_worklist

*&---------------------------------------------------------------------*
*&      Form  CHANGE_STATUS
*&---------------------------------------------------------------------*
FORM CHANGE_STATUS.

  DATA: BEGIN OF LT_EXCLUDE OCCURS 5,
          FCODE LIKE SY-UCOMM,
        END OF LT_EXCLUDE.
  DATA: LD_FLAG(1) TYPE C.
  DATA: LS_RSSUBINFO LIKE RSSUBINFO.


  CALL FUNCTION 'RS_SUBMIT_INFO'
    IMPORTING
      P_SUBMIT_INFO = LS_RSSUBINFO
    EXCEPTIONS
      OTHERS        = 1.

  IF NOT LS_RSSUBINFO-MODE_NORML IS INITIAL.
* check: worklist functionality active?
    GET PARAMETER ID 'FI_WORKLISTS_FLAG' FIELD LD_FLAG.
    IF LD_FLAG IS INITIAL.
      LT_EXCLUDE-FCODE = 'FC01'.
      APPEND LT_EXCLUDE.
*   clear user preference parameter:
      SET PARAMETER ID 'FIT_WL' FIELD SPACE.
    ENDIF.
    LT_EXCLUDE-FCODE = 'FC02'.
    APPEND LT_EXCLUDE.
    LT_EXCLUDE-FCODE = 'FC03'.
    APPEND LT_EXCLUDE.
    LT_EXCLUDE-FCODE = 'FC04'.
    APPEND LT_EXCLUDE.
*  lt_exclude-fcode = 'FC05'.
*  append lt_exclude.

    CALL FUNCTION 'RS_SET_SELSCREEN_STATUS'
      EXPORTING
        P_STATUS  = SY-PFKEY
      TABLES
        P_EXCLUDE = LT_EXCLUDE.

  ENDIF.

ENDFORM.                               " CHANGE_STATUS
*----------------------------------------------------------------------*
*   form dd_get_flag
*   get due date selection flag PID value
*----------------------------------------------------------------------*
FORM DD_GET_FLAG.

  GET PARAMETER ID 'FIT_DUE_DATE_SEL' FIELD GD_DDSEL_ON.

ENDFORM.                    "dd_get_flag

*----------------------------------------------------------------------*
*   form dd_modify_screen
*   hide screen fields according to due date selection PID setting
*----------------------------------------------------------------------*
FORM DD_MODIFY_SCREEN.

  IF GD_DDSEL_ON IS INITIAL.
*   parameter off -> hide due date selection field:
    IF SCREEN-GROUP1 = 'DUE'.
      SCREEN-ACTIVE    = 0.
      SCREEN-INVISIBLE = 1.
    ENDIF.
  ENDIF.

ENDFORM.                    "dd_modify_screen

*&---------------------------------------------------------------------*
*&      Form  COMPLETE_DOCUMENT_TEXT
*&---------------------------------------------------------------------*
FORM COMPLETE_DOCUMENT_TEXT.

  DATA: LT_TTXID      LIKE TTXID OCCURS 1 WITH HEADER LINE.

  LOOP AT IT_POS.
    CALL FUNCTION 'FI_TEXTS_DOCUMENT'
      EXPORTING
        I_AKTYP         = 'A'
        I_BELNR         = IT_POS-BELNR
        I_BUKRS         = IT_POS-BUKRS
        I_CHECK         = 'X'
        I_GJAHR         = IT_POS-GJAHR
        I_OBJECT        = 'BELEG'
        I_GIVE_BACK_IDS = 'X'
      TABLES
        T_TDID          = LT_TTXID
      EXCEPTIONS
        NO_TEXTS_FOUND  = 1
        OTHERS          = 2.
    IF SY-SUBRC = 0.
      IT_POS-XTEXT = 'X'.
      READ TABLE LT_TTXID INDEX 1.
      IF SY-SUBRC = 0.
        IT_POS-TDID = LT_TTXID-TDID.
      ENDIF.
    ENDIF.
    MODIFY IT_POS.
  ENDLOOP.

ENDFORM.                    "complete_document_text
*----------------------------------------------------------------------*
*   INCLUDE RFITEM_INC                                                 *
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Expiring currencies: INCLUDE RFDBCONVCUR
*&---------------------------------------------------------------------*
INCLUDE RFDBEXPC.

*&---------------------------------------------------------------------*
*&      Form  init_expcur
*&---------------------------------------------------------------------*
FORM INIT_EXPCUR.

* expiring currencies relevant for this process?
  GD_EXPCUR_PROC = 'SAPDB'.
  WRITE SY-DBNAM TO GD_EXPCUR_PROC+5.
  CALL FUNCTION 'CURRENCY_CHECK_FOR_PROCESS'
    EXPORTING
      PROCESS                = GD_EXPCUR_PROC
    EXCEPTIONS
      PROCESS_NOT_MAINTAINED = 1
      OTHERS                 = 2.
  IF SY-SUBRC = 0.
    GD_EXPCUR_FLAG = 'X'.
  ENDIF.

ENDFORM.                    " init_expcur

*&---------------------------------------------------------------------*
*&      Form  insert_tp_fields
*&      insert fields which are used for transfer prices
*&---------------------------------------------------------------------*
FORM INSERT_TP_FIELDS.

  CLEAR IT_TP_FIELDS. IT_TP_FIELDS-FNAME = 'DMBE2'. APPEND IT_TP_FIELDS.
  CLEAR IT_TP_FIELDS. IT_TP_FIELDS-FNAME = 'DMBE3'. APPEND IT_TP_FIELDS.

  CLEAR IT_TP_FIELDS. IT_TP_FIELDS-FNAME = 'BWWR2'. APPEND IT_TP_FIELDS.
  CLEAR IT_TP_FIELDS. IT_TP_FIELDS-FNAME = 'BWWR3'. APPEND IT_TP_FIELDS.

  CLEAR IT_TP_FIELDS. IT_TP_FIELDS-FNAME = 'HWAE2'. APPEND IT_TP_FIELDS.
  CLEAR IT_TP_FIELDS. IT_TP_FIELDS-FNAME = 'HWAE3'. APPEND IT_TP_FIELDS.

  PERFORM CHECK_TP_T021S USING 'DMBT2'.
  PERFORM CHECK_TP_T021S USING 'DMBT3'.

  PERFORM CHECK_TP_T021S USING 'DMB21'.
  PERFORM CHECK_TP_T021S USING 'DMB22'.
  PERFORM CHECK_TP_T021S USING 'DMB23'.

  PERFORM CHECK_TP_T021S USING 'DMB31'.
  PERFORM CHECK_TP_T021S USING 'DMB32'.
  PERFORM CHECK_TP_T021S USING 'DMB33'.

  PERFORM CHECK_TP_T021S USING 'MWST2'.
  PERFORM CHECK_TP_T021S USING 'MWST3'.

  PERFORM CHECK_TP_T021S USING 'NAVH2'.
  PERFORM CHECK_TP_T021S USING 'NAVH3'.

  PERFORM CHECK_TP_T021S USING 'SKNT2'.
  PERFORM CHECK_TP_T021S USING 'SKNT3'.

  PERFORM CHECK_TP_T021S USING 'BDIF2'.
  PERFORM CHECK_TP_T021S USING 'BDIF3'.

  PERFORM CHECK_TP_T021S USING 'RDIF2'.
  PERFORM CHECK_TP_T021S USING 'RDIF3'.

  PERFORM CHECK_TP_T021S USING 'TXBH2'.
  PERFORM CHECK_TP_T021S USING 'TXBH3'.

  PERFORM CHECK_TP_T021S USING 'PPDIF2'.
  PERFORM CHECK_TP_T021S USING 'PPDIF3'.

ENDFORM.                    " insert_tp_fields


*&---------------------------------------------------------------------*
*&      Form  check_tp_t021s
*&      insert tp fields if they exists in t021s
*&---------------------------------------------------------------------*
FORM CHECK_TP_T021S USING TP_FNAME.

  READ TABLE IT_T021S WITH KEY FNAME = TP_FNAME.
  IF SY-SUBRC = 0.
    CLEAR IT_TP_FIELDS.
    CONCATENATE 'U_' TP_FNAME INTO IT_TP_FIELDS-FNAME.
    APPEND IT_TP_FIELDS.
  ENDIF.

ENDFORM.                    " check_tp_t021s


*&---------------------------------------------------------------------*
*&      Form check_tp_auth.
*&      determine auth and set auth-flag in it_tp_auth
*&---------------------------------------------------------------------*
FORM CHECK_TP_AUTH.

  DATA: LD_LINES TYPE I,
        LD_TPAUTH(1) TYPE C.

* company code with transfer prices
  DESCRIBE TABLE IT_TP_AUTH LINES LD_LINES.

* check transfer prices.
  IF LD_LINES GT 0.

* check company codes.
    LOOP AT IT_TP_AUTH.
      CALL FUNCTION 'TP_VALUATION_AUTHORITY'
        EXPORTING
          I_BUKRS                        = IT_TP_AUTH-BUKRS
          I_CVTYP                        = IT_TP_AUTH-CURTP
          I_ACTVT                        = '03'
        IMPORTING
          E_XAUTH                        = LD_TPAUTH
        EXCEPTIONS
          KOKRS_FINDING_ERROR            = 1
          VALUTYP_FINDING_ERROR          = 2
          INSUFFICIENT_INPUT_FOR_KOKRS   = 3
          INSUFFICIENT_INPUT_FOR_VALUTYP = 4
          OTHERS                         = 5.
      IF SY-SUBRC <> 0.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.
      IT_TP_AUTH-AUTH = LD_TPAUTH.
      MODIFY IT_TP_AUTH.
    ENDLOOP.
  ENDIF.

ENDFORM.                    " check_tp_auth


*&---------------------------------------------------------------------*
*&      Form  get_existing_variant
*&
*&---------------------------------------------------------------------*
FORM GET_EXISTING_VARIANT USING RS_VARIANT LIKE DISVARIANT.

  DATA LD_USE_DEFAULT(1) TYPE C.

  CLEAR LD_USE_DEFAULT.

  IF RS_VARIANT-VARIANT = SPACE.
*   try ALV default variant
    CALL FUNCTION 'REUSE_ALV_VARIANT_DEFAULT_GET'
      EXPORTING
        I_SAVE     = 'A'
      CHANGING
        CS_VARIANT = RS_VARIANT
      EXCEPTIONS
        OTHERS     = 4.
    IF SY-SUBRC NE 0.
      LD_USE_DEFAULT = 'X'.
    ENDIF.
  ENDIF.

  IF LD_USE_DEFAULT = SPACE.
    CALL FUNCTION 'REUSE_ALV_VARIANT_EXISTENCE'
      EXPORTING
        I_SAVE        = 'A'
      CHANGING
        CS_VARIANT    = RS_VARIANT
      EXCEPTIONS
        WRONG_INPUT   = 1
        NOT_FOUND     = 2
        PROGRAM_ERROR = 3
        OTHERS        = 4.
    IF SY-SUBRC <> 0.
      LD_USE_DEFAULT = 'X'.
    ENDIF.
  ENDIF.

  IF LD_USE_DEFAULT = 'X'.
    RS_VARIANT-REPORT = G_REPID.
    RS_VARIANT-VARIANT = '1SAP'.
    RS_VARIANT-USERNAME = SY-UNAME.
    CALL FUNCTION 'REUSE_ALV_VARIANT_EXISTENCE'
      EXPORTING
        I_SAVE        = 'A'
      CHANGING
        CS_VARIANT    = RS_VARIANT
      EXCEPTIONS
        WRONG_INPUT   = 1
        NOT_FOUND     = 2
        PROGRAM_ERROR = 3
        OTHERS        = 4.
    IF SY-SUBRC <> 0.
      CLEAR RS_VARIANT.
    ENDIF.
  ENDIF.

ENDFORM.                    " get_existing_variant
*&---------------------------------------------------------------------*
*&      Form  check_date
*&---------------------------------------------------------------------*
*       check
*----------------------------------------------------------------------*
*      -->P_KD_BUKRS  text
*----------------------------------------------------------------------*
FORM CHECK_DATE TABLES   P_XD_BUKRS
                USING    P_XD_TPC.

  DATA: LD_PROGRAM LIKE SY-REPID.
  STATICS: S_RETURN TYPE CHAR1.

  P_XD_TPC = SPACE.

  CHECK S_RETURN = 1 OR S_RETURN IS INITIAL.
  CHECK X_OPSEL = 'X' AND ( NOT PA_STIDA_DEFAULT IS INITIAL ) .

  CASE G_REPID.
    WHEN 'RFITEMAP'.
      LD_PROGRAM = 'SAPDBKDF'.
    WHEN 'YSE_RFITEMAR'.
      LD_PROGRAM = 'SAPDBDDF'.
    WHEN 'RFITEMGL'.
      LD_PROGRAM = 'SAPDBSDF'.
  ENDCASE.

  SELECT * FROM T001 WHERE BUKRS IN P_XD_BUKRS.

    P_XD_TPC = 'X'.
    CALL FUNCTION 'FI_CHECK_DATE'
      EXPORTING
        I_BUKRS           = T001-BUKRS
        I_USER            = SY-UNAME
        I_PROGRAM         = LD_PROGRAM
        I_FROM_DATE       = PA_STIDA_DEFAULT
      IMPORTING
        E_RETURN          = S_RETURN
      EXCEPTIONS
        NO_AUTHORITY_PROG = 1
        NO_AUTHORITY_DATE = 2
        WRONG_PARAMETER   = 3
        OTHERS            = 4.
    IF SY-SUBRC <> 0.
      P_XD_TPC = SPACE.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
              WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  ENDSELECT.

ENDFORM.                    " check_date

*&---------------------------------------------------------------------*
*&      Form  AUTHORITY_TCODE
*&---------------------------------------------------------------------*
*       Check authority to use transaction code
*----------------------------------------------------------------------*
*      -->P_Tcode
*      -->P_SUBRC
*----------------------------------------------------------------------*
FORM AUTHORITY_TCODE USING    VALUE(P_TCODE)
                              P_SUBRC.

  STATICS: BEGIN OF S_TAB OCCURS 0,
             TCODE LIKE SY-TCODE,
             SUBRC LIKE SY-SUBRC,
           END OF S_TAB.

  READ TABLE S_TAB WITH KEY TCODE = P_TCODE.
  IF SY-SUBRC = 0.
    P_SUBRC = S_TAB-SUBRC.
    EXIT.
  ENDIF.
  CLEAR S_TAB.
  S_TAB-TCODE = P_TCODE.
  CALL FUNCTION 'AUTHORITY_CHECK_TCODE'
    EXPORTING
      TCODE  = S_TAB-TCODE
    EXCEPTIONS
      OK     = 0
      OTHERS = 4.
  MOVE SY-SUBRC TO: P_SUBRC, S_TAB-SUBRC.
  APPEND S_TAB.

ENDFORM.                    " AUTHORITY_TCODE


*&--------------------------------------------------------------------*
*&      Form  IT_POS_SORT_BACK
*&--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
*      -->RT_POS     text
*---------------------------------------------------------------------*
FORM IT_POS_SORT_BACK TABLES RT_POS.
* basically the same form as used for sorting in the ALV.
* (see FUNC K_KKB_OUTTAB_SORT, FORM FB_OUTTAB_SORT).
  DATA: LT_SORT TYPE SLIS_T_SORTINFO_ALV,
        LD_SORT TYPE SLIS_SORTINFO_ALV.
  DATA: A01(30) TYPE C,
        A02(30) TYPE C,
        A03(30) TYPE C,
        A04(30) TYPE C,
        A05(30) TYPE C,
        A06(30) TYPE C,
        A07(30) TYPE C,
        A08(30) TYPE C,
        A09(30) TYPE C,
        A10(30) TYPE C,
        A11(30) TYPE C,
        A12(30) TYPE C,
        A13(30) TYPE C,
        A14(30) TYPE C,
        A15(30) TYPE C.
  DATA: D01(30) TYPE C,
        D02(30) TYPE C,
        D03(30) TYPE C,
        D04(30) TYPE C,
        D05(30) TYPE C,
        D06(30) TYPE C,
        D07(30) TYPE C,
        D08(30) TYPE C,
        D09(30) TYPE C,
        D10(30) TYPE C,
        D11(30) TYPE C,
        D12(30) TYPE C,
        D13(30) TYPE C,
        D14(30) TYPE C,
        D15(30) TYPE C.
  DATA: L_POS(2) TYPE N.
  DATA: L_FIELD(3) TYPE C.
  FIELD-SYMBOLS: <SF>.

  IF X_GRID IS INITIAL.
    CALL FUNCTION 'REUSE_ALV_LIST_LAYOUT_INFO_GET'
      IMPORTING
        ET_SORT       = LT_SORT
      EXCEPTIONS
        NO_INFOS      = 1
        PROGRAM_ERROR = 2
        OTHERS        = 3.
  ELSE.
    CALL FUNCTION 'REUSE_ALV_GRID_LAYOUT_INFO_GET'
      IMPORTING
        ET_SORT       = LT_SORT
      EXCEPTIONS
        NO_INFOS      = 1
        PROGRAM_ERROR = 2
        OTHERS        = 3.
  ENDIF.

  SORT LT_SORT BY SPOS.
  CLEAR L_POS.
  LOOP AT LT_SORT INTO LD_SORT.
    L_POS = L_POS + 1.
    IF LD_SORT-UP = 'X'.
      CONCATENATE 'A' L_POS
                      INTO L_FIELD.
    ELSE.
      CONCATENATE 'D' L_POS
                      INTO L_FIELD.
    ENDIF.
    ASSIGN (L_FIELD) TO <SF>.
    <SF> = LD_SORT-FIELDNAME.
  ENDLOOP.
  IF SY-SUBRC = 0.
    SORT RT_POS STABLE
                 AS TEXT BY (A01) ASCENDING
                  (D01) DESCENDING
                  (A02) ASCENDING
                  (D02) DESCENDING
                  (A03) ASCENDING
                  (D03) DESCENDING
                  (A04) ASCENDING
                  (D04) DESCENDING
                  (A05) ASCENDING
                  (D05) DESCENDING
                  (A06) ASCENDING
                  (D06) DESCENDING
                  (A07) ASCENDING
                  (D07) DESCENDING
                  (A08) ASCENDING
                  (D08) DESCENDING
                  (A09) ASCENDING
                  (D09) DESCENDING
                  (A10) ASCENDING
                  (D10) DESCENDING
                  (A11) ASCENDING
                  (D11) DESCENDING
                  (A12) ASCENDING
                  (D12) DESCENDING
                  (A13) ASCENDING
                  (D13) DESCENDING
                  (A14) ASCENDING
                  (D14) DESCENDING
                  (A15) ASCENDING
                  (D15) DESCENDING .

  ELSE.
    IF SY-UCOMM EQ SPACE.
*     same order as before due to handling in open fi 1650
      SORT IT_POS STABLE BY BUKRS KONTO.
    ENDIF.
  ENDIF.

ENDFORM.                    "IT_POS_SORT_BACK

*&--------------------------------------------------------------------*
*&      Form  special_fields_used
*&--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
*      -->ID_TABLENAME
*---------------------------------------------------------------------*
FORM SPECIAL_FIELDS_USED
     USING ID_TABLENAME LIKE DD03P-TABNAME.

  DATA: LD_FNAME TYPE TYPE_SPEC_FIELDS.


  CLEAR GT_SPEC_FIELDS.
  REFRESH GT_SPEC_FIELDS.

* Always include the following infos ...
  LD_FNAME-FNAME = 'BUKRS'.
  APPEND LD_FNAME TO GT_SPEC_FIELDS.
  LD_FNAME-FNAME = 'BELNR'.
  APPEND LD_FNAME TO GT_SPEC_FIELDS.
  LD_FNAME-FNAME = 'GJAHR'.
  APPEND LD_FNAME TO GT_SPEC_FIELDS.

* ...plus some table specific additional infos...
  CASE ID_TABLENAME.
    WHEN 'BKPF'.
      LD_FNAME-FNAME = 'AWSYS'.
      APPEND LD_FNAME TO GT_SPEC_FIELDS.
      LD_FNAME-FNAME = 'BUDAT'.
      APPEND LD_FNAME TO GT_SPEC_FIELDS.
    WHEN 'BSEGC'.
      LD_FNAME-FNAME = 'RFZEI'.
      APPEND LD_FNAME TO GT_SPEC_FIELDS.
  ENDCASE.

* ... plus special fields from internal table IT_T021S.
  LOOP AT IT_T021S WHERE TNAME = ID_TABLENAME.
    APPEND IT_T021S-FNAME TO GT_SPEC_FIELDS.
  ENDLOOP.

ENDFORM.                    "special_fields_used

*---------------------------------------------------------------------*
*       FORM special_fields_modify                                    *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  ID_TABLENAME                                                  *
*---------------------------------------------------------------------*
FORM SPECIAL_FIELDS_MODIFY USING ID_TABLENAME LIKE DD03P-TABNAME.

  DATA: LD_FNAME TYPE TYPE_SPEC_FIELDS.


* Delete non-existent fields.
  LOOP AT GT_SPEC_FIELDS INTO LD_FNAME.

    CALL FUNCTION 'DDIF_NAMETAB_GET'
      EXPORTING
        TABNAME    = ID_TABLENAME
        LFIELDNAME = LD_FNAME-FNAME
      EXCEPTIONS
        NOT_FOUND  = 1.

    IF SY-SUBRC = 1 .
      DELETE TABLE GT_SPEC_FIELDS WITH TABLE KEY FNAME = LD_FNAME-FNAME .
    ENDIF.

  ENDLOOP.

* Add new fields.
  CASE ID_TABLENAME.
    WHEN 'VBKPF'.
  ENDCASE.

ENDFORM.                    "special_fields_modify

*---------------------------------------------------------------------*
*       FORM init_admin_tables_boe                                    *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM INIT_ADMIN_TABLES_BOE.

  DATA: LS_T021S TYPE T021S.

  LOOP AT IT_T021S.
    IF IT_T021S-TNAME = 'BSEC'.
      IF    IT_T021S-FNAME = 'BANKS'
         OR IT_T021S-FNAME = 'BANKL'
         OR IT_T021S-FNAME = 'BANKN'
         OR IT_T021S-FNAME = 'BKONT'.
        LS_T021S-LSTCL = '2'.
        LS_T021S-TNAME = 'BSED'.
        LS_T021S-FNAME = 'WLZBP'.
        APPEND LS_T021S TO IT_T021S.
        EXIT.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.                    "init_admin_tables_boe

*---------------------------------------------------------------------*
*       FORM analyze_act_fieldcat_boe                                 *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM ANALYZE_ACT_FIELDCAT_BOE.

  IF IT_SPECFLD-TNAME = 'BSEC' AND IT_SPECFLD-FSTAT = 'P'.
    IF    IT_SPECFLD-FNAME_2 = 'U_BANKS'
       OR IT_SPECFLD-FNAME_2 = 'U_BANKL'
       OR IT_SPECFLD-FNAME_2 = 'U_BANKN'
       OR IT_SPECFLD-FNAME_2 = 'U_BKONT' .

      READ TABLE IT_SPECFLD WITH KEY FNAME_2 = 'U_WLZBP'.
      IF SY-SUBRC NE 0.
*         horror case:
        MESSAGE W012.
        EXIT.
      ENDIF.
*       special field status = initial?
      IF IT_SPECFLD-FSTAT = SPACE.
*         set status 'pending':
        IT_SPECFLD-FSTAT = 'P'.
        MODIFY IT_SPECFLD INDEX SY-TABIX.
*         check corresponding table status:
        READ TABLE IT_SPECTAB WITH KEY TNAME = IT_SPECFLD-TNAME.
        IF SY-SUBRC NE 0.
*         horror case:
          MESSAGE W012.
          EXIT.
        ENDIF.
        IF IT_SPECTAB-TSTAT = SPACE.
          IT_SPECTAB-TSTAT = 'P'.
          MODIFY IT_SPECTAB INDEX SY-TABIX.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    "analyze_act_fieldcat_boe

*---------------------------------------------------------------------*
*       FORM move_special_fields_boe                                  *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM MOVE_SPECIAL_FIELDS_BOE.

  FIELD-SYMBOLS: <FS_SP_TAB>, <FS_IT_POS>.

  IF NOT IT_POS-UMSKZ IS INITIAL AND NOT WA_BSED-WLZBP IS INITIAL.
    CLEAR WA_BSEC.
    WA_BSEC-BANKS = WA_BSED-WLZBP+1(3).
    WA_BSEC-BANKL = WA_BSED-WLZBP+5(15).
    WA_BSEC-BANKN = WA_BSED-WLZBP+21(18).
    WA_BSEC-BKONT = WA_BSED-WLZBP+40(2).

    LOOP AT IT_MOVEREF WHERE TNAME = 'BSEC'.
      ASSIGN IT_MOVEREF-FLDREF->*   TO <FS_SP_TAB>.
      ASSIGN IT_MOVEREF-FLDREF_2->* TO <FS_IT_POS>.
      IF <FS_IT_POS> IS INITIAL.
        MOVE <FS_SP_TAB> TO <FS_IT_POS>.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.                    "move_special_fields_boe





*---------------------------------------------------------------------*
*       FORM create_performance_tables                                *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  id_tablename                                                  *
*---------------------------------------------------------------------*
FORM CREATE_PERFORMANCE_TABLES USING ID_TABLENAME TYPE DD03P-TABNAME .

  FIELD-SYMBOLS : <LFS_POS>              TYPE YSE_RFPOSXEXT.
  STATICS :       LST_PERFORMANCE_TABLES TYPE C.

  IF LST_PERFORMANCE_TABLES IS INITIAL.
    IF ID_TABLENAME EQ 'BKPF' OR ID_TABLENAME EQ 'BSEG' .

* Creating additional tables for speeding up the database selects
      REFRESH: GT_POS_PARKED, GT_POS_POSTED, GT_POS_ARCHIVED.

      LOOP AT IT_POS ASSIGNING <LFS_POS>.
        GD_POS_REDUCED-BUKRS = <LFS_POS>-BUKRS.
        GD_POS_REDUCED-BELNR = <LFS_POS>-BELNR.
        GD_POS_REDUCED-GJAHR = <LFS_POS>-GJAHR.
        GD_POS_REDUCED-BUZEI = <LFS_POS>-BUZEI.
        GD_POS_REDUCED-BUDAT = <LFS_POS>-BUDAT.

        IF <LFS_POS>-BSTAT CA 'VWZ'.
          INSERT GD_POS_REDUCED INTO TABLE GT_POS_PARKED.
        ELSEIF <LFS_POS>-XARCH EQ 'X' AND GD_USEAR = 'X'.
          INSERT GD_POS_REDUCED INTO TABLE GT_POS_ARCHIVED.
        ELSE.
          INSERT GD_POS_REDUCED INTO TABLE GT_POS_POSTED.
        ENDIF.
      ENDLOOP.

      LST_PERFORMANCE_TABLES = 'X'.
    ENDIF.
  ENDIF.

ENDFORM.                    "create_performance_tables

*---------------------------------------------------------------------*
*       FORM import_arch_from_memory                                  *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM IMPORT_ARCH_FROM_MEMORY.

  FIELD-SYMBOLS: <YBKPF> TYPE BKPF,
                 <YBSEG> TYPE BSEG.

  IF GD_USEAR = 'X' AND GD_MEMOR = 'X'.
    IMPORT GD_READ_MEMO_DONE FROM MEMORY ID 'GD_READ_MEMO_DONE'.
    IF GD_READ_MEMO_DONE EQ 'N'.
      IMPORT YBKPF FROM MEMORY ID 'YBKPF'.
      IF XBKPF[] IS INITIAL.
        INSERT LINES OF YBKPF INTO TABLE XBKPF.
      ELSE.
        LOOP AT YBKPF ASSIGNING <YBKPF>.
          READ TABLE XBKPF WITH TABLE KEY BUKRS = <YBKPF>-BUKRS
                                          BELNR = <YBKPF>-BELNR
                                          GJAHR = <YBKPF>-GJAHR
                                    TRANSPORTING NO FIELDS.
          IF NOT SY-SUBRC IS INITIAL.
            INSERT <YBKPF> INTO TABLE XBKPF.
          ENDIF.
        ENDLOOP.
      ENDIF.
      IMPORT YBSEG FROM MEMORY ID 'YBSEG'.
      IF XBSEG[] IS INITIAL.
        INSERT LINES OF YBSEG INTO TABLE XBSEG.
      ELSE.
        LOOP AT YBSEG ASSIGNING <YBSEG>.
          READ TABLE XBSEG WITH TABLE KEY BUKRS = <YBSEG>-BUKRS
                                          BELNR = <YBSEG>-BELNR
                                          GJAHR = <YBSEG>-GJAHR
                                          BUZEI = <YBSEG>-BUZEI
                                    TRANSPORTING NO FIELDS.
          IF NOT SY-SUBRC IS INITIAL.
            INSERT <YBSEG> INTO TABLE XBSEG.
          ENDIF.
        ENDLOOP.
      ENDIF.

*    INSERT LINES OF ybseg INTO TABLE xbseg.
*    refresh ybseg.
*    FREE MEMORY ID 'YBSEG'.
    ENDIF.
  ENDIF.

ENDFORM.                               " IMPORT_ARCH_FROM_MEMORY
*&---------------------------------------------------------------------*
*&      Form  YSE_ADDITIONAL_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM YSE_ADDITIONAL_DATA .


*1.First process all the open items linked to an invoice
  DELETE GT_POS_INV WHERE VBELN IS INITIAL OR UMSKZ = 'A'.
  IF NOT GT_POS_INV[] IS INITIAL. "Still invoice records to process
    PERFORM INVOICE_RECORDS.
  ENDIF.  "Still invoice records to process




*2.Next process all the open items NOT linked to an invoice or down payment request
  DELETE GT_POS_NO_INV WHERE NOT VBELN IS INITIAL OR UMSKZ = 'A'.
  IF NOT GT_POS_NO_INV[] IS INITIAL.
    PERFORM NO_INVOICE_RECORDS.
  ENDIF.




*3 process the down payment entries
  DELETE GT_POS_DWN_PY WHERE UMSKZ <> 'A'.
  IF NOT GT_POS_DWN_PY[] IS INITIAL.  "Down payment
    SELECT * FROM BSAD INTO TABLE LT_BSAD
      FOR ALL ENTRIES IN GT_POS_DWN_PY
      WHERE BUKRS EQ GT_POS_DWN_PY-BUKRS
        AND KUNNR EQ GT_POS_DWN_PY-KONTO
        AND UMSKZ EQ 'F'
        AND AUGBL EQ GT_POS_DWN_PY-BELNR
        AND GJAHR EQ GT_POS_DWN_PY-GJAHR.

    SORT LT_BSAD BY AUGBL.
    DELETE ADJACENT DUPLICATES FROM LT_BSAD COMPARING AUGBL.

    LOOP AT IT_POS WHERE UMSKZ = 'A'.
      READ TABLE LT_BSAD ASSIGNING <FS_BSAD>
        WITH KEY AUGBL = IT_POS-BELNR.
      IF SY-SUBRC EQ 0.
        PERFORM DOWN_PAYMENT_REQUESTS.
      ELSE.
        PERFORM NO_DOWN_PAYMENT_REQUESTS.
      ENDIF.
      MODIFY IT_POS.
    ENDLOOP.
  ENDIF.  "Down payment
ENDFORM.                    " YSE_ADDITIONAL_DATA
*&---------------------------------------------------------------------*
*&      Form  INVOICE_RECORDS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM INVOICE_RECORDS .
  "Billing doc header
  SELECT * FROM VBRK INTO TABLE LT_VBRK
    FOR ALL ENTRIES IN GT_POS_INV WHERE VBELN EQ GT_POS_INV-VBELN.

  "Billing doc item
  SELECT * FROM VBRP INTO TABLE LT_VBRP
    FOR ALL ENTRIES IN GT_POS_INV WHERE VBELN EQ GT_POS_INV-VBELN.

  DELETE ADJACENT DUPLICATES FROM LT_VBRP COMPARING VBELN.

  "Sales order header
  SELECT VBELN NETWR WAERK FROM VBAK INTO TABLE LT_VBAK
    FOR ALL ENTRIES IN LT_VBRP WHERE VBELN EQ LT_VBRP-AUBEL.

  "Partner
  SELECT VBELN PERNR PARVW FROM VBPA INTO TABLE LT_VBPA
    FOR ALL ENTRIES IN LT_VBAK WHERE VBELN EQ LT_VBAK-VBELN
                                 AND PARVW IN LR_PARVW.


  IF SY-SUBRC EQ 0. "One of the partner functions found
    DELETE ADJACENT DUPLICATES FROM LT_VBPA COMPARING VBELN.
    "Personel name
* begin of mod-007
*    SELECT PA0002~PERNR PA0001~ENAME    "CR1432
*     PA0002~RUFNM                      "CR1432
*      INTO TABLE LT_PA
*      FROM PA0001 INNER JOIN PA0002
*      ON PA0002~PERNR = PA0001~PERNR
*      AND PA0002~ENDDA <= PA0001~ENDDA
*      AND PA0002~SUBTY = PA0001~SUBTY
*      FOR ALL ENTRIES IN LT_VBPA
*      WHERE PA0001~PERNR = LT_VBPA-PERNR.

    SELECT PA0002~PERNR PA0001~ENAME
      INTO TABLE LT_PA
      FROM PA0001 INNER JOIN PA0002
      ON PA0002~PERNR = PA0001~PERNR
      AND PA0002~ENDDA <= PA0001~ENDDA
      AND PA0002~SUBTY = PA0001~SUBTY
      FOR ALL ENTRIES IN LT_VBPA
      WHERE PA0001~PERNR = LT_VBPA-PERNR.

* END OF MOD-007.
  ENDIF.  "One of the partner functions found

  SELECT * FROM KNA1 INTO TABLE LT_KNA1
    FOR ALL ENTRIES IN GT_POS_NO_INV
    WHERE KUNNR = GT_POS_NO_INV-KONTO.

  SELECT KUNNR NAME1 TELF1 FROM KNVK INTO TABLE LT_KNVK
    FOR ALL ENTRIES IN GT_POS_NO_INV
    WHERE KUNNR = GT_POS_NO_INV-KONTO.

  LOOP AT IT_POS WHERE NOT VBELN IS INITIAL AND UMSKZ <> 'A'.
    READ TABLE LT_VBRK ASSIGNING <FS_VBRK>
      WITH KEY VBELN = IT_POS-VBELN.
    MOVE: <FS_VBRK>-VBELN TO IT_POS-U_VBELN_VF,
          <FS_VBRK>-VKORG TO IT_POS-U_VKORG,
          <FS_VBRK>-VTWEG TO IT_POS-U_VTWEG,
          <FS_VBRK>-SPART TO IT_POS-U_SPART,
          <FS_VBRK>-BZIRK TO IT_POS-U_BZIRK,
          <FS_VBRK>-BSTNK_VF TO IT_POS-U_BSTNK_VF,
          <FS_VBRK>-KDGRP TO IT_POS-U_KDGRP,
          <FS_VBRK>-FKART TO IT_POS-U_FKART,
          <FS_VBRK>-FKDAT TO IT_POS-U_FKDAT.
    READ TABLE LT_VBRP ASSIGNING <FS_VBRP>
      WITH KEY VBELN = IT_POS-VBELN.

    MOVE: <FS_VBRP>-VBELV TO IT_POS-U_VBELV,
          <FS_VBRP>-AUBEL TO IT_POS-U_AUBEL,
          <FS_VBRP>-VKGRP TO IT_POS-U_VKGRP,
          <FS_VBRP>-VKBUR TO IT_POS-U_VKBUR,
          <FS_VBRP>-PRCTR TO IT_POS-U_PRCTR_VA.
    READ TABLE LT_VBAK ASSIGNING <FS_VBAK>
      WITH KEY VBELN = <FS_VBRP>-AUBEL.

    MOVE: <FS_VBAK>-NETWR TO IT_POS-U_NETWR,
          <FS_VBAK>-WAERK TO IT_POS-U_WAERK.

    READ TABLE LT_VBPA ASSIGNING <FS_VBPA>
      WITH KEY VBELN = <FS_VBAK>-VBELN.
    IF SY-SUBRC EQ 0.
      READ TABLE LT_PA ASSIGNING <FS_PA>
        WITH KEY PERNR = <FS_VBPA>-PERNR.
      IF SY-SUBRC EQ 0.
        MOVE: <FS_VBPA>-PARVW TO IT_POS-U_PARVW,
              <FS_VBPA>-PERNR TO IT_POS-U_PERNR_D,
              <FS_PA>-RUFNM   TO IT_POS-U_RUFNM.
      ENDIF.
    ENDIF.

    READ TABLE LT_KNA1 ASSIGNING <FS_KNA1>
      WITH KEY KUNNR = IT_POS-KONTO
      BINARY SEARCH.

    IF SY-SUBRC = 0.
      MOVE: <FS_KNA1>-NAME1 TO IT_POS-U_NAME1,
            <FS_KNA1>-NAME2 TO IT_POS-U_NAME2,
            <FS_KNA1>-NAME3 TO IT_POS-U_NAME3,
            <FS_KNA1>-STRAS TO IT_POS-U_STRAS,
            <FS_KNA1>-PSTLZ TO IT_POS-U_PSTLZ,
            <FS_KNA1>-ORT01 TO IT_POS-U_ORT01,
            <FS_KNA1>-TELF1 TO IT_POS-U_TELF1,
            <FS_KNA1>-TELFX TO IT_POS-U_TELFX.
    ENDIF.

    READ TABLE LT_KNVK ASSIGNING <FS_KNVK>
      WITH KEY KUNNR = IT_POS-KONTO
      BINARY SEARCH.

    IF SY-SUBRC = 0.
      MOVE: <FS_KNVK>-NAME1 TO IT_POS-U_KNVK_NAME1,
            <FS_KNVK>-TELF1 TO IT_POS-U_KNVK_TELF1.
    ENDIF.
    MODIFY IT_POS.
  ENDLOOP.
ENDFORM.                    " INVOICE_RECORDS
*&---------------------------------------------------------------------*
*&      Form  NO_INVOICE_RECORDS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM NO_INVOICE_RECORDS .
  DATA: LT_GT_POS_NO_INV_BSEG TYPE STANDARD TABLE OF YSE_RFPOSXEXT. "EXTUVE

  LT_GT_POS_NO_INV_BSEG[] = GT_POS_NO_INV[].

  SORT GT_POS_NO_INV BY KONTO.
  DELETE ADJACENT DUPLICATES FROM GT_POS_NO_INV COMPARING KONTO.

  SELECT * FROM KNVV INTO TABLE LT_KNVV
    FOR ALL ENTRIES IN GT_POS_NO_INV
    WHERE KUNNR = GT_POS_NO_INV-KONTO.

  SELECT KUNNR PARVW PERNR FROM KNVP INTO TABLE LT_KNVP
    FOR ALL ENTRIES IN GT_POS_NO_INV
    WHERE KUNNR = GT_POS_NO_INV-KONTO
      AND PERNR <> ' '.

  IF SY-SUBRC EQ 0.
    CLEAR LT_PA[].
    DELETE ADJACENT DUPLICATES FROM LT_KNVP COMPARING PERNR.
    "Personel name
    SELECT PA0002~PERNR PA0002~RUFNM
      INTO TABLE LT_PA
      FROM PA0001 INNER JOIN PA0002
      ON PA0002~PERNR = PA0001~PERNR
      AND PA0002~ENDDA <= PA0001~ENDDA
      AND PA0002~SUBTY = PA0001~SUBTY
      AND PA0002~OBJPS = PA0001~OBJPS
      FOR ALL ENTRIES IN LT_KNVP
      WHERE PA0001~PERNR = LT_KNVP-PERNR.
  ENDIF.

  SELECT * FROM KNA1 INTO TABLE LT_KNA1
    FOR ALL ENTRIES IN GT_POS_NO_INV
    WHERE KUNNR = GT_POS_NO_INV-KONTO.

  SELECT KUNNR NAME1 TELF1 FROM KNVK INTO TABLE LT_KNVK
    FOR ALL ENTRIES IN GT_POS_NO_INV
    WHERE KUNNR = GT_POS_NO_INV-KONTO.

  SELECT BUKRS BELNR GJAHR BUZEI PRCTR FROM BSEG INTO TABLE LT_PRCTR
    FOR ALL ENTRIES IN LT_GT_POS_NO_INV_BSEG
    WHERE BUKRS = LT_GT_POS_NO_INV_BSEG-BUKRS
      AND BELNR = LT_GT_POS_NO_INV_BSEG-BELNR
      AND GJAHR = LT_GT_POS_NO_INV_BSEG-GJAHR
      AND KOART <> 'D'
      AND BUZID <> 'T'.

  SORT LT_PRCTR BY BUKRS BELNR GJAHR.

  LOOP AT IT_POS WHERE VBELN IS INITIAL AND UMSKZ <> 'A'.
    READ TABLE LT_KNVV ASSIGNING <FS_KNVV>
      WITH KEY KUNNR = IT_POS-KONTO
      BINARY SEARCH.

    IF SY-SUBRC = 0.
      MOVE: <FS_KNVV>-VKORG TO IT_POS-U_VKORG,
            <FS_KNVV>-VTWEG TO IT_POS-U_VTWEG,
            <FS_KNVV>-SPART TO IT_POS-U_SPART,
            <FS_KNVV>-BZIRK TO IT_POS-U_BZIRK,
            <FS_KNVV>-KDGRP TO IT_POS-U_KDGRP,
            <FS_KNVV>-VKGRP TO IT_POS-U_VKGRP,
            <FS_KNVV>-VKBUR TO IT_POS-U_VKBUR.
    ENDIF.

    READ TABLE LT_KNVP ASSIGNING <FS_KNVP>
      WITH KEY KUNNR = IT_POS-KONTO
      BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      READ TABLE LT_PA ASSIGNING <FS_PA>
        WITH KEY PERNR = <FS_KNVP>-PERNR.
      IF SY-SUBRC EQ 0.
        MOVE: <FS_KNVP>-PARVW TO IT_POS-U_PARVW,
              <FS_KNVP>-PERNR TO IT_POS-U_PERNR_D,
              <FS_PA>-RUFNM   TO IT_POS-U_RUFNM.
      ENDIF.
    ENDIF.

    READ TABLE LT_KNA1 ASSIGNING <FS_KNA1>
      WITH KEY KUNNR = IT_POS-KONTO
      BINARY SEARCH.

    IF SY-SUBRC = 0.
      MOVE: <FS_KNA1>-NAME1 TO IT_POS-U_NAME1,
            <FS_KNA1>-NAME2 TO IT_POS-U_NAME2,
            <FS_KNA1>-NAME3 TO IT_POS-U_NAME3,
            <FS_KNA1>-STRAS TO IT_POS-U_STRAS,
            <FS_KNA1>-PSTLZ TO IT_POS-U_PSTLZ,
            <FS_KNA1>-ORT01 TO IT_POS-U_ORT01,
            <FS_KNA1>-TELF1 TO IT_POS-U_TELF1,
            <FS_KNA1>-TELFX TO IT_POS-U_TELFX.
    ENDIF.

    READ TABLE LT_KNVK ASSIGNING <FS_KNVK>
      WITH KEY KUNNR = IT_POS-KONTO
      BINARY SEARCH.

    IF SY-SUBRC = 0.
      MOVE: <FS_KNVK>-NAME1 TO IT_POS-U_KNVK_NAME1,
            <FS_KNVK>-TELF1 TO IT_POS-U_KNVK_TELF1.
    ENDIF.

    READ TABLE LT_PRCTR ASSIGNING <FS_PRCTR>
      WITH KEY BUKRS = IT_POS-BUKRS
               BELNR = IT_POS-BELNR
               GJAHR = IT_POS-GJAHR.
    IF SY-SUBRC EQ 0.
      MOVE: <FS_PRCTR>-PRCTR TO IT_POS-U_PRCTR_VA.
    ENDIF.

    MODIFY IT_POS.
  ENDLOOP.
ENDFORM.                    " NO_INVOICE_RECORDS
*&---------------------------------------------------------------------*
*&      Form  DOWN_PAYMENT_REQUESTS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DOWN_PAYMENT_REQUESTS .
  "Billing doc header
  SELECT SINGLE * FROM VBRK INTO LS_VBRK
    WHERE VBELN EQ <FS_BSAD>-VBELN.

  "Billing doc item
  SELECT SINGLE * FROM VBRP INTO LS_VBRP
    WHERE VBELN EQ <FS_BSAD>-VBELN.


  "Sales order header
  SELECT SINGLE VBELN NETWR WAERK FROM VBAK INTO LS_VBAK
    WHERE VBELN EQ LS_VBRP-AUBEL.

  "Partner
  SELECT SINGLE VBELN PERNR PARVW FROM VBPA INTO LS_VBPA
    WHERE VBELN EQ LS_VBAK-VBELN
      AND PARVW IN LR_PARVW.

  IF SY-SUBRC EQ 0. "One of the partner functions found
    "Personel name
    SELECT SINGLE PA0002~PERNR PA0002~RUFNM
      INTO LS_PA
      FROM PA0001 INNER JOIN PA0002
      ON PA0002~PERNR = PA0001~PERNR
      AND PA0002~ENDDA <= PA0001~ENDDA
      AND PA0002~SUBTY = PA0001~SUBTY
      WHERE PA0001~PERNR = LS_VBPA-PERNR.
  ENDIF.  "One of the partner functions found

  SELECT SINGLE * FROM KNA1 INTO LS_KNA1
    WHERE KUNNR = <FS_BSAD>-KUNNR.

  SELECT SINGLE KUNNR NAME1 TELF1 FROM KNVK INTO LS_KNVK
    WHERE KUNNR = <FS_BSAD>-KUNNR.



  MOVE: LS_VBRK-VBELN TO IT_POS-U_VBELN_VF,
        LS_VBRK-VKORG TO IT_POS-U_VKORG,
        LS_VBRK-VTWEG TO IT_POS-U_VTWEG,
        LS_VBRK-SPART TO IT_POS-U_SPART,
        LS_VBRK-BZIRK TO IT_POS-U_BZIRK,
        LS_VBRK-BSTNK_VF TO IT_POS-U_BSTNK_VF,
        LS_VBRK-KDGRP TO IT_POS-U_KDGRP,
        LS_VBRK-FKART TO IT_POS-U_FKART,
        LS_VBRK-FKDAT TO IT_POS-U_FKDAT.


  MOVE: LS_VBRP-VBELV TO IT_POS-U_VBELV,
        LS_VBRP-AUBEL TO IT_POS-U_AUBEL,
        LS_VBRP-VKGRP TO IT_POS-U_VKGRP,
        LS_VBRP-VKBUR TO IT_POS-U_VKBUR,
        LS_VBRP-PRCTR TO IT_POS-U_PRCTR_VA.


  MOVE: LS_VBAK-NETWR TO IT_POS-U_NETWR,
        LS_VBAK-WAERK TO IT_POS-U_WAERK.


  MOVE: LS_VBPA-PARVW TO IT_POS-U_PARVW,
        LS_VBPA-PERNR TO IT_POS-U_PERNR_D,
        LS_PA-RUFNM TO IT_POS-U_RUFNM.

  MOVE: LS_KNA1-NAME1 TO IT_POS-U_NAME1,
        LS_KNA1-NAME2 TO IT_POS-U_NAME2,
        LS_KNA1-NAME3 TO IT_POS-U_NAME3,
        LS_KNA1-STRAS TO IT_POS-U_STRAS,
        LS_KNA1-PSTLZ TO IT_POS-U_PSTLZ,
        LS_KNA1-ORT01 TO IT_POS-U_ORT01,
        LS_KNA1-TELF1 TO IT_POS-U_TELF1,
        LS_KNA1-TELFX TO IT_POS-U_TELFX.

  MOVE: LS_KNVK-NAME1 TO IT_POS-U_KNVK_NAME1,
        LS_KNVK-TELF1 TO IT_POS-U_KNVK_TELF1.

ENDFORM.                    " DOWN_PAYMENT_REQUESTS
*&---------------------------------------------------------------------*
*&      Form  NO_DOWN_PAYMENT_REQUESTS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM NO_DOWN_PAYMENT_REQUESTS .

  SELECT SINGLE * FROM KNVV INTO LS_KNVV
      WHERE KUNNR = IT_POS-KONTO.

  SELECT SINGLE KUNNR PARVW PERNR FROM KNVP INTO LS_KNVP
    WHERE KUNNR = IT_POS-KONTO
      AND PERNR <> ' '.

  IF SY-SUBRC EQ 0.
    "Personel name
    SELECT SINGLE PA0002~PERNR PA0002~RUFNM
      INTO LS_PA
      FROM PA0001 INNER JOIN PA0002
      ON PA0002~PERNR = PA0001~PERNR
      AND PA0002~ENDDA <= PA0001~ENDDA
      AND PA0002~SUBTY = PA0001~SUBTY
      AND PA0002~OBJPS = PA0001~OBJPS
      WHERE PA0001~PERNR = LS_KNVP-PERNR.
  ENDIF.

  SELECT SINGLE * FROM KNA1 INTO LS_KNA1
    WHERE KUNNR = IT_POS-KONTO.

  SELECT SINGLE KUNNR NAME1 TELF1 FROM KNVK INTO LS_KNVK
    WHERE KUNNR = IT_POS-KONTO.

  SELECT SINGLE BUKRS BELNR GJAHR BUZEI PRCTR FROM BSEG INTO LS_PRCTR
    WHERE BUKRS = IT_POS-BUKRS
      AND BELNR = IT_POS-BELNR
      AND GJAHR = IT_POS-GJAHR
      AND KOART <> 'D'
      AND BUZID <> 'T'.

  MOVE: LS_KNVV-VKORG TO IT_POS-U_VKORG,
        LS_KNVV-VTWEG TO IT_POS-U_VTWEG,
        LS_KNVV-SPART TO IT_POS-U_SPART,
        LS_KNVV-BZIRK TO IT_POS-U_BZIRK,
        LS_KNVV-KDGRP TO IT_POS-U_KDGRP,
        LS_KNVV-VKGRP TO IT_POS-U_VKGRP,
        LS_KNVV-VKBUR TO IT_POS-U_VKBUR.


  MOVE: LS_KNVP-PARVW TO IT_POS-U_PARVW,
        LS_KNVP-PERNR TO IT_POS-U_PERNR_D,
        LS_PA-RUFNM   TO IT_POS-U_RUFNM.


  MOVE: LS_KNA1-NAME1 TO IT_POS-U_NAME1,
        LS_KNA1-NAME2 TO IT_POS-U_NAME2,
        LS_KNA1-NAME3 TO IT_POS-U_NAME3,
        LS_KNA1-STRAS TO IT_POS-U_STRAS,
        LS_KNA1-PSTLZ TO IT_POS-U_PSTLZ,
        LS_KNA1-ORT01 TO IT_POS-U_ORT01,
        LS_KNA1-TELF1 TO IT_POS-U_TELF1,
        LS_KNA1-TELFX TO IT_POS-U_TELFX.

  MOVE: LS_KNVK-NAME1 TO IT_POS-U_KNVK_NAME1,
        LS_KNVK-TELF1 TO IT_POS-U_KNVK_TELF1.

  MOVE: LS_PRCTR-PRCTR TO IT_POS-U_PRCTR_VA.


ENDFORM.                    " NO_DOWN_PAYMENT_REQUESTS
