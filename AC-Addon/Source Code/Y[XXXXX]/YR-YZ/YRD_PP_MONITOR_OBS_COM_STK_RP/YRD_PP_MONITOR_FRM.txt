*&---------------------------------------------------------------------*
*&  Include           YRD_PP_MONITOR_FRM
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM get_data .
*  SELECT DISTINCT
*         a~matnr
*         a~labst
*    INTO CORRESPONDING FIELDS OF TABLE gt_list
*    FROM mard AS a
*    INNER JOIN marc AS b ON b~matnr = a~matnr
*    WHERE b~mmsta IN ('A1','A2')
*    AND a~werks IN s_werks
*    AND a~matnr IN s_matnr
*    AND a~lgort IN s_lgort.

  SELECT DISTINCT
         a~matnr
         b~labst
    INTO CORRESPONDING FIELDS OF TABLE gt_list
    FROM marc AS a
    LEFT JOIN mard AS b ON b~matnr = a~matnr AND b~lgort = '1000' AND b~werks = p_werks
    WHERE a~mmsta IN ('A1','A2')
    AND a~werks = p_werks
    AND a~matnr IN s_matnr.
*    AND b~lgort IN s_lgort.

  LOOP AT gt_list INTO wa_list.
    r_mat-sign = 'I'.
    r_mat-option = 'EQ'.
    r_mat-low = wa_list-matnr.
    r_mat-high = ''.
    APPEND r_mat.
  ENDLOOP.

  SELECT  matnr werks SUM( omeng ) INTO TABLE lt_vbbe
    FROM vbbe
    WHERE matnr IN r_mat AND werks = p_werks
    GROUP BY matnr werks.

  SELECT matnr werks SUM( bdmng ) INTO TABLE lt_resb
    FROM resb
    WHERE aufnr <> space
    AND xloek EQ ''
    AND kzear EQ ''
    AND matnr IN r_mat
    AND werks = p_werks
    GROUP BY matnr werks.

  SELECT matnr dwerk psmng aufnr INTO TABLE lt_afpo
    FROM afpo
    WHERE matnr IN r_mat
    AND dwerk = p_werks
    AND elikz = ''.

  DATA lv_objnr TYPE jest-objnr.
  LOOP AT lt_afpo INTO lw_afpo.
    CONCATENATE 'OR' lw_afpo-aufnr INTO lv_objnr.
    SELECT SINGLE * FROM jest WHERE objnr = lv_objnr AND stat = 'I0076' AND inact = ''.
    IF sy-subrc EQ 0.
      DELETE lt_afpo.
    ENDIF.
  ENDLOOP.

  IF lt_afpo IS NOT INITIAL.
    SORT lt_afpo BY matnr dwerk ASCENDING.
    LOOP AT lt_afpo INTO lw_afpo.
      AT END OF dwerk.
        SUM.
        APPEND lw_afpo TO gt_afpo_sum.
      ENDAT.
    ENDLOOP.
  ENDIF.
ENDFORM.                    " GET_DATA
*&---------------------------------------------------------------------*
*&      Form  PRO_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM pro_data .
  DATA lt_wultb LIKE TABLE OF wa_wultb .
  LOOP AT gt_list INTO wa_list.
**GET STOCK
    PERFORM frm_get_stock USING wa_list-matnr CHANGING wa_list-labst.

**get openpo
    PERFORM frm_get_openpo USING wa_list-matnr CHANGING wa_list-openpo.
    PERFORM frm_get_supmat  USING wa_list-matnr .
*    SELECT SINGLE labst INTO wa_list-labst FROM mard WHERE matnr = wa_list-matnr.
    SHIFT wa_list-matnr LEFT DELETING LEADING '0'.
    LOOP AT gt_wultb INTO wa_wultb.
      SHIFT wa_wultb-matnr LEFT DELETING LEADING '0'.
      wa_list-upmat = wa_wultb-matnr.
      APPEND wa_list TO gt_list_alv .
    ENDLOOP.
    IF sy-subrc <> 0.
      APPEND wa_list TO gt_list_alv .
    ENDIF.
  ENDLOOP.

  SORT gt_list_alv.
  DELETE ADJACENT DUPLICATES FROM gt_list_alv.

ENDFORM.                    " PRO_DATA
*&---------------------------------------------------------------------*
*&      Form  FRM_LIST_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM frm_list_data .
  CALL SCREEN 2000.
ENDFORM.                    " FRM_LIST_DATA
*&---------------------------------------------------------------------*
*&      Form  FRM_CREATE_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM frm_create_alv .
  IF g_alv IS INITIAL.
    CREATE OBJECT g_alv
      EXPORTING
        i_parent = cl_gui_container=>screen0.
    PERFORM register_event.
    PERFORM frm_field_catalog.
    PERFORM frm_get_layout.
    PERFORM exclude_fun.
    PERFORM frm_list_alv.
*    PERFORM top_of_page.
  ELSE.
    PERFORM refresh_alv.
*    PERFORM frm_selected_rows USING g_alv_index.
  ENDIF.
ENDFORM. " FRM_CREATE_ALV
*&---------------------------------------------------------------------*
*&      Form  REGISTER_EVENT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM register_event .
  CREATE OBJECT g_event_handler .
  SET HANDLER g_event_handler->handle_toolbar FOR g_alv .
  SET HANDLER g_event_handler->handle_user_command FOR g_alv .
  SET HANDLER g_event_handler->handle_onf4 FOR g_alv .
  SET HANDLER g_event_handler->handle_hotspot_click FOR g_alv .
  SET HANDLER g_event_handler->handle_button_click FOR g_alv .
ENDFORM. " REGISTER_EVENT
*&---------------------------------------------------------------------*
*&      Form  FRM_FIELD_CATALOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM frm_field_catalog .
  REFRESH: gt_field.
  mc_field 'MATNR'        text-002             20.
  mc_field 'LABST'        text-003             10.
  mc_field 'OPENPO'       text-004             10.
  mc_field 'UPMAT'        text-005             20.

ENDFORM. " FRM_FIELD_CATALOG
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_LAYOUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM frm_get_layout .
  CLEAR: gs_layout.
  gs_layout-sel_mode = 'A'.
*  gs_layout-cwidth_opt = 'X'.
  g_variant-report = sy-repid.
ENDFORM. " FRM_GET_LAYOUT
*&---------------------------------------------------------------------*
*&      Form  EXCLUDE_FUN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM exclude_fun .
  DATA: ls_exclude TYPE ui_func .
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_cut.
  APPEND ls_exclude TO gt_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_delete_row.
  APPEND ls_exclude TO gt_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_insert_row.
  APPEND ls_exclude TO gt_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_paste.
  APPEND ls_exclude TO gt_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_paste_new_row.
  APPEND ls_exclude TO gt_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_copy.
  APPEND ls_exclude TO gt_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_append_row.
  APPEND ls_exclude TO gt_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_copy_row.
  APPEND ls_exclude TO gt_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_undo.
  APPEND ls_exclude TO gt_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_refresh.
  APPEND ls_exclude TO gt_exclude.
ENDFORM. " EXCLUDE_FUN
*&---------------------------------------------------------------------*
*&      Form  FRM_LIST_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM frm_list_alv .
  CALL METHOD g_alv->set_table_for_first_display
    EXPORTING
      is_variant           = g_variant
      i_save               = 'A'
      is_layout            = gs_layout
      it_toolbar_excluding = gt_exclude
    CHANGING
      it_outtab            = gt_list_alv[]
      it_fieldcatalog      = gt_field.
ENDFORM. " FRM_LIST_ALV
*&---------------------------------------------------------------------*
*&      Form  REFRESH_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM refresh_alv.
  DATA: ls_stable TYPE 	lvc_s_stbl.
  ls_stable-row = 'X'.
  ls_stable-col = 'X'.
  IF g_alv IS NOT INITIAL.
    CALL METHOD g_alv->refresh_table_display
      EXPORTING
        is_stable = ls_stable.
  ENDIF.
ENDFORM. " REFRESH_ALV
*&---------------------------------------------------------------------*
*&      Form  FRM_USER_COMMAND
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM frm_user_command .
  DATA: ok_code TYPE sy-ucomm.
  ok_code = sy-ucomm.
  CASE ok_code.
    WHEN 'BACK'.
      PERFORM free_alv.
      LEAVE TO SCREEN 0.
    WHEN 'EXT'.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDFORM. " FRM_USER_COMMAND
*&---------------------------------------------------------------------*
*&      Form  FREE_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM free_alv .
  IF g_alv IS NOT INITIAL.
    CALL METHOD g_alv->free.
    FREE: g_alv.
  ENDIF.
ENDFORM. " FREE_ALV
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_SUPMAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_LIST_MATNR  text
*      <--P_WA_LIST_UPMAT  text
*----------------------------------------------------------------------*
FORM frm_get_supmat   USING    p_matnr.
  DATA l_datub TYPE sy-datum VALUE '99991231'.
  DATA lt_wultab LIKE TABLE OF stpov.
  DATA lt_equicat LIKE TABLE OF cscequi.
  DATA lt_kndcat LIKE TABLE OF cscknd.
  DATA lt_matcat LIKE TABLE OF cscmat.
  DATA lt_stdcat LIKE TABLE OF cscstd.
  DATA lt_tplcat LIKE TABLE OF csctpl.
  DATA lt_prjcat LIKE TABLE OF cscprj.

  CALL FUNCTION 'CS_WHERE_USED_MAT'
    EXPORTING
      datub                            = l_datub
      datuv                            = sy-datum
      matnr                            = p_matnr
*     POSTP                            = ' '
*     RETCODE_ONLY                     = ' '
*     STLAN                            = ' '
     werks                            = p_werks
*     MCLMT                            = ' '
*     MNSTL                            = ' '
*     MXSTL                            = ' '
*     STLTP                            = ' '
*     NEWSI                            = ' '
*   IMPORTING
*     TOPMAT                           =
    TABLES
      wultb                            = lt_wultab
      equicat                          = lt_equicat
      kndcat                           = lt_kndcat
      matcat                           = lt_matcat
      stdcat                           = lt_stdcat
      tplcat                           = lt_tplcat
*     PRJCAT                           =
   EXCEPTIONS
     call_invalid                     = 1
     material_not_found               = 2
     no_where_used_rec_found          = 3
     no_where_used_rec_selected       = 4
     no_where_used_rec_valid          = 5
     OTHERS                           = 6
            .
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  CLEAR gt_wultb.
  gt_wultb = lt_wultab.

ENDFORM.                    " FRM_GET_SUPMAT
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_OPENPO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM frm_get_openpo USING p_matnr CHANGING p_openpo.

  SELECT
      ekko~ekorg  " PO Purch organisation
      ekko~ekgrp  " PO Purch group
      ekko~bsart  " PO doc type
      ekko~aedat  " PO creation date
      ekpo~ebeln  " PO num
      ekpo~ebelp  " PO item  num
      ekpo~matnr  " material
      ekpo~werks  " plant
* begin of MOD-025
      ekpo~lgort  " Storage Location
* end of MOD-025
      ekko~lifnr  " vendor number
*      lfa1~name1  " Vendor Name
      ekpo~afnam  " Name of Requisitioner/Requester
      ekko~reswk  " supplying plant
      ekpo~menge  " quantities
      ekpo~meins  " unit of measure
      ekpo~peinh  " price unit
      ekpo~netpr  " net price
      ekko~waers  " currency
      ekpo~zztranspmode   " transportation mode
      ekpo~zzconscode     " Consignee code
* begin of MOD-025
      ekpo~zzurgcode      " Urgency code
* end of MOD-025
      ekpo~bednr  "
      ekpo~infnr  "
      ekpo~elikz  "
      ekpo~erekz  "
      ekko~ihrez  " Communication: Your-Reference    " +Mod-021 (Satya)
      ekpo~zzvtweg  " MOD-022
      eket~eindt "Madhu
  INTO CORRESPONDING FIELDS OF TABLE i_purch_orders
  FROM ekpo
  INNER JOIN  ekko  ON ekpo~ebeln =  ekko~ebeln
  INNER JOIN  eket  ON ekpo~ebeln =  eket~ebeln
                  AND  ekpo~ebelp =  eket~ebelp
*  JOIN lfa1 ON ekko~lifnr EQ lfa1~lifnr

  WHERE
          ekpo~retpo    <>  'X'
* begin of MOD-025
    AND   ekko~ekorg     = 'CN06'
*    AND   ekko~ekgrp     IN s_ekgrp
* end of MOD-025
*    AND   ekko~aedat     IN s_aedat
*    AND   ekko~lifnr     IN s_lifnr
*    AND   ekko~bsart     IN s_po_typ
*    AND   ekpo~ebeln     IN s_po_num
    AND   ekpo~werks     EQ p_werks
    AND   ekpo~matnr     EQ p_matnr
    AND   ekpo~loekz     EQ space
    AND   ( ekpo~elikz  NE 'X'
    OR   ekpo~erekz     NE 'X' )
    AND   eket~etenr      = ( SELECT MAX( etenr ) FROM eket
                                                WHERE ebeln =
                                                ekpo~ebeln AND ebelp =
                                                ekpo~ebelp ).
*    AND   eket~eindt     =< p_due_da.
  CLEAR p_openpo.
  LOOP AT i_purch_orders.
    p_openpo = p_openpo + ( i_purch_orders-menge - i_purch_orders-wemng ).
  ENDLOOP.
ENDFORM.                    " FRM_GET_OPENPO
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_STOCK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_LIST_MATNR  text
*      <--P_WA_LIST_LABST  text
*----------------------------------------------------------------------*
FORM frm_get_stock  USING    p_matnr
                    CHANGING p_labst.
*  DATA lv_so TYPE vbbe-omeng.
*  DATA lv_res TYPE resb-bdmng.
*  DATA lv_psm TYPE afpo-psmng.

*  LOOP AT lt_vbbe INTO lw_vbbe WHERE matnr = p_matnr AND werks = p_werks.
*    lv_so = lv_so + lw_vbbe-omeng.
*  ENDLOOP.
*
*  LOOP AT lt_resb INTO lw_resb WHERE matnr = p_matnr AND werks = p_werks.
*    lv_res = lv_res + lw_resb-bdmng.
*  ENDLOOP.
*
*  LOOP AT lt_afpo INTO lw_afpo WHERE matnr = p_matnr AND dwerk = p_werks.
*    lv_psm = lv_psm + lw_afpo-psmng.
*  ENDLOOP.
  CLEAR:lw_vbbe,lw_resb,lw_afpo.
  READ TABLE lt_vbbe INTO lw_vbbe WITH KEY matnr = p_matnr  werks = p_werks.
  READ TABLE lt_resb INTO lw_resb WITH KEY matnr = p_matnr  werks = p_werks.
  READ TABLE GT_AFPO_SUM INTO lw_afpo WITH KEY matnr = p_matnr  dwerk = p_werks.
  p_labst = p_labst - lw_vbbe-omeng - lw_resb-bdmng + lw_afpo-psmng.
  IF  p_labst < 0.
    p_labst = 0.
  ENDIF.

ENDFORM.                    " FRM_GET_STOCK
