*&---------------------------------------------------------------------*
*& Report  YSE_AM_SEO_PRCTR_REDERIVE
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  YSE_AM_SEO_PRCTR_REDERIVE.

TABLES: AUFK,
        PMSDO,
        AFIH,
        EQUI.


**************************************************************************
*DECLARATIONS
**************************************************************************
TYPES: BEGIN OF LTY_AUFK,
        AUFNR TYPE AUFNR,
        BUKRS TYPE BUKRS,
        OBJNR TYPE J_OBJNR,
        BEMOT TYPE BEMOT,
        PHAS1 TYPE AUFPHAS1,
       END OF LTY_AUFK,

       LTTY_AUFK TYPE STANDARD TABLE OF LTY_AUFK,

       BEGIN OF LTY_PMSDO,
        OBJNR TYPE J_OBJNR,
        MATNR TYPE MATNR,
        VKORG TYPE VKORG,
        VTWEG TYPE VTWEG,
        spart type spart,
        FAKTF TYPE FAKTF,
       END OF LTY_PMSDO,

       LTTY_PMSDO TYPE STANDARD TABLE OF LTY_PMSDO,

       BEGIN OF LTY_AFIH ,
        AUFNR TYPE AUFNR,
        KUNUM TYPE KUNUM,
        EQUNR TYPE EQUNR,
       END OF LTY_AFIH,

       LTTY_AFIH TYPE STANDARD TABLE OF LTY_AFIH,

       BEGIN OF LTY_EQUI,
        EQUNR TYPE EQUNR,
        SERNR TYPE GERNR,
       END OF LTY_EQUI,

       LTTY_EQUI TYPE STANDARD TABLE OF LTY_EQUI,

       begin of lty_prctr,
         aufnr type aufnr,
         prctr type prctr,
         phas1 type AUFPHAS1,
       end of lty_prctr,

       ltty_prctr type STANDARD TABLE OF lty_prctr.


DATA: LT_AUFK TYPE LTTY_AUFK,
      LT_PMSDO TYPE LTTY_PMSDO,
      LT_AFIH TYPE LTTY_AFIH,
      LT_EQUI TYPE LTTY_EQUI,
      lv_prctr type prctr,
      lt_prctr type ltty_prctr,
      ls_prctr type lty_prctr,
      lv_objkey type SWO_TYPEID.

FIELD-SYMBOLS: <FS_AUFK> TYPE LTY_AUFK,
               <FS_PMSDO> TYPE LTY_PMSDO,
               <FS_AFIH> TYPE LTY_AFIH,
               <FS_EQUI> TYPE LTY_EQUI,
               <fs_prctr> type lty_prctr.


**************************************************************************
* SELECTION-SCREEN
**************************************************************************
SELECT-OPTIONS: SO_ERDAT FOR AUFK-ERDAT,
                SO_BUKRS FOR AUFK-BUKRS,
                SO_PRCTR FOR AUFK-PRCTR,
                SO_AUFNR FOR AUFK-AUFNR.

parameters: p_test type c.

**************************************************************************
*START OF SELECTION
**************************************************************************
START-OF-SELECTION.
*First select all relevant service order
  SELECT AUFNR BUKRS OBJNR BEMOT PHAS1 FROM AUFK INTO TABLE LT_AUFK
    WHERE ERDAT IN SO_ERDAT
      AND BUKRS IN SO_BUKRS
*      AND PHAS1 EQ 'X'
      AND PRCTR IN SO_PRCTR
      AND AUFNR IN SO_AUFNR.


  IF SY-SUBRC NE 0.
    MESSAGE 'No seo selected' TYPE 'E'.
    EXIT.
  ENDIF.

*Now get all details
  SELECT OBJNR MATNR VKORG VTWEG spart FAKTF FROM PMSDO INTO TABLE LT_PMSDO
    FOR ALL ENTRIES IN LT_AUFK
    WHERE OBJNR EQ LT_AUFK-OBJNR.

  SELECT AUFNR KUNUM EQUNR FROM AFIH INTO TABLE LT_AFIH
    FOR ALL ENTRIES IN LT_AUFK
    WHERE AUFNR EQ LT_AUFK-AUFNR.

  SELECT EQUNR SERNR FROM EQUI INTO TABLE LT_EQUI
    FOR ALL ENTRIES IN LT_AFIH
    WHERE EQUNR EQ LT_AFIH-EQUNR.

  SORT: LT_AUFK BY AUFNR,
        LT_PMSDO BY OBJNR,
        LT_AFIH BY AUFNR,
        LT_EQUI BY EQUNR.

  LOOP AT LT_AUFK ASSIGNING <FS_AUFK>.
    clear ls_prctr.

    READ TABLE LT_PMSDO ASSIGNING <FS_PMSDO> WITH KEY OBJNR = <FS_AUFK>-OBJNR BINARY SEARCH.
    READ TABLE LT_AFIH ASSIGNING <FS_AFIH> WITH KEY AUFNR = <FS_AUFK>-AUFNR BINARY SEARCH.
    READ TABLE LT_EQUI ASSIGNING <FS_EQUI> WITH KEY EQUNR = <FS_AFIH>-EQUNR BINARY SEARCH.

    CALL METHOD YSE_AM_DERIVATION=>DERIVATION
      EXPORTING
        IM_MATNR            = <fs_pmsdo>-matnr
        IM_VKORG            = <fs_pmsdo>-vkorg
        IM_VTWEG            = <fs_pmsdo>-vtweg
        IM_KUNNR            = <fs_afih>-kunum
        IM_SERNR            = <fs_equi>-sernr
        IM_SPART            = <fs_pmsdo>-spart
        IM_EQUNR            = <fs_equi>-equnr
        IM_BUKRS            = <fs_aufk>-bukrs
        IM_BEMOT            = <fs_aufk>-bemot
        IM_FAKTF            = <fs_pmsdo>-faktf
      IMPORTING
    "    EXP_GAC             =
    "    EXP_PGC             =
        EXP_PRCTR           = lv_prctr
      EXCEPTIONS
        NO_SALES_VIEW_FOUND = 1
        OTHERS              = 2
            .

    move: <fs_aufk>-aufnr to ls_prctr-aufnr,
          <fs_aufk>-phas1 to ls_prctr-phas1,
          lv_prctr        to ls_prctr-prctr.

    append ls_prctr to lt_prctr.

  ENDLOOP.


*Now start to process them
  "The not released orders only update the prctr
  "The already released orders update prctr + start release steps

loop at lt_prctr ASSIGNING <fs_prctr>.
  if p_test is initial.
    update aufk set prctr = <fs_prctr>-prctr where aufnr eq <fs_prctr>-aufnr.
    commit work and wait.
    if <fs_prctr>-phas1 = 'X'. "An already released order, so rel flow is to be done.
      move <fs_prctr>-aufnr to lv_objkey.

      CALL FUNCTION 'SWE_EVENT_CREATE'
        EXPORTING
          OBJTYPE                       = 'BUS2088'
          OBJKEY                        = lv_objkey
          EVENT                         = 'RELEASED'
                .
      commit work and wait.

    endif.
  endif.
  write: / <fs_prctr>-aufnr, <fs_prctr>-prctr.
endloop.

*Selection text£º
*P_TEST:        Test, no update
*SO_AUFNR:        Service order
*SO_BUKRS:        Company code
*SO_ERDAT:        Creation date
*SO_PRCTR:        Profit center
