*----------------------------------------------------------------------*
* PROGRAM ID    : YSE_SOHIST_UPLOAD                                    *
* PROGRAM TITLE : Upload sales history to DB table: YSE_EM_SOHISTMIG   *
* AUTHOR        : Anda Wu                                              *
* DATE          : 16/02/2013                                           *
* DEVELOPMENT ID:                                                      *
*                                                                      *
* CHANGE REQUEST NUMBER:                                               *
*                                                                      *
* Program Description: Upload local file to DB                         *
*                                                                      *
*----------------------------------------------------------------------*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
*  DATE    | NAME     |TRANSPORT  | CR# and short Description          *
*----------------------------------------------------------------------*
*16/02/2013|Anda Wu   |CD1K975107 |CR2774: Initial version             *
*----------------------------------------------------------------------*

REPORT  yse_sohist_upload NO STANDARD PAGE HEADING LINE-SIZE 255.
DATA:
  gt_lfile TYPE yse_t_lfile,                      "Local file name
  gt_sohistmig TYPE TABLE OF yse_em_sohistmig,    "SO History
  gt_sohist_elog TYPE TABLE OF string,
  gv_tot_lines    TYPE i,                         "Process lines
  gv_suc_lines    TYPE i,                         "Success Lines
  gv_fai_lines    TYPE i.                         "Failed lines
CONSTANTS:
  gc_tab TYPE c VALUE cl_abap_char_utilities=>horizontal_tab,
  gc_type_e TYPE c VALUE 'E',
  gc_hifi TYPE c VALUE '-'.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-t01.
PARAMETERS:
          p_file(1024) TYPE c LOWER CASE OBLIGATORY.  "Local File Path
SELECTION-SCREEN END OF BLOCK b1.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.
* Get local file path
  PERFORM select_file.

AT SELECTION-SCREEN.
* Check if the file path and name exist
  PERFORM check_filename.

START-OF-SELECTION.
* Read local file into a internal table
  PERFORM read_file.
* Write entry to datebase table
  PERFORM write_db.

END-OF-SELECTION.
* WRITE process result message
  PERFORM write_log.
*&---------------------------------------------------------------------*
*&      Form  select_file
*&---------------------------------------------------------------------*
*       Get local file path
*----------------------------------------------------------------------*
FORM select_file .
  DATA:
    lv_title  TYPE string,     "Referrence title
    lt_file   TYPE filetable,  "Internal table of dialog filenames
    ls_file   TYPE file_table, "Working area for IT_FILE,
    lv_rc     TYPE i.          "Return Code

  lv_title = text-001.
  CLEAR: lt_file[],
         ls_file.

  CALL METHOD cl_gui_frontend_services=>file_open_dialog
    EXPORTING
      window_title            = lv_title
    CHANGING
      file_table              = lt_file
      rc                      = lv_rc
    EXCEPTIONS
      file_open_dialog_failed = 1
      cntl_error              = 2
      error_no_gui            = 3
      not_supported_by_gui    = 4
      OTHERS                  = 5.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
  IF lv_rc = 1.
    READ TABLE lt_file INDEX 1 INTO ls_file.
    IF sy-subrc EQ 0.
      p_file = ls_file-filename.
    ENDIF.
  ENDIF.
ENDFORM.                    " select_file
*&---------------------------------------------------------------------*
*&      Form  READ_FILE
*&---------------------------------------------------------------------*
*       Read local file into a internal table
*----------------------------------------------------------------------*
FORM read_file .
  DATA: lv_filename TYPE string.

  lv_filename = p_file.
  PERFORM get_from_pres IN PROGRAM yam_common_routines
                                    TABLES  gt_lfile
                                    USING   lv_filename
                                            ycl_se_utility=>c_ft_asc
                                            ' '.
  IF gt_lfile IS NOT INITIAL.
    DELETE gt_lfile INDEX 1.
    DELETE gt_lfile
      WHERE text IS INITIAL.
  ENDIF.

ENDFORM.                    " READ_FILE
*&---------------------------------------------------------------------*
*&      Form  WRITE_DB
*&---------------------------------------------------------------------*
*       Write entry to datebase table
*----------------------------------------------------------------------*
FORM write_db .
  DATA: ls_sohistmig TYPE yse_em_sohistmig,
        lv_mess_str  TYPE string,
        lv_tmp_str1  TYPE string,
        lv_tmp_str2  TYPE string.
  IF gt_lfile IS INITIAL.
    MESSAGE w000(yse_sales_log) WITH 'No Input Data'(002).
  ELSE.
    DESCRIBE TABLE gt_lfile LINES gv_tot_lines.
    PERFORM convert_to_struc.
  ENDIF.

  IF gt_sohistmig IS INITIAL.
    MESSAGE s000(yse_sales_log)
      WITH 'Error happen on converting.'(003)
           'Please check your file'(004)
      DISPLAY LIKE gc_type_e.
  ENDIF.

  LOOP AT gt_sohistmig INTO ls_sohistmig.
    INSERT  yse_em_sohistmig
      FROM  ls_sohistmig .
    IF sy-subrc = 0.
      gv_suc_lines = gv_suc_lines + 1.
    ELSE.
      lv_tmp_str1 = ls_sohistmig-zmeng.
      lv_tmp_str2 = ls_sohistmig-zline.
      CONCATENATE
            ls_sohistmig-period
            ls_sohistmig-matnr
            ls_sohistmig-vkorg
            ls_sohistmig-vtweg
            ls_sohistmig-bzirk
            ls_sohistmig-werks
            lv_tmp_str1
            lv_tmp_str2
       INTO lv_mess_str
       SEPARATED BY gc_hifi.
      CONCATENATE
            text-011
            lv_mess_str
        INTO lv_mess_str.
      APPEND lv_mess_str TO gt_sohist_elog.
    ENDIF.
    CLEAR ls_sohistmig.
  ENDLOOP.
  gv_fai_lines = gv_tot_lines - gv_suc_lines.

ENDFORM.                    " WRITE_DB

*&---------------------------------------------------------------------*
*&      Form  WRITE_LOG
*&---------------------------------------------------------------------*
*       WRITE process result message
*----------------------------------------------------------------------*
FORM write_log .
  DATA: lv_mess_str  TYPE string.
  WRITE: 'Total process entries:'(005) , AT 30(6) gv_tot_lines,
         / 'Successful upload entries:'(006), AT 30(6) gv_suc_lines,
         / 'Failed upload entries:'(007), AT 30(6) gv_fai_lines.
  ULINE.

  IF gv_tot_lines = gv_suc_lines.
    MESSAGE s000(yse_sales_log)
      WITH 'File uploaded successfully'(008).
  ELSE.
    LOOP AT gt_sohist_elog INTO lv_mess_str.
      WRITE: / lv_mess_str.
    ENDLOOP.
    MESSAGE s000(yse_sales_log)
      WITH 'Failed to uploaded entries'(009)
      DISPLAY LIKE gc_type_e.
  ENDIF.

ENDFORM.                    " WRITE_LOG
*&---------------------------------------------------------------------*
*&      Form  CONVERT_TO_STRUC
*&---------------------------------------------------------------------*
*       Convert internal table to structure YSE_EM_SOHISTMIG
*----------------------------------------------------------------------*
FORM convert_to_struc .

  DATA:
    ls_lfile TYPE yse_s_lfile,
    lt_field TYPE TABLE OF string,
    lv_field TYPE string,
    lv_line  TYPE string,
    lflg_suc TYPE c,
    lv_mess_str  TYPE string.
  FIELD-SYMBOLS:
    <fs_tab> TYPE STANDARD TABLE,
    <fs_wa> TYPE ANY,
    <fs_field> TYPE ANY.
  DATA: lo_wa TYPE REF TO data,
        lo_itab TYPE REF TO data.
  CREATE DATA:
    lo_wa TYPE yse_em_sohistmig,
    lo_itab TYPE TABLE OF yse_em_sohistmig INITIAL SIZE 1.

  ASSIGN lo_wa->* TO <fs_wa>.
  ASSIGN lo_itab->* TO <fs_tab>.
  ASSIGN gt_sohistmig TO <fs_tab>.

  LOOP AT gt_lfile INTO ls_lfile.
    CLEAR: lt_field,
           lflg_suc.
    lv_line = ls_lfile-text.
    SPLIT lv_line AT gc_tab INTO TABLE lt_field.
    lv_mess_str = lv_line.
    REPLACE ALL OCCURRENCES OF  gc_tab
      IN lv_mess_str
      WITH gc_hifi.
    LOOP AT lt_field INTO lv_field.
      ASSIGN COMPONENT sy-tabix OF STRUCTURE <fs_wa> TO <fs_field>.
      TRY .
          <fs_field> = lv_field.
        CATCH cx_sy_conversion_no_number.
          lflg_suc = gc_type_e.
          CONCATENATE
                text-012
                lv_mess_str+4
            INTO lv_mess_str.
          APPEND lv_mess_str TO gt_sohist_elog.
          EXIT.
      ENDTRY.
    ENDLOOP.
    IF lflg_suc IS NOT INITIAL.
      CONTINUE.
    ENDIF.
    APPEND <fs_wa> TO <fs_tab>.
    CLEAR  <fs_wa>.
  ENDLOOP.

ENDFORM.                    " CONVERT_TO_STRUC
*&---------------------------------------------------------------------*
*&      Form  CHECK_FILENAME
*&---------------------------------------------------------------------*
*       Check if the file path and name exist
*----------------------------------------------------------------------*
FORM check_filename .
  DATA:
    lv_exist TYPE c.
  CALL FUNCTION 'TMP_GUI_GET_FILE_EXIST'
    EXPORTING
      fname          = p_file
    IMPORTING
      exist          = lv_exist
    EXCEPTIONS
      fileinfo_error = 1
      OTHERS         = 2.
  IF sy-subrc <> 0 OR lv_exist IS INITIAL.
    MESSAGE e000(yse_sales_log)
      WITH 'Please enter an invaild filename'(010).
  ENDIF.
ENDFORM.                    " CHECK_FILENAME

*Text symbol text£º
*001:Select a file for upload
*002:No Input Data
*003:Error happen on converting.
*004:Please check your file
*005:Total process entries:
*006:Successful upload entries:
*007:Failed upload entries:
*008:File uploaded successfully
*009:Failed to uploaded entries
*010:Please enter an invaild filename
*011:Error to upload  record:
*012:Error to convert record:

*T01:Input
*Selection text£º
*P_FILE:        Local File
