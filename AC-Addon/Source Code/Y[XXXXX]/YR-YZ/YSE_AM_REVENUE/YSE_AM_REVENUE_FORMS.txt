*&---------------------------------------------------------------------*
*&  Include           YSE_AM_REVENUE_FORMS                             *
*&---------------------------------------------------------------------*

************************************************************************
* SUBROUTINES  LEVEL 01                                                *
************************************************************************

*----------------------------------------------------------------------*
*   Form  DOCTYPES_TO_DISPLAY                                          *
*----------------------------------------------------------------------*
FORM DOCTYPES_TO_DISPLAY CHANGING DOCTYPE.

*-- Select relevant document types to display
  CLEAR: IT_DTYPE.
  REFRESH: IT_DTYPE.
  SELECT * FROM YSE_SD_BILLRELEV
           INTO CORRESPONDING FIELDS OF TABLE IT_DTYPE.

*-- Call list with selected plants
  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      VALUE_ORG       = 'S'
      RETFIELD        = 'AUART'


      WINDOW_TITLE    = 'Document types'
    TABLES
      VALUE_TAB       = IT_DTYPE
      RETURN_TAB      = IT_DDSHRETVAL
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.
  IF SY-SUBRC EQ 0.
    READ TABLE IT_DDSHRETVAL INDEX 1.
    DOCTYPE = IT_DDSHRETVAL-FIELDVAL.
  ENDIF.

ENDFORM.                    " DOCTYPES_TO_DISPLAY

*----------------------------------------------------------------------*
*   Form  VARIANT_INPUTHELP                                            *
*----------------------------------------------------------------------*
*   F4 - help for variants                                             *
*----------------------------------------------------------------------*
FORM VARIANT_INPUTHELP USING VAR.

  CLEAR H_EXIT.

  DATA:
    LV_VARIANT LIKE GV_VARIANT.

  GV_VARIANT-VARIANT = VAR.

  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      IS_VARIANT    = GV_VARIANT
      I_SAVE        = G_VARIANT_SAVE
    IMPORTING
      E_EXIT        = H_EXIT
      ES_VARIANT    = LV_VARIANT
    EXCEPTIONS
      NOT_FOUND     = 1
      PROGRAM_ERROR = 2
      OTHERS        = 3.

  IF SY-SUBRC IS INITIAL AND H_EXIT IS INITIAL.
    VAR               = LV_VARIANT-VARIANT.
  ENDIF.

ENDFORM.                    " VARIANT_INPUTHELP

*----------------------------------------------------------------------*
*   Form  EXISTENCE_VARIANT                                            *
*----------------------------------------------------------------------*
FORM EXISTENCE_VARIANT USING VAR LIKE GV_VARIANT-VARIANT.

  IF NOT VAR IS INITIAL.
    GV_VARIANT-VARIANT = VAR.
    CALL FUNCTION 'REUSE_ALV_VARIANT_EXISTENCE'
      EXPORTING
        I_SAVE     = G_VARIANT_SAVE
      CHANGING
        CS_VARIANT = GV_VARIANT.
  ENDIF.

ENDFORM.                    " EXISTENCE_VARIANT

*----------------------------------------------------------------------*
*   Form  GET_DEFAULT_VARIANT                                          *
*----------------------------------------------------------------------*
*   If there is an existing default variant - get it                   *
*----------------------------------------------------------------------*
FORM GET_DEFAULT_VARIANT USING VAR.

  DATA:
    LV_VARIANT LIKE GV_VARIANT.

  LV_VARIANT = GV_VARIANT.

  CALL FUNCTION 'REUSE_ALV_VARIANT_DEFAULT_GET'
    EXPORTING
      I_SAVE     = G_VARIANT_SAVE
    CHANGING
      CS_VARIANT = LV_VARIANT
    EXCEPTIONS
      NOT_FOUND  = 2.

  IF SY-SUBRC IS INITIAL.
    VAR = LV_VARIANT-VARIANT.
  ENDIF.

ENDFORM.                    " GET_DEFAULT_VARIANT

*----------------------------------------------------------------------*
*   Form  CHECK_VALUES_ON_SELECTIONS                                   *
*----------------------------------------------------------------------*
FORM CHECK_VALUES_ON_SELECTIONS.

  IF NOT RB_SEL2 IS INITIAL.
    IF NOT S_FKART[] IS INITIAL.
      MESSAGE E025(YSE_SALES_LOG) WITH TEXT-E03 TEXT-E01.
    ENDIF.
    IF NOT S_ERDAT2[] IS INITIAL.
      MESSAGE E025(YSE_SALES_LOG) WITH TEXT-E04 TEXT-E01.
    ENDIF.
    IF NOT S_FKDAT[] IS INITIAL.
      MESSAGE E025(YSE_SALES_LOG) WITH TEXT-E05 TEXT-E01.
    ENDIF.
  ELSEIF NOT RB_SEL3 IS INITIAL.
    IF NOT S_FKART[] IS INITIAL.
      LOOP AT S_FKART WHERE LOW IS INITIAL AND HIGH IS INITIAL.
        MESSAGE E026(YSE_SALES_LOG) WITH TEXT-E03 TEXT-E02.
      ENDLOOP.
    ENDIF.
    IF NOT S_ERDAT2[] IS INITIAL.
      LOOP AT S_ERDAT2 WHERE LOW IS INITIAL AND HIGH IS INITIAL.
        MESSAGE E026(YSE_SALES_LOG) WITH TEXT-E04 TEXT-E02.
      ENDLOOP.
    ENDIF.
    IF NOT S_FKDAT[] IS INITIAL.
      LOOP AT S_FKDAT WHERE LOW IS INITIAL AND HIGH IS INITIAL.
        MESSAGE E026(YSE_SALES_LOG) WITH TEXT-E05 TEXT-E02.
      ENDLOOP.
    ENDIF.
  ENDIF.

ENDFORM.                    " CHECK_VALUES_ON_SELECTIONS


*----------------------------------------------------------------------*
*   Form  INITIALIZE_DATA                                              *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM INITIALIZE_DATA.

*-- Clear of internal tables also necessary at routine 'reset_data' !!
  CLEAR:
    IT_VBAK, IT_VBAP, IT_VBEP,
    IT_LIKP, IT_VBRK, IT_VBRP,
    IT_LIKP2, IT_VBRK2, IT_VBRP2,
    IT_VBPA1, IT_VBPA2, IT_VBPA3, IT_VBPA4,
    it_vbfa_so2del, it_vbfa_so2inv, IT_VBFA3,
    IT_KNA1_AG, IT_KNA1_WE, IT_KNA1_RE, IT_KNA1_HL,
    IT_LFA1, IT_ADRC, IT_KNVH,
    IT_VBUK1, IT_VBUK2, IT_VBUP, IT_TVGRT, IT_TVKBT, IT_TVFK,
    IT_ACCT, IT_CE41000, IT_MAKT, IT_MVKE, IT_EKKO,
    IT_BILLRELEV, IT_VBKD,
    IT_DATA.
  REFRESH:
    IT_VBAK, IT_VBAP, IT_VBEP,
    IT_LIKP, xt_lips, IT_VBRK, IT_VBRP,
    IT_LIKP2, IT_VBRK2, IT_VBRP2,
    IT_VBPA1, IT_VBPA2, IT_VBPA3, IT_VBPA4,
    it_vbfa_so2del, it_vbfa_so2inv, IT_VBFA3,
    IT_KNA1_AG, IT_KNA1_WE, IT_KNA1_RE, IT_KNA1_HL,
    IT_LFA1, IT_ADRC, IT_KNVH,
    IT_VBUK1, IT_VBUK2, IT_VBUP, IT_TVGRT, IT_TVKBT, IT_TVFK,
    IT_ACCT, IT_CE41000, IT_MAKT, IT_MVKE, IT_EKKO,
    IT_BILLRELEV, IT_VBKD,
    IT_DATA.

* Fill R_AUART with Doc types from YSE_SD_BILLRELEV which correspond
* to provided "billing relevancy" indicator(s)
  CLEAR: R_AUART.
  REFRESH: R_AUART.
  R_AUART-SIGN   = 'I'.
  R_AUART-OPTION = 'EQ'.
  SELECT      *
         FROM YSE_SD_BILLRELEV
        WHERE ZFKREL IN S_ZFKREL.
    R_AUART-LOW = YSE_SD_BILLRELEV-AUART.
    APPEND R_AUART.
  ENDSELECT.

* Fill a range with sales rep partner types which we're interested in
  CLEAR: R_PARVW.
  REFRESH: R_PARVW.
  R_PARVW-SIGN   = 'I'.
  R_PARVW-OPTION = 'EQ'.
  R_PARVW-LOW    = C_PARVW_VE.  APPEND R_PARVW. " Sales employee
  R_PARVW-LOW    = C_PARVW_ZX.  APPEND R_PARVW. " Sales employee (add)
  R_PARVW-LOW    = C_PARVW_ZY.  APPEND R_PARVW. " Sales employee (add)
  R_PARVW-LOW    = C_PARVW_ZV.  APPEND R_PARVW. " Sales Rep (Sales)
  R_PARVW-LOW    = C_PARVW_ZW.  APPEND R_PARVW. " Sales Rep (Service)

* Fill a range with "rules in billing/invoice plan"
  CLEAR: R_FAREG.
  REFRESH: R_FAREG.
  R_FAREG-SIGN   = 'I'.
  R_FAREG-OPTION = 'EQ'.
  R_FAREG-LOW    = C_FAREG_4. " Dwnpymt in milest billing on prctg basis
  APPEND R_FAREG.
  R_FAREG-LOW    = C_FAREG_5. " Dwnpymt in milest billing on a val basis
  APPEND R_FAREG.

ENDFORM.                    " INITIALIZE_DATA

*----------------------------------------------------------------------*
*   Form  SELECT_DATA                                                  *
*----------------------------------------------------------------------*
FORM SELECT_DATA.

* Select initial data set from VBAK
  SELECT      *
         FROM VBAK
         INTO TABLE IT_VBAK
        WHERE VBELN IN S_VBELN
          AND ERDAT IN S_ERDAT1  " SOrder creation date
          AND ERNAM IN S_ERNAM
          AND VBTYP IN S_VBTYP
          AND AUART IN S_AUART   " Document type (provided by user)
          AND AUART IN R_AUART   " Document type (derived from bill.rel)
          AND LIFSK IN S_LIFSK
          AND FAKSK IN S_FAKSK
          AND VKORG IN S_VKORG
          AND VTWEG IN S_VTWEG
          AND SPART IN S_SPARTH
          AND VKGRP IN S_VKGRP
          AND VKBUR IN S_VKBUR
          AND VDATU IN S_VDATU
          AND KUNNR IN S_KUNAG.

* Only perform any additional selects if we have VBAK rows
  CHECK NOT IT_VBAK[] IS INITIAL.

*Select the descriptions for the regions
*We can select all, because not many
  SELECT * FROM T005U INTO TABLE IT_T005U
              WHERE SPRAS EQ SY-LANGU.



* Get the billing relevancy indicator for all document types selected
  SELECT      *
         FROM YSE_SD_BILLRELEV
         INTO TABLE IT_BILLRELEV
          FOR ALL ENTRIES IN IT_VBAK
        WHERE AUART  EQ IT_VBAK-AUART
          AND ZFKREL IN S_ZFKREL.

* Get order header status information for all orders selected
  SELECT      *
         FROM VBUK
         INTO TABLE IT_VBUK1
          FOR ALL ENTRIES IN IT_VBAK
        WHERE VBELN EQ IT_VBAK-VBELN
          AND GBSTK IN S_GBSTK.

* Get long texts (descr) for all sales offices selected
  SELECT      *
         FROM TVKBT
         INTO TABLE IT_TVKBT
          FOR ALL ENTRIES IN IT_VBAK
        WHERE SPRAS EQ SY-LANGU
          AND VKBUR EQ IT_VBAK-VKBUR.
  DELETE ADJACENT DUPLICATES FROM IT_TVKBT.

* Get long texts (descr) for all sales groups selected
  SELECT      *
         FROM TVGRT
         INTO TABLE IT_TVGRT
          FOR ALL ENTRIES IN IT_VBAK
        WHERE SPRAS EQ SY-LANGU
          AND VKGRP EQ IT_VBAK-VKGRP.
  DELETE ADJACENT DUPLICATES FROM IT_TVGRT.

* Get business data for all orders/items selected (restr on S District)
  SELECT      *
         FROM VBKD
         INTO TABLE IT_VBKD
          FOR ALL ENTRIES IN IT_VBAK
        WHERE VBELN EQ IT_VBAK-VBELN
          AND BZIRK IN S_BZIRK.

* Get details for all items of selected orders (restr on Pos, Matnr,...)
  SELECT      *
         FROM VBAP
         INTO TABLE IT_VBAP
          FOR ALL ENTRIES IN IT_VBAK
        WHERE VBELN EQ IT_VBAK-VBELN
          AND POSNR IN S_POSNR
          AND MATNR IN S_MATNR
          AND PSTYV IN S_PSTYV
          AND SPART IN S_SPARTD
          AND WERKS IN S_WERKS.

* If any items selected, select further item details
  IF NOT IT_VBAP[] IS INITIAL.

*   Get order item status information for all items selected
    SELECT      *
           FROM VBUP
           INTO TABLE IT_VBUP
            FOR ALL ENTRIES IN IT_VBAP
          WHERE VBELN EQ IT_VBAP-VBELN
            AND POSNR EQ IT_VBAP-POSNR.

*   Get material descr for all materials used in items selected
    SELECT      *
           FROM MAKT
           INTO TABLE IT_MAKT
            FOR ALL ENTRIES IN IT_VBAP
          WHERE MATNR EQ IT_VBAP-MATNR
            AND SPRAS EQ SY-LANGU.
    DELETE ADJACENT DUPLICATES FROM IT_MAKT.


*   Get mat sales data for all materials used in items selected
    SELECT * FROM MVKE INTO TABLE IT_MVKE
                       FOR ALL ENTRIES IN IT_VBAP
                       WHERE MATNR EQ IT_VBAP-MATNR
                         AND VKORG IN S_VKORG
                         AND VTWEG IN S_VTWEG
                         AND MTPOS IN S_MTPOS.

*   Get corresponding ??? from CE41000_ACCT ~ "Atlas Copco Operatin" ???
*   for all selected items
    SELECT      AKTBO PAOBJNR PASUBNR CE4KEY
           FROM CE41000_ACCT
           INTO TABLE IT_ACCT
            FOR ALL ENTRIES IN IT_VBAP
          WHERE AKTBO   EQ 'X'
            AND PAOBJNR EQ IT_VBAP-PAOBJNR.
    DELETE ADJACENT DUPLICATES FROM IT_ACCT.

*   If anything found in previous select, get corr lines from CE41000
    IF NOT IT_ACCT[] IS INITIAL.

      SELECT      AKTBO PAOBJNR PASUBNR PRCTR WW002 WW006 WW007
             FROM CE41000
             INTO TABLE IT_CE41000
              FOR ALL ENTRIES IN IT_ACCT
            WHERE AKTBO EQ 'X'
              AND PAOBJNR EQ IT_ACCT-CE4KEY
              AND PRCTR   IN S_PRCTR
              AND WW002   IN S_WW002
              AND WW006   IN S_WW006
              AND WW007   IN S_WW007.
      DELETE ADJACENT DUPLICATES FROM IT_CE41000.

    ENDIF.

  ENDIF.
* End of selecting further item details

* Get material list prices of all orders selected (cond type ZPRO) konv1
* Get planned costs of all orders selected (cond type ZEK2)    konv2
* Get actual costs of all orders selected (cond type ZEA1)  konv3
  SELECT   knumv kposn kschl kwert
         FROM KONV
         INTO TABLE xt_konv_ord
          FOR ALL ENTRIES IN IT_VBAK
        WHERE KNUMV EQ IT_VBAK-KNUMV
          AND (   KSCHL EQ C_KSCHL_ZPRO        " konv1
                OR KSCHL EQ C_KSCHL_ZEK2       " konv2
                OR KSCHL EQ C_KSCHL_ZEA1 ).      " konv3

* Get soldto partners
  SELECT      *
         FROM VBPA
         INTO TABLE IT_VBPA1
          FOR ALL ENTRIES IN IT_VBAK
        WHERE VBELN EQ IT_VBAK-VBELN
          AND PARVW EQ C_PARVW_AG.  " Soldto
  DELETE ADJACENT DUPLICATES FROM IT_VBPA1.

* If any soldto partners found
  IF NOT IT_VBPA1[] IS INITIAL.

*   Get name etc  for all soldto's selected
    SELECT      *
           FROM KNA1
           INTO TABLE IT_KNA1_AG
            FOR ALL ENTRIES IN IT_VBPA1
          WHERE KUNNR EQ IT_VBPA1-KUNNR
            AND BRAN1 IN S_BRAN1.

*   Get address details of the soldto's selected
    SELECT      *
           FROM ADRC
           INTO TABLE IT_ADRC
            FOR ALL ENTRIES IN IT_VBPA1
          WHERE ADDRNUMBER EQ IT_VBPA1-ADRNR
            AND DATE_FROM  LE SY-DATUM.
  ENDIF.

* Get shipto partners
  SELECT      *
         FROM VBPA
         INTO TABLE IT_VBPA2
          FOR ALL ENTRIES IN IT_VBAK
        WHERE VBELN EQ IT_VBAK-VBELN
          AND PARVW EQ C_PARVW_WE
          AND KUNNR IN S_KUNWE.
  DELETE ADJACENT DUPLICATES FROM IT_VBPA2.

* If any shipto partners found
  IF NOT IT_VBPA2[] IS INITIAL.

*   Get name etc  for all shipto's selected
    SELECT      *
           FROM KNA1
           INTO TABLE IT_KNA1_WE
            FOR ALL ENTRIES IN IT_VBPA2
          WHERE KUNNR EQ IT_VBPA2-KUNNR.

*   Get address details of the shipto's selected
    SELECT      *
           FROM ADRC
      APPENDING TABLE IT_ADRC
            FOR ALL ENTRIES IN IT_VBPA2
          WHERE ADDRNUMBER EQ IT_VBPA2-ADRNR
            AND DATE_FROM  LE SY-DATUM.

  ENDIF.

* Get billto partners
  SELECT      *
         FROM VBPA
         INTO TABLE IT_VBPA3
          FOR ALL ENTRIES IN IT_VBAK
        WHERE VBELN EQ IT_VBAK-VBELN
          AND PARVW EQ C_PARVW_RE
          AND KUNNR IN S_KUNRE.
  DELETE ADJACENT DUPLICATES FROM IT_VBPA3.

* If any billto partners found
  IF NOT IT_VBPA3[] IS INITIAL.

*   Get name etc. for all billto's selected
    SELECT      *
           FROM KNA1
           INTO TABLE IT_KNA1_RE
            FOR ALL ENTRIES IN IT_VBPA3
          WHERE KUNNR EQ IT_VBPA3-KUNNR.

  ENDIF.

* Get sales rep partners
  SELECT      *
         FROM VBPA
         INTO TABLE IT_VBPA4
          FOR ALL ENTRIES IN IT_VBAK
        WHERE VBELN EQ IT_VBAK-VBELN
          AND PARVW IN R_PARVW.
  DELETE ADJACENT DUPLICATES FROM IT_VBPA4.

* Get customer hierarchy for orders selected
  SELECT      *
         FROM KNVH
         INTO TABLE IT_KNVH
          FOR ALL ENTRIES IN IT_VBAK
        WHERE HITYP  EQ C_HITYP_A
          AND KUNNR  EQ IT_VBAK-KUNNR
          AND VKORG  EQ IT_VBAK-VKORG
          AND VTWEG  EQ IT_VBAK-VTWEG
          AND SPART  EQ IT_VBAK-SPART
          AND DATAB  LE IT_VBAK-ERDAT
          AND DATBI  GE IT_VBAK-ERDAT
          AND HKUNNR IN S_HKUNNR.
  DELETE ADJACENT DUPLICATES FROM IT_KNVH.

* If any cust hier details found, get partner details
  IF NOT IT_KNVH[] IS INITIAL.

    SELECT      *
           FROM KNA1
           INTO TABLE IT_KNA1_HL
            FOR ALL ENTRIES IN IT_KNVH
          WHERE KUNNR EQ IT_KNVH-HKUNNR.
    DELETE ADJACENT DUPLICATES FROM IT_KNA1_HL.

  ENDIF.

* Get schedule line details for all orders selected
  SELECT      *
         FROM VBEP
         INTO TABLE IT_VBEP
          FOR ALL ENTRIES IN IT_VBAK
        WHERE VBELN EQ IT_VBAK-VBELN
          AND EDATU IN S_EDATU.
  SORT IT_VBEP BY VBELN POSNR ETENR.

* Get equipment numbers for AUFNR's listed in VBEP lines
  IF NOT IT_VBEP[] IS INITIAL.
    SELECT      AUFNR EQUNR
           INTO TABLE IT_AFIH
           FROM AFIH
            FOR ALL ENTRIES IN IT_VBEP
          WHERE AUFNR NE SPACE
            AND AUFNR EQ IT_VBEP-AUFNR.

*   Get equipment description and serial number
    IF NOT IT_AFIH[] IS INITIAL.

      SELECT      EQUNR SERNR
             INTO TABLE IT_EQUI
             FROM EQUI
              FOR ALL ENTRIES IN IT_AFIH
            WHERE EQUNR NE SPACE
              AND EQUNR EQ IT_AFIH-EQUNR.
      SORT IT_EQUI BY equnr.

      SELECT      EQUNR EQKTX
             INTO TABLE IT_EQKT
             FROM EQKT
              FOR ALL ENTRIES IN IT_AFIH
            WHERE EQUNR NE SPACE
              AND EQUNR EQ IT_AFIH-EQUNR
              AND SPRAS EQ 'EN'.

    ENDIF.

  ENDIF.

* Read deliv's and return deliv's for all orders selected into it_vbfa_so2del
  SELECT      *
         FROM VBFA
         INTO TABLE it_vbfa_so2del
          FOR ALL ENTRIES IN IT_VBAK
        WHERE VBELV   EQ IT_VBAK-VBELN
          AND (    VBTYP_N EQ C_VBTYP_J
                OR VBTYP_N EQ C_VBTYP_T )
          AND VBTYP_V EQ IT_VBAK-VBTYP.
*          AND stufe EQ space.

* If any (return) deliv's found
  IF NOT it_vbfa_so2del[] IS INITIAL.

*   Get delivery header details
    SELECT      *
           FROM LIKP
           INTO TABLE IT_LIKP
            FOR ALL ENTRIES IN it_vbfa_so2del
          WHERE VBELN EQ it_vbfa_so2del-VBELN.
    DELETE ADJACENT DUPLICATES FROM IT_LIKP.

*   Copy delivery header data to IT_LIKP2
    IT_LIKP2[] = IT_LIKP[].

*   If any delivery header data found
    IF NOT IT_LIKP[] IS INITIAL.

*     Get delivery header status information
      SELECT      *
             FROM VBUK
             INTO TABLE IT_VBUK2
              FOR ALL ENTRIES IN IT_LIKP
            WHERE VBELN EQ IT_LIKP-VBELN.

*     Get all delivery items
      SELECT vbeln posnr lfimg vrkme vgbel vgpos matnr
              FROM LIPS
              INTO TABLE xt_LIPS
               FOR ALL ENTRIES IN IT_LIKP
             WHERE VBELN EQ IT_LIKP-VBELN.

*     Copy delivery item data to IT_LIPS2
*      IT_LIPS2[] = IT_LIPS[].

*     Read delivery based billing docs into it_vbfa_so2inv
      SELECT      *
             FROM VBFA
             INTO TABLE it_vbfa_so2inv
              FOR ALL ENTRIES IN IT_LIKP
            WHERE ( VBELV   EQ IT_LIKP-VBELN )
              AND (    VBTYP_N EQ C_VBTYP_M
                     OR VBTYP_N EQ C_VBTYP_N
                     OR VBTYP_N EQ C_VBTYP_O )
              AND ( VBTYP_V EQ IT_LIKP-VBTYP ).
*              AND stufe EQ space.
    ENDIF.

  ENDIF.

* Read order related billing docs into it_vbfa_so2inv
  SELECT      *
         FROM VBFA
    APPENDING TABLE it_vbfa_so2inv
          FOR ALL ENTRIES IN IT_VBAK
        WHERE ( VBELV   EQ IT_VBAK-VBELN )
          AND (    VBTYP_N EQ C_VBTYP_M
                OR VBTYP_N EQ C_VBTYP_N
                OR VBTYP_N EQ C_VBTYP_O )
           AND ( VBTYP_V EQ IT_VBAK-VBTYP ).
*           AND stufe EQ space.

* If any billing documents found
  IF NOT it_vbfa_so2inv[] IS INITIAL.

*   Get billing plan details
    SELECT      *
           FROM FPLT
           INTO TABLE IT_FPLT
            FOR ALL ENTRIES IN it_vbfa_so2inv
          WHERE FPLNR EQ it_vbfa_so2inv-FPLNR
            AND FPLTR EQ it_vbfa_so2inv-FPLTR.

*   Get billing doc header details
    SELECT      *
           FROM VBRK
           INTO TABLE IT_VBRK
            FOR ALL ENTRIES IN it_vbfa_so2inv
          WHERE VBELN EQ it_vbfa_so2inv-VBELN
            AND FKART IN S_FKART
            AND FKDAT IN S_FKDAT
            AND ERDAT IN S_ERDAT2.
    DELETE ADJACENT DUPLICATES FROM IT_VBRK.

*   If billing doc headers found
    IF NOT IT_VBRK[] IS INITIAL.

*     Get planned costs of all invoices selected (cond type ZEK2)
*     Get actual costs of all invoices selected (cond type ZEA1)
      SELECT  knumv kposn kschl kwert
             FROM KONV
             INTO TABLE xt_konv_inv
              FOR ALL ENTRIES IN IT_VBRK
            WHERE KNUMV EQ IT_VBRK-KNUMV
              AND ( KSCHL EQ C_KSCHL_ZEK2        "KONV4
                    OR KSCHL EQ C_KSCHL_ZEA1 ).        "KONV5


*     Get details of the billing doc types selected
      SELECT      *
             FROM TVFK
             INTO TABLE IT_TVFK
              FOR ALL ENTRIES IN IT_VBRK
             WHERE FKART EQ IT_VBRK-FKART.
      DELETE ADJACENT DUPLICATES FROM IT_TVFK.

*     Depending on selected option, exclude downpayment billing items
      IF NOT CB_EDP IS INITIAL.
*       Get billing items, excluding downpayment lines
        SELECT      *
               FROM VBRP
               INTO TABLE IT_VBRP
                FOR ALL ENTRIES IN IT_VBRK
              WHERE VBELN EQ IT_VBRK-VBELN
                AND FAREG NE '4'
                AND FAREG NE '5'.
      ELSE.
*       Get all billing items
        SELECT      *
               FROM VBRP
               INTO TABLE IT_VBRP
                FOR ALL ENTRIES IN IT_VBRK
              WHERE VBELN EQ IT_VBRK-VBELN.
      ENDIF.
    ENDIF.

*   Get all related billing docs (ignoring select param's) for
*   calculating e.g. outstanding invoice quantity
    SELECT      *
           FROM VBRK
           INTO TABLE IT_VBRK2
            FOR ALL ENTRIES IN it_vbfa_so2inv
          WHERE VBELN EQ it_vbfa_so2inv-VBELN.
    DELETE ADJACENT DUPLICATES FROM IT_VBRK2.

*   If billing docs found
    IF NOT IT_VBRK2[] IS INITIAL.

*     Get all billing items
      SELECT      *
             FROM VBRP
             INTO TABLE IT_VBRP2
              FOR ALL ENTRIES IN IT_VBRK2
            WHERE VBELN EQ IT_VBRK2-VBELN.
    ENDIF.
  ENDIF.

* Read purchase orders into IT_VBFA3
  SELECT      *
         FROM VBFA
         INTO TABLE IT_VBFA3
          FOR ALL ENTRIES IN IT_VBAK
        WHERE VBELV   EQ IT_VBAK-VBELN
          AND VBTYP_N EQ C_VBTYP_V
          AND VBTYP_V EQ IT_VBAK-VBTYP.
*          AND stufe EQ space.

* If PO's found
  IF NOT IT_VBFA3[] IS INITIAL.

*   Get PO headers
    SELECT      *
           FROM EKKO
           INTO TABLE IT_EKKO
            FOR ALL ENTRIES IN IT_VBFA3
          WHERE EBELN EQ IT_VBFA3-VBELN
            AND EBELN IN S_EBELN.

*   If PO headers found
    IF NOT IT_EKKO[] IS INITIAL.

*     Get vendor information
      SELECT      *
             FROM LFA1
             INTO TABLE IT_LFA1
              FOR ALL ENTRIES IN IT_EKKO
            WHERE LIFNR EQ IT_EKKO-LIFNR.
      DELETE ADJACENT DUPLICATES FROM IT_LFA1 COMPARING LIFNR.

    ENDIF.

  ENDIF.

ENDFORM.                    " SELECT_DATA

*----------------------------------------------------------------------*
*   Form  PROCESS_DATA                                                 *
*----------------------------------------------------------------------*
FORM PROCESS_DATA.

  DATA:
*   Variables needed to suppress dupl qty's for recurring order items
    lt_vkorg TYPE TABLE OF xtyp_vkorg,
    lv_vkorg TYPE xtyp_vkorg,
    lv_lips TYPE xtyp_lips,

    LV_VBELN_ORD LIKE IT_DATA-VBELN_ORD,
    LV_POSNR_ORD LIKE IT_DATA-POSNR_ORD.

  FIELD-SYMBOLS:  <l_data> LIKE LINE OF it_data.


* Clear output line
  CLEAR STR_DATA.

* Start looping at selected order headers
  LOOP AT IT_VBAK.

*   Skip order header if the document type is not billing relevant
    READ TABLE IT_BILLRELEV WITH KEY AUART = IT_VBAK-AUART.
    IF SY-SUBRC NE 0.
      CLEAR IT_BILLRELEV.
      CONTINUE.
    ENDIF.

*   Skip order header if status not found, or different from allowed
*   values (S_GBSTK)
    READ TABLE IT_VBUK1 WITH KEY VBELN = IT_VBAK-VBELN.
    IF ( SY-SUBRC NE 0 ) OR
       ( SY-SUBRC EQ 0 AND NOT IT_VBUK1-GBSTK IN S_GBSTK ).
      CLEAR IT_VBUK1.
      CONTINUE.
    ENDIF.

*   Read sales office descr.
    READ TABLE IT_TVKBT WITH KEY VKBUR = IT_VBAK-VKBUR.
    IF SY-SUBRC NE 0.
      CLEAR IT_TVKBT.
    ENDIF.

*   Read sales group descr.
    READ TABLE IT_TVGRT WITH KEY VKGRP = IT_VBAK-VKGRP.
    IF SY-SUBRC NE 0.
      CLEAR IT_TVGRT.
    ENDIF.

*   Read higher level customer, and skip order header if higher level
*   cust differs from allowed values ( S_HKUNNR )
    READ TABLE IT_KNVH WITH KEY HITYP = C_HITYP_A
                                KUNNR = IT_VBAK-KUNNR
                                VKORG = IT_VBAK-VKORG
                                VTWEG = IT_VBAK-VTWEG
                                SPART = IT_VBAK-SPART.
    IF SY-SUBRC NE 0.
      CLEAR: IT_KNVH.
      CLEAR: IT_KNA1_HL.
    ELSE.
      IF IT_KNVH-HKUNNR IN S_HKUNNR.
        READ TABLE IT_KNA1_HL WITH KEY KUNNR = IT_KNVH-HKUNNR.
        IF SY-SUBRC NE 0.
          CLEAR IT_KNA1_HL.
        ENDIF.
      ELSE.
        CONTINUE.
      ENDIF.
    ENDIF.

*   Loop over the order's items
    LOOP AT IT_VBAP WHERE VBELN EQ IT_VBAK-VBELN.

*     Loop over the item's schedule lines with quantity
      LOOP AT IT_VBEP TRANSPORTING NO FIELDS
                    WHERE VBELN     EQ IT_VBAP-VBELN
                        AND POSNR     EQ IT_VBAP-POSNR
                        AND NOT BMENG IS INITIAL.
          EXIT.
      ENDLOOP.
*     If no schedule line with quantity found
      IF SY-SUBRC NE 0.
        CLEAR IT_VBEP.
*       Skip order item if user has provided a "Confirmed delivery date"
        IF NOT S_EDATU IS INITIAL.
          CONTINUE.
        ENDIF.
*     If such schedule line is found, use VBEP-AUFNR to find the equip
      ELSE.
        READ TABLE IT_AFIH WITH KEY AUFNR = IT_VBEP-AUFNR.
        IF SY-SUBRC EQ 0.
          READ TABLE IT_EQUI WITH KEY EQUNR = IT_AFIH-EQUNR BINARY SEARCH.
          IF SY-SUBRC NE 0.
            CLEAR IT_EQUI.
          ENDIF.
          READ TABLE IT_EQKT WITH KEY EQUNR = IT_AFIH-EQUNR.
          IF SY-SUBRC NE 0.
            CLEAR IT_EQKT.
          ENDIF.
        ELSE.
          CLEAR IT_AFIH.
          CLEAR IT_EQUI.
          CLEAR IT_EQKT.
        ENDIF.
      ENDIF.

*     Read order item status
      READ TABLE IT_VBUP WITH KEY VBELN = IT_VBAP-VBELN
                                  POSNR = IT_VBAP-POSNR.
      IF SY-SUBRC NE 0.
        CLEAR IT_VBUP.
      ENDIF.

*     Read item business data
      READ TABLE IT_VBKD WITH KEY VBELN = IT_VBAP-VBELN
                                  POSNR = IT_VBAP-POSNR.
*     If business data not found on item, read header's
      IF SY-SUBRC NE 0.
        READ TABLE IT_VBKD WITH KEY VBELN = IT_VBAP-VBELN
                                    POSNR = C_POSNR_INIT.
*       If not found on header either, skip order item
        IF SY-SUBRC NE 0.
          CLEAR IT_VBKD.
          CONTINUE.
        ENDIF.
      ENDIF.

*     Read material description for the order item
      READ TABLE IT_MAKT WITH KEY MATNR = IT_VBAP-MATNR
                                  SPRAS = SY-LANGU.
      IF SY-SUBRC NE 0.
        CLEAR IT_MAKT.
      ENDIF.

**     Read material group for the order item
*      READ TABLE IT_MARA WITH KEY MATNR = IT_VBAP-MATNR.
*      IF SY-SUBRC NE 0.
*        CLEAR IT_MARA.
*      ENDIF.


*     Read material sales data for the order item's material
      READ TABLE IT_MVKE WITH KEY MATNR = IT_VBAP-MATNR
                                  VKORG = IT_VBAK-VKORG
                                  VTWEG = IT_VBAK-VTWEG.
*     If not found, skip the order item
      IF SY-SUBRC NE 0.
        CLEAR IT_MVKE.
        CONTINUE.
      ENDIF.

*     Get costs from accounting?
      READ TABLE IT_ACCT WITH KEY PAOBJNR = IT_VBAP-PAOBJNR.
      IF SY-SUBRC NE 0.
        CLEAR IT_ACCT.
*       CONTINUE.       " Quotations don't have profitability segments,
*                         so don't make a problem of it. Also for other
*                         documents, don't consider this a reason not to
*                         show the item
      ELSE.
        READ TABLE IT_CE41000 WITH KEY PAOBJNR = IT_ACCT-CE4KEY.
        IF SY-SUBRC NE 0.
          CLEAR IT_CE41000.
          CONTINUE.
        ENDIF.
      ENDIF.

*     Read the list price
      READ TABLE xt_konv_ord INTO xv_konv1 WITH KEY KNUMV = IT_VBAK-KNUMV
                                   KPOSN = IT_VBAP-POSNR
                                   KSCHL = C_KSCHL_ZPRO.
      IF SY-SUBRC NE 0.
        CLEAR xv_konv1.
      ENDIF.

*     Read the planned cost
      READ TABLE xt_konv_ord INTO xv_konv2 WITH KEY KNUMV = IT_VBAK-KNUMV
                                   KPOSN = IT_VBAP-POSNR
                                   KSCHL = C_KSCHL_ZEK2.
      IF SY-SUBRC NE 0.
        CLEAR xv_konv2.
      ENDIF.

*     Read the actual cost
      READ TABLE xt_konv_ord INTO xv_konv3 WITH KEY KNUMV = IT_VBAK-KNUMV
                                   KPOSN = IT_VBAP-POSNR
                                   KSCHL = C_KSCHL_ZEA1.
      IF SY-SUBRC NE 0.
        CLEAR xv_konv3.
      ENDIF.

*     Read soldto for the item
      READ TABLE IT_VBPA1 WITH KEY VBELN = IT_VBAP-VBELN
                                   POSNR = IT_VBAP-POSNR
                                   PARVW = C_PARVW_AG.
*     If not found for item, read the header's
      IF SY-SUBRC NE 0.
        READ TABLE IT_VBPA1 WITH KEY VBELN = IT_VBAP-VBELN
                                     POSNR = C_POSNR_INIT
                                     PARVW = C_PARVW_AG.

*       If not found, skip the order item
        IF SY-SUBRC NE 0.
          CLEAR: IT_VBPA1.
          CLEAR: IT_KNA1_AG.
          CONTINUE.
        ENDIF.
      ENDIF.
*     Read the partner details
      READ TABLE IT_KNA1_AG WITH KEY KUNNR = IT_VBPA1-KUNNR.
*     If not found, skip the order item
      IF SY-SUBRC NE 0.
        CLEAR: IT_KNA1_AG.
        CONTINUE.
      ENDIF.

*     Read the shipto for the item
      READ TABLE IT_VBPA2 WITH KEY VBELN = IT_VBAP-VBELN
                                   POSNR = IT_VBAP-POSNR
                                   PARVW = C_PARVW_WE.
*     If not found for item, read the header's
      IF SY-SUBRC NE 0.
        READ TABLE IT_VBPA2 WITH KEY VBELN = IT_VBAP-VBELN
                                     POSNR = C_POSNR_INIT
                                     PARVW = C_PARVW_WE.
*       If not found, skip the order item
        IF SY-SUBRC NE 0.
          CLEAR: IT_VBPA2.
          CLEAR: IT_KNA1_WE.
          CONTINUE.
        ENDIF.
      ENDIF.
*     Read the partner details
      READ TABLE IT_KNA1_WE WITH KEY KUNNR = IT_VBPA2-KUNNR.
      IF SY-SUBRC NE 0.
        CLEAR: IT_KNA1_WE.
        CLEAR: IT_ADRC.
      ELSE.
*       Read partner's address
        READ TABLE IT_ADRC WITH KEY ADDRNUMBER = IT_KNA1_WE-ADRNR.
        IF SY-SUBRC NE 0.
          CLEAR: IT_ADRC.
        ENDIF.
      ENDIF.

*     Read vendor partner for item
      READ TABLE IT_VBPA3 WITH KEY VBELN = IT_VBAP-VBELN
                                   POSNR = IT_VBAP-POSNR
                                   PARVW = C_PARVW_RE.
*     If not found for item, read the header's
      IF SY-SUBRC NE 0.
        READ TABLE IT_VBPA3 WITH KEY VBELN = IT_VBAP-VBELN
                                     POSNR = C_POSNR_INIT
                                     PARVW = C_PARVW_RE.
*       If vendor found, skip the order item
        IF SY-SUBRC NE 0.
          CLEAR: IT_VBPA3.
          CONTINUE.
        ENDIF.
      ENDIF.
*     Read partner's details
      READ TABLE IT_KNA1_RE WITH KEY KUNNR = IT_VBPA3-KUNNR.
      IF SY-SUBRC NE 0.
        CLEAR: IT_KNA1_RE.
      ENDIF.

*     Get salesreps
      PERFORM GET_SALESREP USING C_PARVW_VE
                           CHANGING X_PARVW_VE
                                    X_PERNR_VE
                                    X_ENAME_VE.
      PERFORM GET_SALESREP USING C_PARVW_ZX
                           CHANGING X_PARVW_ZX
                                    X_PERNR_ZX
                                    X_ENAME_ZX.
      PERFORM GET_SALESREP USING C_PARVW_ZY
                           CHANGING X_PARVW_ZY
                                    X_PERNR_ZY
                                    X_ENAME_ZY.
      PERFORM GET_SALESREP USING C_PARVW_ZV
                           CHANGING X_PARVW_ZV
                                    X_PERNR_ZV
                                    X_ENAME_ZV.
      PERFORM GET_SALESREP USING C_PARVW_ZW
                           CHANGING X_PARVW_ZW
                                    X_PERNR_ZW
                                    X_ENAME_ZW.

      IF NOT X_PERNR_VE IN S_PERNR AND
         NOT X_PERNR_ZX IN S_PERNR AND
         NOT X_PERNR_ZY IN S_PERNR AND
         NOT X_PERNR_ZV IN S_PERNR AND
         NOT X_PERNR_ZW IN S_PERNR.
        CONTINUE.
      ENDIF.

*     Read purchase docs from document flow
      READ TABLE IT_VBFA3 WITH KEY VBELV   = IT_VBAK-VBELN
                                   POSNV   = IT_VBAP-POSNR
                                   VBTYP_N = C_VBTYP_V
                                   VBTYP_V = IT_VBAK-VBTYP.
*     If not found
      IF SY-SUBRC NE 0.
        CLEAR IT_VBFA3.
        CLEAR IT_EKKO.
        CLEAR IT_LFA1.
*       If PO parameter filled on selection screen, skip order item
        IF NOT S_EBELN[]      IS INITIAL AND
           NOT IT_VBFA3-VBELN IN S_EBELN.
          CONTINUE.
        ENDIF.
      ELSE.
*       If PO number found, read details
        READ TABLE IT_EKKO WITH KEY EBELN = IT_VBFA3-VBELN.
        IF SY-SUBRC EQ 0.
          READ TABLE IT_LFA1 WITH KEY LIFNR = IT_EKKO-LIFNR.
          IF SY-SUBRC NE 0.
            CLEAR IT_LFA1.
          ENDIF.
        ELSE.
          CLEAR IT_EKKO.
          CLEAR IT_LFA1.
          CONTINUE.
        ENDIF.
      ENDIF.

*------ S T A R T    D E L I V E R Y ---------------------------------------------
*     Start looping over related delivery items
      LOOP AT it_vbfa_so2del WHERE VBELV   EQ IT_VBAP-VBELN
                         AND POSNV   EQ IT_VBAP-POSNR
                         AND (    VBTYP_N EQ C_VBTYP_J
                               OR VBTYP_N EQ C_VBTYP_T )
                         AND VBTYP_V EQ IT_VBAK-VBTYP.
*       Read delivery header
        READ TABLE IT_LIKP WITH KEY VBELN = it_vbfa_so2del-VBELN.
        IF SY-SUBRC NE 0.
          CLEAR IT_LIKP.
        ENDIF.
*       Read delivery header status
        READ TABLE IT_VBUK2 WITH KEY VBELN = it_vbfa_so2del-VBELN.
        IF SY-SUBRC NE 0.
          CLEAR IT_VBUK2.
        ENDIF.
*       If flag "Only sales orders del'd" is set, skip if wrong status
        IF NOT CB_SEL IS INITIAL.
          CHECK IT_VBUK2-WBSTK EQ C_WBSTK_C.
        ENDIF.

*         Start looping over the related billing docs
*        LOOP AT it_vbfa_so2inv WHERE ( VBELV   EQ IT_VBAP-VBELN )
*                           AND ( POSNV   EQ IT_VBAP-POSNR )
*                           AND ( VBTYP_N EQ C_VBTYP_M
*                              OR VBTYP_N EQ C_VBTYP_N
*                              OR VBTYP_N EQ C_VBTYP_O )
*                           AND ( VBTYP_V EQ IT_VBAK-VBTYP ).

* Read delivery
         READ TABLE xt_lips INTO lv_lips
                            WITH KEY vbeln = it_vbfa_so2del-vbeln    " lips-vgbel = vbap-vbeln
                                     posnr = it_vbfa_so2del-posnn.

*         If user selected "Select sales orders not invoiced", skip
*         this billing item (will not be appended)
        IF RB_SEL2 IS INITIAL AND sy-subrc = 0.
*         Read billing document header

* Let's try to find the matching billing document item!
* I'd suggest based on Material number
            LOOP AT it_vbfa_so2inv WHERE vbelv = it_vbap-vbeln.
                READ TABLE it_vbrp WITH KEY vbeln = it_vbfa_so2inv-vbeln
                                            posnr = it_vbfa_so2inv-posnn.
*                IF it_vbrp-matnr = lv_lips-matnr.                         "20080716
                 if sy-subrc = 0.                                          "20080716
                  exit.
                ELSE.
                  clear it_vbrp.
                ENDIF.
            ENDLOOP.

            READ TABLE IT_VBRK WITH KEY VBELN = IT_VBRP-vbeln.
*             Skip VBFA2 line if not found
            IF SY-SUBRC NE 0.
               CLEAR IT_VBRK.
            ENDIF.

*           Read the invoice planned cost
            READ TABLE xt_konv_inv INTO xv_konv4 WITH KEY KNUMV = IT_VBRK-KNUMV
                                                 KPOSN = IT_VBRP-POSNR
                                                 KSCHL = C_KSCHL_ZEK2.
            IF SY-SUBRC NE 0.
              CLEAR xv_konv4.
            ENDIF.

*           Read the invoice actual cost
            READ TABLE xt_konv_inv INTO xv_konv5 WITH KEY KNUMV = IT_VBRK-KNUMV
                                                          KPOSN = IT_VBRP-POSNR
                                                          KSCHL = C_KSCHL_ZEA1
                                         .
            IF SY-SUBRC NE 0.
              CLEAR xv_konv5.
            ENDIF.

            PERFORM GET_ORDERSTATUS_DATA.
            PERFORM GET_ORDER_DATA.
            PERFORM GET_ORDER_BUSINESS_DATA.
            PERFORM GET_MATERIAL_DATA.
            PERFORM GET_MATERIAL_GROUP.
            PERFORM GET_ATLASCOPCO_DATA.
            PERFORM GET_CONDITIONS_DATA.
            PERFORM GET_SOLDTO_DATA.
            PERFORM GET_SHIPTO_DATA.
            PERFORM GET_BILLTO_DATA.
            PERFORM GET_HLEVEL_CUST_DATA.
            PERFORM GET_PURCHASE_DATA.
            PERFORM GET_DELIVERYSTATUS_DATA.
            PERFORM GET_DELIVERY_DATA USING lv_lips.
            PERFORM GET_INVOICE_DATA.
            PERFORM GET_SALES_REP_DATA.
            PERFORM GET_BILLING_PLAN_DATA .
            PERFORM CALCULATE_DATA USING C_STATUS_INV1.
            PERFORM SAVE_ALL_DATA.
            PERFORM RESET_DATA.
*          ENDLOOP.

        ENDIF.

*       If no billing doc's found, and user selected either
*       "Sales orders entered" or "Sales orders not invoiced"
*       then still save the item with delivery data
        IF SY-SUBRC    NE 0       AND
           ( NOT RB_SEL1 IS INITIAL OR
             NOT RB_SEL2 IS INITIAL ).
          PERFORM GET_ORDERSTATUS_DATA.
          PERFORM GET_ORDER_DATA.
          PERFORM GET_ORDER_BUSINESS_DATA.
          PERFORM GET_MATERIAL_DATA.
          PERFORM GET_ATLASCOPCO_DATA.
          PERFORM GET_CONDITIONS_DATA.
          PERFORM GET_SOLDTO_DATA.
          PERFORM GET_SHIPTO_DATA.
          PERFORM GET_BILLTO_DATA.
          PERFORM GET_HLEVEL_CUST_DATA.
          PERFORM GET_PURCHASE_DATA.
          PERFORM GET_DELIVERYSTATUS_DATA.
          PERFORM GET_DELIVERY_DATA USING lv_lips.
          PERFORM GET_SALES_REP_DATA.
          PERFORM GET_BILLING_PLAN_DATA .
          PERFORM CALCULATE_DATA USING C_STATUS_DEL.
          PERFORM SAVE_ALL_DATA.
          PERFORM RESET_DATA.
        ENDIF.

      ENDLOOP.

*     If no devlivery items found
      IF SY-SUBRC NE 0.
*       User selected either
*         - "sales orders entered"      and not "Only delivered"
*         - "sales orders not invoiced" and not "Only delivered"
*         - "sales orders invoiced"
        IF ( NOT RB_SEL1 IS INITIAL AND CB_SEL IS INITIAL ) OR
           ( NOT RB_SEL2 IS INITIAL AND CB_SEL IS INITIAL ) OR
           ( NOT RB_SEL3 IS INITIAL ).
*         If billing relevance is delivery related
          IF IT_BILLRELEV-ZFKREL EQ C_ZFKREL_C.
*           At this point, there are no deliveries and the billing is
*           delivery-related, so no invoices will be found. The orders
*           are not invoiced and all relevant data must be displayed !
*           If user didn't select "sales orders invoiced"
            IF RB_SEL3 IS INITIAL.

              PERFORM GET_ORDERSTATUS_DATA.
              PERFORM GET_ORDER_DATA.
              PERFORM GET_ORDER_BUSINESS_DATA.
              PERFORM GET_MATERIAL_DATA.
              PERFORM GET_ATLASCOPCO_DATA.
              PERFORM GET_CONDITIONS_DATA.
              PERFORM GET_SOLDTO_DATA.
              PERFORM GET_SHIPTO_DATA.
              PERFORM GET_BILLTO_DATA.
              PERFORM GET_HLEVEL_CUST_DATA.
              PERFORM GET_PURCHASE_DATA.
              PERFORM GET_SALES_REP_DATA.
              PERFORM CALCULATE_DATA USING C_STATUS_ORD.
              PERFORM SAVE_ALL_DATA.
              PERFORM RESET_DATA.
            ENDIF.
          ELSE.

* ----  S T A R T    B I L L I N G  ----------------------------

*           No deliveries, but billing data can be possibly found
*           straight from the order
*           Start looping at billing items from docflow (order related)
            LOOP AT it_vbfa_so2inv WHERE ( VBELV   EQ IT_VBAP-VBELN )
                               AND ( POSNV   EQ IT_VBAP-POSNR )
                               AND ( VBTYP_N EQ C_VBTYP_M
                                  OR VBTYP_N EQ C_VBTYP_N
                                  OR VBTYP_N EQ C_VBTYP_O )
                               AND ( VBTYP_V EQ IT_VBAK-VBTYP ).
*             If user has chosen "sales orders not invoiced", skip line
              IF NOT RB_SEL2 IS INITIAL.
                CONTINUE.
              ENDIF.

*             Read billing doc header
              READ TABLE IT_VBRK WITH KEY VBELN = it_vbfa_so2inv-VBELN.
              IF SY-SUBRC NE 0.
                CLEAR IT_VBRK.
                CONTINUE.
              ENDIF.
*             Start looping at billing items
*              LOOP AT IT_VBRP WHERE VBELN EQ IT_VBRK-VBELN
*                                AND POSNR EQ it_vbfa_so2inv-POSNN.

              READ TABLE it_vbrp WITH KEY VBELN = IT_VBRK-VBELN
                                          POSNR = it_vbfa_so2inv-POSNN.
              IF sy-subrc = 0.


*               Read the invoice planned cost
                READ TABLE xt_konv_inv INTO xv_konv4 WITH KEY KNUMV = IT_VBRK-KNUMV
                                             KPOSN = IT_VBRP-POSNR
                                             KSCHL = C_KSCHL_ZEK2.
                IF SY-SUBRC NE 0.
                  CLEAR xv_konv4.
                ENDIF.

*               Read the invoice actual cost
                READ TABLE xt_konv_inv INTO xv_konv5 WITH KEY KNUMV = IT_VBRK-KNUMV
                                             KPOSN = IT_VBRP-POSNR
                                             KSCHL = C_KSCHL_ZEA1.
                IF SY-SUBRC NE 0.
                  CLEAR xv_konv5.
                ENDIF.

                PERFORM GET_ORDERSTATUS_DATA.
                PERFORM GET_ORDER_DATA.
                PERFORM GET_ORDER_BUSINESS_DATA.
                PERFORM GET_MATERIAL_DATA.
                PERFORM GET_ATLASCOPCO_DATA.
                PERFORM GET_CONDITIONS_DATA.
                PERFORM GET_SOLDTO_DATA.
                PERFORM GET_SHIPTO_DATA.
                PERFORM GET_BILLTO_DATA.
                PERFORM GET_HLEVEL_CUST_DATA.
                PERFORM GET_PURCHASE_DATA.
                PERFORM GET_INVOICE_DATA.
                PERFORM GET_SALES_REP_DATA.
                PERFORM GET_BILLING_PLAN_DATA.
                PERFORM CALCULATE_DATA USING C_STATUS_INV2.
                PERFORM SAVE_ALL_DATA.
                PERFORM RESET_DATA.

                CLEAR xv_konv4.
                CLEAR xv_konv5.

*              ENDLOOP.
               ENDIF.

            ENDLOOP.
* ----  E N D    B I L L I N G  ----------------------------



*           If no billing data found (order related) and user didn't
*           select "sales orders invoiced", still save data
            IF     SY-SUBRC   NE 0       AND
                   RB_SEL3    IS INITIAL.
              PERFORM GET_ORDERSTATUS_DATA.
              PERFORM GET_ORDER_DATA.
              PERFORM GET_ORDER_BUSINESS_DATA.
              PERFORM GET_MATERIAL_DATA.
              PERFORM GET_ATLASCOPCO_DATA.
              PERFORM GET_CONDITIONS_DATA.
              PERFORM GET_SOLDTO_DATA.
              PERFORM GET_SHIPTO_DATA.
              PERFORM GET_BILLTO_DATA.
              PERFORM GET_HLEVEL_CUST_DATA.
              PERFORM GET_PURCHASE_DATA.
              PERFORM GET_SALES_REP_DATA.
              PERFORM CALCULATE_DATA USING C_STATUS_ORD.
              PERFORM SAVE_ALL_DATA.
              PERFORM RESET_DATA.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
*------ E N D    D E L I V E R Y ---------------------------------------------
    ENDLOOP.      " AT IT_VBAP

*   It seems that orders without items are possible. To be sure that
*   we are dealing with such orders, all selections concerning items
*   must be initial
    IF SY-SUBRC   NE 0       AND
       RB_SEL3    IS INITIAL AND
       S_POSNR[]  IS INITIAL AND
       S_PRCTR[]  IS INITIAL AND
       S_WW002[]  IS INITIAL AND
       S_WW006[]  IS INITIAL AND
       S_WW007[]  IS INITIAL AND
       S_WERKS[]  IS INITIAL AND
       S_MATNR[]  IS INITIAL AND
*      S_KUNWE[]  IS INITIAL AND
       S_PERNR[]  IS INITIAL AND
       S_BRAN1[]  IS INITIAL AND
       S_PSTYV[]  IS INITIAL AND
       S_MTPOS[]  IS INITIAL.

*     Some data must be selected without item and therefore selections
*     must be done again on header level at this point
      READ TABLE IT_VBKD WITH KEY VBELN = IT_VBAP-VBELN
                                  POSNR = C_POSNR_INIT.
      IF SY-SUBRC NE 0.
        CLEAR IT_VBKD.
        CONTINUE.
      ENDIF.

      READ TABLE IT_VBPA1 WITH KEY VBELN = IT_VBAK-VBELN
                                   POSNR = C_POSNR_INIT
                                   PARVW = C_PARVW_AG.
      IF SY-SUBRC NE 0.
        CLEAR: IT_VBPA1.
        CLEAR: IT_KNA1_AG.
      ELSE.
        READ TABLE IT_KNA1_AG WITH KEY KUNNR = IT_VBPA1-KUNNR.
        IF SY-SUBRC NE 0.
          CLEAR: IT_KNA1_AG.
          CONTINUE.
        ENDIF.
      ENDIF.

      READ TABLE IT_VBPA2 WITH KEY VBELN = IT_VBAP-VBELN
                                   POSNR = C_POSNR_INIT
                                   PARVW = C_PARVW_WE.
      IF SY-SUBRC NE 0.
        CLEAR: IT_VBPA2.
        CLEAR: IT_KNA1_WE.
        CLEAR: IT_ADRC.
        CONTINUE.
      ELSE.
        READ TABLE IT_KNA1_WE WITH KEY KUNNR = IT_VBPA2-KUNNR.
        IF SY-SUBRC NE 0.
          CLEAR: IT_KNA1_WE.
          CLEAR: IT_ADRC.
        ELSE.
          READ TABLE IT_ADRC WITH KEY ADDRNUMBER = IT_KNA1_WE-ADRNR.
          IF SY-SUBRC NE 0.
            CLEAR IT_ADRC.
          ENDIF.
        ENDIF.
      ENDIF.

      READ TABLE IT_VBPA3 WITH KEY VBELN = IT_VBAK-VBELN
                                   POSNR = C_POSNR_INIT
                                   PARVW = C_PARVW_RE.
      IF SY-SUBRC NE 0.
        CLEAR: IT_VBPA3.
        CLEAR: IT_KNA1_RE.
        CONTINUE.
      ELSE.
        READ TABLE IT_KNA1_RE WITH KEY KUNNR = IT_VBPA3-KUNNR.
        IF SY-SUBRC NE 0.
          CLEAR: IT_KNA1_RE.
        ENDIF.
      ENDIF.

      PERFORM GET_ORDERSTATUS_DATA.
      PERFORM GET_ORDER_DATA.
      PERFORM GET_ORDER_BUSINESS_DATA.
      PERFORM GET_SOLDTO_DATA.
      PERFORM GET_SHIPTO_DATA.
      PERFORM GET_BILLTO_DATA.
      PERFORM GET_HLEVEL_CUST_DATA.
      PERFORM SAVE_ALL_DATA.
      PERFORM RESET_DATA.
    ENDIF.
  ENDLOOP.

* If suppress duplicate order lines is checked
  IF CB_SPPRD NE SPACE.

*   Sort table and start looping
    SORT IT_DATA BY VBELN_ORD POSNR_ORD.
    LOOP AT IT_DATA.
*     If new line is covering the same order item
      IF    IT_DATA-VBELN_ORD EQ LV_VBELN_ORD AND
            IT_DATA-POSNR_ORD EQ LV_POSNR_ORD.
*       Clear the order quantity and order value
        CLEAR:
          IT_DATA-NETWR_ORD,
          IT_DATA-KWMENG.
      ELSE.
        LV_VBELN_ORD = IT_DATA-VBELN_ORD.
        LV_POSNR_ORD = IT_DATA-POSNR_ORD.
      ENDIF.
*     Calculate order on hand (order quant - invoice quant)
      IT_DATA-KWMENG_OH = IT_DATA-KWMENG    - IT_DATA-FKIMG.
      IT_DATA-KZWI3_OH  = IT_DATA-NETWR_ORD - IT_DATA-NETWR_INV.
      MODIFY IT_DATA.

    ENDLOOP.

  ENDIF.

* FIX CURRENCIES
* get sales unit's company currency
  SELECT tvko~vkorg t001~waers
    INTO TABLE lt_vkorg
    FROM TVKO
      JOIN t001 ON t001~bukrs = tvko~bukrs
    FOR ALL ENTRIES IN it_data
    WHERE tvko~vkorg = it_data-vkorg.

  check sy-subrc = 0.
  SORT lt_vkorg BY vkorg.

  LOOP AT it_data ASSIGNING <l_data>.
    READ TABLE lt_vkorg INTO lv_vkorg
          WITH key vkorg = <l_data>-vkorg BINARY SEARCH.
    check sy-subrc = 0.
    IF <l_data>-WAERK_INV = lv_vkorg-waers.
      <l_data>-NETWR_C_INV = <l_data>-NETWR_INV.
    ELSE.

* SET net unit price in company currency
      <l_data>-waerk_c_inv = lv_vkorg-waers.
      CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
        EXPORTING
          DATE                    = <l_data>-FKDAT
          FOREIGN_AMOUNT          = <l_data>-NETWR_INV
          FOREIGN_CURRENCY        = <l_data>-WAERK_INV
          LOCAL_CURRENCY          = <l_data>-waerk_c_inv
         IMPORTING
          LOCAL_AMOUNT            = <l_data>-NETWR_C_INV
       EXCEPTIONS
         NO_RATE_FOUND           = 1
         OVERFLOW                = 2
         NO_FACTORS_FOUND        = 3
         NO_SPREAD_FOUND         = 4
         DERIVED_2_TIMES         = 5
         OTHERS                  = 6
                .
    ENDIF.


  ENDLOOP.


ENDFORM.                    " PROCESS_DATA


*----------------------------------------------------------------------*
*   Form  DISPLAY_DATA                                                 *
*----------------------------------------------------------------------*
FORM DISPLAY_DATA.

  PERFORM FILL_FIELD_CATALOG.
  PERFORM CHANGE_CATALOG.
  PERFORM ALV_OUTPUT.

ENDFORM.                    " DISPLAY_DATA

************************************************************************
* SUBROUTINES  LEVEL 02                                                *
************************************************************************

*----------------------------------------------------------------------*
*   Form  GET_SALESREP                                                 *
*----------------------------------------------------------------------*
FORM GET_SALESREP USING PARTNERFUNCTION
                  CHANGING PFUNCTION PNUMBER PNAME.

  CLEAR: PFUNCTION.
  CLEAR: PNUMBER.
  CLEAR: PNAME.

  CLEAR: IT_VBPA4.
  READ TABLE IT_VBPA4 WITH KEY VBELN = IT_VBAP-VBELN
                               POSNR = IT_VBAP-POSNR
                               PARVW = PARTNERFUNCTION.
  IF SY-SUBRC NE 0.
    READ TABLE IT_VBPA4 WITH KEY VBELN = IT_VBAP-VBELN
                                 POSNR = C_POSNR_INIT
                                 PARVW = PARTNERFUNCTION.
    IF SY-SUBRC NE 0.
      CLEAR IT_VBPA4.
    ENDIF.
  ENDIF.
  PFUNCTION = PARTNERFUNCTION.
  PNUMBER   = IT_VBPA4-PERNR.

  CALL FUNCTION 'CATS_GET_EMPLOYEE_NAME'
    EXPORTING
      PERNR           = PNUMBER
*     date            = sy-datum
    IMPORTING
      NAME            = PNAME
    EXCEPTIONS
      PERNR_NOT_FOUND = 1
      OTHERS          = 2.
  IF SY-SUBRC <> 0.
    CLEAR PNAME.
  ENDIF.

ENDFORM.                    " GET_SALESREP


*----------------------------------------------------------------------*
*   Form  GET_ORDER_DATA                                               *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM GET_ORDER_DATA.

  str_data-VKORG       = IT_VBAK-VKORG.
  str_data-VTWEG       = IT_VBAK-VTWEG.
  str_data-SPART       = IT_VBAK-SPART.
  str_data-VKBUR       = IT_VBAK-VKBUR.
  str_data-VKBUR_TXT   = IT_TVKBT-BEZEI.
  str_data-VKGRP       = IT_VBAK-VKGRP.
  str_data-VKGRP_TXT   = IT_TVGRT-BEZEI.
  str_data-VDATU       = IT_VBAK-VDATU.
  str_data-EDATU       = IT_VBEP-EDATU.
  str_data-ERDAT_ORD   = IT_VBAK-ERDAT.
  str_data-ERNAM       = IT_VBAK-ERNAM.
  str_data-AUART       = IT_VBAK-AUART.
  str_data-BNDDT       = IT_VBAK-BNDDT.
  str_data-WERKS       = IT_VBAP-WERKS.
  str_data-MATNR       = IT_VBAP-MATNR.
  str_data-MATKL       = IT_VBAP-MATKL.
  str_data-PSTYV       = IT_VBAP-PSTYV.
  str_data-FAKSK       = IT_VBAK-FAKSK.
  str_data-LIFSK       = IT_VBAK-LIFSK.
  str_data-VBELN_ORD   = IT_VBAK-VBELN.
  str_data-POSNR_ORD   = IT_VBAP-POSNR.
  str_data-SPARTD      = IT_VBAP-SPART.
  str_data-NETWR_ORD   = IT_VBAP-NETWR.
  str_data-WAERK_ORD   = IT_VBAP-WAERK.
  str_data-ZUNITPRCURR = IT_VBAP-WAERK.
  str_data-EQUNR       = IT_AFIH-EQUNR.
  str_data-SERNR       = IT_EQUI-SERNR.
  str_data-EQKTX       = IT_EQKT-EQKTX.
* Modification part 1 for issue 1952 point 8
  IF IT_VBAK-VBTYP = C_VBTYP_K OR IT_VBAK-VBTYP = C_VBTYP_L.
    str_data-KWMENG      = IT_VBAP-ZMENG.
  ELSE.
    str_data-KWMENG      = IT_VBAP-KWMENG.
  ENDIF.
* End Mod part 1 for issue 1952 point 8
  str_data-VRKME_ORD   = IT_VBAP-VRKME.

ENDFORM.                    " GET_ORDER_DATA


*----------------------------------------------------------------------*
*   Form  GET_ORDERSTATUS_DATA                                         *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM GET_ORDERSTATUS_DATA.

*-- get status text of LFSTA
  PERFORM GET_STATUS USING 'VBUP' 'LFSTA' IT_VBUP-LFSTA
                     CHANGING str_data-LFSTA_TXT.

*-- get status text of FKSAK
  PERFORM GET_STATUS USING 'VBUK' 'FKSAK' IT_VBUK1-FKSAK
                     CHANGING str_data-FKSAK_TXT.

*-- get status text of GBSTK
  PERFORM GET_STATUS USING 'VBUK' 'GBSTK' IT_VBUK1-GBSTK
                     CHANGING str_data-GBSTK_TXT.

*-- get status text of GBSTA
  PERFORM GET_STATUS USING 'VBUP' 'GBSTA' IT_VBUP-GBSTA
                     CHANGING str_data-GBSTA_TXT.

ENDFORM.                    " GET_ORDERSTATUS_DATA


*----------------------------------------------------------------------*
*   Form  GET_ORDER_BUSINESS_DATA                                      *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM GET_ORDER_BUSINESS_DATA.

  str_data-BSTKD = IT_VBKD-BSTKD.  " TVO insert
  str_data-BZIRK = IT_VBKD-BZIRK.
** Begin INS IVB 05/07/2007
  str_data-BEMOT = IT_VBKD-BEMOT.
** End INS IVB 05/07/2007


ENDFORM.                    "get_order_business_data


*----------------------------------------------------------------------*
*   Form  GET_MATERIAL_DATA                                            *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM GET_MATERIAL_DATA.

  str_data-MAKTX = IT_MAKT-MAKTX.
  str_data-MTPOS = IT_MVKE-MTPOS.

ENDFORM.                    " GET_MATERIAL_DATA

*----------------------------------------------------------------------*
*   Form  GET_MATERIAL_GROUP                                            *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM GET_MATERIAL_GROUP.

  str_data-MATKL = IT_VBAP-MATKL.

ENDFORM.                    " GET_MATERIAL_DATA



*----------------------------------------------------------------------*
*   Form  GET_ATLASCOPCO_DATA                                          *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM GET_ATLASCOPCO_DATA.

* str_data-prctr = it_acct-prctr.
  str_data-PRCTR = IT_CE41000-PRCTR.
* str_data-ww002 = it_acct-ww002.
  str_data-WW002 = IT_CE41000-WW002.
* str_data-ww006 = it_acct-ww006.
  str_data-WW006 = IT_CE41000-WW006.
* str_data-ww007 = it_acct-ww007.
  str_data-WW007 = IT_CE41000-WW007.

ENDFORM.                    " GET_ATLASCOPCO_DATA


*----------------------------------------------------------------------*
*   Form  GET_CONDITIONS_DATA                                          *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM GET_CONDITIONS_DATA.

  str_data-KWERT_ZPRO   = xv_konv1-KWERT.
  str_data-WAERK_ZPRO   = IT_VBAP-WAERK.
  str_data-KWERT_ZEK2   = xv_konv2-KWERT.
  str_data-WAERK_ZEK2   = IT_VBAP-WAERK.
  str_data-KWERT_ZEA1   = xv_konv3-KWERT.
  str_data-KWERT_ZEK2_I = xv_konv4-KWERT.
  str_data-KWERT_ZEA1_I = xv_konv5-KWERT.

ENDFORM.                    " GET_CONDITIONS_DATA


*----------------------------------------------------------------------*
*   Form  GET_SOLDTO_DATA                                              *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM GET_SOLDTO_DATA.

  str_data-KUNAG    = IT_VBPA1-KUNNR.
  str_data-NAME1_AG = IT_KNA1_AG-NAME1.
  str_data-BRAN1    = IT_KNA1_AG-BRAN1.

  IF NOT IT_VBPA1-ADRNR IS INITIAL.
    IF IT_ADRC-ADDRNUMBER NE IT_VBPA1-ADRNR.
      READ TABLE IT_ADRC WITH KEY ADDRNUMBER = IT_VBPA1-ADRNR.
      IF SY-SUBRC NE 0.
        CLEAR IT_ADRC.
      ENDIF.
    ENDIF.
    IF IT_ADRC-ADDRNUMBER EQ IT_VBPA1-ADRNR.
*      CONCATENATE it_adrc-street
*                  it_adrc-house_num1
*                  it_adrc-post_code1
*                  it_adrc-city1
*                  INTO str_data-addr_ag SEPARATED BY space.

*Check that the region of the sold-to is included in the selection-screen SO_REGION

      str_data-REGION_AG = IT_ADRC-REGION.
      str_data-COUNTRY_AG = IT_ADRC-COUNTRY.
*Get the region description
      READ TABLE IT_T005U WITH KEY SPRAS = SY-LANGU
                                   LAND1 = IT_ADRC-COUNTRY
                                   BLAND = IT_ADRC-REGION.
      IF SY-SUBRC EQ 0.
        str_data-REGION_AG_DESCR = IT_T005U-BEZEI.
      ENDIF.

      str_data-CITY1_AG  = IT_ADRC-CITY1.
      str_data-POST_CODE1_AG = IT_ADRC-POST_CODE1.

    ENDIF.
  ENDIF.

ENDFORM.                    " GET_SOLDTO_DATA


*----------------------------------------------------------------------*
*   Form  GET_SHIPTO_DATA                                              *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM GET_SHIPTO_DATA.

  str_data-KUNWE    = IT_VBPA2-KUNNR.
  str_data-NAME1_WE = IT_KNA1_WE-NAME1.

  IF NOT IT_VBPA2-ADRNR IS INITIAL.
    IF IT_ADRC-ADDRNUMBER NE IT_VBPA2-ADRNR.
      READ TABLE IT_ADRC WITH KEY ADDRNUMBER = IT_VBPA2-ADRNR.
      IF SY-SUBRC NE 0.
        CLEAR IT_ADRC.
      ENDIF.
    ENDIF.
    IF IT_ADRC-ADDRNUMBER EQ IT_VBPA2-ADRNR.
*      CONCATENATE it_adrc-street
*                  it_adrc-house_num1
*                  it_adrc-post_code1
*                  it_adrc-city1
*                  INTO str_data-addr_we SEPARATED BY space.
      str_data-REGION_WE = IT_ADRC-REGION.
      str_data-COUNTRY_WE = IT_ADRC-COUNTRY.
*Get the region description
      READ TABLE IT_T005U WITH KEY SPRAS = SY-LANGU
                                   LAND1 = IT_ADRC-COUNTRY
                                   BLAND = IT_ADRC-REGION.
      IF SY-SUBRC EQ 0.
        str_data-REGION_WE_DESCR = IT_T005U-BEZEI.
      ENDIF.


      str_data-CITY1_WE  = IT_ADRC-CITY1.
      str_data-POST_CODE1_WE = IT_ADRC-POST_CODE1.

    ENDIF.
  ENDIF.

ENDFORM.                    " GET_SHIPTO_DATA


*----------------------------------------------------------------------*
*   Form  GET_BILLTO_DATA                                              *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM GET_BILLTO_DATA.

  str_data-KUNRE    = IT_VBPA3-KUNNR.
  str_data-NAME1_RE = IT_KNA1_RE-NAME1.

ENDFORM.                    " GET_BILLTO_DATA


*----------------------------------------------------------------------*
*   Form  GET_HLEVEL_CUST_DATA                                         *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM GET_HLEVEL_CUST_DATA.

  str_data-HKUNNR   = IT_KNVH-HKUNNR.
  str_data-NAME1_HL = IT_KNA1_HL-NAME1.

ENDFORM.                    " GET_HLEVEL_CUST_DATA


*----------------------------------------------------------------------*
*   Form  GET_PURCHASE_DATA                                            *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM GET_PURCHASE_DATA.

  str_data-EBELN      = IT_EKKO-EBELN.
  str_data-LIFNR      = IT_EKKO-LIFNR.
  str_data-NAME1_VEND = IT_LFA1-NAME1.

ENDFORM.                    " GET_PURCHASE_DATA


*----------------------------------------------------------------------*
*   Form  GET_DELIVERY_DATA                                            *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM GET_DELIVERY_DATA using p_lips type xtyp_lips.

  str_data-VBELN_DEL  = IT_LIKP-VBELN.
  str_data-POSNR_DEL  = p_LIPS-POSNR.
  IF     IT_VBAK-VBTYP EQ C_VBTYP_K
      OR IT_VBAK-VBTYP EQ C_VBTYP_L.
    str_data-LFIMG      = 0.
  ELSE.
    str_data-LFIMG      = p_LIPS-LFIMG.
  ENDIF.
  str_data-VRKME_DEL  = p_LIPS-VRKME.
  str_data-ZVRKME_DEL = p_LIPS-VRKME.
  str_data-WADAT_IST  = IT_LIKP-WADAT_IST.

ENDFORM.                    " GET_DELIVERY_DATA


*----------------------------------------------------------------------*
*   Form  GET_DELIVERYSTATUS_DATA                                      *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM GET_DELIVERYSTATUS_DATA.

*-- get status text of WBSTK
  PERFORM GET_STATUS USING 'VBUK' 'WBSTK' IT_VBUK2-WBSTK
                     CHANGING str_data-WBSTK_TXT.

ENDFORM.                    " GET_DELIVERYSTATUS_DATA


*----------------------------------------------------------------------*
*   Form  GET_INVOICE_DATA                                             *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM GET_INVOICE_DATA.

  str_data-FKART      = IT_VBRK-FKART.
  str_data-VBELN_INV  = IT_VBRK-VBELN.
  str_data-POSNR_INV  = IT_VBRP-POSNR.
  IF     IT_VBAK-VBTYP EQ C_VBTYP_K
      OR IT_VBAK-VBTYP EQ C_VBTYP_L.
    str_data-FKIMG      = 0.
  ELSE.
    str_data-FKIMG      = IT_VBRP-FKIMG.
  ENDIF.
  str_data-VRKME_INV  = IT_VBRP-VRKME.
  str_data-NETWR_INV  = IT_VBRP-NETWR.
  str_data-WAERK_INV  = IT_VBRK-WAERK.
  str_data-FKDAT      = IT_VBRK-FKDAT.
  str_data-ERDAT_INV  = IT_VBRK-ERDAT.
  str_data-ZVRKME_INV = IT_VBRP-VRKME.
  str_data-ZWAERK_INV = IT_VBRK-WAERK.

ENDFORM.                    " GET_INVOICE_DATA

*----------------------------------------------------------------------*
*   Form  GET_SALES_REP_DATA                                           *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM GET_SALES_REP_DATA.

  str_data-PERNR_VE = X_PERNR_VE.
  str_data-ENAME_VE = X_ENAME_VE.
  str_data-PERNR_ZX = X_PERNR_ZX.
  str_data-ENAME_ZX = X_ENAME_ZX.
  str_data-PERNR_ZY = X_PERNR_ZY.
  str_data-ENAME_ZY = X_ENAME_ZY.
  str_data-PERNR_ZV = X_PERNR_ZV.
  str_data-ENAME_ZV = X_ENAME_ZV.
  str_data-PERNR_ZW = X_PERNR_ZW.
  str_data-ENAME_ZW = X_ENAME_ZW.

ENDFORM.                    " GET_SALES_REP_DATA


*----------------------------------------------------------------------*
*   Form  CALCULATE_DATA                                               *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM CALCULATE_DATA USING STATUS.

  DATA:
    lv_lips TYPE xtyp_lips,
    BEGIN OF LT_FPLA OCCURS 0,
      FPLNR LIKE FPLT-FPLNR,
*     FPLTR LIKE FPLT-FPLTR,
    END OF LT_FPLA.

  IF NOT str_data-KWMENG IS INITIAL.
    str_data-ZUNITPR = str_data-NETWR_ORD / str_data-KWMENG.
  ELSE.
    str_data-ZUNITPR = 0.
  ENDIF.
**  Begin DEL IVB 06/07/07
*  str_data-zprofit   = str_data-netwr_ord - str_data-kwert_zek2.
*  str_data-zprofcurr = str_data-waerk_ord.
*  IF NOT str_data-netwr_ord IS INITIAL.  " used to be kwert_zprs before
*    str_data-zprofperc = str_data-zprofit / str_data-netwr_ord * 100.
*  ELSE.
*   str_data-zprofperc = str_data-zprofit / 1 * 100.
*    CLEAR str_data-zprofperc.
*  ENDIF.
** End DEL IVB 06/07/07

** Begin INS IVB 06/07/2007
  str_data-ZPROFIT_AC = str_data-NETWR_ORD - str_data-KWERT_ZEA1.
  str_data-ZPROFCURR  = str_data-WAERK_ORD.
  IF NOT str_data-NETWR_ORD IS INITIAL.
    str_data-ZPROFPERC_AC = str_data-ZPROFIT_AC / str_data-NETWR_ORD * 100.
  ELSE.
    CLEAR str_data-ZPROFPERC_AC.
  ENDIF.

  str_data-ZPROFIT_PC = str_data-NETWR_ORD - str_data-KWERT_ZEK2.
  IF NOT str_data-NETWR_ORD IS INITIAL.
    str_data-ZPROFPERC_PC = str_data-ZPROFIT_PC / str_data-NETWR_ORD * 100.
  ELSE.
    CLEAR str_data-ZPROFPERC_AC.
  ENDIF.

** End INS IVB 06/07/2007

* Calculate open delivery quantity
* if sales order doc category is L or K, don't show quantity
  IF IT_VBAK-VBTYP EQ C_VBTYP_K OR IT_VBAK-VBTYP EQ C_VBTYP_L.
    str_data-ZVRKME_DEL = 0.
  ELSE.
    IF STATUS EQ C_STATUS_DEL OR STATUS EQ C_STATUS_INV1.
      CLEAR: X_LFIMG.
      LOOP AT xt_lips INTO lv_lips
                        WHERE VGBEL EQ str_data-VBELN_ORD
                         AND VGPOS EQ str_data-POSNR_ORD.
        X_LFIMG = X_LFIMG + lv_lips-LFIMG.
      ENDLOOP.
      str_data-ZQUANT_DEL = str_data-KWMENG - X_LFIMG.
    ELSE.
      IF IT_VBAK-VBTYP NE C_VBTYP_K AND IT_VBAK-VBTYP NE C_VBTYP_L.
        str_data-ZQUANT_DEL = str_data-KWMENG.
      ENDIF.
    ENDIF.
    IF NOT str_data-ZQUANT_DEL IS INITIAL AND
       str_data-ZVRKME_DEL     IS INITIAL.
      str_data-ZVRKME_DEL = str_data-VRKME_ORD.
    ENDIF.
  ENDIF.

* Calculate open invoice quantity
* if sales order doc category is L or K, don't show quantity
  IF IT_VBAK-VBTYP EQ C_VBTYP_K OR IT_VBAK-VBTYP EQ C_VBTYP_L.
    str_data-ZVRKME_DEL = 0.
  ELSE.
    IF STATUS EQ C_STATUS_INV1 OR STATUS EQ C_STATUS_INV2.
*     Clear the total invoiced quantity
      CLEAR: X_FKIMG.
*     Clear the list of processed billing plan numbers
      CLEAR: LT_FPLA[], LT_FPLA.
*     Loop over linked billing documents which are not ... ?
      LOOP AT IT_VBRP2 WHERE AUBEL EQ str_data-VBELN_ORD
                         AND AUPOS EQ str_data-POSNR_ORD
                         AND NOT FAREG IN R_FAREG.
*       Find billing document header's "billing category" (TVFK-FKTYP)
        IF IT_VBRK2-VBELN NE IT_VBRP2-VBELN.
          READ TABLE IT_VBRK2 WITH KEY VBELN = IT_VBRP2-VBELN.
          IF SY-SUBRC NE 0.
            CLEAR IT_VBRK2.
          ENDIF.
        ENDIF.
        READ TABLE IT_TVFK WITH KEY FKART = IT_VBRK2-FKART.
        IF SY-SUBRC NE 0.
          CLEAR IT_TVFK.
        ENDIF.
*       If billing category not P ~ downpayment request
        IF IT_TVFK-FKTYP NE C_FKTYP_P.

*         Check if billing item's quantity is already counted as result
*         of other billing item coming from the same billing plan number
          READ TABLE LT_FPLA WITH KEY FPLNR = IT_VBRP2-FPLNR.
          IF SY-SUBRC EQ 0.
            CONTINUE.
          ELSE.
            LT_FPLA-FPLNR = IT_VBRP2-FPLNR.
            APPEND LT_FPLA.
          ENDIF.

*         Take opposite of quantity in case of ...
          IF (    IT_VBRK2-VBTYP EQ C_VBTYP_N  "inv cancell. or cr memo
               OR IT_VBRK2-VBTYP EQ C_VBTYP_O )
              AND IT_VBAK-VBTYP NE C_VBTYP_K   "not cr/db memo request
              AND IT_VBAK-VBTYP NE C_VBTYP_L
              AND IT_VBAK-VBTYP NE C_VBTYP_H.  "and not returns
            IT_VBRP2-FKIMG = IT_VBRP2-FKIMG * -1.
          ENDIF.
*         Add billing quantity to total billed quantity
          X_FKIMG = X_FKIMG + IT_VBRP2-FKIMG.
        ENDIF.
      ENDLOOP.
*     Open invoice quantity is order quantity - billed quantity
      str_data-ZQUANT_INV = str_data-KWMENG - X_FKIMG.
    ELSE.
      str_data-ZQUANT_INV = str_data-KWMENG.
    ENDIF.
  ENDIF.

  IF NOT str_data-ZQUANT_INV IS INITIAL AND
     str_data-ZVRKME_INV     IS INITIAL.
    str_data-ZVRKME_INV = str_data-VRKME_ORD.
  ENDIF.
  CATCH SYSTEM-EXCEPTIONS ARITHMETIC_ERRORS = 5.
    str_data-ZAMOUNT = str_data-ZQUANT_INV * str_data-NETWR_ORD.
  ENDCATCH.
  IF SY-SUBRC EQ 5.
    str_data-ZAMOUNT = 0.
  ENDIF.
  IF NOT str_data-ZAMOUNT IS INITIAL AND
     str_data-ZWAERK_INV IS INITIAL.
    str_data-ZWAERK_INV = str_data-WAERK_ORD.
  ENDIF.

* Calculate GP
  IF NOT str_data-NETWR_ORD IS INITIAL.
    str_data-KWERT_GPPL =
                ( str_data-NETWR_ORD - str_data-KWERT_ZEK2 )
                / str_data-NETWR_ORD * 100.
    str_data-KWERT_GPAC =
                ( str_data-NETWR_ORD - str_data-KWERT_ZEA1 )
                / str_data-NETWR_ORD * 100.
  ENDIF.
  IF NOT str_data-NETWR_INV IS INITIAL.
    str_data-KWERT_GPPL_I =
                ( str_data-NETWR_INV - str_data-KWERT_ZEK2_I )
                / str_data-NETWR_INV * 100.
    str_data-KWERT_GPAC_I =
                ( str_data-NETWR_INV - str_data-KWERT_ZEA1_I )
                / str_data-NETWR_INV * 100.
  ENDIF.

*-- Change the sign to show on screen
  IF IT_VBAK-VBTYP EQ C_VBTYP_H OR IT_VBAK-VBTYP EQ C_VBTYP_K.
    str_data-NETWR_ORD     = str_data-NETWR_ORD  * -1.
    str_data-KWMENG        = str_data-KWMENG     * -1.
*    str_data-zprofit    = str_data-zprofit    * -1.
    str_data-ZPROFIT_AC    = str_data-ZPROFIT_AC * -1.
    str_data-ZPROFIT_PC    = str_data-ZPROFIT_PC * -1.
*    str_data-zprofperc  = str_data-zprofperc  * -1.
    str_data-ZPROFPERC_AC  = str_data-ZPROFPERC_AC  * -1.
    str_data-ZPROFPERC_PC  = str_data-ZPROFPERC_PC  * -1.
    str_data-KWERT_ZEK2    = str_data-KWERT_ZEK2 * -1.
  ENDIF.
  IF IT_LIKP-VBTYP EQ C_VBTYP_T.
    str_data-LFIMG      = str_data-LFIMG      * -1.
  ENDIF.
  IF IT_VBRK-VBTYP EQ C_VBTYP_N OR IT_VBRK-VBTYP EQ C_VBTYP_O.
    str_data-FKIMG      = str_data-FKIMG      * -1.
    str_data-NETWR_INV  = str_data-NETWR_INV  * -1.
  ENDIF.

  IF IT_VBRK-FKTYP EQ C_FKTYP_D AND IT_VBRP-FAREG EQ C_FAREG_4.
    str_data-FKIMG      = str_data-FKIMG      * -1.
    str_data-NETWR_INV  = str_data-NETWR_INV  * -1.
  ENDIF.

ENDFORM.                    " CALCULATE_DATA


*----------------------------------------------------------------------*
*   Form  SAVE_ALL_DATA                                                *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM SAVE_ALL_DATA.
*For RRB, invoice data will always be linked to main item, this causes the costs etc
*to be displayed several times which is incorrect. So only show the costs etc 1 time
  LOOP AT IT_DATA TRANSPORTING NO FIELDS    "AIR23037 - we need no data
        WHERE VBELN_ORD = str_data-VBELN_ORD
                  AND POSNR_ORD = str_data-POSNR_ORD.
     EXIT.      "AIR23037   One is enough
  ENDLOOP.
  IF SY-SUBRC EQ 0.
    str_data-INV_ONLY = 'X'.
    CLEAR: str_data-KWERT_ZEK2,
           str_data-KWERT_ZEA1,
           str_data-KWERT_GPPL,
           str_data-KWERT_GPAC.
  ELSE.
    str_data-INV_ONLY = ''.
  ENDIF.
  MOVE STR_DATA TO IT_DATA.
  APPEND IT_DATA.
ENDFORM.                    " SAVE_ALL_DATA


*----------------------------------------------------------------------*
*   Form  RESET_DATA                                                   *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM RESET_DATA.

  CLEAR: STR_DATA.
  CLEAR: IT_DATA.
  CLEAR: IT_VBRK.
  CLEAR: IT_VBRP.

ENDFORM.                    " RESET_DATA


*----------------------------------------------------------------------*
*       Form  FILL_FIELD_CATALOG                                       *
*----------------------------------------------------------------------*
FORM FILL_FIELD_CATALOG.

  X_REPID = SY-REPID.
  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      I_PROGRAM_NAME         = X_REPID
     I_INTERNAL_TABNAME     = 'IT_DATA'
*     I_STRUCTURE_NAME     = 'XTYP_DATA'
      I_INCLNAME             = X_REPID
    CHANGING
      CT_FIELDCAT            = IT_FIELDCAT
    EXCEPTIONS
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      OTHERS                 = 3.

ENDFORM.                    " FILL_FIELD_CATALOG

*----------------------------------------------------------------------*
*       Form  CHANGE_CATALOG                                           *
*----------------------------------------------------------------------*
FORM CHANGE_CATALOG.

  CLEAR: LS_FIELDCAT.

  LOOP AT IT_FIELDCAT INTO LS_FIELDCAT.
    CASE LS_FIELDCAT-FIELDNAME.
      WHEN 'VKBUR_TXT'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F05.
      WHEN 'VKGRP_TXT'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F07.
      WHEN 'EDATU'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F14.
      WHEN 'ERDAT_ORD'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F16.
      WHEN 'NAME1_AG'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F26.
      WHEN 'ADDR_AG'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F88.
      WHEN 'NAME1_WE'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F28.
      WHEN 'ADDR_WE'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F29.
      WHEN 'KUNRE'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F30.
      WHEN 'NAME1_RE'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F31.
      WHEN 'HKUNNR'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F32.
      WHEN 'NAME1_HL'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F33.
      WHEN 'BRAN1'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F34.
      WHEN 'LFSTA_TXT'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F35.
      WHEN 'FKSAK_TXT'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F36.
      WHEN 'GBSTK_TXT'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F37.
      WHEN 'GBSTA_TXT'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F38.
      WHEN 'VBELN_ORD'.
        LS_FIELDCAT-HOTSPOT = C_FLAG_ON.
      WHEN 'ENAME_VE'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F45.
      WHEN 'PERNR_VE'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F46.
      WHEN 'ENAME_ZX'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F48.
      WHEN 'PERNR_ZX'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F49.
      WHEN 'ENAME_ZY'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F50.
      WHEN 'PERNR_ZY'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F51.
      WHEN 'ENAME_ZV'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G04.
      WHEN 'PERNR_ZV'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G05.
      WHEN 'ENAME_ZW'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G06.
      WHEN 'PERNR_ZW'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G07.
      WHEN 'KWERT_ZPRO'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F52.
      WHEN 'WAERK_ZPRO'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F53.
*     WHEN 'KZWI3_ORD'.
      WHEN 'NETWR_ORD'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F54.
      WHEN 'ZUNITPR'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F56.
      WHEN 'ZUNITPRCURR'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F57.
      WHEN 'KWERT_ZPRS'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F58.
      WHEN 'WAERK_ZPRS'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F59.
*      WHEN 'ZPROFIT'.
*        PERFORM change_fieldcatalogue USING text-f60.
** Begin INS IVB 06/07/2007
      WHEN 'ZPROFIT_AC'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G18.
      WHEN 'ZPROFIT_PC'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G19.
** End INF IVB 06/07/2007
      WHEN 'ZPROFCURR'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F61.
*      WHEN 'ZPROFPERC'.
*        PERFORM change_fieldcatalogue USING text-f62.
** Begin INS IVB 06/07/2007
      WHEN 'ZPROFPERC_AC'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G20.
      WHEN 'ZPROFPERC_PC'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G21.
** End INF IVB 06/07/2007
      WHEN 'NAME1_VEND'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F66.
      WHEN 'VBELN_DEL'.
        LS_FIELDCAT-HOTSPOT = C_FLAG_ON.
      WHEN 'WBSTK_TXT'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F69.
      WHEN 'ZQUANT_DEL'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F72.
      WHEN 'ZWAERK_DEL'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F73.
      WHEN 'VBELN_INV'.
        LS_FIELDCAT-HOTSPOT = C_FLAG_ON.
*     WHEN 'KZWI3_INV'.
      WHEN 'NETWR_INV'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F80.
      WHEN 'NETWR_C_INV'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G28.  "080227
      WHEN 'WAERK_C_INV'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G29.  "080227
      WHEN 'ERDAT_INV'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F82.
      WHEN 'ZQUANT_INV'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F84.
      WHEN 'ZVRKME_INV'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F85.
      WHEN 'ZAMOUNT'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F86.
      WHEN 'ZWAERK_INV'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F87.
      WHEN 'SPARTD'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F89.
      WHEN 'REGION_WE'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F90.
      WHEN 'CITY1_WE'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F91.
      WHEN 'POST_CODE1_WE'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F92.
      WHEN 'REGION_AG'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F93.
      WHEN 'COUNTRY_AG'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G24.
      WHEN 'REGION_AG_DESCR'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G23.
      WHEN 'COUNTRY_WE'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G25.
      WHEN 'REGION_WE_DESCR'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G26.

      WHEN 'CITY1_AG'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F94.
      WHEN 'POST_CODE1_AG'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F95.
      WHEN 'ZFPLVAL'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F96.
      WHEN 'FPROZ'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F97.
      WHEN 'POSNR_ORD'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F98.
      WHEN 'POSNR_DEL'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-F99.
      WHEN 'POSNR_INV'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G01.
      WHEN 'KWMENG_OH'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G02.
      WHEN 'KZWI3_OH'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G03.
      WHEN 'KWERT_ZEK2'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G08.
      WHEN 'KWERT_ZEA1'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G09.
      WHEN 'KWERT_ZEK2_I'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G10.
      WHEN 'KWERT_ZEA1_I'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G11.
      WHEN 'KWERT_GPPL'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G12.
      WHEN 'KWERT_GPAC'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G13.
      WHEN 'KWERT_GPPL_I'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G14.
      WHEN 'KWERT_GPAC_I'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G15.
      WHEN 'EQUNR'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G16.
      WHEN 'BEMOT'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G17.
      WHEN 'REGION'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G22.
      WHEN 'MATKL'.
        PERFORM CHANGE_FIELDCATALOGUE USING TEXT-G27.

    ENDCASE.
    MODIFY IT_FIELDCAT FROM LS_FIELDCAT.
  ENDLOOP.

  GS_LAYOUT-COLWIDTH_OPTIMIZE   = 'X'.
  GS_LAYOUT-CONFIRMATION_PROMPT = 'X'.
  GS_LAYOUT-DETAIL_TITLEBAR     = 'SALES REPORTING'.
* GS_LAYOUT-COLTAB_FIELDNAME    = 'CELL'.

ENDFORM.                    " CHANGE_CATALOG


*----------------------------------------------------------------------*
*       Form  ALV_OUTPUT                                               *
*----------------------------------------------------------------------*
FORM ALV_OUTPUT.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      I_CALLBACK_PROGRAM      = 'YSE_AM_REVENUE'
      I_CALLBACK_USER_COMMAND = G_USER_COMMAND
      IS_LAYOUT               = GS_LAYOUT
      IT_FIELDCAT             = IT_FIELDCAT
      IT_SORT                 = IT_SORT
      I_DEFAULT               = 'X'
      I_SAVE                  = 'A'
      IS_VARIANT              = GV_VARIANT   " TVO
      I_SCREEN_START_COLUMN   = 0
      I_SCREEN_START_LINE     = 0
      I_SCREEN_END_COLUMN     = 0
      I_SCREEN_END_LINE       = 0
    TABLES
      T_OUTTAB                = IT_DATA
    EXCEPTIONS
      PROGRAM_ERROR           = 1
      OTHERS                  = 2.

  IF SY-SUBRC NE 0.
  ENDIF.

ENDFORM.                    " ALV_OUTPUT

************************************************************************
* SUBROUTINES  LEVEL 03                                                *
************************************************************************

*----------------------------------------------------------------------*
*   Form  GET_STATUS                                                   *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM GET_STATUS USING TABLE FIELD STATUS
                CHANGING TEXT.

  CLEAR STR_STATUS.
  STR_STATUS-SPRAS = SY-LANGU.
  STR_STATUS-TBNAM = TABLE.
  STR_STATUS-FDNAM = FIELD.
  STR_STATUS-STATU = STATUS.

  CALL FUNCTION 'RV_DOCUMENT_STATUS_TEXTS'
    EXPORTING
      TVBST_WA      = STR_STATUS
    IMPORTING
*     returncode    =
      TEXT          = TEXT.

ENDFORM.                    " GET_STATUS


*----------------------------------------------------------------------*
*   Form  CHANGE_FIELDCATALOGUE                                        *
*----------------------------------------------------------------------*
*   .....                                                              *
*----------------------------------------------------------------------*
FORM CHANGE_FIELDCATALOGUE USING TITLE.

  LS_FIELDCAT-SELTEXT_S    = TITLE.
  LS_FIELDCAT-SELTEXT_M    = TITLE.
  LS_FIELDCAT-SELTEXT_L    = TITLE.
  LS_FIELDCAT-REPTEXT_DDIC = TITLE.

ENDFORM.                    " CHANGE_FIELDCATALOGUE


*------------------------------------------------------------------*
*   Form  USER_COMMAND                                             *
*------------------------------------------------------------------*
*   --> R_UCOMM                                                    *
*   --> RS_SELFIELD                                                *
*------------------------------------------------------------------*
FORM USER_COMMAND USING UCOMM    LIKE SY-UCOMM
                        SELFIELD TYPE SLIS_SELFIELD.

*-- Check function code
  CASE UCOMM.
    WHEN '&IC1'.
      CASE SELFIELD-FIELDNAME.
        WHEN 'VBELN_ORD'.
          SET PARAMETER ID 'AUN' FIELD SELFIELD-VALUE.
          CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.
        WHEN 'VBELN_DEL'.
          SET PARAMETER ID 'VL' FIELD SELFIELD-VALUE.
          CALL TRANSACTION 'VL03N' AND SKIP FIRST SCREEN.
        WHEN 'VBELN_INV'.
          SET PARAMETER ID 'VF' FIELD SELFIELD-VALUE.
          CALL TRANSACTION 'VF03' AND SKIP FIRST SCREEN.
      ENDCASE.
  ENDCASE.

ENDFORM.                    " USER_COMMAND
*&---------------------------------------------------------------------*
*&      Form  Check_Authorization
*&---------------------------------------------------------------------*
FORM CHECK_AUTHORIZATION .

  LOOP AT S_VKORG.
    LOOP AT S_VTWEG.
      LOOP AT S_SPARTH.
        AUTHORITY-CHECK OBJECT 'V_VBAK_VKO'
                        ID     'VKORG' FIELD S_VKORG-LOW
                        ID     'VTWEG' FIELD S_VTWEG-LOW
                        ID     'SPART' FIELD S_SPARTH-LOW
                        ID     'ACTVT' DUMMY.

        IF SY-SUBRC = 4.
*         No authorisation to display data from Sales Organisation
*         p_vkorg
          MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '005'
                                   WITH S_VKORG-LOW S_VTWEG-LOW
                                   S_SPARTH-LOW.
        ELSEIF SY-SUBRC <> 0.
*         Error checking authorization.
          MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '004'.
        ENDIF.

      ENDLOOP.
    ENDLOOP.
  ENDLOOP.

ENDFORM.                    " CHECK_AUTHORIZATION

*&---------------------------------------------------------------------*
*&      Form  RESTRICT_SO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM RESTRICT_SO .

  TYPE-POOLS:
* Include type pool SSCR (selection screen restriction)
    SSCR.

  DATA:
    LS_RESTRICT TYPE SSCR_RESTRICT," to define the select options'
                                   " restrictions
    LS_OPTLIST  TYPE SSCR_OPT_LIST," to define type of restrictions
    LS_ASS      TYPE SSCR_ASS.     " to assign select option(s) to

* Local constants
  CONSTANTS:
    LC_OBJK1 TYPE STRING VALUE 'OBJK1'.

* Restrict Select options
  LS_OPTLIST-NAME = LC_OBJK1.
  LS_OPTLIST-OPTIONS-EQ = 'X'.
  APPEND LS_OPTLIST TO LS_RESTRICT-OPT_LIST_TAB.

  LS_ASS-OP_MAIN = LC_OBJK1.
  LS_ASS-KIND = 'S'.
  LS_ASS-NAME = 'S_VKORG'.
  LS_ASS-SG_MAIN = 'I'.
  LS_ASS-SG_ADDY = SPACE.
  APPEND LS_ASS TO LS_RESTRICT-ASS_TAB.
  LS_ASS-NAME = 'S_VTWEG'.
  APPEND LS_ASS TO LS_RESTRICT-ASS_TAB.
  LS_ASS-NAME = 'S_SPARTH'.
  APPEND LS_ASS TO LS_RESTRICT-ASS_TAB.

  CALL FUNCTION 'SELECT_OPTIONS_RESTRICT'
    EXPORTING
*     PROGRAM                      =
      RESTRICTION                  = LS_RESTRICT
*     DB                           = ' '
    EXCEPTIONS
      TOO_LATE                     = 1
      REPEATED                     = 2
      SELOPT_WITHOUT_OPTIONS       = 3
      SELOPT_WITHOUT_SIGNS         = 4
      INVALID_SIGN                 = 5
      EMPTY_OPTION_LIST            = 6
      INVALID_KIND                 = 7
      REPEATED_KIND_A              = 8
      OTHERS                       = 9.

ENDFORM.                    " RESTRICT_SO

*&---------------------------------------------------------------------*
*&      Form  get_billing_plan_data
*&---------------------------------------------------------------------*
FORM GET_BILLING_PLAN_DATA .

  IF       NOT it_vbfa_so2inv-FPLNR IS INITIAL
       AND NOT it_vbfa_so2inv-FPLTR IS INITIAL.

    IF      it_vbfa_so2inv-FPLNR NE IT_FPLT-FPLNR
         OR it_vbfa_so2inv-FPLTR NE IT_FPLT-FPLTR.
      READ TABLE IT_FPLT WITH KEY FPLNR = it_vbfa_so2inv-FPLNR
                                  FPLTR = it_vbfa_so2inv-FPLTR.
    ELSE.
      SY-SUBRC = 0.
    ENDIF.
    IF SY-SUBRC EQ 0.
      str_data-FPROZ   = IT_FPLT-FPROZ.
      str_data-ZFPLVAL = IT_FPLT-FAKWR.
      IF str_data-FPROZ IS INITIAL.
        IF NOT str_data-NETWR_ORD IS INITIAL.
          str_data-FPROZ = str_data-ZFPLVAL /
                           str_data-NETWR_ORD * 100.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    " GET_BILLING_PLAN_DATA
*&---------------------------------------------------------------------*
*&      Form  filter_Data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILTER_DATA .
*Take into account the region of the sold-to
  LOOP AT IT_DATA WHERE NOT REGION_AG IN S_REGION.
    DELETE IT_DATA.
  ENDLOOP.
ENDFORM.                    " filter_Data
