**********************************************************************
* Program ID        : YSE_RLE_DELNOTE                                 *
* Project           : YSE_PO                                          *
* Author            : Pieter Jespers                                  *
* Date              : 23/11/2006                                      *
* Functional spec   : SEED   D050: Layout delivery note               *
*                                 and call off register               *
**********************************************************************
*----------------------------------------------------------------------*
*      Print of a delivery note by SAPscript SMART FORMS               *
*----------------------------------------------------------------------*
REPORT YSE_RLE_DELNOTE_V1.

* declaration of data
INCLUDE RLE_DELNOTE_DATA_DECLARE.
DATA: LT_LIPS TYPE TABLE OF LIPS,
      WA_LIPS TYPE LIPS,
      LT_LIKP TYPE TABLE OF LIKP,
      WA_LIKP TYPE LIKP,
      WA_EKKO TYPE EKKO,
      WA_VBAK TYPE VBAK,
      V_URGENCY TYPE VTEXT,
      L_PAYTERM TYPE DZTERM_BEZ.
DATA: I_NOTIFTASK0  TYPE TABLE OF BAPI2080_NOTTASKE,
      I_NOTIFTASK  TYPE TABLE OF BAPI2080_NOTTASKE.
* definition of forms
INCLUDE RLE_DELNOTE_FORMS.
INCLUDE RLE_PRINT_FORMS.

*---------------------------------------------------------------------*
*       FORM ENTRY
*---------------------------------------------------------------------*
FORM ENTRY USING RETURN_CODE US_SCREEN.

  DATA: LF_RETCODE TYPE SY-SUBRC.
  XSCREEN = US_SCREEN.
  PERFORM PROCESSING USING    US_SCREEN
                     CHANGING LF_RETCODE.
  IF LF_RETCODE NE 0.
    RETURN_CODE = 1.
  ELSE.
    RETURN_CODE = 0.
  ENDIF.

ENDFORM.                    "ENTRY
*---------------------------------------------------------------------*
*       FORM PROCESSING                                               *
*---------------------------------------------------------------------*
FORM PROCESSING USING    PROC_SCREEN
                CHANGING CF_RETCODE.

  DATA: LS_PRINT_DATA_TO_READ TYPE LEDLV_PRINT_DATA_TO_READ.
  DATA: LS_DLV_DELNOTE        TYPE LEDLV_DELNOTE.
  DATA: LF_FM_NAME            TYPE RS38L_FNAM.
  DATA: LS_CONTROL_PARAM      TYPE SSFCTRLOP.
  DATA: LS_COMPOSER_PARAM     TYPE SSFCOMPOP.
  DATA: LS_RECIPIENT          TYPE SWOTOBJID.
  DATA: LS_SENDER             TYPE SWOTOBJID.
  DATA: LF_FORMNAME           TYPE TDSFNAME.
  DATA: LS_ADDR_KEY           LIKE ADDR_KEY.
  DATA: LS_JOB_INFO           TYPE SSFCRESCL.

*>>>air22296: for other font countries,we will pick another layout
  DATA: L_SFORM TYPE TDSFNAME,
        L_LAND1 TYPE LAND1_GP,
        L_BUKRS TYPE BUKRS.


  CLEAR L_BUKRS.
  SELECT SINGLE T001K~BUKRS INTO L_BUKRS FROM LIPS
  INNER JOIN T001K ON BWKEY = LIPS~WERKS
              WHERE LIPS~VBELN = NAST-OBJKY.

  CLEAR L_LAND1.
  SELECT SINGLE LAND1 INTO L_LAND1 FROM  T001
         WHERE  BUKRS  = L_BUKRS.



  CALL FUNCTION 'YSE_LAY_GET_FNAME'
    EXPORTING
      TNAPR = TNAPR
      LAND1 = L_LAND1
    IMPORTING
      SFORM = L_SFORM.

  IF NOT L_SFORM IS INITIAL.
    LF_FORMNAME = L_SFORM.
  ELSE.
    LF_FORMNAME = TNAPR-SFORM.
  ENDIF.
* SmartForm from customizing table TNAPR
*  lf_formname = tnapr-sform.
*<<<air22296


* determine print data
  PERFORM SET_PRINT_DATA_TO_READ USING    LF_FORMNAME
                                 CHANGING LS_PRINT_DATA_TO_READ
                                 CF_RETCODE.
  LS_PRINT_DATA_TO_READ-IT_REFORD  = 'X'.

  IF CF_RETCODE = 0.
* select print data
    PERFORM GET_DATA USING    LS_PRINT_DATA_TO_READ
                     CHANGING LS_ADDR_KEY
                              LS_DLV_DELNOTE
                              CF_RETCODE.
*>>>air22296 on 27/11
    PERFORM GET_ADDITIONAL_DATA.
    PERFORM GET_ADDRES_DATA CHANGING LS_DLV_DELNOTE-HD_ADR.
    PERFORM FILL_NOTIFICATIONS  USING LS_DLV_DELNOTE-IT_GEN
                                CHANGING LS_DLV_DELNOTE-IT_QM.

*<<<
  ENDIF.

  IF CF_RETCODE = 0.
    PERFORM SET_PRINT_PARAM USING    LS_ADDR_KEY
                            CHANGING LS_CONTROL_PARAM
                                     LS_COMPOSER_PARAM
                                     LS_RECIPIENT
                                     LS_SENDER
                                     CF_RETCODE.
  ENDIF.
  LS_CONTROL_PARAM-NO_DIALOG = SPACE.
  IF CF_RETCODE = 0.
* determine smartform function module for delivery note
    CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
         EXPORTING  FORMNAME           = LF_FORMNAME
*                 variant            = ' '
*                 direct_call        = ' '
         IMPORTING  FM_NAME            = LF_FM_NAME
         EXCEPTIONS NO_FORM            = 1
                    NO_FUNCTION_MODULE = 2
                    OTHERS             = 3.
    IF SY-SUBRC <> 0.
*   error handling
      CF_RETCODE = SY-SUBRC.
      PERFORM PROTOCOL_UPDATE.
    ENDIF.
  ENDIF.

  IF CF_RETCODE = 0.
*   call smartform delivery note
    CALL FUNCTION LF_FM_NAME
         EXPORTING
                  ARCHIVE_INDEX        = TOA_DARA
                  ARCHIVE_PARAMETERS   = ARC_PARAMS
                  CONTROL_PARAMETERS   = LS_CONTROL_PARAM
*                 mail_appl_obj        =
                  MAIL_RECIPIENT       = LS_RECIPIENT
                  MAIL_SENDER          = LS_SENDER
                  OUTPUT_OPTIONS       = LS_COMPOSER_PARAM
                  USER_SETTINGS        = ' '
                  IS_DLV_DELNOTE       = LS_DLV_DELNOTE
                  IS_NAST              = NAST
                  WA_LIKP              = WA_LIKP
                  WA_VBAK              = WA_VBAK
                  WA_EKKO              = WA_EKKO
                  V_FNAME              = LF_FORMNAME
                  L_URGENCY            = V_URGENCY
                  L_PAYTERM            = L_PAYTERM
       IMPORTING  JOB_OUTPUT_INFO      = LS_JOB_INFO
*                 document_output_info =
*                 job_output_info      =
*                 job_output_options   =
       TABLES     IT_LIPS              = LT_LIPS
                  IT_NOTIFTASK         = I_NOTIFTASK
       EXCEPTIONS FORMATTING_ERROR     = 1
                  INTERNAL_ERROR       = 2
                  SEND_ERROR           = 3
                  USER_CANCELED        = 4
                  OTHERS               = 5.
    IF SY-SUBRC <> 0.
*   error handling
      CF_RETCODE = SY-SUBRC.
      PERFORM PROTOCOL_UPDATE.
*     get SmartForm protocoll and store it in the NAST protocoll
      PERFORM ADD_SMFRM_PROT.                  "INS_HP_335958
    ENDIF.
  ENDIF.

* get SmartForm protocoll and store it in the NAST protocoll
* PERFORM ADD_SMFRM_PROT.                       DEL_HP_335958
* get SmartForm spoolid and store it in the NAST protocoll
  DATA LS_SPOOLID LIKE LINE OF LS_JOB_INFO-SPOOLIDS.
  LOOP AT LS_JOB_INFO-SPOOLIDS INTO LS_SPOOLID.
    IF LS_SPOOLID NE SPACE.

*       MOD-001 - start of modification for PDF output
      IF NAST-NACHA = '8'.
*         Define variable to build suggested file name
        DATA: LV_FNAME TYPE STRING.
        DATA: L_LFART TYPE LIKP-LFART.

        CLEAR L_LFART.
        SELECT SINGLE LFART INTO L_LFART FROM LIKP
        WHERE VBELN = LS_DLV_DELNOTE-HD_GEN-DELIV_NUMB.

*         Build suggested filename
        CONCATENATE L_LFART
                    '_'
                    LS_DLV_DELNOTE-HD_GEN-DELIV_NUMB
                    '.pdf'
               INTO LV_FNAME.
*         Call function to convert the spool to a local PDF file
        CALL FUNCTION 'YSE_PRINT_PDF'
          EXPORTING
            PS_SPOOLID = LS_SPOOLID
            PV_FNAME   = LV_FNAME.
      ENDIF.
*       MOD-001 - end of modif

    ENDIF.
  ENDLOOP.

ENDFORM.                    "PROCESSING
*&---------------------------------------------------------------------*
*&      Form  get_addres_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_ADDRES_DATA CHANGING CT_HD_ADR TYPE LE_T_DLV_HD_ADR .

  DATA: L_BUKRS_VF TYPE BUKRS,
        L_ADRNR TYPE ADRNR,
        WA_LEDLV_HD_ADR TYPE LEDLV_HD_ADR.

*First empty the addresses:
  REFRESH CT_HD_ADR.

*Get the sellers address:
*-----------------------*
  READ TABLE LT_LIPS INDEX 1 INTO WA_LIPS.

* Get document's company code
  SELECT SINGLE BUKRS_VF
    INTO L_BUKRS_VF
    FROM VBAK
    WHERE VBELN EQ WA_LIPS-VGBEL.

*¡°Seller¡¯s address¡± in language of output document (Bold). This
* is always the company code address except for stock transfers where it
* is the delivering storage location.
  CLEAR L_ADRNR.
  CASE WA_LIKP-LFART.



*take the address from the storage location:
    WHEN  'NL' OR 'ZNLC'.
      SELECT  SINGLE B~ADRNR
       INTO L_ADRNR
       FROM T001L AS A
       LEFT JOIN TWLAD AS B   " Also select StLoc w/o address!
         ON A~WERKS EQ B~WERKS
        AND A~LGORT EQ B~LGORT
      WHERE A~WERKS EQ WA_LIPS-WERKS
        AND A~LGORT EQ WA_LIPS-LGORT.


*    WHEN  'NL'.
**take address of delivering storage location
**When stock transport: take address of delivering plant (issue 3376)
*      SELECT SINGLE adrnr
*        INTO l_adrnr
*        FROM t001w
*        WHERE werks EQ wa_lips-werks.

    WHEN 'ZRL'.
*take address of EKKO-BUKRS (use LIPS-VGBEL)
* Get address number
      SELECT SINGLE ADRNR
        INTO L_ADRNR
        FROM T001
        WHERE BUKRS EQ WA_EKKO-BUKRS.

    WHEN OTHERS.
      SELECT SINGLE ADRNR
        INTO L_ADRNR
        FROM T001
        WHERE BUKRS EQ WA_VBAK-BUKRS_VF.
  ENDCASE.

  CLEAR WA_LEDLV_HD_ADR.
  WA_LEDLV_HD_ADR-DELIV_NUMB = WA_LIKP-VBELN.
  WA_LEDLV_HD_ADR-PARTN_ROLE = 'SE'.
  WA_LEDLV_HD_ADR-ADDR_NO = L_ADRNR.
  INSERT WA_LEDLV_HD_ADR INTO TABLE CT_HD_ADR.

*Get the customers address:
*-------------------------*
  CLEAR L_ADRNR.
  CASE WA_LIKP-LFART.
*Take address of receiving plant : likp-werks
    WHEN  'NL'.
      SELECT SINGLE ADRNR
        INTO L_ADRNR
        FROM T001W
        WHERE WERKS EQ WA_LIKP-WERKS.

*Take address of purchase organisation
    WHEN 'ZNLC'.
      L_ADRNR = 'SELL_ADDR'.

*Take address of vendor
    WHEN 'ZRL'.
      SELECT SINGLE ADRNR
        INTO L_ADRNR
        FROM VBPA
        WHERE VBELN EQ WA_LIKP-VBELN
        AND   PARVW EQ 'WE'.

*Take address of sold-to partner : likp-kunag
    WHEN OTHERS.
      SELECT SINGLE ADRNR
        INTO L_ADRNR
        FROM KNA1
        WHERE KUNNR EQ WA_LIKP-KUNAG.
  ENDCASE.

  CLEAR WA_LEDLV_HD_ADR.
  WA_LEDLV_HD_ADR-DELIV_NUMB = WA_LIKP-VBELN.
  WA_LEDLV_HD_ADR-PARTN_ROLE = 'SP'.
  WA_LEDLV_HD_ADR-ADDR_NO = L_ADRNR.
  INSERT WA_LEDLV_HD_ADR INTO TABLE CT_HD_ADR.

*Get the delivery address:
*-------------------------*

  SELECT SINGLE ADRNR
    INTO L_ADRNR
    FROM VBPA
    WHERE VBELN EQ WA_LIKP-VBELN
    AND   PARVW EQ 'WE'.

  CLEAR WA_LEDLV_HD_ADR.
  WA_LEDLV_HD_ADR-DELIV_NUMB = WA_LIKP-VBELN.
  WA_LEDLV_HD_ADR-PARTN_ROLE = 'WE'.
  WA_LEDLV_HD_ADR-ADDR_NO = L_ADRNR.
  INSERT WA_LEDLV_HD_ADR INTO TABLE CT_HD_ADR.

ENDFORM.                    " get_addres_data
*&---------------------------------------------------------------------*
*&      Form  get_additional_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_ADDITIONAL_DATA .

  DATA: LS_DELIVERY_KEY TYPE  LESHP_DELIVERY_KEY,
        L_VBELV TYPE VBELV.

  LS_DELIVERY_KEY-VBELN = NAST-OBJKY.


*fill likp data
  CLEAR WA_LIKP.
  SELECT SINGLE *
    FROM LIKP
    INTO WA_LIKP
    WHERE VBELN EQ LS_DELIVERY_KEY.

*fill lips data
  REFRESH LT_LIPS.
  SELECT *
    FROM LIPS
    INTO TABLE LT_LIPS
    WHERE VBELN EQ LS_DELIVERY_KEY.


*fill ekko data
  READ TABLE LT_LIPS INDEX 1 INTO WA_LIPS.

  CLEAR WA_EKKO.
  SELECT SINGLE * INTO WA_EKKO
  FROM EKKO
  WHERE EBELN = WA_LIPS-VGBEL.

*fill vbak data:
  CLEAR L_VBELV.
  SELECT SINGLE VBELV INTO L_VBELV FROM VBFA
       WHERE VBELN = LS_DELIVERY_KEY
         AND VBTYP_V = 'C'.
  CLEAR WA_VBAK.
  SELECT SINGLE * FROM VBAK INTO WA_VBAK WHERE VBELN = L_VBELV.

  PERFORM GET_URGENCY_CODE.
  PERFORM GET_SO_PAYMENT_TERMS.


ENDFORM.                    " get_additional_data
*&---------------------------------------------------------------------*
*&      Form  get_urgency_code
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
* At this moment only used for the Call off register
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_URGENCY_CODE .

  CLEAR V_URGENCY.
  SELECT SINGLE VTEXT INTO V_URGENCY
    FROM TVSBT
   WHERE SPRAS = NAST-SPRAS
     AND VSBED = WA_LIKP-VSBED.

  IF SY-SUBRC NE 0.
    SELECT SINGLE VTEXT INTO V_URGENCY
      FROM TVSBT
      WHERE SPRAS = 'EN'
        AND VSBED = WA_LIKP-VSBED.
  ENDIF.

ENDFORM.                    " get_urgency_code
*&---------------------------------------------------------------------*
*&      Form  fill_notifications
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_NOTIFICATIONS USING CT_IT_GEN TYPE LE_T_DLV_IT_GEN
                        CHANGING CT_IT_QM TYPE LE_T_DLV_IT_QM.

  DATA:   LV_TMPTXT1(20)  TYPE C,
  LV_TMPTXT2(20)  TYPE C,
  L_BSTNK TYPE BSTNK,
  L_QMNUM TYPE QMNUM,
  TELLER(2) TYPE N,
  TEXT(50).

  DATA:  BEGIN OF IT_QMEL OCCURS 0,
  QMNUM TYPE QMNUM,
  OBJNR TYPE J_OBJNR,
  BSTNK TYPE BSTKD,
  END OF IT_QMEL.

  DATA: WA_NOTIFTASK  TYPE  BAPI2080_NOTTASKE,
        WA_IT_QM  TYPE LINE OF  LE_T_DLV_IT_QM.


  DATA: I_NOTIFHEADER TYPE BAPI2080_NOTHDRE,
        I_NOTIFHDTEXT TYPE BAPI2080_NOTHDTXTE.

  FIELD-SYMBOLS: <FS_IT_DEN>  TYPE LINE OF LE_T_DLV_IT_GEN.

  CLEAR I_NOTIFTASK. REFRESH I_NOTIFTASK.

  LOOP AT CT_IT_GEN ASSIGNING <FS_IT_DEN>.

* Remove leading zeros from document number
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT  = <FS_IT_DEN>-DELIV_NUMB
      IMPORTING
        OUTPUT = LV_TMPTXT1.

* Remove leading zeros from item number
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT  = <FS_IT_DEN>-ITM_NUMBER
      IMPORTING
        OUTPUT = LV_TMPTXT2.

* Build delivery/item code: this seems to be the way to get the
*    notification.
    CONCATENATE LV_TMPTXT1 '/' LV_TMPTXT2 INTO L_BSTNK.

    SELECT SINGLE QMNUM INTO L_QMNUM
    FROM QMEL
    WHERE BSTNK EQ L_BSTNK.

    CLEAR I_NOTIFTASK0. REFRESH I_NOTIFTASK0.

    CALL FUNCTION 'BAPI_SERVNOT_GET_DETAIL'
      EXPORTING
        NUMBER      = L_QMNUM
      IMPORTING
        NOTIFHEADER = I_NOTIFHEADER
        NOTIFHDTEXT = I_NOTIFHDTEXT
      TABLES
        NOTIFTASK   = I_NOTIFTASK0.

    LOOP AT I_NOTIFTASK0 INTO WA_NOTIFTASK.
      WA_IT_QM-DELIV_NUMB = <FS_IT_DEN>-DELIV_NUMB.
      WA_IT_QM-ITM_NUMBER = <FS_IT_DEN>-ITM_NUMBER.
      WA_IT_QM-NOTIF_NUMB = WA_NOTIFTASK-NOTIF_NO.
      INSERT WA_IT_QM INTO TABLE CT_IT_QM.
    ENDLOOP.

    APPEND LINES OF I_NOTIFTASK0 TO I_NOTIFTASK.

  ENDLOOP.

ENDFORM.                    " fill_notifications
*&---------------------------------------------------------------------*
*&      Form  get_so_payment_terms
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*get the payment terms for the sales order:
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_SO_PAYMENT_TERMS .

  DATA: L_ZTERM TYPE DZTERM.

  CLEAR L_PAYTERM.

  CLEAR L_ZTERM.
  SELECT SINGLE ZTERM INTO L_ZTERM
    FROM VBKD WHERE VBELN = WA_VBAK-VBELN.

  SELECT SINGLE VTEXT
    INTO L_PAYTERM
    FROM TVZBT
    WHERE ZTERM EQ L_ZTERM
    AND   SPRAS EQ NAST-SPRAS.

ENDFORM.                    " get_so_payment_terms
