*&---------------------------------------------------------------------*
*& Report  YSE_OTC_DW_ORSTAT
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
*
* NOTE ! This program YSE_OTC_DW_ORSTAT fills table ztdworstat.
*        The table ztdworstat shall be filled in date order to get all
*        transactions right, it can be filled month by month or any other
*        interval
*
*        TRANSACTION SHALL BE FILLED I DATE FORWARD DIRECTION
*
* NOTE ! Table ZTDWINPUT needs to be updated (via SE16) with TAX and COST
*        parameters.


REPORT  YSE_OTC_DW_ORSTAT.

TABLES: ztdworstat,
        ztdworlog.


TYPES: BEGIN OF ts_dw_orstat,
         vbeln TYPE ztdworstat-vbeln,  " Pri
         posnr TYPE ztdworstat-posnr,  " Pri
         tstamps TYPE ztdworstat-tstamps,  " Pri
         linetype TYPE ztdworstat-linetype, " Pri
         chngind TYPE ztdworstat-chngind,
         knumv TYPE vbak-knumv,
         matnr TYPE ztdworstat-matnr,
         prodh TYPE ztdworstat-prodh,
         KZWI1 TYPE ztdworstat-KZWI1,
         netwr TYPE ztdworstat-netwr,

         zmeng TYPE vbap-zmeng, " Service COST = 'EK02'
         kzwi3 TYPE vbap-kzwi3, " Service COST = 'EK02'
         kzwi6 TYPE vbap-kzwi6, " Service COST = 'EK02'

         r_date TYPE ztdworstat-r_date,
         r_time TYPE ztdworstat-r_time,
         kzwi4 TYPE vbap-kzwi4,     "Freight
         stdcost TYPE ztdworstat-stdcost,
         r_curr_old TYPE ztdworstat-r_curr_old,
         r_curr_new TYPE ztdworstat-r_curr_new,
         stdcost_waers TYPE ztdworstat-stdcost_waers,
         kwmeng TYPE ztdworstat-kwmeng,
         umvkz TYPE vbap-umvkz,
         umvkn TYPE vbap-umvkn,
         meins TYPE ztdworstat-meins,
         vkorg TYPE ztdworstat-vkorg,
         BUKRS_VF TYPE ztdworstat-BUKRS_VF,
         AUART TYPE ztdworstat-AUART,
         ORDER_TYPE TYPE ztdworstat-ORDER_TYPE,


         COST TYPE ztdworstat-COST,
         TAX TYPE ztdworstat-TAX,

*/       The following 3 fields are not used
         req_deldate TYPE ztdworstat-req_deldate,
         conf_deldate TYPE ztdworstat-conf_deldate,
         bo_menge TYPE ztdworstat-bo_menge,
*/
         creation_date TYPE ztdworstat-creation_date,
         creation_time TYPE ztdworstat-creation_time,
         creation_name TYPE ztdworstat-creation_name,
         source TYPE ztdworstat-source,

 END OF ts_dw_orstat,

BEGIN OF ts_dw_stdcost,

         stdcost TYPE ztdworstat-stdcost,
         stdcost_waers TYPE ztdworstat-stdcost_waers,

 END OF ts_dw_stdcost.



*     work
DATA: lt_dw_orstat_wk TYPE STANDARD TABLE OF ts_dw_orstat,
      ls_dw_orstat_wk TYPE ts_dw_orstat,
      wa_dw_orstat_trash TYPE ts_dw_orstat,


      ls_dw_stdcost_wk TYPE ts_dw_stdcost,
*   work with log data
      ls_ztdworlog_wk                 TYPE  ztdworlog,
      lt_ztdworlog_wk                 TYPE TABLE OF ztdworlog,


*     result
      lt_dw_orstat_rt TYPE STANDARD TABLE OF ztdworstat,
      ls_dw_orstat_rt TYPE ztdworstat,


*
      wa_statnr(15) TYPE n,
      wa_commit_test(15) TYPE n.

SELECTION-SCREEN BEGIN OF BLOCK bl2 WITH FRAME.
SELECT-OPTIONS: so_crdat FOR ztdworstat-creation_date,
                so_BUKVF FOR ztdworstat-BUKRS_VF,
                so_vkorg for ztdworstat-vkorg,

                so_vbeln FOR ztdworstat-vbeln,
                so_posnr  FOR ztdworstat-posnr.

PARAMETERS: del_code TYPE waers.

SELECTION-SCREEN END OF BLOCK bl2.


INITIALIZATION.
  PERFORM initialization.



*&---------------------------------------------------------------------*
*&      Form  initialization
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM initialization .

  CLEAR so_bukvf.
  so_bukvf-sign = 'I'.
*  so_fkart-sign = 'E'.  exclude !!!
  so_bukvf-option = 'EQ'.

  so_bukvf-low = 'HKGA'.
  APPEND so_bukvf.
  so_bukvf-low = 'SHTA'.
  APPEND so_bukvf.
  so_bukvf-low = 'MRUA'.
  APPEND so_bukvf.

  CLEAR so_vkorg.
  so_vkorg-sign = 'I'.
  so_vkorg-option = 'EQ'.

  so_vkorg-low = 'CN03'.
  APPEND so_vkorg.
  so_vkorg-low = 'HK03'.
  APPEND so_vkorg.
  so_vkorg-low = 'RU03'.
  APPEND so_vkorg.

  del_code = 'XXXXX'.

ENDFORM.                    " initialization

START-OF-SELECTION.

* delete ALL ! rows from table, do not do this    *

  if del_code = '13481'.
    DELETE FROM ztdworstat.
  endif.

*/
* Read from order file as it is
*
* linetype = 'C' = Created
* chngind = 'N' = New line No changes
*
*/



*  New orders = O                  *

  SELECT
         vbap~vbeln
         vbap~posnr
         vbak~knumv
         vbak~vkorg
         vbak~BUKRS_VF
         vbak~AUART

         vbap~erdat AS creation_date " order line
         vbap~erzet AS creation_time
         vbap~ernam AS creation_name


  INTO CORRESPONDING FIELDS OF ls_dw_orstat_wk
  FROM  vbak
  INNER JOIN vbap on
  vbap~vbeln = vbak~vbeln



  WHERE
      vbak~vkorg IN so_vkorg
  AND vbak~BUKRS_VF IN so_bukvf
  AND vbap~erdat IN so_crdat
  AND vbak~vbeln IN so_vbeln
  AND vbap~posnr IN so_posnr.



    SELECT

           vbap~matnr
           vbap~prodh

           vbap~netwr
           vbap~kzwi1    "Price
           vbap~kzwi4    "Freight
           vbap~waerk AS r_curr_old
           vbap~waerk AS r_curr_new
           vbap~kwmeng

           vbap~kzwi3    "service
           vbap~kzwi6    "service
           vbap~zmeng    "service
           vbap~umvkz
           vbap~umvkn
           vbap~vrkme AS meins
*  fel     vbap~werks AS vkorg
           vbap~erdat AS r_date " order line date
           vbap~erzet AS r_time

    INTO CORRESPONDING FIELDS OF ls_dw_orstat_wk
    FROM  vbap

    WHERE
            vbap~vbeln = ls_dw_orstat_wk-vbeln
        and vbap~posnr = ls_dw_orstat_wk-posnr.


      ls_dw_orstat_wk-kwmeng = ls_dw_orstat_wk-kwmeng *
                          ls_dw_orstat_wk-umvkz / ls_dw_orstat_wk-umvkn.





      SELECT SINGLE ORDER_TYPE COST TAX
      INTO CORRESPONDING FIELDS OF ls_dw_orstat_wk
      FROM  ZTDWINPUT
      WHERE BUKRS_VF = ls_dw_orstat_wk-BUKRS_VF
      and   ORDER_TYPE = ls_dw_orstat_wk-AUART.





      IF ls_dw_orstat_wk-ORDER_TYPE = 'ZC01'
       OR ls_dw_orstat_wk-ORDER_TYPE = 'ZO01'.
* fix for getting the right values for service orders
        ls_dw_orstat_wk-netwr =  ls_dw_orstat_wk-netwr.
        ls_dw_orstat_wk-kzwi1 =  ( ls_dw_orstat_wk-kzwi6 + ls_dw_orstat_wk-kzwi3 ).
        ls_dw_orstat_wk-kwmeng = ls_dw_orstat_wk-zmeng.

      ELSE.
        ls_dw_orstat_wk-KZWI1 =  ls_dw_orstat_wk-KZWI1.
        ls_dw_orstat_wk-netwr =  ls_dw_orstat_wk-netwr.

      ENDIF.




      CONVERT DATE ls_dw_orstat_wk-r_date
                   TIME ls_dw_orstat_wk-r_time
           INTO TIME STAMP ls_dw_orstat_wk-tstamps TIME ZONE sy-zonlo.

* linetype = 'C' = Created
      ls_dw_orstat_wk-linetype = 'C'.
* chngind = 'N' = New line No changes
      ls_dw_orstat_wk-chngind = 'N'.
* O = Order, L = Log
      ls_dw_orstat_wk-source = 'O'.


      MOVE-CORRESPONDING ls_dw_orstat_wk TO ls_dw_orstat_rt.

      CLEAR ls_dw_stdcost_wk.
      PERFORM get_stdcosts
              USING ls_dw_orstat_wk
              CHANGING ls_dw_stdcost_wk.
      MOVE-CORRESPONDING ls_dw_stdcost_wk TO ls_dw_orstat_rt.



      INSERT ztdworstat FROM ls_dw_orstat_rt.

    ENDSELECT.
  ENDSELECT.

  COMMIT WORK.


*/
* update with items from sales log
*
* The Created line
*
* Linetype C = Created line,
* affects all changind P = price Q = qty C = cancel D = delete
* Will be treated the same. old info in changind was N = New line is
* now owerwritten
* NETWR = R_VALUE  * R_QTY
* STDCOST = STDCOST  * R_QTY
* STDCOST1 = STDCOST1  * R_QTY
* STDCOST2 = STDCOST2  * R_QTY
* KWMENG = R_QTY
*/

  REFRESH lt_ztdworlog_wk.
  CLEAR ls_dw_orstat_rt.
  CLEAR ls_dw_orstat_wk.

*/
* add index on r_date !*

*
* CHNGIND LINETYPE   R_QTY   R_DATE     R_TIME
*
*  Q       C         1,000   09.11.2009 11:55:01
*  Q       M         1,000   10.11.2009 11:06:38
*
* why read r_date ? if I look in the order today it says 2 pcs.
* if I want to recreate history I put rows in the log
* and I read order stat, qty in order stat says 2 pcs but the
* C linetype is over written with qty 1 at  09.11.2009 and the
* M linetype is created 10.11.2009.
* history read will give 2 pcs

* if we just run in production and read  09.11.2009 the log line
* is not yet created (will be at first log time) but now the order
* gives right info 1 pcs, the at 10.11.2009 log have 2 rows
* but we will only read the linetype = M with qty 1
* production read will give 2pcs
*
*/

  SELECT *
       INTO TABLE lt_ztdworlog_wk
          FROM ztdworlog
         WHERE
        r_date IN so_crdat
    AND vbeln IN so_vbeln
    AND posnr IN so_posnr
    AND linetype = 'C'.
  .

  LOOP AT lt_ztdworlog_wk INTO ls_ztdworlog_wk.

    ls_ztdworlog_wk-KZWI1 =   ls_ztdworlog_wk-KZWI1 * ls_ztdworlog_wk-r_qty.

    ls_ztdworlog_wk-netwr =  ls_ztdworlog_wk-r_value  * ls_ztdworlog_wk-r_qty.

    ls_ztdworlog_wk-stdcost = ls_ztdworlog_wk-stdcost *
                              ls_ztdworlog_wk-r_qty.

    ls_ztdworlog_wk-kwmeng = ls_ztdworlog_wk-r_qty.





    MOVE-CORRESPONDING ls_ztdworlog_wk TO ls_dw_orstat_rt.
    ls_dw_orstat_rt-AUART = ls_ztdworlog_wk-ORDER_TYPE.

    SELECT SINGLE vbeln posnr tstamps linetype
               INTO CORRESPONDING FIELDS OF wa_dw_orstat_trash
         FROM ztdworstat
               WHERE
                   vbeln = ls_dw_orstat_rt-vbeln
               AND posnr = ls_dw_orstat_rt-posnr
               AND tstamps = ls_dw_orstat_rt-tstamps
               AND linetype = ls_dw_orstat_rt-linetype.


    CASE sy-subrc.
      WHEN 4.
        INSERT ztdworstat FROM ls_dw_orstat_rt.
      WHEN 0.
        ls_dw_orstat_rt-chngind = 'N'.
        UPDATE ztdworstat FROM ls_dw_orstat_rt.
    ENDCASE.
    clear ls_ztdworlog_wk.
    clear ls_dw_orstat_rt.
    CLEAR ls_dw_orstat_wk.

  ENDLOOP.




*/
* The Price adj line
*
* Linetype M = Made by program E = Event created
* changind P = price
* NETWR = R_VALUE  * R_QTY
* STDCOST = 0
* STDCOST1 = 0
* STDCOST2 = 0
* KWMENG = 0
* this are new lines comming from saleslog.
*/

  REFRESH lt_ztdworlog_wk.
  CLEAR ls_dw_orstat_rt.
  CLEAR ls_dw_orstat_wk.


  SELECT *
       INTO TABLE lt_ztdworlog_wk
          FROM ztdworlog
         WHERE
* add index on r_date !
        r_date IN so_crdat
    AND vbeln IN so_vbeln
    AND posnr IN so_posnr
    AND linetype IN ('M', 'E', 'C')
    AND chngind = 'P'.

  LOOP AT lt_ztdworlog_wk INTO ls_ztdworlog_wk.

    IF ls_ztdworlog_wk-r_value <= 0.
      ls_ztdworlog_wk-netwr =  ls_ztdworlog_wk-r_value  * ls_ztdworlog_wk-r_qty.
    ENDIF.

    IF ls_ztdworlog_wk-r_value > 0.
      ls_ztdworlog_wk-netwr =  ls_ztdworlog_wk-r_value  * ls_ztdworlog_wk-r_qty.
    ENDIF.

    ls_ztdworlog_wk-KZWI1 = 0.
    ls_ztdworlog_wk-stdcost = 0.
    ls_ztdworlog_wk-kwmeng = 0.



    MOVE-CORRESPONDING ls_ztdworlog_wk TO ls_dw_orstat_rt.
    ls_dw_orstat_rt-AUART = ls_ztdworlog_wk-ORDER_TYPE.

    SELECT SINGLE vbeln posnr tstamps linetype
               INTO CORRESPONDING FIELDS OF wa_dw_orstat_trash
         FROM ztdworstat
               WHERE
                   vbeln = ls_dw_orstat_rt-vbeln
               AND posnr = ls_dw_orstat_rt-posnr
               AND tstamps = ls_dw_orstat_rt-tstamps
               AND linetype = ls_dw_orstat_rt-linetype.
*               AND chngind = 'P'.



    CASE sy-subrc.
      WHEN 4.
        INSERT ztdworstat FROM ls_dw_orstat_rt.
      WHEN 0.
        UPDATE ztdworstat
        set netwr = ls_dw_orstat_rt-netwr
            chngind = 'N'

         WHERE
            vbeln = ls_dw_orstat_rt-vbeln
        AND posnr = ls_dw_orstat_rt-posnr
        AND tstamps = ls_dw_orstat_rt-tstamps
        AND linetype = ls_dw_orstat_rt-linetype.
        .



    ENDCASE.
    clear ls_ztdworlog_wk.
    clear ls_dw_orstat_rt.
    CLEAR ls_dw_orstat_wk.
  ENDLOOP.



*/
* The Cancel, Qty change and delete line
*
* Linetype M = Made by program E = Event created
* changind C = Cancel, Q = Qty change, D = delete
* NETWR = R_VALUE  * R_QTY
* STDCOST = STDCOST  * R_QTY
* STDCOST1 = STDCOST1  * R_QTY
* STDCOST2 = STDCOST2  * R_QTY
* KWMENG = R_QTY
* this are new lines comming from saleslog.
*/

  REFRESH lt_ztdworlog_wk.
  CLEAR ls_dw_orstat_rt.
  CLEAR ls_dw_orstat_wk.

  SELECT *
       INTO TABLE lt_ztdworlog_wk
          FROM ztdworlog
         WHERE
* add index on r_date !
        r_date IN so_crdat
    AND vbeln IN so_vbeln
    AND posnr IN so_posnr
    AND linetype IN ('M', 'E')
    AND chngind IN ('C', 'Q', 'D') .

  LOOP AT lt_ztdworlog_wk INTO ls_ztdworlog_wk.


    ls_ztdworlog_wk-netwr =  ls_ztdworlog_wk-r_value  * ls_ztdworlog_wk-r_qty. " see 213418
*   ls_ztdworlog_wk-netwr = 0. " handeled in price adj

    ls_ztdworlog_wk-KZWI1 =  ls_ztdworlog_wk-KZWI1 * ls_ztdworlog_wk-r_qty.

    ls_ztdworlog_wk-stdcost = ls_ztdworlog_wk-stdcost *
                              ls_ztdworlog_wk-r_qty.


    ls_ztdworlog_wk-kwmeng = ls_ztdworlog_wk-r_qty.


    MOVE-CORRESPONDING ls_ztdworlog_wk TO ls_dw_orstat_rt.
    ls_dw_orstat_rt-AUART = ls_ztdworlog_wk-ORDER_TYPE.

    SELECT SINGLE vbeln posnr tstamps linetype
               INTO CORRESPONDING FIELDS OF wa_dw_orstat_trash
         FROM ztdworstat
               WHERE
                   vbeln = ls_dw_orstat_rt-vbeln
               AND posnr = ls_dw_orstat_rt-posnr
               AND tstamps = ls_dw_orstat_rt-tstamps
               AND linetype = ls_dw_orstat_rt-linetype
               AND chngind IN ('C', 'Q', 'D') .



    CASE sy-subrc.
      WHEN 4.
        INSERT ztdworstat FROM ls_dw_orstat_rt.
      WHEN 0.
        UPDATE ztdworstat FROM ls_dw_orstat_rt.
    ENDCASE.
    clear ls_ztdworlog_wk.
    clear ls_dw_orstat_rt.
    CLEAR ls_dw_orstat_wk.
  ENDLOOP.




*&---------------------------------------------------------------------*
*&      Form  get_stdcosts
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->VALUE(LS_DW_ORSTAT_WK)  text
*      -->LS_DW_STDCOST           text
*----------------------------------------------------------------------*
FORM get_stdcosts
     USING value(ls_dw_orstat_wk)  TYPE ts_dw_orstat
     CHANGING ls_dw_stdcost TYPE ts_dw_stdcost.

  DATA:  ls_konv TYPE konv.
  CLEAR ls_konv.
  CLEAR ls_dw_stdcost_wk.


  SELECT SINGLE
             konv~kbetr
             konv~kwert
             konv~kpein
             konv~waers
             INTO CORRESPONDING FIELDS OF ls_konv
 FROM konv
WHERE konv~knumv = ls_dw_orstat_wk-knumv
  AND konv~kposn = ls_dw_orstat_wk-posnr
  AND konv~kappl = 'V'
  AND konv~kschl = ls_dw_orstat_wk-COST.


  IF sy-subrc = 0.
    IF ls_dw_orstat_wk-ORDER_TYPE = 'ZC01'
     OR ls_dw_orstat_wk-ORDER_TYPE = 'ZO01'.
      ls_dw_stdcost-stdcost = ls_konv-kwert.
*      ls_dw_stdcost-stdcost = ls_konv-kwert * ls_dw_orstat_wk-kwmeng
*                      / ls_konv-kpein.
      ls_dw_stdcost-stdcost_waers = ls_konv-waers.
    ELSE.
      ls_dw_stdcost-stdcost = ls_konv-kbetr * ls_dw_orstat_wk-kwmeng
                    / ls_konv-kpein.
      ls_dw_stdcost-stdcost_waers = ls_konv-waers.
    ENDIF.

  ENDIF.

ENDFORM.                    "get_stdcosts
