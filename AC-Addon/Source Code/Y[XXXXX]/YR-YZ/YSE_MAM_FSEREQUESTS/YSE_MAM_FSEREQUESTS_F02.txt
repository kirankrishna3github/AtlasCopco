*&---------------------------------------------------------------------*
*&  Include           YSE_MAM_FSEREQUESTS_F02
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Module  init_9001  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE init_9001 OUTPUT.

  CLEAR ok_code_9001.
  IMPORT t_rec
         d9001_sswerkf d9001_sswerkt
         d9001_sernamf d9001_sernamt
         d9001_serdatf d9001_serdatt
* Begin of insert MOD-001
         d9001_tplnrf d9001_tplnrt
         d9001_ingrpf d9001_ingrpt
         d9001_gewrkf d9001_gewrkt
* End of insert MOD-001
         d9001_sstatus
    FROM MEMORY ID 'YSE_MAM_FSEREQ'.

ENDMODULE.                 " init_9001  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS_9001  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_9001 OUTPUT.

  SET PF-STATUS '9001'.
  SET TITLEBAR '9001'.

ENDMODULE.                 " STATUS_9001  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  T_TABCT_CHANGE_TC_ATTR  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE T_TABCT_CHANGE_TC_ATTR OUTPUT.

*  DESCRIBE TABLE t_rec LINES t_tabct-lines.
  t_tabct-lines = '999'.

ENDMODULE.                 " T_TABCT_CHANGE_TC_ATTR  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  D9001_FILL_REC  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE D9001_FILL_REC OUTPUT.

  d9001_linesel    = t_rec-sel.
  d9001_swerk      = t_rec-swerk.
  d9001_ernam      = t_rec-ernam.
  d9001_erdat      = t_rec-erdat.
  d9001_nname2     = t_rec-name2.
  d9001_ntel       = t_rec-tel_number.
  d9001_nemail     = t_rec-smtp_addr.
* Begin of insert MOD-001
  d9001_tplnr      = t_rec-tplnr.
  d9001_ingrp      = t_rec-ingrp.
  d9001_gewrk      = t_rec-gewrk.
* End of insert MOD-001

  CASE t_rec-ystatus.
    WHEN 'N'.
      d9001_stat = 'New'.
    WHEN 'P'.
      d9001_stat = 'Processed'.
    WHEN 'R'.
      d9001_stat = 'Rejected'.
    WHEN 'E'.
      d9001_stat = 'Error'.
  ENDCASE.

  WRITE t_rec-equnr TO d9001_equnr NO-ZERO.

  IF t_rec-ystatus = 'N'.       " New
    SELECT SINGLE tplnr adrnr INTO (gv_tplnr, gv_adrnr)
      FROM v_equi WHERE equnr = t_rec-equnr
                    AND datbi = '99991231'
                    AND spras = sy-langu.

    IF sy-subrc = 0.
      SELECT SINGLE name2 tel_number INTO (d9001_cname2, d9001_ctel)
        FROM adrc WHERE addrnumber = gv_adrnr.

      SELECT SINGLE smtp_addr INTO d9001_cemail
        FROM adr6 WHERE addrnumber = gv_adrnr.
    ENDIF.
  ENDIF.

ENDMODULE.                 " D9001_FILL_REC  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  EXIT_COMMAND_9001  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE EXIT_COMMAND_9001 INPUT.

  CASE ok_code_9001.
    WHEN 'BACK'.
      gv_ucomm = ok_code_9001.
      EXPORT gv_ucomm i_logtab TO MEMORY ID 'YSE_MAM_FSEREQ'.
      LEAVE TO SCREEN 0.
    WHEN 'EXIT'.
      gv_ucomm = ok_code_9001.
      EXPORT gv_ucomm i_logtab TO MEMORY ID 'YSE_MAM_FSEREQ'.
      LEAVE TO SCREEN 0.
    WHEN 'CANCEL'.
      gv_ucomm = ok_code_9001.
      EXPORT gv_ucomm i_logtab TO MEMORY ID 'YSE_MAM_FSEREQ'.
      LEAVE TO SCREEN 0.
    WHEN OTHERS.
  ENDCASE.

ENDMODULE.                 " EXIT_COMMAND_9001  INPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9001  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9001 INPUT.

  DATA: ls_data_general      TYPE bapi_itob,
        ls_data_generalx     TYPE bapi_itobx,
        ls_data_specific     TYPE bapi_itob_eq_only,
        ls_data_specificx    TYPE bapi_itob_eq_onlyx,
        ls_data_general_exp  TYPE bapi_itob,
        ls_data_specific_exp TYPE bapi_itob_eq_only,
        ls_return            TYPE bapiret2,
        lv_save_descr        type ktx01.

  CASE ok_code_9001.
    WHEN 'BACK'.
      gv_ucomm = ok_code_9001.
      EXPORT gv_ucomm i_logtab TO MEMORY ID 'YSE_MAM_FSEREQ'.
      LEAVE.
    WHEN 'EXIT'.
      gv_ucomm = ok_code_9001.
      EXPORT gv_ucomm i_logtab TO MEMORY ID 'YSE_MAM_FSEREQ'.
      LEAVE.
    WHEN 'PROC'.
      REFRESH: i_logtab,
               gt_updates.
      PERFORM count_lines.

*.... no lines selected
      IF gv_count IS INITIAL.
        MESSAGE s001(00) WITH text-e07.
        SET SCREEN 9001.
        LEAVE SCREEN.
      ELSE.
*...... Pop-up to warn that all selected NEW lines will be processed
        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
            titlebar              = text-t01
            text_question         = text-t02
            text_button_1         = 'Yes'
*           icon_button_1         = 'ICON_OKAY'
            text_button_2         = 'No'
*           icon_button_2         =
            default_button        = '2'
            display_cancel_button = space
          IMPORTING
            answer                = gv_answer
          EXCEPTIONS
            text_not_found        = 1
            OTHERS                = 2.

        IF gv_answer EQ '2'.
          SET SCREEN 9001.
          LEAVE SCREEN.
        ENDIF.

        LOOP AT t_rec.
          IF t_rec-sel = 'X' and t_rec-ystatus = 'N'.
*.......... Start process changes
            PERFORM process.
            CALL TRANSACTION 'IL02' USING i_bdcdata
                     MODE gv_mod UPDATE 'S'.

            IF sy-subrc <> 0.
              CONCATENATE t_rec-swerk t_rec-ernam t_rec-erdat t_rec-equnr INTO gv_msg
                SEPARATED BY ' - '.
              MESSAGE i001(00) WITH gv_msg ' --> ' text-e13 INTO gv_msg.
              PERFORM add_message_to_tab USING gv_msg 'E'.
              PERFORM get_trans_messages TABLES gt_err.
            ELSE.
*............ ok
              CONCATENATE t_rec-swerk t_rec-ernam t_rec-erdat t_rec-equnr INTO gv_msg
                SEPARATED BY ' - '.
              MESSAGE i001(00) WITH gv_msg ' --> ' text-i16 INTO gv_msg.
              PERFORM add_message_to_tab USING gv_msg ' '.

*............ Modify status from 'New' to 'Processed'
              PERFORM modify_status using 'P'.

*............ Put updated funct.location + equipments into int. table
              SELECT tplnr equnr eqktx APPENDING CORRESPONDING FIELDS OF TABLE gt_updates
                FROM v_equi WHERE tplnr = gv_tplnr
                              AND datbi = '99991231'
                              AND spras = sy-langu.

*............ Update the equipments , only then these will be triggered to the MAM
              LOOP AT gt_updates.
*.............. Change the description
*.............. First save description to put it back after having updated
                lv_save_descr = gt_updates-eqktx.

                gt_updates-eqktx+39(01) = '.'.
                MOVE gt_updates-eqktx TO ls_data_general-descript.
                move 'X'              to ls_data_generalx-descript.

                CALL FUNCTION 'BAPI_EQUI_CHANGE'
                  EXPORTING
                    equipment         = gt_updates-equnr
                    data_general      = ls_data_general
                    data_generalx     = ls_data_generalx
                    data_specific     = ls_data_specific
                    data_specificx    = ls_data_specificx
                  IMPORTING
                    data_general_exp  = ls_data_general_exp
                    data_specific_exp = ls_data_specific_exp
                    return            = ls_return
                  EXCEPTIONS
                    OTHERS            = 1.

                IF sy-subrc  EQ 0.
                  IF ls_return-type EQ 'S' OR ls_return-type IS INITIAL.
                    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
                      EXPORTING
                        wait = 'X'.
                    WAIT UP TO 2 SECONDS.

*.................. Put the description back to the original one
                    MOVE lv_save_descr TO ls_data_general-descript.
                    move 'X'           to ls_data_generalx-descript.

                    CALL FUNCTION 'BAPI_EQUI_CHANGE'
                    EXPORTING
                      equipment         = gt_updates-equnr
                      data_general      = ls_data_general
                      data_generalx     = ls_data_generalx
                      data_specific     = ls_data_specific
                      data_specificx    = ls_data_specificx
                    IMPORTING
                      data_general_exp  = ls_data_general_exp
                      data_specific_exp = ls_data_specific_exp
                      return            = ls_return
                    EXCEPTIONS
                      OTHERS            = 1.
                  endif.

                  IF sy-subrc  EQ 0.
                    IF ls_return-type EQ 'S' OR ls_return-type IS INITIAL.
                      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
                        EXPORTING
                          wait = 'X'.
                    ENDIF.
                  ELSEIF ls_return-type EQ 'E'.
                    MOVE gt_updates-equnr TO gv_msg.
                    MESSAGE i001(00) WITH gv_msg ' --> ' text-e15 INTO gv_msg.
                    PERFORM add_message_to_tab USING gv_msg 'E'.
                    PERFORM get_trans_messages TABLES gt_err.
                  ENDIF.
                ELSEIF ls_return-type EQ 'E'.
                  MOVE gt_updates-equnr TO gv_msg.
                  MESSAGE i001(00) WITH gv_msg ' --> ' text-e15 INTO gv_msg.
                  PERFORM add_message_to_tab USING gv_msg 'E'.
                  PERFORM get_trans_messages TABLES gt_err.
                ENDIF.
              ENDLOOP.
            ENDIF.
          ENDIF.
        ENDLOOP.

        gv_ucomm = ok_code_9001.
        EXPORT gv_ucomm i_logtab gt_updates TO MEMORY ID 'YSE_MAM_FSEREQ'.
        LEAVE TO SCREEN 0.
      ENDIF.
    WHEN 'REJE'.
      REFRESH: i_logtab.
      PERFORM count_lines.

*.... no lines selected
      IF gv_count IS INITIAL.
        MESSAGE s001(00) WITH text-e07.
        SET SCREEN 9001.
        LEAVE SCREEN.
      ELSE.
*...... Pop-up to warn that all selected NEW lines will be rejected
        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
            titlebar              = text-t01
            text_question         = text-t03
            text_button_1         = 'Yes'
*           icon_button_1         = 'ICON_OKAY'
            text_button_2         = 'No'
*           icon_button_2         =
            default_button        = '2'
            display_cancel_button = space
          IMPORTING
            answer                = gv_answer
          EXCEPTIONS
            text_not_found        = 1
            OTHERS                = 2.

        IF gv_answer EQ '2'.
          SET SCREEN 9001.
          LEAVE SCREEN.
        ENDIF.

        LOOP AT t_rec.
          IF t_rec-sel = 'X' and t_rec-ystatus = 'N'.
*.......... Modify status from 'New' to 'Rejected'
            PERFORM modify_status using 'R'.

            IF sy-subrc <> 0.
              CONCATENATE t_rec-swerk t_rec-ernam t_rec-erdat t_rec-equnr INTO gv_msg
                SEPARATED BY ' - '.
              MESSAGE i001(00) WITH gv_msg ' --> ' text-e14 INTO gv_msg.
              PERFORM add_message_to_tab USING gv_msg 'E'.
*              PERFORM get_trans_messages TABLES gt_err.
            ELSE.
*............ ok
              CONCATENATE t_rec-swerk t_rec-ernam t_rec-erdat t_rec-equnr INTO gv_msg
                SEPARATED BY ' - '.
              MESSAGE i001(00) WITH gv_msg ' --> ' text-i17 INTO gv_msg.
              PERFORM add_message_to_tab USING gv_msg ' '.
            ENDIF.
          ENDIF.
        ENDLOOP.

        gv_ucomm = ok_code_9001.
        EXPORT gv_ucomm i_logtab TO MEMORY ID 'YSE_MAM_FSEREQ'.
        LEAVE TO SCREEN 0.
      ENDIF.
*    WHEN 'REFR'.       "Refresh
*      PERFORM refresh_9001.
*      EXPORT t_rec TO MEMORY ID 'YSE_MAM_FSEREQ'.
*      SET SCREEN 9001.
*      LEAVE SCREEN.
    WHEN 'SELA'.       "Select all lines
      LOOP AT t_rec.
        t_rec-sel = 'X'.
        MODIFY t_rec.
      ENDLOOP.
      EXPORT t_rec TO MEMORY ID 'YSE_MAM_FSEREQ'.
      SET SCREEN 9001.
      LEAVE SCREEN.
    WHEN 'DSEL'.       "Deselect all lines
      LOOP AT t_rec.
        t_rec-sel = ' '.
        MODIFY t_rec.
      ENDLOOP.
      EXPORT t_rec TO MEMORY ID 'YSE_MAM_FSEREQ'.
      SET SCREEN 9001.
      LEAVE SCREEN.
* begin of insert MOD-002
    WHEN 'EXPO'.       "Export to Excel
      REFRESH: i_logtab.
      PERFORM count_lines.
      IF gv_count IS INITIAL.               " no line selected
        MESSAGE s001(00) WITH text-e07.
        SET SCREEN 9001.
        LEAVE SCREEN.
      ELSE.
*...... Export selected lines
        LOOP AT t_rec WHERE sel = 'X'.
          MOVE-CORRESPONDING t_rec TO t_export.
          APPEND t_export.
          CLEAR t_export.
        ENDLOOP.

        PERFORM save_table_to_file_local TABLES t_export
                                         CHANGING gv_user_action.

        if gv_user_action <> '9'.        "Canceled
          gv_ucomm = ok_code_9001.
          EXPORT gv_ucomm i_logtab TO MEMORY ID 'YSE_MAM_FSEREQ'.
          LEAVE TO SCREEN 0.
        endif.
      ENDIF.
* end of insert MOD-002
    WHEN OTHERS.
      EXPORT t_rec TO MEMORY ID 'YSE_MAM_FSEREQ'.
      SET SCREEN 9001.
      LEAVE SCREEN.
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_9001  INPUT

*&---------------------------------------------------------------------*
*&      Module  D9001_SELECTLINE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE D9001_SELECTLINE INPUT.

  READ TABLE t_rec INDEX t_tabct-current_line.
  IF sy-subrc = 0.
    IF d9001_linesel = 'X'.
      t_rec-sel = 'X'.
    ELSE.
      CLEAR t_rec-sel.
    ENDIF.
    MODIFY t_rec INDEX t_tabct-current_line.
  ENDIF.

ENDMODULE.                 " D9001_SELECTLINE  INPUT

**&---------------------------------------------------------------------*
**&      Form  REFRESH_9001
**&---------------------------------------------------------------------*
**       Refresh
**----------------------------------------------------------------------*
*FORM refresh_9001.
*
** Remember the lines which were selected
*  t_saverec[] = t_rec[].
*  SORT t_saverec BY swerk ernam erdat equnr.
*
*  PERFORM get_contacts.
*
*  LOOP AT t_rec.
*    READ TABLE t_saverec WITH KEY swerk = t_rec-swerk
*                                  ernam = t_rec-ernam
*                                  erdat = t_rec-erdat
*                                  equnr = t_rec-equnr
*             BINARY SEARCH.
*
*    IF sy-subrc = 0 AND t_saverec-sel = 'X'.
*      t_rec-sel = 'X'.
*      MODIFY t_rec.
*    ENDIF.
*  ENDLOOP.
*
*  SORT t_rec BY swerk ernam erdat equnr.
*
*ENDFORM.                    " REFRESH_9001

*&---------------------------------------------------------------------*
*&      Form  PROCESS
*&---------------------------------------------------------------------*
*       Process changes for NEW entries
*----------------------------------------------------------------------*
FORM PROCESS .

  REFRESH: i_bdcdata, gt_err.

  SELECT SINGLE tplnr INTO gv_tplnr
    FROM v_equi WHERE equnr = t_rec-equnr
                  AND datbi = '99991231'
                  AND spras = sy-langu.

*
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMILO0'  '1110'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'IFLO-TPLNR'  gv_tplnr
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '/00'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

*
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMILO0'  '2100'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=T\02'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

*
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMILO0'  '2100'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=ADRE'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

*
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMILO0'  '6050'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'RILO0-INHER_NO'  c_x
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=NEXT'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

*
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPLSZA1'  '0201'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  if NOT t_rec-name2 IS INITIAL.
    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'ADDR1_DATA-NAME2'  t_rec-name2
          CHANGING struct_bdcdata.
    APPEND struct_bdcdata  TO i_bdcdata.
    CLEAR  struct_bdcdata.
  ENDIF.

  if NOT t_rec-tel_number IS INITIAL.
    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'SZA1_D0100-TEL_NUMBER'  t_rec-tel_number
          CHANGING struct_bdcdata.
    APPEND struct_bdcdata  TO i_bdcdata.
    CLEAR  struct_bdcdata.
  ENDIF.

  if NOT t_rec-SMTP_ADDR IS INITIAL.
    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'SZA1_D0100-SMTP_ADDR'  t_rec-SMTP_ADDR
          CHANGING struct_bdcdata.
    APPEND struct_bdcdata  TO i_bdcdata.
    CLEAR  struct_bdcdata.
  ENDIF.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=CONT'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

*
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'SAPMILO0'  '2100'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=BU'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

ENDFORM.                    " PROCESS

*&---------------------------------------------------------------------*
*&      Form  ADD_MESSAGE_TO_TAB
*&---------------------------------------------------------------------*
*       Add messages to log
*----------------------------------------------------------------------*
FORM add_message_to_tab USING p_msg p_cod.

  i_logtab-msg = p_msg.
  i_logtab-cod = p_cod.
  APPEND i_logtab.
  CLEAR i_logtab.

ENDFORM.                    " ADD_MESSAGE_TO_TAB

*&---------------------------------------------------------------------*
*&      Form  COUNT_LINES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM COUNT_LINES .

  CLEAR: gv_count.
  LOOP AT t_rec.
    IF t_rec-sel = 'X'.
      gv_count = gv_count + 1.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " COUNT_LINES

*&---------------------------------------------------------------------*
*&      Form  GET_TRANS_MESSAGES
*&---------------------------------------------------------------------*
*       Get the errormessages from the performed transaction
*----------------------------------------------------------------------*
*      --> p_errtab    Table with errormessages
*----------------------------------------------------------------------*
FORM GET_TRANS_MESSAGES  TABLES p_errtab STRUCTURE gt_err.

  LOOP AT p_errtab WHERE msgtyp = 'E' OR
                         msgtyp = 'A'.

    CALL FUNCTION 'RH_MESSAGE_GET'
      EXPORTING
*       SPRSL                   = SY-LANGU
        arbgb                   = p_errtab-msgid
        msgnr                   = p_errtab-msgnr
        msgv1                   = p_errtab-msgv1
        msgv2                   = p_errtab-msgv2
        msgv3                   = p_errtab-msgv3
        msgv4                   = p_errtab-msgv4
      IMPORTING
        msgtext                 = gv_mestx
      EXCEPTIONS
        message_not_found       = 1
        OTHERS                  = 2.

    IF sy-subrc = 0.
      PERFORM add_message_to_tab USING gv_mestx 'E'.
    ENDIF.

  ENDLOOP.

ENDFORM.                    " GET_TRANS_MESSAGES

*&---------------------------------------------------------------------*
*&      Form  MODIFY_STATUS
*&---------------------------------------------------------------------*
*       Modify status in custom table
*----------------------------------------------------------------------*
FORM MODIFY_STATUS USING r_stat.

  UPDATE yse_mam_contacts SET ystatus = r_stat
    WHERE swerk = t_rec-swerk
      AND ernam = t_rec-ernam
      AND erdat = t_rec-erdat
      AND equnr = t_rec-equnr.

ENDFORM.                    " MODIFY_STATUS

*----------------------------------------------------------------------*
*       Move t_export in the given file               "MOD-002
*----------------------------------------------------------------------*
*       -->I_FILE
*----------------------------------------------------------------------*
FORM save_table_to_file_local  TABLES  i_file STRUCTURE t_export
                               CHANGING user_action.

  TYPES: abap_encoding TYPE abap_encod.

  DATA: filefilter TYPE string,
        fullpath TYPE string.
  DATA: file_encoding TYPE abap_encoding,
        default_extension type string value `XLS`,
        param_extension type c length 20.

  clear user_action.
  get parameter id 'LIST_CONVERT_TO_DAT' field param_extension.
  if sy-subrc = 0.
    translate param_extension to lower case.
    default_extension = param_extension.
  endif.
  filefilter = text-xls.

  CALL FUNCTION 'GUI_FILE_SAVE_DIALOG'
    EXPORTING
      file_filter       = filefilter
      default_extension = default_extension
      with_encoding     = 'X'
    IMPORTING
      fullpath          = fullpath
      user_action       = user_action
      file_encoding     = file_encoding.

  if file_encoding is initial.
    file_encoding = '4103'.                              "UTF16-LE
  endif.

  MOVE  'Plant' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Request_by' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Request_date' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Equipment' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Current_contact_person' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Current_telephone' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Current_e-mail' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Status' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Functional_Location' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Planning_Group' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Work_Center' to it_title-title.
  APPEND it_title.
  clear it_title.

  IF user_action = 1 OR user_action = 0.                 "Replace or Load
    CALL FUNCTION 'GUI_DOWNLOAD'
      EXPORTING
        filename         = fullpath
        filetype         = 'ASC'
        codepage         = file_encoding
        WRITE_FIELD_SEPARATOR = 'X'
        write_bom        = 'X'
      TABLES
        data_tab         = i_file
        fieldnames       = it_title
      EXCEPTIONS
        file_write_error = 01
        no_batch         = 04
        unknown_error    = 05
        OTHERS           = 99.

    CASE sy-subrc.
      WHEN 0.
      WHEN OTHERS.
        MESSAGE i050(02) RAISING some_error.
    ENDCASE.
    REFRESH i_file.
  ELSEIF user_action = 2.                                "Append
    CALL FUNCTION 'GUI_DOWNLOAD'
      EXPORTING
        append                = 'X'
        filename              = fullpath
        filetype              = 'ASC'
        trunc_trailing_blanks = 'X'
        WRITE_FIELD_SEPARATOR = 'X'
        write_bom             = 'X'
        codepage              = file_encoding
      TABLES
        data_tab              = i_file
      EXCEPTIONS
        invalid_type          = 03
        no_batch              = 04
        unknown_error         = 05
        OTHERS                = 99.
    CASE sy-subrc.
      WHEN 0.
      WHEN OTHERS.
        MESSAGE i050(02) RAISING some_error.
    ENDCASE.
  ENDIF.

ENDFORM.                    " save_table_to_file_local
