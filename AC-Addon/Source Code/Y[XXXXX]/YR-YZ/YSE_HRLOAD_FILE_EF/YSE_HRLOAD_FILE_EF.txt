*&---------------------------------------------------------------------*
*& Report  update YSE_SO_SALKESREP                                                    *
*&                                                                     *
*&---------------------------------------------------------------------*
*&                                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*

REPORT  YSE_HRLOAD_FILE_EF                                  .

TYPES: BEGIN  OF t_salesrep,
                 MANDT         TYPE yse_so_salesrep-mandt,
                 VKORG         TYPE yse_so_salesrep-vkorg,
                 VTWEG         TYPE yse_so_salesrep-vtweg,
                 DIVISION      TYPE yse_so_salesrep-division,
                 KVGR3         TYPE yse_so_salesrep-kvgr3,
                 MVGR3         TYPE yse_so_salesrep-mvgr3,
                 PERNR         TYPE pa0002-pernr,
*                 PERNR         TYPE yse_so_salesrep-pernr,
       END OF t_salesrep.

TYPES: BEGIN  OF t_salesrep_in,
                 VKORG         TYPE yse_so_salesrep-vkorg,
                 VTWEG         TYPE yse_so_salesrep-vtweg,
                 DIVISION      TYPE yse_so_salesrep-division,
                 KVGR3         TYPE yse_so_salesrep-kvgr3,
                 MVGR3         TYPE yse_so_salesrep-mvgr3,
                 PERNR         TYPE pa0002-name2,
*                 PERNR         TYPE yse_so_salesrep-pernr,
       END OF t_salesrep_in.

TYPES: BEGIN  OF t_pa0002,
                 PERNR         TYPE pa0002-pernr,
                 name2         TYPE pa0002-name2,
                 begda         TYPE pa0002-begda,
                 endda         TYPE pa0002-endda,
       END OF t_pa0002.


DATA: i_salesrep               TYPE TABLE OF t_salesrep.
DATA: wa_salesrep              TYPE          t_salesrep.

DATA: i_salesrep_in            TYPE TABLE OF t_salesrep_in.
DATA: wa_salesrep_in           TYPE          t_salesrep_in.

DATA: i_pa0002                 TYPE TABLE OF t_pa0002.
DATA: wa_pa0002                TYPE          t_pa0002.



DATA: GV_PHYS_FILE(60) TYPE C.

DATA: BEGIN OF GI_INP OCCURS 0,
        DATA(650),
      END OF GI_INP.

PARAMETER: P_INP LIKE  RLGRAP-FILENAME DEFAULT 'c:\ATLAS-TEST-SEED-SALESREP-TST.TXT' ,
           P_INPTP LIKE  RLGRAP-FILETYPE DEFAULT 'ASC'.
*           P_OUTP LIKE  FILENAME-FILEINTERN DEFAULT 'HR_DATASET'.




START-OF-SELECTION.

* Get the physical path for the logical filename.
*  CALL FUNCTION 'FILE_GET_NAME'
*    EXPORTING
**   CLIENT                        = SY-MANDT
*      LOGICAL_FILENAME              = P_OUTP
**   OPERATING_SYSTEM              = SY-OPSYS
**   PARAMETER_1                   = ' '
**   PARAMETER_2                   = ' '
**   PARAMETER_3                   = ' '
**   USE_PRESENTATION_SERVER       = ' '
**   WITH_FILE_EXTENSION           = ' '
**   USE_BUFFER                    = ' '
**   ELEMINATE_BLANKS              = 'X'
*    IMPORTING
**   EMERGENCY_FLAG                =
**   FILE_FORMAT                   =
*      FILE_NAME                     = GV_PHYS_FILE
** EXCEPTIONS
**   FILE_NOT_FOUND                = 1
**   OTHERS                        = 2
*            .
*  IF SY-SUBRC <> 0.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.


* Upload the file.
  CALL FUNCTION 'WS_UPLOAD'
    EXPORTING
*   CODEPAGE                      = ' '
      FILENAME                      = P_INP
      FILETYPE                      = P_INPTP
*   HEADLEN                       = ' '
*   LINE_EXIT                     = ' '
*   TRUNCLEN                      = ' '
*   USER_FORM                     = ' '
*   USER_PROG                     = ' '
*   DAT_D_FORMAT                  = ' '
* IMPORTING
*   FILELENGTH                    =
    TABLES
*      DATA_TAB                      = GI_INP
      DATA_TAB                      = i_salesrep_in
* EXCEPTIONS
*   CONVERSION_ERROR              = 1
*   FILE_OPEN_ERROR               = 2
*   FILE_READ_ERROR               = 3
*   INVALID_TYPE                  = 4
*   NO_BATCH                      = 5
*   UNKNOWN_ERROR                 = 6
*   INVALID_TABLE_WIDTH           = 7
*   GUI_REFUSE_FILETRANSFER       = 8
*   CUSTOMER_ERROR                = 9
*   NO_AUTHORITY                  = 10
*   OTHERS                        = 11
            .
  IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  CLEAR wa_salesrep_in.
  CLEAR wa_salesrep.
 LOOP AT i_salesrep_in  INTO wa_salesrep_in.

    REFRESH i_pa0002.

    SELECT pernr name2 begda endda FROM PA0002
                  INTO  CORRESPONDING FIELDS OF TABLE i_pa0002
                  WHERE
                        name2 = wa_salesrep_in-pernr.

    DESCRIBE TABLE  i_pa0002  LINES  sy-tfill.

    IF  sy-tfill  = 1.
      CLEAR wa_salesrep.
      MOVE-CORRESPONDING wa_salesrep_in  TO wa_salesrep.
      READ TABLE i_pa0002   into wa_pa0002 INDEX 1.
      MOVE wa_pa0002-pernr   TO  wa_salesrep-pernr.
      MOVE sy-mandt          TO  wa_salesrep-mandt.
      IF   sy-datum ge wa_pa0002-begda
      and  sy-datum le wa_pa0002-endda.
           Append  wa_salesrep  TO i_salesrep.
      ELSE.
               WRITE: / 'DATUM ERROR FOR = ' , wa_salesrep_in.
      ENDIF.
    ELSE.

      WRITE: / 'ERROR = ' , wa_salesrep_in.

    ENDIF.
  ENDLOOP.

  DESCRIBE TABLE  i_salesrep  LINES  sy-tfill.

    IF sy-tfill NE 0.
      MODIFY YSE_SO_SALESREP FROM   TABLE  i_salesrep.
      IF SY-SUBRC NE 0.
         WRITE: /  ' ERROR DURING MODIFY  - ERROR DURING MODIFY ?????????????????'.
      ELSE.
         WRITE: /  ' MODIFY DONE - MODIFY DONE'.
      ENDIF.
    ELSE.
      WRITE: /  ' NO UPDATE DONE - TABLE EMPTY '.
    ENDIF.
