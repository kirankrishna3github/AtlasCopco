*----------------------------------------------------------------------*
* PROGRAM ID    : YSE_VISA_IDOc_ordersE_LIST                           *
* PROGRAM TITLE : List, Delete & Reprocess IDOCs of ACC INVOICE        *
* AUTHOR        : Anda Wu                                              *
* DATE          : 11/03/2013                                           *
* DEVELOPMENT ID:                                                      *
*                                                                      *
* CHANGE REQUEST NUMBER:                                               *
*                                                                      *
* Program Description: IDOC of ACC INVOICE Operation                   *
*                                                                      *
*----------------------------------------------------------------------*
* CHANGE HISTORY LOG                                                   *

*----------------------------------------------------------------------*
*  DATE    | NAME     |TRANSPORT  | CR# and short Description          *
*----------------------------------------------------------------------*
*11/03/2013|Anda Wu   |CD1K975233 |N/A: Initial version                *
*                      CD1K975244
*                      CD1K975277
*                      CD1K975279
*                      CD1K975284
*----------------------------------------------------------------------*
*11/08/2014|LINS      |CD1K982632 |N/A: Initial version
*
*----------------------------------------------------------------------*
* MOD-001 |10/14/2014| Zhang | CD1K983346        | 001                 *
* Description: List and Reprocess IDoc status 51                       *
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
* MOD-002 |10/21/2014| Zhang | CD1K983422        | 002                 *
* Description: List and Reprocess IDoc status 51                       *
*----------------------------------------------------------------------*
* MOD-002 |10/22/2014| Zhang | CD1K983422        | 003                 *
* Description: List and Reprocess IDoc status 51                       *
*----------------------------------------------------------------------*
* MOD-002 |10/28/2014| Zhang | CD1K983500        | 004                 *
* Description: List and Reprocess IDoc status 51                       *
*----------------------------------------------------------------------*
* MOD-002 |11/11/2014| Zhang | CD1K983712        | 005                 *
* Description: List and Reprocess IDoc status 51                       *
*----------------------------------------------------------------------*
* MOD-006 |10/04/2015| Wu    | CD1K983712        | CR3593              *
* Enhancement ---- Logic Update for YSE_GDS_PORTAL ---INC42360         *
*----------------------------------------------------------------------*
report  yse_acc_idoc_orderse_list.
type-pools: icon.
************************************************************************
* TABLES                                                              *
************************************************************************
tables: likp,
        knvp,
        edids.

************************************************************************
* TYPES                                                             *
************************************************************************
types:  begin of ty_idoc ,
          docnum    type edi_docnum,
        end of ty_idoc,
        begin of ty_out,
          docnum    type edi_docnum,
          ekorg     type ekorg,
          lifnr     type lifnr,
          ihrez     type knvp-knref,
*** Begin of MOD-001 * add***
          knref     type knvp-knref,
*** End of MOD-001 * add***
          bolnr     type bolnr,
          datum     type sy-datum,
          po_belnr  type ebeln,
          credat    type edi_credat,
          cretim    type edi_cretim,
          text      type char120,
          selkz     type xfeld,
          zzcol     type col_code,
***===================================================ADD BY LINS 140811¡ý
          zorgid    type edi_orgid,
          zbelnr    type edi_belnr,
***===================================================ADD BY LINS 140811¡ü
******begin of mod-006 insert
          bname     type edi_bname,
******end of mod-006 insert
        end of ty_out,
        begin of ty_likp,
          vbeln type vbeln_vl,
          lfdat type lfdat,
          bolnr type bolnr,
        end of ty_likp,
        begin of ty_vbuk,
          vbeln type vbuk-vbeln,
          wbstk type vbuk-wbstk,
        end of ty_vbuk.

************************************************************************
* CLASSES DEFINITION                                                   *
************************************************************************
class lcl_event_handler definition final.
  public section.
    methods:
*   Double click control
    handle_double_click
          for event double_click of cl_gui_alv_grid
          importing e_row. "e_column.
endclass.                    "lcl_event_handler DEFINITION

************************************************************************
* CLASS  IMPLEMENTATION                                                *
************************************************************************
*----------------------------------------------------------------------*
* CLASS lcl_event_handler IMPLEMENTATION
*----------------------------------------------------------------------*
class lcl_event_handler implementation.
* Handle double click
  method handle_double_click.
    perform handle_double_click using e_row.
  endmethod.                    "handle_double_click
endclass.                    "lcl_event_handler IMPLEMENTATION

************************************************************************
* WORKAREAS                                                            *
************************************************************************
data: gs_idoc           type ty_idoc,
      gs_edidd          type edidd,
      gs_edidc          type edidc,
      gs_bdcdata        type bdcdata,
      gs_e1edk14        type e1edk14,
      gs_e1edka1        type e1edka1,
      gs_layout         type lvc_s_layo,
      gs_selected_rows  type lvc_s_roid,
      gs_fcat           type lvc_s_fcat,
      gs_stable         type lvc_s_stbl,
      gs_out            type ty_out.
***===================================================ADD BY LINS 140811¡ý
data: gt_screen        type c.
***===================================================ADD BY LINS 140811¡ü
************************************************************************
* INTERNAL TABLES                                                      *
************************************************************************
data: gt_idoc           type standard table of ty_idoc,
      gt_edidd          type standard table of edidd,
      gt_bdcdata        type standard table of bdcdata,
      gt_out            type standard table of ty_out,
      gt_selected_rows  type lvc_t_roid,
      gt_fcat           type lvc_t_fcat,
      gt_out2           type standard table of ty_out.

************************************************************************
* VARIABLES                                                            *
************************************************************************
data: gv_error          type xfeld,
      gv_col(10)        type n,
      gv_text           type char80,
      gv_counter        type char10,
      gv_total          type char10,
      gv_answer         type c,
      ok_code           type sy-ucomm,
      gv_container      type scrfname value 'CUSTOM_CONTROL'.

************************************************************************
* OBJECTS                                                              *
************************************************************************
data: gr_grid             type ref to cl_gui_alv_grid,
      gr_custom_container type ref to cl_gui_custom_container,
      gr_event_handler    type ref to lcl_event_handler.

************************************************************************
* CONSTANTS                                                            *
************************************************************************
constants: c_orders   type edi_mestyp   value 'ORDERS',
           c_acc(3)   type c            value 'ACC',
           c_gds      type vbkd-bsark   value 'GDS',
           c_sim      type vbkd-bsark   value 'SIM',
           c_51       type edi_status   value '51',
           c_68       type edi_status   value '68',
           c_x        type c            value 'X',
           c_mode_s   type c            value 'S',
           c_save_a   type c            value 'A'.
***===================================================ADD BY LINS 140811¡ý
constants:c_ordchg   type edi_mestyp   value 'ORDCHG'.
***===================================================ADD BY LINS 140811¡ü
************************************************************************
* SELECTION-SCREEN                                                     *
************************************************************************
***===================================================MOD BY LINS 140811¡ý
*SELECTION-SCREEN  BEGIN OF BLOCK sel  WITH FRAME  TITLE text-s01.
*PARAMETERS:     p_bsark  TYPE vbkd-bsark DEFAULT 'ACC' OBLIGATORY,
*                p_famcd  TYPE yse_sd_acc_fam-famback OBLIGATORY.
*SELECT-OPTIONS: so_datum FOR sy-datum DEFAULT sy-datum,
*                so_ihrez FOR knvp-knref,
*                so_bolnr FOR likp-bolnr.
*SELECTION-SCREEN  END OF BLOCK sel.

selection-screen  begin of block sel  with frame  title text-s01.
*PARAMETERS:     P_BSARK  TYPE VBKD-BSARK             OBLIGATORY,
*                P_FAMCD  TYPE YSE_SD_ACC_FAM-FAMBACK OBLIGATORY MODIF ID BL1.
select-options: so_idoc for edids-docnum,
                so_datum for sy-datum default sy-datum          modif id bl1,
                so_ihrez for knvp-knref                         modif id bl1,
                so_bolnr for likp-bolnr                         modif id bl1,
*** Begin of MOD-001 * add***
                so_knref for knvp-knref                         modif id bl1,
*** End of MOD-001 * add***

*** Begin of MOD-004 * add***
                so_date  for sy-datum default sy-datum          modif id bl1.
*** End of MOD-004 * add***

select-options: s_belnr  for likp-bolnr                         modif id bl2.
*** Begin of MOD-001 * add***
select-options: s_knref  for knvp-knref                         modif id bl2.
*** End of MOD-001 * add***

selection-screen  end of block sel.
***===================================================MOD BY LINS 140811¡ü
*&---------------------------------------------------------------------*
*& INITIALIZATION                                                       *
*&---------------------------------------------------------------------*
initialization.
* Initializ the globbal variables...
  perform do_init.
***===================================================ADD BY LINS 140811¡ý
  perform set_scr.
*&---------------------------------------------------------------------*
*& AT SELECTION-SCREEN OUTPUT                                          *
*&---------------------------------------------------------------------*
at selection-screen output.
  loop at screen.
*    IF SCREEN-NAME = 'P_BSARK'.
*      SCREEN-INPUT = '0'.
*    ENDIF.

    case gt_screen .
      when 'A'.
        if screen-group1 = 'BL2'.
          screen-active = '1'.
        endif.
        if screen-group1 = 'BL1' .
          screen-active = '0'.
        endif.
        when'S'.
        if screen-group1 = 'BL1'.
          screen-active = '1'.
        endif.
        if screen-group1 = 'BL2' .
          screen-active = '0'.
        endif.
      when others.
        if screen-group1 = 'BL1'.
          screen-active = '1'.
        endif.
        if screen-group1 = 'BL2' .
          screen-active = '0'.
        endif.
    endcase.

    modify screen.
  endloop.
***===================================================ADD BY LINS 140811¡ü

*&---------------------------------------------------------------------*
*& AT SELECTION-SCREEN                                                 *
*&---------------------------------------------------------------------*
at selection-screen.
* AUTHORITY-CHECK
*  PERFORM  check_authorization.

*&---------------------------------------------------------------------*
*& AT SELECTION-SCREEN  ON VALUE-REQUEST                               *
*&---------------------------------------------------------------------*
*AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FAMCD.
* F4-help Function Implementation for FAM code
*  PERFORM F4_FAMCODE.

*AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_BSARK.
* F4-help Function Implementation for Purchase order type
*  PERFORM F4_BSARK.

*&---------------------------------------------------------------------*
*&  MAIN PROGRAM                                                       *
*&---------------------------------------------------------------------*
start-of-selection.
* Statistics for transaction / program
  call method ycl_statistics=>record_transaction.
  call screen 0100.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
module status_0100 output.

  set pf-status 'YSE_GDS_IDOC'.
  set titlebar  'IDOCS_LIST'.
  perform display_report.

endmodule.                 " STATUS_0100  OUTPUT

*&---------------------------------------------------------------------*
*&      Form  SELECT_DATA
*&---------------------------------------------------------------------*
*       Select data
*----------------------------------------------------------------------*
form select_data .

* Progress indicator
  gv_text = 'Data is being selected'(i01).
  call function 'SAPGUI_PROGRESS_INDICATOR'
    exporting
      text = gv_text.

  refresh: gt_idoc.
  refresh: gt_out.
* Select Idocs with status 51
  select docnum into table gt_idoc
         from edidc
********begin of mod-006 mod******
         where docnum in so_idoc
           and status = c_51
*         WHERE ( STATUS = C_51
*                or status = c_68 )
********end of mod-006 mod******
*           AND mescod = c_acc
           and mestyp = c_orders.
  gv_counter = 0.
  describe table gt_idoc lines gv_total.

* Process segments
  loop at gt_idoc into gs_idoc.
    add 1 to gv_counter.
    gv_text = 'IDoc & (& of &) is being processed'(i02).
    replace '&' with gs_idoc-docnum into gv_text.
    replace '&' with gv_counter     into gv_text.
    replace '&' with gv_total       into gv_text.
    condense gv_text.
    call function 'SAPGUI_PROGRESS_INDICATOR'
      exporting
        text = gv_text.
    clear: gv_error,
           gt_edidd[].
*   Get IDoc data
    call function 'IDOC_READ_COMPLETELY'
      exporting
        document_number         = gs_idoc-docnum
      importing
        idoc_control            = gs_edidc
      tables
        int_edidd               = gt_edidd
      exceptions
        document_not_exist      = 1
        document_number_invalid = 2
        others                  = 3.
    if sy-subrc = 0.
      perform fill_output.
    endif.
  endloop.

endform.                    " SELECT_DATA

*&---------------------------------------------------------------------*
*&      Form  FILL_OUTPUT
*&---------------------------------------------------------------------*
*       Fill output table
*----------------------------------------------------------------------*
form fill_output .

  data: lt_edids    type standard table of edids,
        ls_edids    type edids,
        ls_e1edk02  type e1edk02.

  clear gs_out.
  gs_out-docnum = gs_idoc-docnum.
  loop at gt_edidd into gs_edidd.
*   Check data
    case gs_edidd-segnam.

      when 'E1EDKA1'.                        "Partner data (header)
        move gs_edidd-sdata to gs_e1edka1.
*       Check vendor
*** Begin of MOD-001 * mod***
*        IF GS_E1EDKA1-PARVW = 'AG'.          "Vendor code
        if gs_e1edka1-parvw = 'WE'.          "Vendor code
*** End of MOD-001 * mod***

          if gs_e1edka1-ihrez in so_ihrez.
            gs_out-ihrez = gs_e1edka1-ihrez.
          else.
            gv_error = c_x.
            exit.
          endif.
*** Begin of MOD-001 * add***
          if gs_e1edka1-knref in so_knref.
            gs_out-knref = gs_e1edka1-knref.
          else.
            gv_error = c_x.
            exit.
          endif.
*** End of MOD-001 * add***
        endif.
********begin of mod-006 insert
        if gs_e1edka1-parvw = 'AG'..
          gs_out-bname = gs_e1edka1-bname.
        endif.
********end of mod-006 insert

      when 'E1EDK14'.                        "Organ. data (header)
        move gs_edidd-sdata to gs_e1edk14.
        if gs_e1edk14-qualf = '008' and gs_e1edk14-orgid is not initial.
          if gs_e1edk14-orgid(3) = 'CQC'.
            gs_out-ekorg = gs_e1edk14-orgid(3).
          else.
            gv_error = c_x.
            exit.
          endif.
        endif.
        if gs_e1edk14-qualf = '019'.
*** Begin of MOD-002 * add***
*          IF P_BSARK = 'GDS'.
          if  (      gs_e1edk14-orgid(4) <> 'SCL'
                 and gs_e1edk14-orgid(4) <> 'SEED'
                 and gs_e1edk14-orgid(4) <> 'GDS').
            gv_error = c_x.
            exit.
          endif.
*          ELSE.
**** End of MOD-002 * add***
*            IF NOT (  GS_E1EDK14-ORGID(4) = P_BSARK
*                    OR P_BSARK IS INITIAL ).
*              GV_ERROR = C_X.
*              EXIT.
*            ENDIF.
*          ENDIF.
*** Begin of MOD-002 * add***
          gs_out-zorgid = gs_e1edk14-orgid.
*** End of MOD-002 * add***
        endif.

      when 'E1EDK02'.                        "Refer. data (header)
        move gs_edidd-sdata to ls_e1edk02.

*** Begin of MOD-001 * add***
        if ls_e1edk02-qualf = '001'.
*** End of MOD-001 * add***
          if    ls_e1edk02-belnr in so_bolnr
          and ls_e1edk02-datum in so_datum.
            gs_out-bolnr = ls_e1edk02-belnr.
            gs_out-datum = ls_e1edk02-datum.
          else.
            gv_error = c_x.
            exit.
          endif.
*** Begin of MOD-001 * add***
        endif.
*** End of MOD-001 * add***

    endcase.

    refresh: lt_edids.
    select *
    from   edids
    into   table lt_edids
    where  docnum = gs_idoc-docnum
******begin of mod-006 mod
    and    status = c_51.
*    AND   ( STATUS = C_51 or STATUS = C_68 ).
******end of mod-006 mod
    if sy-subrc eq 0.

*** Begin of MOD-005 * mod***
*         SORT LT_EDIDS BY LOGDAT DESCENDING.
      sort lt_edids by logdat descending
                       logtim descending
                       countr descending.
*** End of MOD-005 * mod***

      read table lt_edids into ls_edids index 1.
      if not ls_edids-stamid is initial.
        message id ls_edids-stamid type 'E' number ls_edids-stamno
                into gs_out-text
                with ls_edids-stapa1 ls_edids-stapa2 ls_edids-stapa3 ls_edids-stapa4.
        gs_out-credat = gs_edidc-credat.
        gs_out-cretim = gs_edidc-cretim.
      endif.

*** Begin of MOD-004 * add***
      if gs_out-credat not in so_date.
        gv_error = c_x.
      endif.
*** End of MOD-004 * add***

    endif.
  endloop.

  if gv_error is initial.
    append gs_out to gt_out.
  endif.

endform.                    " FILL_OUTPUT

*&---------------------------------------------------------------------*
*&      Form  ALV_FCAT
*&---------------------------------------------------------------------*
*       ALV field catalog
*----------------------------------------------------------------------*
form alv_fcat .

  clear gv_col.
  refresh: gt_fcat.
***===================================================ADD BY LINS 140811¡ý
  if gt_screen <> 'A'.
***===================================================ADD BY LINS 140811¡ü
* Fullfill the fieldcat
    perform add_field using:
      'DOCNUM' 16 'IDoc number'(t01)  'IDoc number'(t01)     c_x  c_x,
*****begin of mod-006 insert
        'BNAME' 35 'Customer SO created by'(t88)  'CusSO Crt.by'(t89)    ' '  ' ',
*****end of mod-006 insert
*** Begin of MOD-002 * add***
      'ZORGID'  25 'Purchase Order Type'(t05) 'Purchase Order Type'(t05) ' '  ' ',
*** End of MOD-002 * add***
      'IHREZ'  30 'Web Order No.'(t03)  'Web Order No.'(t03) ' '  ' ',
*** Begin of MOD-001 * add***
      'KNREF'  30 'Customer code'(t02)   'Customer code'(t02) ' '  ' ',
*** End of MOD-001 * add***
      'BOLNR'  35 'Customer Document No.'(t04) 'Customer Document No.'(t04)   ' '  ' '.
*    IF P_BSARK <> 'GDS'.
*      PERFORM ADD_FIELD USING:
*        'DATUM'  10 'Post Date'(T11)  'Post Date'(T11) ' '  ' '.
*    ENDIF.
*** Begin of MOD-003 * add***
    perform add_field using:
  'CREDAT'  10 'Created Date'(t06)  'Created Date'(t06) ' '  ' ',
*** End of MOD-003 * add***
  'TEXT'  120 'Error Message'(t13)  'Error Message'(t13)       ' '  ' '.
***===================================================ADD BY LINS 140811¡ý
  else.
    perform add_field using:
      'DOCNUM' 16 'IDoc number'(t01)   'IDoc number'(t01)     c_x  c_x,
*****begin of mod-006 insert
        'BNAME' 35 'Customer SO created by'(t88)  'CusSO Crt.by'(t89)     ' '  ' ',
*****end of mod-006 insert
      'ZORGID' 25 'IDOC organization'(t14)  'IDOC organization'(t14) ' '  ' ',
      'ZBELNR' 35 'IDOC document number'(t15) 'IDOC document number'(t15)  ' '  ' ',
*** Begin of MOD-001 * add***
      'KNREF'  30 'Customer code'(t02)  'Customer code'(t02) ' '  ' ',
*** End of MOD-001 * add***
      'TEXT'  120 'Error Message'(t13)   'Error Message'(t13)     ' '  ' '.
  endif.
***===================================================ADD BY LINS 140811¡ü
endform.                    " ALV_FCAT

*&---------------------------------------------------------------------*
*&      Form  ADD_FIELD
*&---------------------------------------------------------------------*
*       Add field to field catalog
*----------------------------------------------------------------------*
form add_field  using    p_field type lvc_fname
                         p_len   type lvc_outlen
                         p_descr_l
                         p_descr_m
                         p_hotspot type c
                         p_key type c.

  gv_col = gv_col + 1.

  clear gs_fcat.
  gs_fcat-col_pos    = gv_col.
  gs_fcat-fieldname  = p_field.
  gs_fcat-outputlen  = p_len.

  gs_fcat-seltext  = p_descr_l.
  gs_fcat-scrtext_l  = p_descr_l.
  gs_fcat-scrtext_m  = p_descr_m.
  gs_fcat-scrtext_s  = p_descr_m.
  gs_fcat-fix_column = c_x.
  gs_fcat-emphasize  = c_x.
  gs_fcat-hotspot    = p_hotspot.
  gs_fcat-key        = p_key.

  if gs_fcat-fieldname   = 'LIGHT'.
    gs_fcat-icon         = c_x.  " Display the field as ICON
    gs_fcat-inttype      = 'C'.
  endif.

  append gs_fcat to gt_fcat.

endform.                    " ADD_FIELD

*&---------------------------------------------------------------------*
*&      Form  ALV_LAYOUT
*&---------------------------------------------------------------------*
*       Modify ALV layout
*----------------------------------------------------------------------*
form alv_layout .

  gs_layout-zebra       = c_x.
  gs_layout-no_keyfix   = c_x.
  gs_layout-info_fname  = 'ZZCOL'.
  gs_layout-sel_mode    = 'A'.
  gs_layout-cwidth_opt  = c_x.
  gs_layout-grid_title  = 'List and Reprocess IDoc status [51,68]'(h02).


endform.                    " ALV_LAYOUT

*&---------------------------------------------------------------------*
*&      Form  DELETE_IDOCS
*&---------------------------------------------------------------------*
*       Delete Idocs
*----------------------------------------------------------------------*
form delete_idocs .

* Internal table with IDoc status
  data: lt_edids      type standard table of edids  ,
        ls_edids      type edids.

* Internal table with IDoc status counter
  types: begin of lty_count  ,
          docnum      type edi_docnum,
          countr      type edi_countr,
         end of lty_count.

  data: lt_count type standard table of lty_count,
        ls_count type lty_count.

  data: lt_docnum_range type range of edidc-docnum,
        ls_docnum_range like line of lt_docnum_range.

  clear: lt_edids[],
         ls_docnum_range.

  refresh: gt_selected_rows.
  clear:   gs_selected_rows.

  call method gr_grid->get_selected_rows
    importing
      et_row_no = gt_selected_rows.

  if not gt_selected_rows is initial.

* Confirm delete
    call function 'POPUP_TO_CONFIRM'
      exporting
        titlebar              = text-p01
        text_question         = text-p02
        icon_button_1         = 'ICON_OKAY'
        icon_button_2         = 'ICON_CANCEL'
        default_button        = '2'
        display_cancel_button = space
      importing
        answer                = gv_answer
      exceptions
        text_not_found        = 1
        others                = 2.
    if sy-subrc <> 0.
      message id sy-msgid type sy-msgty number sy-msgno
              with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    endif.

    check gv_answer = '1'.

    ls_docnum_range-sign   = 'I'.
    ls_docnum_range-option = 'EQ'.

    clear: gs_selected_rows.
    loop at gt_selected_rows into gs_selected_rows.
      loop at gt_out2 into gs_out.
        if sy-tabix eq gs_selected_rows-row_id.
          select * appending table lt_edids
                   from edids
                   where docnum = gs_out-docnum
**********begin of mod-006 mod
                     and status = c_51.
*                     AND ( STATUS = C_51 or status = c_68 ).
**********end of mod-006 mod
*   Control record
          ls_docnum_range-low = gs_out-docnum.
          append ls_docnum_range to lt_docnum_range.
        endif.
      endloop.
    endloop.

* IDocs selected ?
    check not lt_docnum_range is initial.

* Get status counters for IDocs
    select docnum countr into table lt_count
           from edids
           where docnum in lt_docnum_range.

* Keep the latest status counter
    sort lt_count by docnum ascending
                     countr descending.

    delete adjacent duplicates from lt_count
           comparing docnum.

* Get latest error (status 51 to be reprocessed)
    sort lt_edids by docnum ascending
                    logdat descending logtim descending.

    delete adjacent duplicates from lt_edids
           comparing docnum.

* Set counter
    loop at lt_edids into ls_edids.
      read table lt_count
        into ls_count
        with key docnum = ls_edids-docnum
                            binary search.
      ls_edids-LOGDAT = sy-datum.
      ls_edids-LOGTIM = sy-UZEIT.
      ls_edids-countr = ls_count-countr + 1.
      ls_edids-CREDAT = sy-datum.
      ls_edids-CRETIM = sy-UZEIT.
      ls_edids-UNAME  = sy-uname.
      ls_edids-STATXT = 'IDOC Archived'.
      ls_edids-STATYP = 'E'.
      ls_edids-STAMID = 'YSE_INTERFACES'.
      ls_edids-STAMNO = '048'.
      modify lt_edids from ls_edids.
    endloop.

* Insert status records
    insert edids from table lt_edids.
    commit work and wait.

* Update control records
    update edidc
           set status = c_68
           where docnum in lt_docnum_range.
    commit work and wait.

  endif.
endform.                    " DELETE_IDOCS

*---------------------------------------------------------------------*
*&      Form  DELETE_IDOCS
*&---------------------------------------------------------------------*
*       Reprocess Idocs
*----------------------------------------------------------------------*
form reprocess_idocs .

* Internal table with IDoc status
  data: lt_edids      type standard table of edids ,
        ls_edids      type edids.

* Internal table with IDoc status counter
  types:begin of lty_count,
          docnum      type edi_docnum,
          countr      type edi_countr,
        end of lty_count.
  data: lt_count type standard table of lty_count,
        ls_count type lty_count.

  data: lt_sel_tab  type standard table of rsparams,
        ls_sel_tab  type  rsparams.
  data: lt_docnum_range type range of edidc-docnum,
        ls_docnum_range like line of lt_docnum_range.

  clear: lt_edids[],
         lt_docnum_range[].
  refresh: gt_selected_rows.
  clear:   gs_selected_rows.

  call method gr_grid->get_selected_rows
    importing
      et_row_no = gt_selected_rows.

  if not gt_selected_rows is initial.


    ls_docnum_range-sign   = 'I'.
    ls_docnum_range-option = 'EQ'.

    clear: gs_selected_rows.
    loop at gt_selected_rows into gs_selected_rows.
      loop at gt_out2 into gs_out.
        if sy-tabix eq gs_selected_rows-row_id.
          select * appending table lt_edids
                   from edids
                   where docnum = gs_out-docnum
*********begin of mod-006 mod
                     and status = c_51.
*                     AND ( STATUS = C_51 or STATUS = C_68 ).
*********end of mod-006 mod
*   Control record
          ls_docnum_range-low = gs_out-docnum.
          append ls_docnum_range to lt_docnum_range.
        endif.
      endloop.
    endloop.

* IDocs selected ?
    check not lt_docnum_range is initial.

* Get status counters for IDocs
    select docnum countr into table lt_count
           from edids
           where docnum in lt_docnum_range.

* Keep the latest status counter
    sort lt_count by docnum ascending
                     countr descending.

    delete adjacent duplicates from lt_count
           comparing docnum.

* Get latest error (status 51 to be reprocessed)
    sort lt_edids by docnum ascending
                    logdat descending logtim descending.

    delete adjacent duplicates from lt_edids
           comparing docnum.

* Set counter
    loop at lt_edids into ls_edids.
      read table lt_count
        into ls_count
        with key docnum = ls_edids-docnum
          binary search.
      ls_edids-countr = ls_count-countr + 1.
      modify lt_edids from ls_edids.
    endloop.

* Insert status records
    insert edids from table lt_edids.
    commit work and wait.

* Selection table for IDoc reprocessing
    clear lt_sel_tab.
    refresh lt_sel_tab.
    ls_sel_tab-selname = 'SO_MESTY'.
    ls_sel_tab-kind    = 'S'.
    ls_sel_tab-sign    = 'I'.
    ls_sel_tab-option  = 'EQ'.
    ls_sel_tab-low     = c_orders.
    append ls_sel_tab to lt_sel_tab.
    ls_sel_tab-selname = 'SO_DOCNU'.
    ls_sel_tab-kind    = ''.
    ls_sel_tab-sign    = 'I'.
    ls_sel_tab-option  = 'EQ'.
    loop at lt_docnum_range into ls_docnum_range.
      ls_sel_tab-low     = ls_docnum_range-low.
      append ls_sel_tab to lt_sel_tab.
    endloop.

* Reprocess IDocs
    submit rbdmanin with selection-table lt_sel_tab
                    and return.
  endif.
endform.                    " REPROCESS_IDOCS

*&---------------------------------------------------------------------*
*&      Form  REFRESH_REPORT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form refresh_report .

  perform display_report.

endform.                    " REFRESH_REPORT


*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
module user_command_0100 input.

  case ok_code.
    when 'BACK'.
      set screen 0.
      leave screen.
    when 'DEL'.
*     Delete IDocs
      perform delete_idocs.
    when 'REP'.
*     Reprocess IDocs
      perform reprocess_idocs.
    when 'REF'.
*     Refresh Report
      perform refresh_report.
  endcase.

endmodule.                 " USER_COMMAND_0100  INPUT

*&---------------------------------------------------------------------*
*&      Form  DISPLAY_REPORT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form display_report .
***===================================================ADD BY LINS 140811¡ý
  if gt_screen <> 'A'.
***===================================================ADD BY LINS 140811¡ü
    perform select_data.
***===================================================ADD BY LINS 140811¡ý
  else.
    perform select_ordchg_data.
  endif.
***===================================================ADD BY LINS 140811¡ü
  refresh: gt_out2.
  append lines of gt_out[] to gt_out2.

  if gr_custom_container is initial.

    create object gr_custom_container
      exporting
        container_name              = gv_container
      exceptions
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5.

    create object gr_grid
      exporting
        i_parent = gr_custom_container.

    perform alv_layout.
    perform alv_fcat.

    create object gr_event_handler.

*Display the table Contents in ALV format
    call method gr_grid->set_table_for_first_display
      exporting
        is_layout       = gs_layout
        i_default       = c_x
        i_save          = c_save_a
      changing
        it_outtab       = gt_out2
        it_fieldcatalog = gt_fcat.
*   Enable line selection and double clicking
    set handler gr_event_handler->handle_double_click for gr_grid.
  else.
    call method gr_grid->refresh_table_display
      exporting
        is_stable      = gs_stable
        i_soft_refresh = c_x.
  endif.
endform.                    " DISPLAY_REPORT

***********************************************************************
* Form HANDLE_DOUBLE_CLICK                                             *
************************************************************************
*      -->P_E_ROW_ID     text                                          *
*      -->P_E_COLUMN_ID  text                                          *
************************************************************************
* When a field in the ALV grid has been double clicked, load the       *
* detail overview for that period and rental depot.                    *
************************************************************************
form handle_double_click  using  p_e_row_id type lvc_s_row.

  data: gv_mode    type c             value 'E'.

  clear gt_out.
  read table gt_out2 into gs_out index p_e_row_id.

* If Contract Number clicked
*  SET PARAMETER ID 'DCN' FIELD gt_out-docnum.
  perform prepare_show_idoc.
  call transaction 'WE02' using gt_bdcdata
           mode gv_mode update c_mode_s.

endform.            " handle_double_click

************************************************************************
* Show IDOC                                                            *
************************************************************************

form prepare_show_idoc.

  data: lv_date type d,
        lv_sysdate type sy-datum.

  refresh: gt_bdcdata.
* Screen 1
  perform fill_bdcdata in program yam_common_routines
           using    'RSEIDOC2'  '1000'  c_x  ''   ''
           changing gs_bdcdata.
  append gs_bdcdata  to gt_bdcdata.
  clear  gs_bdcdata.

  clear lv_date.
  lv_sysdate = gs_out-credat - 1.
  write lv_sysdate to lv_date.
  perform fill_bdcdata in program yam_common_routines
       using    ''  ''  ''  'CREDAT-LOW' lv_date
          changing gs_bdcdata.
  append gs_bdcdata  to gt_bdcdata.
  clear  gs_bdcdata.

  perform fill_bdcdata in program yam_common_routines
       using    ''  ''  ''  'DOCNUM-LOW'  gs_out-docnum
          changing gs_bdcdata.
  append gs_bdcdata  to gt_bdcdata.
  clear  gs_bdcdata.



  perform fill_bdcdata in program yam_common_routines
           using    ''  ''  ''  'BDC_OKCODE'  '=ONLI'
           changing gs_bdcdata.
  append gs_bdcdata  to gt_bdcdata.
  clear  gs_bdcdata.

* Screen 2

  perform fill_bdcdata in program yam_common_routines
         using    'IDOC_TREE_CONTROL'  '0100'  c_x  ''   ''
         changing gs_bdcdata.
  append gs_bdcdata  to gt_bdcdata.
  clear  gs_bdcdata.


endform.                    "prepare_show_idoc
*&---------------------------------------------------------------------*
*&      Form  DO_INIT
*&---------------------------------------------------------------------*
*       Do initilization
*----------------------------------------------------------------------*
form do_init .

* Initital the global workareas
  clear:  gs_idoc           ,
          gs_edidd          ,
          gs_edidc          ,
          gs_bdcdata        ,
          gs_e1edk14        ,
          gs_e1edka1        ,
          gs_layout         ,
          gs_selected_rows  ,
          gs_fcat           ,
          gs_stable         ,
          gs_out            .

* Initital the global internal tables
  refresh:gt_idoc           ,
          gt_edidd          ,
          gt_bdcdata        ,
          gt_out            ,
          gt_selected_rows  ,
          gt_fcat           ,
          gt_out2           .

* Initital the global variables
  clear:  gv_error          ,
          gv_col(10)        ,
          gv_text           ,
          gv_counter        ,
          gv_total          ,
          gv_answer         ,
          ok_code           .

endform.                    " DO_INIT
*&---------------------------------------------------------------------*
*&      Form  F4_FAMCODE
*&---------------------------------------------------------------------*
*       F4-help Function Implementation for FAM code
*----------------------------------------------------------------------*
*FORM F4_FAMCODE .
*  TYPES:  BEGIN OF LTY_FAM,
*            FAMCUST TYPE YSE_SD_ACC_FAM-FAMCUST,
*            FAMBACK TYPE YSE_SD_ACC_FAM-FAMBACK,
*          END OF LTY_FAM.
*  DATA: LT_FAM TYPE TABLE OF LTY_FAM.
*  DATA: LT_RETURN TYPE TABLE OF DDSHRETVAL,
*        LS_RETURN TYPE DDSHRETVAL.
*
*  SELECT FAMCUST            "FAM Code Customer
*         FAMBACK            "Back-end FAM Customer
*    FROM YSE_SD_ACC_FAM
*    INTO TABLE LT_FAM.                                "#EC CI_SGLSELECT
*  DELETE ADJACENT DUPLICATES FROM LT_FAM.
*
*  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
*    EXPORTING
*      RETFIELD        = 'FAMBACK'
*      DYNPPROG        = SY-REPID
*      DYNPROFIELD     = 'P_FAMCD'
*      VALUE_ORG       = 'S'
*    TABLES
*      VALUE_TAB       = LT_FAM
*      RETURN_TAB      = LT_RETURN
*    EXCEPTIONS
*      PARAMETER_ERROR = 1
*      NO_VALUES_FOUND = 2
*      OTHERS          = 3.
*  IF SY-SUBRC = 0.
*    READ TABLE LT_RETURN INTO LS_RETURN INDEX 1.
*    P_FAMCD = LS_RETURN-FIELDVAL.
*  ENDIF.
*ENDFORM.                    " F4_FAMCODE
*&---------------------------------------------------------------------*
*&      Form  F4_BSARK
*&---------------------------------------------------------------------*
*       F4-help Function Implementation for Purchase order type
*----------------------------------------------------------------------*
*FORM F4_BSARK .
*  TYPES: BEGIN OF LTY_T176T,
*            BSARK TYPE T176T-BSARK,
*            VTEXT TYPE T176T-VTEXT,
*         END OF LTY_T176T.
*  DATA: LT_T176T TYPE TABLE OF LTY_T176T.
*  DATA: LT_RETURN TYPE TABLE OF DDSHRETVAL,
*        LS_RETURN TYPE DDSHRETVAL.
*  SELECT  BSARK
*          VTEXT
*    FROM T176T
*    INTO TABLE LT_T176T
*    WHERE   SPRAS = SY-LANGU
*      AND  (    BSARK = C_ACC
*            OR  BSARK = C_GDS
*            OR  BSARK = C_SIM ) .
*
*  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
*    EXPORTING
*      RETFIELD        = 'BSARK'
*      DYNPPROG        = SY-REPID
*      DYNPROFIELD     = 'P_BSARK'
*      VALUE_ORG       = 'S'
*    TABLES
*      VALUE_TAB       = LT_T176T
*      RETURN_TAB      = LT_RETURN
*    EXCEPTIONS
*      PARAMETER_ERROR = 1
*      NO_VALUES_FOUND = 2
*      OTHERS          = 3.
*  IF SY-SUBRC = 0.
*    READ TABLE LT_RETURN INTO LS_RETURN INDEX 1.
*    P_BSARK = LS_RETURN-FIELDVAL.
*  ENDIF.
*ENDFORM.                    " F4_BSARK
*&---------------------------------------------------------------------*
*&      Form  SET_SCR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
form set_scr .
*  DATA: LS_IDOC_TCODE    TYPE YSE_IDOC_TCODE.
*  SELECT SINGLE *
*   FROM YSE_IDOC_TCODE
*   INTO LS_IDOC_TCODE
*  WHERE ZTOCDE = SY-TCODE.
*
*  IF SY-SUBRC = 0.
*    P_BSARK = LS_IDOC_TCODE-ZBSARK.
*  ENDIF.

  import gt_screen = gt_screen from memory id 'YSE_IDOC_LIST'.
endform.                    " SET_SCR
*&---------------------------------------------------------------------*
*&      Form  SELECT_ORDCHG_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
form select_ordchg_data .
* Progress indicator
  gv_text = 'Data is being selected'(i01).
  call function 'SAPGUI_PROGRESS_INDICATOR'
    exporting
      text = gv_text.

  refresh: gt_idoc.
  refresh: gt_out.
* Select Idocs with status 51
  select docnum into table gt_idoc
         from edidc
         where docnum in so_idoc
           and status = c_51
           and mestyp = c_ordchg.
  gv_counter = 0.
  describe table gt_idoc lines gv_total.

* Process segments
  loop at gt_idoc into gs_idoc.
    add 1 to gv_counter.
    gv_text = 'IDoc & (& of &) is being processed'(i02).
    replace '&' with gs_idoc-docnum into gv_text.
    replace '&' with gv_counter     into gv_text.
    replace '&' with gv_total       into gv_text.
    condense gv_text.
    call function 'SAPGUI_PROGRESS_INDICATOR'
      exporting
        text = gv_text.
    clear: gv_error,
           gt_edidd[].
*   Get IDoc data
    call function 'IDOC_READ_COMPLETELY'
      exporting
        document_number         = gs_idoc-docnum
      importing
        idoc_control            = gs_edidc
      tables
        int_edidd               = gt_edidd
      exceptions
        document_not_exist      = 1
        document_number_invalid = 2
        others                  = 3.
    if sy-subrc = 0.
      if gs_edidc-mescod <> 'GDS'.
        continue.
      endif.
      perform fill_output_ordchg.
    endif.
  endloop.
endform.                    " SELECT_ORDCHG_DATA
*&---------------------------------------------------------------------*
*&      Form  FILL_OUTPUT_ORDCHG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
form fill_output_ordchg .
  data: lt_edids    type standard table of edids,
         ls_edids    type edids,
         ls_e1edk02  type e1edk02.

  clear gs_out.
  gs_out-docnum = gs_idoc-docnum.
  loop at gt_edidd into gs_edidd.
*   Check data
    case gs_edidd-segnam.

*** Begin of MOD-001 * add***
      when 'E1EDKA1'.                        "Partner data (header)
        move gs_edidd-sdata to gs_e1edka1.
        if gs_e1edka1-parvw = 'WE'.          "Vendor code
          if gs_e1edka1-ihrez in s_knref.
            gs_out-knref = gs_e1edka1-knref.
          else.
            gv_error = c_x.
            exit.
          endif.
        endif.
*** End of MOD-001 * add***

      when 'E1EDK14'.                        "Organ. data (header)
        move gs_edidd-sdata to gs_e1edk14.
        if gs_e1edk14-qualf = '019'.
          gs_out-zorgid = gs_e1edk14-orgid.
        endif.

      when 'E1EDK02'.                        "IDOC document number
        move gs_edidd-sdata to ls_e1edk02.
        if ls_e1edk02-qualf = '001'.
          if ls_e1edk02-belnr in s_belnr.
            gs_out-zbelnr = ls_e1edk02-belnr.
          else.
            gv_error = c_x.
            exit.
          endif.
        endif.
    endcase.

    refresh: lt_edids.
    select *
    from   edids
    into   table lt_edids
    where  docnum = gs_idoc-docnum
*****Begin of mod-006 mod
    and    status = c_51.
*    AND    ( STATUS = C_51 or STATUS = C_68 ).
*****End of mod-006 mod
    if sy-subrc eq 0.

*** Begin of MOD-005 * mod***
*         SORT LT_EDIDS BY LOGDAT DESCENDING.
      sort lt_edids by logdat descending
                       logtim descending
                       countr descending.
*** End of MOD-005 * mod***

      read table lt_edids into ls_edids index 1.
      if not ls_edids-stamid is initial.
        message id ls_edids-stamid type 'E' number ls_edids-stamno
                into gs_out-text
                with ls_edids-stapa1 ls_edids-stapa2 ls_edids-stapa3 ls_edids-stapa4.
        gs_out-credat = gs_edidc-credat.
        gs_out-cretim = gs_edidc-cretim.
      endif.
    endif.
  endloop.

  if gv_error is initial.
    append gs_out to gt_out.
  endif.

endform.                    " FILL_OUTPUT_ORDCHG

*Text symbol text£º
*H02:List and Reprocess IDoc status [51,68]
*I01:Data is being selected
*I02:IDoc & (& of &) is being processed
*P01:Delete IDocs ?
*P02:You are about to Delete  the selected IDocs. Are you sure to continue ?
*S01:Selection
*T01:IDoc number
*T02:Customer code
*T03:Web Order No.
*T04:Customer Document No.
*T05:Purchase Order Type
*T06:Created Date
*T11:Post Date
*T13:Error Message
*T14:IDOC organization
*T15:IDOC document number
*T88:Customer SO created by

*T89:CusSO Crt.by
*Selection text£º
*SO_BOLNR:        Customer Document Number
*SO_DATE:        Created Date
*SO_DATUM:        Post Date
*SO_IDOC:D       .
*SO_IHREZ:        Web Order Number
*SO_KNREF:        Customer code
*S_BELNR:        Document number
*S_KNREF:        Customer code
