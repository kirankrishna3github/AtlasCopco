*----------------------------------------------------------------------*
***INCLUDE YSE_RU_FI_OPEN_ITEMS_F01 .
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  initialization
*&---------------------------------------------------------------------*
*       Perform the necessary initialization actions
*----------------------------------------------------------------------*
FORM initialization .

IF P_KUNNR is initial.
 P_KUNNR = P_VENDOR.
ENDIF.


ENDFORM.                    " initialization

*eject
*&---------------------------------------------------------------------*
*&      Form  select_equipments
*&---------------------------------------------------------------------*
*       Select the relevant equipment information
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM select_BSID.


gt_bsid-SAL_DMBTR_FOR = 0.

*Calculate bookings total (without opening balance)
* Debit total bookings (without opening balance)
  SELECT single sum( dmbtr ) into lv_debit_b
    FROM bsid
    WHERE
         KUNNR EQ P_KUNNR
     AND BUKRS EQ P_BUKRS
     AND BELNR NOT BETWEEN '3000000000' AND '3199999999'
     AND BLDAT < P_BLDAT
     AND SHKZG = 'S'
     AND UMSKZ <> 'F'. "Exclude Payment Requests
* Credit total bookings (without opening balance)
  SELECT single sum( dmbtr ) into lv_credit_b
    FROM bsid
    WHERE
         KUNNR EQ P_KUNNR
     AND BUKRS EQ P_BUKRS
     AND BELNR NOT BETWEEN '3000000000' AND '3199999999'
     AND BLDAT < P_BLDAT
     AND SHKZG = 'H'
     AND UMSKZ <> 'F'. "Exclude Payment Requests
    lv_bk_sal = lv_debit_b + ( lv_credit_b * ( -1 ) ).




* Select records for ALV
  SELECT blart belnr bukrs gjahr umskz bldat xref1 xref2 dmbtr wrbtr shkzg waers
        INTO CORRESPONDING FIELDS OF TABLE gt_bsid_tmp
   FROM bsid
   WHERE
         KUNNR EQ P_KUNNR
     AND BUKRS EQ P_BUKRS
     AND BELNR NOT BETWEEN '3000000000' AND '3199999999'
     AND BLDAT < P_BLDAT
     AND UMSKZ <> 'F'. "Exclude Payment Requests
   if sy-subrc EQ 0.

    SORT gt_bsid_tmp by bldat.
      loop at gt_bsid_tmp.
*       clear gt_bsid.
       clear: lv_xref2, gt_bsid-bldat, gt_bsid-vbeln, gt_bsid-aubel, gt_bsid-DEB_DMBTR_RUB, gt_bsid-CRED_DMBTR_RUB,
              gt_bsid-DEB_DMBTR_FOR, gt_bsid-CRED_DMBTR_FOR, gt_bsid-WAERS, gt_bsid-WAERS2, gt_bsid-UKURS, gt_bsid-xblnr, gt_bsid-belnr,
              gt_bsid-doc_type.


      SELECT SINGLE zuonr FROM bseg into (lv_zuonr) WHERE bukrs = gt_bsid_tmp-bukrs AND
                                belnr = gt_bsid_tmp-belnr AND
                                gjahr = gt_bsid_tmp-gjahr
                                and kunnr <> ' '.

       if gt_bsid_tmp-blart ='KR'.
        gt_bsid-doc_type = text-d01.
       elseif gt_bsid_tmp-blart ='ZC' or gt_bsid_tmp-blart ='ZP' or gt_bsid_tmp-blart ='DZ'.
        gt_bsid-doc_type = text-d02.
       elseif gt_bsid_tmp-blart ='RV' or gt_bsid_tmp-blart ='DR'.
        gt_bsid-doc_type = text-d03.
       else.
        gt_bsid-doc_type = text-d04.
       endif.

       gt_bsid-bldat = gt_bsid_tmp-bldat.
       select single XBLNR into gt_bsid-xblnr from bkpf
* begin of change MOD-001
            where BELNR = gt_bsid_tmp-BELNR and ( BUKRS = 'MRUA' or BUKRS = 'XRAA' ).
*            where BELNR = gt_bsid_tmp-BELNR and BUKRS = 'MRUA'.
* end of change MOD-001
      clear lv_ukurs.

       if gt_bsid_tmp-xref2 <> ' '.
       CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = gt_bsid_tmp-xref2
        IMPORTING
          output = lv_xref2.

       select single vbeln aubel from vbrp into (gt_bsid-vbeln, gt_bsid-aubel) where
         aubel = lv_xref2.
       else.
         select single vbel2 from bseg into gt_bsid-aubel
           where vbel2 <> ' ' and
            bukrs = gt_bsid_tmp-bukrs AND
            belnr = gt_bsid_tmp-belnr AND
            gjahr = gt_bsid_tmp-gjahr.


     SELECT single vbeln FROM vbfa INTO  gt_bsid-vbeln
                    WHERE vbelv = gt_bsid-aubel
                      AND vbtyp_n = 'M'
                      AND fktyp <> 'P'.
*         select single vbeln from vbrp into (gt_bsid-vbeln) where
*         aubel = gt_bsid-aubel.
       endif.
       if gt_bsid_tmp-shkzg = 'S'.
        gt_bsid-DEB_DMBTR_RUB = gt_bsid_tmp-dmbtr.
        gt_bsid-CRED_DMBTR_RUB = 0.
       elseif gt_bsid_tmp-shkzg = 'H'.
        gt_bsid-CRED_DMBTR_RUB = gt_bsid_tmp-dmbtr.
        gt_bsid-DEB_DMBTR_RUB = 0.
       endif.
        gt_bsid-SAL_DMBTR_RUB = gt_bsid-SAL_DMBTR_RUB + gt_bsid-DEB_DMBTR_RUB - gt_bsid-CRED_DMBTR_RUB.

* Select the  currency of the sales order.
  clear lv_waerk.
  select  single waerk from vbak into lv_waerk
   where vbeln = gt_bsid-aubel.

* Foreign Currency
       if lv_waerk is not initial.
         if lv_waerk = 'USD'.
           gt_bsid-waers = lv_waerk.
           gt_bsid-WAERS2 = '§¥§à§Ý.§³§º§¡'.
         elseif lv_waerk = 'EURO'.
           gt_bsid-waers = lv_waerk.
           gt_bsid-WAERS2 = '§¦§Ó§â§à'.
         else.
           select single ktext waers from tcurt into (gt_bsid-waers2, gt_bsid-waers)
            where spras = 'R' and waers = lv_waerk.
         endif.
       endif.
* Foreign Currency Debit value
       if lv_waerk is not initial.

          clear lv_date_c.
          clear lv_date_bkpf.

*          IF lv_waerk <> gt_bsid_tmp-waers.

          select single BLDAT into lv_date_bkpf from bkpf
* begin of change MOD-001
            where BELNR = gt_bsid_tmp-BELNR and ( BUKRS = 'MRUA' OR BUKRS = 'XRAA' ).
*            where BELNR = gt_bsid_tmp-BELNR and BUKRS = 'MRUA'.
* end of change MOD-001

          CONVERT INVERTED-DATE lv_date_bkpf into date lv_date_c .
           SELECT single ukurs  FROM tcurr INTO gt_bsid-ukurs
           where kurst = 'DRU' and TCURR = 'RUB' and FCURR = lv_waerk
                and gdatu = lv_date_c.

          if gt_bsid-ukurs is initial.
           clear lv_gdatu.
           SELECT single min( gdatu )  FROM tcurr INTO lv_gdatu
           where kurst = 'DRU' and TCURR = 'RUB' and FCURR = lv_waerk
                and gdatu > lv_date_c.

            SELECT single ukurs  FROM tcurr INTO gt_bsid-ukurs
            where kurst = 'DRU' and TCURR = 'RUB' and FCURR = lv_waerk
                and gdatu = lv_gdatu.
          endif.
           if gt_bsid_tmp-shkzg = 'S'.
             if lv_waerk = 'RUB'.
               gt_bsid-ukurs = 1.
             endif.
            if gt_bsid-ukurs <> 0.
              gt_bsid-DEB_DMBTR_FOR = gt_bsid-DEB_DMBTR_RUB / gt_bsid-ukurs.
            endif.
            gt_bsid-CRED_DMBTR_FOR = 0.
            if lv_waerk = 'RUB'.
             lv_debit_b_rub = lv_debit_b_rub + gt_bsid-DEB_DMBTR_FOR.
            elseif lv_waerk = 'EUR'.
             lv_debit_b_eur = lv_debit_b_eur + gt_bsid-DEB_DMBTR_FOR.
            elseif lv_waerk = 'USD'.
             lv_debit_b_usd = lv_debit_b_usd + gt_bsid-DEB_DMBTR_FOR.
            endif.
           elseif gt_bsid_tmp-shkzg = 'H'.
             if lv_waerk = 'RUB'.
               gt_bsid-ukurs = 1.
             endif.
             if gt_bsid-ukurs <> 0.
              gt_bsid-CRED_DMBTR_FOR = gt_bsid-CRED_DMBTR_RUB / gt_bsid-ukurs.
             endif.
            gt_bsid-DEB_DMBTR_FOR = 0.
            if lv_waerk = 'RUB'.
             lv_credit_b_rub = lv_credit_b_rub + gt_bsid-CRED_DMBTR_FOR.
            elseif lv_waerk = 'EUR'.
             lv_credit_b_eur = lv_credit_b_eur + gt_bsid-CRED_DMBTR_FOR.
            elseif lv_waerk = 'USD'.
             lv_credit_b_usd = lv_credit_b_usd + gt_bsid-CRED_DMBTR_FOR.
            endif.
           endif.
       endif.

       if lv_waerk = 'RUB'.
         lv_bk_sal_rub = lv_bk_sal_rub + gt_bsid-DEB_DMBTR_FOR + ( gt_bsid-CRED_DMBTR_FOR * ( -1 ) ). "calculate booked total RUB
         gt_bsid-SAL_DMBTR_FOR_RUB = gt_bsid-SAL_DMBTR_FOR_RUB + gt_bsid-DEB_DMBTR_FOR + ( gt_bsid-CRED_DMBTR_FOR * ( -1 ) ). "calculate total RUB per line
       elseif lv_waerk = 'EUR'.
         lv_bk_sal_eur = lv_bk_sal_eur + gt_bsid-DEB_DMBTR_FOR + ( gt_bsid-CRED_DMBTR_FOR * ( -1 ) ). "calculate booked total EUR
         gt_bsid-SAL_DMBTR_FOR_EUR = gt_bsid-SAL_DMBTR_FOR_EUR + gt_bsid-DEB_DMBTR_FOR + ( gt_bsid-CRED_DMBTR_FOR * ( -1 ) ). "calculate total EUR per line
       elseif lv_waerk = 'USD'.
         lv_bk_sal_usd = lv_bk_sal_usd + gt_bsid-DEB_DMBTR_FOR + ( gt_bsid-CRED_DMBTR_FOR * ( -1 ) ). "calculate booked total USD
         gt_bsid-SAL_DMBTR_FOR_USD = gt_bsid-SAL_DMBTR_FOR_USD + gt_bsid-DEB_DMBTR_FOR + ( gt_bsid-CRED_DMBTR_FOR * ( -1 ) ). "calculate total USD per line
       endif.
* Grand Total Column 10(Saldo)
       lv_bk_sal_for = lv_bk_sal_for + gt_bsid-DEB_DMBTR_FOR + ( gt_bsid-CRED_DMBTR_FOR * ( -1 ) ). "calculate booked total FOR
* Total per Currency Column 10(Saldo)
       if lv_waerk = 'RUB'.
         gt_bsid-SAL_DMBTR_FOR =  gt_bsid-SAL_DMBTR_FOR_RUB.
       elseif lv_waerk = 'EUR'.
         gt_bsid-SAL_DMBTR_FOR =  gt_bsid-SAL_DMBTR_FOR_EUR.
       elseif lv_waerk = 'USD'.
         gt_bsid-SAL_DMBTR_FOR =  gt_bsid-SAL_DMBTR_FOR_USD.
       endif.


        concatenate  gt_bsid_tmp-blart '/' gt_bsid_tmp-umskz '/' gt_bsid_tmp-belnr into gt_bsid-belnr.
        lv_ukurs = gt_bsid-ukurs.
        concatenate gt_bsid-xblnr '/'gt_bsid_tmp-xref1 '/' gt_bsid_tmp-xref2 '/' lv_zuonr '/' lv_ukurs into gt_bsid-xblnr.
        append gt_bsid.
      endloop.
    endif.
ENDFORM.                    " select_bsid

*eject
*&---------------------------------------------------------------------*
*&      Form  output_list_bsid
*&---------------------------------------------------------------------*
*       Output the equipment list
*----------------------------------------------------------------------*
FORM output_list_bsid.

*.. Local variables
  DATA: ls_layout TYPE slis_layout_alv,
        ls_grid   TYPE lvc_s_glay,
        ls_events TYPE slis_alv_event.

  DATA: lt_events TYPE slis_t_event,
        lt_event_exits TYPE slis_t_event_exit,
        lt_fieldcat TYPE slis_t_fieldcat_alv.

*.. Fill events
  REFRESH lt_events.
  ls_events-name = 'USER_COMMAND'.
  ls_events-form = 'USER_COMMAND_L'.
  APPEND ls_events TO lt_events.
  ls_events-name = 'PF_STATUS_SET'.
  ls_events-form = 'PF_STATUS_SET'.
  APPEND ls_events TO lt_events.
  ls_events-name = 'TOP_OF_PAGE'.
  ls_events-form = 'TOP_OF_PAGE_BSID'.
  APPEND ls_events TO lt_events.
  ls_events-form = ls_events-name = 'END_OF_LIST'.
  APPEND ls_events TO lt_events.

*.. Define layout
  CLEAR ls_layout.
*  ls_layout-box_fieldname        = 'SELECTED'.  "field for checkbox
  ls_layout-get_selinfos         = g_x. "show selection screen
  ls_layout-detail_popup         = g_x. "show detail via popup
  ls_layout-detail_initial_lines = g_x. "all fields in detail
  ls_layout-zebra                = g_x. "striped pattern
  ls_layout-info_fieldname       = 'COLOR'.

*.. Define grid settings
* ls_grid-coll_end_l = gc_charx.

*.. Prepare field catalog
 DATA : ls_fcat TYPE slis_fieldcat_alv.
 DATA:  ls_sort TYPE slis_sortinfo_alv.

**---------------------------document date in document----------------------------*
  ls_fcat-fieldname = 'BLDAT'.
  ls_fcat-seltext_m = '§¥§Ñ§ä§Ñ'.
  ls_fcat-col_pos  = 1.
  ls_fcat-inttype = 'D'.
  ls_fcat-outputlen = '10'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**--------------------------- Invoice Document number-------------------------------*
  ls_fcat-fieldname = 'VBELN'.
  ls_fcat-seltext_m = '§¯§à§Þ.§Õ§à§Ü §·§à§Ù. §à§á§Ö§â§Ñ§è§Ú§ñ'.
  ls_fcat-col_pos  = 2.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '21'.
*  ls_sort-spos = 1.
  ls_sort-fieldname = ls_fcat-fieldname.
*  ls_sort-up = 'X'.
*  APPEND ls_sort TO gt_sort.
*  ls_fcat-seltext_l = 'Document No'.
  APPEND ls_fcat TO lt_fieldcat.
*  CLEAR: ls_fcat,
*         ls_sort.
**--------------------------- Document Type Text ------------------------------------*
  ls_fcat-fieldname = 'DOC_TYPE'.
  ls_fcat-seltext_m = '§·§à§Ù. §à§á§Ö§â§Ñ§è§Ú§ñ'.
  ls_fcat-col_pos  = 3.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '15'.
*  ls_sort-spos = 1.
  ls_sort-fieldname = ls_fcat-fieldname.
*  ls_sort-up = 'X'.
*  APPEND ls_sort TO gt_sort.
*  ls_fcat-seltext_l = 'Document No'.
  APPEND ls_fcat TO lt_fieldcat.
*  CLEAR: ls_fcat,
*         ls_sort.
**---------------------------sales order----------------------------*
  ls_fcat-fieldname = 'AUBEL'.
  ls_fcat-seltext_m = '§©§Ñ§Ü§Ñ§Ù ¡í'.
  ls_fcat-col_pos  = 4.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '12'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Debit in RUB----------------------------*
  ls_fcat-fieldname = 'DEB_DMBTR_RUB'.
  ls_fcat-seltext_m = '§¥§Ö§Ò§Ö§ä (RUB)'.
  ls_fcat-col_pos  = 5.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '20'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Credit in RUB----------------------------*
  ls_fcat-fieldname = 'CRED_DMBTR_RUB'.
  ls_fcat-seltext_m = '§¬§â§Ö§Õ§Ú§ä (RUB)'.
  ls_fcat-col_pos  = 6.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '20'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Saldo in RUB----------------------------*
  ls_fcat-fieldname = 'SAL_DMBTR_RUB'.
  ls_fcat-seltext_m = '§³§Ñ§Ý§î§Õ§à (RUB)'.
  ls_fcat-col_pos  = 7.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '20'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Debit in FOR----------------------------*
  ls_fcat-fieldname = 'DEB_DMBTR_FOR'.
  ls_fcat-seltext_m = '§¥§Ö§Ò§Ö§ä (§µ§¦)'.
  ls_fcat-col_pos  = 8.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '20'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Credit in FOR----------------------------*
  ls_fcat-fieldname = 'CRED_DMBTR_FOR'.
  ls_fcat-seltext_m = '§¬§â§Ö§Õ§Ú§ä (§µ§¦)'.
  ls_fcat-col_pos  = 9.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '20'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Saldo in FOR----------------------------*
  ls_fcat-fieldname = 'SAL_DMBTR_FOR'.
  ls_fcat-seltext_m = 'Saldo (§µ§¦)'.
  ls_fcat-col_pos  = 10.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '20'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Secondary Currency----------------------------*
  ls_fcat-fieldname = 'WAERS2'.
  ls_fcat-seltext_m = '§£§Ñ§Ý§ð§ä§Ñ'.
  ls_fcat-col_pos  = 11.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '5'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Exchange Rate----------------------------*
  ls_fcat-fieldname = 'UKURS'.
  ls_fcat-seltext_m = '§¬§µ§²§³'.
  ls_fcat-col_pos  = 12.
  ls_fcat-outputlen = '10'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Reference----------------------------*
  ls_fcat-fieldname = 'XBLNR'.
  ls_fcat-seltext_m = '§á§â§Ú§Þ§Ö§é§Ñ§ß§Ú§Ö'.
  ls_fcat-col_pos  = 13.
  ls_fcat-outputlen = '40'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------FI Document Number/Type----------------------------*
  ls_fcat-fieldname = 'BELNR'.
  ls_fcat-seltext_m = '¡í §á§â§à§Ó§à§Õ§Ü§Ú'.
  ls_fcat-col_pos  = 14.
  ls_fcat-outputlen = '15'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.



*  IF MCONTAINER IS INITIAL .
*    CREATE OBJECT MCONTAINER
*                  EXPORTING
*                  CONTAINER_NAME = 'OVERVIEW' .
*
*    CREATE OBJECT MALV
*              EXPORTING I_PARENT = MCONTAINER.
*
*     GS_LAYOUT-SEL_MODE = 'X'.
*
*    CALL METHOD MALV->SET_TABLE_FOR_FIRST_DISPLAY
*           EXPORTING
*             IS_LAYOUT = GS_LAYOUT
*           CHANGING
*             IT_FIELDCATALOG = LT_fieldcat
*             IT_OUTTAB = gt_bsid[] .
*    ENDIF.

* call ALV grid output
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program = 'YSE_RU_FI_OPEN_ITEMS'
*      i_structure_name   = 'YSE_ACT_RU'
*      i_grid_settings    = ls_grid
      is_layout          = ls_layout
      i_save             = 'A'
      it_fieldcat        = lt_fieldcat
      it_events          = lt_events
*      it_sort            = gt_sort
    TABLES
      t_outtab           = gt_bsid
    EXCEPTIONS
      program_error      = 1
      OTHERS             = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " output_list_bsid

*eject
*&---------------------------------------------------------------------*
*&      Form  add_message_to_log
*&---------------------------------------------------------------------*
*       Add a generated message to the application log
*----------------------------------------------------------------------*
FORM add_message_to_log .

*.. Local variables
  DATA: ls_msg TYPE bal_s_msg.

  MOVE-CORRESPONDING syst TO ls_msg.
  CALL FUNCTION 'BAL_LOG_MSG_ADD'
    EXPORTING
*     I_LOG_HANDLE              =
      i_s_msg                   = ls_msg
*   IMPORTING
*     E_S_MSG_HANDLE            =
*     E_MSG_WAS_LOGGED          =
*     E_MSG_WAS_DISPLAYED       =
    EXCEPTIONS
      log_not_found             = 1
      msg_inconsistent          = 2
      log_is_full               = 3
      OTHERS                    = 4
            .
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*.. Flag log as having entries
  IF gv_log IS INITIAL.
    gv_log = gc_charx.
  ENDIF.

ENDFORM.                    " add_message_to_log


FORM select_BSIK.

DATA: BEGIN OF it_ebeln occurs 0,
        EBELN LIKE BSEG-EBELN,
       END OF it_ebeln.


gt_bsik-SAL_DMBTR_FOR = 0.

*Calculate bookings total (without opening balance)
* Debit total bookings (without opening balance)
  SELECT single sum( dmbtr ) into lv_debit_b
    FROM bsik
    WHERE
         LIFNR EQ P_KUNNR
     AND BUKRS EQ P_BUKRS
     AND BELNR NOT BETWEEN '3000000000' AND '3199999999'
     AND BLDAT < P_BLDAT
     AND SHKZG = 'S'
     AND UMSKZ <> 'F'. "Exclude Payment Requests
* Credit total bookings (without opening balance)
  SELECT single sum( dmbtr ) into lv_credit_b
    FROM bsik
    WHERE
         LIFNR EQ P_KUNNR
     AND BUKRS EQ P_BUKRS
     AND BELNR NOT BETWEEN '3000000000' AND '3199999999'
     AND BLDAT < P_BLDAT
     AND SHKZG = 'H'
     AND UMSKZ <> 'F'. "Exclude Payment Requests
    lv_bk_sal = lv_debit_b + ( lv_credit_b * ( -1 ) ).




* Select records for ALV
  SELECT blart  bukrs gjahr buzei umskz belnr bldat xref1 xref2 dmbtr wrbtr shkzg waers
        INTO CORRESPONDING FIELDS OF TABLE gt_bsik_tmp
   FROM bsik
   WHERE
         LIFNR EQ P_KUNNR
     AND BUKRS EQ P_BUKRS
     AND BELNR NOT BETWEEN '3000000000' AND '3199999999'
     AND BLDAT < P_BLDAT
     AND UMSKZ <> 'F'. "Exclude Payment Requests

   if sy-subrc EQ 0.

    SORT gt_bsik_tmp by bldat.
      loop at gt_bsik_tmp.
*       clear gt_bsik.
       clear: gt_bsik-bldat, gt_bsik-aubel, gt_bsik-vbeln, gt_bsik-DEB_DMBTR_RUB, gt_bsik-CRED_DMBTR_RUB, gt_bsik-DEB_DMBTR_FOR,
              gt_bsik-CRED_DMBTR_FOR, gt_bsik-WAERS, gt_bsik-WAERS2, gt_bsik-UKURS, gt_bsik-xblnr, gt_bsik-belnr, lv_xref2, gt_bsik-doc_type.

      SELECT SINGLE zuonr FROM bseg into (lv_zuonr) WHERE bukrs = gt_bsik_tmp-bukrs AND
                                belnr = gt_bsik_tmp-belnr AND
                                gjahr = gt_bsik_tmp-gjahr
                                and lifnr <> ' '.

       if gt_bsik_tmp-blart ='KR'.
        gt_bsik-doc_type = text-d01.
       elseif gt_bsik_tmp-blart ='ZC' or gt_bsik_tmp-blart ='ZP' or gt_bsik_tmp-blart ='DZ'.
        gt_bsik-doc_type = text-d02.
       elseif gt_bsik_tmp-blart ='RV' or gt_bsik_tmp-blart ='DR'.
        gt_bsik-doc_type = text-d03.
       else.
        gt_bsik-doc_type = text-d04.
       endif.

       gt_bsik-bldat = gt_bsik_tmp-bldat.
       select single XBLNR into gt_bsik-xblnr from bkpf
* begin of change MOD-001
       where BELNR = gt_bsik_tmp-BELNR and ( BUKRS = 'MRUA' OR BUKRS = 'XRAA' ).
*       where BELNR = gt_bsik_tmp-BELNR and BUKRS = 'MRUA'.
* end of change MOD-001
       clear lv_ukurs.

       if gt_bsik_tmp-xref2 <> ' '.
       CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = gt_bsik_tmp-xref2
        IMPORTING
          output = lv_xref2.
        endif.

      clear: lv_ebeln, lv_ebelp, lv_belnr, lv_zuonr.
*
      SELECT SINGLE ebeln ebelp FROM bseg into (lv_ebeln, lv_ebelp) WHERE bukrs = gt_bsik_tmp-bukrs AND
                                belnr = gt_bsik_tmp-belnr AND
                                gjahr = gt_bsik_tmp-gjahr
                                and BUZID = 'W'.
      if lv_ebeln is initial.
      SELECT SINGLE ebeln ebelp FROM bseg into (lv_ebeln, lv_ebelp) WHERE bukrs = gt_bsik_tmp-bukrs AND
                                belnr = gt_bsik_tmp-belnr AND
                                gjahr = gt_bsik_tmp-gjahr
                                and BUZID = 'M'.
      endif.
     clear it_ebeln[].

     SELECT ebeln FROM bseg into table it_ebeln
       WHERE bukrs = gt_bsik_tmp-bukrs  AND
             belnr = gt_bsik_tmp-belnr AND
             gjahr = gt_bsik_tmp-gjahr
             and ( BUZID = 'M' or BUZID = 'W' ).

     clear line2.

     delete adjacent duplicates from it_ebeln.
     describe table it_ebeln lines line2.
     if line2 > 1.
*to be changed later  if necessary
      select single belnr into (lv_belnr) from rseg
      where ebeln = lv_ebeln and ebelp = lv_ebelp
        and gjahr = gt_bsik_tmp-gjahr.
        gt_bsik-aubel = lv_belnr.
        gt_bsik-vbeln = lv_ebeln.
     else.
      select single belnr into (lv_belnr) from rseg
      where ebeln = lv_ebeln and ebelp = lv_ebelp
        and gjahr = gt_bsik_tmp-gjahr.
        gt_bsik-aubel = lv_belnr.
        gt_bsik-vbeln = lv_ebeln.
     endif.


       if gt_bsik_tmp-shkzg = 'S'.
        gt_bsik-DEB_DMBTR_RUB = gt_bsik_tmp-dmbtr.
        gt_bsik-CRED_DMBTR_RUB = 0.
       elseif gt_bsik_tmp-shkzg = 'H'.
        gt_bsik-CRED_DMBTR_RUB = gt_bsik_tmp-dmbtr.
        gt_bsik-DEB_DMBTR_RUB = 0.
       endif.
        gt_bsik-SAL_DMBTR_RUB = gt_bsik-SAL_DMBTR_RUB  + gt_bsik-DEB_DMBTR_RUB - gt_bsik-CRED_DMBTR_RUB.

* Select the  currency of the sales order.
  clear lv_waerk.
  select  single waers from ekko into lv_waerk
   where ebeln = lv_ebeln.

* Foreign Currency
       if lv_waerk is not initial.
         if lv_waerk = 'USD'.
           gt_bsik-WAERS = lv_waerk.
           gt_bsik-WAERS2 = '§¥§à§Ý.§³§º§¡'.
         elseif lv_waerk = 'EURO'.
           gt_bsik-WAERS = lv_waerk.
           gt_bsik-WAERS2 = '§¥§à§Ý.§³§º§¡'.
         else.
           select single ktext waers into (gt_bsik-waers2, gt_bsik-waers) from tcurt
            where spras = 'R' and waers = lv_waerk.
         endif.
       endif.


* Foreign Currency Debit value
       if lv_waerk is not initial.

          clear lv_date_c.
          clear lv_date_bkpf.
          select single BLDAT into lv_date_bkpf from bkpf
* begin of change MOD-001
            where BELNR = gt_bsik_tmp-BELNR and ( BUKRS = 'MRUA' OR BUKRS = 'XRAA' ).
*            where BELNR = gt_bsik_tmp-BELNR and BUKRS = 'MRUA'.
* end of change MOD-001

          CONVERT INVERTED-DATE lv_date_bkpf into date lv_date_c .
          SELECT single ukurs  FROM tcurr INTO gt_bsik-ukurs
          where kurst = 'DRU' and TCURR = 'RUB' and FCURR = lv_waerk
                and gdatu = lv_date_c.

           if gt_bsik-ukurs is initial.
             clear lv_gdatu.
            SELECT single min( gdatu )  FROM tcurr INTO lv_gdatu
            where kurst = 'DRU' and TCURR = 'RUB' and FCURR = lv_waerk
                and gdatu > lv_date_c.

            SELECT single ukurs  FROM tcurr INTO gt_bsik-ukurs
            where kurst = 'DRU' and TCURR = 'RUB' and FCURR = lv_waerk
                and gdatu = lv_gdatu.
           endif.

           if gt_bsik_tmp-shkzg = 'S'.
             if lv_waerk = 'RUB'.
               gt_bsik-ukurs = 1.
             endif.
            if gt_bsik-ukurs <> 0.
             gt_bsik-DEB_DMBTR_FOR = gt_bsik-DEB_DMBTR_RUB / gt_bsik-ukurs.
            endif.
            gt_bsik-CRED_DMBTR_FOR = 0.
            if lv_waerk = 'RUB'.
             lv_debit_b_rub = lv_debit_b_rub + gt_bsik-DEB_DMBTR_FOR.
            elseif lv_waerk = 'EUR'.
             lv_debit_b_eur = lv_debit_b_eur + gt_bsik-DEB_DMBTR_FOR.
            elseif lv_waerk = 'USD'.
             lv_debit_b_usd = lv_debit_b_usd + gt_bsik-DEB_DMBTR_FOR.
            endif.
           elseif gt_bsik_tmp-shkzg = 'H'.
             if lv_waerk = 'RUB'.
               gt_bsik-ukurs = 1.
             endif.
             if gt_bsik-ukurs <> 0.
              gt_bsik-CRED_DMBTR_FOR = gt_bsik-CRED_DMBTR_RUB / gt_bsik-ukurs.
             endif.
            gt_bsik-DEB_DMBTR_FOR = 0.
            if lv_waerk = 'RUB'.
             lv_credit_b_rub = lv_credit_b_rub + gt_bsik-CRED_DMBTR_FOR.
            elseif lv_waerk = 'EUR'.
             lv_credit_b_eur = lv_credit_b_eur + gt_bsik-CRED_DMBTR_FOR.
            elseif lv_waerk = 'USD'.
             lv_credit_b_usd = lv_credit_b_usd + gt_bsik-CRED_DMBTR_FOR.
            endif.
           endif.
       endif.

       if lv_waerk = 'RUB'.
         lv_bk_sal_rub = lv_bk_sal_rub + gt_bsik-DEB_DMBTR_FOR + ( gt_bsik-CRED_DMBTR_FOR * ( -1 ) ). "calculate booked total RUB
         gt_bsik-SAL_DMBTR_FOR_RUB = gt_bsik-SAL_DMBTR_FOR_RUB + gt_bsik-DEB_DMBTR_FOR + ( gt_bsik-CRED_DMBTR_FOR * ( -1 ) ). "calculate total RUB per line
       elseif lv_waerk = 'EUR'.
         lv_bk_sal_eur = lv_bk_sal_eur + gt_bsik-DEB_DMBTR_FOR + ( gt_bsik-CRED_DMBTR_FOR * ( -1 ) ). "calculate booked total EUR
         gt_bsik-SAL_DMBTR_FOR_EUR = gt_bsik-SAL_DMBTR_FOR_EUR + gt_bsik-DEB_DMBTR_FOR + ( gt_bsik-CRED_DMBTR_FOR * ( -1 ) ). "calculate total EUR per line
       elseif lv_waerk = 'USD'.
         lv_bk_sal_usd = lv_bk_sal_usd + gt_bsik-DEB_DMBTR_FOR + ( gt_bsik-CRED_DMBTR_FOR * ( -1 ) ). "calculate booked total USD
         gt_bsik-SAL_DMBTR_FOR_USD = gt_bsik-SAL_DMBTR_FOR_USD + gt_bsik-DEB_DMBTR_FOR + ( gt_bsik-CRED_DMBTR_FOR * ( -1 ) ). "calculate total USD per line
       endif.

* grand total column 10(Saldo)
       lv_bk_sal_for = lv_bk_sal_for + gt_bsik-DEB_DMBTR_FOR + ( gt_bsik-CRED_DMBTR_FOR * ( -1 ) ). "calculate booked total FOR
* Total per Currency for column 10(Saldo)
       if lv_waerk = 'RUB'.
         gt_bsik-SAL_DMBTR_FOR =  gt_bsik-SAL_DMBTR_FOR_RUB.
       elseif lv_waerk = 'EUR'.
         gt_bsik-SAL_DMBTR_FOR =  gt_bsik-SAL_DMBTR_FOR_EUR.
       elseif lv_waerk = 'USD'.
         gt_bsik-SAL_DMBTR_FOR =  gt_bsik-SAL_DMBTR_FOR_USD.
       endif.

        concatenate  gt_bsik_tmp-blart '/' gt_bsik_tmp-umskz '/' gt_bsik_tmp-belnr into gt_bsik-belnr.
        lv_ukurs = gt_bsik-ukurs.
        concatenate gt_bsik-xblnr '/' gt_bsik_tmp-xref1 '/' gt_bsik_tmp-xref2 '/' lv_zuonr '/' lv_ukurs into gt_bsik-xblnr.
        append gt_bsik.
      endloop.
    endif.



ENDFORM.                    " select_bsik

*eject
*&---------------------------------------------------------------------*
*&      Form  output_list_bsik
*&---------------------------------------------------------------------*
*       Output the equipment list
*----------------------------------------------------------------------*
FORM output_list_bsik.

*.. Local variables
  DATA: ls_layout TYPE slis_layout_alv,
        ls_grid   TYPE lvc_s_glay,
        ls_events TYPE slis_alv_event.

  DATA: lt_events TYPE slis_t_event,
        lt_event_exits TYPE slis_t_event_exit,
        lt_fieldcat TYPE slis_t_fieldcat_alv.

*.. Fill events
  REFRESH lt_events.
  ls_events-name = 'USER_COMMAND'.
  ls_events-form = 'USER_COMMAND_L'.
  APPEND ls_events TO lt_events.
  ls_events-name = 'PF_STATUS_SET'.
  ls_events-form = 'PF_STATUS_SET'.
  APPEND ls_events TO lt_events.
  ls_events-name = 'TOP_OF_PAGE'.
  ls_events-form = 'TOP_OF_PAGE_BSID'.
  APPEND ls_events TO lt_events.
  ls_events-form = ls_events-name = 'END_OF_LIST'.
  APPEND ls_events TO lt_events.

*.. Define layout
  CLEAR ls_layout.
*  ls_layout-box_fieldname        = 'SELECTED'.  "field for checkbox
  ls_layout-get_selinfos         = g_x. "show selection screen
  ls_layout-detail_popup         = g_x. "show detail via popup
  ls_layout-detail_initial_lines = g_x. "all fields in detail
  ls_layout-zebra                = g_x. "striped pattern
  ls_layout-info_fieldname       = 'COLOR'.

*.. Define grid settings
* ls_grid-coll_end_l = gc_charx.

*.. Prepare field catalog
 DATA : ls_fcat TYPE slis_fieldcat_alv.
 DATA:  ls_sort TYPE slis_sortinfo_alv.

**---------------------------document date in document----------------------------*
  ls_fcat-fieldname = 'BLDAT'.
  ls_fcat-seltext_m = '§¥§Ñ§ä§Ñ'.
  ls_fcat-col_pos  = 1.
  ls_fcat-inttype = 'D'.
  ls_fcat-outputlen = '10'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**--------------------------- Invoice Document number-------------------------------*
  ls_fcat-fieldname = 'AUBEL'.
  ls_fcat-seltext_m = '§¯§à§Þ.§Õ§à§Ü §·§à§Ù. §à§á§Ö§â§Ñ§è§Ú§ñ'.
  ls_fcat-col_pos  = 2.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '21'.
*  ls_sort-spos = 1.
  ls_sort-fieldname = ls_fcat-fieldname.
*  ls_sort-up = 'X'.
*  APPEND ls_sort TO gt_sort.
*  ls_fcat-seltext_l = 'Document No'.
  APPEND ls_fcat TO lt_fieldcat.
*  CLEAR: ls_fcat,
*         ls_sort.
**--------------------------- Document Type Text ------------------------------------*
  ls_fcat-fieldname = 'DOC_TYPE'.
  ls_fcat-seltext_m = '§·§à§Ù. §à§á§Ö§â§Ñ§è§Ú§ñ'.
  ls_fcat-col_pos  = 3.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '15'.
*  ls_sort-spos = 1.
  ls_sort-fieldname = ls_fcat-fieldname.
*  ls_sort-up = 'X'.
*  APPEND ls_sort TO gt_sort.
*  ls_fcat-seltext_l = 'Document No'.
  APPEND ls_fcat TO lt_fieldcat.
*  CLEAR: ls_fcat,
*         ls_sort.
**---------------------------sales order----------------------------*
  ls_fcat-fieldname = 'VBELN'.
  ls_fcat-seltext_m = '§©§Ñ§Ü§Ñ§Ù ¡í'.
  ls_fcat-col_pos  = 4.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '12'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Debit in RUB----------------------------*
  ls_fcat-fieldname = 'DEB_DMBTR_RUB'.
  ls_fcat-seltext_m = '§¥§Ö§Ò§Ö§ä (RUB)'.
  ls_fcat-col_pos  = 5.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '20'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Credit in RUB----------------------------*
  ls_fcat-fieldname = 'CRED_DMBTR_RUB'.
  ls_fcat-seltext_m = '§¬§â§Ö§Õ§Ú§ä (RUB)'.
  ls_fcat-col_pos  = 6.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '20'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Saldo in RUB----------------------------*
  ls_fcat-fieldname = 'SAL_DMBTR_RUB'.
  ls_fcat-seltext_m = '§³§Ñ§Ý§î§Õ§à (RUB)'.
  ls_fcat-col_pos  = 7.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '20'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Debit in FOR----------------------------*
  ls_fcat-fieldname = 'DEB_DMBTR_FOR'.
  ls_fcat-seltext_m = '§¥§Ö§Ò§Ö§ä (§µ§¦)'.
  ls_fcat-col_pos  = 8.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '20'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Credit in FOR----------------------------*
  ls_fcat-fieldname = 'CRED_DMBTR_FOR'.
  ls_fcat-seltext_m = '§¬§â§Ö§Õ§Ú§ä (§µ§¦)'.
  ls_fcat-col_pos  = 9.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '20'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Saldo in FOR----------------------------*
  ls_fcat-fieldname = 'SAL_DMBTR_FOR'.
  ls_fcat-seltext_m = 'Saldo (§µ§¦)'.
  ls_fcat-col_pos  = 10.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '20'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Secondary Currency----------------------------*
  ls_fcat-fieldname = 'WAERS2'.
  ls_fcat-seltext_m = '§£§Ñ§Ý§ð§ä§Ñ'.
  ls_fcat-col_pos  = 11.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '5'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Exchange Rate----------------------------*
  ls_fcat-fieldname = 'UKURS'.
  ls_fcat-seltext_m = '§¬§µ§²§³'.
  ls_fcat-col_pos  = 12.
  ls_fcat-outputlen = '10'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Reference----------------------------*
  ls_fcat-fieldname = 'XBLNR'.
  ls_fcat-seltext_m = '§á§â§Ú§Þ§Ö§é§Ñ§ß§Ú§Ö'.
  ls_fcat-col_pos  = 13.
  ls_fcat-outputlen = '40'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------FI Document Number/Type----------------------------*
  ls_fcat-fieldname = 'BELNR'.
  ls_fcat-seltext_m = '¡í §á§â§à§Ó§à§Õ§Ü§Ú'.
  ls_fcat-col_pos  = 14.
  ls_fcat-outputlen = '15'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.



*  IF MCONTAINER IS INITIAL .
*    CREATE OBJECT MCONTAINER
*                  EXPORTING
*                  CONTAINER_NAME = 'OVERVIEW' .
*
*    CREATE OBJECT MALV
*              EXPORTING I_PARENT = MCONTAINER.
*
*     GS_LAYOUT-SEL_MODE = 'X'.
*
*    CALL METHOD MALV->SET_TABLE_FOR_FIRST_DISPLAY
*           EXPORTING
*             IS_LAYOUT = GS_LAYOUT
*           CHANGING
*             IT_FIELDCATALOG = LT_fieldcat
*             IT_OUTTAB = gt_bsik[] .
*    ENDIF.

* call ALV grid output
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program = 'YSE_RU_FI_OPEN_ITEMS'
*      i_structure_name   = 'YSE_ACT_RU'
*      i_grid_settings    = ls_grid
      is_layout          = ls_layout
      i_save             = 'A'
      it_fieldcat        = lt_fieldcat
      it_events          = lt_events
*      it_sort            = gt_sort
    TABLES
      t_outtab           = gt_bsik
    EXCEPTIONS
      program_error      = 1
      OTHERS             = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " output_list_bsik
