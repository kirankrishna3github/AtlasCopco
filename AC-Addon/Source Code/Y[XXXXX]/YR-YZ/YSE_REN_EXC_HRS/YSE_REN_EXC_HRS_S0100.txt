*&---------------------------------------------------------------------*
*&  Include           YSE_REN_EXC_HRS_S0100                            *
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& SCREEN LOGIC 0100 --------------------------------------------------*
*&---------------------------------------------------------------------*

************************************************************************
* MODULE 0100_STATUS OUTPUT                                            *
************************************************************************
MODULE 0100_STATUS OUTPUT.
  SET TITLEBAR 'EHRS_OVERVIEW' .
  SET PF-STATUS 'STATUS0100'.
ENDMODULE.                 " 0100_STATUS OUTPUT

************************************************************************
* MODULE 0100_PREPARE_SCREEN OUTPUT                                    *
************************************************************************
MODULE 0100_PREPARE_SCREEN OUTPUT.

  IF OBJ_CONT_OV IS INITIAL .
    CREATE OBJECT OBJ_CONT_OV
             EXPORTING CONTAINER_NAME = 'OVERVIEW' .

    CREATE OBJECT OBJ_ALV_OV
              EXPORTING I_PARENT = OBJ_CONT_OV.

    CREATE OBJECT OBJ_EVENT_HNDL_OV.

*   Enable Line Selection And Double-Clicking
    SET HANDLER OBJ_EVENT_HNDL_OV->HANDLE_DOUBLE_CLICK FOR OBJ_ALV_OV.

    PERFORM 0100_BUILD_ALV.

  ENDIF.

ENDMODULE.                 " 0100_PREPARE_SCREEN OUTPUT

************************************************************************
* Module 0100_USER_COMMAND INPUT                                       *
************************************************************************
MODULE 0100_USER_COMMAND INPUT.

  CASE OKCODE.
    WHEN 'BACK' OR 'EXIT'.
      CALL METHOD OBJ_ALV_OV->FREE.
      FREE OBJ_ALV_OV.
      CALL METHOD OBJ_CONT_OV->FREE.
      FREE OBJ_CONT_OV.
*      CALL METHOD CL_GUI_CFW=>FLUSH.
      LEAVE TO SCREEN 0.
    WHEN 'REFR'.
      PERFORM 0100_REFRESH.
    WHEN 'CLUP'.
      PERFORM 9999_DELETE_UNLINKED_DATA.
      PERFORM 0100_REFRESH.

  ENDCASE.

ENDMODULE.                 " 0100_USER_COMMAND INPUT

*&---------------------------------------------------------------------*
*&      Form  0100_BUILD_ALV
*&---------------------------------------------------------------------*
*       Build ALV
*----------------------------------------------------------------------*
FORM 0100_BUILD_ALV.

* Clear the field catalog table
  REFRESH: GT_FIELDCAT_OV.

* Fetch the field catalog for structure YSE_RENT_EHRSP_OUTPUT
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_BUFFER_ACTIVE              = ' '
      I_STRUCTURE_NAME             = 'YSE_RENT_EHRSK_OUTPUT'
    CHANGING
      CT_FIELDCAT                  = GT_FIELDCAT_OV.

* Modify some of the fields
  LOOP AT GT_FIELDCAT_OV ASSIGNING <FIELDCAT>.
    CASE <FIELDCAT>-FIELDNAME.
      WHEN 'BELNR' OR 'ERZET' OR 'ERDAT'   OR 'ERNAM'    OR 'FPLNR' OR 'FPLTR'
                   OR 'KNUMV' OR 'BDKNUMV'.
        <FIELDCAT>-NO_OUT = GC_CHAR_X.
      WHEN 'EQUNR'.
        <FIELDCAT>-OUTPUTLEN = 10.
      WHEN 'KBETR' OR 'KWERT' OR 'KWERTA' OR 'BDKBETR' OR 'BDKWERT' OR 'BDKWERTA'.
        <FIELDCAT>-OUTPUTLEN = 8.
      WHEN 'CNHRS' OR 'ACHRS' OR 'EXHRS' OR 'BDDAYS'.
        <FIELDCAT>-OUTPUTLEN = 6.
      WHEN 'EHSTA' OR 'BDSTA'.
        <FIELDCAT>-OUTPUTLEN = 5.
        <FIELDCAT>-ICON      = GC_CHAR_X.
    ENDCASE.
  ENDLOOP.

* Set layout variables
* GS_LAYOUT-NO_TOOLBAR = LC_TRUE.
  GS_LAYOUT-SEL_MODE   = 'D'.

* Display the grid
  CALL METHOD OBJ_ALV_OV->SET_TABLE_FOR_FIRST_DISPLAY
    EXPORTING
      I_STRUCTURE_NAME              = 'YSE_RENT_EHRSK_OUTPUT'
      IS_LAYOUT                     = GS_LAYOUT
    CHANGING
      IT_OUTTAB                     = GT_EHRSK[]
      IT_FIELDCATALOG               = GT_FIELDCAT_OV
    EXCEPTIONS
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      OTHERS                        = 4.

  IF SY-SUBRC <> 0.
*     MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*     WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
ENDFORM.                    " 0100_BUILD_ALV

*&---------------------------------------------------------------------*
*&      Form  0100_DBLCLICK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM 0100_DBLCLICK  USING    P_ROW
                             P_COLUMN
                             P_ROW_NO.

* Depending on the column which is double-clicked
  CASE P_COLUMN.
*   If "Running hours", "Excess Hours" or "Calc Amount", show the measuring documents used...
    WHEN 'ACHRS' OR 'EXHRS' OR 'KWERT'.
      PERFORM 0100_LOAD_MD_DETAILS USING P_ROW P_COLUMN P_ROW_NO.
*   If "Breakdown days" or "Calc Amount"
    WHEN 'BDDAYS' OR 'BDKWERT'.
      PERFORM 0100_LOAD_BD_DETAILS USING P_ROW P_COLUMN P_ROW_NO.
*   If Billing doc, item or Actual (Document) value or "Cond unit value", show the billing document
    WHEN 'BBELN' OR 'KBETR' OR 'BPOSN' OR 'KWERTA' OR 'BDKBETR' OR 'BDKWERTA'.
      PERFORM 0100_OPEN_VF02       USING P_ROW P_COLUMN P_ROW_NO.
*   If Contract, contract item or contract allowed hours, show the contract
    WHEN 'CBELN' OR 'CPOSN' OR 'CNHRS'.
      PERFORM 0100_OPEN_VA42       USING P_ROW P_COLUMN P_ROW_NO.
*   If Equipment number, show the equipment (display)
    WHEN 'EQUNR'.
      PERFORM 0100_OPEN_IE03       USING P_ROW P_COLUMN P_ROW_NO.

  ENDCASE. " P_COLUMN.

ENDFORM.                    " 0100_DBLCLICK

*&---------------------------------------------------------------------*
*&      Form  0100_LOAD_MD_DETAILS
*&---------------------------------------------------------------------*
*       Load details of Measuring documents used
*----------------------------------------------------------------------*
FORM 0100_LOAD_MD_DETAILS  USING    P_ROW
                                    P_COLUMN
                                    P_ROW_NO.

* Read the selected entry from GT_EHRSK
  READ TABLE GT_EHRSK INDEX P_ROW.
  CHECK SY-SUBRC EQ 0.

* Reset GT_EHRSP
  CLEAR: GT_EHRSP,
         GT_EHRSP[].

* Select from YSE_EHRSP
  SELECT *
      INTO CORRESPONDING FIELDS OF TABLE GT_EHRSP
      FROM YSE_RENT_EHRSP
     WHERE BELNR = GT_EHRSK-BELNR.

* Fill the RECDV_O field (the reading value in a better readable format
  LOOP AT GT_EHRSP.
    MOVE GT_EHRSP-RECDV TO GT_EHRSP-RECDV_O.
    MODIFY GT_EHRSP.
  ENDLOOP.

* Set Screen Variables (globally declared)
  GV_BBELN = GT_EHRSK-BBELN.
  GV_BPOSN = GT_EHRSK-BPOSN.

* Call Screen 200
  CALL SCREEN 200.

ENDFORM.                    " 0100_LOAD_MD_DETAILS

*&---------------------------------------------------------------------*
*&      Form  0100_LOAD_BD_DETAILS
*&---------------------------------------------------------------------*
*       Load details of Breakdown orders used
*----------------------------------------------------------------------*
FORM 0100_LOAD_BD_DETAILS  USING    P_ROW
                                    P_COLUMN
                                    P_ROW_NO.

* Read the selected entry from GT_EHRSK
  READ TABLE GT_EHRSK INDEX P_ROW.
  CHECK SY-SUBRC EQ 0.

* Reset GT_EHRSBD
  CLEAR: GT_EHRSBD,
         GT_EHRSBD[].

* Select from YSE_EHRSP
  SELECT *
      INTO CORRESPONDING FIELDS OF TABLE GT_EHRSBD
      FROM YSE_RENT_EHRSBD
     WHERE BELNR = GT_EHRSK-BELNR.

** Fill the RECDV_O field (the reading value in a better readable format
*  LOOP AT GT_EHRSP.
*    MOVE GT_EHRSP-RECDV TO GT_EHRSP-RECDV_O.
*    MODIFY GT_EHRSP.
*  ENDLOOP.

* Set Screen Variables (globally declared)
  GV_BBELN = GT_EHRSK-BBELN.
  GV_BPOSN = GT_EHRSK-BPOSN.

* Call Screen 300
  CALL SCREEN 300.

ENDFORM.                    " 0100_LOAD_BD_DETAILS

*&---------------------------------------------------------------------*
*&      Form  0100_OPEN_VF02
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM 0100_OPEN_VF02  USING    P_ROW
                              P_COLUMN
                              P_ROW_NO.

  DATA: LS_OPTIONS      TYPE CTU_PARAMS.

* Read the selected entry from GT_EHRSK
  READ TABLE GT_EHRSK INDEX P_ROW.
  CHECK SY-SUBRC EQ 0.

  LS_OPTIONS-NOBIEND = 'X'.
  LS_OPTIONS-DISMODE = 'E'.
  LS_OPTIONS-UPDMODE = 'S'.

* Clear the BDC tables
  CLEAR: IT_BDCDATA[], IT_BDCMSGS[].

* Prepare the first screen
  PERFORM 9999_BDC_ADD_SCREEN USING 'SAPMV60A' '0101'.
  PERFORM 9999_BDC_ADD_FIELD  USING 'VBRK-VBELN' GT_EHRSK-BBELN.
  PERFORM 9999_BDC_ADD_FIELD  USING 'BDC_OKCODE' '/00'.
* Call the transaction
  CALL TRANSACTION GC_TX_VF02 USING         IT_BDCDATA
                              OPTIONS  FROM LS_OPTIONS
                              MESSAGES INTO IT_BDCMSGS.

ENDFORM.                    " 0100_OPEN_VF02

*&---------------------------------------------------------------------*
*&      Form  0100_OPEN_VA42
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM 0100_OPEN_VA42  USING    P_ROW
                              P_COLUMN
                              P_ROW_NO.

  DATA: LS_OPTIONS      TYPE CTU_PARAMS.

* Read the selected entry from GT_EHRSK
  READ TABLE GT_EHRSK INDEX P_ROW.
  CHECK SY-SUBRC EQ 0.

  LS_OPTIONS-NOBIEND = 'X'.
  LS_OPTIONS-DISMODE = 'E'.
  LS_OPTIONS-UPDMODE = 'S'.

* Clear the BDC tables
  CLEAR: IT_BDCDATA[], IT_BDCMSGS[].

* Prepare the first screen
  PERFORM 9999_BDC_ADD_SCREEN USING 'SAPMV45A' '0102'.
  PERFORM 9999_BDC_ADD_FIELD  USING 'VBAK-VBELN' GT_EHRSK-CBELN.
  PERFORM 9999_BDC_ADD_FIELD  USING 'BDC_OKCODE' '/00'.
* Call the transaction
  CALL TRANSACTION GC_TX_VA42 USING         IT_BDCDATA
                              OPTIONS  FROM LS_OPTIONS
                              MESSAGES INTO IT_BDCMSGS.

ENDFORM.                    " 0100_OPEN_VA42

*&---------------------------------------------------------------------*
*&      Form  0100_OPEN_IE03
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM 0100_OPEN_IE03  USING    P_ROW
                              P_COLUMN
                              P_ROW_NO.

  DATA: LS_OPTIONS      TYPE CTU_PARAMS.

* Read the selected entry from GT_EHRSK
  READ TABLE GT_EHRSK INDEX P_ROW.
  CHECK SY-SUBRC EQ 0.
  CHECK GT_EHRSK-EQUNR NE SPACE.

  LS_OPTIONS-NOBIEND = 'X'.
  LS_OPTIONS-DISMODE = 'E'.
  LS_OPTIONS-UPDMODE = 'S'.

* Clear the BDC tables
  CLEAR: IT_BDCDATA[], IT_BDCMSGS[].

* Prepare the first screen
  PERFORM 9999_BDC_ADD_SCREEN USING 'SAPMIEQ0' '0100'.
  PERFORM 9999_BDC_ADD_FIELD  USING 'RM63E-EQUNR' GT_EHRSK-EQUNR.
  PERFORM 9999_BDC_ADD_FIELD  USING 'BDC_OKCODE' '/00'.
* Call the transaction
  CALL TRANSACTION GC_TX_IE03 USING         IT_BDCDATA
                              OPTIONS  FROM LS_OPTIONS
                              MESSAGES INTO IT_BDCMSGS.

ENDFORM.                    " 0100_OPEN_IE03

*&---------------------------------------------------------------------*
*&      Form  0100_REFRESH
*&---------------------------------------------------------------------*
FORM 0100_REFRESH .

* Variable to hold currently selected row
  DATA: LV_ROW TYPE LVC_T_ROW.

* Save current row cursor
  CALL METHOD OBJ_ALV_OV->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = LV_ROW.

* Select data again
  PERFORM 0100_LOAD_DATA.

* Redraw the alv grid
  CALL METHOD OBJ_ALV_OV->REFRESH_TABLE_DISPLAY.

* Recall last row cursor position
  CALL METHOD OBJ_ALV_OV->SET_SELECTED_ROWS
      EXPORTING
         IT_INDEX_ROWS = LV_ROW.

ENDFORM.                    " 0100_REFRESH

*&---------------------------------------------------------------------*
*&      Form  0100_LOAD_DATA
*&---------------------------------------------------------------------*
FORM 0100_LOAD_DATA .

* Define temp table
  DATA: LT_EHRSK LIKE GT_EHRSK OCCURS 0 WITH HEADER LINE.

  CLEAR: GT_EHRSK,
         GT_EHRSK[],
         LT_EHRSK,
         LT_EHRSK[],
         GT_KONV,
         GT_KONV[],
         GT_FPLT,
         GT_FPLT[].

* If a billing document number is provided on sel.scr., than select by joining
  IF NOT SO_VBELN[] IS INITIAL.
*   Select the "Calculated Excess Hours Documents" linking them back to a billing item
    SELECT YSE_RENT_EHRSK~BELNR
           YSE_RENT_EHRSK~ERNAM
           YSE_RENT_EHRSK~ERZET
           YSE_RENT_EHRSK~ERDAT
           YSE_RENT_EHRSK~FKART
           YSE_RENT_EHRSK~CBELN
           YSE_RENT_EHRSK~CPOSN
           YSE_RENT_EHRSK~BUKRS
           YSE_RENT_EHRSK~VKORG
           YSE_RENT_EHRSK~VTWEG
           YSE_RENT_EHRSK~SPART
           YSE_RENT_EHRSK~VKGRP
           YSE_RENT_EHRSK~VKBUR
           YSE_RENT_EHRSK~EQUNR
           YSE_RENT_EHRSK~FPLNR
           YSE_RENT_EHRSK~FPLTR
           YSE_RENT_EHRSK~WAERK
           YSE_RENT_EHRSK~CNHRS
           YSE_RENT_EHRSK~ACHRS
           YSE_RENT_EHRSK~EXHRS
           YSE_RENT_EHRSK~KBETR
           YSE_RENT_EHRSK~KWERT
           YSE_RENT_EHRSK~EHSTA
           YSE_RENT_EHRSK~BDDAYS
           YSE_RENT_EHRSK~BDKBETR
           YSE_RENT_EHRSK~BDKWERT
           YSE_RENT_EHRSK~BDSTA
           VBRP~VBELN AS BBELN
           VBRP~POSNR AS BPOSN
           VBRK~KNUMV
      INTO CORRESPONDING FIELDS OF TABLE GT_EHRSK
      FROM YSE_RENT_EHRSK
      JOIN VBRP
        ON YSE_RENT_EHRSK~BELNR = VBRP~ZZBELNR
      JOIN VBRK
        ON VBRK~VBELN = VBRP~VBELN
     WHERE VBRK~VBELN           IN SO_VBELN
       AND YSE_RENT_EHRSK~ERDAT IN SO_DATUM
       AND YSE_RENT_EHRSK~BUKRS IN SO_BUKRS
       AND YSE_RENT_EHRSK~VKORG IN SO_VKORG
       AND YSE_RENT_EHRSK~VTWEG IN SO_VTWEG
       AND YSE_RENT_EHRSK~SPART IN SO_SPART
       AND YSE_RENT_EHRSK~VKGRP IN SO_VKGRP
       AND YSE_RENT_EHRSK~VKBUR IN SO_VKBUR.

*   Stop loading if no result
    CHECK NOT GT_EHRSK[] IS INITIAL.

*   Select the Actual ZECA / ZEMA condition values for the documents in scope
*   Using the KNUMV from GT_EHRSK
    SELECT KNUMV KPOSN KSCHL KWERT
           INTO TABLE GT_KONV
           FROM KONV
            FOR ALL ENTRIES IN GT_EHRSK
          WHERE KNUMV = GT_EHRSK-KNUMV
            AND ( KONV~KSCHL = 'ZECA'
               OR KONV~KSCHL = 'ZEMA'
               OR KONV~KSCHL = 'ZRBD' ).

* If no billing document is provided on sel.scr., first select without VBRK/VBRP, then complete with date from VBRK/P tables
  ELSE.

*   Select the "Calculated Excess Hours Documents"
    SELECT *
      INTO CORRESPONDING FIELDS OF TABLE GT_EHRSK
      FROM YSE_RENT_EHRSK
     WHERE YSE_RENT_EHRSK~ERDAT IN SO_DATUM
       AND YSE_RENT_EHRSK~BUKRS IN SO_BUKRS
       AND YSE_RENT_EHRSK~VKORG IN SO_VKORG
       AND YSE_RENT_EHRSK~VTWEG IN SO_VTWEG
       AND YSE_RENT_EHRSK~SPART IN SO_SPART
       AND YSE_RENT_EHRSK~VKGRP IN SO_VKGRP
       AND YSE_RENT_EHRSK~VKBUR IN SO_VKBUR. "#EC CI_NOFIELD

*   Stop loading if no result
    CHECK NOT GT_EHRSK[] IS INITIAL.

*   Find Billing Doc Details where a match is found
    SELECT VBRP~ZZBELNR AS BELNR
           VBRP~VBELN   AS BBELN
           VBRP~POSNR   AS BPOSN
           VBRK~KNUMV
      INTO CORRESPONDING FIELDS OF TABLE LT_EHRSK
      FROM VBRP
      JOIN VBRK
        ON VBRK~VBELN = VBRP~VBELN
       FOR ALL ENTRIES IN GT_EHRSK
     WHERE VBRP~ZZBELNR = GT_EHRSK-BELNR.
*   Complete GT_EHRSK with data from LT_EHRSK
*   This part is moved to inside the "LOOP AT GT_EHRSK" further on

*   Select the Actual ZECA / ZEMA condition values for the documents in scope
*   Using the KNUMV from LT_EHRSK
    SELECT KNUMV KPOSN KSCHL KWERT
           INTO TABLE GT_KONV
           FROM KONV
            FOR ALL ENTRIES IN LT_EHRSK
          WHERE KNUMV = LT_EHRSK-KNUMV
            AND ( KONV~KSCHL = 'ZECA'
               OR KONV~KSCHL = 'ZEMA'
               OR KONV~KSCHL = 'ZRBD' ).

  ENDIF.

* Select billing plan dates for the documents in scope
  SELECT FPLNR FPLTR NFDAT FKDAT
         INTO TABLE GT_FPLT
         FROM FPLT
          FOR ALL ENTRIES IN GT_EHRSK
        WHERE FPLNR = GT_EHRSK-FPLNR
          AND FPLTR = GT_EHRSK-FPLTR.

* Complete GT_EHRSK
  LOOP AT GT_EHRSK.

*   Complete GT_EHRSK with data from LT_EHRSK if VBRK/P data was selected separately
    IF SO_VBELN[] IS INITIAL.
      READ TABLE LT_EHRSK WITH KEY BELNR = GT_EHRSK-BELNR.
      IF SY-SUBRC = 0.
        GT_EHRSK-BELNR = LT_EHRSK-BELNR.
        GT_EHRSK-BBELN = LT_EHRSK-BBELN.
        GT_EHRSK-BPOSN = LT_EHRSK-BPOSN.
      ENDIF.
    ENDIF.

*   Complete GT_EHRSK with actual ExcHrs condition value for this item
    IF SO_VBELN[] IS INITIAL AND NOT GT_EHRSK-BBELN IS INITIAL. " the above read on LT_EHRSK was successfull
      READ TABLE GT_KONV WITH KEY KNUMV = LT_EHRSK-KNUMV
                                  KPOSN = LT_EHRSK-BPOSN
                                  KSCHL = 'ZECA'.
      IF SY-SUBRC NE 0.
        READ TABLE GT_KONV WITH KEY KNUMV = LT_EHRSK-KNUMV
                                    KPOSN = LT_EHRSK-BPOSN
                                    KSCHL = 'ZEMA'.
      ENDIF.
    ELSEIF NOT SO_VBELN[] IS INITIAL.
      READ TABLE GT_KONV WITH KEY KNUMV = GT_EHRSK-KNUMV
                                  KPOSN = GT_EHRSK-BPOSN
                                  KSCHL = 'ZECA'.
      IF SY-SUBRC NE 0.
        READ TABLE GT_KONV WITH KEY KNUMV = GT_EHRSK-KNUMV
                                    KPOSN = GT_EHRSK-BPOSN
                                    KSCHL = 'ZEMA'.
      ENDIF.
    ENDIF.
*   If found, update the value in GT_EHRSK
    IF SY-SUBRC EQ 0.
      GT_EHRSK-KWERTA = GT_KONV-KWERT.
    ENDIF.

*   Complete GT_EHRSK with actual BrkDwn condition value for this item
    IF SO_VBELN[] IS INITIAL AND NOT GT_EHRSK-BBELN IS INITIAL. " the above read on LT_EHRSK was successfull
      READ TABLE GT_KONV WITH KEY KNUMV = LT_EHRSK-KNUMV
                                  KPOSN = LT_EHRSK-BPOSN
                                  KSCHL = 'ZRBD'.
    ELSE.
      READ TABLE GT_KONV WITH KEY KNUMV = GT_EHRSK-KNUMV
                                  KPOSN = GT_EHRSK-BPOSN
                                  KSCHL = 'ZRBD'.
    ENDIF.
*   If found, update the value in GT_EHRSK
    IF SY-SUBRC EQ 0.
      GT_EHRSK-BDKWERTA = GT_KONV-KWERT.
    ENDIF.

*   Complete GT_EHRSK with billing dates
    READ TABLE GT_FPLT WITH KEY FPLNR = GT_EHRSK-FPLNR
                                FPLTR = GT_EHRSK-FPLTR.
*   If found, update the dates in GT_EHSRK
    IF SY-SUBRC EQ 0.
      GT_EHRSK-NFDAT = GT_FPLT-NFDAT.
      GT_EHRSK-FKDAT = GT_FPLT-FKDAT.
    ENDIF.

*   Update status fields: replace with icon (traffic lights which depend on status)
    CASE GT_EHRSK-EHSTA.
      WHEN 'CACO'.
        GT_EHRSK-EHSTAI = '@08@'.  " Traffic light Green
      WHEN 'INTI' OR 'U724'.
        GT_EHRSK-EHSTAI = '@09@'.  " Traffic light Yellow
      WHEN OTHERS.
        GT_EHRSK-EHSTAI = '@0A@'.  " Traffic light Red
    ENDCASE.

    CASE GT_EHRSK-BDSTA.
      WHEN 'BDCO' OR 'NOBD'.
        GT_EHRSK-BDSTAI = '@08@'.  " Traffic light Green
      WHEN OTHERS.
        GT_EHRSK-BDSTAI = '@0A@'.  " Traffic light Red
    ENDCASE.

    MODIFY GT_EHRSK.

  ENDLOOP.  " GT_EHRSK

* Sort table
  SORT GT_EHRSK BY ERDAT ERZET FPLNR FPLTR.

ENDFORM.                    " 0100_LOAD_DATA
