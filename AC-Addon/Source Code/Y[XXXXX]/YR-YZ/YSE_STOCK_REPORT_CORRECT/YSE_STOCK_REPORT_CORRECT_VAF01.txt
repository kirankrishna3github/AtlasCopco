*----------------------------------------------------------------------*
* Program ID     : YSE_STOCK_REPORT_CORRECT_VAF01                      *
* Program Title  : YSE_STOCK_REPORT table changes for                  *
*                : YSE_STOCK_VAL_PREV_PERIOD                           *
* Author         : Dashmantha                                          *
* Date           : 23.01.2017                                          *
* Change Request : CR4131                                              *
* Transport      : CD1K990757                                          *
* Description    : Correcting YSE_STOCK_REPORT table data              *
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
***INCLUDE YSE_STOCK_REPORT_CORRECT_VAF01 .
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  VALIDATE_SCREEN
*&---------------------------------------------------------------------*

FORM validate_screen .

  LOOP AT SCREEN.
    IF screen-name = 'P_TABLE'.
      screen-input = '0'.
    ENDIF.
    MODIFY SCREEN.
  ENDLOOP.

ENDFORM.                    " VALIDATE_SCREEN
*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
*       Select data and update table suitably
*----------------------------------------------------------------------*
FORM get_data .

* Select the complete data from YSE_STOCK_REPORT
  SELECT * FROM (p_table)
    INTO TABLE gt_yse_stock_report WHERE bwkey IN so_plant.

* Select all material document numbers from MSEG for all materials of table YSE_STOCK_REPORT
  IF NOT gt_yse_stock_report[] IS INITIAL.
    SELECT werks
           matnr
           mblnr
           mjahr
           budat_mkpf
           bwart      FROM mseg
                      INTO TABLE gt_mseg
                      FOR ALL ENTRIES IN gt_yse_stock_report
                      WHERE matnr = gt_yse_stock_report-matnr
                      AND   werks = gt_yse_stock_report-bwkey.
    IF sy-subrc = 0 AND
       gt_mseg[] IS NOT INITIAL.

      SORT gt_mseg BY mblnr mjahr ASCENDING.
* Select all the material document numbers dates form MKPF
      SELECT mblnr
             mjahr
             budat FROM mkpf
                    INTO TABLE gt_mkpf
                    FOR ALL ENTRIES IN gt_mseg
                    WHERE mblnr = gt_mseg-mblnr
                    AND   mjahr = gt_mseg-mjahr.
      IF sy-subrc = 0.
        SORT gt_mseg BY mblnr mjahr.
        SORT gt_mkpf BY mblnr mjahr.

        LOOP AT gt_mseg INTO wa_mseg.
          READ TABLE gt_mkpf INTO wa_mkpf
                             WITH KEY mblnr = wa_mseg-mblnr
                                      mjahr = wa_mseg-mjahr BINARY SEARCH.
          IF sy-subrc = 0.
            wa_mseg-budat_mkpf = wa_mkpf-budat.
            MODIFY gt_mseg FROM wa_mseg TRANSPORTING budat_mkpf.
            CLEAR wa_mseg.
          ENDIF.
        ENDLOOP.

* Eliminate the records of movement types 501, 502, 561 and 562 whose date is 2016.12.31
        LOOP AT gt_mseg INTO wa_mseg.
          lv_tabix = sy-tabix.
          IF ( wa_mseg-bwart = gv_501 OR
               wa_mseg-bwart = gv_502 OR
               wa_mseg-bwart = gv_561 OR
               wa_mseg-bwart = gv_562 ) AND wa_mseg-budat_mkpf GE gv_date1. " 20161231
            DELETE gt_mseg INDEX lv_tabix.
          ENDIF.
        ENDLOOP.

* Collect only latest materil movement date.
        SORT gt_mseg BY werks matnr ASCENDING budat_mkpf DESCENDING.
        LOOP AT gt_mseg INTO wa_mseg.
          wa_mseg1 = wa_mseg.
          AT NEW matnr.
            APPEND wa_mseg1 TO gt_mseg1.
            CLEAR wa_mseg1.
          ENDAT.
        ENDLOOP.

* update the latest movement dates if not correct as per table MKPF and write the log if corrected
        SORT gt_mseg1 BY werks matnr.

        LOOP AT gt_yse_stock_report INTO wa_yse_stock_report.
          READ TABLE gt_mseg1 INTO wa_mseg1
                              WITH KEY werks = wa_yse_stock_report-bwkey
                                       matnr = wa_yse_stock_report-matnr
                              BINARY SEARCH.

          IF sy-subrc = 0 AND ( wa_yse_stock_report-lfgja NE wa_mseg1-budat_mkpf+0(4) OR
                                wa_yse_stock_report-lfmon NE wa_mseg1-budat_mkpf+4(2) ).

            lv_lfgja = wa_yse_stock_report-lfgja.
            lv_lfmon = wa_yse_stock_report-lfmon.

            wa_yse_stock_report-lfgja = wa_mseg1-budat_mkpf+0(4).
            wa_yse_stock_report-lfmon = wa_mseg1-budat_mkpf+4(2).

            UPDATE yse_stock_report FROM wa_yse_stock_report.
            IF sy-subrc = 0.
              APPEND wa_yse_stock_report TO  gt_yse_stock_report1.
              CLEAR wa_yse_stock_report.
*              WRITE :/ 'Period changed from'(001),
*                        lv_lfgja,
*                        lv_lfmon,
*                        'TO'(002),
*                        wa_mseg1-budat_mkpf+0(4),
*                        wa_mseg1-budat_mkpf+4(2),
*                        'for material'(003),
*                        wa_yse_stock_report-matnr,
*                        'and Plant'(004),
*                        wa_yse_stock_report-bwkey.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    " GET_DATA
*&---------------------------------------------------------------------*
*&      Form  DISPLAY
*&---------------------------------------------------------------------*
*       Display table yse_stock_report to spool after period update    *
*----------------------------------------------------------------------*
FORM display .

*&---------------------------------------------------------------------*
*                           Pattern ID : 001                           *
*                   Begin of Pattern: A L V   C A L L                  *
*&---------------------------------------------------------------------*

* Prepare layout for the ALV display
  PERFORM sub_prepare_layout USING wa_layout
                               c_check    "Column Optimize
                               space      "No Column Heading
                               c_check    "Zebra layout
                               space      "No Vertical line
                               space      "No Key Fix
                               c_check    "No Input
                               space      "Window Titlebar
                               space      "No Sumchoice
                               space      "No total line
                               space      "No subchoice
                               space      "No subtotals
                               space      "Totals only
                               space      "Totals text
                               space      "No scrolling
                               space      "Detail popup
                               space.     "Detail Titlebar

* Prepare Event table for the ALV display
  PERFORM sub_populate_events TABLES it_events
                               USING c_alv_events-top_of_page
                                    'SUB_TOP_OF_PAGE'.


* Prepare field catalog for the ALV display
  PERFORM sub_create_fieldcatalog.

* Display report output
  PERFORM sub_display_report TABLES gt_yse_stock_report1 "YSE_STOCK_REPORT
                          USING sy-cprog        "Callback program
                                wa_layout       "Display layout
                                it_fieldcat     "Field Catalog
                                it_sortcat      "Sort details
                                c_check         "Variant(A, ,U,X)
                                wa_variant      "Display Variant
                                it_events       "Events
                                'YSE_STOCK_REPORT'     "Output itab name
                                c_check.        "Grid display

ENDFORM.                    " DISPLAY
*&------------------------------------------------------------------*
*&      Form  SUB_create_fieldcatalog
*&------------------------------------------------------------------*
*       text
*-------------------------------------------------------------------*
*       No parameter passed
*-------------------------------------------------------------------*
FORM sub_create_fieldcatalog .
  PERFORM sub_build_fieldcat_tab TABLES it_fieldcat USING:
'YSE_STOCK_REPORT' 'FIELD' ' ' 'DB_TAB' ' ' ' ' 'FLD TEXT' ' ' ' ' ' ' 'L'.
ENDFORM.                    " sub_create_fieldcatalog
*&-------------------------------------------------------------------
*&      Form  sub_prepare_layout
*&------------------------------------------------------------------*
*   Prepare the Layout of the Report Output List
*-------------------------------------------------------------------*
*      -->P_WA_LAYOUT             " Layout structure
*      -->P_NO_COLHEAD            " No Column Headings
*      -->P_ZEBRA                 " Stripped Pattern
*      -->P_NO_VLINE              " Columns Separated by Space
*      -->P_NO_KEYFIX             " Do not fix key fields
*      -->P_NO_INPUT              " Display fields only
*      -->P_WINDOW_TITLEBAR       " Title of List
*      -->P_NO_SUMCHOICE          " No Summation Choice
*      -->P_NO_TOTALLINE          " Do not show total Line
*      -->P_NO_SUBCHOICE          " No Subtotal Choice
*      -->P_NO_SUBTOTALS          " Do not Show Subtotals
*      -->P_TOTALS_ONLY           " Show Totals only
*      -->P_TOTALS_TEXT           " Totals Text
*      -->P_NO_SCROLLING          " Allow no scrolling
*      -->P_DETAIL_POPUP          " Show details in a Popup
*      -->P_DETAIL_TITLEBAR       " Tile for the Detail window
*-------------------------------------------------------------------*
FORM sub_prepare_layout USING p_wa_layout     TYPE slis_layout_alv
                              p_col_optimize  TYPE any
                              p_no_colhead    TYPE any
                              p_zebra         TYPE any
                              p_no_vline      TYPE any
                              p_no_keyfix     TYPE any
                              p_no_input      TYPE any
                              p_window_titlebar TYPE any
                              p_no_sumchoice  TYPE any
                              p_no_totalline  TYPE any
                              p_no_subchoice  TYPE any
                              p_no_subtotals  TYPE any
                              p_totals_only   TYPE any
                              p_totals_text   TYPE any
                              p_no_scrolling  TYPE any
                              p_detail_popup  TYPE any
                              p_detail_titlebar TYPE any.

  p_wa_layout-colwidth_optimize        = p_col_optimize.
  p_wa_layout-no_colhead               = p_no_colhead.
  p_wa_layout-zebra                    = p_zebra.
  p_wa_layout-no_vline                 = p_no_vline.
  p_wa_layout-no_keyfix                = p_no_keyfix.
  p_wa_layout-no_input                 = p_no_input.
  p_wa_layout-window_titlebar          = p_window_titlebar.
  p_wa_layout-no_sumchoice             = p_no_sumchoice.
  p_wa_layout-no_totalline             = p_no_totalline.
  p_wa_layout-no_subchoice             = p_no_subchoice.
  p_wa_layout-no_subtotals             = p_no_subtotals.
  p_wa_layout-totals_only              = p_totals_only.
  p_wa_layout-totals_text              = p_totals_text.
  p_wa_layout-no_scrolling             = p_no_scrolling.
  p_wa_layout-detail_popup             = p_detail_popup.
  p_wa_layout-detail_titlebar          = p_detail_titlebar.

ENDFORM.                    " sub_prepare_layout
*&------------------------------------------------------------------*
*      Form sub_build_fieldcat_tab
*&------------------------------------------------------------------*
*    This subroutine is used to build the field catalog table for
*    generating an ALV report
*-------------------------------------------------------------------*
*    Parameters:
*    tablename       --> Internal Table Name
*    fieldname       --> Internal Table Field Name
*    key             --> (X or space) to declare field as key
*    referencetable  --> Reference table
*    outputactive    --> Output active
*    col_posn        --> Cloumn Position
*    col_hdng        --> Column heading
*    datatype        --> Data Type
*    outputlen       --> Length of output
*    description     --> Desciption text
*    justification   --> Justification of output L, R etc
*-------------------------------------------------------------------*
FORM sub_build_fieldcat_tab TABLES p_i_fieldcatalog
                             USING tablename      TYPE any
                                   fieldname      TYPE any
                                   key            TYPE any
                                   referencetable TYPE any
                                   outputactive   TYPE any
                                   col_posn       TYPE any
                                   col_hdng       TYPE any
                                   datatype       TYPE any
                                   outputlen      TYPE any
                                   description    TYPE any
                                   justification  TYPE any.

  DATA l_fieldcat TYPE slis_fieldcat_alv.

  l_fieldcat-tabname      = tablename.      " Internal Table Name
  l_fieldcat-fieldname    = fieldname.      " Internal Table Fld Name
  l_fieldcat-key          = key. "(X or space) to declare fld as key
  l_fieldcat-ref_tabname  = referencetable. " Reference table
  l_fieldcat-no_out       = outputactive.   " Output active
  l_fieldcat-col_pos      = col_posn.       " Cloumn Position
  l_fieldcat-reptext_ddic = col_hdng.       " Column heading
  l_fieldcat-datatype     = datatype.       " Data Type
  l_fieldcat-outputlen    = outputlen.      " Length of output
  l_fieldcat-seltext_m    = description.    " Desciption text
  l_fieldcat-just         = justification.  " Justification

*  APPEND l_fieldcat TO p_i_fieldcatalog.

ENDFORM.                    " sub_build_fieldcat_tab

*&-----------------------------------------------------------------*
*&      Form  sub_populate_events
*&-----------------------------------------------------------------*
*     Populate events for the ALV report
*------------------------------------------------------------------*
*      -->P_NAME  Name of the Event
*      -->P_FORM  Name of the Subroutine to handle the Event
*------------------------------------------------------------------*
FORM sub_populate_events TABLES p_i_event
                          USING p_name       TYPE any
                                p_form       TYPE any.

  DATA  l_wa_event TYPE slis_alv_event.

  l_wa_event-name          = p_name.
  l_wa_event-form          = p_form.
  APPEND l_wa_event TO p_i_event.

ENDFORM.                    " sub_populate_events

*&-----------------------------------------------------------------*
*&      Form  sub_add_sort_field
*&-----------------------------------------------------------------*
*        Add a Field to the Sort Catalog
*------------------------------------------------------------------*
*      -->P_SPOS              " Sort Postion
*      -->P_FIELDNAME         " Sort Field
*      -->P_TABNAME           " Sort Table
*      -->P_UP                " Sort Ascending
*      -->P_DOWN              " Sort Descending
*      -->P_SUBTOT            " Sobtotal on the Field
*------------------------------------------------------------------*
FORM sub_add_sort_field TABLES p_i_sortcatalog
                         USING p_spos          TYPE any
                               p_fieldname     TYPE any
                               p_tabname       TYPE any
                               p_up            TYPE any
                               p_down          TYPE any
                               p_subtot        TYPE any.

* Internal table and Work area for ALV field Sort Catalog
  DATA  l_wa_sortcat TYPE slis_sortinfo_alv  .

  l_wa_sortcat-spos          = p_spos.
  l_wa_sortcat-fieldname     = p_fieldname.
  l_wa_sortcat-tabname       = p_tabname.
  l_wa_sortcat-up            = p_up.
  l_wa_sortcat-down          = p_down.
  l_wa_sortcat-subtot        = p_subtot.
  APPEND l_wa_sortcat TO p_i_sortcatalog.

ENDFORM.                    " sub_add_sort_field
*&------------------------------------------------------------------*
*&      Form  sub_display_report
*&------------------------------------------------------------------*
*   Call the ALV Interface to Display the Report Output List
*-------------------------------------------------------------------*
*      -->P_I_OUTTAB                " Output List Internal Table
*      -->P_I_CALLBACK_PROGRAM      " Callback Program name
*      -->P_IS_LAYOUT               " Layout Defination
*      -->P_IT_FIELDCAT             " Field Catalog
*      -->P_IT_SORT                 " Sort Catalog
*      -->P_SAVE                    " Allow saving of User Variants
*      -->P_IS_VARIANT              " Variant Name
*      -->P_IT_EVENTS               " List Events
*      -->P_FLAG                    " Flg determine LIST/GRID display
*-------------------------------------------------------------------*
FORM sub_display_report TABLES p_i_outtab
                         USING value(p_i_callback_program) TYPE any
                               p_is_layout                 TYPE any
                               p_it_fieldcat               TYPE any
                               p_it_sort                   TYPE any
                               p_save                      TYPE any
                               p_is_variant                TYPE any
                               p_it_events                 TYPE any
                               p_itabname                  TYPE any
                               p_flag                      TYPE any.

  DATA l_tabname(30) TYPE c.
  l_tabname = p_itabname.
  TRANSLATE l_tabname TO UPPER CASE.

* Merge field characteristics from Dictionary
  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'YSE_STOCK_REPORT'
*      i_program_name     = p_i_callback_program
*      i_internal_tabname = l_tabname
*      i_inclname         = p_i_callback_program
    CHANGING
      ct_fieldcat        = p_it_fieldcat.

  IF p_flag IS INITIAL.         "ALV List display

    CALL FUNCTION 'REUSE_ALV_LIST_DISPLAY'
      EXPORTING
        i_callback_program = p_i_callback_program
        is_layout          = p_is_layout
        it_fieldcat        = p_it_fieldcat
        it_sort            = p_it_sort
        i_save             = p_save
        is_variant         = p_is_variant
        it_events          = p_it_events
      TABLES
        t_outtab           = p_i_outtab
      EXCEPTIONS
        program_error      = 1
        OTHERS             = 2.
    IF sy-subrc NE 0.
*     Error handling
    ENDIF.

  ELSE.

*   ALV Grid display
    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
      EXPORTING
        i_callback_program = p_i_callback_program
        is_layout          = p_is_layout
        it_fieldcat        = p_it_fieldcat
        it_sort            = p_it_sort
        i_save             = p_save
        is_variant         = p_is_variant
        it_events          = p_it_events
      TABLES
        t_outtab           = gt_yse_stock_report1 "p_i_outtab
      EXCEPTIONS
        program_error      = 1
        OTHERS             = 2.
    IF sy-subrc NE 0.
*     Error handling
    ENDIF.

  ENDIF.

ENDFORM.                    " sub_display_report
*&------------------------------------------------------------------*
*&      Form  SUB_TOP_OF_PAGE
*&------------------------------------------------------------------*
*       Subroutine for Top of Page for ALV
*-------------------------------------------------------------------*
FORM sub_top_of_page.
  DATA
  it_header   TYPE slis_t_listheader.   "ALV header
  CONSTANTS: c_hyphen(1)   TYPE c VALUE '-'.   " Hyphen
  DATA  l_alv_header       TYPE slis_listheader.

* Title for ALV
  l_alv_header-typ  = 'H'.
  l_alv_header-info = 'Period correction in table YSE_STOCK_REPORT'(005).
  APPEND l_alv_header TO it_header .
  CLEAR l_alv_header.

* First detail
  l_alv_header-typ   = 'S'.
  l_alv_header-key   = 'Program:'(006).
  l_alv_header-info  = sy-repid.
  l_alv_header-info+42  = 'System:'(007).
  l_alv_header-info+50  = sy-sysid.
  l_alv_header-info+53  = c_hyphen.
  l_alv_header-info+54  = sy-mandt.
  APPEND l_alv_header TO it_header .
  CLEAR l_alv_header.

* Second Detail
  l_alv_header-typ  = 'S'.
  l_alv_header-key   = 'User ID:'(008).
  l_alv_header-info =  sy-uname.
  l_alv_header-info+22  = 'Date:'(009).
  l_alv_header-info+28  = sy-datum.
  l_alv_header-info+42  = 'Time:'(010).
  l_alv_header-info+47  = sy-uzeit.
  APPEND l_alv_header TO it_header .
  CLEAR l_alv_header.
  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      it_list_commentary = it_header.
ENDFORM.                    "SUB_TOP_OF_PAGE

***********************************************************************
*                           Pattern ID : 001                           *
*                    End of Pattern: A L V   C A L L                   *
***********************************************************************
*&---------------------------------------------------------------------*
*&      Form  TABLE_TO_SPOOL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM table_to_spool .

  DATA : ls_fcat TYPE slis_fieldcat_alv.
  DATA: pt_fieldcat TYPE slis_t_fieldcat_alv.
*  DATA: g_flg_cn        TYPE char1.

  TYPES : BEGIN OF ty_out,
         bwkey  LIKE mbew-bwkey,
        matnr LIKE mbew-matnr,
        maktx LIKE makt-maktx,
        segment TYPE yse_prctr_bl-segment,
        zprctr LIKE marc-prctr,
        zgac(4) TYPE c,
        zpgc(4) TYPE c,
        lbkum LIKE mbew-lbkum,
        salk3 LIKE mbew-salk3,
        vmkum LIKE mbew-vmkum,
        vmsal LIKE mbew-vmsal,
        stprs LIKE mbew-stprs,
        bwprs LIKE mbew-bwprs,
        zkprs LIKE mbew-zkprs,
        abwkz LIKE mbew-abwkz,
        lfgja LIKE mbew-lfgja,
        lfmon LIKE mbew-lfmon,
        bklas LIKE mbew-bklas,
        lifnr TYPE eord-lifnr,
        ktokk TYPE lfa1-ktokk,
        selected,
        END OF ty_out.

  TYPES: BEGIN OF ty_eord,
          matnr  TYPE eord-matnr,       "Material Number
          werks  TYPE eord-werks,       "Plant
          lifnr  TYPE eord-lifnr,       "Vendor Account Number
          flifn  TYPE eord-flifn,       "Indicator: Fixed vendor
         END OF ty_eord,

         BEGIN OF ty_lfa1,
           lifnr TYPE lfa1-lifnr,       "Account Number of Vendor
           ktokk TYPE lfa1-ktokk,       "Vendor account group
         END OF ty_lfa1.

  DATA: gt_out TYPE STANDARD TABLE OF ty_out,
        wa_out TYPE ty_out,
        gt_yse_prctr_bl TYPE STANDARD TABLE OF yse_prctr_bl,
        lt_eord TYPE STANDARD TABLE OF ty_eord,
        lt_lfa1 TYPE STANDARD TABLE OF ty_lfa1,
*        wa_eord TYPE ty_eord,
        ls_eord TYPE ty_eord,
        ls_lfa1  TYPE ty_lfa1,
*        wa_lfa1 TYPE ty_lfa1,
        wa_yse_prctr_bl TYPE yse_prctr_bl.
*        wa_out TYPE ty_out.

  CONSTANTS:  c_cn01 TYPE werks VALUE 'CN01',
              c_cn41 TYPE werks VALUE 'CN41'.

* Update segment usng profit center
  SELECT * FROM yse_stock_report INTO CORRESPONDING FIELDS OF TABLE gt_out
                                  WHERE bwkey IN so_plant.
  IF  gt_out[] IS NOT INITIAL.
    SELECT * FROM yse_prctr_bl INTO TABLE       gt_yse_prctr_bl
                            FOR ALL ENTRIES IN gt_out
                            WHERE              prctr = gt_out-zprctr.
    IF sy-subrc = 0.
      LOOP AT gt_out INTO wa_out.
        READ TABLE gt_yse_prctr_bl INTO wa_yse_prctr_bl
                                   WITH KEY prctr = wa_out-zprctr.
        IF sy-subrc = 0.
          wa_out-segment = wa_yse_prctr_bl-segment.
          MODIFY gt_out FROM wa_out TRANSPORTING segment.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDIF.

* Updating LIFNR and ktokk
  IF g_flg_cn IS NOT INITIAL.

    IF gt_out IS NOT INITIAL.
      SELECT  matnr                   "Material Number
              werks                   "Plant
              lifnr                   "Vendor Account Number
              flifn                   "Indicator: Fixed vendor
        FROM  eord
        INTO TABLE lt_eord
        FOR ALL ENTRIES IN gt_out
        WHERE matnr = gt_out-matnr
          AND werks = gt_out-bwkey
          AND flifn = 'X'.
      SELECT  matnr                   "Material Number
              werks                   "Plant
              lifnr                   "Vendor Account Number
              flifn                   "Indicator: Fixed vendor
        FROM  eord
        APPENDING TABLE lt_eord
        FOR ALL ENTRIES IN gt_out
        WHERE matnr = gt_out-matnr
          AND ( werks = c_cn01 OR werks = c_cn41 )
          AND flifn = 'X'.
      IF lt_eord IS NOT INITIAL.
        SELECT  lifnr                 "Account Number of Vendor
                ktokk                 "Vendor account group
          FROM lfa1
          INTO TABLE lt_lfa1
          FOR ALL ENTRIES IN lt_eord
          WHERE lifnr = lt_eord-lifnr.
      ENDIF.
      LOOP AT gt_out INTO wa_out .

        CLEAR: ls_eord.
        READ TABLE lt_eord INTO ls_eord
          WITH KEY matnr = wa_out-matnr
                   werks = wa_out-bwkey.
        IF sy-subrc = 0.
          wa_out-lifnr = ls_eord-lifnr.
        ELSE.
          CLEAR: ls_eord.
          READ TABLE lt_eord INTO ls_eord
            WITH KEY matnr = wa_out-matnr
                     werks = c_cn01.
          IF sy-subrc = 0.
            wa_out-lifnr = ls_eord-lifnr.
          ELSE.
            CLEAR: ls_eord.
            READ TABLE lt_eord INTO ls_eord
              WITH KEY matnr = wa_out-matnr
                       werks = c_cn41.
            IF sy-subrc = 0.
              wa_out-lifnr = ls_eord-lifnr.
            ENDIF.
          ENDIF.
        ENDIF.
        CLEAR ls_lfa1.
        READ TABLE lt_lfa1 INTO ls_lfa1
          WITH KEY lifnr = ls_eord-lifnr.
        IF sy-subrc = 0.
          wa_out-ktokk = ls_lfa1-ktokk.
        ENDIF.
        MODIFY gt_out FROM wa_out TRANSPORTING lifnr ktokk.
      ENDLOOP.
    ENDIF.
  ENDIF.

* Build field catalog

*---------------------Plant-----------------------*
  ls_fcat-fieldname = 'BWKEY'.
  ls_fcat-seltext_l = 'Plant'(022).
  APPEND ls_fcat TO pt_fieldcat.
  CLEAR ls_fcat.
*---------------------Material--------------------*
  ls_fcat-fieldname = 'MATNR'.
  ls_fcat-rollname = 'MATNR'.
  ls_fcat-outputlen = '18'.
  ls_fcat-no_convext = 'X'.
  APPEND ls_fcat TO pt_fieldcat.
  CLEAR ls_fcat.
*------------------Material description-----------*
  ls_fcat-fieldname = 'MAKTX'.
  ls_fcat-seltext_l = 'Material description'(023).
  ls_fcat-outputlen = '40'.
  APPEND ls_fcat TO pt_fieldcat.
  CLEAR ls_fcat.

*------------------Profit Center------------------*
  ls_fcat-fieldname = 'ZPRCTR'.
  ls_fcat-seltext_l = 'Prof. Cntr'(025).
  ls_fcat-outputlen = '10'.
  APPEND ls_fcat TO pt_fieldcat.
  CLEAR ls_fcat.
*--------------------------GAC--------------------*
  ls_fcat-fieldname = 'ZGAC'.
  ls_fcat-seltext_l = 'GAC'.
  ls_fcat-outputlen = '4'.
  APPEND ls_fcat TO pt_fieldcat.
  CLEAR ls_fcat.
*--------------------------PGC--------------------*
  ls_fcat-fieldname = 'ZPGC'.
  ls_fcat-seltext_l = 'PGC'.
  ls_fcat-outputlen = '4'.
  APPEND ls_fcat TO pt_fieldcat.
  CLEAR ls_fcat.
*---------------total stock current period-------------*
  ls_fcat-fieldname = 'LBKUM'.
  ls_fcat-seltext_l = 'Stock curr.period'(026).
  ls_fcat-outputlen = '17'.
  APPEND ls_fcat TO pt_fieldcat.
  CLEAR ls_fcat.
*---------------value stock current period-------------*
  ls_fcat-fieldname = 'SALK3'.
  ls_fcat-seltext_l = 'Value curr.period'(027).
  ls_fcat-outputlen = '17'.
  APPEND ls_fcat TO pt_fieldcat.
  CLEAR ls_fcat.
*---------------total stock prev period-------------*
  ls_fcat-fieldname = 'VMKUM'.
  ls_fcat-seltext_l = 'Stock prev.period'(028).
  ls_fcat-outputlen = '17'.
  APPEND ls_fcat TO pt_fieldcat.
  CLEAR ls_fcat.
*---------------value stock prev period-------------*
  ls_fcat-fieldname = 'VMSAL'.
  ls_fcat-seltext_l = 'Value prev.period'(029).
  ls_fcat-outputlen = '17'.
  APPEND ls_fcat TO pt_fieldcat.
  CLEAR ls_fcat.
*---------------standard price-------------*
  ls_fcat-fieldname = 'STPRS'.
  ls_fcat-seltext_l = 'Standard Price'(030).
  APPEND ls_fcat TO pt_fieldcat.
  CLEAR ls_fcat.
*---------------Tax price 1 -------------*
  ls_fcat-fieldname = 'BWPRS'.
  ls_fcat-seltext_l = 'Tax Price 1'(031).
  APPEND ls_fcat TO pt_fieldcat.
  CLEAR ls_fcat.
*---------------Future Price -------------*
  ls_fcat-fieldname = 'ZKPRS'.
  ls_fcat-seltext_l = 'Future Price'(032).
  APPEND ls_fcat TO pt_fieldcat.
  CLEAR ls_fcat.
*---------------Devaluation indicator-------------*
  ls_fcat-fieldname = 'ABWKZ'.
  ls_fcat-seltext_l = 'Dev.Ind'(033).
  ls_fcat-outputlen = '07'.
  APPEND ls_fcat TO pt_fieldcat.
  CLEAR ls_fcat.
*--------------- year-------------*
  ls_fcat-fieldname = 'LFGJA'.
  ls_fcat-seltext_l = 'Last Yr.Mvt'(034).
  ls_fcat-outputlen = '11'.
  APPEND ls_fcat TO pt_fieldcat.
  CLEAR ls_fcat.
*--------------- period------------*
  ls_fcat-fieldname = 'LFMON'.
  ls_fcat-seltext_l = 'Last Per.Mvt'(035).
  ls_fcat-outputlen = '12'.
  APPEND ls_fcat TO pt_fieldcat.
  CLEAR ls_fcat.
*----------Valuation Class-----------*
  ls_fcat-fieldname = 'BKLAS'.
  ls_fcat-seltext_l = 'Val.Cl'.
  ls_fcat-outputlen = '06'.
  APPEND ls_fcat TO pt_fieldcat.
  CLEAR ls_fcat.

*------------------Segment------------------*
  ls_fcat-fieldname = 'SEGMENT'.
  ls_fcat-seltext_l = 'Segment'(024).
  ls_fcat-outputlen = '10'.
  APPEND ls_fcat TO pt_fieldcat.
  CLEAR ls_fcat.

  IF g_flg_cn IS NOT INITIAL.
*  ----------Vendor number  -----------*
    ls_fcat-fieldname = 'LIFNR'.
    ls_fcat-seltext_l = 'Vendor Number'(036).
    ls_fcat-outputlen = '10'.
    APPEND ls_fcat TO pt_fieldcat.
    CLEAR ls_fcat.
*  --Vendor account assignment group--*
    ls_fcat-fieldname = 'KTOKK'.
    ls_fcat-seltext_l = 'Vendor Account Group'(037).
    ls_fcat-outputlen = '4'.
    APPEND ls_fcat TO pt_fieldcat.
    CLEAR ls_fcat.
  ENDIF.

* Display ALV grid report
  DATA: g_repid TYPE sy-repid.
  g_repid = sy-repid.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
     EXPORTING
       i_callback_program                =  g_repid
       i_save                            = 'A'
*       it_events                         =  g_events_tab[]
*      I_GRID_TITLE                      =
*      I_GRID_SETTINGS                   =
*      is_layout                         =  g_layout
       it_fieldcat                       =  pt_fieldcat[]
     TABLES
        t_outtab                         =  gt_out.

ENDFORM.                    " TABLE_TO_SPOOL
*&---------------------------------------------------------------------*
*&      Form  CHECK_WERKS_CN
*&---------------------------------------------------------------------*
*       Check if the plant belong to china(including HK)
*----------------------------------------------------------------------*
FORM check_werks_cn .

  DATA: lt_t001w TYPE STANDARD TABLE OF t001w,
        ls_t001w TYPE t001w.
  SELECT *
    FROM t001w
    INTO TABLE lt_t001w
    WHERE werks IN so_plant.
  LOOP AT lt_t001w INTO ls_t001w.
    IF    ls_t001w-werks(2) = 'CN'
      OR  ls_t001w-werks(2) = 'HK'.
      g_flg_cn = 'X'.
      EXIT.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " CHECK_WERKS_CN
