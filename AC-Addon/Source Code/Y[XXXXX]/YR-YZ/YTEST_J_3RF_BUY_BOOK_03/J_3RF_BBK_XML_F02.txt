*----------------------------------------------------------------------*
***INCLUDE J_3RF_BBK_XML_F02.
*----------------------------------------------------------------------*
*
* Global XML include for common routines
*
*&---------------------------------------------------------------------*
*&      Form  CHECK_XML_SCREEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_xml_screen.
  DATA: l_i TYPE i.

  CHECK gv_xml_enabled CA 'XB' AND
        p_xml          = 'X'.

  CHECK gv_xml_visible   = 'X' OR  " XML controls are visible
        sscrfields-ucomm = 'ONLI'. " or RUN

  IF p_load <> 'X'.
    MESSAGE e071(9p).
  ENDIF.
  IF gv_xml_enabled = 'X'. " 2120495
  IF pa_xml IS INITIAL.
    MESSAGE e072(9p).
  ENDIF.
  IF p_add = 'X' AND pa_xmla IS INITIAL.
    MESSAGE e073(9p).
  ENDIF.
  ENDIF. " 2120495

* verify XML folder
  IF NOT p_xmldir IS INITIAL.
    l_i = strlen( p_xmldir ) - 1.
    IF p_xmldir+l_i(1) NA '\/'.
      CONCATENATE p_xmldir '\' INTO p_xmldir.
    ENDIF.
  ENDIF.

  PERFORM check_xml_hier  USING SPACE.

ENDFORM.                    " CHECK_XML_SCREEN
*&---------------------------------------------------------------------*
*&      Form  GET_SCREEN_FIELD
*&---------------------------------------------------------------------*
*       Returns field value from screen
*----------------------------------------------------------------------*
*      -->P_0095   text
*      <--P_DIRECTORY  text
*----------------------------------------------------------------------*
FORM get_screen_field  USING    i_field TYPE dynpread-fieldname
                       CHANGING c_value TYPE any.
  DATA: lt_dynp_value TYPE STANDARD TABLE OF dynpread,
        ls_dynp_value TYPE dynpread.

  REFRESH lt_dynp_value.

  ls_dynp_value-fieldname = i_field.
  APPEND ls_dynp_value TO lt_dynp_value.

  CALL FUNCTION 'DYNP_VALUES_READ'
    EXPORTING
      dyname               = syst-cprog
      dynumb               = syst-dynnr
    TABLES
      dynpfields           = lt_dynp_value
    EXCEPTIONS
      invalid_abapworkarea = 04
      invalid_dynprofield  = 08
      invalid_dynproname   = 12
      invalid_dynpronummer = 16
      invalid_request      = 20
      no_fielddescription  = 24
      undefind_error       = 28.
  CHECK sy-subrc = 0.

  LOOP AT lt_dynp_value INTO ls_dynp_value.
    IF ls_dynp_value-fieldname = i_field.
      c_value = ls_dynp_value-fieldvalue.
      EXIT.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " GET_SCREEN_FIELD
*&---------------------------------------------------------------------*
*&      Form  F4_FOR_XMLDIR
*&---------------------------------------------------------------------*
*       Select folder
*----------------------------------------------------------------------*
*  <--  p_xmldir        text
*----------------------------------------------------------------------*
FORM f4_for_xmldir CHANGING p_xmldir TYPE rlgrap-filename.
  DATA: directory   TYPE string,
        init_folder TYPE string,
        l_i         TYPE i,
        dynpfields  TYPE STANDARD TABLE OF dynpread.

  directory = p_xmldir.
  IF directory IS INITIAL.
*   read from screen
    PERFORM get_screen_field USING    'P_XMLDIR'
                             CHANGING directory.
  ENDIF.

  IF directory IS INITIAL.
    directory = 'C:\'.
  ENDIF.
  init_folder = directory.

  CALL METHOD cl_gui_frontend_services=>directory_browse
    EXPORTING
      initial_folder  = init_folder
    CHANGING
      selected_folder = directory
    EXCEPTIONS
      cntl_error      = 1
      error_no_gui    = 2
      OTHERS          = 3.
  IF NOT directory IS INITIAL.
    l_i = strlen( directory ) - 1.
    IF directory+l_i <> '\'.
      CONCATENATE directory '\' INTO p_xmldir.
    ELSE.
      p_xmldir = directory.
    ENDIF.
  ENDIF.

ENDFORM.                    " F4_FOR_XMLDIR
*&---------------------------------------------------------------------*
*&      Form  XML_GET_SIGNATURE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_L_SIGN  text
*----------------------------------------------------------------------*
FORM xml_get_signature  CHANGING e_sign TYPE j_3rf_sign_item.

  CLEAR e_sign.

  e_sign-sign_name = p_s1_nam.
  e_sign-sign_type = p_s1_typ.
  e_sign-auth_doc  = p_a1_nam.

ENDFORM.                    " XML_GET_SIGNATURE
*&---------------------------------------------------------------------*
*&      Form  XML_GUID_PERIOD
*&---------------------------------------------------------------------*
*       Initiate J_3RF_BK_GUID period
*----------------------------------------------------------------------*
*      -->i_budat_begin text
*      -->i_budat_end   text
*      <--cs_bk_guid    text
*----------------------------------------------------------------------*
FORM xml_guid_period  USING  i_budat_begin TYPE bkpf-budat
                             i_budat_end   TYPE bkpf-budat
                    CHANGING cs_bk_guid    TYPE j_3rf_bk_guid.
  DATA: l_monat TYPE bkpf-monat.

  CHECK NOT i_budat_begin IS INITIAL AND
        NOT i_budat_end   IS INITIAL.

* fill monat
  l_monat = i_budat_begin+4(2).
  IF cs_bk_guid-monat_from IS INITIAL OR
     cs_bk_guid-monat_from < l_monat.
    cs_bk_guid-monat_from = l_monat.
  ENDIF.

* fill monat
  l_monat = i_budat_end+4(2).
  IF cs_bk_guid-monat_to IS INITIAL OR
     cs_bk_guid-monat_to > l_monat.
    cs_bk_guid-monat_to = l_monat.
  ENDIF.

ENDFORM.                    " XML_GUID_PERIOD
*&---------------------------------------------------------------------*
*&      Form  F4_FOR_XMLTAX
*&---------------------------------------------------------------------*
*       Search help for tax office code from table J_3RF_PARTNER
*----------------------------------------------------------------------*
*      <--C_XMLTAX  text
*----------------------------------------------------------------------*
FORM f4_for_xmltax  CHANGING c_xmltax TYPE j_3r_tax_auth.
  TYPES: BEGIN OF ty_fieldtab.
          INCLUDE STRUCTURE help_value.
  TYPES: END OF ty_fieldtab.
  TYPES: BEGIN OF ty_valuetab,
          value TYPE char30,
         END OF ty_valuetab.
  DATA: lt_fieldtab TYPE STANDARD TABLE OF ty_fieldtab,
        ls_fieldtab TYPE ty_fieldtab,
        lt_valuetab TYPE STANDARD TABLE OF ty_valuetab,
        ls_valuetab TYPE ty_valuetab,
        lt_partner  TYPE STANDARD TABLE OF j_3rf_partner,
        ls_partner  TYPE j_3rf_partner,
        l_xmltax    TYPE j_3r_tax_auth.

* get values from the table J_3RF_PARTNER
  REFRESH lt_fieldtab.
  CLEAR ls_fieldtab.
  ls_fieldtab-tabname    = 'J_3RF_PARTNER'.
  ls_fieldtab-fieldname  = 'TAX_AUTH'.
  ls_fieldtab-selectflag = 'X'.
  APPEND ls_fieldtab TO lt_fieldtab.

  CLEAR ls_fieldtab.
  ls_fieldtab-tabname    = 'J_3RF_PARTNER'.
  ls_fieldtab-fieldname  = 'LIFNR'.
  APPEND ls_fieldtab TO lt_fieldtab.

  SELECT tax_auth lifnr FROM j_3rf_partner
    INTO CORRESPONDING FIELDS OF TABLE lt_partner
    WHERE bukrs IN br_bukrs.
  SORT lt_partner ASCENDING.
  DELETE ADJACENT DUPLICATES FROM lt_partner.

  LOOP AT lt_partner INTO ls_partner.
    IF NOT ls_partner-tax_auth IS INITIAL.
      ls_valuetab-value = ls_partner-tax_auth.
      APPEND ls_valuetab TO lt_valuetab.
      ls_valuetab-value = ls_partner-lifnr.
      APPEND ls_valuetab TO lt_valuetab.
    ENDIF.
  ENDLOOP.

* read value from screen
  l_xmltax = c_xmltax.
  PERFORM get_screen_field USING    'P_XMLTAX'
                           CHANGING l_xmltax.

  CALL FUNCTION 'HELP_VALUES_GET_WITH_TABLE'
    EXPORTING
      display      = space
      fieldname    = 'TAX_AUTH'
      tabname      = 'J_3RF_PARTNER'
    IMPORTING
      select_value = l_xmltax
    TABLES
      fields       = lt_fieldtab
      valuetab     = lt_valuetab.

*------ ausgew#hltes MWSKZ ¨¹bernehmen ----------------------------------
  CHECK NOT l_xmltax IS INITIAL.

  c_xmltax = l_xmltax.

ENDFORM.                    " F4_FOR_XMLTAX
*&---------------------------------------------------------------------*
*&      Form  CHECK_XML_ENABLED
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_xml_enabled.
  CONSTANTS:
     lc_pur_method  TYPE abap_methname VALUE 'GENERATE_PURC_BOOK_XML',
     lc_file_method TYPE abap_methname VALUE 'RETURN_GENERATED_FILE_NAME'.

  DATA: l_classkey    TYPE seoclskey,
        lv_not_active TYPE seoflag,
        l_classname   TYPE seoclsname    ,
        ro_descr      TYPE REF TO cl_abap_classdescr,
        l_supported   TYPE flag,
        cx_oref       TYPE REF TO cx_root,
        cx_text       TYPE string.
  FIELD-SYMBOLS:
        <fs_method> TYPE abap_methdescr,
        <fs_param>  TYPE abap_parmdescr,
        <fs_attr>   TYPE abap_attrdescr.

  CLEAR: gv_xml_enabled, gv_xml_enabled_p14.

* 2120495 check BADI
  CLEAR l_supported.
  IF NOT ref IS INITIAL.
    try.
      CALL BADI ref->xml_supported
        CHANGING
          e_supported = l_supported.
      IF l_supported = 'X'.
        gv_xml_enabled = 'B'.
      ENDIF.
    catch cx_sy_dyn_call_illegal_method into cx_oref.
        cx_text = cx_oref->get_text( ).
        write / cx_text.
    endtry.
  ENDIF. " 2120495

* check that class CL_J3RF_VAT_XML exists
  l_classkey = gc_xml_class.
  CALL FUNCTION 'SEO_CLASS_EXISTENCE_CHECK'
    EXPORTING
      clskey        = l_classkey " CL_J3RF_VAT_XML
    IMPORTING
      not_active    = lv_not_active
    EXCEPTIONS
      not_specified = 1
      not_existing  = 2
      is_interface  = 3
      no_text       = 4
      inconsistent  = 5
      OTHERS        = 6.
  CHECK sy-subrc = 0.
  CHECK lv_not_active IS INITIAL.

* check that class J_3RF_REPORT exists
  l_classkey = gc_xml_engine.
  CALL FUNCTION 'SEO_CLASS_EXISTENCE_CHECK'
    EXPORTING
      clskey        = l_classkey " J_3RF_REPORT
    IMPORTING
      not_active    = lv_not_active
    EXCEPTIONS
      not_specified = 1
      not_existing  = 2
      is_interface  = 3
      no_text       = 4
      inconsistent  = 5
      OTHERS        = 6.
  CHECK sy-subrc = 0.
  CHECK lv_not_active IS INITIAL.

* XML engine is available
  gv_xml_enabled = 'X'.

* verify additional parameters for method GENERATE_PURC_BOOK_XML
  l_classname = gc_xml_class.
  TRY.
      ro_descr ?= cl_abap_typedescr=>describe_by_name( l_classname ).
      LOOP AT ro_descr->methods ASSIGNING <fs_method>.
        CASE <fs_method>-name.
          WHEN lc_pur_method.
*           check method parameters
            LOOP AT <fs_method>-parameters ASSIGNING <fs_param>.
              IF <fs_param>-name = 'IT_TABLE14'.
                gv_xml_enabled_x14 = 'X'.
              ENDIF.
            ENDLOOP.
          WHEN lc_file_method.
            gv_xml_file_attr = 'X'.
        ENDCASE.
      ENDLOOP.

    CATCH cx_root.
  ENDTRY.

ENDFORM.                    " CHECK_XML_ENABLED
*&---------------------------------------------------------------------*
*&      Form  CHECK_XML_HIER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->iv_init   text
*----------------------------------------------------------------------*
FORM check_xml_hier  USING iv_init TYPE flag.
  DATA: l_found TYPE flag.

  CHECK gv_xml_enabled = 'X'.

  IF NOT pa_xml IS INITIAL.
    CALL METHOD (gc_xml_class)=>check_xml_hier
      EXPORTING
        i_hier_code = pa_xml
      CHANGING
        e_hier_name = _xmlkey
        e_found     = l_found.
    IF l_found IS INITIAL.
      IF iv_init = 'X'.
        CLEAR pa_xml.
      ELSE.
        MESSAGE e074(9p) WITH pa_xml.
      ENDIF.
    ENDIF.
  ENDIF.

  IF NOT pa_xmla IS INITIAL.
    CALL METHOD (gc_xml_class)=>check_xml_hier
      EXPORTING
        i_hier_code = pa_xmla
      CHANGING
        e_hier_name = _xmlkeya
        e_found     = l_found.
    IF l_found IS INITIAL.
      IF iv_init = 'X'.
        CLEAR pa_xmla.
      ELSE.
        MESSAGE e074(9p) WITH pa_xmla.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    " CHECK_XML_HIER
*&---------------------------------------------------------------------*
*&      Form  CHECK_BEFORE_OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_before_output .
* check radio buttons
  IF p_alv = 'X'.
    CLEAR: p_adobe, p_xml.
  ELSEIF p_adobe = 'X'.
    CLEAR: p_alv, p_xml.
  ELSEIF p_xml = 'X'.
    CLEAR: p_alv, p_adobe.
  ENDIF.

* 2074991 - load description Text IDs
  IF ( NOT par_extn IS INITIAL AND
       t_extn       IS INITIAL )  OR
     ( NOT par_extd IS INITIAL AND
       t_extd       IS INITIAL ).
    PERFORM get_textids_desc USING    par_extn
                             CHANGING t_extn.
    PERFORM get_textids_desc USING    par_extd
                             CHANGING t_extd.
  ENDIF.
ENDFORM.                    " CHECK_BEFORE_OUTPUT
*&---------------------------------------------------------------------*
*&      Form  GET_TEXTIDS_DESC                                  2074991
*&---------------------------------------------------------------------*
*       Get TextID desc
*----------------------------------------------------------------------*
FORM get_textids_desc  USING    i_id   TYPE tdid
                       CHANGING e_desc TYPE c.
  CONSTANTS:
         lc_object TYPE tdobject VALUE 'BELEG'.
  TYPES: BEGIN OF ty_ttxit,
           tdid   TYPE tdid,
           tdtext TYPE tdtext,
         END OF ty_ttxit,
         ty_t_ttxit TYPE SORTED TABLE OF ty_ttxit WITH UNIQUE KEY tdid.
  STATICS: st_ttxit TYPE ty_t_ttxit.
  DATA: ls_ttxit TYPE ty_ttxit,
        l_spras  TYPE ttxit-tdspras.

  IF i_id IS INITIAL.
    CLEAR e_desc.
    RETURN.
  ENDIF.

  READ TABLE st_ttxit INTO ls_ttxit
    WITH TABLE KEY tdid = i_id.
  IF sy-subrc <> 0.
    DO 4 TIMES.
      CASE sy-index.
        WHEN 1. l_spras = sy-langu.
        WHEN 2. l_spras = 'R'.
                CHECK l_spras <> sy-langu.
        WHEN 3. l_spras = 'E'.
                CHECK l_spras <> sy-langu.
        WHEN 4. CLEAR l_spras.
      ENDCASE.

      IF NOT l_spras IS INITIAL.
        SELECT SINGLE tdid tdtext FROM ttxit
          INTO CORRESPONDING FIELDS OF ls_ttxit
          WHERE tdspras  = l_spras   AND
                tdobject = lc_object AND
                tdid     = i_id.
      ELSE.
        SELECT SINGLE tdid tdtext FROM ttxit    "#EC CI_GENBUFF
          INTO CORRESPONDING FIELDS OF ls_ttxit
          WHERE tdobject = lc_object AND
                tdid     = i_id.
      ENDIF.
      IF sy-subrc = 0.
        EXIT.
      ENDIF.
    ENDDO.

    IF ls_ttxit-tdid IS INITIAL.
      ls_ttxit-tdid = i_id.
    ENDIF.
    INSERT ls_ttxit INTO TABLE st_ttxit.
  ENDIF.

  e_desc = ls_ttxit-tdtext.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_CURR_CODE                                     2074991
*&---------------------------------------------------------------------*
*       Get code of currency
*----------------------------------------------------------------------*
FORM get_curr_code  USING    i_waers TYPE tcurc-waers
                    CHANGING e_altwr TYPE tcurc-altwr
                             e_ltext TYPE ltext.
  TYPES: BEGIN OF ty_curr,
           waers TYPE tcurc-waers,
           altwr TYPE tcurc-altwr,
           ltext TYPE ltext,
         END OF ty_curr,
         ty_t_curr TYPE SORTED TABLE OF ty_curr WITH UNIQUE KEY waers.
  STATICS: st_curr TYPE ty_t_curr,
           ss_curr TYPE ty_curr.
  DATA:    l_spras TYPE spras.

  IF ss_curr-waers <> i_waers.
    READ TABLE st_curr INTO ss_curr
      WITH TABLE KEY waers = i_waers.
    IF sy-subrc <> 0.
      SELECT SINGLE altwr FROM tcurc
        INTO ss_curr-altwr
        WHERE waers = i_waers.
      IF sy-subrc <> 0.
        CLEAR ss_curr-altwr.
      ENDIF.
      ss_curr-waers = i_waers.
*     get description
      DO 2 TIMES.
        CASE sy-index.
          WHEN 1. l_spras = 'R'.
          WHEN 2. CHECK sy-langu <> 'R'.
                  l_spras = sy-langu.
        ENDCASE.
        SELECT SINGLE ltext FROM tcurt
          INTO ss_curr-ltext
          WHERE spras = l_spras AND
                waers = ss_curr-waers.
        IF NOT ss_curr-ltext IS INITIAL.
          EXIT.
        ENDIF.
      ENDDO.

*     get currency description from J_3RJ_CURR_CONV (delivered by note 1784853)
      PERFORM get_curr_conv USING    ss_curr-waers
                            CHANGING ss_curr-altwr
                                     ss_curr-ltext.
      IF ss_curr-ltext IS INITIAL.
        ss_curr-ltext = ss_curr-waers.
      ENDIF.

      INSERT ss_curr INTO TABLE st_curr.
    ENDIF.
  ENDIF.

  e_altwr = ss_curr-altwr.
  e_ltext = ss_curr-ltext.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_CURR_CONV                                     2074991
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM get_curr_conv  USING    i_waers TYPE tcurc-waers
                    CHANGING c_altwr TYPE tcurc-altwr
                             c_ltext TYPE ltext.
  CONSTANTS: lc_j_curr  TYPE ddobjname VALUE 'J_3RJ_CURR_CONV',
             lc_j_currt TYPE ddobjname VALUE 'J_3RJ_CURR_T'.
  STATICS: s_active TYPE flag.
  DATA:    lt_dd03p TYPE STANDARD TABLE OF dd03p,
           l_altwr  TYPE tcurc-altwr,
           l_ltext  TYPE ltext,
           l_spras  TYPE spras.

* check that table J_3RJ_CURR_CONV exists
  IF s_active IS INITIAL.
    s_active = 'N'. " not active by default

*   check if J_3RJ_CURR_CONV table exists
    CALL FUNCTION 'DDIF_TABL_GET'
      EXPORTING
        name          = lc_j_curr
        langu         = sy-langu
      TABLES
        dd03p_tab     = lt_dd03p[]
      EXCEPTIONS
        illegal_input = 1
        OTHERS        = 2.
    IF sy-subrc = 0 AND
       NOT lt_dd03p[] IS INITIAL.
      s_active = 'Y'.
    ENDIF.
  ENDIF.

  CHECK s_active = 'Y'.

* get currency code
  SELECT SINGLE ru_curr FROM (lc_j_curr)
    INTO l_altwr
    WHERE waers = i_waers.
  CHECK sy-subrc = 0.

* replace code
  c_altwr = l_altwr.

* get currency text
  DO 2 TIMES.
    CASE sy-index.
      WHEN 1. l_spras = 'R'.
      WHEN 2. CHECK sy-langu <> 'R'.
              l_spras = sy-langu.
    ENDCASE.

    SELECT SINGLE short_text FROM (lc_j_currt)
      INTO l_ltext
      WHERE waers = i_waers
        AND spras = l_spras.
    CHECK sy-subrc = 0.
    c_ltext = l_ltext.
    EXIT.
  ENDDO.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ADOBE_CURRENCY_COLUMN                             2074991
*&---------------------------------------------------------------------*
*       Generate currency column (currency name and code)
*----------------------------------------------------------------------*
FORM adobe_currency_column  USING    i_waers  TYPE tcurc-waers
                                     i_hwaer  TYPE tcurc-waers
                            CHANGING e_curtxt TYPE c
                                     e_altwr  TYPE tcurc-altwr. " 2099024.
  DATA: l_altwr TYPE tcurc-altwr,
        l_ltext TYPE ltext,
        l_str   TYPE j_3r_purchase_ledger_line-curtxt.

  CLEAR: e_curtxt, e_altwr.

* the column is filled for foreign currency only
  CHECK i_waers <> i_hwaer.

* get currency code
  PERFORM get_curr_code  USING    i_waers
                         CHANGING l_altwr
                                  l_ltext.
* build result
  l_str = l_ltext.
  IF NOT l_altwr IS INITIAL.
    CONCATENATE l_str ';'  INTO l_str.
    CONCATENATE l_str l_altwr INTO l_str SEPARATED BY space.
    e_altwr = l_altwr.
  ENDIF.

  e_curtxt = l_str.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FORMAT_PAY_EXT_NUMBER                             2119301
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM format_pay_ext_number  CHANGING c_bldat  TYPE bkpf-bldat
                                     c_number TYPE j3rdl_doclist-pay_ext_number.
  DATA: l_date TYPE c LENGTH 10.

  CHECK NOT c_bldat IS INITIAL.

* convert YYYYMMDD to DD.MM.YYYY
  l_date+0(2) = c_bldat+6(2).
  l_date+2(1) = '.'.
  l_date+3(2) = c_bldat+4(2).
  l_date+5(1) = '.'.
  l_date+6(4) = c_bldat+0(4).
  IF NOT c_number IS INITIAL.
    CONCATENATE c_number l_date INTO c_number SEPARATED BY space.
  ELSE.
    c_number = l_date.
  ENDIF.
  CLEAR c_bldat.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  READ_XML_CUSTOMIZING                              2120495
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM read_xml_customizing USING    i_section TYPE j3rdl_decl_section
                          CHANGING c_hier    TYPE j_3rf_rep_hier_key.
  DATA: vat_date_b TYPE sy-datum,
        vat_date_e TYPE sy-datum.

  CLEAR g_vat_decl_cust.
  CHECK NOT g_vat_decl_flag IS INITIAL.

* get reported date
  CALL FUNCTION 'J3RVATDPER_DATE'
    EXPORTING
      i_gjahr          = vr_gjahr
      i_period         = vr_perio
    CHANGING
      vat_date_b       = vat_date_b
      vat_date_e       = vat_date_e.

  CALL FUNCTION 'J3RVATDSEC_HIER'
    EXPORTING
      i_valid_from       = vat_date_b
      i_sec              = i_section
    CHANGING
      e_hier             = c_hier.

  IF c_hier <> space.
    g_vat_decl_cust = 'X'.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_XML_FILE_NAME
*&---------------------------------------------------------------------*
*       Return file name from class CL_J3RF_VAT_XML
*----------------------------------------------------------------------*
FORM get_xml_file_name  CHANGING e_file_name TYPE string.
  DATA: l_file_name TYPE string.

  CLEAR e_file_name.

  CHECK gv_xml_file_attr = 'X'.

  CALL METHOD (gc_xml_class)=>return_generated_file_name
    RECEIVING
      rv_file_name = e_file_name.

* 2138132 append extension to file name
  IF NOT e_file_name IS INITIAL.
    l_file_name = e_file_name.
    TRANSLATE l_file_name TO UPPER CASE.
    IF l_file_name NS '.XML'.
      CONCATENATE e_file_name '.xml' INTO e_file_name.
    ENDIF.
  ENDIF.

ENDFORM.
