*&---------------------------------------------------------------------*
*& Report  YSE_LINK_SUBORDERS                                          *
*&                                                                     *
*&---------------------------------------------------------------------*
*&                                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*
**********************************************************************
* DEV request       : CD1K912162                                      *
* Descr       :070312-SE-UXT-D177 Creation suborders - workorders     *
* Author            : Christophe Geerts                               *
* Date              : 13/03/2007                                      *
* Functional spec   : D177                                            *
* Description       :
*Sap standard sets the link with the service order when creating a
*sales order, but the underlying suborders are not changed
*This is also necessary, so we do it via this program
*This program is triggered via workflow YBUS2032 on events:
* - changed
* - created
*Method 'update_kdauf_and_kdpos' is executed
*=====================================================================*
* Change History Log                                                  *
*---------------------------------------------------------------------*
* Mod. no.|  Date    | Name           | Correction Number | Change Ref*
*---------------------------------------------------------------------*
* MOD-001 |dd/mm/yyyy| xxxxxxxxxxxxxx | XXXXxxxxxx        | XXXXxxxxxx*
*                                                                     *
* Description:                                                        *
*---------------------------------------------------------------------*
* MOD-002 |dd/mm/yyyy| xxxxxxxxxxxxxx | XXXXxxxxxx                    *
*                                                                     *
* Description:                                                        *
***********************************************************************


REPORT  yse_link_suborders                      .
* Internal tables for the BAPI
DATA lt_methods      TYPE bapi_alm_order_method_t.
DATA ls_methods      TYPE bapi_alm_order_method.
DATA lt_header              TYPE TABLE OF bapi_alm_order_headers_i.
DATA ls_header              TYPE bapi_alm_order_headers_i.
DATA lt_header_up           TYPE TABLE OF bapi_alm_order_headers_up.
DATA ls_header_up           TYPE bapi_alm_order_headers_up.
DATA: wa_caufv TYPE caufv.
DATA: it_caufv TYPE TABLE OF caufv.
DATA: lt_return TYPE STANDARD TABLE OF bapiret2,
      ls_return TYPE bapiret2.
DATA: it_vbap TYPE TABLE OF vbap.
DATA: wa_vbap TYPE vbap.
DATA: lv_main_aufnr TYPE aufnr.
DATA: lt_enq TYPE STANDARD TABLE OF seqg3,
      lv_gname TYPE eqegraname VALUE 'AUFK',
      lv_garg TYPE eqegraarg,
      lv_count TYPE sytabix.


PARAMETERS:  p_vbeln TYPE vbeln OBLIGATORY.


*Get all the suborders linked to the main service order that was just updated via the standard
*Remember that there could be a different service order per line in the sales order

SELECT * FROM vbap INTO TABLE it_vbap
              WHERE vbeln EQ p_vbeln.


LOOP AT it_vbap INTO wa_vbap.
  CLEAR lv_main_aufnr.
*Already put the reference right for later processing
  wa_caufv-kdauf = wa_vbap-vbeln.
  wa_caufv-kdpos = wa_vbap-posnr.

*Get the main suborder (only 1 per sales order line)
  SELECT SINGLE aufnr FROM caufv INTO lv_main_aufnr
                  WHERE kdauf EQ wa_vbap-vbeln AND
                        kdpos EQ wa_vbap-posnr.
  IF sy-subrc EQ 0.
*Try to get 1st level suborders
*=====================================================
    SELECT * FROM caufv INTO wa_caufv
              WHERE maufnr EQ lv_main_aufnr.
*Already put the reference right for later processing
      wa_caufv-kdauf = wa_vbap-vbeln.
      wa_caufv-kdpos = wa_vbap-posnr.
      APPEND wa_caufv TO it_caufv.
*Try to get the 2nd level suborders
*=====================================================
      SELECT * FROM caufv INTO wa_caufv
               WHERE maufnr EQ wa_caufv-aufnr.
*Already put the reference right for later processing
        wa_caufv-kdauf = wa_vbap-vbeln.
        wa_caufv-kdpos = wa_vbap-posnr.
        APPEND wa_caufv TO it_caufv.
*Try to get the 3nd level suborders
*=====================================================
        SELECT * FROM caufv INTO wa_caufv
                 WHERE maufnr EQ wa_caufv-aufnr.
*Already put the reference right for later processing
          wa_caufv-kdauf = wa_vbap-vbeln.
          wa_caufv-kdpos = wa_vbap-posnr.
          APPEND wa_caufv TO it_caufv.
*Try to get the 4nd level suborders
*=====================================================
          SELECT * FROM caufv INTO wa_caufv
                   WHERE maufnr EQ wa_caufv-aufnr.
*Already put the reference right for later processing
            wa_caufv-kdauf = wa_vbap-vbeln.
            wa_caufv-kdpos = wa_vbap-posnr.
            APPEND wa_caufv TO it_caufv.
          ENDSELECT.
        ENDSELECT.
      ENDSELECT.
    ENDSELECT.
  ENDIF.
ENDLOOP.


CLEAR wa_caufv.
LOOP AT it_caufv INTO wa_caufv.
*These are the suborders to be updated.
  FREE: lt_methods,
        lt_header,
        lt_header_up,
        lt_return.
  CLEAR: ls_methods,
         ls_header,
         ls_header_up,
         ls_return.
  ls_methods-refnumber  = '1'.
  ls_methods-objecttype = 'HEADER'.
  ls_methods-method     = 'CHANGE'.
  ls_methods-objectkey  = wa_caufv-aufnr.
  APPEND ls_methods TO lt_methods.
* 1e. Add SAVE-statement to the Methods.
  CLEAR ls_methods.
  ls_methods-method     = 'SAVE'.
*   LS_METHODS-METHOD     = 'DIALOG'.
  APPEND ls_methods TO lt_methods.


  ls_header-orderid       = wa_caufv-aufnr.
  ls_header_up-orderid    = wa_caufv-aufnr.

  ls_header-sales_ord       = wa_caufv-kdauf.
  ls_header_up-sales_ord    = 'X'.

  ls_header-s_ord_item       = wa_caufv-kdpos.
  ls_header_up-s_ord_item    = 'X'.

  APPEND ls_header TO lt_header.
  APPEND ls_header_up TO lt_header_up.

  CLEAR: lv_garg, lv_count, lt_enq.
  CONCATENATE sy-mandt wa_caufv-aufnr INTO lv_garg.
  DO 5 TIMES.


    CALL FUNCTION 'ENQUEUE_READ'
      EXPORTING
        gclient = sy-mandt
        gname   = lv_gname
        garg    = lv_garg
      IMPORTING
        number  = lv_count
      TABLES
        enq     = lt_enq.

    IF lv_count = 0.
      EXIT.
    ELSE.
      WAIT UP TO 3 SECONDS.
    ENDIF.

  ENDDO.

  CALL FUNCTION 'BAPI_ALM_ORDER_MAINTAIN'
    TABLES
      it_methods   = lt_methods
      it_header    = lt_header
      it_header_up = lt_header_up
*    IT_COMPONENT = IT_COMPONENT
      return       = lt_return.


*  CALL FUNCTION 'YSE_WRKFL_ERRORS'
*    EXPORTING
*      doc_num          = p_vbeln
*      doc_type         = wa_caufv-auart
*    TABLES
**    it_messtab       =
*      it_return        = lt_return
  .


  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = 'X'.
  CLEAR wa_caufv.
ENDLOOP.



*---------------------------------------------------------------------
*Linked (main)service order(s) for planned costs update
*
data: lt_vbep type standard table of vbep,
      ls_vbep type vbep.

data: lv_objkey type SWO_TYPEID.


select * from vbep into table lt_vbep
  where vbeln eq p_vbeln
  and aufnr <> ' '.

loop at lt_vbep into ls_vbep.
  move ls_vbep-aufnr to lv_objkey.
*Publish event that will trigger the service order wf for the planned cost update, settlement rules etc
  CALL FUNCTION 'SWE_EVENT_CREATE'
    EXPORTING
      OBJTYPE = 'BUS2088'
      OBJKEY  = lv_objkey
      EVENT   = 'CHANGED'.

  commit work and wait.

endloop.
