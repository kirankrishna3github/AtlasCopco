********************************************************************
* Program ID           : YSE_EM_INSERT_REMOVE_PART
* Program Title        : Switch stock policy
* Author               : Andr¨¦ Blommaert
* Date                 : 11.01.2007
* Change Request Number: CD1K907547_12122006 -SE-OTH-D186 Exception
*                        Management
* Description          : The purpose of this program is to show stock key
*   figures and to give the user the opportunity to change the stock policy
*   for a chosen material/plant combination
*==================================================================*
* Copied From         : (Cloned Program)
* Title               : (Program Title)
* Other Related obj   : (Object names)
*==================================================================*
* Change History Log
*------------------------------------------------------------------*
* Mod. no.|  Date    | Name           | Correction Number
*------------------------------------------------------------------*
* MOD-001 |dd/mm/yyyy| xxxxxxxxxxxxxx | XXXXxxxxxx
* Description:                                                   	*
*------------------------------------------------------------------*
* MOD-002 |dd/mm/yyyy| xxxxxxxxxxxxxx | XXXXxxxxxx
* Description:                                                   	*
********************************************************************
REPORT  YSE_EM_INSERT_REMOVE_PART   MESSAGE-ID YSE_SALES_LOG.

****************************
* TABLES
****************************
TABLES:
  MVKE,
  YSE_EM_MATPLANT.

****************************
* CONSTANTS
****************************
CONSTANTS:
* Stock Policy Constants
  C_ST(2)            VALUE 'Z5',             " Stocked
  C_NS(2)            VALUE 'Z7',             " Not Stocked
  C_NP(2)            VALUE 'Z6',             " No Planning
* Distr modes
  C_DTC(4)           VALUE 'ZDTC',           " DIRECT TO CUSTOMER
  C_NDTC(4)          VALUE 'NORM',           " Not DIRECT TO CUSTOMER
  C_LCL(3)           VALUE 'LCL',            " LOCAL MATERIALS
  C_NUMBERS(11)      VALUE ',123456789,',    "
  C_ZDTC_TEXT(25)    VALUE 'DTC',
  C_NZDTC_TEXT(25)   VALUE 'NDTC',
  C_LOCAL_TEXT(25)   VALUE 'LCL',
  C_NSTOCKED(25)     VALUE 'Not stocked',    "
  C_STOCKED(25)      VALUE 'Stocked',
  C_AUTOM_REORDER(2) VALUE 'VM',
  C_MRP(2)           VALUE 'PD',
  C_ZEROES(18)       VALUE '000000000000000000'.

****************************
* DATA
****************************
DATA:
  WA_VKORG       LIKE VBAK-VKORG,
  WA_WERKS       LIKE VBAP-WERKS,
  WA_MVGR4       LIKE MVKE-MVGR4,
  WA_TIMESTAMP   LIKE TOACR-LNR,
  WA_MATNR       LIKE YSE_EM_LOG-MATNR,
  WA_MAKTX       LIKE  YSE_EM_LOG-MAKTX,
  WA_COMMENT(39),
  WA_COMMENT_ORIGINAL(39),
  WA_HIST        LIKE YSE_EM_LOG-HIST,
  WA_REQ(7),
  WA_DISMM       LIKE MARC-DISMM,
  WA_MTPOS       LIKE MVKE-MTPOS,
  WA_OLD_MTPOS(40),
  WA_NEW_MTPOS(40),
  WA_OLD_DISMM_DESC(15),
  WA_NEW_DISMM_DESC(15),
  WA_DMAXSVAL    LIKE YSE_EM_LOG-DMAXSVAL,
  WA_NRLINES     LIKE YSE_EM_LOG-NRLINES,
  WA_LIFNR       LIKE EINA-LIFNR,
  WA_LIFNR_NAME  LIKE LFA1-NAME1,
  WA_EXC_TYPE(20),
  WA_PACK_QTY   TYPE INT4,
  WA_MSGTXT(100),
  WA_ANSWER,
  WA_UPDATE,
  WA_OLD_MINBE  TYPE INT4,
  WA_NEW_MINBE  TYPE INT4,
  WA_OLD_BSTFE  TYPE INT4,
  WA_NEW_BSTFE  TYPE INT4,
  WA_OLD_EISBE  TYPE INT4,
  WA_NEW_EISBE  TYPE INT4,
  WA_OLD_LSFLT(18),
  WA_NEW_LSFLT(18),
  WA_NEW_LSFL,
  WA_MAXLZ       LIKE MARC-MAXLZ,
  WA_WERKS_DESCR LIKE T001W-NAME1,
  WA_VKORG_DESCR LIKE TVKOT-VTEXT,
  OK_CODE        TYPE SY-UCOMM,
  SAVE_OK_CODE   TYPE SY-UCOMM,
  WA_HEADDATA    LIKE BAPIMATHEAD,
  WA_PLANTDATA   LIKE BAPI_MARC,
  WA_PLANTDATAX  LIKE BAPI_MARCX,
  WA_SALESDATA   LIKE BAPI_MVKE,
  WA_SALESDATAX  LIKE BAPI_MVKEX,
  WA_RETURN      LIKE BAPIRET2,
  BEGIN OF WA_MARC.
    INCLUDE STRUCTURE MARC. DATA:
    MTPOS LIKE MVKE-MTPOS,
  END OF WA_MARC,

****************************
* INTERNAL TABLES
****************************
  IT_RETURNMESSAGES LIKE BAPI_MATRETURN2 OCCURS 0 WITH HEADER LINE,
  IT_YSE_EM_ACTLOG  LIKE YSE_EM_ACTLOG   OCCURS 0 WITH HEADER LINE,
  IT_BAPI_MLTX      LIKE BAPI_MLTX       OCCURS 0 WITH HEADER LINE,
  IT_LINES          LIKE TLINE           OCCURS 0 WITH HEADER LINE,
  IT_LSFL           TYPE YSE_EM_LSFL_VAL OCCURS 0 WITH HEADER LINE.

****************************
* SELECTION SCREEN
****************************
SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
PARAMETERS:
  P_VKORG LIKE VBAK-VKORG MEMORY ID VKO OBLIGATORY,
  P_WERKS LIKE VBAP-WERKS MEMORY ID WRK OBLIGATORY,
  P_MATNR LIKE VBAP-MATNR MEMORY ID MAT OBLIGATORY,
  P_INS RADIOBUTTON GROUP RAD1 DEFAULT 'X',
  P_REM RADIOBUTTON GROUP RAD1.
SELECTION-SCREEN END OF BLOCK B1.

****************************
* INITIALIZATION
****************************
INITIALIZATION.
  SELECT * FROM YSE_EM_LSFL_VAL INTO TABLE IT_LSFL.

****************************
* AT SELECTION SCREEN
****************************
AT SELECTION-SCREEN.

  PERFORM CHECK_AUTHORIZATION .

*********************************
* AT SELECTION SCREEN ON BLOCK B1
*********************************
AT SELECTION-SCREEN ON BLOCK B1.

* Check if insert or removal is possible
  SELECT SINGLE A~MATNR A~WERKS DISMM
                MAXLZ   LZEIH   BSTFE
                EISBE   MINBE
                PLIFZ   WEBAZ   MTPOS
           FROM MARC AS A
           JOIN MVKE AS B
             ON A~MATNR EQ B~MATNR
           INTO CORRESPONDING FIELDS OF WA_MARC
          WHERE A~MATNR EQ P_MATNR
            AND A~WERKS EQ P_WERKS
            AND B~VKORG EQ P_VKORG.
  IF SY-SUBRC > 0.
    MESSAGE E018 WITH P_WERKS P_VKORG .
  ENDIF.
* If part is currently inserted
  IF WA_MARC-MAXLZ > 0.
*   If user wants to insert
    IF P_INS = 'X'.
*     Yes -> Yes is not possible
      MESSAGE E011.
    ELSE.
*     Yes -> No
      WA_REQ = 'Yes->No'.
    ENDIF.
* If part is currently "removed"
  ELSE.
*   If user wants to remove
    IF P_REM = 'X'.
*     No -> No is not possible
      MESSAGE E012.
    ELSE.
*     No -> Yes
       WA_REQ = 'No->Yes'.
    ENDIF.
  ENDIF.

* Get sales org description into screen fields
  SELECT SINGLE B~VKORG B~VTEXT
           INTO (WA_VKORG, WA_VKORG_DESCR)
           FROM TVKO AS A
           JOIN TVKOT AS B
             ON A~VKORG EQ B~VKORG
          WHERE A~VKORG EQ P_VKORG AND
                B~SPRAS EQ 'E'.
  IF SY-SUBRC NE 0.
    MESSAGE E004 WITH P_VKORG.
  ENDIF.

* Get plant description into screen field
  SELECT SINGLE NAME1
           INTO WA_WERKS_DESCR
           FROM T001W
          WHERE WERKS = P_WERKS.
  WA_WERKS = P_WERKS.

* Check if stock policy-MRP Profile. Is stocked or Non-stocked?
  SELECT SINGLE MATNR
           INTO WA_MATNR
           FROM MARC
          WHERE MATNR = P_MATNR
            AND WERKS = P_WERKS
            AND ( DISMM = C_ST OR
                  DISMM = C_NS OR
                  DISMM = C_NP ).

  IF SY-SUBRC NE 0.
    MESSAGE E009 WITH P_MATNR P_WERKS.
  ENDIF.

* Check if mat has dist mode on distr chl 01
  SELECT SINGLE *
          FROM MVKE
         WHERE MATNR = P_MATNR
           AND VKORG = P_VKORG
           AND VTWEG = '01'.
  IF SY-SUBRC NE 0.
    MESSAGE E010 WITH P_MATNR P_VKORG.
  ENDIF.

* Get material description into screen field
  SELECT SINGLE MAKTX INTO WA_MAKTX
           FROM MAKT
          WHERE MATNR = P_MATNR
            AND SPRAS = 'E'.
  WA_MATNR = P_MATNR.

* Fill screen field with action chosen by user
  IF P_INS EQ 'X'.
    WA_EXC_TYPE = 'Insert part'.
  ELSE.
    WA_EXC_TYPE = 'Remove part'.
  ENDIF.

* Prepare some screen fields
  WA_OLD_MINBE = WA_MARC-MINBE.
  WA_OLD_EISBE = WA_MARC-EISBE.
  WA_OLD_BSTFE = WA_MARC-BSTFE.

****************************
* START-OF-SELECTION
****************************
START-OF-SELECTION.

  CALL SCREEN 200.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
MODULE STATUS_0200 OUTPUT.
  SET PF-STATUS 'DETAIL'.
  SET TITLEBAR 'DETAIL'.

ENDMODULE.                 " STATUS_0200  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  exit_200  INPUT
*&---------------------------------------------------------------------*
MODULE EXIT_200 INPUT.

  SAVE_OK_CODE = OK_CODE.
  CLEAR OK_CODE.

  CASE SAVE_OK_CODE.
    WHEN 'BACK' OR 'CANCEL' OR 'EXIT'.
      LEAVE TO SCREEN 0.
    WHEN 'ENTER'.

  ENDCASE.

ENDMODULE.                 " EXIT_200  INPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
MODULE USER_COMMAND_0200 INPUT.

  DATA: LV_TEXT(50).

  SAVE_OK_CODE = OK_CODE.
  CLEAR OK_CODE.

  CASE SAVE_OK_CODE.
    WHEN 'ACCEPT'.
      PERFORM ACCEPT_CHANGE.
    WHEN 'CLOSE'.
      LEAVE TO SCREEN 0.
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_0200  INPUT

*&---------------------------------------------------------------------*
*&      Module  FIND_MATERIAL_STOCK_INFO  OUTPUT
*&---------------------------------------------------------------------*
MODULE FIND_MATERIAL_STOCK_INFO OUTPUT.

  DATA: LV_TDNAME LIKE THEAD-TDNAME,
        LV_UMREZ LIKE EINA-UMREZ.

* COLLECT MORE DATA *
* ***************** *
* Don't repeat logic if simply 'ENTER' was pressed
  CHECK SAVE_OK_CODE NE 'ENTER'.

* Get pack quantity and lot size flag (and translate them)
  WA_PACK_QTY = '0'.
  SELECT SINGLE *
           FROM YSE_EM_MATPLANT
          WHERE MATNR EQ P_MATNR
            AND WERKS EQ P_WERKS.
  IF SY-SUBRC EQ 0.
    WA_PACK_QTY = YSE_EM_MATPLANT-PACK_QTY.
*   Translate current lot size calc flag
    READ TABLE IT_LSFL WITH KEY LSFL = YSE_EM_MATPLANT-LOTSIZE_IND.
    IF SY-SUBRC EQ 0.
      WA_OLD_LSFLT = IT_LSFL-LSFLT.
    ELSE.
      WA_OLD_LSFLT = SPACE.
    ENDIF.
  ELSE.
*   Assume values for screen fields
    WA_PACK_QTY  = SPACE.
    WA_OLD_LSFLT = SPACE.
*   Default values in working area YSE_EM_MATPLANT to save later (in case user Accepts)
    CLEAR YSE_EM_MATPLANT.
    YSE_EM_MATPLANT-MANDT = SY-MANDT.
    YSE_EM_MATPLANT-MATNR = P_MATNR.
    YSE_EM_MATPLANT-WERKS = P_WERKS.
  ENDIF.

* Get vendor
  SELECT SINGLE LIFNR INTO WA_LIFNR
           FROM EORD
          WHERE MATNR EQ P_MATNR
            AND WERKS EQ P_WERKS
            AND FLIFN EQ 'X'.
* Get vendor name
  IF SY-SUBRC EQ 0.
    SELECT SINGLE NAME1 INTO WA_LIFNR_NAME
             FROM LFA1
            WHERE LIFNR EQ WA_LIFNR.
  ENDIF.

* Get material text
  LV_TDNAME(18) = P_MATNR.
  LV_TDNAME+19(4) = P_WERKS.
* Get existing text
  CALL FUNCTION 'READ_TEXT'
    EXPORTING
      ID                      = 'LTXT'
      LANGUAGE                =  'E'
      NAME                    = LV_TDNAME
      OBJECT                  = 'MDTXT'
    TABLES
      LINES                   = IT_LINES
    EXCEPTIONS
      ID                      = 1
      LANGUAGE                = 2
      NAME                    = 3
      NOT_FOUND               = 4
      OBJECT                  = 5
      REFERENCE_CHECK         = 6
      WRONG_ACCESS_TO_ARCHIVE = 7
      OTHERS                  = 8.
  IF SY-SUBRC EQ 0.
    READ TABLE IT_LINES INDEX 1.
    MOVE IT_LINES-TDLINE TO WA_COMMENT.
    MOVE IT_LINES-TDLINE TO WA_COMMENT_ORIGINAL.
  ELSE.
    CLEAR: WA_COMMENT, WA_COMMENT_ORIGINAL.
  ENDIF.

* WRITE TO SCREENFIELDS AND TRANSLATE IF NOT DONE YET *
* *************************************************** *
* New stock policy
  CASE WA_MARC-DISMM.
    WHEN C_NP OR C_NS.
      WA_OLD_DISMM_DESC = C_NSTOCKED.
      WA_NEW_DISMM_DESC = C_STOCKED.
    WHEN C_ST.
      WA_OLD_DISMM_DESC = C_STOCKED.
      WA_NEW_DISMM_DESC = C_NSTOCKED.
  ENDCASE.

* Translate distribution mode (don't suggest change)
  CASE WA_MARC-MTPOS.
    WHEN 'ZDTC'.
      WA_OLD_MTPOS = C_ZDTC_TEXT.
      WA_NEW_MTPOS = C_ZDTC_TEXT.
    WHEN 'NORM' .
      IF  MVKE-MVGR4 = C_LCL .
        WA_OLD_MTPOS = C_LOCAL_TEXT.
        WA_NEW_MTPOS = C_LOCAL_TEXT.
      ELSE.
        WA_OLD_MTPOS = C_NZDTC_TEXT.
        WA_NEW_MTPOS = C_NZDTC_TEXT.
      ENDIF.
  ENDCASE.

* New LS Flag -> blank (or EOQ)
  READ TABLE IT_LSFL WITH KEY LSFL = SPACE.
  IF SY-SUBRC EQ 0.
    WA_NEW_LSFLT = IT_LSFL-LSFLT.
  ELSE.
    WA_NEW_LSFLT = SPACE.
  ENDIF.

* New LS, ROP and SS: if current StoPol is NS give default values
  IF WA_MARC-DISMM NE C_ST.
    WA_NEW_BSTFE = '1'.
    WA_NEW_MINBE = '1'.
    WA_NEW_EISBE = '0'.
* Else, set values to 0
  ELSE.
    WA_NEW_BSTFE = '0'.
    WA_NEW_MINBE = '0'.
    WA_NEW_EISBE = '0'.
  ENDIF.

  WA_MTPOS = WA_MARC-MTPOS.

* Fill some more screen variables
  CASE WA_MARC-MTPOS.
    WHEN 'ZDTC'.
      WA_OLD_MTPOS = C_ZDTC_TEXT.
      WA_NEW_MTPOS = C_ZDTC_TEXT.
    WHEN 'NORM' .
      IF  MVKE-MVGR4 = C_LCL .
        WA_OLD_MTPOS = C_LOCAL_TEXT.
        WA_NEW_MTPOS = C_LOCAL_TEXT.
      ELSE.
        WA_OLD_MTPOS = C_NZDTC_TEXT.
        WA_NEW_MTPOS = C_NZDTC_TEXT.
      ENDIF.
  ENDCASE.

ENDMODULE.                 " FIND_MATERIAL_STOCK_INFO  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  MODIFY_SCREEN  OUTPUT
*&---------------------------------------------------------------------*
MODULE MODIFY_SCREEN OUTPUT.

* Disable fields according to situation
  LOOP AT SCREEN.
    CASE SCREEN-NAME.

*     Lot size flag display only if stock policy is "Stocked"
      WHEN 'WA_NEW_LSFLT'.
        IF WA_MARC-DISMM EQ C_ST.
          SCREEN-INPUT = '0'.
          MODIFY SCREEN.
        ENDIF.
*     Lot size display only if stock policy is "Stocked"
      WHEN 'WA_NEW_BSTFE'.
        IF WA_MARC-DISMM EQ C_ST.
          SCREEN-INPUT = '0'.
          MODIFY SCREEN.
        ENDIF.
*     Reorder point display only if stock policy is "Stocked"
      WHEN 'WA_NEW_MINBE'.
        IF WA_MARC-DISMM EQ C_ST.
          SCREEN-INPUT = '0'.
          MODIFY SCREEN.
        ENDIF.
*     Safety stock display only if stock policy is "Stocked"
      WHEN 'WA_NEW_EISBE'.
        IF WA_MARC-DISMM EQ C_ST.
          SCREEN-INPUT = '0'.
          MODIFY SCREEN.
        ENDIF.
*     Distribution mode editable only if (Sto Pol "Stocked" and Distr M "NDTC")
*                                     or (Sto Pol "Not Std" and Distr M "DTC")
      WHEN 'WA_NEW_MTPOS'.
        IF     ( WA_MARC-DISMM EQ C_ST AND WA_MTPOS EQ C_NDTC AND MVKE-MVGR4 EQ SPACE )
            OR ( WA_MARC-DISMM NE C_ST AND WA_MTPOS EQ C_DTC ).
          SCREEN-INPUT = '1'.
        ELSE.
          SCREEN-INPUT = '0'.
        ENDIF.
        MODIFY SCREEN.
    ENDCASE.
  ENDLOOP.

ENDMODULE.                 " MODIFY_SCREEN  OUTPUT

*&---------------------------------------------------------------------*
*&      Form  fill_material_structures
*&---------------------------------------------------------------------*
FORM FILL_MATERIAL_STRUCTURES.

* Reorder point must be greater than safety stock
  IF WA_NEW_EISBE > WA_NEW_MINBE.
    MESSAGE E017.
  ENDIF.

* Fill the changed plant fields
  WA_HEADDATA-MATERIAL = WA_MARC-MATNR.
  WA_PLANTDATA-PLANT   = WA_MARC-WERKS.
  WA_PLANTDATAX-PLANT  = WA_MARC-WERKS.

* Fill stock on request (the opposite value of what was read from MARC)
  IF WA_MARC-MAXLZ > 0.
    WA_PLANTDATA-STGEPERIOD = 0.
  ELSE.
    WA_PLANTDATA-STGEPERIOD = 1.
  ENDIF.
  WA_PLANTDATAX-STGEPERIOD = 'X'.

* Fill "Unit for maximum storage period"
  IF NOT WA_MARC-LZEIH IS INITIAL.
    WA_PLANTDATA-STGE_PD_UN = WA_MARC-LZEIH.
  ELSE.
    WA_PLANTDATA-STGE_PD_UN = 'TAG'.
  ENDIF.
  WA_PLANTDATAX-STGE_PD_UN =  'X'.

* If Lot size was changed
  IF WA_MARC-BSTFE NE WA_NEW_BSTFE.
    WA_PLANTDATA-FIXED_LOT = WA_NEW_BSTFE.
    WA_PLANTDATAX-FIXED_LOT ='X'.
  ENDIF.

* If Reorder point was changed
  IF WA_MARC-MINBE NE WA_NEW_MINBE.
    WA_PLANTDATA-REORDER_PT = WA_NEW_MINBE.
    WA_PLANTDATAX-REORDER_PT = 'X'.
  ENDIF.

* If safety stock was changed
  IF WA_MARC-EISBE NE WA_NEW_EISBE.
    WA_PLANTDATA-SAFETY_STK = WA_NEW_EISBE.
    WA_PLANTDATAX-SAFETY_STK = 'X'.
  ENDIF.

* Fill distribution mode
  CASE WA_NEW_MTPOS.
    WHEN C_ZDTC_TEXT.
      WA_SALESDATA-ITEM_CAT    = C_DTC.
      WA_SALESDATAX-ITEM_CAT   = 'X'.
    WHEN C_NZDTC_TEXT.
      WA_SALESDATA-ITEM_CAT    = C_NDTC.
      WA_SALESDATA-MATL_GRP_4  = SPACE.
      WA_SALESDATAX-ITEM_CAT   = 'X'.
      WA_SALESDATAX-MATL_GRP_4 = 'X'.
    WHEN C_LOCAL_TEXT.
*     If adjusted distribution mode local deliberately set by user (ie old dismo <> local)
      IF WA_OLD_MTPOS NE C_LOCAL_TEXT.
*       Issue a warning
        MESSAGE W031.
      ENDIF.
      WA_SALESDATA-ITEM_CAT    = C_NDTC.
      WA_SALESDATA-MATL_GRP_4  = C_LCL.
      WA_SALESDATAX-ITEM_CAT   = 'X'.
      WA_SALESDATAX-MATL_GRP_4 = 'X'.
    WHEN OTHERS.
      MESSAGE E030 WITH WA_NEW_MTPOS.
  ENDCASE.
  WA_SALESDATA-SALES_ORG   = P_VKORG.
  WA_SALESDATAX-SALES_ORG  = P_VKORG.
  WA_SALESDATA-DISTR_CHAN  = '01'.
  WA_SALESDATAX-DISTR_CHAN = '01'.

* Fill stock policy (MRP type)
  CASE WA_MARC-DISMM.
    WHEN C_ST.
*     IF MVKE-MTPOS            = C_NDTC AND MVKE-MVGR4              = C_LCL.
      IF WA_SALESDATA-ITEM_CAT = C_NDTC AND WA_SALESDATA-MATL_GRP_4 = C_LCL.
        WA_PLANTDATA-MRP_TYPE = C_NS.
      ELSE.
        WA_PLANTDATA-MRP_TYPE = C_NP.
      ENDIF.
    WHEN C_NS.
      WA_PLANTDATA-MRP_TYPE = C_ST.
    WHEN C_NP.
      WA_PLANTDATA-MRP_TYPE = C_ST.

  ENDCASE.
  WA_PLANTDATAX-MRP_TYPE = 'X'.

* Set lot size key (dependent on lotsize)
  IF WA_NEW_BSTFE NE 0.
    WA_PLANTDATA-LOTSIZEKEY = 'FX'.
    WA_PLANTDATAX-LOTSIZEKEY = 'X'.
  ELSE.
    WA_PLANTDATA-LOTSIZEKEY = 'EX'.
    WA_PLANTDATAX-LOTSIZEKEY = 'X'.
    CLEAR:
      WA_PLANTDATA-FIXED_LOT,
      WA_PLANTDATAX-FIXED_LOT.
  ENDIF.

ENDFORM.                    " FILL_MATERIAL_STRUCTURES

*&---------------------------------------------------------------------*
*&      Form  FILL_MATERIAL_TEXT
*&---------------------------------------------------------------------*
FORM FILL_MATERIAL_TEXT.

  DATA:
    LV_LENGTH TYPE I.

* Don't continue if in insert mode and comment is initial
  IF P_INS NE SPACE AND WA_COMMENT IS INITIAL.
    MESSAGE E016.
    LEAVE TO SCREEN 0.
  ELSE.
*   Fill bapi fields
    IF WA_COMMENT IS INITIAL.
      IT_BAPI_MLTX-DEL_FLAG = 'X'.
    ELSE.
      IT_BAPI_MLTX-TEXT_LINE  = WA_COMMENT.
    ENDIF.
    IT_BAPI_MLTX-TEXT_ID    = 'LTXT'.
    IT_BAPI_MLTX-APPLOBJECT = 'MDTXT'.
    IT_BAPI_MLTX-LANGU      = 'EN'.
    IT_BAPI_MLTX-LANGU_ISO  = 'EN'.
*   Add leading zeroes to material number (Why not use FM CONV_EXIT_ALPHA?)
    IF P_MATNR CO '0123456789'.
      LV_LENGTH = STRLEN( P_MATNR ).
      IF LV_LENGTH NE 18.
        LV_LENGTH = 18 - LV_LENGTH.
        SHIFT P_MATNR RIGHT BY LV_LENGTH PLACES.
        OVERLAY P_MATNR WITH C_ZEROES.
      ENDIF.
    ENDIF.
*   Continue filling bapi fields
    IT_BAPI_MLTX-TEXT_NAME(18) = P_MATNR.
    IT_BAPI_MLTX-TEXT_NAME+18(4) = P_WERKS.
    APPEND IT_BAPI_MLTX.
  ENDIF.

ENDFORM.                    " FILL_MATERIAL_TEXT

*&---------------------------------------------------------------------*
*&      Form  check_authorization
*&---------------------------------------------------------------------*
FORM CHECK_AUTHORIZATION .

* Check plant authorization
  AUTHORITY-CHECK OBJECT 'M_MATE_WRK'
           ID 'ACTVT' DUMMY
           ID 'WERKS' FIELD P_WERKS.

  IF SY-SUBRC = 4.
*   No authorization to display data from sales organisation P_VKORG
    MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '008' WITH P_WERKS.
  ELSEIF SY-SUBRC <> 0.
*   Error checking Authorization.
    MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '004'.
  ENDIF.

* Check sales org authorization
  AUTHORITY-CHECK OBJECT 'V_VBAK_VKO'
                      ID 'VKORG' FIELD P_VKORG
                      ID 'VTWEG' DUMMY
                      ID 'SPART' DUMMY
                      ID 'ACTVT' FIELD '02'.

  IF SY-SUBRC = 4.
*   No authorisation to display data from Sales Organisation p_vkorg
    MESSAGE ID 'YSE_RENTAL' TYPE 'E' NUMBER '006' WITH P_VKORG.
  ELSEIF sy-subrc <> 0.
*   Error checking authorization.
    MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '004'.
  ENDIF.

ENDFORM.                    " CHECK_AUTHORIZATION

*&---------------------------------------------------------------------*
*&      Form  ACCEPT_CHANGE
*&---------------------------------------------------------------------*
FORM ACCEPT_CHANGE .

* Fill material structure
  PERFORM FILL_MATERIAL_STRUCTURES.

* Fill material text
  PERFORM FILL_MATERIAL_TEXT.

* Update the material
  CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
    EXPORTING
      HEADDATA         = WA_HEADDATA
      PLANTDATA        = WA_PLANTDATA
      PLANTDATAX       = WA_PLANTDATAX
      SALESDATA        = WA_SALESDATA
      SALESDATAX       = WA_SALESDATAX
    IMPORTING
      RETURN           = WA_RETURN
    TABLES
      MATERIALLONGTEXT = IT_BAPI_MLTX
      RETURNMESSAGES   = IT_RETURNMESSAGES.

* Update lot size flag in MATPLANT
  YSE_EM_MATPLANT-LOTSIZE_IND = WA_NEW_LSFL.
  MODIFY YSE_EM_MATPLANT.

* Log action
  IT_YSE_EM_ACTLOG-EXTYPDESC   = WA_EXC_TYPE.
  IT_YSE_EM_ACTLOG-WERKS       = P_WERKS.
  IT_YSE_EM_ACTLOG-VKORG       = P_VKORG.
  IT_YSE_EM_ACTLOG-MATNR       = P_MATNR.
  IT_YSE_EM_ACTLOG-MAKTX       = WA_MAKTX.
  IT_YSE_EM_ACTLOG-CUSTOPO     = WA_MARC-DISMM.
  IT_YSE_EM_ACTLOG-ADSTOPO     = WA_DISMM.
  IT_YSE_EM_ACTLOG-CUDIMO      = WA_MARC-MTPOS.
  IT_YSE_EM_ACTLOG-ADDIMO      = WA_MTPOS.
  IT_YSE_EM_ACTLOG-EISBE       = WA_MARC-EISBE.
  IT_YSE_EM_ACTLOG-ADEISBE     = WA_NEW_EISBE.
  IT_YSE_EM_ACTLOG-MINBE       = WA_MARC-MINBE.
  IT_YSE_EM_ACTLOG-ADREPO      = WA_NEW_MINBE.
  IT_YSE_EM_ACTLOG-BSTFE       = WA_MARC-BSTFE.
  IT_YSE_EM_ACTLOG-ADLOSI      = WA_NEW_BSTFE.
  IT_YSE_EM_ACTLOG-ACTION_DATE = SY-DATUM.
  IT_YSE_EM_ACTLOG-ACTION_TIME = SY-UZEIT.
  IT_YSE_EM_ACTLOG-CREATED_BY  = SY-UNAME.

* If update was successfull
  IF WA_RETURN-TYPE NE 'E'.
    IT_YSE_EM_ACTLOG-ACTION_RESULT = TEXT-UPD. " UPDATED
    APPEND IT_YSE_EM_ACTLOG.

*   Commit to release the material
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.

    MESSAGE S000 WITH ' Material master update succeeded'.
*   Save action reqults in database table
    MODIFY YSE_EM_ACTLOG FROM TABLE IT_YSE_EM_ACTLOG.
    LEAVE TO SCREEN 0.

* If error occured
  ELSE.
    IT_YSE_EM_ACTLOG-ACTION_RESULT = TEXT-FAI.  " UPDATE FAILED
    APPEND IT_YSE_EM_ACTLOG.

    MESSAGE      ID WA_RETURN-ID
               TYPE WA_RETURN-TYPE
             NUMBER WA_RETURN-NUMBER
               WITH WA_RETURN-MESSAGE_V1
                    WA_RETURN-MESSAGE_V2
                    WA_RETURN-MESSAGE_V3
                    WA_RETURN-MESSAGE_V4.

*   Add error messages for later analysis
    LOOP AT IT_RETURNMESSAGES WHERE TYPE = 'E'.
      IT_YSE_EM_ACTLOG-ACTION_DATE = SY-DATUM.
      IT_YSE_EM_ACTLOG-ACTION_TIME =  SY-UZEIT.
      IT_YSE_EM_ACTLOG-ACTION_RESULT = IT_RETURNMESSAGES-MESSAGE.
      APPEND IT_YSE_EM_ACTLOG.
    ENDLOOP.
*   Save action results in database table
    MODIFY YSE_EM_ACTLOG FROM TABLE IT_YSE_EM_ACTLOG.

  ENDIF.

ENDFORM.                    " ACCEPT_CHANGE

*&---------------------------------------------------------------------*
*&      Module  KEY_MAPPING_200  INPUT
*&---------------------------------------------------------------------*
MODULE KEY_MAPPING_200 INPUT.

  READ TABLE IT_LSFL WITH KEY LSFL = WA_NEW_LSFLT.
  IF SY-SUBRC EQ 0.
    WA_NEW_LSFLT = IT_LSFL-LSFLT.
    WA_NEW_LSFL  = IT_LSFL-LSFL.
  ELSE.
    READ TABLE IT_LSFL WITH KEY LSFLT = WA_NEW_LSFLT.
    IF SY-SUBRC EQ 0.
      WA_NEW_LSFLT = IT_LSFL-LSFLT.
      WA_NEW_LSFL  = IT_LSFL-LSFL.
    ELSE.
      MESSAGE E029 WITH WA_NEW_LSFLT.
    ENDIF.
  ENDIF.

ENDMODULE.                 " KEY_MAPPING_200  INPUT

*Text symbol text£º
*001:Selections
*FAI:Material master failed for this exception

*UPD:Material master updated for this exception
*Selection text£º
*P_INS:        Insert part
*P_MATNR:D       Material
*P_REM:        Remove part
*P_VKORG:D       Sales Organization
*P_WERKS:D       Plant
