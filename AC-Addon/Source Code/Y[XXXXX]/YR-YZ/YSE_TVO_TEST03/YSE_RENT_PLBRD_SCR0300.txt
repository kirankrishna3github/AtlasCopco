*&---------------------------------------------------------------------*
*&  Include           YSE_RENT_PLBRD_SCR0300                            *
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Module  BC_PBO  OUTPUT
*&---------------------------------------------------------------------*
* Pass the data to the barchart control
*----------------------------------------------------------------------*
MODULE BC_PBO OUTPUT.  " BarChart Process Before Output

  CALL FUNCTION 'BARC_GRAPHIC_PBO'
    EXPORTING
      ABAP_CMD       = ABAP_CMD
      CONFIRM        = 'X'
      PROFILE        = GRAPH_PROFILE
      STAT           = STAT
      STATUS_TEXT    = STATUS_TEXT
      CONTROL_HANDLE = GV_BARC_OCX_HNDL  "F#R OCX-UMSTELLUNG
    TABLES
      BOXES          = BOXES
      BOX_VALS       = BOX_VALS
      DELETIONS      = DELETIONS
      LINKS          = LINKS
      LINK_VALS      = LINK_VALS
      NODES          = NODES
      NODE_VALS      = NODE_VALS
      POSITIONS      = POSITIONS
    EXCEPTIONS
      ERR_IN_PROFILE = 1
      INV_PROFILE    = 2
      INV_WINID      = 3.

ENDMODULE.                             " BC_PBO  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS_0300  OUTPUT
*&---------------------------------------------------------------------*
*       CUA-Status, Fenstertitel setzen
*----------------------------------------------------------------------*
MODULE SET_PF-STATUS_0300 OUTPUT.

* SET PF-STATUS 'GRAFIK'.
  SET PF-STATUS 'BARCH01'.
  SET TITLEBAR '011'.

ENDMODULE.                             " STATUS_0300  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
* OK-Code Processing
*----------------------------------------------------------------------*
MODULE OK_CODE_0300 INPUT.

  CASE OK_CODE.
    WHEN 'REFRESH'.
      PERFORM REFRESH_CHARTS.
    WHEN 'SBITEMS'.
      GV_SB = GC_SB_IT.
      SET PARAMETER ID 'YSE_RPB_SB' FIELD GV_SB.
      PERFORM REFRESH_CHARTS.
    WHEN 'SBDOC'.
      GV_SB = GC_SB_DO.
      SET PARAMETER ID 'YSE_RPB_SB' FIELD GV_SB.
      PERFORM REFRESH_CHARTS.
    WHEN 'STMD'.
      GV_ST = GC_ST_MD.
      SET PARAMETER ID 'YSE_RPB_ST' FIELD GV_ST.
      PERFORM REFRESH_CHARTS.
    WHEN 'STEQ'.
      GV_ST = GC_ST_EQ.
      SET PARAMETER ID 'YSE_RPB_ST' FIELD GV_ST.
      PERFORM REFRESH_CHARTS.
    WHEN 'EXIT'.
      PERFORM EXIT_BC.                 " Delete control
    WHEN 'QUIT'.
      PERFORM EXIT_BC.                 " Delete control
    WHEN 'BACK'.
      PERFORM EXIT_BC.                 " Delete control
    WHEN 'XFER2QUOT'.
      PERFORM XFER2QUOT.
    WHEN OTHERS.
      PERFORM OK_CODE_300_ORIGINAL.
  ENDCASE.

ENDMODULE.                             " USER_COMMAND_0300  INPUT

*&---------------------------------------------------------------------*
*&      Form  EXIT_BC
*&---------------------------------------------------------------------*
* Destructor for control
*----------------------------------------------------------------------*
FORM EXIT_BC.

  PERFORM DELETE_CHARTCONTROL.

  SET SCREEN 0.
  LEAVE SCREEN.

ENDFORM.                                                    " EXIT_BC

*---------------------------------------------------------------------*
*       FORM USER_COMMAND                                             *
*---------------------------------------------------------------------*
*       Verprobungsmodul                                              *
*---------------------------------------------------------------------*
FORM user_command.

* Auswertung der Daten von der Grafik
  CALL FUNCTION 'BARC_GRAPHIC_PAI'
    EXPORTING
      control_handle = GV_barc_ocx_HNDL  "f¨¹r Umstellung auf OCX
    IMPORTING
      graph_cmd      = graph_cmd
      graph_cmd_info = graph_cmd_info
      gr_sel_field   = gr_sel_field
      layer_type     = layer_kind
      settings       = settings
      symboltype     = symboltype
    TABLES
      boxes          = boxes
      box_vals       = box_vals
      deletions      = deletions
      links          = links
      link_vals      = link_vals
      nodes          = nodes
      node_vals      = node_vals
      positions      = positions
    EXCEPTIONS
      inv_winid      = 1.

  CLEAR: abap_cmd,
         status_text.

  stat = sgrc_const-stat_4.            "Wait for input

* Auswertung des Benutzerkommandos
  CASE graph_cmd.
*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_insert.      "einf¨¹gen
      abap_cmd = graph_cmd.

      DESCRIBE TABLE boxes LINES anz.
      IF anz <> 0.                     "Box eingef¨¹gt
        object_type = bc_const-box_object.
      ELSE.
        DESCRIBE TABLE nodes LINES anz.
        IF anz <> 0.                   "Knoten eingef¨¹gt
          object_type = bc_const-node_object.
        ELSE.
          DESCRIBE TABLE node_vals LINES anz.
          IF anz <> 0.                 "Layer eingef¨¹gt
            object_type = bc_const-layer_object.
          ENDIF.
        ENDIF.
      ENDIF.

      CASE object_type.
        WHEN bc_const-box_object.      "Box eingef¨¹gt
          READ TABLE positions INDEX 1.
          LOOP AT all_positions
           WHERE obj_type   = bc_const-box_object
             AND chart_id   = positions-chart_id
             AND row_number = positions-row_number.
            EXIT.
          ENDLOOP.                     "at ALL_POSITIONS
          IF sy-subrc IS INITIAL.
            REFRESH: boxes,
                     positions.
            status_text = text-004.    "Box bereits in Zeile

          ELSE.                        "noch keine Box vorhanden
            act_box_id = act_box_id + 1.

            READ TABLE boxes INDEX 1.
            boxes-id   = act_box_id.
            boxes-type = bc_const-row_box.
            CASE boxes-chart_id.
              WHEN 1.
                boxes-form_type  = 'B3'.
                boxes-color_type = 'B1'.
              WHEN 2.
                boxes-form_type  = 'B2'.
                boxes-color_type = 'B1'.
            ENDCASE.                   "case BOXES-CHART_ID
            MODIFY boxes INDEX 1.

            box_vals-id  = boxes-id.
            box_vals-fl  = '0'.
            WRITE boxes-id TO box_vals-val.
            CONDENSE box_vals-val NO-GAPS.
            APPEND box_vals.

            box_vals-fl  = '1'.
            WRITE box_vals-id TO box_vals-val.
            CONDENSE box_vals-val NO-GAPS.
            APPEND box_vals.

            box_vals-fl  = '2'.
            box_vals-val = text-016.                        "Box
            APPEND box_vals.

            box_vals-fl  = '3'.
            box_vals-val = '0001'.
            APPEND box_vals.

            positions-obj_id = act_box_id.
            MODIFY positions INDEX 1.

            status_text = text-005.    "Box eingef¨¹gt
          ENDIF.                       "Box in Zeile bereits vorhanden

        WHEN bc_const-node_object.     "Knoten eingef¨¹gt
*         Layertyp f¨¹r den Knoten erzeugen
*         PERFORM make_next_layer_type TABLES layer_types
*                                       USING  graph_profile
*                                              layer_type.
          IF layer_type IS INITIAL.
            REFRESH node_vals.
            status_text = text-013.    "Kein Typ mehr verf¨¹gbar

          ELSE.
*           neuen Layer erzeugen
            CALL FUNCTION 'BARC_ADD_LAYER'
              EXPORTING
                color_type   = 'L0'
                firstdate    = 1
                layer_kind   = layer_kind
                symboltype   = symboltype
                seconddate   = 2
                layer_type   = layer_type
              EXCEPTIONS
                invalid_type = 01.

            CHECK sy-subrc IS INITIAL.

            act_node_id = act_node_id + 1.

            READ TABLE nodes INDEX 1.
            nodes-id = act_node_id.
            MODIFY nodes INDEX 1.

            READ TABLE node_vals INDEX 1.
            node_vals-id = nodes-id.
            node_vals-fl = '1'.
            MODIFY node_vals INDEX 1.

            READ TABLE node_vals INDEX 2.
            node_vals-id = nodes-id.
            node_vals-fl = '2'.
            MODIFY node_vals INDEX 2.

            node_vals-fl  = bc_const-add_layer.
            node_vals-val = layer_type.
            APPEND node_vals.

            READ TABLE positions INDEX 1.
            positions-obj_id = act_node_id.
            MODIFY positions INDEX 1.

            status_text = text-006.    "Knoten eingef¨¹gt
          ENDIF.                       "Layertyp verf¨¹gbar

        WHEN bc_const-layer_object.    "Layer eingef¨¹gt
*         N#chsten Layertyp festlegen
*         PERFORM make_next_layer_type TABLES layer_types
*                                       USING  graph_profile
*                                              layer_type.
          IF layer_type IS INITIAL.
            REFRESH node_vals.
            status_text = text-013.    "Kein Typ mehr verf¨¹gbar

          ELSE.
*           H#chsten vergebenen Index im Knoten ermitteln
            CLEAR fl.
            READ TABLE node_vals INDEX 1.
            LOOP AT all_node_vals WHERE id = node_vals-id.
              IF '0123456789'      CA all_node_vals-fl    "#EC PORTABLE
              AND all_node_vals-fl >  fl.
                fl = all_node_vals-fl.
              ENDIF.
            ENDLOOP.
            IF fl > '97'.                                 "#EC PORTABLE
              REFRESH node_vals.
              status_text = text-014.  "Kein Textindex verf¨¹gbar

            ELSE.
              firstdate  = fl + 1.
              seconddate = fl + 2.

*             neuen Layer erzeugen
              CALL FUNCTION 'BARC_ADD_LAYER'
                EXPORTING
                  color_type   = 'L0'
                  firstdate    = firstdate
                  layer_kind   = layer_kind
                  layer_type   = layer_type
                  seconddate   = seconddate
                  symboltype   = symboltype
                EXCEPTIONS
                  invalid_type = 01.

              CHECK sy-subrc IS INITIAL.

              READ TABLE node_vals INDEX 1.
              node_vals-fl = firstdate.
              MODIFY node_vals INDEX 1.

              READ TABLE node_vals INDEX 2.
              node_vals-fl = seconddate.
              MODIFY node_vals INDEX 2.

              node_vals-fl  = bc_const-add_layer.
              node_vals-val = layer_type.
              APPEND node_vals.

              status_text = text-012.  "Layer eingef¨¹gt
            ENDIF.                     "if FL > '97'
          ENDIF.                       "if TYPE is initial
      ENDCASE.                         "case OBJECT_TYPE

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_duplicate.   "duplizieren
      abap_cmd = graph_cmd.

*     Boxes, Nodes zwischenspeichern
      LOOP AT boxes.
        MOVE-CORRESPONDING boxes TO tmp_boxes.
        APPEND tmp_boxes.
      ENDLOOP.

      LOOP AT nodes.
        MOVE-CORRESPONDING nodes TO tmp_nodes.
        APPEND tmp_nodes.
      ENDLOOP.

      REFRESH: boxes, nodes, positions.

*     Boxen duplizieren
      LOOP AT tmp_boxes.
*       Werte der Box ¨¹bertragen
        LOOP AT all_boxes WHERE id = tmp_boxes-id.
          CLEAR boxes.
          MOVE-CORRESPONDING all_boxes TO boxes.
          act_box_id = act_box_id + 1.
          boxes-id = act_box_id.
          APPEND boxes.
          EXIT.
        ENDLOOP.                       "at ALL_BOXES

*       Attribute der Box ¨¹bertragen
        LOOP AT all_box_vals WHERE id = tmp_boxes-id.
          CLEAR box_vals.
          MOVE-CORRESPONDING all_box_vals TO box_vals.
          box_vals-id = boxes-id.
          IF box_vals-fl  = '1'.
            WRITE box_vals-id TO box_vals-val.
            CONDENSE box_vals-val NO-GAPS.
          ENDIF.
          APPEND box_vals.
        ENDLOOP.                       "at ALL_BOX_VALS

*       Position bestimmen
        PERFORM get_max_pos TABLES all_positions positions
                            USING  tmp_boxes-chart_id max_pos.
        max_pos = max_pos + 1.
        CLEAR positions.
        positions-chart_id   = tmp_boxes-chart_id.
        positions-obj_type   = bc_const-box_object.
        positions-obj_id     = boxes-id.
        positions-row_number = max_pos.
        APPEND positions.
      ENDLOOP.                         "at TMP_BOXES
      REFRESH tmp_boxes.

*     Knoten duplizieren
      LOOP AT tmp_nodes.
*       Werte des Knotens ¨¹bertragen
        LOOP AT all_nodes WHERE id = tmp_nodes-id.
          CLEAR nodes.
          MOVE-CORRESPONDING all_nodes TO nodes.
          act_node_id = act_node_id + 1.
          nodes-id = act_node_id.
          APPEND nodes.
          EXIT.
        ENDLOOP.                       "at ALL_BOXES

*       Attribute des Knotens ¨¹bertragen
        LOOP AT all_node_vals WHERE id = tmp_nodes-id.
          CLEAR node_vals.
          MOVE-CORRESPONDING all_node_vals TO node_vals.
          node_vals-id = nodes-id.
          APPEND node_vals.
        ENDLOOP.                       "at ALL_NODE_VALS

*       Position bestimmen
        PERFORM get_max_pos TABLES all_positions positions
                            USING  tmp_nodes-chart_id max_pos.
        max_pos = max_pos + 1.
        CLEAR positions.
        positions-chart_id   = tmp_nodes-chart_id.
        positions-obj_type   = bc_const-node_object.
        positions-obj_id     = nodes-id.
        positions-row_number = max_pos.
        APPEND positions.
      ENDLOOP.                         "at TMP_NODES
      REFRESH tmp_nodes.

      status_text = text-003.          "Box/Knoten dupliziert

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_connect.     "verbinden
      abap_cmd = graph_cmd.

      READ TABLE links INDEX 1.
      CHECK sy-subrc IS INITIAL.

      act_link_id = act_link_id + 1.
      links-id = act_link_id.
      MODIFY links INDEX 1.

      LOOP AT link_vals.
        link_vals-id = act_link_id.
        MODIFY link_vals.
      ENDLOOP.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_modify.      "modifizieren
      abap_cmd = graph_cmd.

*     z.Z. nur f¨¹r Boxen
      READ TABLE box_vals INDEX 1.
      CHECK sy-subrc IS INITIAL.

*     Feldname in Textindex umwandeln
      READ TABLE all_boxes WITH KEY box_vals-id BINARY SEARCH.
      CHECK sy-subrc IS INITIAL.

*     Verprobung
      IF  all_boxes-chart_id = chart1 AND box_vals-fl = 'c'.
        status_text = text-007.        "Werk nicht #nderbar
        REFRESH box_vals.

      ELSE.
*       Textindex ermitteln
        CALL FUNCTION 'BARC_GET_TEXTINDEX'
          EXPORTING
            box_type        = all_boxes-type
            field           = box_vals-fl
            form_type       = all_boxes-form_type
            object_type     = bc_const-box_object
          IMPORTING
            textindex       = box_vals-fl
          EXCEPTIONS
            inv_box_type    = 01
            inv_object_type = 02
            inv_winid       = 03.

        CHECK sy-subrc IS INITIAL.

        MODIFY box_vals INDEX 1.

        status_text = text-008.        "Feldinhalt ge#ndert
      ENDIF.                           "Verprobung

*----------------------------------------------------------------------*
    WHEN bc_const-double_click.        "doppelklicken
      abap_cmd  = bc_const-ask_for_modify.
      graph_cmd = bc_const-ask_for_modify.

      DESCRIBE TABLE boxes LINES anz.                       "Box
      IF NOT anz IS INITIAL.
        object_type = bc_const-box_object.

        READ TABLE boxes INDEX 1.
        LOOP AT all_boxes WHERE id = boxes-id.
          EXIT.
        ENDLOOP.                       "at ALL_BOXES
        MOVE-CORRESPONDING all_boxes TO boxes.
        MODIFY boxes INDEX 1.

        LOOP AT all_box_vals WHERE id = boxes-id.
          MOVE-CORRESPONDING all_box_vals TO box_vals.
          APPEND box_vals.
        ENDLOOP.                       "at ALL_BOX_VALS
        SORT box_vals BY fl.

        entry_act = 1.
        CALL SCREEN 100 STARTING AT 2 2 ENDING AT 53 13.

        CLEAR   boxes.
        REFRESH boxes.
      ENDIF.                           "if not ANZ is initial.

      DESCRIBE TABLE nodes LINES anz.  "Node
      IF NOT anz IS INITIAL.
        object_type = bc_const-node_object.

        READ TABLE nodes INDEX 1.
        LOOP AT all_nodes WHERE id = nodes-id.
          EXIT.
        ENDLOOP.                       "at ALL_NODES
        MOVE-CORRESPONDING all_nodes TO nodes.
        MODIFY nodes INDEX 1.

        LOOP AT all_node_vals WHERE id = nodes-id.
          MOVE-CORRESPONDING all_node_vals TO node_vals.
          APPEND node_vals.
        ENDLOOP.                       "at ALL_NODE_VALS
        SORT node_vals BY fl.

        entry_act = 1.
        CALL SCREEN 101 STARTING AT 2 2 ENDING AT 53 16.

        CLEAR   nodes.
        REFRESH nodes.
      ENDIF.                           "if not ANZ is initial.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_delete.      "l#schen
      abap_cmd = graph_cmd.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_movelayer.   "Layer verschieben
      abap_cmd = graph_cmd.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_movenode.    "Knoten verschieben
      abap_cmd = graph_cmd.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_movemulti.   "mehrere Knoten verschieben
      abap_cmd = graph_cmd.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_movebox.     "Box verschieben
      abap_cmd = graph_cmd.
      READ TABLE positions INDEX 1.
      CHECK sy-subrc IS INITIAL.
      READ TABLE all_boxes WITH KEY positions-obj_id.
      CHECK sy-subrc IS INITIAL.
      IF positions-chart_id <> all_boxes-chart_id.
        REFRESH: boxes, positions, deletions.
        status_text = text-026.        "Funktion nicht m#glich
      ENDIF.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_scaleleft.   "skalieren links
      abap_cmd = graph_cmd.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_scaleright.  "skalieren rechts
      abap_cmd = graph_cmd.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_back.        "Zur¨¹ck
      abap_cmd = graph_cmd.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_quit.        "Abbruch
      abap_cmd = graph_cmd.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_exit.        "Ende
      abap_cmd = graph_cmd.

*----------------------------------------------------------------------*
    WHEN bc_const-get_selection.       "Selektionen ermittelt
      DESCRIBE TABLE boxes LINES anz_b.
      DESCRIBE TABLE nodes LINES anz_n.
      IF anz_b > anz_n.
        anz = anz_b.
      ELSE.
        anz = anz_n.
      ENDIF.
      IF anz = 0.
        status_text = text-025.        "Kein Objekt selektiert
      ELSE.
        CLEAR scroll_tab.
        REFRESH scroll_tab.
        DO anz TIMES.
          APPEND scroll_tab.
        ENDDO.
        SORT boxes BY id.
        SORT nodes BY id.

        entry_act = 1.
        CALL SCREEN 102 STARTING AT 10 10 ENDING AT 30 23.

        REFRESH: boxes, nodes.
      ENDIF.                                                "if ANZ = 0

*----------------------------------------------------------------------*
    WHEN bc_const-movetabcol.          "Spalte verschoben
      abap_cmd = bc_const-movetabcol.

*----------------------------------------------------------------------*
    WHEN 'XBO1'.                       "Selektionen ermitteln
      abap_cmd = bc_const-get_selection.

*----------------------------------------------------------------------*
    WHEN 'XBO2'.                       "Sektionattribute #ndern
      abap_cmd = bc_const-ask_for_modify.

      CLEAR   vals.
      REFRESH vals.
      DO 7 TIMES.
        APPEND vals.
      ENDDO.

      object_type = con_s.             "Section
      entry_act = 1.
      CALL SCREEN 103 STARTING AT 10 10 ENDING AT 61 16.

      LOOP AT vals.
        CHECK NOT vals-id IS INITIAL.
*       Sectionattribute setzten
        CALL FUNCTION 'BARC_SET_SECTION_ATTRIB'
          EXPORTING
            fl  = vals-fl
            id  = vals-id
            val = vals-val.

      ENDLOOP.                         "at VALS

*----------------------------------------------------------------------*
    WHEN 'XBO3'.                       "Ribbonattribute #ndern
      abap_cmd = bc_const-ask_for_modify.

      CLEAR   vals.
      REFRESH vals.
      DO 7 TIMES.
        APPEND vals.
      ENDDO.

      object_type = con_r.             "Ribbon
      entry_act = 1.
      CALL SCREEN 104 STARTING AT 10 10 ENDING AT 61 16.

      LOOP AT vals.
        CHECK NOT vals-id IS INITIAL.
*       Ribbonattribute setzten
        CALL FUNCTION 'BARC_SET_RIBBON_ATTRIB'
          EXPORTING
            fl  = vals-fl
            id  = vals-id
            val = vals-val.

      ENDLOOP.                         "at VALS

*----------------------------------------------------------------------*
    WHEN 'XBO4'.                       "Gridattribute #ndern
      abap_cmd = bc_const-ask_for_modify.

      CLEAR   vals.
      REFRESH vals.
      DO 7 TIMES.
        APPEND vals.
      ENDDO.

      object_type = con_g.             "Grid
      entry_act = 1.
      CALL SCREEN 105 STARTING AT 10 10 ENDING AT 61 16.

      LOOP AT vals.
        CHECK NOT vals-id IS INITIAL.
*       Gridattribute setzten
        CALL FUNCTION 'BARC_SET_GRID_ATTRIB'
          EXPORTING
            fl  = vals-fl
            id  = vals-id
            val = vals-val.

      ENDLOOP.                         "at VALS

*----------------------------------------------------------------------*
    WHEN 'XBO5'.                       "Datumslinie einf¨¹gen
      abap_cmd = bc_const-ask_for_modify.

      object_type = con_d.             "Dateline
      CLEAR dateline.
      CALL SCREEN 106 STARTING AT 10 10 ENDING AT 40 15.

      IF NOT dateline IS INITIAL.
*       Datumslinie einf¨¹gen
        CALL FUNCTION 'BARC_ADD_DATELINE'
          EXPORTING
            chart_id   = dateline-chart_id
            color_type = dateline-color_type
            date       = dateline-date.

      ENDIF.

*----------------------------------------------------------------------*
  ENDCASE.                             "case GRAPH_CMD

* Objekttabellen aktualisieren
  CALL FUNCTION 'BARC_LOGIC'
    EXPORTING
      graph_cmd     = graph_cmd
    TABLES
      all_boxes     = all_boxes
      all_box_vals  = all_box_vals
      all_links     = all_links
      all_link_vals = all_link_vals
      all_nodes     = all_nodes
      all_node_vals = all_node_vals
      all_positions = all_positions
      boxes         = boxes
      box_vals      = box_vals
      deletions     = deletions
      links         = links
      link_vals     = link_vals
      nodes         = nodes
      node_vals     = node_vals
      positions     = positions.

ENDFORM.                               "user_command

*---------------------------------------------------------------------*
*       FORM GET_MAX_POS                                              *
*---------------------------------------------------------------------*
* maximale, belegte Position ermitteln
*---------------------------------------------------------------------*
FORM GET_MAX_POS TABLES ALL_POSITIONS STRUCTURE BCPOSITION
                         POSITIONS STRUCTURE BCPOSITION
                 USING   CHART_ID LIKE TMP_BOXES-CHART_ID
                         MAX_POS LIKE BCPOSITION-ROW_NUMBER.

  CLEAR MAX_POS.

  LOOP AT ALL_POSITIONS WHERE CHART_ID = CHART_ID.
    IF ALL_POSITIONS-ROW_NUMBER > MAX_POS.
      MAX_POS = ALL_POSITIONS-ROW_NUMBER.
    ENDIF.
  ENDLOOP.                             "at ALL_POSITIONS

  LOOP AT POSITIONS WHERE CHART_ID = CHART_ID.
    IF POSITIONS-ROW_NUMBER > MAX_POS.
      MAX_POS = POSITIONS-ROW_NUMBER.
    ENDIF.
  ENDLOOP.                             "at POSITIONS

ENDFORM.                               " GET_MAX_POS

*&---------------------------------------------------------------------*
*&      Form  OK_CODE_300_ORIGINAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM OK_CODE_300_ORIGINAL .

  DATA: RETVAL TYPE I.

  SAVE_OK_CODE = OK_CODE.
  CLEAR OK_CODE.

  IF SAVE_OK_CODE(4) = SGRC_CONST-EVENT         " Event       = '%_GC'
  OR SAVE_OK_CODE(4) = SGRC_CONST-SHELL_EVENT.  " Shell-Event = '%_GS'
* In case of an event, call form "USER_COMMAND" directly
    PERFORM USER_COMMAND.
  ELSE.                            " Function code
* In other cases have the Function code executed on the barchart
    CALL FUNCTION 'BARCHART_SET_FUNCTION_CODE'
      EXPORTING
        HANDLE        = GV_BARC_OCX_HNDL
        FUNCTION_CODE = SAVE_OK_CODE
      IMPORTING
        RETURN        = RETVAL.
    IF RETVAL = 0.
*   In case the function call was successfull, process the OK_CODE
      PERFORM USER_COMMAND.        " Call form "USER_COMMAND" directly

      IF ABAP_CMD = BC_CONST-GET_SELECTION
      OR ABAP_CMD = BC_CONST-GET_OVERLAP
      OR ABAP_CMD = BC_CONST-GET_SETTINGS
      OR ABAP_CMD = BC_CONST-GET_COLOR.
*     In case further data are to be processed, send the OK_CODE to the graphic
        CALL FUNCTION 'BARC_GRAPHIC_PBO'
          EXPORTING
            ABAP_CMD       = ABAP_CMD
            STAT           = STAT
            CONTROL_HANDLE = GV_BARC_OCX_HNDL.
*       Go get the data and process the command
        PERFORM USER_COMMAND.
      ENDIF.
    ELSE.
*     Function code could be processed immediately (Zoom in, ..)
      STAT = SGRC_CONST-STAT_4.    " Wait for input
    ENDIF.
  ENDIF.

ENDFORM.                    " OK_CODE_300_ORIGINAL
