*&---------------------------------------------------------------------*
*&  Include           YSE_RENT_PLBRD_F01                               *
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  CHECK_WIN32
*&---------------------------------------------------------------------*
* Check that the client is on a win32 platform
*----------------------------------------------------------------------*
FORM CHECK_WIN32 .

DATA:     WS(4) TYPE C.

CONSTANTS: LC_WORKSTATION(2) TYPE C VALUE 'WS',
           LC_WIN32(5)       TYPE C VALUE 'WN32'.

CALL FUNCTION 'WS_QUERY'
  EXPORTING
    QUERY          = LC_WORKSTATION
  IMPORTING
    RETURN         = WS
  EXCEPTIONS
    INV_QUERY      = 1
    NO_BATCH       = 2
    FRONTEND_ERROR = 3
    OTHERS         = 4.

IF NOT SY-SUBRC IS INITIAL OR WS <> LC_WIN32.
  EXIT. " TVOTBA: issue a message
ENDIF.

ENDFORM.                    " CHECK_WIN32

*---------------------------------------------------------------------*
*       MODULE OK_CODE_BARC INPUT                                     *
*---------------------------------------------------------------------*
* OK_Code-Verarbeitung in den Modifikationsdynpros
*---------------------------------------------------------------------*
MODULE OK_CODE_BARC INPUT.

*  break AIR21777.

  save_ok_code = ok_code.
  CLEAR ok_code.

  CASE save_ok_code.
    WHEN 'UPDA'.
      CASE object_type.
        WHEN bc_const-box_object.                           "Box
          box_vals-id  = boxes-id.
          box_vals-fl  = bc_const-form_type.  "Formtyp
          box_vals-val = boxes-form_type.
          APPEND box_vals.
          box_vals-fl  = bc_const-color_type.   "Farbtyp
          box_vals-val = boxes-color_type.
          APPEND box_vals.
      ENDCASE.                         "case OBJECT_TYPE

      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'ABBR'.
      CASE object_type.
        WHEN bc_const-box_object.                           "Box
          REFRESH box_vals.
        WHEN bc_const-node_object.     "Node
          REFRESH node_vals.
        WHEN con_d.                    "Dateline
          CLEAR dateline.
        WHEN con_g.                    "Grid
          REFRESH vals.
        WHEN con_r.                    "Ribbon
          REFRESH vals.
        WHEN con_s.                    "Section
          REFRESH vals.
      ENDCASE.                         "case OBJECT_TYPE

      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN OTHERS.
      CASE object_type.
        WHEN bc_const-box_object.                           "Box
          DESCRIBE TABLE box_vals LINES entry_to.
          line_count = line_count_b.
        WHEN bc_const-node_object.     "Node
          DESCRIBE TABLE node_vals LINES entry_to.
          line_count = line_count_n.
        WHEN con_g.                    "Grid
          DESCRIBE TABLE vals LINES entry_to.
          line_count = line_count_val.
        WHEN con_r.                    "Ribbon
          DESCRIBE TABLE vals LINES entry_to.
          line_count = line_count_val.
        WHEN con_s.                    "Section
          DESCRIBE TABLE vals LINES entry_to.
          line_count = line_count_val.
      ENDCASE.                         "case OBJECT_TYPE

      CALL FUNCTION 'SCROLLING_IN_TABLE'
        EXPORTING
          entry_act             = entry_act
          entry_to              = entry_to
          last_page_full        = space
          loops                 = line_count
          ok_code               = save_ok_code
        IMPORTING
          entry_new             = entry_new
        EXCEPTIONS
          no_entry_or_page_act  = 01
          no_entry_to           = 02
          no_ok_code_or_page_go = 03.

      IF sy-subrc <> 3.
        entry_act = entry_new.
      ENDIF.
  ENDCASE.                             "case SAVE_OK_CODE

ENDMODULE.                             "module OK_CODE_BARC

*&---------------------------------------------------------------------*
*&      Form  CREATE_CHARTCONTROL
*&---------------------------------------------------------------------*
* Prepare a barchart control
*----------------------------------------------------------------------*
FORM CREATE_CHARTCONTROL.

  GV_REPID = SY-REPID.

  CALL FUNCTION 'BARCHART_CREATE'
    EXPORTING
      OWNER_REPID = GV_REPID
      DYNNR       = GC_DYNNR
    CHANGING
      HANDLE      = GV_BARC_OCX_HNDL.

* Activate customizing modus (Wizards)
  CALL FUNCTION 'BARC_SET_OPTIONS'
    EXPORTING
      CUSTOMIZE  = SGRC_CONST-NO  " This allows the user to change the chart layout upon doubleclicking on it
      EDITINLINE = SGRC_CONST-NO. " not sure what this does

* Graphics profile - this has major impact on the look and feel, even behaviour of the chart !!!
  GRAPH_PROFILE-PRF_GRUPPE = GC_GRUPPE.
  GRAPH_PROFILE-PRF_NAME   = GC_NAME.
  GRAPH_PROFILE-PRF_INDEX  = GC_INDEX.

* Define time axis
  PERFORM CREATE_TIME_AXIS.

* Define calendar (weekend, holidays etc.)
  PERFORM CREATE_CALENDAR.

ENDFORM.                    " PREPARE_CHARTCONTROL

*&---------------------------------------------------------------------*
*&      Form  SC_SET_ITEM_PROP
*&---------------------------------------------------------------------*
*  Update the item properties on the selection screen (upon selecting a new item
*----------------------------------------------------------------------*
FORM SC_SET_ITEM_PROP .

  CHECK P_POSNR = IT_VBAP-POSNR.
  P_PMATNR = IT_VBAP-MATNR.
  P_PKWMEN = IT_VBAP-KWMENG.
  P_PVRKME = IT_VBAP-VRKME.
  P_PGRPOS = IT_VBAP-GRPOS.
  P_PARKTX = IT_VBAP-ARKTX.

ENDFORM.                    " SC_SET_ITEM_PROP

*&---------------------------------------------------------------------*
*&      Form  LOAD_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM LOAD_DATA.

* Get the equipments based on charact for the plant and comp.code and models specified on sel.screen
  PERFORM LOAD_EQUI.
* Get the availabilit of the equipments etc.
  PERFORM LOAD_AVLY.

* If a document number was provided
  IF NOT P_VBELN IS INITIAL.
*   Make sure that the items will be displayed
    GV_SB = GC_SB_IT.
    PERFORM LOAD_SINGLE_DOC.
  ELSE.
*   Make sure that the items of the documents will not be displayed (only the documents)
    GV_SB = GC_SB_DO.
  ENDIF.

ENDFORM.                    " LOAD_DATA

*&---------------------------------------------------------------------*
*&      Form  DELETE_SOURCE_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM DELETE_SOURCE_DATA.

  CLEAR: IT_EQUNR, IT_EQUNR[], IT_MATNR, IT_MATNR[], IT_MODEL, IT_MODEL[],
         GR_EQUNR, GR_EQUNR[], GR_MATNR, GR_MATNR[], GR_MODEL, GR_MODEL[],
         IT_CLS_CHARLIST, IT_CLS_CHARLIST[],
         IT_MATEQ, IT_MATEQ[], IT_AVAIL, IT_AVAIL[].

ENDFORM.                    " DELETE_SOURCE_DATA

*&---------------------------------------------------------------------*
*&      Form  LOAD_DOCS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM LOAD_SINGLE_DOC.

  DATA: LV_ADRNR   TYPE ADRNR,
        LV_CITY    TYPE AD_CITY1,
        LV_COUNTRY TYPE LAND1.

* Clear the document and items table
  CLEAR: IT_DOCUM[], IT_DOCUM, IT_ITEMS[], IT_ITEMS.

* Find the document type and PO number (descr)
  SELECT SINGLE AUART VBELN BSTNK
           INTO (IT_DOCUM-AUART, IT_DOCUM-VBELN, IT_DOCUM-BSTKD)
           FROM VBAK
          WHERE VBELN = P_VBELN.
* Get the contract dates
  SELECT SINGLE VBEGDAT VENDDAT
           INTO (IT_DOCUM-BEGDAT, IT_DOCUM-ENDDAT)
           FROM VEDA
          WHERE VBELN = P_VBELN
            AND VPOSN = SPACE.
* Get the address... mind that there is an indicator which says whether to take the master data or the document address
  SELECT SINGLE ADRNR
           INTO LV_ADRNR
           FROM VBPA
          WHERE VBELN = P_VBELN
            AND POSNR = SPACE
            AND PARVW = 'WE'.
* Get the country and city for the address
  SELECT SINGLE CITY1 COUNTRY
           INTO (LV_CITY, LV_COUNTRY)
           FROM ADRC
          WHERE ADDRNUMBER = LV_ADRNR
            AND DATE_FROM  < SY-DATUM
            AND DATE_TO    > SY-DATUM.
* Compose the label to be displayed as "Location" on the documents chart box
  CONCATENATE LV_COUNTRY '-' LV_CITY INTO IT_DOCUM-LOCAT.
* Append the completed line
  APPEND IT_DOCUM.

* Get the items
  SELECT SINGLE VBELN POSNR MATNR ARKTX KWMENG
           INTO (IT_ITEMS-VBELN, IT_ITEMS-POSNR, IT_ITEMS-MATNR,
                 IT_ITEMS-MAKTX, IT_ITEMS-KWMENG)
           FROM VBAP
          WHERE VBELN = P_VBELN
            AND POSNR = P_POSNR.
* Copy the location of the items from the document
  IT_ITEMS-LOCAT = IT_DOCUM-LOCAT.
* Get the contract dates for the items
  SELECT SINGLE VBEGDAT VENDDAT
           INTO (IT_ITEMS-BEGDAT, IT_ITEMS-ENDDAT)
           FROM VEDA
          WHERE VBELN = P_VBELN
            AND VPOSN = P_POSNR.
* Append the completed line
  APPEND IT_ITEMS.

ENDFORM.                    " LOAD_DOCS

*&---------------------------------------------------------------------*
*&      Form  LOAD_MATS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM LOAD_MATS.

  DATA: LV_DATE  LIKE P_BEGDAT.

  CLEAR: IT_MATEQ, IT_MATEQ[].

*   Create 2 dummy models
  IT_MATEQ-LEVEL = 'MD'.
  IT_MATEQ-MAKTX = 'XAHS186'.
  IT_MATEQ-MATNR = '36'.
  IT_MATEQ-QUANT = 1.
  APPEND IT_MATEQ.

*   Create dummy availability for the first model
  IT_AVAIL-LEVEL = 'MD'.
  IT_AVAIL-MATNR = '36'.
  LV_DATE = P_BEGDAT.
  WHILE NOT LV_DATE > P_ENDDAT.
    IT_AVAIL-BEGDAT = LV_DATE.
    IT_AVAIL-AVAIL = 1.
    IF SY-TABIX < 10.
      IT_AVAIL-SOFTR = 7.
    ELSEIF IT_AVAIL-SOFTR = 1 OR IT_AVAIL-SOFTR = 7.
      IT_AVAIL-SOFTR = 0.
    ELSE.
      IT_AVAIL-SOFTR = 1.
    ENDIF.
    APPEND IT_AVAIL.
    LV_DATE = LV_DATE + 1.
  ENDWHILE.

ENDFORM.                    " LOAD_MATS

*&---------------------------------------------------------------------*
*&      Form  LOAD_EQUI
*&---------------------------------------------------------------------*
* This form will compile a list of equipments, materials and models.
* For this, the following steps will be taken:
*   - Always first query the classification system
*   - Then filter out the equipments that don't have the correct
*     maint.plant or comp.code
*   - For the remaining equipments, go find the models (materials have
*     been found already in prev. step
*   - When a quotation is being converted to a contract, check that the
*     model is still in the list
*----------------------------------------------------------------------*
FORM LOAD_EQUI.

* Translate the values chosen on the selection screen to lines in the table IT_CLS_CHARLIST
  PERFORM PREPARE_SEARCH_CLS.
* Use the table IT_CLS_CHARLIST to query the Class. System, result will be in IT_EQUNR
  PERFORM SEARCH_CLS.
* Search the equipment master view (like ITOB) to restrict
  PERFORM SEARCH_EMVIEW.
* Find the models corresponding to the Equipments materials
  PERFORM SEARCH_MODELS.
* Reduce the models set so that it's limited to the list provided by the user
  PERFORM REDUCE_MODELS.

ENDFORM.                    " LOAD_EQUI

*&---------------------------------------------------------------------*
*&      Form  PREPARE_CLS_SEARCH
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM PREPARE_SEARCH_CLS.

* If characteristic "Aftercooler" not initial on selection screen, add it to the charlist
  IF NOT P_CPAFCL IS INITIAL.
    IT_CLS_CHARLIST-CHAR  = GC_CLS_COM_AFTRCL. " After cooler built in
    IT_CLS_CHARLIST-TYP   = 'S'.               " single value
    IT_CLS_CHARLIST-VAL   = P_CPAFCL.
    IT_CLS_CHARLIST-ATFOR = 'CHAR'.
    APPEND IT_CLS_CHARLIST.
  ENDIF.

*  IT_CLS_CHARLIST-CHAR  = 'CH_RENTAL_PRESSURE'.
*  IT_CLS_CHARLIST-TYP   = 'R'.   " range
*  IT_CLS_CHARLIST-FROM  = 7.
*  IT_CLS_CHARLIST-TO    = 12.
*  IT_CLS_CHARLIST-ATFOR = 'NUM'.
*  APPEND IT_CLS_CHARLIST.

ENDFORM.                    " PREPARE_SEARCH_CLS

*&---------------------------------------------------------------------*
*&      Form  SEARCH_CLS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SEARCH_CLS.

DATA: LV_ATINN     TYPE STRING,
      BEGIN OF IT_CLS_ATWRT OCCURS 0,         " Characteristic values
        ATFLV      TYPE ATFLV,
        ATWRT      TYPE ATWRT,
        ATZHL      TYPE ATZHL,
        ATCOD      TYPE ATCOD,
      END OF IT_CLS_ATWRT,
      IT_CLS_OTYP  TYPE mcls_r_tabelle       OCCURS 0 WITH HEADER LINE,  " Object Types
      IT_CLS_CRIT  TYPE comw                 OCCURS 0 WITH HEADER LINE,  " Selection Criteria
      IT_CLS_CHAR  TYPE clsel_r_atinn        OCCURS 0 WITH HEADER LINE,  " Characteristics
      IT_CLS_OBJC  TYPE clsel_search_objects OCCURS 0 WITH HEADER LINE.  " Search Objects

  IF NOT IT_CLS_CHARLIST IS INITIAL.

*   Set the Object type that needs querying, ie we want to search "Material" classification
    IT_CLS_OTYP-SIGN       = 'I'.
    IT_CLS_OTYP-OPTION     = 'EQ'.
    IT_CLS_OTYP-LOW        = 'EQUI'.   " MARA for materials, EQUI for equipments
    APPEND IT_CLS_OTYP.

*   Loop over the characteristics that need querying
    LOOP AT IT_CLS_CHARLIST.
*     Get the key for a the characteristic that you wish to query
      CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
           EXPORTING
                INPUT  = IT_CLS_CHARLIST-CHAR
           IMPORTING
                OUTPUT = LV_ATINN.

*     Set the characteristic that you need to find some specific value(s) for
      IT_CLS_CHAR-SIGN   = 'I'.
      IT_CLS_CHAR-OPTION = 'EQ'.
      IT_CLS_CHAR-LOW    = LV_ATINN.
      APPEND IT_CLS_CHAR.

*     Get the keys for the characteristic value(s) that you are interested in
      IF IT_CLS_CHARLIST-TYP = 'S'.
        SELECT ATWRT ATZHL ATCOD             "#EC CI_SEL_NESTED
          INTO CORRESPONDING FIELDS OF TABLE IT_CLS_ATWRT
          FROM CAWN
         WHERE ATINN = LV_ATINN
           AND ATWRT = IT_CLS_CHARLIST-VAL.
       ELSE.
         SELECT ATFLV ATZHL ATCOD            "#EC CI_SEL_NESTED
          INTO CORRESPONDING FIELDS OF TABLE IT_CLS_ATWRT
          FROM CAWN
         WHERE ATINN = LV_ATINN
           AND ATFLV GE IT_CLS_CHARLIST-FROM
           AND ATFLV LE IT_CLS_CHARLIST-TO.
       ENDIF.

*     For every key value that you're interested in
      LOOP AT IT_CLS_ATWRT.

*       Add it to the selection criteria as an allowed value
        IT_CLS_CRIT-ATINN = LV_ATINN.
        IF IT_CLS_CHARLIST-TYP = 'S'.
          IT_CLS_CRIT-ATWRT = IT_CLS_ATWRT-ATWRT.
          CLEAR IT_CLS_CRIT-ATFLV.
        ELSE.
          CLEAR IT_CLS_CRIT-ATWRT.
          IT_CLS_CRIT-ATFLV = IT_CLS_ATWRT-ATFLV.
        ENDIF.
        IT_CLS_CRIT-ATZHL = IT_CLS_ATWRT-ATZHL.
        IT_CLS_CRIT-ATCOD = IT_CLS_ATWRT-ATCOD.
        IT_CLS_CRIT-SLCOD = IT_CLS_ATWRT-ATCOD.
        IT_CLS_CRIT-STATU = 'H'.
        IT_CLS_CRIT-ATFOR = IT_CLS_CHARLIST-ATFOR.
        APPEND IT_CLS_CRIT.

      ENDLOOP.  " AT IT_CLS_ATWRT.

    ENDLOOP.    " AT IT_CLS_CHARLIST.

    CALL FUNCTION 'CLSC_SEARCH_IN_CLASSTYPE'
      EXPORTING
        I_CLASSTYPE                    = GC_KLART
        I_KEYDATE                      = SY-DATUM
        I_LANGUAGE                     = SY-LANGU
        I_STATUS_FREE                  = 'X'
        I_MAX_HITS                     = 9999
      TABLES
        I_R_OBJECTTYPES_TAB            = IT_CLS_OTYP
        I_SELECTION_CRITERIA_TAB       = IT_CLS_CRIT
        I_R_CHARACTERISTICS_TAB        = IT_CLS_CHAR
        E_OBJECTS_TAB                  = IT_CLS_OBJC
      EXCEPTIONS
        NO_OBJECTS_FOUND               = 1
        INSUFFICIENT_CRITERIA          = 2
        OTHERS                         = 3.

    IF SY-SUBRC = 0.
      GR_EQUNR-SIGN   = 'I'.
      GR_EQUNR-OPTION = 'EQ'.
      LOOP AT IT_CLS_OBJC.
        GR_EQUNR-LOW = IT_CLS_OBJC-OBJECT.
        APPEND GR_EQUNR.
      ENDLOOP.  " IT_CLS_OBJC.
    ENDIF.   " SY-SUBRC = 0.

    SORT GR_EQUNR.
    DELETE ADJACENT DUPLICATES FROM GR_EQUNR.

  ENDIF.   " NOT IT_CLS_CHARLIST IS INITIAL.

ENDFORM.                    " SEARCH_CLS

*&---------------------------------------------------------------------*
*&      Form  PREPARE_COMBO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM PREPARE_COMBO USING P_PNAME P_CHNAME.

  DATA: BEGIN OF WA_DDVAL, " Source: TYPE-POOLS : VRM. (Type VRM_VALUE)
          KEY(40) TYPE C,
          TEXT(80) TYPE C,
        END OF WA_DDVAL,
        IT_DDVAL LIKE TABLE OF WA_DDVAL,
        LV_ATINN TYPE ATINN.

  CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
       EXPORTING
            INPUT  = P_CHNAME
       IMPORTING
            OUTPUT = LV_ATINN.

  APPEND WA_DDVAL TO IT_DDVAL.
  SELECT CAWN~ATWRT CAWNT~ATWTB
      INTO (WA_DDVAL-KEY, WA_DDVAL-TEXT)
      FROM CAWN
      JOIN CAWNT
        ON CAWN~ATINN = CAWNT~ATINN
       AND CAWN~ATZHL = CAWNT~ATZHL
       AND CAWN~ADZHL = CAWNT~ADZHL
     WHERE CAWN~ATINN = LV_ATINN
       AND CAWNT~SPRAS = 'EN'.
    APPEND WA_DDVAL TO IT_DDVAL.
  ENDSELECT.
  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      ID              = P_PNAME
      VALUES          = IT_DDVAL
    EXCEPTIONS
      ID_ILLEGAL_NAME = 1
      OTHERS          = 2.

ENDFORM.                    " PREPARE_COMBO

*&---------------------------------------------------------------------*
*&      Form  SEARCH_EMVIEW
*&---------------------------------------------------------------------*
* Search Equipment Master View (like ITOB)
*----------------------------------------------------------------------*
FORM SEARCH_EMVIEW .

* If no characteristics were specified by the user
  IF IT_CLS_CHARLIST IS INITIAL.
*   Join tables EQUI EQUZ and ILOA as in view ITOB, only consider the equip which have
*    - Comp Code as provided on the selection screen
*    - Maint Plt as provided on the selection screen
*    - a Material number maintained
    SELECT EQUZ~EQUNR EQUI~MATNR EQKT~EQKTX
           FROM ILOA
           JOIN EQUZ
             ON ILOA~ILOAN = EQUZ~ILOAN
           JOIN EQUI
             ON EQUZ~EQUNR = EQUI~EQUNR
           JOIN EQKT
             ON EQUZ~EQUNR = EQKT~EQUNR
           INTO (IT_EQUNR-EQUNR, IT_EQUNR-MATNR, IT_EQUNR-SHTXT)
          WHERE EQUZ~DATBI GE SY-DATUM
            AND EQUZ~DATAB LE SY-DATUM
            AND EQKT~SPRAS EQ 'EN'
            AND ( ILOA~SWERK = P_WERKS
               OR ILOA~BUKRS = P_BUKRS )
            AND NOT EQUI~MATNR = SPACE.
      APPEND IT_EQUNR.
      IT_MATNR-MATNR = IT_EQUNR-MATNR.
      APPEND IT_MATNR.
    ENDSELECT.
* If characteristics were specified by user, and the class. query has returned a result
  ELSEIF NOT GR_EQUNR IS INITIAL.
*   Join tables EQUI EQUZ and ILOA as in view ITOB, only consider the equip which have
*    - Been considered by classifcation  (see previous performs)
*    - Comp Code as provided on the selection screen
*    - Maint Plt as provided on the selection screen
*    - a Material number maintained
    SELECT EQUZ~EQUNR EQUI~MATNR EQKT~EQKTX
           FROM ILOA
           JOIN EQUZ
             ON ILOA~ILOAN = EQUZ~ILOAN
           JOIN EQUI
             ON EQUZ~EQUNR = EQUI~EQUNR
           JOIN EQKT
             ON EQUZ~EQUNR = EQKT~EQUNR
           INTO (IT_EQUNR-EQUNR, IT_EQUNR-MATNR, IT_EQUNR-SHTXT)
          WHERE EQUZ~EQUNR IN GR_EQUNR
            AND EQUZ~DATBI GE SY-DATUM
            AND EQUZ~DATAB LE SY-DATUM
            AND EQKT~SPRAS EQ 'EN'
            AND ( ILOA~SWERK = P_WERKS
               OR ILOA~BUKRS = P_BUKRS )
            AND NOT EQUI~MATNR = SPACE.
      APPEND IT_EQUNR.
      IT_MATNR-MATNR = IT_EQUNR-MATNR.
      APPEND IT_MATNR.
    ENDSELECT.
  ENDIF.

* Sort the equipment table and remove duplicates
  SORT IT_EQUNR.
  DELETE ADJACENT DUPLICATES FROM IT_EQUNR.
* Sort the material table and remove duplicates
  SORT IT_MATNR.
  DELETE ADJACENT DUPLICATES FROM IT_MATNR.

ENDFORM.                    " SEARCH_EMVIEW

*&---------------------------------------------------------------------*
*&      Form  SEARCH_MODELS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SEARCH_MODELS .

* Loop at materIals
  LOOP AT IT_MATNR.
*   Find the description of the material
    SELECT SINGLE MAKTX
             FROM MAKT
             INTO IT_MATNR-MAKTX
            WHERE MATNR = IT_MATNR-MATNR
              AND SPRAS = 'EN'.
*   Find the corresponding model (pricing reference material)
    SELECT SINGLE PMATN
             FROM MVKE
             INTO IT_MATNR-MODEL
            WHERE MATNR = IT_MATNR-MATNR
              AND VKORG = P_VKORG
              AND VTWEG = P_VTWEG.

*   If no model exists, then the model is the material itself.
    IF IT_MATNR-MODEL = SPACE.
      IT_MATNR-MODEL = IT_MATNR-MATNR.
    ENDIF.
    MODIFY IT_MATNR.
*   Fill a model line as well
    IT_MODEL-MODEL = IT_MATNR-MODEL.
    IF IT_MODEL-MODEL = IT_MATNR-MATNR.
      IT_MODEL-MAKTX = IT_MATNR-MAKTX.
    ELSE.
*     Find the description of the material
      SELECT SINGLE MAKTX
               FROM MAKT
               INTO IT_MATNR-MAKTX
              WHERE MATNR = IT_MODEL-MODEL
                AND SPRAS = 'EN'.
    ENDIF.
    APPEND IT_MODEL.
  ENDLOOP.

* Sort the model table and remove duplicates
  SORT IT_MODEL.
  DELETE ADJACENT DUPLICATES FROM IT_MODEL.

ENDFORM.                    " SEARCH_MODELS

*&---------------------------------------------------------------------*
*&      Form  REDUCE_MODELS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM REDUCE_MODELS.

  IF NOT SO_MODEL IS INITIAL.
    LOOP AT IT_MODEL WHERE MODEL NOT IN SO_MODEL.
      LOOP AT IT_MATNR WHERE MODEL = IT_MODEL-MODEL.
        LOOP AT IT_EQUNR WHERE MATNR = IT_MATNR-MATNR.
          DELETE GR_EQUNR WHERE LOW = IT_EQUNR-EQUNR.
          DELETE IT_EQUNR.
        ENDLOOP.  " IT_EQUNR
        DELETE IT_MATNR.
      ENDLOOP.    " IT_MATNR
      DELETE IT_MODEL.
    ENDLOOP.      " IT_MODEL.
  ENDIF.

* Fill a global range with all models
  CLEAR: GR_MODEL, GR_MODEL[].
  GR_MODEL-SIGN = 'I'.
  GR_MODEL-OPTION = 'EQ'.
  LOOP AT IT_MODEL.
    GR_MODEL-LOW = IT_MODEL-MODEL.
    APPEND GR_MODEL.
  ENDLOOP. " IT_MODEL
  SORT GR_MODEL.
  DELETE ADJACENT DUPLICATES FROM GR_MODEL.
* Fill a global range with all material numbers
  CLEAR: GR_MATNR, GR_MATNR[].
  GR_MATNR-SIGN = 'I'.
  GR_MATNR-OPTION = 'EQ'.
  LOOP AT IT_MATNR.
    GR_MATNR-LOW = IT_MATNR-MATNR.
    APPEND GR_MATNR.
  ENDLOOP. " IT_MATNR
  SORT GR_MATNR.
  DELETE ADJACENT DUPLICATES FROM GR_MATNR.
* Refresh the global range with all equipments (it may be empty if no class used,
* or it may have been reduced after restricting the models on CoCo, Plant, modelNr
  CLEAR: GR_EQUNR, GR_EQUNR[].
  GR_EQUNR-SIGN = 'I'.
  GR_EQUNR-OPTION = 'EQ'.
  LOOP AT IT_EQUNR.
    GR_EQUNR-LOW = IT_EQUNR-EQUNR.
    APPEND GR_EQUNR.
  ENDLOOP. " IT_EQUNR
  SORT GR_EQUNR.
  DELETE ADJACENT DUPLICATES FROM GR_EQUNR.

ENDFORM.                    " REDUCE_MODELS

*&---------------------------------------------------------------------*
*&      Form  LOAD_AVLY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM LOAD_AVLY.

  DATA: LV_DATE    LIKE P_BEGDAT,
        LV_TABIX   TYPE SYTABIX,
        LV_QUANT   TYPE I,
        IT_S502_EQ TYPE TABLE OF YSE_RENT_SME WITH HEADER LINE,
        IT_S502_MD TYPE TABLE OF YSE_RENT_SME WITH HEADER LINE,
        IT_S502_MT TYPE TABLE OF YSE_RENT_SME WITH HEADER LINE.

  CLEAR: IT_MATEQ, IT_MATEQ[].

* PREPARE THE IT_MATEQ TABLE ***
* ************************** ***
* Loop on the model table
  LOOP AT IT_MODEL.
*   Set the level
    IT_MATEQ-LEVEL = 'MD'.
*   Set description, material number and reset quantity
    IT_MATEQ-MAKTX = IT_MODEL-MAKTX.
    IT_MATEQ-MATNR = IT_MODEL-MODEL.
    IT_MATEQ-QUANT = 0.
    LV_QUANT = 0.
    APPEND IT_MATEQ.
    LV_TABIX = SY-TABIX.
*   Loop at the material table
    LOOP AT IT_MATNR WHERE MODEL = IT_MODEL-MODEL.
*     If in Equipment view, add the model to the to-be-displayed list in IT_MATEQ
      IF GV_ST = GC_ST_EQ.
*       Set the level
        IT_MATEQ-LEVEL = 'MT'.
        IT_MATEQ-MAKTX = IT_MATNR-MAKTX.
        IT_MATEQ-MATNR = IT_MATNR-MATNR.
        IT_MATEQ-QUANT = 0.
        APPEND IT_MATEQ.
      ENDIF.
*     Loop at the equipment table
      LOOP AT IT_EQUNR WHERE MATNR = IT_MATNR-MATNR.
*       For every equipment, increment the quantity for the model
        LV_QUANT       = LV_QUANT + 1.
*       If in Equipment view, add the equipment to the to-be-displayed list in IT_MATEQ
        IF GV_ST = GC_ST_EQ.
*         Set the level
          IT_MATEQ-LEVEL = 'EQ'.
          IT_MATEQ-MAKTX = IT_EQUNR-SHTXT.
          IT_MATEQ-MATNR = IT_EQUNR-MATNR.
          IT_MATEQ-EQUNR = IT_EQUNR-EQUNR.
*         TVOTBA: to table IT_EQUNR a field should be added for
*            - Owning CC
*            - Current Loc
*            - Current Sta
*           which will be filled at "LOAD_EQUI" and then used here to fill IT_MATEQ for LEVEL = 'EQ'
          IT_MATEQ-QUANT = 0.
          APPEND IT_MATEQ.
        ENDIF.
      ENDLOOP. " IT_EQUNR
    ENDLOOP.   " IT_MATNR
*   Update the Material-Equipment line for the model with the actual quantity
    READ TABLE IT_MATEQ INDEX LV_TABIX.
    IT_MATEQ-QUANT = LV_QUANT.
    MODIFY IT_MATEQ INDEX LV_TABIX.

*   PREPARE THE IT_AVAIL TABLE ***
*   ************************** ***
*   Start preparing the availability lines for this model: for every day in the displayed
*     timeframe, create a line for this model with full availability and no soft reservations
    IT_AVAIL-LEVEL = 'MD'.
    IT_AVAIL-MATNR = IT_MODEL-MODEL.
    IT_AVAIL-AVAIL = IT_MATEQ-QUANT.
    IT_AVAIL-SOFTR = 0.

    LV_DATE = P_BEGDAT.
    WHILE NOT LV_DATE > P_ENDDAT.
      IT_AVAIL-BEGDAT = LV_DATE.
      APPEND IT_AVAIL.
      LV_DATE = LV_DATE + 1.
    ENDWHILE.

  ENDLOOP.     " IT_MODEL

* GET ACTUALS TO FINALIZE IT_AVAIL TABLE ***
* ************************************** ***
* Load the hard reservations for the equipments in the date range that interests us
  SELECT * FROM YSE_RENT_SME
        INTO TABLE IT_S502_EQ
       WHERE ZZEQUNR IN GR_EQUNR
         AND VKORG = P_VKORG
         AND VTWEG = P_VTWEG
         AND ( (     ANGDT GE P_BEGDAT
                 AND ANGDT LE P_ENDDAT )
            OR (     BNDDT GE P_BEGDAT
                 AND BNDDT LE P_ENDDAT ) ).
* Load the soft reservations for the models
  SELECT * FROM YSE_RENT_SME
        INTO TABLE IT_S502_MD
       WHERE MATNR IN GR_MODEL
         AND VKORG = P_VKORG
         AND VTWEG = P_VTWEG
         AND ZZEQUNR EQ SPACE
         AND ( (     ANGDT GE P_BEGDAT
                 AND ANGDT LE P_ENDDAT )
            OR (     BNDDT GE P_BEGDAT
                 AND BNDDT LE P_ENDDAT ) ).
* Load the soft reservations for the materials
  SELECT * FROM YSE_RENT_SME
        INTO TABLE IT_S502_MD
       WHERE MATNR IN GR_MATNR
         AND VKORG = P_VKORG
         AND VTWEG = P_VTWEG
         AND ZZEQUNR EQ SPACE
         AND ( (     ANGDT GE P_BEGDAT
                 AND ANGDT LE P_ENDDAT )
            OR (     BNDDT GE P_BEGDAT
                 AND BNDDT LE P_ENDDAT ) ).

* FINALIZE IT_AVAIL TABLE ***
* *********************** ***
* If Status Top is Model, then update the models availability based on the hard reservations etc.
  IF GV_ST = GC_ST_MD.
*   Process the hard reservations to update the availability of models
    LOOP AT IT_S502_EQ.
*     Find the model related to the equipment
      READ TABLE IT_EQUNR WITH KEY EQUNR = IT_S502_EQ-ZZEQUNR.
      READ TABLE IT_MATNR WITH KEY MATNR = IT_EQUNR-MATNR.
*     Set the start date
      IF P_BEGDAT GT IT_S502_EQ-ANGDT.
        LV_DATE = P_BEGDAT.
      ELSE.
        LV_DATE = IT_S502_EQ-ANGDT.
      ENDIF.
*     Loop for every day until end of contract or parameter P_ENDDAT
      WHILE NOT LV_DATE > P_ENDDAT AND NOT LV_DATE > IT_S502_EQ-BNDDT.
*       Find the correct line in IT_AVAIL
        READ TABLE IT_AVAIL WITH KEY LEVEL  = 'MD'
                                     MATNR  = IT_MATNR-MODEL
                                     BEGDAT = LV_DATE.
        IT_AVAIL-AVAIL = IT_AVAIL-AVAIL - 1.
        MODIFY TABLE IT_AVAIL.
        LV_DATE = LV_DATE + 1.
      ENDWHILE.
    ENDLOOP.
* If Status Top is Equipment, then use the reservations to complete IT_AVAIL with additional lines on Equipment level
  ELSEIF GV_ST = GC_ST_EQ.
*   Set the level
    IT_AVAIL-LEVEL = 'EQ'.
    LOOP AT IT_S502_EQ.
      IT_AVAIL-MATNR  = IT_S502_EQ-MATNR.
      IT_AVAIL-EQUNR  = IT_S502_EQ-ZZEQUNR.
      IT_AVAIL-BEGDAT = IT_S502_EQ-ANGDT.
      IT_AVAIL-ENDDAT = IT_S502_EQ-BNDDT.
      IT_AVAIL-LOCAT  = IT_S502_EQ-ZZSE_LOC.
      CASE IT_S502_EQ-AUART.
        WHEN GC_AUART_CONT.
          IT_AVAIL-STAT = 'HR'.
        WHEN GC_AUART_SEOR.
          IT_AVAIL-STAT = 'MR'.
      ENDCASE.
      APPEND IT_AVAIL.
    ENDLOOP.   " IT_S502_EQ
  ENDIF.

* Process the soft reservations on the level of materials to update the SR of models
  LOOP AT IT_S502_MT.
*   Find the model related to the equipment
    READ TABLE IT_MATNR WITH KEY MATNR = IT_S502_MT-MATNR.
*   Set the start date
    IF P_BEGDAT GT IT_S502_MT-ANGDT.
      LV_DATE = P_BEGDAT.
    ELSE.
      LV_DATE = IT_S502_MT-ANGDT.
    ENDIF.
*   Loop for every day until end of contract or parameter P_ENDDAT
    WHILE NOT LV_DATE > P_ENDDAT AND NOT LV_DATE > IT_S502_MT-BNDDT.
*     Find the correct line in IT_AVAIL
      READ TABLE IT_AVAIL WITH KEY LEVEL  = 'MD'
                                   MATNR  = IT_MATNR-MODEL
                                   BEGDAT = LV_DATE.
      IT_AVAIL-SOFTR = IT_AVAIL-SOFTR + IT_S502_MT-KWMENG + 1.  " TVOTBA this " + 1" should be removed as soon as KWMENG has correct value
      MODIFY TABLE IT_AVAIL.
      LV_DATE = LV_DATE + 1.
    ENDWHILE.
  ENDLOOP.

* Process the soft reservations on the level of models to update the SR of models
  LOOP AT IT_S502_MD.
*   Set the start date
    IF P_BEGDAT GT IT_S502_MD-ANGDT.
      LV_DATE = P_BEGDAT.
    ELSE.
      LV_DATE = IT_S502_MD-ANGDT.
    ENDIF.
*   Loop for every day until end of contract or parameter P_ENDDAT
    WHILE NOT LV_DATE > P_ENDDAT AND NOT LV_DATE > IT_S502_MD-BNDDT.
*     Find the correct line in IT_AVAIL
      READ TABLE IT_AVAIL WITH KEY LEVEL  = 'MD'
                                   MATNR  = IT_S502_MD-MATNR
                                   BEGDAT = LV_DATE.
      IT_AVAIL-SOFTR = IT_AVAIL-SOFTR + IT_S502_MT-KWMENG + 1. " TVOTBA this " + 1" should be removed as soon as KWMENG has correct value
      MODIFY TABLE IT_AVAIL.
      LV_DATE = LV_DATE + 1.
    ENDWHILE.
  ENDLOOP.

ENDFORM.                    " LOAD_AVLY
