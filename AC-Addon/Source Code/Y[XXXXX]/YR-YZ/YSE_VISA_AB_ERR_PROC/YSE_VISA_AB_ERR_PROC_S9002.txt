*&---------------------------------------------------------------------*
*&  Include           YSE_VISA_AB_ERR_PROC_S9002
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Module  S9002_STATUS  OUTPUT
*&---------------------------------------------------------------------*
MODULE S9002_STATUS OUTPUT.

  SET TITLEBAR  'S9002_DEFAULT'.
  SET PF-STATUS 'S9002_DEFAULT'.

ENDMODULE.                 " S9002_STATUS  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  S9002_PREPSC  OUTPUT
*&---------------------------------------------------------------------*
MODULE S9002_PREPSC OUTPUT.

  PERFORM S9002_PREPSC.

ENDMODULE.                 " S9002_PREPSC  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  S9002_UCOMM  INPUT
*&---------------------------------------------------------------------*
MODULE S9002_UCOMM INPUT.

  GV_OKCOD2 = GV_OKCODE.
  CLEAR GV_OKCODE.
  CASE GV_OKCOD2.
    WHEN 'FIRST' OR 'PREV' OR 'NEXT' OR 'LAST'.
      PERFORM S9002_NAVIGATE.
    WHEN 'PROCESS'.
      PERFORM S9002_VERIFY_INPUT.
      PERFORM S9002_START_INBOUND.
    WHEN 'BACK' OR 'EXIT' OR 'CANC'.
      CLEAR: SV_EBELN_NEW, SV_EBELP_NEW, SV_IDTNR_NEW.
      LEAVE TO SCREEN 0.
    WHEN OTHERS.
  ENDCASE.

ENDMODULE.                 " S9002_UCOMM  INPUT

*&---------------------------------------------------------------------*
*&      Form  S9002_PREPSC
*&---------------------------------------------------------------------*
FORM S9002_PREPSC.

  DATA:
    LV_IDTNR          LIKE SV_IDTNR_NEW,
    LV_BELNR          TYPE CHAR35,
    LV_ZEILE          TYPE EDI1082_A,
    WA_2BUPDATED LIKE LINE OF IT_2BUPDATED.

* Set by default that the mapping in the PO should be updated
  CB_UPD_MAPPING = GC_CHAR_X.

* If screenvariables for PO and item are initial
  IF SV_EBELN_NEW IS INITIAL AND SV_EBELP_NEW IS INITIAL.
*   Try to have the PO number from the IDOC mapped to a SEED PO number
    LV_BELNR = IT_2BUPDATED-EBELN.
    LV_ZEILE = IT_2BUPDATED-EBELP.
    CALL FUNCTION 'YSE_VISA_MAP_PO_ITEM'
      EXPORTING
        I_BELNR                    = LV_BELNR
        I_ZEILE                    = LV_ZEILE
        I_LIFNR                    = IT_2BUPDATED-LIFNR
        I_EKORG                    = IT_2BUPDATED-EKORG
      IMPORTING
        E_EBELN                    = SV_EBELN_NEW
        E_EBELP                    = SV_EBELP_NEW
      EXCEPTIONS
        FOUND_IN_IHREZ_LICHA       = 1
        FOUND_IN_EBELN_EBELP       = 2
        NOT_FOUND                  = 3
        NOT_ENOUGH_PARAM           = 4
        OTHERS                     = 5.
*   If mapping failed
    IF SY-SUBRC NE 1 AND SY-SUBRC NE 2.
*     Use what came in from the idoc to present to user
      SV_EBELN_NEW = IT_2BUPDATED-EBELN.
      SV_EBELP_NEW = IT_2BUPDATED-EBELP.
    ENDIF.
  ENDIF.
  IF SV_IDTNR_NEW IS INITIAL.
    SELECT SINGLE MATNR
             INTO LV_IDTNR
             FROM EKPO
            WHERE EBELN EQ SV_EBELN_NEW
              AND EBELP EQ SV_EBELP_NEW.
    IF SY-SUBRC EQ 0.
      SV_IDTNR_NEW = LV_IDTNR.
    ELSE.
      SV_IDTNR_NEW = IT_2BUPDATED-IDTNR.
    ENDIF.
  ENDIF.
  DESCRIBE TABLE IT_2BUPDATED LINES SV_LINES.
  READ TABLE IT_2BUPDATED INTO WA_2BUPDATED WITH KEY DOCNUM = IT_2BUPDATED-DOCNUM.
  SV_LINE = SY-TABIX.

ENDFORM.                    " S9002_PREPSC

*&---------------------------------------------------------------------*
*&      Form  S9002_NAVIGATE
*&---------------------------------------------------------------------*
FORM S9002_NAVIGATE .

  DATA:
    LV_TABIX          TYPE SYTABIX,
    LV_LINES          TYPE I,
    WA_2BUPDATED LIKE LINE OF IT_2BUPDATED.

* Read current line from the table with entries which are selected for update
  READ TABLE IT_2BUPDATED WITH KEY DOCNUM = IT_2BUPDATED-DOCNUM.
* If read failed
  IF SY-SUBRC NE 0.
*   Strange problem! Should never occur !
  ENDIF.

* Get number of entries
  DESCRIBE TABLE IT_2BUPDATED LINES LV_LINES.

* Depending on the requested navigation action
  CASE GV_OKCOD2.
*   When FIRST is requested
    WHEN 'FIRST'.
*     If the previously displayed line, was at position 1
      IF SY-TABIX EQ 1.
*       Already at first position
        MESSAGE ID 'YSE_SALES_LOG' TYPE 'S' NUMBER '056'.
*     If some other line was previously displayed
      ELSE.
*       Read first entry
        READ TABLE IT_2BUPDATED INDEX 1.
        IF SY-SUBRC NE 0.
*         Strange problem
        ELSE.
          CLEAR: SV_EBELN_NEW, SV_EBELP_NEW, SV_IDTNR_NEW.
        ENDIF.
      ENDIF.
    WHEN 'PREV'.
*     Read preceding entry from the table
      IF SY-TABIX EQ 1.
*       Already at first position
        MESSAGE ID 'YSE_SALES_LOG' TYPE 'S' NUMBER '056'.
      ELSE.
        LV_TABIX = SY-TABIX - 1.
        READ TABLE IT_2BUPDATED INDEX LV_TABIX.
        IF SY-SUBRC NE 0.
*         Strange problem
        ELSE.
          CLEAR: SV_EBELN_NEW, SV_EBELP_NEW, SV_IDTNR_NEW.
        ENDIF.
      ENDIF.
    WHEN 'NEXT'.
*     Read next entry from the table
      IF SY-TABIX EQ LV_LINES.
*       Already at last position
        MESSAGE ID 'YSE_SALES_LOG' TYPE 'S' NUMBER '057'.
      ELSE.
        LV_TABIX = SY-TABIX + 1.
        READ TABLE IT_2BUPDATED INDEX LV_TABIX.
        IF SY-SUBRC NE 0.
*         Strange problem
        ELSE.
          CLEAR: SV_EBELN_NEW, SV_EBELP_NEW, SV_IDTNR_NEW.
        ENDIF.
      ENDIF.
    WHEN 'LAST'.
*     If the previously displayed line, was at last position
      IF SY-TABIX EQ LV_LINES.
*       Already at last position
        MESSAGE ID 'YSE_SALES_LOG' TYPE 'S' NUMBER '057'.
*     If some other line was previously displayed
      ELSE.
*       Read last entry
        READ TABLE IT_2BUPDATED INDEX LV_LINES.
        IF SY-SUBRC NE 0.
*         Strange problem
        ELSE.
          CLEAR: SV_EBELN_NEW, SV_EBELP_NEW, SV_IDTNR_NEW.
        ENDIF.
      ENDIF.
    WHEN OTHERS.
  ENDCASE.

ENDFORM.                    " S9002_NAVIGATE

*&---------------------------------------------------------------------*
*&      Form  S9002_START_INBOUND
*&---------------------------------------------------------------------*
FORM S9002_START_INBOUND .

  DATA:
    LV_SUBRC         LIKE SY-SUBRC,
    LV_DOCNUM_NEW    LIKE IT_2BUPDATED-DOCNUM,
    IT_EDIDD         TYPE STANDARD TABLE OF EDIDD WITH HEADER LINE,
    LS_EDIDC         TYPE EDIDC.

* Read the originating idoc
  PERFORM S9002_READ_IDOC TABLES IT_EDIDD
                           USING IT_2BUPDATED-DOCNUM
                        CHANGING LS_EDIDC.
* Updates PO number and item to reflect user's input
  PERFORM S9002_CHAN_IDOC TABLES IT_EDIDD.
* Create the idoc (and process it)
  PERFORM S9002_POST_IDOC TABLES IT_EDIDD
                        CHANGING LS_EDIDC
                                 LV_DOCNUM_NEW.
* Show IDOC number to user
  MESSAGE ID 'YSE_SALES_LOG' TYPE 'I' NUMBER '059' WITH LV_DOCNUM_NEW.
* If mapping in PO should be updated
  IF CB_UPD_MAPPING NE SPACE.
*   Update IHREZ and LICHA to reflect the mapping
    PERFORM S9002_UPDATE_PO_MAPPING.
  ENDIF.
* Delete the entries for the mapped PO Item reference and refresh the screen
  PERFORM S9002_CLEANUP_PROCESSED_ENTRY.

ENDFORM.                    " S9002_START_INBOUND

*&---------------------------------------------------------------------*
*&      Form  S9002_READ_IDOC
*&---------------------------------------------------------------------*
FORM S9002_READ_IDOC  TABLES   PT_EDIDD STRUCTURE EDIDD
                      USING    P_DOCNUM
                      CHANGING PS_EDIDC STRUCTURE EDIDC.

* Read original document
  CALL FUNCTION 'IDOC_READ_COMPLETELY'
    EXPORTING
      DOCUMENT_NUMBER                = P_DOCNUM
    IMPORTING
      IDOC_CONTROL                   = PS_EDIDC
*     NUMBER_OF_DATA_RECORDS         =
*     NUMBER_OF_STATUS_RECORDS       =
    TABLES
*     INT_EDIDS                      =
      INT_EDIDD                      = PT_EDIDD
    EXCEPTIONS
      DOCUMENT_NOT_EXIST             = 1
      DOCUMENT_NUMBER_INVALID        = 2
      OTHERS                         = 3.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                    " S9002_READ_IDOC

*&---------------------------------------------------------------------*
*&      Form  S9002_POST_IDOC
*&---------------------------------------------------------------------*
FORM S9002_POST_IDOC  TABLES   PT_EDIDD STRUCTURE EDIDD
                      CHANGING PS_EDIDC STRUCTURE EDIDC
                               P_DOCNUM.

  DATA:
    LV_STATE   TYPE SY-SUBRC,
    LV_PROCESS TYPE TEDE2,
    LT_EDIDC   TYPE EDIDC OCCURS 0.

* Clear the old IDOC number from the control record
  CLEAR PS_EDIDC-DOCNUM.
* Have the IDOC created
  CALL FUNCTION 'IDOC_INBOUND_WRITE_TO_DB'
*    EXPORTING
*     PI_STATUS_MESSAGE             =
*     PI_RETURN_DATA_FLAG           = 'X'
    IMPORTING
      PE_IDOC_NUMBER                = P_DOCNUM
      PE_STATE_OF_PROCESSING        = LV_STATE
      PE_INBOUND_PROCESS_DATA       = LV_PROCESS
    TABLES
      T_DATA_RECORDS                = PT_EDIDD[]
*     T_LINKED_OBJECTS              =
    CHANGING
      PC_CONTROL_RECORD             = PS_EDIDC
    EXCEPTIONS
      IDOC_NOT_SAVED                = 1
      OTHERS                        = 2.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
* Have the new IDOC processed
  REFRESH LT_EDIDC.
  APPEND PS_EDIDC TO LT_EDIDC.
  CALL FUNCTION 'IDOC_START_INBOUND'
    EXPORTING
*     PI_INBOUND_PROCESS_DATA             = ' '
      PI_CALLED_ONLINE                    = GC_CHAR_X
    TABLES
      T_CONTROL_RECORDS                   = LT_EDIDC
    EXCEPTIONS
      INVALID_DOCUMENT_NUMBER             = 1
      ERROR_BEFORE_CALL_APPLICATION       = 2
      INBOUND_PROCESS_NOT_POSSIBLE        = 3
      OLD_WF_START_FAILED                 = 4
      WF_TASK_ERROR                       = 5
      SERIOUS_INBOUND_ERROR               = 6
      OTHERS                              = 7.
  IF SY-SUBRC <> 0.
   MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.


ENDFORM.                    " S9002_POST_IDOC

*&---------------------------------------------------------------------*
*&      Form  S9002_VERIFY_INPUT
*&---------------------------------------------------------------------*
FORM S9002_VERIFY_INPUT .

  DATA:
    BEGIN OF LS_EKPO,
      EBELN LIKE EKPO-EBELN,
      EBELP LIKE EKPO-EBELP,
      LOEKZ LIKE EKPO-LOEKZ,
      MATNR LIKE EKPO-MATNR,
      BISMT LIKE MARA-BISMT,
    END OF LS_EKPO.

* Try to get PO item
  SELECT SINGLE EBELN EBELP LOEKZ EKPO~MATNR BISMT
           INTO LS_EKPO
           FROM EKPO
           JOIN MARA
             ON MARA~MATNR EQ EKPO~MATNR
          WHERE EBELN EQ SV_EBELN_NEW
            AND EBELP EQ SV_EBELP_NEW.
* If failed
  IF SY-SUBRC NE 0.
*   PO item does not exist
    MESSAGE ID 'YSE_SALES_LOG' TYPE 'E' NUMBER '201' WITH SV_EBELP_NEW SV_EBELN_NEW IT_2BUPDATED-EKORG IT_2BUPDATED-LIFNR.
* If item is marked for deletion
  ELSEIF LS_EKPO-LOEKZ NE SPACE.
    MESSAGE ID 'YSE_SALES_LOG' TYPE 'E' NUMBER '202' WITH SV_EBELP_NEW SV_EBELN_NEW.
* If material number doesn't correspond
  ELSEIF LS_EKPO-MATNR NE SV_IDTNR_NEW AND LS_EKPO-BISMT NE SV_IDTNR_NEW.
    MESSAGE ID 'YSE_SALES_LOG' TYPE 'E' NUMBER '220' WITH SV_IDTNR_NEW LS_EKPO-MATNR.
  ENDIF.

ENDFORM.                    " S9002_VERIFY_INPUT

*&---------------------------------------------------------------------*
*&      Form  S9002_CHAN_IDOC
*&---------------------------------------------------------------------*
FORM S9002_CHAN_IDOC  TABLES   PT_EDIDD STRUCTURE EDIDD.

  DATA:
    LS_E1EDK01 TYPE E1EDK01,
    LS_E1EDK02 TYPE E1EDK02,
    LS_E1EDP01 TYPE E1EDP01,
    LS_E1EDP02 TYPE E1EDP02,
    LS_E1EDP19 TYPE E1EDP19.

  LOOP AT PT_EDIDD.

    CASE PT_EDIDD-SEGNAM.
      WHEN 'E1EDK01'.
        LS_E1EDK01 = PT_EDIDD-SDATA.
        LS_E1EDK01-BELNR = SV_EBELN_NEW.
        PT_EDIDD-SDATA = LS_E1EDK01.
      WHEN 'E1EDK02'.
        LS_E1EDK02 = PT_EDIDD-SDATA.
        LS_E1EDK02-BELNR = SV_EBELN_NEW.
        PT_EDIDD-SDATA = LS_E1EDK02.
      WHEN 'E1EDP01'.
        LS_E1EDP01 = PT_EDIDD-SDATA.
        LS_E1EDP01-POSEX = SV_EBELP_NEW.
        PT_EDIDD-SDATA = LS_E1EDP01.
      WHEN 'E1EDP02'.
        LS_E1EDP02 = PT_EDIDD-SDATA.
        IF LS_E1EDP02-QUALF NE '001'.  CONTINUE. ENDIF.
        LS_E1EDP02-BELNR = SV_EBELN_NEW.
        LS_E1EDP02-ZEILE = SV_EBELP_NEW.
        PT_EDIDD-SDATA = LS_E1EDP02.
      WHEN 'E1EDP19'.
        LS_E1EDP19 = PT_EDIDD-SDATA.
        LS_E1EDP19-IDTNR = SV_IDTNR_NEW.
        PT_EDIDD-SDATA = LS_E1EDP19.
      WHEN OTHERS.
        CONTINUE.
    ENDCASE.
    MODIFY PT_EDIDD.
  ENDLOOP.

ENDFORM.                    " S9002_CHAN_IDOC

*&---------------------------------------------------------------------*
*&      Form  S9002_CLEANUP_PROCESSED_ENTRY
*&---------------------------------------------------------------------*
FORM S9002_CLEANUP_PROCESSED_ENTRY .

  DATA:
    LV_TABIX LIKE SY-TABIX.

* Delete entries from DB table for this PO combination
  DELETE FROM YSE_VISA_AB_ERR
        WHERE EBELN EQ IT_2BUPDATED-EBELN
          AND EBELP EQ IT_2BUPDATED-EBELP.
* Delete entries from error internal table for this PO combination
  DELETE      IT_ERR
        WHERE EBELN EQ IT_2BUPDATED-EBELN
          AND EBELP EQ IT_2BUPDATED-EBELP.
* Delete entry from overview internal table
  DELETE      IT_OVERVIEW
        WHERE EBELN EQ IT_2BUPDATED-EBELN
          AND EBELP EQ IT_2BUPDATED-EBELP.
* Delete entries from 2Bupdated
  DELETE      IT_2BUPDATED
        WHERE EBELN EQ IT_2BUPDATED-EBELN
          AND EBELP EQ IT_2BUPDATED-EBELP.

* Reposition in the list of entries to be processed
* If there was only one entry
  IF SV_LINES EQ 1.
*   Go back to overview
    MESSAGE ID 'YSE_SALES_LOG' TYPE 'S' NUMBER '058'.
    LEAVE TO SCREEN 0.
* If the processed entry was the last one
  ELSEIF SV_LINE EQ SV_LINES.
*   Read the previous entry
    LV_TABIX = SV_LINE - 1.
    READ TABLE IT_2BUPDATED INDEX LV_TABIX.
* Other cases read the entry which came in place of the one which is just deleted
  ELSE.
    READ TABLE IT_2BUPDATED INDEX SV_LINE.
  ENDIF.

  CLEAR: SV_EBELN_NEW, SV_EBELP_NEW, SV_IDTNR_NEW.

ENDFORM.                    " S9002_CLEANUP_PROCESSED_ENTRY

*&---------------------------------------------------------------------*
*&      Form  S9002_UPDATE_PO_MAPPING
*&---------------------------------------------------------------------*
FORM S9002_UPDATE_PO_MAPPING .

  TABLES:
    YSE_PO_MAP_HIS.

  DATA:
    LV_UPDKZ      TYPE C,
    LV_ANSWER     TYPE C,
    LV_STRING     TYPE STRING,
    LWA_POHEADER  TYPE BAPIMEPOHEADER,
    LWA_POHEADERX TYPE BAPIMEPOHEADERX,
    BEGIN OF LWA_EKPO,
      EBELN       LIKE EKPO-EBELN,
      EBELP       LIKE EKPO-EBELP,
      ETENR       LIKE EKET-ETENR,
      BUKRS       LIKE EKKO-BUKRS,
      IHREZ       LIKE EKKO-IHREZ,
      LICHA       LIKE EKET-LICHA,
    END OF LWA_EKPO,
    LT_POITEM     TYPE BAPIMEPOITEM  OCCURS 0 WITH HEADER LINE,
    LT_POITEMX    TYPE BAPIMEPOITEMX OCCURS 0 WITH HEADER LINE,
    LT_RETURN     TYPE BAPIRET2 OCCURS 0 WITH HEADER LINE.

* Assume update should be done
  LV_UPDKZ = GC_CHAR_X.
* Get current values for the reference (mapping) fields
  SELECT SINGLE EKPO~EBELN EKPO~EBELP ETENR EKKO~BUKRS IHREZ LICHA
           INTO LWA_EKPO
           FROM EKKO
           JOIN EKPO
             ON EKPO~EBELN EQ EKKO~EBELN
           JOIN EKET
             ON EKET~EBELN EQ EKPO~EBELN
            AND EKET~EBELP EQ EKPO~EBELP
          WHERE EKPO~EBELN EQ SV_EBELN_NEW
            AND EKPO~EBELP EQ SV_EBELP_NEW.
* Above select should never fail since the combination SV_EBELN_NEW / SV_EBELP
* has already been checked by routine S9002_VERIFY_INPUT
* Add leading zeroes to found item reference (batch number)
  DATA: LV_LICHA TYPE EBELP.
* Alpha Conversion is automatically executed on IT_2BUPDATED-EBELP, also do this
* on LWA_EKPO-LICHA for further processing
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT         = LWA_EKPO-LICHA
    IMPORTING
      OUTPUT        = LV_LICHA.

* If reference fields already have a value which are actually different from what comes from the idoc
  IF     ( NOT LWA_EKPO-IHREZ IS INITIAL AND LWA_EKPO-IHREZ NE IT_2BUPDATED-EBELN )
      OR ( NOT LV_LICHA       IS INITIAL AND LV_LICHA       NE IT_2BUPDATED-EBELP ).

*   Build question
    CONCATENATE 'Please confirm that the mapping for PO Item'(003)
                SV_EBELN_NEW ' / ' SV_EBELP_NEW
                'should be changed from'(004)
                LWA_EKPO-IHREZ '/' LV_LICHA
                'into'(005)
                IT_2BUPDATED-EBELN '/' IT_2BUPDATED-EBELP
                INTO LV_STRING SEPARATED BY SPACE.
*   Initialize field to capture user response
    CLEAR LV_ANSWER.
*   Ask user to confirm overwrite of the mapping
    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        TITLEBAR                    = 'Please confirm'
        TEXT_QUESTION               = LV_STRING
        DEFAULT_BUTTON              = '2'
        DISPLAY_CANCEL_BUTTON       = SPACE
        POPUP_TYPE                  = 'ICON_MESSAGE_WARNING'
      IMPORTING
        ANSWER                      = LV_ANSWER
*     TABLES
*       PARAMETER                   =
      EXCEPTIONS
        TEXT_NOT_FOUND              = 1
        OTHERS                      = 2.
*   If something went wrong or user did not reply with "yes"
    IF LV_ANSWER <> 1.
*     Clear the UPDKZ field
      CLEAR LV_UPDKZ.
    ENDIF.
  ENDIF.

* If update should be done
  IF LV_UPDKZ NE SPACE.

*   Save old data in YSE_PO_MAP_HIS
    CLEAR YSE_PO_MAP_HIS.
    YSE_PO_MAP_HIS-EBELN = SV_EBELN_NEW.
    YSE_PO_MAP_HIS-EBELP = SV_EBELP_NEW.
    YSE_PO_MAP_HIS-ETENR = 0.
    SELECT MAX( ETENR )
           FROM YSE_PO_MAP_HIS
           INTO YSE_PO_MAP_HIS-ETENR
          WHERE EBELN EQ YSE_PO_MAP_HIS-EBELN
            AND EBELP EQ YSE_PO_MAP_HIS-EBELP.
    YSE_PO_MAP_HIS-ETENR     = YSE_PO_MAP_HIS-ETENR + 1.
    YSE_PO_MAP_HIS-CREDAT    = SY-DATUM.
    YSE_PO_MAP_HIS-CRETIM    = SY-UZEIT.
    YSE_PO_MAP_HIS-EKORG     = IT_2BUPDATED-EKORG.
    YSE_PO_MAP_HIS-BUKRS     = LWA_EKPO-BUKRS.
    YSE_PO_MAP_HIS-LIFNR     = IT_2BUPDATED-LIFNR.
    YSE_PO_MAP_HIS-IHREZ     = LWA_EKPO-IHREZ.
    YSE_PO_MAP_HIS-LICHA     = LV_LICHA.
    YSE_PO_MAP_HIS-IHREZ_NEW = IT_2BUPDATED-EBELN.
    YSE_PO_MAP_HIS-LICHA_NEW = IT_2BUPDATED-EBELP.
    INSERT YSE_PO_MAP_HIS.

*   Fill in IHREZ and set flag
    LWA_POHEADER-REF_1    = IT_2BUPDATED-EBELN.
    LWA_POHEADERX-REF_1   = GC_CHAR_X.
*   Define item to be updated
    LT_POITEM-PO_ITEM     = SV_EBELP_NEW.
    LT_POITEMX-PO_ITEM    = SV_EBELP_NEW.
*   Fill in Vendor batch and set flag
    LT_POITEM-VENDRBATCH  = IT_2BUPDATED-EBELP.
    LT_POITEMX-VENDRBATCH = 'X'.
*   Append item and it's flags
    APPEND: LT_POITEM, LT_POITEMX.
*   Have the update done
    CALL FUNCTION 'BAPI_PO_CHANGE'
      EXPORTING
        PURCHASEORDER                = SV_EBELN_NEW
        POHEADER                     = LWA_POHEADER
        POHEADERX                    = LWA_POHEADERX
      TABLES
        RETURN                       = LT_RETURN
        POITEM                       = LT_POITEM
        POITEMX                      = LT_POITEMX.
*   Check no error occured
    READ TABLE LT_RETURN WITH KEY TYPE = 'E'.
    IF SY-SUBRC EQ 0.
      MESSAGE ID 'YSE_SALES_LOG' TYPE 'I' NUMBER '060'.
    ENDIF.
*   Clean up the return table
    CLEAR: LT_RETURN, LT_RETURN[].
*   Commit the PO update
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT          = 'X'
      IMPORTING
        RETURN        = LT_RETURN.
*   Check no error occured
    READ TABLE LT_RETURN WITH KEY TYPE = 'E'.
    IF SY-SUBRC EQ 0.
      MESSAGE ID 'YSE_SALES_LOG' TYPE 'I' NUMBER '060'.
    ENDIF.
  ENDIF.

ENDFORM.                    " S9002_UPDATE_PO_MAPPING
