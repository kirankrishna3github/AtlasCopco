*&---------------------------------------------------------------------*
*&  Include           RF_PRD_CL_SCHED
*&---------------------------------------------------------------------*

* declarations for SCMA

* global data
data:
*      g_s_log            type bal_s_log,
      g_log_handle       type balloghndl,
*      g_dummy            type c,
      g_scma             type c,
      g_e_msg            type  boolean.

* priority class
constants:
  probclass_very_high type bal_s_msg-probclass value '1',
  probclass_high      type bal_s_msg-probclass value '2',
  probclass_medium    type bal_s_msg-probclass value '3',
  probclass_low       type bal_s_msg-probclass value '4',
  probclass_none      type bal_s_msg-probclass value ' '.

* message types
constants:
  msgty_x             type sy-msgty            value 'X',
  msgty_a             type sy-msgty            value 'A',
  msgty_e             type sy-msgty            value 'E',
  msgty_w             type sy-msgty            value 'W',
  msgty_i             type sy-msgty            value 'I',
  msgty_s             type sy-msgty            value 'S',
  msgty_none          type sy-msgty            value ' '.

* data: t_spono like schedman_spool .
* data: gt_spono like t_spono occurs 0.

include rkasmawf.   "necessary for Workflow


*&---------------------------------------------------------------------*
*&      Form  SCM_INIT
*&---------------------------------------------------------------------*
form scm_init.

  perform schedman_check.
  if not g_scma is initial.
    perform log_almsg_init.
    perform schedman_start_stop using 'START'.
  endif.

endform.


*&---------------------------------------------------------------------*
*&      Form  SCM_CLOSE
*&---------------------------------------------------------------------*
form scm_close.

  if not g_scma is initial.
    perform log_almsg.
    perform schedman_start_stop using 'STOP'.
  endif.

endform.


*&---------------------------------------------------------------------*
*&      Form  SCHEDMAN_CHECK
*&---------------------------------------------------------------------*
form schedman_check.

  call function 'FUNCTION_EXISTS'
    exporting
      funcname                 = 'SCMA_JOB_STARTED_FROM_SCMA'
    exceptions
      function_not_exist       = 1
      others                   = 2.

  if sy-subrc = 0.
    call function 'SCMA_JOB_STARTED_FROM_SCMA'
      exporting
        before_init = 'X'
      importing
        e_scma = g_scma.
  endif.

  g_scma = 'X'.

endform.


*&---------------------------------------------------------------------*
*&       FORM schedman_start_stop                                      *
*&---------------------------------------------------------------------*
form schedman_start_stop using icommand type c.

  statics: ls_key_static like schedman_key.

*  data: gs_key      like schedman_key.

*  data: ld_worklist_flag(1).
  data: ls_detail     like schedman_detail_user.
  data: lt_selkrit    like schedman_selkrit occurs 0 with header line.
  data: lt_param      like schedman_selkrit occurs 0 with header line.
  data: ls_witem      like scma_witem.
  data: ls_scma_event like scma_event.
*  data: ls_ext        like schedman_ext.
  data: ls_message    like schedman_message,
*        ld_objects    like smmain-nr_of_objects,
        ld_aplstat    like smmain-aplstat.

  data: lt_log_handle type  bal_t_logh.

include schedman_events.   " events for workflow

* muss in scmatasks
 ls_detail-repid       = sy-repid.
 ls_detail-variante    = sy-slset.
* ls_detail-activity    = '16'.
 ls_detail-application = 'FI-GL'.

* parameters
  data entry_no type i.
  entry_no = 1.

  lt_param-sign      = 'I'.
  lt_param-optio     = 'EQ'.
  lt_param-entry     = entry_no.

  clear lt_param.
  lt_param-structure = 'T001B'.
  lt_param-field     = 'BUKRS'.
  lt_param-low       = cocovar.
  lt_param-high      = cocovar.
  append lt_param.
  add 1 to entry_no.

  clear lt_param.
  lt_param-structure = 'T001B'.
  lt_param-field     = 'TOYE1'.
  lt_param-low       = fyear.
  lt_param-high      = fyear.
  append lt_param.
  add 1 to entry_no.

  clear lt_param.
  lt_param-structure = 'T001B'.
  lt_param-field     = 'TOPE1'.
  lt_param-low       = prd1_to.
  lt_param-high      = prd1_to.
  append lt_param.
  add 1 to entry_no.

  clear lt_param.
  lt_param-structure = 'T001B'.
  lt_param-field     = 'TOPE2'.
  lt_param-low       = prd2_to.
  lt_param-high      = prd2_to.
  append lt_param.
  add 1 to entry_no.

  clear lt_param.
  lt_param-structure = 'T001B'.
  lt_param-field     = 'MKOAR'.
  lt_param-low       = actyp.
  lt_param-high      = actyp.
  append lt_param.
  add 1 to entry_no.


  ls_witem-wf_witem = wf_witem.
  ls_witem-wf_wlist = wf_wlist.

  ls_scma_event-wf_witem = wf_witem.
  ls_scma_event-wf_okey  = wf_okey.

  if g_e_msg = space.
    ls_scma_event-wf_event = cs_wf_events-finished.
  else.
    ls_scma_event-wf_event = cs_wf_events-error.
  endif.

  if icommand = 'START'.
    call function 'KPEP_MONI_INIT_RECORD'
         exporting
              ls_detail        = ls_detail
              ls_witem         = ls_witem
         importing
              ls_key           = ls_key_static
         tables
              lt_selkrit       = lt_selkrit
              lt_param         = lt_param.

  elseif icommand = 'STOP'.
    ld_aplstat  = '0'.
    if g_e_msg = 'X'.
      ld_aplstat  = '4'.    "set status for schedman
      if sy-batch = 'X'.
         message s348(sy).
      endif.
    endif. "error occurred
    ls_message-log_handle = g_log_handle.

* save messages
  append g_log_handle to lt_log_handle.
  call function 'BAL_DB_SAVE'
       exporting
            i_save_all       = ' '
            i_t_log_handle   = lt_log_handle
       exceptions
            log_not_found    = 1
            save_not_allowed = 2
            numbering_error  = 3
            others           = 4.

  if sy-subrc = 2.
    message id sy-msgid type sy-msgty number sy-msgno
            with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  elseif sy-subrc > 0.
    message id sy-msgid type sy-msgty number sy-msgno
            with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  endif.

    call function 'KPEP_MONI_CLOSE_RECORD'
         exporting
              ls_key        = ls_key_static
              ls_message    = ls_message
              ls_scma_event = ls_scma_event
         changing
              ld_aplstat    = ld_aplstat
        exceptions
*            NO_ID_GIVEN    = 1
             others         = 0.

  endif.
  commit work.

endform.


*&--------------------------------------------------------------------*
*&      FORM LOG_ALMSG_init                                           *
*&--------------------------------------------------------------------*
form log_almsg_init.
  data: l_s_log type bal_s_log.

  clear l_s_log.
  l_s_log-aldate = sy-datlo.
  l_s_log-altime = sy-timlo.
  l_s_log-aluser = sy-uname.
  l_s_log-alprog = sy-repid.
  l_s_log-object = 'FASTCLOSE'.
  l_s_log-subobject = 'FASTCLOSE'.

  call function 'BAL_LOG_CREATE'
    exporting
      i_s_log                 = l_s_log
    importing
      e_log_handle            = g_log_handle
    exceptions
      log_header_inconsistent = 1
      others                  = 2.
  if sy-subrc <> 0.
    message id sy-msgid type sy-msgty number sy-msgno
            with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  endif.

endform.                    "LOG_ALMSG_init


*&---------------------------------------------------------------------*
*&       FORM log_almsg_var                                            *
*&---------------------------------------------------------------------*
form log_almsg_var  using i_msgid
                          i_msgty
                          i_msgno
                          i_msgv1
                          i_msgv2
                          i_msgv3
                          i_msgv4.  "#EC *

  check not g_scma is initial.


  sy-msgid = i_msgid.
  sy-msgty = i_msgty.
  sy-msgno = i_msgno.
  sy-msgv1 = i_msgv1.
  sy-msgv2 = i_msgv2.
  sy-msgv3 = i_msgv3.
  sy-msgv4 = i_msgv4.

  perform log_almsg.

  clear sy-msgid.
  clear sy-msgty.
  clear sy-msgno.
  clear sy-msgv1.
  clear sy-msgv2.
  clear sy-msgv3.
  clear sy-msgv4.

endform.


*&---------------------------------------------------------------------*
*&       FORM log_almsg                                                *
*&---------------------------------------------------------------------*
form log_almsg.

  data:  i_probclass type bal_s_msg-probclass,
         l_s_msg     type bal_s_msg.
* entry check
  check sy-msgid ne space.

* define data of message for Application Log
  l_s_msg-msgty     = sy-msgty.
  l_s_msg-msgid     = sy-msgid.
  l_s_msg-msgno     = sy-msgno.
  l_s_msg-msgv1     = sy-msgv1.
  l_s_msg-msgv2     = sy-msgv2.
  l_s_msg-msgv3     = sy-msgv3.
  l_s_msg-msgv4     = sy-msgv4.

  case sy-msgty.
    when msgty_x.
      i_probclass = probclass_very_high.  g_e_msg = 'X'.
    when msgty_a.
      i_probclass = probclass_very_high.  g_e_msg = 'X'.
    when msgty_e.
      i_probclass = probclass_high.       g_e_msg = 'X'.
    when msgty_w.
      i_probclass = probclass_medium.
    when msgty_i.
      i_probclass = probclass_low.
    when msgty_s.
      i_probclass = probclass_low.
    when msgty_none.
      i_probclass = probclass_none.
  endcase.

* bis hier tempor#r
  l_s_msg-probclass = i_probclass.

* add this message to log file
  call function 'BAL_LOG_MSG_ADD'
    exporting
      i_log_handle              = g_log_handle
      i_s_msg                   = l_s_msg
*   IMPORTING
*     E_S_MSG_HANDLE            =
*     E_MSG_WAS_LOGGED          =
*     E_MSG_WAS_DISPLAYED       =
    exceptions
      log_not_found             = 1
*     MSG_INCONSISTENT          = 2
*     LOG_IS_FULL               = 3
      others                    = 4.

  if sy-subrc <> 0.
    message id sy-msgid type sy-msgty number sy-msgno
            with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  endif.

endform.                    "LOG_almsg
