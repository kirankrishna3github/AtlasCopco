***********************************************************************
*                                                                      *
*   Report for the access of condition records.                        *
*                                                                      *
*   Usage        : A                                                   *
*   Table        : 954                                                 *
*   Physical Tab : A954                                                *
*                                                                      *
*   Report-Generation from 02.02.2015 13:13:50                         *
*                                                                      *
*   Please do not call this coding directly.  You must first call      *
*   the function RV_T681_SELECT_AND_GENERATE to insure that the report *
*   exists and/or is up-to-date.                                       *
*                                                                      *
*   Do not change this report; your changes will be lost !             *
*                                                                      *
***********************************************************************
*------------------------------------------------------------------*
* Program ID           : YSE_RV13A954                              *
* Program Title        : Fetch the ovrlaping cond recs FROM A954   *
* Author               : Dashmantha                                *
* Date                 : 19/04/2016                                *
* Change Request Number: CR3516                                    *
* Description          : Fetch and display the overlaping          *
* condition records for the give selection cloning RV13A954        *
*------------------------------------------------------------------*
* Copied From         : RV13A954                                   *
* Title               : Condition Master Data Check                *
* Other Related obj   :                                            *
*------------------------------------------------------------------*
* Change History Log                                               *
*------------------------------------------------------------------*
*Mod. no.|  Date    | Name           | Transport Nr  | Chg Ref. #  *
*------------------------------------------------------------------*
*        |          |                |               |             *
*------------------------------------------------------------------*
REPORT YSE_RV13A954 MESSAGE-ID VK.

TYPE-POOLS CXTAB.                      "Table Control

* Konditiontabelle und Kommunikationsblock                             *
TABLES: A954, *A954,
        KOMG, *KOMG,
        RV13A,
        T180,
        T185F,
        T185V,
        RSTABLE,
        RSSUBINFO.

* Include f¨¹r variable Schl¨¹ssel                                       *
INCLUDE YSE_VAKEDATA.
*INCLUDE VAKEDATA.
* Interne Tabelle f¨¹r Datenbankver#nderung                             *
DATA: BEGIN OF A954_DB OCCURS 100.
       INCLUDE STRUCTURE A954.
DATA: END OF A954_DB.

* Feldsymbol f¨¹r Daten im Character-Format                             *
FIELD-SYMBOLS: <A954>  TYPE C,
               <*A954> TYPE C.

* Feldleiste f¨¹r den Sperrschl¨¹ssel                                    *
DATA: BEGIN OF ENQUEUE,
        MANDT LIKE A954-MANDT,
        KAPPL LIKE A954-KAPPL,
        KSCHL LIKE A954-KSCHL,
        VKORG LIKE A954-VKORG,
        SPART LIKE A954-SPART,
        MATNR LIKE A954-MATNR,
      END OF ENQUEUE.
FIELD-SYMBOLS <ENQUEUE> TYPE C.

* Name und Program f¨¹r die Verarbeitung der gelesenen S#tze            *
DATA: NAME_OF_FORM(30),                "Name Verarbeitungsroutine
      NAME_OF_PROGRAM LIKE SY-REPID,   "Program Verarbeitungsroutine
      RETURNCODE      LIKE SY-SUBRC,  "Returncode Verarbeitungsroutin
      ENTRIES TYPE P,                  "Anzahl Eintr#ge pro Tabelle
      DUMMY.                           "Dummy fuer SY-TABIX

* Konstanten                                                           *
DATA: NO      VALUE ' ',
      YES     VALUE 'X',
      ONLI(4) VALUE 'ONLI'.            "Funktionscode selektieren
* CUA                                                                  *
DATA: BEGIN OF AUSSCHLUSS OCCURS 3,
        FCODE(4),
      END OF AUSSCHLUSS,
      TITEL(3),
      ENQ_KEY like RSTABLE-VARKEY.    "better: mandt+kschl+vakey

* Selektionsparameter setzen                                           *
* Applikation                                                          *
PARAMETERS KAPPL LIKE A954-KAPPL NO-DISPLAY.
* Konditionsart                                                        *
PARAMETERS KSCHL LIKE A954-KSCHL NO-DISPLAY.

* Schluesselfelder                                                     *
* Sales Organization                                                   *
DATA TEXT011(29).
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(30) TEXT-011 FOR FIELD F001.
SELECTION-SCREEN POSITION 35.
 PARAMETERS F001 LIKE A954-VKORG OBLIGATORY
   VISIBLE LENGTH 18
   MEMORY ID VKO.
SELECTION-SCREEN POSITION 54.
PARAMETERS F001T(29) LOWER CASE
           DEFAULT TEXT011 MODIF ID NOD.
SELECTION-SCREEN END OF LINE.

* Division                                                             *
DATA TEXT012(29).
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(30) TEXT-012 FOR FIELD F002.
SELECTION-SCREEN POSITION 35.
 PARAMETERS F002 LIKE A954-SPART OBLIGATORY
   VISIBLE LENGTH 18
   MEMORY ID SPA.
SELECTION-SCREEN POSITION 54.
PARAMETERS F002T(29) LOWER CASE
           DEFAULT TEXT012 MODIF ID NOD.
SELECTION-SCREEN END OF LINE.

* Material                                                             *
SELECT-OPTIONS F003 FOR A954-MATNR
MEMORY ID MAT
MATCHCODE OBJECT MAT1.

*"Selektionsdatum
SELECTION-SCREEN SKIP 1.
PARAMETER SEL_DATE LIKE RV130-DATAM
OBLIGATORY.

"Datbi ¨¹bernehmen
SELECTION-SCREEN SKIP 1.
PARAMETER DATE_AS TYPE DATE_AS MODIF ID DAS.
DATA     HIDE_DAS  TYPE C.
*eject
*----------------------------------------------------------------------
*   LOAD OF PROGRAM                                                    *
*----------------------------------------------------------------------
LOAD-OF-PROGRAM.

ASSIGN A954  TO <A954>  CASTING.
ASSIGN *A954 TO <*A954> CASTING.
*----------------------------------------------------------------------
*   INITIALIZATION                                                     *
*----------------------------------------------------------------------
INITIALIZATION.
* CUA                                                                  *
IMPORT T180-AKTYP FROM MEMORY ID 'RV_COND_MEMORY_02'.
IF T180-AKTYP NE 'H'.   "Hinzuf¨¹gen Add
HIDE_DAS = 'X'.
LOOP AT SCREEN.
CHECK SCREEN-GROUP1 = 'DAS'.
SCREEN-ACTIVE = 0.
SCREEN-INVISIBLE = 'X'.
MODIFY SCREEN.
ENDLOOP.
ENDIF.

IMPORT T185V FROM MEMORY
                     ID SD_COND_MEM_01.         "JAY

 RV13A-KVEWE = 'A'.
 RV13A-KOTABNR = '954'.

CALL FUNCTION 'RS_SUBMIT_INFO'
     IMPORTING
          P_SUBMIT_INFO = RSSUBINFO.
IF NOT RSSUBINFO-MODE_NORML IS INITIAL.
  TITEL = T185V-CTITEL.
  CALL FUNCTION 'RV_CONDITION_GET_CUA_REPO'
       EXPORTING
            PFKEY_I = 'ASELE'
            TITLE_I = TITEL
            PAR1_I  = T185V-PARA1
            PAR2_I  = T185V-PARA2
            PAR3_I  = T185V-PARA3
            PAR4_I  = T185V-PARA4
       TABLES
            EXCL_I  = AUSSCHLUSS.
  CALL FUNCTION 'RS_EXTERNAL_SELSCREEN_STATUS'
       EXPORTING
            P_FB = 'RV_CONDITION_SET_CUA_REPO'.
ENDIF.
* SPA/GPA-Parameter fuer Sales Organization                            *
   MOVE F001 TO KOMG-VKORG.
   PERFORM GET_PARAMETER(SAPMV13A) USING 'VKORG'.
   MOVE KOMG-VKORG TO F001.
* Ermitteln des Textes                                                 *
   IF NOT KOMG-VKORG IS INITIAL.
     PERFORM FILL_DEFAULT(SAPMV13A) USING
     'VKORG' NO F001T DUMMY.
   ENDIF.
* SPA/GPA-Parameter fuer Division                                      *
   MOVE F002 TO KOMG-SPART.
   PERFORM GET_PARAMETER(SAPMV13A) USING 'SPART'.
   MOVE KOMG-SPART TO F002.
* Ermitteln des Textes                                                 *
   IF NOT KOMG-SPART IS INITIAL.
     PERFORM FILL_DEFAULT(SAPMV13A) USING
     'SPART' NO F002T DUMMY.
   ENDIF.

*eject

*----------------------------------------------------------------------
*   AT SELECTION-SCREEN  OUTPUT                                        *
*----------------------------------------------------------------------
AT SELECTION-SCREEN OUTPUT.
IF HIDE_DAS = 'X'.
LOOP AT SCREEN.
CHECK SCREEN-GROUP1 = 'DAS'.
SCREEN-ACTIVE = 0.
SCREEN-INVISIBLE = 'X'.
MODIFY SCREEN.
ENDLOOP.
ENDIF.

*----------------------------------------------------------------------
*   AT SELECTION-SCREEN                                                *
*----------------------------------------------------------------------
AT SELECTION-SCREEN.
* Konditionsart ¨¹bergeben                                              *
 RV13A-KSCHL = KSCHL.
 RV13A-KAPPL = KAPPL.
 A954-MANDT = SY-MANDT.
 A954-KAPPL = KAPPL.
 A954-KSCHL = KSCHL.
* Feldtransport                                                        *
  MOVE F001 TO KOMG-VKORG.
  MOVE F002 TO KOMG-SPART.
* Sales Organization                                                   *
 PERFORM FELD_PRUEFUNG(SAPMV13A) USING
 'VKORG' YES RETURNCODE.
* Ermitteln des Textes                                                 *
 IF SY-UCOMM NE ONLI.
   PERFORM FILL_DEFAULT(SAPMV13A) USING
   'VKORG' NO F001T DUMMY.
 ENDIF.
* Division                                                             *
 PERFORM FELD_PRUEFUNG(SAPMV13A) USING
 'SPART' YES RETURNCODE.
* Ermitteln des Textes                                                 *
 IF SY-UCOMM NE ONLI.
   PERFORM FILL_DEFAULT(SAPMV13A) USING
   'SPART' NO F002T DUMMY.
 ENDIF.
 "Selektionsdatum ins Memory schicken
 SET PARAMETER ID '1)9' FIELD SEL_DATE.
*eject
*----------------------------------------------------------------------
*   START-OF-SELECTION                                                 *
*----------------------------------------------------------------------
* Selektion der Konditionssaetze                                       *
START-OF-SELECTION.
* F¨¹llen der #beragbe-Parameter                                        *
* Sales Organization                                                   *
MOVE F001 TO KOMG-VKORG.
* Division                                                             *
MOVE F002 TO KOMG-SPART.
VAKE-DATAB = SEL_DATE.
* Selektionsparameter im Memory sichern                                *
 EXPORT
   F001
   F002
   F003
   SEL_DATE
   TO MEMORY ID 'RV_COND_MEMORY_01'.
* Steuerungsdaten im Memory sichern                                    *
 EXPORT
   T185F
   VAKE-DATAB
   KOMG
   UNCHGDBI  FROM  DATE_AS
   TO MEMORY ID 'RV_COND_MEMORY_02'.
 LEAVE.

*----------------------------------------------------------------------
*       FORM ACCESS                                                    *
*----------------------------------------------------------------------
*       Dieser Routine liest mehrere Saetze aus der Tabelle A954.      *
*----------------------------------------------------------------------
*  -->  FORMNAME    : Form zur Bearbeitung des gefunden Satzes         *
*  -->  PROGRAMNAME : Programm zur obigen Form-Routine                 *
*       ACCESS_TYPE : Zugriffsmethode                                  *
* <--   VAKE        : Kommunikationsblock fuer die gefunden Saetze     *
*       SUBRC       : 0 - Read Okay                                    *
*                     4 - no record found                              *
*----------------------------------------------------------------------
FORM ACCESS USING FORMNAME TYPE C
                  PROGRAMNAME TYPE C
                  ACCESS_TYPE TYPE CHAR1
                  SUBRC LIKE SY-SUBRC.
* Fuellen des Schluessels                                              *
 CASE ACCESS_TYPE.
* Key ist in KOMG                                                      *
   WHEN '1'.
     MOVE-CORRESPONDING KOMG TO A954.
     A954-KSCHL = VAKE-KSCHL.
     A954-KAPPL = VAKE-KAPPL.
    *A954 = A954.
* Untere Grenze in KOMG, obere Grenze ist in *KOMG                     *
   WHEN '2'.
     MOVE-CORRESPONDING  KOMG TO  A954.
     A954-KSCHL = VAKE-KSCHL.
     A954-KAPPL = VAKE-KAPPL.
     MOVE-CORRESPONDING *KOMG TO *A954.
     *A954-KSCHL = *VAKE-KSCHL.
     *A954-KAPPL = *VAKE-KAPPL.
* Key ist in VAKE.                                                     *
   WHEN '3'.
     MOVE-CORRESPONDING VAKE TO A954.
     MOVE VAKE-VAKEY TO <A954>+9(24).
    *A954 = A954.
* Untere Grenze in VAKE, obere Grenze ist in *VAKE                     *
   WHEN '4'.
     MOVE-CORRESPONDING VAKE TO A954.
     MOVE VAKE-VAKEY TO <A954>+9(24).
     MOVE-CORRESPONDING *VAKE TO *A954.
     MOVE *VAKE-VAKEY TO <*A954>+9(24).
 ENDCASE.
" Setzen des Datums
 *A954-DATAB = *VAKE-DATAB.
 *A954-DATBI = *VAKE-DATBI.
  A954-DATAB =  VAKE-DATAB.
  A954-DATBI =  VAKE-DATBI.
* Name und Program f¨¹r die Verarbeitungsroutine setzen                 *
 NAME_OF_FORM = FORMNAME.
 NAME_OF_PROGRAM = PROGRAMNAME.
* Lesen                                                                *
* check if the between clausal is neccessary  A954 = *A954             *
 IF A954-KAPPL = *A954-KAPPL AND
    A954-KSCHL = *A954-KSCHL AND
    A954-VKORG = *A954-VKORG AND
    A954-SPART = *A954-SPART AND
    A954-MATNR = *A954-MATNR AND
      1 = 1.
 SELECT * FROM A954 BYPASSING BUFFER
        WHERE KAPPL = A954-KAPPL
        AND   KSCHL = A954-KSCHL
        AND VKORG = A954-VKORG
        AND SPART = A954-SPART
        AND MATNR = A954-MATNR
        AND   DATBI BETWEEN A954-DATBI AND *A954-DATBI
        AND   DATAB BETWEEN A954-DATAB AND *A954-DATAB
        ORDER BY PRIMARY KEY.
* Verwendung und Tabelle setzen                                        *
   VAKE-KVEWE = 'A'.
   VAKE-KOTABNR =  '954'.
* Daten und Datum transportieren                                       *
   MOVE-CORRESPONDING A954 TO VAKE.
* Variable Schl¨¹ssel in A954                                           *
   MOVE <A954>+9(24) TO VAKE-VAKEY.
* Verarbeitungsroutine vorhanden ?                                     *
   IF NAME_OF_FORM    <> SPACE AND
      NAME_OF_PROGRAM <> SPACE.
* Aufruf der Verarbeitungsroutine                                      *
     PERFORM (NAME_OF_FORM)
             IN PROGRAM (NAME_OF_PROGRAM) USING RETURNCODE.
* Verlassen der Schleife bei Returncode 0                              *
     IF RETURNCODE = 0.
       EXIT.
     ENDIF.
   ENDIF.
 ENDSELECT.
ELSE.   " A954 is not equal to *A954
 SELECT * FROM A954 BYPASSING BUFFER
   WHERE KAPPL BETWEEN A954-KAPPL AND *A954-KAPPL
   AND   KSCHL BETWEEN A954-KSCHL AND *A954-KSCHL
   AND VKORG BETWEEN A954-VKORG
   AND *A954-VKORG
   AND SPART BETWEEN A954-SPART
   AND *A954-SPART
   AND MATNR BETWEEN A954-MATNR
   AND *A954-MATNR
   AND   DATBI BETWEEN A954-DATBI AND *A954-DATBI
   AND   DATAB BETWEEN A954-DATAB AND *A954-DATAB
   ORDER BY PRIMARY KEY.                 "#EC PORTABLE
* Verwendung und Tabelle setzen                                        *
   VAKE-KVEWE = 'A'.
   VAKE-KOTABNR =  '954'.
* Daten und Datum transportieren                                       *
   MOVE-CORRESPONDING A954 TO VAKE.
* Variable Schl¨¹ssel in A954                                           *
   MOVE <A954>+9(24) TO VAKE-VAKEY.
* Verarbeitungsroutine vorhanden ?                                     *
   IF NAME_OF_FORM    <> SPACE AND
      NAME_OF_PROGRAM <> SPACE.
* Aufruf der Verarbeitungsroutine                                      *
     PERFORM (NAME_OF_FORM)
             IN PROGRAM (NAME_OF_PROGRAM) USING RETURNCODE.
* Verlassen der Schleife bei Returncode 0                              *
     IF RETURNCODE = 0.
       EXIT.
     ENDIF.
   ENDIF.
 ENDSELECT.
ENDIF.
* Returncode setzen                                                    *
 SUBRC = SY-SUBRC.
ENDFORM.

*----------------------------------------------------------------------
*       FORM ACCESS_SINGLE                                             *
*----------------------------------------------------------------------
*       Lesen von Konditionssaetzen zu einer Struktur                  *
*----------------------------------------------------------------------
*  -->  FORMNAME    : Form zur Bearbeitung des gefunden Satzes         *
*  -->  PROGRAMNAME : Programm zur obigen Form-Routine                 *
*  -->  ACCESS_TYPE : Zugriffsmethode                                  *
* <--   VAKE        : Kommunikationsblock fuer die gefunden Saetze     *
* <--   SUBRC       : 0 - S#tze wurden gefunden                        *
*                    >0 - Kein Satz gefunden                           *
*----------------------------------------------------------------------
FORM ACCESS_SINGLE USING FORMNAME TYPE C
                         REPORTNAME TYPE C
                         ACCESS_TYPE type char1
                         SUBRC LIKE SY-SUBRC.
* Fuellen des Schluessels                                              *
 CASE ACCESS_TYPE.
* Key ist in KOMG                                                      *
   WHEN '1'.
     MOVE-CORRESPONDING KOMG TO A954.
     A954-KSCHL = VAKE-KSCHL.
     A954-KAPPL = VAKE-KAPPL.
* Key ist in VAKE.                                                     *
   WHEN '3'.
     MOVE-CORRESPONDING VAKE TO A954.
     MOVE VAKE-VAKEY TO <A954>+9(24).
 ENDCASE.
 "Setzen des Datums
 A954-DATBI = VAKE-DATBI.
 A954-DATAB = VAKE-DATAB.
 *A954-DATBI = *VAKE-DATBI.
 *A954-DATAB = *VAKE-DATAB.
* Sichern von Form- und Programm-Name                                  *
 NAME_OF_FORM    = FORMNAME.
 NAME_OF_PROGRAM = REPORTNAME.
* Lesen                                                                *
 SELECT * FROM A954 BYPASSING BUFFER
        WHERE KAPPL = A954-KAPPL
        AND   KSCHL = A954-KSCHL
        AND   VKORG = A954-VKORG
        AND   SPART = A954-SPART
        AND   MATNR = A954-MATNR
        AND   DATBI BETWEEN A954-DATBI AND *A954-DATBI
        AND   DATAB BETWEEN A954-DATAB AND *A954-DATAB
        ORDER BY PRIMARY KEY.
* Verwendung und Tabelle setzen                                        *
   VAKE-KVEWE = 'A'.
   VAKE-KOTABNR =  '954'.
* Satz transportieren                                                  *
   MOVE-CORRESPONDING A954 TO VAKE.
* Variable Daten in A954 fuellen                                       *
   MOVE <A954>+9(24) TO VAKE-VAKEY.
* Verarbeitungsroutine vorhanden ?                                     *
     IF NAME_OF_FORM    <> SPACE AND
        NAME_OF_PROGRAM <> SPACE.
* Aufruf der Verarbeitungsroutine                                      *
       PERFORM (NAME_OF_FORM)
               IN PROGRAM (NAME_OF_PROGRAM) USING RETURNCODE.
* Verlassen der Schleife bei Returncode 0                              *
       IF RETURNCODE = 0.
         EXIT.
       ENDIF.
     ENDIF.
   ENDSELECT.
* Subreturn Code setzen                                                *
   SUBRC = SY-SUBRC.
ENDFORM.

*----------------------------------------------------------------------
*       FORM ACCESS_SINGLE_USING                                       *
*----------------------------------------------------------------------
*       Lesen von Konditionssaetzen zu einer Struktur                  *
*----------------------------------------------------------------------
*  -->  FORMNAME    : Form zur Bearbeitung des gefunden Satzes         *
*  -->  PROGRAMNAME : Programm zur obigen Form-Routine                 *
*  -->  LOW_VAKE    : KEY aus VAKE                                     *
*  -->  HIGH_VAKE   : VAKE (Nur f¨¹r Datumsabgrenzung )                 *
* <--   SUBRC       : 0 - S#tze wurden gefunden                        *
*                    >0 - Kein Satz gefunden                           *
*----------------------------------------------------------------------
FORM ACCESS_SINGLE_USING USING FORMNAME TYPE C
                               REPORTNAME TYPE C
                               LOW_VAKE  STRUCTURE VAKE
                               HIGH_VAKE STRUCTURE VAKE
                               SUBRC LIKE SY-SUBRC.
* F¨¹llen des Schl¨¹ssels                                                *
 MOVE-CORRESPONDING LOW_VAKE TO A954.
 MOVE LOW_VAKE-VAKEY TO <A954>+9(24).
* Sichern von Form- und Programm-Name                                  *
 NAME_OF_FORM    = FORMNAME.
 NAME_OF_PROGRAM = REPORTNAME.
* Lesen                                                                *
 SELECT * FROM A954 BYPASSING BUFFER
        WHERE KAPPL = A954-KAPPL
        AND   KSCHL = A954-KSCHL
        AND   VKORG = A954-VKORG
        AND   SPART = A954-SPART
        AND   MATNR = A954-MATNR
        AND   DATBI BETWEEN LOW_VAKE-DATBI AND HIGH_VAKE-DATBI
        AND   DATAB BETWEEN LOW_VAKE-DATAB AND HIGH_VAKE-DATAB
        ORDER BY PRIMARY KEY.
* Verwendung und Tabelle setzen                                        *
   VAKE-KVEWE = 'A'.
   VAKE-KOTABNR =  '954'.
* Satz transportieren                                                  *
   MOVE-CORRESPONDING A954 TO VAKE.
* Variable Daten in A954 fuellen                                       *
   MOVE <A954>+9(24) TO VAKE-VAKEY.
* Verarbeitungsroutine vorhanden ?                                     *
   IF NAME_OF_FORM    <> SPACE AND
      NAME_OF_PROGRAM <> SPACE.
* Aufruf der Verarbeitungsroutine                                      *
     PERFORM (NAME_OF_FORM)
             IN PROGRAM (NAME_OF_PROGRAM) USING VAKE RETURNCODE.
* Verlassen der Schleife bei Returncode 0                              *
     IF RETURNCODE = 0.
       EXIT.
     ENDIF.
   ENDIF.
 ENDSELECT.
* Subreturn Code setzen                                                *
 SUBRC = SY-SUBRC.
ENDFORM.

*------------------------------------------------------------------
*       FORM ACCESS_SINGLE_USING_KNUMH                                 *
*------------------------------------------------------------------
*       Lesen von Konditionssaetzen zu einer Struktur                  *
*                                                                      *
* --->  FORMNAME    : Form zur Bearbeitung des gefunden Satzes         *
* --->  PROGRAMNAME : Programm zur obigen Form-Routine                 *
* --->  LOW_VAKE    : KEY aus VAKE                                     *
* --->  HIGH_VAKE   : VAKE (Nur f¨¹r Datumsabgrenzung )                 *
* <---  SUBRC       : 0 - S#tze wurden gefunden                        *
*                    >0 - Kein Satz gefunden                           *
*------------------------------------------------------------------
FORM ACCESS_SINGLE_USING_KNUMH USING
                               FORMNAME TYPE C
                               REPORTNAME TYPE C
                               LOW_VAKE  STRUCTURE VAKE
                               HIGH_VAKE STRUCTURE VAKE
                               SUBRC LIKE SY-SUBRC.
* F¨¹llen des Schl¨¹ssels                                                *
 MOVE-CORRESPONDING LOW_VAKE TO A954.
 MOVE LOW_VAKE-VAKEY TO <A954>+9(24).
* Sichern von Form- und Programm-Name                                  *
 NAME_OF_FORM    = FORMNAME.
 NAME_OF_PROGRAM = REPORTNAME.
* Lesen                                                                *
 SELECT * FROM A954 BYPASSING BUFFER
        WHERE KAPPL = A954-KAPPL
        AND   KSCHL = A954-KSCHL
        AND   VKORG = A954-VKORG
        AND   SPART = A954-SPART
        AND   MATNR = A954-MATNR
        AND   DATBI BETWEEN LOW_VAKE-DATBI AND HIGH_VAKE-DATBI
        AND   DATAB BETWEEN LOW_VAKE-DATAB AND HIGH_VAKE-DATAB
        AND   KNUMH  = A954-KNUMH
        ORDER BY PRIMARY KEY.
* Verwendung und Tabelle setzen                                        *
   VAKE-KVEWE = 'A'.
   VAKE-KOTABNR =  '954'.
* Satz transportieren                                                  *
   MOVE-CORRESPONDING A954 TO VAKE.
* Variable Daten in A954 fuellen                                       *
   MOVE <A954>+9(24) TO VAKE-VAKEY.
* Verarbeitungsroutine vorhanden ?                                     *
   IF NAME_OF_FORM    <> SPACE AND
      NAME_OF_PROGRAM <> SPACE.
* Aufruf der Verarbeitungsroutine                                      *
     PERFORM (NAME_OF_FORM)
             IN PROGRAM (NAME_OF_PROGRAM) USING VAKE RETURNCODE.
* Verlassen der Schleife bei Returncode 0                              *
     IF RETURNCODE = 0.
       EXIT.
     ENDIF.
   ENDIF.
 ENDSELECT.
* Subreturn Code setzen                                                *
 SUBRC = SY-SUBRC.
ENDFORM.

*----------------------------------------------------------------------
*       FORM ACCESS_USING                                              *
*----------------------------------------------------------------------
*       Dieser Routine liest mehrere Saetze aus der Tabelle A954.      *
*       Alle Kriterien werden mit Using ¨¹bergeben.                     *
*----------------------------------------------------------------------
*  -->  FORMNAME    : Form zur Bearbeitung des gefunden Satzes         *
*  -->  PROGRAMNAME : Programm zur obigen Form-Routine                 *
*  -->  LOW_VAKE    : KEY aus VAKE                                     *
*  -->  HIGH_VAKE   : KEY aus Vake                   )                 *
* <--   SUBRC       : 0 - Read Okay                                    *
*                     4 - no record found                              *
*----------------------------------------------------------------------
FORM ACCESS_USING USING FORMNAME TYPE C
                        PROGRAMNAME TYPE C
                        LOW_VAKE  STRUCTURE VAKE
                        HIGH_VAKE STRUCTURE VAKE
                        SUBRC LIKE SY-SUBRC
                        PA_VKORG TYPE VKORG.
  F001 = PA_VKORG.
* Fuellen des Schluessels                                              *
* Untere Grenze in LOW_VAKE, obere Grenze ist in HIGH_VAKE             *
  MOVE-CORRESPONDING LOW_VAKE TO A954.
  MOVE LOW_VAKE-VAKEY TO <A954>+9(24).
  MOVE-CORRESPONDING HIGH_VAKE TO *A954.
  MOVE HIGH_VAKE-VAKEY TO <*A954>+9(24).
* Name und Program f¨¹r die Verarbeitungsroutine setzen                 *
  NAME_OF_FORM = FORMNAME.
  NAME_OF_PROGRAM = PROGRAMNAME.
* Lesen                                                                *
* check if the between clausal is neccessary  LOW_VAKE = HIGH_VAKE     *
* + IF LOW_VAKE = HIGH_VAKE.                                           *

IF  A954-KAPPL = *A954-KAPPL  AND
    A954-KSCHL = *A954-KSCHL  AND
    A954-VKORG = *A954-VKORG AND
    A954-SPART = *A954-SPART AND
    A954-MATNR = *A954-MATNR AND
    1 = 1.
 SELECT * FROM A954 BYPASSING BUFFER
        WHERE KAPPL = A954-KAPPL
        AND   KSCHL = A954-KSCHL
        AND   VKORG = A954-VKORG
        AND   SPART = A954-SPART
        AND   MATNR = A954-MATNR
        AND DATBI BETWEEN LOW_VAKE-DATBI AND HIGH_VAKE-DATBI
        AND DATAB BETWEEN LOW_VAKE-DATAB AND HIGH_VAKE-DATAB
        ORDER BY PRIMARY KEY.
* Verwendung und Tabelle setzen                                        *
    VAKE-KVEWE = 'A'.
    VAKE-KOTABNR =  '954'.
* Daten und Datum transportieren                                       *
    MOVE-CORRESPONDING A954 TO VAKE.
* Variable Schl¨¹ssel in A954                                           *
    MOVE <A954>+9(24) TO VAKE-VAKEY.
* Verarbeitungsroutine vorhanden ?                                     *
    IF NAME_OF_FORM    <> SPACE AND
       NAME_OF_PROGRAM <> SPACE.
* Aufruf der Verarbeitungsroutine                                      *
      PERFORM (NAME_OF_FORM)
              IN PROGRAM (NAME_OF_PROGRAM) USING VAKE RETURNCODE.
* Verlassen der Schleife bei Returncode 0                              *
      IF RETURNCODE = 0.
        EXIT.
      ENDIF.
    ENDIF.
  ENDSELECT.
ELSE.
 SELECT * FROM A954 BYPASSING BUFFER
   WHERE KAPPL BETWEEN A954-KAPPL AND *A954-KAPPL
   AND   KSCHL BETWEEN A954-KSCHL AND *A954-KSCHL
*   AND   VKORG BETWEEN A954-VKORG
*   AND   *A954-VKORG
   AND VKORG EQ F001
   AND   SPART BETWEEN A954-SPART
   AND   *A954-SPART
   AND   MATNR BETWEEN A954-MATNR
   AND   *A954-MATNR
   AND DATBI BETWEEN LOW_VAKE-DATBI AND HIGH_VAKE-DATBI
   AND DATAB BETWEEN LOW_VAKE-DATAB AND HIGH_VAKE-DATAB
   ORDER BY PRIMARY KEY.                 "#EC PORTABLE
* Verwendung und Tabelle setzen                                        *
    VAKE-KVEWE = 'A'.
    VAKE-KOTABNR =  '954'.
* Daten und Datum transportieren                                       *
    MOVE-CORRESPONDING A954 TO VAKE.
* Variable Schl¨¹ssel in A954                                           *
    MOVE <A954>+9(24) TO VAKE-VAKEY.
* Verarbeitungsroutine vorhanden ?                                     *
    IF NAME_OF_FORM    <> SPACE AND
       NAME_OF_PROGRAM <> SPACE.
* Aufruf der Verarbeitungsroutine                                      *
      PERFORM (NAME_OF_FORM)
              IN PROGRAM (NAME_OF_PROGRAM) USING VAKE RETURNCODE.
* Verlassen der Schleife bei Returncode 0                              *
      IF RETURNCODE = 0.
        EXIT.
      ENDIF.
    ENDIF.
  ENDSELECT.
ENDIF.
* Returncode setzen                                                    *
  SUBRC = SY-SUBRC.
ENDFORM.

*----------------------------------------------------------------------
*       FORM DB_UPDATE                                                 *
*----------------------------------------------------------------------
*       Datenbankver#nderung der Tabelle $KOTAB                        *
*----------------------------------------------------------------------
*  -->  UPDATE_TAB : Tabelle mit allen Eintr#gen f¨¹r die Ver#nderung   *
*  -->  DB_ACTION  : I = INSERT                                        *
*                    U = UPDATE                                        *
*                    D = DELETE                                        *
* <--   DEL_SUBRC  : Returncode nach DELETE                            *
*----------------------------------------------------------------------
FORM DB_UPDATE TABLES UPDATE_TAB STRUCTURE TIME_VAKE_DB
               USING DB_ACTION TYPE CHAR1
                     DB_SUBRC LIKE SY-SUBRC.
  FIELD-SYMBOLS <A954_DB> TYPE C.
  ASSIGN A954_DB TO <A954_DB> CASTING.
* Reset DB-Tabelle                                                     *
  REFRESH A954_DB.
* DB-Tabelle f¨¹llen                                                    *
  LOOP AT UPDATE_TAB.
* Fixe Daten in A954 fuellen                                           *
    MOVE-CORRESPONDING UPDATE_TAB TO A954_DB.
* Variable Daten in A954_DB fuellen                                    *
    MOVE UPDATE_TAB-VAKEY TO <A954_DB>+9(24).
*"Selektionsdatum
    IF ( DB_ACTION = 'I' OR DB_ACTION = 'U' ) AND
       A954_DB-DATAB > A954_DB-DATBI.
      RAISE DATAB_LARGER_DATBI.
    ENDIF.
* Sichern                                                              *
    APPEND A954_DB.
  ENDLOOP.
* Datenbankver#nderung durchf¨¹hren                                     *
  CASE DB_ACTION.
* Insert                                                               *
    WHEN 'I'.
      INSERT A954 FROM TABLE A954_DB.
* Update                                                               *
    WHEN 'U'.
      UPDATE A954 FROM TABLE A954_DB.
* Delete                                                               *
    WHEN 'D'.
      DELETE A954 FROM TABLE A954_DB.
* Modify                                                               *
    WHEN 'M'.
      MODIFY A954 FROM TABLE A954_DB.
  ENDCASE.
* Returncode setzen                                                    *
  DB_SUBRC = SY-SUBRC.
ENDFORM.

*----------------------------------------------------------------------
*       FORM DEQUEUE                                                   *
*----------------------------------------------------------------------
*       Entsperren der Tabelle A954                                    *
*----------------------------------------------------------------------
*  -->  D_KEY    : Sper-Key                                            *
*----------------------------------------------------------------------
FORM DEQUEUE USING D_KEY LIKE ENQ_KEY.
* #betragen Sperrkey                                                   *
  RSTABLE-TABNAME  = 'A954'.
  RSTABLE-VARKEY   = SY-MANDT.
  RSTABLE-VARKEY+3 = D_KEY.
* Aufruf der Entsperrroutine                                           *
  CALL FUNCTION 'DEQUEUE_E_TABLE'
       EXPORTING
            TABNAME = RSTABLE-TABNAME
            VARKEY  = RSTABLE-VARKEY.
ENDFORM.

*----------------------------------------------------------------------
*       FORM ENQUEUE                                                   *
*----------------------------------------------------------------------
*       Sperren der Tabelle A954                                       *
*----------------------------------------------------------------------
*  -->  E_KOMG   : Kommunikationsblock                                 *
*  -->  E_KAPPL  : Applikation                                         *
*  -->  E_KSCHL  : Konditionsart                                       *
*  -->  E_INDEX  : Feldindex bis zu dem gesperrt werden mu#            *
* <-->  E_KEY    : Sperrschl¨¹ssel                                      *
* <--   E_SUBRC  : Returncode nach Sperren : 0 - Satz wurde gesperrt   *
*                                            4 - Satz ist gesperrt     *
*                                            8 - Fehler beim Sperren   *
*----------------------------------------------------------------------
FORM ENQUEUE USING E_KOMG STRUCTURE KOMG
                   E_KAPPL LIKE T681-kappl
                   E_KSCHL LIKE T685-KSCHL
                   E_INDEX TYPE P
                   E_KEY LIKE ENQ_KEY
                   E_SUBRC LIKE Sy-SUBRC.
DATA: LFD_INDEX(2) TYPE P,
      TIMES(4) TYPE C.
DATA: CHAR0 LIKE RSTABLE-VARKEY.

* Initialisierung                                                      *
  CALL 'C_ENQ_WILDCARD' ID 'HEX0' FIELD CHAR0
                        ID 'DELAY_MAX' FIELD TIMES.
  LFD_INDEX = 1.
  ENQUEUE = CHAR0.
* Mandt, Applikation, Konditionsart                                    *
  ENQUEUE-MANDT = SY-MANDT.
  ENQUEUE-KAPPL = E_KAPPL.
  ENQUEUE-KSCHL = E_KSCHL.
* F¨¹llen des Sperrschl¨¹ssel                                            *
  IF LFD_INDEX <= E_INDEX.
    ENQUEUE-VKORG = E_KOMG-VKORG.
    ADD 1 TO LFD_INDEX.
  ENDIF.
  IF LFD_INDEX <= E_INDEX.
    ENQUEUE-SPART = E_KOMG-SPART.
    ADD 1 TO LFD_INDEX.
  ENDIF.
  IF LFD_INDEX <= E_INDEX.
    ENQUEUE-MATNR = E_KOMG-MATNR.
    ADD 1 TO LFD_INDEX.
  ENDIF.
* Alter Sperrkey vorhanden ?                                           *
  IF E_KEY <> SPACE.
* Gleicher Satz gesperrt ?                                             *
    IF E_KEY = ENQUEUE.
* keine weitere Aktion                                                 *
      E_SUBRC = 0.
      EXIT.
    ELSE.
* Entsperren alten Schl¨¹ssel                                           *
      PERFORM DEQUEUE USING E_KEY.
    ENDIF.
  ENDIF.
* Aufruf Sperrroutine                                                  *
  RSTABLE-TABNAME   = 'A954'.
  RSTABLE-VARKEY    = CHAR0.
  CLEAR SY-FDPOS.
  DESCRIBE FIELD ENQUEUE LENGTH SY-FDPOS IN CHARACTER MODE.
  IF NOT SY-FDPOS IS INITIAL.
    ASSIGN RSTABLE-VARKEY(SY-FDPOS) TO <ENQUEUE>.
    <ENQUEUE> = ENQUEUE.
  ENDIF.
  CALL FUNCTION 'ENQUEUE_E_TABLE'
       EXPORTING
            TABNAME        = RSTABLE-TABNAME
            VARKEY         = RSTABLE-VARKEY
       EXCEPTIONS
            FOREIGN_LOCK   = 4
            SYSTEM_FAILURE = 8.
* Merken Returncode                                                    *
  E_SUBRC = SY-SUBRC.
  E_KEY = RSTABLE-VARKEY.
ENDFORM.

*----------------------------------------------------------------------
*       FORM FILL_KOMG_FROM_VAKEY                                      *
*----------------------------------------------------------------------
*       Die Felder aus dem variablen Schl¨¹ssel werden in den           *
*       Kommunikationsblock transportiert.                             *
*----------------------------------------------------------------------
* <--    FFV_KOMG  : Kommunikationsblock                               *
*  -->   FFV_VAKEY : variabler Schl¨¹ssel                               *
*----------------------------------------------------------------------
FORM FILL_KOMG_FROM_VAKEY USING FFV_KOMG STRUCTURE KOMG
                                FFV_VAKEY TYPE VAKEY.
  .
  <A954>+9(24) = FFV_VAKEY.
  MOVE-CORRESPONDING A954 TO FFV_KOMG.
ENDFORM.

*----------------------------------------------------------------------
*       FORM FILL_VAKEY_FROM_KOMG                                      *
*----------------------------------------------------------------------
*       Die Felder aus dem Kommunikationsblock werden in den           *
*       varaiablen Schl¨¹ssel transportiert.                            *
*----------------------------------------------------------------------
*  -->   FFV_VAKEY : variabler Schl¨¹ssel                               *
* <--    FFV_KOMG  : Kommunikationsblock                               *
*----------------------------------------------------------------------
FORM FILL_VAKEY_FROM_KOMG USING FVF_VAKEY TYPE VAKEY
                                FVF_KOMG STRUCTURE KOMG.
  CLEAR FVF_VAKEY.
  MOVE-CORRESPONDING FVF_KOMG TO A954.
  FVF_VAKEY = <A954>+9(24).
ENDFORM.


*----------------------------------------------------------------------
*       FORM GET_VAKEY                                                 *
*----------------------------------------------------------------------
*       variablen Schl¨¹ssel holen                                      *
*----------------------------------------------------------------------
* <--    CH_VAKEY  : variablen Schl¨¹ssel                               *
*  -->   US_HEADER : Tabellen Kopf z.B. A004                           *
*----------------------------------------------------------------------
FORM GET_VAKEY   USING       US_HEADER TYPE C
                 CHANGING    CH_VAKEY TYPE VAKEY.
  <A954> = US_HEADER.
  CH_VAKEY = <A954>+9(24).
ENDFORM.

*----------------------------------------------------------------------
*       FORM GET_VADAT                                                 *
*----------------------------------------------------------------------
*       variablen Schl¨¹ssel holen                                      *
*----------------------------------------------------------------------
* <--    CH_VADAT  : variablen Schl¨¹ssel                               *
*  -->   US_HEADER : Tabellen Kopf z.B. A004                           *
*----------------------------------------------------------------------
FORM GET_VADAT   USING       US_HEADER TYPE C
                 CHANGING    CH_VADAT LIKE A000-VADAT.
  <A954> = US_HEADER.
ENDFORM.

*----------------------------------------------------------------------
*       FORM FILL_COMM_AREA_FROM_VAKEY                                 *
*----------------------------------------------------------------------
*       Die Felder aus dem variablen Schl¨¹ssel werden in den           *
*       Kommunikationsblock transportiert.                             *
*----------------------------------------------------------------------
* <--    FFV_KOMG  : Kommunikationsblock                               *
*  -->   FFV_VAKEY : variabler Schl¨¹ssel                               *
*----------------------------------------------------------------------
FORM FILL_COMM_AREA_FROM_VAKEY USING FFV_KOMG STRUCTURE KOMG
                                     FFV_VAKEY TYPE VAKEY.
  .
  <A954>+9(24) = FFV_VAKEY.
  MOVE-CORRESPONDING A954 TO FFV_KOMG.
ENDFORM.
*----------------------------------------------------------------------
*       FORM FILL_VAKEY_FROM_COMM_AREA                                 *
*----------------------------------------------------------------------
*       Die Felder aus dem Kommunikationsblock werden in den           *
*       varaiablen Schl¨¹ssel transportiert.                            *
*----------------------------------------------------------------------
*  -->   FFV_VAKEY : variabler Schl¨¹ssel                               *
* <--    FFV_KOMG  : Kommunikationsblock                               *
*----------------------------------------------------------------------
FORM FILL_VAKEY_FROM_COMM_AREA USING FVF_VAKEY TYPE VAKEY
                                     FVF_KOMG STRUCTURE KOMG.
  CLEAR FVF_VAKEY.
  MOVE-CORRESPONDING FVF_KOMG TO A954.
  FVF_VAKEY = <A954>+9(24).
ENDFORM.
*----------------------------------------------------------------------
*       FORM FILL_VADAT_FROM_COMM_AREA   JAY                           *
*----------------------------------------------------------------------
*       Die Felder aus dem Kommunikationsblock werden in den           *
*       varaiablen Datenteil transportiert.                            *
*----------------------------------------------------------------------
*  -->   FFV_VADAT : variabler Datenteil                               *
* <--    FFV_KOMG  : Kommunikationsblock                               *
*----------------------------------------------------------------------
FORM FILL_VADAT_FROM_COMM_AREA USING US_VADAT LIKE A000-VADAT
                                     US_KOMG STRUCTURE KOMG.
  CLEAR US_VADAT.
  MOVE-CORRESPONDING US_KOMG TO A954.
ENDFORM.

*----------------------------------------------------------------------
*       FORM FILL_COMM_AREA_FROM_VADAT      JAY                        *
*----------------------------------------------------------------------
*       Die Felder aus dem variablen Datenteil werden in den           *
*       Kommunikationsblock transportiert.                             *
*----------------------------------------------------------------------
* <--    FFV_KOMG  : Kommunikationsblock                               *
*  -->   FFV_VADAT : variabler Datenenteil                             *
*----------------------------------------------------------------------
FORM FILL_COMM_AREA_FROM_VADAT USING FFV_KOMG STRUCTURE KOMG
                                     FFV_VADAT LIKE A000-VADAT.
  .
  MOVE-CORRESPONDING A954 TO FFV_KOMG.
ENDFORM.

*----------------------------------------------------------------------
*       FORM SELECTION                                                 *
*----------------------------------------------------------------------
*       Selektion von Konditionss#tzen                                 *
*       Die Selektionsparameter m¨¹ssen vorher ins Memomry exportiert   *
*       werden (vgl. START-OF-SELECTION ). Die #bergabe findet         *
*       mit den Tabellen XVAKE und KNUMH statt, die im gemeinsamen     *
*       Datenteil VAKECOM liegen.                                      *
*----------------------------------------------------------------------
* <--   S_VAKE  : Ermittelte Konditionss#tze                           *
* <--   S_KNUMH : Ermittelte Konditionsnummern                         *
*  -->  S_KAPPL : Applikation                                          *
*  -->  S_KSCHL : Konditionsart                                        *
* <--   S_SUBRC : Returncode 0 : Selektion erfolgreich                 *
*                            4 : Es wurde kein Satz selektiert         *
*----------------------------------------------------------------------
FORM SELECTION TABLES S_VAKE  STRUCTURE VAKEVB
                      S_KNUMH STRUCTURE KNUMH_RAN
               USING  S_KAPPL like T681-KAPPL
                      S_KSCHL like T685-KSCHL
                      S_SUBRC like SY-SUBRC.
* Selektionsparameter aus dem Memory                                   *
  IMPORT
* Selelktionsparameter                                                 *
    F001
    F002
    F003
    SEL_DATE
  FROM MEMORY ID 'RV_COND_MEMORY_01'.
* Zur¨¹cksetzen der Konditionsnummern-Tabelle                           *
  REFRESH S_KNUMH.
  CLEAR S_KNUMH.
  S_KNUMH-OPTION = 'EQ'.
  S_KNUMH-SIGN  = 'I'.
* Lesen der ausgew#hlten S#tze                                         *
  SELECT * FROM A954 BYPASSING BUFFER
    WHERE KAPPL = S_KAPPL
    AND   KSCHL = S_KSCHL
    AND   VKORG = F001
    AND   SPART = F002
    AND   MATNR IN F003
    AND   DATBI >= SEL_DATE
    AND   DATAB <= SEL_DATE.
* Sichern in interner Tabelle                                          *
    S_VAKE-KVEWE = 'A'.
    S_VAKE-KOTABNR = '954'.
* Daten und Datum transportieren                                       *
    MOVE-CORRESPONDING A954 TO S_VAKE.
* Variable Schl¨¹ssel in A954                                           *
    MOVE <A954>+9(24) TO S_VAKE-VAKEY.
    APPEND S_VAKE.
* F¨¹llen der Selektionstabelle                                         *
    S_KNUMH-LOW = A954-KNUMH.
    APPEND S_KNUMH.
  ENDSELECT.
* Selektion nicht erfolgreich                                          *
  S_SUBRC = SY-SUBRC.
ENDFORM.

*----------------------------------------------------------------------
*       FORM ACCESS_BY_KNUMH                                           *
*----------------------------------------------------------------------
*       Lesen von Konditionssaetzen zu einer knumh                     *
*----------------------------------------------------------------------
*  -->  PI_VAKE     : KEY aus VAKE                                     *
* <--   VAKE_TAB    : alle Vake zu der Knumh                           *
* <--   KONDR_TAB   : alle Informationen, zu gelesenen Axxx-Eintr#gen  *
* <--   SUBRC       : 0 - S#tze wurden gefunden                        *
*                    >0 - Kein Satz gefunden                           *
*----------------------------------------------------------------------
FORM ACCESS_BY_KNUMH  TABLES VAKE_TAB  STRUCTURE VAKE
                             KONDR_TAB STRUCTURE SDKONDARCH
                      USING  PI_VAKE   STRUCTURE VAKE
                             SUBRC LIKE SY-SUBRC.

FIELD-SYMBOLS <PART1> TYPE C.
ASSIGN KONDR_TAB-PART1 TO <PART1> CASTING.

CLEAR:   VAKE_TAB, KONDR_TAB.
REFRESH: VAKE_TAB, KONDR_TAB.

* F¨¹llen des Schl¨¹ssels                                                *
 MOVE-CORRESPONDING PI_VAKE TO A954.
 MOVE PI_VAKE-VAKEY TO <A954>+9(24).
* Lesen                                                                *
 SELECT * FROM A954 BYPASSING BUFFER
        WHERE KAPPL = A954-KAPPL
        AND   KSCHL = A954-KSCHL
        AND   VKORG = A954-VKORG
        AND   SPART = A954-SPART
        AND   MATNR = A954-MATNR
        AND   KNUMH = A954-KNUMH
   ORDER BY PRIMARY KEY.
* Verwendung und Tabelle setzen                                        *
   VAKE_TAB-KVEWE = 'A'.
   VAKE_TAB-KOTABNR =  '954'.
* Satz transportieren                                                  *
   MOVE-CORRESPONDING A954 TO VAKE_TAB.
* Variable Daten in A954 fuellen                                       *
   MOVE <A954>+9(24) TO VAKE_TAB-VAKEY.
   APPEND VAKE_TAB.
   MOVE-CORRESPONDING VAKE_TAB TO KONDR_TAB.
   <PART1> = <A954>.
   APPEND KONDR_TAB.
 ENDSELECT.
* Subreturn Code setzen                                                *
 SUBRC = SY-SUBRC.
ENDFORM.

*---------------------------------------------------------------------*
*       FORM REINSTATE_CONTROL                                        **
*---------------------------------------------------------------------*
FORM SAVE_REINSTATE_CONTROL USING TA_CONTROL TYPE CXTAB_CONTROL
                                  US_SAVE TYPE CHAR1.

  STATICS: ST_CXTAB_CONTROL TYPE CXTAB_CONTROL.

  IF US_SAVE = 'X'.
    ST_CXTAB_CONTROL = TA_CONTROL.
  ELSE.
    TA_CONTROL = ST_CXTAB_CONTROL.
  ENDIF.

ENDFORM.

*---------------------------------------------------------------------*
*       FORM GET_OFFSETS                                              **
*---------------------------------------------------------------------*
FORM GET_OFFSETS CHANGING OFFSET_VAKEY TYPE I
                          OFFSET_VADAT TYPE I
                          LENGTH_VAKEY TYPE I
                          LENGTH_VADAT TYPE I.

* return offset and length of VAKEY field                              *
 OFFSET_VAKEY = 9.
 LENGTH_VAKEY = 24.

* return offset and length of VADAT field                              *
 OFFSET_VADAT = 0.
 LENGTH_VADAT = 0.

ENDFORM.
*---------------------------------------------------------------------*
*       FORM FILL_KOTAB_ROW                                           **
*---------------------------------------------------------------------*
form fill_kotab_row.

 A954-MANDT = SY-MANDT.
 A954-KSCHL = RV13A-KSCHL.
 A954-KAPPL = RV13A-KAPPL.

endform.

*Text symbol text£º
*011:Sales Organization

*012:Division
*Selection text£º
*DATE_AS:        Keep end of validity period
*F003:        Material
*SEL_DATE:        Valid On
