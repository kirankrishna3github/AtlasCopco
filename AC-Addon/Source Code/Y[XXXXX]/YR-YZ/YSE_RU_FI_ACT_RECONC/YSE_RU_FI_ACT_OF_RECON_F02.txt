*----------------------------------------------------------------------*
***INCLUDE YSE_RU_FI_ACT_OF_RECON_F02.
*----------------------------------------------------------------------*


*&---------------------------------------------------------------------*
*&      Form  check_object_tab_marked_f14
*&---------------------------------------------------------------------*
*       Text
*----------------------------------------------------------------------*
FORM check_object_tab_marked_f14 USING p_ucomm    LIKE sy-ucomm
                                       p_selfield TYPE slis_selfield.

ENDFORM.                    "check_object_tab_marked_f14

*&---------------------------------------------------------------------*
*&      Form  top_of_page_bsid
*&---------------------------------------------------------------------*
*       Top of page callback routine for ALV
*----------------------------------------------------------------------*
FORM top_of_page_bsid.

* Local variables
  DATA: lt_comment TYPE slis_t_listheader,
        ls_comment TYPE slis_listheader.

*** MOD-001 * begin ***
  DATA: lv_info    TYPE slis_entry,
        lv_tabix   TYPE sytabix,
        lv_lines   TYPE i,
        lv_count   TYPE i,
        lv_datab   TYPE char10,
        lv_datbi   TYPE char10.
*** MOD-001 * end***

* Header
  ls_comment-typ  = 'H'.
  ls_comment-info = text-h00.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

* Selection
  ls_comment-typ  = 'S'.
  ls_comment-key  = text-s01.
  ls_comment-info = 'Act of Reconciliation'. "#EC NOTEXT
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

*** MOD-001 * begin ***
*  IF p_cus = 'X'.
*    ls_comment-typ  = 'S'.
*    ls_comment-key  = text-s02.
*    ls_comment-info = p_kunnr.
*    APPEND ls_comment TO lt_comment.
*    CLEAR ls_comment.
*  ELSE.
*    ls_comment-typ  = 'S'.
*    ls_comment-key  = text-s12.
*    ls_comment-info = p_kunnr.
*    APPEND ls_comment TO lt_comment.
*    CLEAR ls_comment.
*  ENDIF.
* Customer / Vendor
  IF p_cus = 'X'.
    ls_comment-typ  = 'S'.
    ls_comment-key  = text-s02.
  ELSE.
    ls_comment-typ  = 'S'.
    ls_comment-key  = text-s12.
  ENDIF.
* List all selected accounts
  DESCRIBE TABLE s_kunnr LINES lv_lines.
  WHILE lv_tabix < lv_lines.
    lv_tabix = lv_tabix + 1.
    READ TABLE s_kunnr INDEX lv_tabix.
    IF lv_count = 0.
      lv_info = s_kunnr-low.
    ELSE.
      CONCATENATE lv_info s_kunnr-low INTO lv_info SEPARATED BY ' + '.
    ENDIF.
    lv_count = lv_count + 1.
    IF lv_count = 4.
      IF lv_tabix < lv_lines.
        CONCATENATE lv_info '+' INTO lv_info SEPARATED BY ' '.
      ENDIF.
      ls_comment-info = lv_info.
      APPEND ls_comment TO lt_comment.
      CLEAR: lv_info, lv_count.
    ENDIF.
  ENDWHILE.
* Any accounts left ?
  IF lv_count > 0.
    ls_comment-info = lv_info.
    APPEND ls_comment TO lt_comment.
  ENDIF.
  CLEAR ls_comment.
*** MOD-001 * end***

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-s03.
*** MOD-001 * begin ***
*  CONCATENATE 'From:' s_bldat-low 'To:' s_bldat-high INTO ls_comment-info
*              SEPARATED BY ' '.
  WRITE s_bldat-low  TO lv_datab.
  WRITE s_bldat-high TO lv_datbi.
  CONCATENATE 'From:' "#EC NOTEXT
              lv_datab 'To:' "#EC NOTEXT
              lv_datbi INTO ls_comment-info
              SEPARATED BY '  '.
*** MOD-001 * end***
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-s04.
  ls_comment-info = p_bukrs.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-s25.
  ls_comment-info = lv_op_sal.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-s05.
  ls_comment-info = lv_op_sal_rub.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-s06.
  ls_comment-info = lv_op_sal_eur.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-s16.
  ls_comment-info = lv_op_sal_usd.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-s26.
  ls_comment-info = lv_bk_sal.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-s13.
  ls_comment-info = lv_bk_sal_rub.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-s14.
  ls_comment-info = lv_bk_sal_eur.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-s24.
  ls_comment-info = lv_bk_sal_usd.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-s07.
  ls_comment-info = lv_debit_b.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-s08.
  ls_comment-info = lv_credit_b.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-s09.
  ls_comment-info = lv_debit_b_eur.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-s10.
  ls_comment-info = lv_credit_b_eur.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-s17.
  ls_comment-info = lv_debit_b_rub.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-s18.
  ls_comment-info = lv_credit_b_rub.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-s19.
  ls_comment-info = lv_debit_b_usd.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-s20.
  ls_comment-info = lv_credit_b_usd.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      it_list_commentary       = lt_comment
*     I_LOGO                   =
*     I_END_OF_LIST_GRID       =
            .

ENDFORM.                    " top_of_page_bsid

*&---------------------------------------------------------------------*
*&      Form  user_command_inst
*&---------------------------------------------------------------------*
*       text: User Command callback routine for ALV
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_l USING r_ucomm LIKE sy-ucomm
                        rs_selfield TYPE slis_selfield.

  CASE r_ucomm.

    WHEN 'EXCEL'.

*data:v_file_name type RLGRAP-FILENAME.

      PERFORM create_excel.

*     Create sheet
      PERFORM sheet.

*** MOD-001 * begin ***
    WHEN 'XML'.

      PERFORM create_xml.
*** MOD-001 * end ***

  ENDCASE.

  CLEAR rs_selfield.

ENDFORM.                    " user_command_inst

*&---------------------------------------------------------------------*
*&      Form  pf_status_set
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->RT_EXTAB   text
*----------------------------------------------------------------------*
FORM pf_status_set USING rt_extab TYPE slis_t_extab.

  SET PF-STATUS 'YSE_ACT_RECON'.

ENDFORM.                    "pf_status_set

*&---------------------------------------------------------------------*
*&      Form  end_of_list
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM end_of_list .

* Output message to indicate log entries exist
  IF gv_log EQ gc_charx.
    MESSAGE s124.
  ENDIF.

ENDFORM.                    " end_of_list

*&---------------------------------------------------------------------*
*&      Form  create_excel
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM create_excel.

  CREATE OBJECT excel 'EXCEL.APPLICATION'.

  IF sy-subrc NE 0.
    WRITE: / 'No EXCEL creation possible'. "#EC NOTEXT
    STOP.
  ENDIF.

  SET PROPERTY OF excel 'DisplayAlerts' = 0.

  CALL METHOD OF excel 'WORKBOOKS' = workbook .
*  Put Excel in background
  SET PROPERTY OF excel 'VISIBLE' = 1.

* Create worksheet
  SET PROPERTY OF excel 'SheetsInNewWorkbook' = 1.
  CALL METHOD OF workbook 'ADD'.

ENDFORM.                    "create_excel

*&---------------------------------------------------------------------*
*&      Form  sheet
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM sheet.

  UNPACK sy-index TO sheetname+5(2).

  IF sy-index GT 1.
    CALL METHOD OF excel 'WORKSHEETS' = sheet.
    CALL METHOD OF sheet 'ADD'.
    FREE OBJECT sheet.
  ENDIF.
  scnt = sy-index.
  CALL METHOD OF excel 'WORKSHEETS' = sheet
    EXPORTING
    #1 = scnt.
  CALL METHOD OF sheet 'ACTIVATE'.
  SET PROPERTY OF sheet     'NAME'       = sheetname.
  FREE OBJECT sheet.   "OK

  PERFORM fill_sheet.
*
  CALL METHOD OF excel 'Columns' = column.
*    CALL METHOD OF COLUMN 'Autofit'.
  FREE OBJECT column.
*
  FREE OBJECT button.
  FREE OBJECT font.
  FREE OBJECT int.
  FREE OBJECT cell.
  FREE OBJECT: cell1.
  FREE OBJECT range.
  FREE OBJECT borders.
  FREE OBJECT: column, row.

  FREE OBJECT font.
  FREE OBJECT int.
  FREE OBJECT cell.
  FREE OBJECT cell1.
  FREE OBJECT range.
  FREE OBJECT borders.
  FREE OBJECT column.
  FREE OBJECT row.
  FREE OBJECT sheet.

ENDFORM.                    "sheet

*&---------------------------------------------------------------------*
*&      Form  fill_sheet
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM fill_sheet.

* Column width
  IF p_cus = 'X'.
    CALL METHOD OF excel 'Columns' = column
      EXPORTING
      #1 = 'A:C'.  " which columns you want to choose
    SET PROPERTY OF column 'ColumnWidth' = 22.

    CALL METHOD OF excel 'Columns' = column
      EXPORTING
      #1 = 'D'.  " which columns you want to choose
    SET PROPERTY OF column 'ColumnWidth' = 17.

    CALL METHOD OF excel 'Columns' = column
      EXPORTING
      #1 = 'E'.  " which columns you want to choose
    SET PROPERTY OF column 'ColumnWidth' = 19.

    CALL METHOD OF excel 'Columns' = column
      EXPORTING
      #1 = 'F:Q'.  " which columns you want to choose
    SET PROPERTY OF column 'ColumnWidth' = 17.

    CALL METHOD OF excel 'Columns' = column
      EXPORTING
      #1 = 'R'.  " which columns you want to choose
    SET PROPERTY OF column 'ColumnWidth' = 12.

    CALL METHOD OF excel 'Columns' = column
      EXPORTING
      #1 = 'S'.  " which columns you want to choose
    SET PROPERTY OF column 'ColumnWidth' = 16.

    CALL METHOD OF excel 'Columns' = column
      EXPORTING
      #1 = 'T'.  " which columns you want to choose
    SET PROPERTY OF column 'ColumnWidth' = 10.

    CALL METHOD OF excel 'Columns' = column
      EXPORTING
      #1 = 'U'.  " which columns you want to choose
    SET PROPERTY OF column 'ColumnWidth' = 60.
  ELSE.
    CALL METHOD OF excel 'Columns' = column
      EXPORTING
      #1 = 'A:C'.  " which columns you want to choose
    SET PROPERTY OF column 'ColumnWidth' = 22.

    CALL METHOD OF excel 'Columns' = column
      EXPORTING
      #1 = 'D'.  " which columns you want to choose
    SET PROPERTY OF column 'ColumnWidth' = 17.

    CALL METHOD OF excel 'Columns' = column
      EXPORTING
      #1 = 'E:P'.  " which columns you want to choose
    SET PROPERTY OF column 'ColumnWidth' = 17.

    CALL METHOD OF excel 'Columns' = column
      EXPORTING
      #1 = 'Q'.  " which columns you want to choose
    SET PROPERTY OF column 'ColumnWidth' = 12.
  ENDIF.

* Header
  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'A1'.
  PERFORM font          USING 1 '12' '1'.
  SET PROPERTY OF cell    'VALUE' = text-adr
  .
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'A2'.
  PERFORM font          USING 1 '14' '9'.
  SET PROPERTY OF cell    'VALUE' = text-h00.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

*** MOD-001 * begin ***
*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'D2'.
*  PERFORM font          USING 1 '12' '1'.
*  SET PROPERTY OF cell    'VALUE' = p_kunnr.
*  PERFORM fill_cell     USING '15' '0'.
*  FREE OBJECT cell.

  DATA: lv_cell(3)  TYPE c,
        lv_dt(100)  TYPE c,
        lv_d1(46)   TYPE c
        VALUE 'D E F G H I J K L M N O P Q R S T U V W X Y Z ',
        lv_d2(54)   TYPE c
        VALUE 'AAABACADAFAGAHAIAJAKALAMANAOAPAQARASATAUAVAWAXAYAZBABB',
        lv_lines    TYPE i.
  FIELD-SYMBOLS: <c>.

  DESCRIBE TABLE s_kunnr LINES lv_lines.
  CONCATENATE lv_d1 lv_d2 INTO lv_dt SEPARATED BY space.
  ASSIGN lv_dt(2) TO <c>.
  LOOP AT s_kunnr.
    IF sy-tabix > 50.
      EXIT.
    ENDIF.
    CONCATENATE <c> '2' INTO lv_cell.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.
    PERFORM font          USING 1 '12' '1'.
    IF sy-tabix = 50  AND
       lv_lines > 50.
      SET PROPERTY OF cell    'VALUE' = '.....'.
    ENDIF.
    SET PROPERTY OF cell    'VALUE' = s_kunnr-low.
    PERFORM fill_cell     USING '15' '0'.
    FREE OBJECT cell.
    ASSIGN <c>+2(2) TO <c>.
  ENDLOOP.
*** MOD-001 * end ***

  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'A3'.
  PERFORM font          USING 1 '12' '1'.
  SET PROPERTY OF cell    'VALUE' = text-h2a.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'C3'.
  PERFORM font          USING 1 '12' '1'.
  SET PROPERTY OF cell    'VALUE' = s_bldat-high.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'A4'.
  PERFORM font          USING 1 '12' '1'.
  SET PROPERTY OF cell    'VALUE' = text-h2b.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'C4'.
  PERFORM font          USING 1 '12' '1'.
  SET PROPERTY OF cell    'VALUE' = sy-datum.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'B5'.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell    'VALUE' = text-h01.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'C5'.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell    'VALUE' = s_bldat-low.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'D5'.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell    'VALUE' = text-h50.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'E5'.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell    'VALUE' = s_bldat-high.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'A6'.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell    'VALUE' = text-h02.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'C6'.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell    'VALUE' = lv_name1.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

*** MOD-001 * begin ***
*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'H6'.
*  PERFORM font          USING 1 '10' '1'.
*  SET PROPERTY OF cell    'VALUE' = lv_op_sal_usd.
*  PERFORM fill_cell     USING '15' '0'.
*  FREE OBJECT cell.
*
*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'I6'.
*  PERFORM font          USING 0 '10' '1'.
*  SET PROPERTY OF cell    'VALUE' = text-h32.
*  PERFORM fill_cell     USING '15' '0'.
*  FREE OBJECT cell.
*
*  IF p_cus = 'X'.
*    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'A7'.
*    PERFORM font          USING 1 '10' '1'.
*    SET PROPERTY OF cell    'VALUE' = text-h03.
*    PERFORM fill_cell     USING '15' '0'.
*    FREE OBJECT cell.
*  ELSE.
*    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'A7'.
*    PERFORM font          USING 1 '10' '1'.
*    SET PROPERTY OF cell    'VALUE' = text-h3b.
*    PERFORM fill_cell     USING '15' '0'.
*    FREE OBJECT cell.
*  ENDIF.
*
*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'C7'.
*  PERFORM font          USING 1 '10' '1'.
*  SET PROPERTY OF cell    'VALUE' = p_kunnr.
*  PERFORM fill_cell     USING '15' '0'.
*  FREE OBJECT cell.
*
*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'H7'.
*  PERFORM font          USING 1 '10' '1'.
*  SET PROPERTY OF cell    'VALUE' = lv_op_sal_rub.
*  PERFORM fill_cell     USING '15' '0'.
*  FREE OBJECT cell.
*
*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'I7'.
*  PERFORM font          USING 0 '10' '1'.
*  SET PROPERTY OF cell    'VALUE' = text-h30.
*  PERFORM fill_cell     USING '15' '0'.
*  FREE OBJECT cell.
*** MOD-001 * end ***

  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'A8'.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell    'VALUE' = text-h04.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

*** MOD-001 * begin ***
  IF p_cus = 'X'.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'G8'.
  ELSE.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'F8'.
  ENDIF.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell    'VALUE' = text-h15.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.
*** MOD-001 * end ***

  IF p_cus = 'X'.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'H8'.
  ELSE.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'G8'.
  ENDIF.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell    'VALUE' = lv_op_sal.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

*** MOD-001 * begin ***
*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'E8'.
*  PERFORM font          USING 0 '10' '1'.
*  SET PROPERTY OF cell    'VALUE' = text-c01.
*  PERFORM fill_cell     USING '15' '0'.
*  FREE OBJECT cell.
*** MOD-001 * end ***

  IF p_cus = 'X'.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'J8'.
  ELSE.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'I8'.
  ENDIF.
  PERFORM font          USING 0 '10' '1'.
  SET PROPERTY OF cell    'VALUE' = text-h1f.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

  IF p_cus = 'X'.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'K8'.
  ELSE.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'J8'.
  ENDIF.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell    'VALUE' = lv_op_sal_eur.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

*** MOD-001 * begin ***
  IF p_cus = 'X'.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'M8'.
  ELSE.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'L8'.
  ENDIF.
  PERFORM font          USING 0 '10' '1'.
  SET PROPERTY OF cell    'VALUE' = text-h1i.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

  IF p_cus = 'X'.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'N8'.
  ELSE.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'M8'.
  ENDIF.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell    'VALUE' = lv_op_sal_usd.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

  IF p_cus = 'X'.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'P8'.
  ELSE.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'O8'.
  ENDIF.
  PERFORM font          USING 0 '10' '1'.
  SET PROPERTY OF cell    'VALUE' = text-h1l.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

  IF p_cus = 'X'.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'Q8'.
  ELSE.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'P8'.
  ENDIF.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell    'VALUE' = lv_op_sal_rub.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.

*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'I8'.
*  PERFORM font          USING 0 '10' '1'.
*  SET PROPERTY OF cell    'VALUE' = text-h31.
*  PERFORM fill_cell     USING '15' '0'.
*  FREE OBJECT cell.
*** MOD-001 * end ***

  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'A9'.
  PERFORM font          USING 0 '10' '1'.
  SET PROPERTY OF cell    'VALUE' = text-h06.
  PERFORM fill_cell     USING '15' '0'.
  FREE OBJECT cell.
  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'S9'.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell    'VALUE' = text-h07.
  PERFORM fill_cell     USING '8' '1'.
  FREE OBJECT cell.

*** MOD-001 * begin ***
  ASSIGN sy-abcde(1) TO <c>.
  CONCATENATE <c> '10' INTO lv_cell.
*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'A10'.
  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.
*** MOD-001 * end ***
  PERFORM font          USING 1 '10' '11'.
  SET PROPERTY OF cell    'VALUE' = text-h1a.
  PERFORM fill_cell     USING '4' '1'.
  PERFORM border        USING '2'.
  FREE OBJECT cell.

*** MOD-001 * begin ***
  ASSIGN <c>+1(1) TO <c>.
  CONCATENATE <c> '10' INTO lv_cell.
*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'B10'.
  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.
*** MOD-001 * end ***
  PERFORM font          USING 1 '10' '11'.
  SET PROPERTY OF cell    'VALUE' = text-h1b.
  PERFORM fill_cell     USING '4' '1'.
  PERFORM border        USING '2'.
  FREE OBJECT cell.

*** MOD-001 * begin ***
  ASSIGN <c>+1(1) TO <c>.
  CONCATENATE <c> '10' INTO lv_cell.
*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'C10'.
  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.
*** MOD-001 * end ***
  PERFORM font          USING 1 '10' '11'.
  SET PROPERTY OF cell    'VALUE' = text-h23.
  PERFORM fill_cell     USING '4' '1'.
  PERFORM border        USING '2'.
  FREE OBJECT cell.

*** MOD-001 * begin ***
  ASSIGN <c>+1(1) TO <c>.
  CONCATENATE <c> '10' INTO lv_cell.
  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.   "D10
  PERFORM font          USING 1 '10' '11'.
  SET PROPERTY OF cell    'VALUE' = text-h1c.
  PERFORM fill_cell     USING '4' '1'.
  PERFORM border        USING '2'.
  FREE OBJECT cell.
*** MOD-001 * end ***

*** MOD-001 * begin ***
  IF p_cus = 'X'.
    ASSIGN <c>+1(1) TO <c>.
    CONCATENATE <c> '10' INTO lv_cell.
*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'E10'.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.
*** MOD-001 * end ***
    PERFORM font          USING 1 '10' '11'.
    SET PROPERTY OF cell    'VALUE' = text-h12.
    PERFORM fill_cell     USING '4' '1'.
    PERFORM border        USING '2'.
    FREE OBJECT cell.
  ENDIF.                                                    "MOD-001

*** MOD-001 * begin ***
  ASSIGN <c>+1(1) TO <c>.
  CONCATENATE <c> '10' INTO lv_cell.
*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'F10'.
  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.
*** MOD-001 * end ***
  PERFORM font          USING 1 '10' '11'.
  SET PROPERTY OF cell    'VALUE' = text-h13.
  PERFORM fill_cell     USING '4' '1'.
  PERFORM border        USING '2'.
  FREE OBJECT cell.

*** MOD-001 * begin ***
  ASSIGN <c>+1(1) TO <c>.
  CONCATENATE <c> '10' INTO lv_cell.
*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'G10'.
  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.
*** MOD-001 * end ***
  PERFORM font          USING 1 '10' '11'.
  SET PROPERTY OF cell    'VALUE' = text-h14.
  PERFORM fill_cell     USING '4' '1'.
  PERFORM border        USING '2'.
  FREE OBJECT cell.

*** MOD-001 * begin ***
  ASSIGN <c>+1(1) TO <c>.
  CONCATENATE <c> '10' INTO lv_cell.
*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'H10'.
  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.
*** MOD-001 * end ***
  PERFORM font          USING 1 '10' '11'.
  SET PROPERTY OF cell    'VALUE' = text-h15.
  PERFORM fill_cell     USING '4' '1'.
  PERFORM border        USING '2'.
  FREE OBJECT cell.

*** MOD-001 * begin ***
  ASSIGN <c>+1(1) TO <c>.
  CONCATENATE <c> '10' INTO lv_cell.
*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'I10'.
  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.
*** MOD-001 * end ***
  PERFORM font          USING 1 '10' '11'.
  SET PROPERTY OF cell    'VALUE' = text-h1d.
  PERFORM fill_cell     USING '4' '1'.
  PERFORM border        USING '2'.
  FREE OBJECT cell.

*** MOD-001 * begin ***
  ASSIGN <c>+1(1) TO <c>.
  CONCATENATE <c> '10' INTO lv_cell.
*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'J10'.
  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.
*** MOD-001 * end ***
  PERFORM font          USING 1 '10' '11'.
  SET PROPERTY OF cell    'VALUE' = text-h1e.
  PERFORM fill_cell     USING '4' '1'.
  PERFORM border        USING '2'.
  FREE OBJECT cell.

*** MOD-001 * begin ***
  ASSIGN <c>+1(1) TO <c>.
  CONCATENATE <c> '10' INTO lv_cell.
*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'K10'.
  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.
*** MOD-001 * end ***
  PERFORM font          USING 1 '10' '11'.
  SET PROPERTY OF cell    'VALUE' = text-h1f.
  PERFORM fill_cell     USING '4' '1'.
  PERFORM border        USING '2'.
  FREE OBJECT cell.

*** MOD-001 * begin ***
  ASSIGN <c>+1(1) TO <c>.
  CONCATENATE <c> '10' INTO lv_cell.
  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.   "L10
  PERFORM font          USING 1 '10' '11'.
  SET PROPERTY OF cell    'VALUE' = text-h1g.
  PERFORM fill_cell     USING '4' '1'.
  PERFORM border        USING '2'.
  FREE OBJECT cell.

  ASSIGN <c>+1(1) TO <c>.
  CONCATENATE <c> '10' INTO lv_cell.
  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.   "M10
  PERFORM font          USING 1 '10' '11'.
  SET PROPERTY OF cell    'VALUE' = text-h1h.
  PERFORM fill_cell     USING '4' '1'.
  PERFORM border        USING '2'.
  FREE OBJECT cell.

  ASSIGN <c>+1(1) TO <c>.
  CONCATENATE <c> '10' INTO lv_cell.
  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.   "N10
  PERFORM font          USING 1 '10' '11'.
  SET PROPERTY OF cell    'VALUE' = text-h1i.
  PERFORM fill_cell     USING '4' '1'.
  PERFORM border        USING '2'.
  FREE OBJECT cell.

  ASSIGN <c>+1(1) TO <c>.
  CONCATENATE <c> '10' INTO lv_cell.
  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.   "O10
  PERFORM font          USING 1 '10' '11'.
  SET PROPERTY OF cell    'VALUE' = text-h1j.
  PERFORM fill_cell     USING '4' '1'.
  PERFORM border        USING '2'.
  FREE OBJECT cell.

  ASSIGN <c>+1(1) TO <c>.
  CONCATENATE <c> '10' INTO lv_cell.
  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.   "P10
  PERFORM font          USING 1 '10' '11'.
  SET PROPERTY OF cell    'VALUE' = text-h1k.
  PERFORM fill_cell     USING '4' '1'.
  PERFORM border        USING '2'.
  FREE OBJECT cell.

  ASSIGN <c>+1(1) TO <c>.
  CONCATENATE <c> '10' INTO lv_cell.
  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.   "Q10
  PERFORM font          USING 1 '10' '11'.
  SET PROPERTY OF cell    'VALUE' = text-h1l.
  PERFORM fill_cell     USING '4' '1'.
  PERFORM border        USING '2'.
  FREE OBJECT cell.
*** MOD-001 * end ***

*** MOD-001 * begin ***
  ASSIGN <c>+1(1) TO <c>.
  CONCATENATE <c> '10' INTO lv_cell.
*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'R10'.
  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.
*** MOD-001 * end ***
  PERFORM font          USING 1 '10' '11'.
  SET PROPERTY OF cell    'VALUE' = text-h19.
  PERFORM fill_cell     USING '4' '1'.
  PERFORM border        USING '2'.
  FREE OBJECT cell.

*** MOD-001 * begin ***
  IF p_cus = 'X'.
    ASSIGN <c>+1(1) TO <c>.
    CONCATENATE <c> '10' INTO lv_cell.
*    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'S10'.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.
*** MOD-001 * end ***
    PERFORM font          USING 1 '10' '11'.
    SET PROPERTY OF cell    'VALUE' = text-h20.
    PERFORM fill_cell     USING '4' '1'.
    PERFORM border        USING '2'.
    FREE OBJECT cell.
  ENDIF.                                                    "MOD-001

*** MOD-001 * begin ***
  IF p_cus = 'X'.
    ASSIGN <c>+1(1) TO <c>.
    CONCATENATE <c> '10' INTO lv_cell.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.   "T10
    PERFORM font          USING 1 '10' '11'.
    SET PROPERTY OF cell    'VALUE' = text-h1m.
    PERFORM fill_cell     USING '4' '1'.
    PERFORM border        USING '2'.
    FREE OBJECT cell.

    ASSIGN <c>+1(1) TO <c>.
    CONCATENATE <c> '10' INTO lv_cell.
    CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = lv_cell.   "U10
    PERFORM font          USING 1 '10' '11'.
    SET PROPERTY OF cell    'VALUE' = text-h21.
    PERFORM fill_cell     USING '4' '1'.
    PERFORM border        USING '2'.
    FREE OBJECT cell.
  ENDIF.

*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'M10'.
*  PERFORM font          USING 1 '10' '11'.
*  SET PROPERTY OF cell    'VALUE' = text-h21.
*  PERFORM fill_cell     USING '4' '1'.
*  PERFORM border        USING '2'.
*  FREE OBJECT cell.
*
*  CALL METHOD OF excel 'RANGE' = cell EXPORTING #1 = 'N10'.
*  PERFORM font          USING 1 '10' '11'.
*  SET PROPERTY OF cell    'VALUE' = text-h22.
*  PERFORM fill_cell     USING '4' '1'.
*  PERFORM border        USING '2'.
*  FREE OBJECT cell.
*** MOD-001 * end ***

* Check if more than 1 currency is used in the sales documents for this customer/vendor
  CLEAR lv_cur.
  IF NOT lv_debit_b_rub IS INITIAL OR NOT lv_credit_b_rub IS INITIAL.
    lv_cur = lv_cur + 1.
  ENDIF.
  IF NOT lv_debit_b_eur IS INITIAL OR NOT lv_credit_b_eur IS INITIAL.
    lv_cur = lv_cur + 1.
  ENDIF.
  IF NOT lv_debit_b_usd IS INITIAL OR NOT lv_credit_b_usd IS INITIAL.
    lv_cur = lv_cur + 1.
  ENDIF.

* Internal table / Detail Customer
  IF p_cus = 'X'.
    LOOP AT gt_bsid.
      CLEAR lv_col.
      lv_row = sy-tabix + 10.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      CONCATENATE gt_bsid-bldat+6(2) '.' gt_bsid-bldat+4(2) '.' gt_bsid-bldat+0(4) INTO i_val.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

*** MOD-001 * begin ***
      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      CONCATENATE gt_bsid-budat+6(2) '.' gt_bsid-budat+4(2) '.' gt_bsid-budat+0(4) INTO i_val.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

*      lv_col = lv_col + 1.
*      CALL METHOD OF excel 'Cells' = cell
*        EXPORTING #1 = lv_row #2 = lv_col .
** Begin 23/09/2010
**      i_val = gt_bsid-vbeln.
*      i_val = gt_bsid-xblnr2.
** End 23/09/2010
*      SET PROPERTY OF cell 'FormulaR1C1' = i_val.
*** MOD-001 * end ***

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsid-doc_type .
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

*** MOD-001 * begin ***
      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsid-xblnr2.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsid-zuonr.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

*      lv_col = lv_col + 1.
*      CALL METHOD OF excel 'Cells' = cell
*        EXPORTING #1 = lv_row #2 = lv_col .
*      i_val = gt_bsid-aubel.
*      SET PROPERTY OF cell 'FormulaR1C1' = i_val.
*** MOD-001 * end ***

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsid-deb_dmbtr_lc.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsid-cre_dmbtr_lc.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsid-sal_dmbtr_lc.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsid-deb_dmbtr_dc_eur.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsid-cre_dmbtr_dc_eur.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

*      IF lv_cur = 1.                                       "MOD-001
      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsid-sal_dmbtr_dc_eur.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.
*** MOD-001 * begin ***
*      ELSE.
*       lv_col = lv_col + 1.
*        CALL METHOD OF excel 'Cells' = cell
*          EXPORTING #1 = lv_row #2 = lv_col.
*        IF gt_bsid-waers = 'RUB'.
*          i_val = gt_bsid-sal_amount_dc_rub.
*        ELSEIF gt_bsid-waers = 'EUR'.
*          i_val = gt_bsid-sal_amount_dc_eur.
*        ELSEIF gt_bsid-waers = 'USD'.
*          i_val = gt_bsid-sal_amount_dc_usd.
*        ENDIF.
*        SET PROPERTY OF cell 'FormulaR1C1' = i_val.
*      ENDIF.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsid-deb_dmbtr_dc_usd.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsid-cre_dmbtr_dc_usd.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsid-sal_dmbtr_dc_usd.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsid-deb_dmbtr_dc_rub.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsid-cre_dmbtr_dc_rub.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsid-sal_dmbtr_dc_rub.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.
*** MOD-001 * end ***

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsid-waers2.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsid-ukurs .
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

*** MOD-001 * begin ***
      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsid-kkber.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsid-sgtxt.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

*      lv_col = 13.
*      CALL METHOD OF excel 'Cells' = cell
*        EXPORTING #1 = lv_row #2 = lv_col .
*      i_val = gt_bsid-xblnr.
*      SET PROPERTY OF cell 'FormulaR1C1' = i_val.
*
*      lv_col = 14.
*      CALL METHOD OF excel 'Cells' = cell
*        EXPORTING #1 = lv_row #2 = lv_col .
*      i_val = gt_bsid-belnr.
*      SET PROPERTY OF cell 'FormulaR1C1' = i_val.
*** MOD-001 * end ***

    ENDLOOP.

*   Print Footer info
    DESCRIBE TABLE gt_bsid LINES line.
  ENDIF.

* Internal table / Detail Vendor
  IF p_ven = 'X'.
    LOOP AT gt_bsik.
      CLEAR lv_col.
      lv_row = sy-tabix + 10.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      CONCATENATE gt_bsik-bldat+6(2) '.' gt_bsik-bldat+4(2) '.' gt_bsik-bldat+0(4) INTO i_val.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

*** MOD-001 * begin ***
      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      CONCATENATE gt_bsik-budat+6(2) '.' gt_bsik-budat+4(2) '.' gt_bsik-budat+0(4) INTO i_val.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.
*** MOD-001 * end ***

*      lv_col = lv_col + 1.
*      CALL METHOD OF excel 'Cells' = cell
*        EXPORTING #1 = lv_row #2 = lv_col .
** Begin 23/09/2010
**      i_val = gt_bsik-aubel.
*      i_val = gt_bsik-xblnr2.
** End 23/09/2010
*      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsik-doc_type.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsik-xblnr2.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsik-deb_dmbtr_lc.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsik-cre_dmbtr_lc.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsik-sal_dmbtr_lc.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsik-deb_dmbtr_dc_eur.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsik-cre_dmbtr_dc_eur.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.
*      IF lv_cur = 1.                                       "MOD-001
      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsik-sal_dmbtr_dc_eur.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.
*** MOD-001 * begin ***
*      ELSE.
*        lv_col = lv_col + 1.
*        CALL METHOD OF excel 'Cells' = cell
*          EXPORTING #1 = lv_row #2 = lv_col.
*        IF gt_bsik-waers = 'RUB'.
*          i_val = gt_bsik-sal_amount_dc_rub.
*        ELSEIF gt_bsik-waers = 'EUR'.
*          i_val = gt_bsik-sal_amount_dc_eur.
*        ELSEIF gt_bsik-waers = 'USD'.
*          i_val = gt_bsik-sal_amount_dc_usd.
*        ENDIF.
*        SET PROPERTY OF cell 'FormulaR1C1' = i_val.
*      ENDIF.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsik-deb_dmbtr_dc_usd.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsik-cre_dmbtr_dc_usd.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsik-sal_dmbtr_dc_usd.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsik-deb_dmbtr_dc_rub.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsik-cre_dmbtr_dc_rub.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsik-sal_dmbtr_dc_rub.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.
*** MOD-001 * end ***

      lv_col = lv_col + 1.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = lv_row #2 = lv_col .
      i_val = gt_bsik-waers2.
      SET PROPERTY OF cell 'FormulaR1C1' = i_val.

*** MOD-001 * begin ***
*      lv_col = 12.
*      CALL METHOD OF excel 'Cells' = cell
*        EXPORTING #1 = lv_row #2 = lv_col .
*      i_val = gt_bsik-ukurs .
*      SET PROPERTY OF cell 'FormulaR1C1' = i_val.
*
*      lv_col = 13.
*      CALL METHOD OF excel 'Cells' = cell
*        EXPORTING #1 = lv_row #2 = lv_col .
*      i_val = gt_bsik-xblnr.
*      SET PROPERTY OF cell 'FormulaR1C1' = i_val.
*
*      lv_col = 14.
*      CALL METHOD OF excel 'Cells' = cell
*        EXPORTING #1 = lv_row #2 = lv_col .
*      i_val = gt_bsik-belnr.
*      SET PROPERTY OF cell 'FormulaR1C1' = i_val.
*** MOD-001 * end ***

    ENDLOOP.

*   Print Footer info
    DESCRIBE TABLE gt_bsik LINES line.
  ENDIF.

  line = line + 12.

  CALL METHOD OF excel 'Cells' = cell
    EXPORTING #1 = line #2 = 3.
  SET PROPERTY OF cell 'FormulaR1C1' = text-f10.

  CALL METHOD OF excel 'Cells' = cell
    EXPORTING #1 = line #2 = 6.
  SET PROPERTY OF cell 'FormulaR1C1' = lv_debit_b.

  CALL METHOD OF excel 'Cells' = cell
    EXPORTING #1 = line #2 = 7.
  SET PROPERTY OF cell 'FormulaR1C1' = lv_credit_b.
* Begin delete 23/09/2010
*  if P_CUS = 'X'.
*        CALL METHOD OF EXCEL 'Cells' = CELL
*        EXPORTING #1 = line  #2 = 7.
*        SET PROPERTY OF CELL 'FormulaR1C1' =  gt_bsid-sal_dmbtr_lc.
*  else.
*        CALL METHOD OF EXCEL 'Cells' = CELL
*        EXPORTING #1 = line  #2 = 7.
*        SET PROPERTY OF CELL 'FormulaR1C1' =  gt_bsik-sal_dmbtr_lc.
*  endif.
* End delete 23/09/2010

  IF lv_cur = 1.  " Foreign Currency totals only printed when 1 currency
    IF lv_waerk = 'RUB'.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = line #2 = 15.
      SET PROPERTY OF cell 'FormulaR1C1' = lv_debit_b_rub.

      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = line #2 = 16.
      SET PROPERTY OF cell 'FormulaR1C1' = lv_credit_b_rub.
    ELSEIF lv_waerk = 'EUR'.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = line #2 = 9.
      SET PROPERTY OF cell 'FormulaR1C1' = lv_debit_b_eur.

      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = line #2 = 10.
      SET PROPERTY OF cell 'FormulaR1C1' = lv_credit_b_eur.
    ELSEIF lv_waerk = 'USD'.
      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = line #2 = 12.
      SET PROPERTY OF cell 'FormulaR1C1' = lv_debit_b_usd.

      CALL METHOD OF excel 'Cells' = cell
        EXPORTING #1 = line #2 = 13.
      SET PROPERTY OF cell 'FormulaR1C1' = lv_credit_b_usd.
    ENDIF.

* Begin delete 23/10/2010
*  if P_CUS = 'X'.
*        CALL METHOD OF EXCEL 'Cells' = CELL
*        EXPORTING #1 = line  #2 = 10.
*        SET PROPERTY OF CELL 'FormulaR1C1' =  gt_bsid-SAL_dmbtr_dc.
*  else.
*        CALL METHOD OF EXCEL 'Cells' = CELL
*        EXPORTING #1 = line  #2 = 10.
*        SET PROPERTY OF CELL 'FormulaR1C1' =  gt_bsik-SAL_dmbtr_dc.
*  endif.
* end delete 23/10/2010

  ENDIF. " 1 currency
  line = line + 1.

  CLEAR lv_total_b.
  CLEAR lv_total_b_c.
  CLEAR lv_total_b_for.
  CLEAR lv_total_b_c_for.
  CALL METHOD OF excel 'Cells' = cell
    EXPORTING #1 = line #2 = 1.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell 'FormulaR1C1' = text-f11.
* Begin delete 23/10/2010
*       lv_total_b = lv_debit_b - lv_credit_b.
*       CALL METHOD OF EXCEL 'Cells' = CELL
*       EXPORTING #1 = line  #2 = 7.
*       perform font          using 0 '10' '1'.
*       SET PROPERTY OF CELL 'FormulaR1C1' = lv_total_b.
*  if lv_cur = 1.
*        lv_total_b_for = lv_debit_b_eur + lv_debit_b_rub + lv_debit_b_usd - lv_credit_b_rub - lv_credit_b_eur - lv_credit_b_usd.
*        CALL METHOD OF EXCEL 'Cells' = CELL
*        EXPORTING #1 = line  #2 = 10.
*        perform font          using 0 '10' '1'.
*        SET PROPERTY OF CELL 'FormulaR1C1' = lv_total_b_for.
*  endif.
* End delete 23/10/2010

* Begin 23/10/2010
  IF p_cus = 'X'.
    CALL METHOD OF excel 'Cells' = cell
      EXPORTING #1 = line #2 = 8.
    SET PROPERTY OF cell 'FormulaR1C1' =  gt_bsid-sal_dmbtr_lc.
  ELSE.
    CALL METHOD OF excel 'Cells' = cell
      EXPORTING #1 = line #2 = 7.
    SET PROPERTY OF cell 'FormulaR1C1' =  gt_bsik-sal_dmbtr_lc.
  ENDIF.

  IF lv_cur = 1.  " Foreign Currency totals only printed when 1 currency
    IF gt_bsid-waers = 'RUB'.
      IF p_cus = 'X'.
        CALL METHOD OF excel 'Cells' = cell
          EXPORTING #1 = line #2 = 17.
        SET PROPERTY OF cell 'FormulaR1C1' =  gt_bsid-sal_dmbtr_dc_rub.
      ELSE.
        CALL METHOD OF excel 'Cells' = cell
          EXPORTING #1 = line #2 = 16.
        SET PROPERTY OF cell 'FormulaR1C1' =  gt_bsik-sal_dmbtr_dc_rub.
      ENDIF.
    ELSEIF gt_bsid-waers = 'EUR'.
      IF p_cus = 'X'.
        CALL METHOD OF excel 'Cells' = cell
          EXPORTING #1 = line #2 = 11.
        SET PROPERTY OF cell 'FormulaR1C1' =  gt_bsid-sal_dmbtr_dc_eur.
      ELSE.
        CALL METHOD OF excel 'Cells' = cell
          EXPORTING #1 = line #2 = 10.
        SET PROPERTY OF cell 'FormulaR1C1' =  gt_bsik-sal_dmbtr_dc_eur.
      ENDIF.
    ELSEIF gt_bsid-waers = 'USD'.
      IF p_cus = 'X'.
        CALL METHOD OF excel 'Cells' = cell
          EXPORTING #1 = line #2 = 14.
        SET PROPERTY OF cell 'FormulaR1C1' =  gt_bsid-sal_dmbtr_dc_usd.
      ELSE.
        CALL METHOD OF excel 'Cells' = cell
          EXPORTING #1 = line #2 = 13.
        SET PROPERTY OF cell 'FormulaR1C1' =  gt_bsik-sal_dmbtr_dc_usd.
      ENDIF.
    ENDIF.
  ENDIF.
* End 23/10/2010
  line = line + 2.

  CLEAR lv_total.
  CLEAR lv_bldat.
  CONCATENATE s_bldat-high+6(2) '.' s_bldat-high+4(2) '.' s_bldat-high+0(4) INTO lv_bldat.
  IF p_cus = 'X'.
    lv_total_b_c = gt_bsid-sal_dmbtr_lc.
    IF gt_bsid-sal_dmbtr_lc IS INITIAL. " no bookings
      lv_total_b_c = lv_op_sal.
    ENDIF.
    CONCATENATE text-f12 lv_bldat text-f24 lv_total_b_c text-f22 INTO lv_total SEPARATED BY ' '.
  ELSE.
    lv_total_b_c = gt_bsik-sal_dmbtr_lc.
    IF gt_bsik-sal_dmbtr_lc IS INITIAL. " no bookings
      lv_total_b_c = lv_op_sal.
    ENDIF.
    CONCATENATE text-f12 lv_bldat text-f24 lv_total_b_c text-f22 INTO lv_total SEPARATED BY ' '.
  ENDIF.
  CALL METHOD OF excel 'Cells' = cell
    EXPORTING #1 = line #2 = 1.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell 'FormulaR1C1' = lv_total.
  line = line + 1.

  IF p_cus = 'X'.
    CLEAR lv_total.
    IF lv_cur = 1.
      lv_total_b_c_for = gt_bsid-sal_dmbtr_dc.
      IF gt_bsid-sal_dmbtr_dc IS INITIAL.
* Check if more than 1 currency an opening balance is existing.
        CLEAR lv_cur_op.
        IF NOT lv_op_sal_rub IS INITIAL.
          lv_cur_op = lv_cur_op + 1.
        ENDIF.
        IF NOT lv_op_sal_eur IS INITIAL .
          lv_cur_op = lv_cur_op + 1.
        ENDIF.
        IF NOT lv_op_sal_usd IS INITIAL.
          lv_cur_op = lv_cur_op + 1.
        ENDIF.
        IF lv_cur_op = 1.
          IF NOT lv_op_sal_rub IS INITIAL.
            lv_total_b_c_for = lv_op_sal_rub.
            gt_bsid-waers2 = text-h30.
          ENDIF.
          IF NOT lv_op_sal_eur IS INITIAL.
            lv_total_b_c_for = lv_op_sal_eur.
            gt_bsid-waers2 = text-h31.
          ENDIF.
          IF NOT lv_op_sal_usd IS INITIAL.
            lv_total_b_c_for = lv_op_sal_usd.
            gt_bsid-waers2 = text-h32.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
    CONCATENATE text-f21 lv_total_b_c_for gt_bsid-waers2 INTO lv_total SEPARATED BY ' '.
    CALL METHOD OF excel 'Cells' = cell
      EXPORTING #1 = line #2 = 1.
    PERFORM font          USING 1 '10' '1'.
    SET PROPERTY OF cell 'FormulaR1C1' = lv_total.
    line = line + 1.
  ELSE.
    CLEAR lv_total.
    IF lv_cur = 1.
      lv_total_b_c_for = gt_bsik-sal_dmbtr_dc.
      IF gt_bsik-sal_dmbtr_dc IS INITIAL.

* Check if more than 1 currency an opening balance is existing.
        CLEAR lv_cur_op.
        IF NOT lv_op_sal_rub IS INITIAL.
          lv_cur_op = lv_cur_op + 1.
        ENDIF.
        IF NOT lv_op_sal_eur IS INITIAL .
          lv_cur_op = lv_cur_op + 1.
        ENDIF.
        IF NOT lv_op_sal_usd IS INITIAL.
          lv_cur_op = lv_cur_op + 1.
        ENDIF.
        IF lv_cur_op = 1.
          IF NOT lv_op_sal_rub IS INITIAL.
            lv_total_b_c_for = lv_op_sal_rub.
            gt_bsik-waers2 = text-h30.
          ENDIF.
          IF NOT lv_op_sal_eur IS INITIAL.
            lv_total_b_c_for = lv_op_sal_eur.
            gt_bsik-waers2 = text-h31.
          ENDIF.
          IF NOT lv_op_sal_usd IS INITIAL.
            lv_total_b_c_for = lv_op_sal_usd.
            gt_bsik-waers2 = text-h32.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
    CONCATENATE text-f21 lv_total_b_c_for gt_bsik-waers2 INTO lv_total SEPARATED BY ' '.
    CALL METHOD OF excel 'Cells' = cell
      EXPORTING #1 = line #2 = 1.
    PERFORM font          USING 1 '10' '1'.
    SET PROPERTY OF cell 'FormulaR1C1' = lv_total.
    line = line + 1.
  ENDIF.

  CALL METHOD OF excel 'Cells' = cella
    EXPORTING #1 = line
    #2 = 1.

  CALL METHOD OF excel 'Cells' = cellb
    EXPORTING #1 = line
    #2 = 8.

  CALL METHOD OF excel 'Range' = cellrange
    EXPORTING #1 = cella
    #2 = cellb.

  CALL METHOD OF cellrange 'Merge'.

  CLEAR lv_text_f03.
  CONCATENATE text-f08 text-f09 text-f23 INTO lv_text_f03 SEPARATED BY ' '.

  SET PROPERTY OF cellrange 'WrapText' = 1.
  SET PROPERTY OF cellrange 'RowHeight' = 70.
  SET PROPERTY OF cellrange 'FormulaR1C1' = lv_text_f03.

  line = line + 2.

  CALL METHOD OF excel 'Cells' = cell
    EXPORTING #1 = line #2 = 1.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell 'FormulaR1C1' = text-f13.
  CALL METHOD OF excel 'Cells' = cell
    EXPORTING #1 = line #2 = 4.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell 'FormulaR1C1' = lv_name1.

  line = line + 1.

  CALL METHOD OF excel 'Cells' = cell
    EXPORTING #1 = line #2 = 1.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell 'FormulaR1C1' = text-f15.
  CALL METHOD OF excel 'Cells' = cell
    EXPORTING #1 = line #2 = 3.
  PERFORM font          USING 0 '10' '1'.
  PERFORM border2 USING '4'.
  SET PROPERTY OF cell 'FormulaR1C1' = text-f16.
  CALL METHOD OF excel 'Cells' = cell
    EXPORTING #1 = line #2 = 4.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell 'FormulaR1C1' = text-f17.
  CALL METHOD OF excel 'Cells' = cell
    EXPORTING #1 = line #2 = 6.
  PERFORM font          USING 1 '10' '1'.
  PERFORM border2 USING '4'.

  line = line + 2.

  CALL METHOD OF excel 'Cells' = cell
    EXPORTING #1 = line #2 = 1.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell 'FormulaR1C1' = text-f18.
  CALL METHOD OF excel 'Cells' = cell
    EXPORTING #1 = line #2 = 3.
  PERFORM font          USING 0 '10' '1'.
  PERFORM border2 USING '4'.
  SET PROPERTY OF cell 'FormulaR1C1' = text-f19.
  CALL METHOD OF excel 'Cells' = cell
    EXPORTING #1 = line #2 = 4.
  PERFORM font          USING 1 '10' '1'.
  SET PROPERTY OF cell 'FormulaR1C1' = text-f20.
  CALL METHOD OF excel 'Cells' = cell
    EXPORTING #1 = line #2 = 6.
  PERFORM font          USING 0 '10' '1'.
  PERFORM border2 USING '4'.

  line = line + 2.

  CALL METHOD OF excel 'Cells' = cella
    EXPORTING #1 = line
    #2 = 1.

  CALL METHOD OF excel 'Cells' = cellb
    EXPORTING #1 = line
    #2 = 4.

  CALL METHOD OF excel 'Range' = cellrange
    EXPORTING #1 = cella
    #2 = cellb.

  CALL METHOD OF cellrange 'Merge'.

  CLEAR lv_text_f01.
  CONCATENATE text-f01 text-f02 INTO lv_text_f01 SEPARATED BY ' '.

*       CALL METHOD OF EXCEL 'Cells' = CELL
*       EXPORTING #1 = line  #2 = 1.
  SET PROPERTY OF cellrange 'WrapText' = 1.
  SET PROPERTY OF cellrange 'RowHeight' = 60.
  SET PROPERTY OF cellrange 'FormulaR1C1' = lv_text_f01.
  line = line + 1.

  CALL METHOD OF excel 'Cells' = cella
    EXPORTING #1 = line
    #2 = 1.

  CALL METHOD OF excel 'Cells' = cellb
    EXPORTING #1 = line
    #2 = 4.

  CALL METHOD OF excel 'Range' = cellrange
    EXPORTING #1 = cella
    #2 = cellb.

  CALL METHOD OF cellrange 'Merge'.

  CLEAR lv_text_f02.
  CONCATENATE text-f03 text-f04 text-f05 text-f07 INTO lv_text_f02 SEPARATED BY ' '.

  SET PROPERTY OF cellrange 'WrapText' = 1.
  SET PROPERTY OF cellrange 'RowHeight' = 100.
  SET PROPERTY OF cellrange 'FormulaR1C1' = lv_text_f02.

ENDFORM.                    "fill_sheet

*&---------------------------------------------------------------------*
*&      Form  border
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->WE
*----------------------------------------------------------------------*
FORM border USING we.

* Left
  CALL METHOD OF cell 'BORDERS' = borders
    EXPORTING
    #1 = '1'.
  SET PROPERTY OF borders 'LineStyle' = '1'.
  SET PROPERTY OF borders 'WEIGHT' = we.                    "4=max
  FREE OBJECT borders.
* Right
  CALL METHOD OF cell 'BORDERS' = borders
    EXPORTING
    #1 = '2'.
  SET PROPERTY OF borders 'LineStyle' = '2'.
  SET PROPERTY OF borders 'WEIGHT' = we.
  FREE OBJECT borders.
* Top
  CALL METHOD OF cell 'BORDERS' = borders
    EXPORTING
    #1 = '3'.
  SET PROPERTY OF borders 'LineStyle' = '3'.
  SET PROPERTY OF borders 'WEIGHT' = we.
  FREE OBJECT borders.
* Bottom
  CALL METHOD OF cell 'BORDERS' = borders
    EXPORTING
    #1 = '4'.
  SET PROPERTY OF borders 'LineStyle' = '4'.
  SET PROPERTY OF borders 'WEIGHT' = we.
* Set property of borders 'ColorIndex' = 'xlAutomatic'.
  FREE OBJECT borders.

ENDFORM.                    "border

*&---------------------------------------------------------------------*
*&      Form  border2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->WE
*----------------------------------------------------------------------*
FORM border2 USING we.

  CALL METHOD OF cell 'BORDERS' = borders
    EXPORTING
    #1 = '4'.
  SET PROPERTY OF borders 'LineStyle' = '4'.
  SET PROPERTY OF borders 'WEIGHT' = we.
*    set property of borders 'ColorIndex' = 'xlAutomatic'.
  FREE OBJECT borders.
ENDFORM.                                                    "border2

*&---------------------------------------------------------------------*
*&      Form  fill_cell
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM fill_cell USING color pattern.

  CALL METHOD OF cell 'INTERIOR' = int."#EC NOTEXT
  SET PROPERTY OF int 'ColorIndex' = color."#EC NOTEXT
  SET PROPERTY OF int 'Pattern' = pattern."#EC NOTEXT
  FREE OBJECT int.

ENDFORM.                    "fill_cell

*---------------------------------------------------------------------*
*       FORM font                                                     *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  bold                                                          *
*  -->  size                                                          *
*---------------------------------------------------------------------*
FORM font USING bold size color.

  CALL METHOD OF cell 'FONT' = font.
  SET PROPERTY OF font 'BOLD' = bold.
  SET PROPERTY OF font 'SIZE' = size.
  SET PROPERTY OF font 'COLORINDEX' = color.
  FREE OBJECT font.

ENDFORM.                    "font

*&---------------------------------------------------------------------*
*&      Form  create_xml                                    "MOD-001
*&---------------------------------------------------------------------*
*       Create XML file
*----------------------------------------------------------------------*
FORM create_xml.

  DATA: xml_out    TYPE xstring.
  DATA: lt_binary  TYPE tsfixml.
  DATA: ls_binary  TYPE LINE OF tsfixml.
  DATA: lv_string  TYPE string.
  DATA: lv_lines   TYPE i.
  DATA: lv_size    TYPE i.

  CONSTANTS: lv_null(1)   TYPE x VALUE '00',
             lv_space(1)  TYPE x VALUE '20'.

* Transform table to XML format
  IF p_cus = 'X'.
    CALL TRANSFORMATION ('ID')
         SOURCE tab = gt_bsid[]
         RESULT XML lv_string.
  ELSE.
    CALL TRANSFORMATION ('ID')
         SOURCE tab = gt_bsik[]
         RESULT XML lv_string.
  ENDIF.

* Change codepage
  REPLACE FIRST OCCURRENCE OF 'utf-16' IN lv_string WITH 'utf-8'.

* Add header data to XML (string)
  PERFORM add_header_to_xml CHANGING lv_string.

* Convert string to xstring
  CALL FUNCTION 'SCMS_STRING_TO_XSTRING'
    EXPORTING
      text           = lv_string
*      MIMETYPE       = ' '
*      ENCODING       =
    IMPORTING
      buffer         = xml_out
    EXCEPTIONS
      failed         = 1
      OTHERS         = 2.
  IF sy-subrc <> 0.
*    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

* Convert xstring to binary.
  CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
    EXPORTING
      buffer          = xml_out
*      APPEND_TO_TABLE = ' '
*    IMPORTING
*      OUTPUT_LENGTH   =
    TABLES
      binary_tab      = lt_binary.

  DESCRIBE TABLE lt_binary LINES lv_lines.
  lv_size = lv_lines * 1024.

* Replace X'00' (null) by X'20' (space) at the end of last line
  READ TABLE lt_binary INDEX lv_lines INTO ls_binary.
  REPLACE ALL OCCURRENCES OF lv_null IN ls_binary WITH lv_space
                             IN BYTE MODE.
  MODIFY lt_binary INDEX lv_lines FROM ls_binary.

* Download
  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      bin_filesize = lv_size
      filetype     = 'BIN'
      filename     = p_upfile
*      codepage     = '4110'
    TABLES
      data_tab     = lt_binary.

ENDFORM.                    "create_xml

*&---------------------------------------------------------------------*
*&      Form  ADD_HEADER_TO_XML                             "MOD-001
*&---------------------------------------------------------------------*
*       Add header data to XML
*----------------------------------------------------------------------*
*      <--P_STRING : XML as string
*----------------------------------------------------------------------*
FORM add_header_to_xml  CHANGING p_string.

  TYPES: BEGIN OF ty_kun,
           kunnr   TYPE kunnr,
           name1   TYPE name1_gp,
         END OF ty_kun.

  DATA: lt_kun  TYPE HASHED TABLE OF ty_kun
                     WITH UNIQUE KEY kunnr
                     WITH HEADER LINE.

  DATA: lv_string_t     TYPE string,
        lv_string_b     TYPE string,
        lv_string_e     TYPE string,
        lv_string_h     TYPE string,
        lv_ofset        TYPE i,
        lv_kunnr        TYPE kunnr,
        lv_date         TYPE char10.

  CLEAR gt_head[].

  lv_string_t = p_string.
* Split string
  FIND FIRST OCCURRENCE OF '<TAB>' IN lv_string_t MATCH OFFSET lv_ofset.
  lv_string_b = lv_string_t(lv_ofset).
  lv_string_e = lv_string_t+lv_ofset.

* Build header
  gt_head-field = '<HEAD_AKT>'.
  APPEND gt_head.
* Customers / Vendors
  SORT s_kunnr BY low.
  DELETE ADJACENT DUPLICATES FROM s_kunnr COMPARING low.
  IF p_cus = 'X'.
    SELECT kunnr name1 INTO TABLE lt_kun
           FROM kna1
           FOR ALL ENTRIES IN s_kunnr
           WHERE kunnr = s_kunnr-low.
    gt_head-field = '<CUSTOMER>'.
  ELSE.
    SELECT lifnr name1 INTO TABLE lt_kun
           FROM lfa1
           FOR ALL ENTRIES IN s_kunnr
           WHERE lifnr = s_kunnr-low.
    gt_head-field = '<VENDOR>'.
  ENDIF.
  APPEND gt_head.
  LOOP AT s_kunnr.
    CONCATENATE '<NUMBER>' s_kunnr-low '</NUMBER>' INTO gt_head-field.
    APPEND gt_head.
    CLEAR lv_name1.
    READ TABLE lt_kun WITH TABLE KEY kunnr = s_kunnr-low.
    lv_name1 = lt_kun-name1.
    CONCATENATE '<NAME>' lv_name1 '</NAME>' INTO gt_head-field.
    APPEND gt_head.
  ENDLOOP.
  IF p_cus = 'X'.
    gt_head-field = '</CUSTOMER>'.
  ELSE.
    gt_head-field = '</VENDOR>'.
  ENDIF.
  APPEND gt_head.
* Selection date
  READ TABLE s_bldat INDEX 1.
  WRITE s_bldat-low  TO lv_date.
  CONCATENATE '<DATAB>' lv_date '</DATAB>' INTO gt_head-field.
  APPEND gt_head.
  WRITE s_bldat-high TO lv_date.
  CONCATENATE '<DATBI>' lv_date '</DATBI>' INTO gt_head-field.
  APPEND gt_head.
* Company
  CONCATENATE '<COMPANY>' p_bukrs '</COMPANY>' INTO gt_head-field.
  APPEND gt_head.
* Opening balances
  PERFORM add_amount USING lv_op_sal       'OPEN_BAL_LC'.
  PERFORM add_amount USING lv_op_sal_rub   'OPEN_BAL_RUB'.
  PERFORM add_amount USING lv_op_sal_eur   'OPEN_BAL_EUR'.
  PERFORM add_amount USING lv_op_sal_usd   'OPEN_BAL_USD'.
* Closing balances
  PERFORM add_amount USING lv_bk_sal       'CLOSE_BAL_LC'.
  PERFORM add_amount USING lv_bk_sal_rub   'CLOSE_BAL_RUB'.
  PERFORM add_amount USING lv_bk_sal_eur   'CLOSE_BAL_EUR'.
  PERFORM add_amount USING lv_bk_sal_usd   'CLOSE_BAL_USD'.
* Total movements (Debit / Credit)
  PERFORM add_amount USING lv_debit_b      'TOT_DEBIT_LC'.
  PERFORM add_amount USING lv_credit_b     'TOT_CREDIT_LC'.
  PERFORM add_amount USING lv_debit_b_rub  'TOT_DEBIT_RUB'.
  PERFORM add_amount USING lv_credit_b_rub 'TOT_CREDIT_RUB'.
  PERFORM add_amount USING lv_debit_b_eur  'TOT_DEBIT_EUR'.
  PERFORM add_amount USING lv_credit_b_eur 'TOT_CREDIT_EUR'.
  PERFORM add_amount USING lv_debit_b_usd  'TOT_DEBIT_USD'.
  PERFORM add_amount USING lv_credit_b_usd 'TOT_CREDIT_USD'.
* Close header
  gt_head-field = '</HEAD_AKT>'.
  APPEND gt_head.

* Convert header to string
  CALL FUNCTION 'SOTR_SERV_TABLE_TO_STRING'
*    EXPORTING
*      FLAG_NO_LINE_BREAKS = 'X'
*      LINE_LENGTH         =
*      LANGU               = SY-LANGU
    IMPORTING
      text                = lv_string_h
    TABLES
      text_tab            = gt_head.

* Return total string
  CONCATENATE lv_string_b lv_string_h lv_string_e
              INTO lv_string_t.
  p_string = lv_string_t.

ENDFORM.                    " ADD_HEADER_TO_XML

*&---------------------------------------------------------------------*
*&      Form  ADD_AMOUNT                                    "MOD-001
*&---------------------------------------------------------------------*
*       Add amount to header in XML
*----------------------------------------------------------------------*
FORM add_amount  USING    p_amount TYPE dmbtr
                          p_text   TYPE string.

  DATA: lv_amount_a     TYPE dmbtr,
        lv_amount_o     TYPE char20.

  lv_amount_a = ABS( p_amount ).
  lv_amount_o = lv_amount_a.
*  REPLACE FIRST OCCURRENCE OF ',' IN lv_amount_o WITH '.'.
  SHIFT lv_amount_o LEFT DELETING LEADING space.
  IF p_amount < 0.
    CONCATENATE '-' lv_amount_o INTO lv_amount_o.
  ENDIF.
  CONCATENATE '<' p_text '>' lv_amount_o '</' p_text '>'
              INTO gt_head-field.
  APPEND gt_head.

ENDFORM.                    " ADD_AMOUNT
