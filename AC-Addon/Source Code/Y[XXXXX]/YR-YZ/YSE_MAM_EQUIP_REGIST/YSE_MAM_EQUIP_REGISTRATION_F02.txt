*&---------------------------------------------------------------------*
*&  Include           YSE_EQUIP_REGISTRATION_F02
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Module  init_9001  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE init_9001 OUTPUT.

  CLEAR ok_code_9001.
  IMPORT t_rec
         d9001_sswerkf d9001_sswerkt
         d9001_sernamf d9001_sernamt
         d9001_serdatf d9001_serdatt
         d9001_sstatus
         p_reqtyp
         t_stat
    FROM MEMORY ID 'YSE_MAM_EQREG'.

ENDMODULE.                 " init_9001  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS_9001  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9001 OUTPUT.

  IF p_reqtyp = 'D'.      " Deregistration
    SET PF-STATUS 'DEREG'.
  ELSE.
    SET PF-STATUS '9001'.
  ENDIF.

  SET TITLEBAR '9001'.

ENDMODULE.                 " STATUS_9001  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  T_TABCT_CHANGE_TC_ATTR  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE t_tabct_change_tc_attr OUTPUT.

*  DESCRIBE TABLE t_rec LINES t_tabct-lines.
  t_tabct-lines = '999'.

ENDMODULE.                 " T_TABCT_CHANGE_TC_ATTR  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  D9001_FILL_REC  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE d9001_fill_rec OUTPUT.

  d9001_linesel    = t_rec-sel.
  d9001_swerk      = t_rec-swerk.
  d9001_ernam      = t_rec-ernam.
  d9001_erdat      = t_rec-erdat.
  d9001_sernr      = t_rec-sernr.
  d9001_eqktx      = t_rec-eqktx.
  d9001_vtext      = t_rec-vtext.
  d9001_tplnr      = t_rec-tplnr.
  d9001_eqart      = t_rec-eqart.
  d9001_equnr      = t_rec-equnr.
  d9001_currstat   = t_rec-ycurrstat.
  d9001_newstat    = t_rec-ynewstat.

  CASE t_rec-ystatus.
    WHEN 'N'.
      d9001_stat = 'New'.
    WHEN 'P'.
      d9001_stat = 'Processed'.
    WHEN 'R'.
      d9001_stat = 'Rejected'.
*    WHEN 'E'.
*      d9001_stat = 'Error'.
  ENDCASE.

ENDMODULE.                 " D9001_FILL_REC  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  EXIT_COMMAND_9001  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE exit_command_9001 INPUT.

  CASE ok_code_9001.
    WHEN 'BACK'.
      gv_ucomm = ok_code_9001.
      EXPORT gv_ucomm i_logtab TO MEMORY ID 'YSE_MAM_EQREG'.
      LEAVE TO SCREEN 0.
    WHEN 'EXIT'.
      gv_ucomm = ok_code_9001.
      EXPORT gv_ucomm i_logtab TO MEMORY ID 'YSE_MAM_EQREG'.
      LEAVE TO SCREEN 0.
    WHEN 'CANCEL'.
      gv_ucomm = ok_code_9001.
      EXPORT gv_ucomm i_logtab TO MEMORY ID 'YSE_MAM_EQREG'.
      LEAVE TO SCREEN 0.
    WHEN OTHERS.
  ENDCASE.

ENDMODULE.                 " EXIT_COMMAND_9001  INPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9001  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_9001 INPUT.

  DATA: lv_sernr         LIKE d9001_sernr,
        lv_equnr         TYPE equnr,
        lv_stat          TYPE tj30t-estat,
        lv_objnr         TYPE v_equi-objnr,
        lv_blank         TYPE equnr,
        lv_off1          TYPE i,
        lv_textline(160) TYPE c,
        l_single_tab     TYPE STANDARD TABLE OF jstat WITH HEADER LINE.


  CASE ok_code_9001.

    WHEN 'BACK'.
      gv_ucomm = ok_code_9001.
      EXPORT gv_ucomm i_logtab TO MEMORY ID 'YSE_MAM_EQREG'.
      LEAVE.

    WHEN 'EXIT'.
      gv_ucomm = ok_code_9001.
      EXPORT gv_ucomm i_logtab TO MEMORY ID 'YSE_MAM_EQREG'.
      LEAVE.

    WHEN 'PROC'.
      REFRESH: i_logtab.
      PERFORM count_lines.

      IF gv_count < 1.                     " no line selected
        MESSAGE s001(00) WITH text-e08.
        SET SCREEN 9001.
        LEAVE SCREEN.
*** MOD-002 * begin ***
*      ELSEIF gv_count > 1.                 " more than 1 line selected
*        MESSAGE s001(00) WITH text-e07.
*        SET SCREEN 9001.
*        LEAVE SCREEN.
*** MOD-002 * end ***
      ELSE.
        LOOP AT t_rec WHERE sel = 'X'.
          IF t_rec-ystatus <> 'N'.
            MESSAGE s001(00) WITH text-e09.
            SET SCREEN 9001.
            LEAVE SCREEN.
          ENDIF.
        ENDLOOP.

        IF p_reqtyp = 'D'.      " Deregistration
*** MOD-002 * begin ***
          IF gv_count > 1.                  " more than 1 line selected
            MESSAGE s001(00) WITH text-e07.
            SET SCREEN 9001.
            LEAVE SCREEN.
          ENDIF.
*** MOD-002 * end ***
          CONCATENATE 'IE' t_rec-equnr INTO lv_objnr.

*........ First de-activate some other statusses in case ...
          CALL FUNCTION 'STATUS_READ'
            EXPORTING
              objnr            = lv_objnr
              only_active      = 'X'
            TABLES
              status           = l_single_tab
            EXCEPTIONS
              object_not_found = 1
              OTHERS           = 2.

          SORT l_single_tab BY stat.

          LOOP AT t_stat.
            READ TABLE l_single_tab WITH KEY stat = t_stat-estat
                 BINARY SEARCH.

            IF sy-subrc = 0.
              CALL FUNCTION 'STATUS_CHANGE_EXTERN'
                EXPORTING
                  client              = sy-mandt
                  objnr               = lv_objnr
                  user_status         = t_stat-estat
                  set_inact           = 'X'
                EXCEPTIONS
                  object_not_found    = 1
                  status_inconsistent = 2
                  status_not_allowed  = 3
                  OTHERS              = 4.

              IF sy-subrc EQ 0.
                COMMIT WORK.
              ELSE.
                CONCATENATE t_rec-swerk t_rec-ernam t_rec-erdat t_rec-sernr INTO gv_msg
                  SEPARATED BY ' - '.
                MESSAGE i001(00) WITH gv_msg ' --> ' text-e20 INTO gv_msg.
                PERFORM add_message_to_tab USING gv_msg 'E'.
              ENDIF.
            ENDIF.
          ENDLOOP.

          CLEAR lv_stat.
          FIND FIRST OCCURRENCE OF 'ZSCR' IN t_rec-ynewstat MATCH OFFSET lv_off1.
          IF sy-subrc = 0.
            lv_stat = t_rec-ynewstat+lv_off1(4).
          ELSE.
            FIND FIRST OCCURRENCE OF 'ZSTO' IN t_rec-ynewstat MATCH OFFSET lv_off1.
            IF sy-subrc = 0.
              lv_stat = t_rec-ynewstat+lv_off1(4).
            ELSE.
              FIND FIRST OCCURRENCE OF 'ZDMA' IN t_rec-ynewstat MATCH OFFSET lv_off1.
              IF sy-subrc = 0.
                lv_stat = t_rec-ynewstat+lv_off1(4).
              ELSE.
                FIND FIRST OCCURRENCE OF 'ZEXP' IN t_rec-ynewstat MATCH OFFSET lv_off1.
                IF sy-subrc = 0.
                  lv_stat = t_rec-ynewstat+lv_off1(4).
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.

*          lv_stat = t_rec-ynewstat(4).
          READ TABLE t_stat WITH KEY txt04 = lv_stat
                 BINARY SEARCH.

          CALL FUNCTION 'STATUS_CHANGE_EXTERN'
            EXPORTING
              client              = sy-mandt
              objnr               = lv_objnr
              user_status         = t_stat-estat
            EXCEPTIONS
              object_not_found    = 1
              status_inconsistent = 2
              status_not_allowed  = 3
              OTHERS              = 4.

          IF sy-subrc EQ 0.
            COMMIT WORK.
            CONCATENATE t_rec-swerk t_rec-ernam t_rec-erdat t_rec-sernr INTO gv_msg
              SEPARATED BY ' - '.
            MESSAGE i001(00) WITH gv_msg ' --> ' text-i19 INTO gv_msg.
            PERFORM add_message_to_tab USING gv_msg ' '.

*.......... Modify status from 'New' to 'Processed'
            PERFORM modify_status USING 'P'.
          ELSE.
            CONCATENATE t_rec-swerk t_rec-ernam t_rec-erdat t_rec-sernr INTO gv_msg
              SEPARATED BY ' - '.
            MESSAGE i001(00) WITH gv_msg ' --> ' text-e19 INTO gv_msg.
            PERFORM add_message_to_tab USING gv_msg 'E'.
          ENDIF.
        ELSE.
*........ Check if serial number already exists/installed
*** MOD-002 * begin ***
          LOOP AT t_rec WHERE sel = 'X'
                          AND ystatus = 'N'.
*** MOD-002 * end ***

            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                input  = t_rec-sernr
              IMPORTING
                output = lv_sernr.

            SELECT SINGLE equnr tplnr
              INTO (gv_equnr, gv_tplnr)
              FROM v_equi
              WHERE sernr EQ lv_sernr
                AND eqart EQ c_eqart
                AND spras EQ sy-langu
                AND datbi EQ c_99991231
                AND iwerk IN s_swerk
                AND lvorm NE 'X'.

            IF sy-subrc = 0.
*.......... Pop-up to warn that selected serial number already exists
*.......... and equipment installed
              lv_textline = text-t02.
              REPLACE '&1' WITH gv_tplnr    INTO lv_textline.
              REPLACE '&2' WITH t_rec-tplnr INTO lv_textline.
              CONDENSE lv_textline.

              CALL FUNCTION 'POPUP_TO_CONFIRM'
                EXPORTING
                titlebar              = text-t01
                text_question         = lv_textline
                text_button_1         = 'Yes'
*           icon_button_1         = 'ICON_OKAY'
                text_button_2         = 'No'
*           icon_button_2         =
                default_button        = '2'
                display_cancel_button = space
              IMPORTING
                answer                = gv_answer
              EXCEPTIONS
                text_not_found        = 1
                OTHERS                = 2.

              IF gv_answer EQ '2'.
                SET SCREEN 9001.
                LEAVE SCREEN.
              ENDIF.

*** MOD-002 * begin ***
*            LOOP AT t_rec WHERE sel = 'X'
*                            AND ystatus = 'N'.
*** MOD-002 * end ***
              SET PARAMETER ID 'EQN' FIELD gv_equnr.
              CALL TRANSACTION 'IE02' AND SKIP FIRST SCREEN.

              CONCATENATE t_rec-swerk t_rec-ernam t_rec-erdat t_rec-sernr INTO gv_msg
                SEPARATED BY ' - '.
              MESSAGE i001(00) WITH gv_msg ' --> ' text-i26 INTO gv_msg.
              PERFORM add_message_to_tab USING gv_msg ' '.

*............ Modify status from 'New' to 'Processed'
              PERFORM modify_status USING 'P'.
*** MOD-002 * begin ***
              CLEAR t_rec-sel.
              MODIFY t_rec.
            ENDIF.
*** MOD-002 * end ***
          ENDLOOP.
*          ELSE.                            "MOD-002
*.......... Create new equipment
*** MOD-002 * begin ***
          CLEAR  t_floc[].
          t_rec_cr[] = t_rec[].
*** MOD-002 * end ***
          LOOP AT t_rec WHERE sel = 'X'
                          AND ystatus = 'N'.
*** MOD-002 * begin ***
            READ TABLE t_floc WITH KEY tplnr = t_rec-tplnr.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
            CLEAR t_messtab[].
*** MOD-002 * end ***
            SET PARAMETER ID 'EQN' FIELD lv_blank.
            PERFORM create_equip.
            CALL TRANSACTION 'YAM_EQUI' USING i_bdcdata
                                        MODE gv_mod
                                        UPDATE 'S'
                                        MESSAGES INTO t_messtab.   "MOD-002
*** MOD-002 * begin ***
            t_floc-tplnr = t_rec-tplnr.
            APPEND t_floc.

*            GET PARAMETER ID 'EQN' FIELD lv_equnr.
*            IF lv_equnr IS INITIAL.
*              CONCATENATE t_rec-swerk t_rec-ernam t_rec-erdat t_rec-sernr INTO gv_msg
*                SEPARATED BY ' - '.
*              MESSAGE i001(00) WITH gv_msg ' --> ' text-e15 INTO gv_msg.
*              PERFORM add_message_to_tab USING gv_msg 'E'.
*            ELSE.
**.............. ok
*              CONCATENATE t_rec-swerk t_rec-ernam t_rec-erdat t_rec-sernr INTO gv_msg
*                SEPARATED BY ' - '.
*              MESSAGE i001(00) WITH gv_msg ' --> ' text-i18 INTO gv_msg.
*              PERFORM add_message_to_tab USING gv_msg ' '.
*.............. Modify status from 'New' to 'Processed'
*              PERFORM modify_status USING 'P'.
*            ENDIF.
*** MOD-002 * end ***
          ENDLOOP.

*** MOD-002 * begin ***
*         Check if equipments are created. If so, change status
          LOOP AT t_rec WHERE sel     = 'X'
                          AND ystatus = 'N'
                          AND tplnr   = t_rec-tplnr.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                input  = t_rec-sernr
              IMPORTING
                output = lv_sernr.

            SELECT SINGLE equnr tplnr
                   INTO (gv_equnr, gv_tplnr)
                   FROM v_equi
                   WHERE sernr EQ lv_sernr
                     AND eqart EQ c_eqart
                     AND spras EQ sy-langu
                     AND datbi EQ c_99991231
                     AND iwerk IN s_swerk
                     AND lvorm NE 'X'.

            IF sy-subrc = 0.
**........... OK
              CONCATENATE t_rec-swerk t_rec-ernam t_rec-erdat t_rec-sernr INTO gv_msg
                SEPARATED BY ' - '.
              MESSAGE i001(00) WITH gv_msg ' --> ' text-i18 INTO gv_msg.
              PERFORM add_message_to_tab USING gv_msg ' '.
*............ Modify status from 'New' to 'Processed'
              PERFORM modify_status USING 'P'.
            ENDIF.
          ENDLOOP.
*** MOD-002 * end ***

*          ENDIF.                           "MOD-002
        ENDIF.
        gv_ucomm = ok_code_9001.
        EXPORT gv_ucomm i_logtab TO MEMORY ID 'YSE_MAM_EQREG'.
        LEAVE TO SCREEN 0.
      ENDIF.

    WHEN 'REJE'.
      REFRESH: i_logtab.
      PERFORM count_lines.

      IF gv_count < 1.                     " no line selected
        MESSAGE s001(00) WITH text-e08.
        SET SCREEN 9001.
        LEAVE SCREEN.
*** MOD-004 * begin ***
*      ELSEIF gv_count > 1.                 " more than 1 line selected
*        MESSAGE s001(00) WITH text-e07.
*        SET SCREEN 9001.
*        LEAVE SCREEN.
*** MOD-004 * end   ***
      ELSE.
        LOOP AT t_rec WHERE sel = 'X'.
          IF t_rec-ystatus <> 'N'.
            MESSAGE s001(00) WITH text-e10.
            SET SCREEN 9001.
            LEAVE SCREEN.
          ENDIF.
        ENDLOOP.

*...... Pop-up to warn that the selected NEW line will be rejected
        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
            titlebar              = text-t01
            text_question         = text-t03
            text_button_1         = 'Yes'
*           icon_button_1         = 'ICON_OKAY'
            text_button_2         = 'No'
*           icon_button_2         =
            default_button        = '2'
            display_cancel_button = space
          IMPORTING
            answer                = gv_answer
          EXCEPTIONS
            text_not_found        = 1
            OTHERS                = 2.

        IF gv_answer EQ '2'.
          SET SCREEN 9001.
          LEAVE SCREEN.
        ENDIF.

        LOOP AT t_rec.
          IF t_rec-sel = 'X' AND t_rec-ystatus = 'N'.
*.......... Modify status from 'New' to 'Rejected'
            PERFORM modify_status USING 'R'.

            IF sy-subrc <> 0.
              CONCATENATE t_rec-swerk t_rec-ernam t_rec-erdat t_rec-sernr INTO gv_msg
                SEPARATED BY ' - '.
              MESSAGE i001(00) WITH gv_msg ' --> ' text-e14 INTO gv_msg.
              PERFORM add_message_to_tab USING gv_msg 'E'.
*              PERFORM get_trans_messages TABLES gt_err.
            ELSE.
*............ ok
              CONCATENATE t_rec-swerk t_rec-ernam t_rec-erdat t_rec-sernr INTO gv_msg
                SEPARATED BY ' - '.
              MESSAGE i001(00) WITH gv_msg ' --> ' text-i17 INTO gv_msg.
              PERFORM add_message_to_tab USING gv_msg ' '.
            ENDIF.
          ENDIF.
*          exit.
        ENDLOOP.

        gv_ucomm = ok_code_9001.
        EXPORT gv_ucomm i_logtab TO MEMORY ID 'YSE_MAM_EQREG'.
        LEAVE TO SCREEN 0.
      ENDIF.

    WHEN 'UPDA'.
      REFRESH: i_logtab.
      PERFORM count_lines.

      IF gv_count < 1.                     " no line selected
        MESSAGE s001(00) WITH text-e08.
        SET SCREEN 9001.
        LEAVE SCREEN.
      ELSEIF gv_count > 1.                 " more than 1 line selected
        MESSAGE s001(00) WITH text-e07.
        SET SCREEN 9001.
        LEAVE SCREEN.
      ELSE.
        LOOP AT t_rec WHERE sel = 'X'.
          IF t_rec-ystatus <> 'P'.
            MESSAGE s001(00) WITH text-e11.
            SET SCREEN 9001.
            LEAVE SCREEN.
          ENDIF.
        ENDLOOP.

        LOOP AT t_rec WHERE sel = 'X'
                        AND ystatus = 'P'.
          SET PARAMETER ID 'EQN' FIELD t_rec-equnr.
          CALL TRANSACTION 'IE02' AND SKIP FIRST SCREEN.

          CONCATENATE t_rec-swerk t_rec-ernam t_rec-erdat t_rec-sernr INTO gv_msg
            SEPARATED BY ' - '.
          MESSAGE i001(00) WITH gv_msg ' --> ' text-i26 INTO gv_msg.
          PERFORM add_message_to_tab USING gv_msg ' '.

*........ Modify status from 'New' to 'Processed'
          PERFORM modify_status USING 'P'.
        ENDLOOP.
        gv_ucomm = ok_code_9001.
        EXPORT gv_ucomm i_logtab TO MEMORY ID 'YSE_MAM_EQREG'.
        LEAVE TO SCREEN 0.
      ENDIF.

    WHEN 'DISM'.
      REFRESH: i_logtab.
      PERFORM count_lines.

      IF gv_count < 1.                     " no line selected
        MESSAGE s001(00) WITH text-e08.
        SET SCREEN 9001.
        LEAVE SCREEN.
      ELSEIF gv_count > 1.                 " more than 1 line selected
        MESSAGE s001(00) WITH text-e07.
        SET SCREEN 9001.
        LEAVE SCREEN.
      ELSE.
        LOOP AT t_rec WHERE sel = 'X'.
          IF t_rec-ystatus <> 'P'.
            MESSAGE s001(00) WITH text-e12.
            SET SCREEN 9001.
            LEAVE SCREEN.
          ENDIF.
        ENDLOOP.

        LOOP AT t_rec WHERE sel = 'X'
                        AND ystatus = 'P'.
          SET PARAMETER ID 'EQN' FIELD t_rec-equnr.
          CALL TRANSACTION 'IE02' AND SKIP FIRST SCREEN.

          CONCATENATE t_rec-swerk t_rec-ernam t_rec-erdat t_rec-sernr INTO gv_msg
            SEPARATED BY ' - '.
          MESSAGE i001(00) WITH gv_msg ' --> ' text-i26 INTO gv_msg.
          PERFORM add_message_to_tab USING gv_msg ' '.

*........ Modify status from 'New' to 'Processed'
          PERFORM modify_status USING 'P'.
        ENDLOOP.
        gv_ucomm = ok_code_9001.
        EXPORT gv_ucomm i_logtab TO MEMORY ID 'YSE_MAM_EQREG'.
        LEAVE TO SCREEN 0.
      ENDIF.
* begin of insert MOD-003
    WHEN 'SELA'.       "Select all lines
      LOOP AT t_rec.
        t_rec-sel = 'X'.
        MODIFY t_rec.
      ENDLOOP.
      gv_ucomm = ok_code_9001.
      EXPORT t_rec
             TO MEMORY ID 'YSE_MAM_EQREG'.
      SET SCREEN 9001.
      LEAVE SCREEN.
    WHEN 'DSEL'.       "Deselect all lines
      LOOP AT t_rec.
        t_rec-sel = ' '.
        MODIFY t_rec.
      ENDLOOP.
      gv_ucomm = ok_code_9001.
      EXPORT t_rec
             TO MEMORY ID 'YSE_MAM_EQREG'.
      SET SCREEN 9001.
      LEAVE SCREEN.
    WHEN 'EXPO'.
      REFRESH: i_logtab.
      PERFORM count_lines.
      IF gv_count < 1.                     " no line selected
        MESSAGE s001(00) WITH text-e08.
        SET SCREEN 9001.
        LEAVE SCREEN.
      ELSE.
*...... Export selected lines
        LOOP AT t_rec WHERE sel = 'X'.
          MOVE-CORRESPONDING t_rec TO t_export.
          APPEND t_export.
          CLEAR t_export.
        ENDLOOP.

        PERFORM save_table_to_file_local TABLES t_export
                                         CHANGING gv_user_action.

        if gv_user_action <> '9'.            "Canceled
          gv_ucomm = ok_code_9001.
          EXPORT gv_ucomm i_logtab TO MEMORY ID 'YSE_MAM_EQREG'.
          LEAVE TO SCREEN 0.
        endif.
      ENDIF.
* end of insert MOD-003
    WHEN OTHERS.
      EXPORT t_rec TO MEMORY ID 'YSE_MAM_EQREG'.
      SET SCREEN 9001.
      LEAVE SCREEN.

  ENDCASE.

ENDMODULE.                 " USER_COMMAND_9001  INPUT

*&---------------------------------------------------------------------*
*&      Module  D9001_SELECTLINE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE d9001_selectline INPUT.

  READ TABLE t_rec INDEX t_tabct-current_line.
  IF sy-subrc = 0.
    IF d9001_linesel = 'X'.
      t_rec-sel = 'X'.
    ELSE.
      CLEAR t_rec-sel.
    ENDIF.
    MODIFY t_rec INDEX t_tabct-current_line.
  ENDIF.

ENDMODULE.                 " D9001_SELECTLINE  INPUT

*&---------------------------------------------------------------------*
*&      Form  ADD_MESSAGE_TO_TAB
*&---------------------------------------------------------------------*
*       Add messages to log
*----------------------------------------------------------------------*
FORM add_message_to_tab USING p_msg p_cod.

  i_logtab-msg = p_msg.
  i_logtab-cod = p_cod.
  APPEND i_logtab.
  CLEAR i_logtab.

ENDFORM.                    " ADD_MESSAGE_TO_TAB

*&---------------------------------------------------------------------*
*&      Form  COUNT_LINES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM count_lines .

  CLEAR: gv_count.
  LOOP AT t_rec.
    IF t_rec-sel = 'X'.
      gv_count = gv_count + 1.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " COUNT_LINES

*&---------------------------------------------------------------------*
*&      Form  MODIFY_STATUS
*&---------------------------------------------------------------------*
*       Modify status in custom table
*----------------------------------------------------------------------*
FORM modify_status USING r_stat.

  UPDATE yse_mam_eqreg SET ystatus = r_stat
    WHERE swerk = t_rec-swerk
      AND ernam = t_rec-ernam
      AND erdat = t_rec-erdat
      AND sernr = t_rec-sernr.

ENDFORM.                    " MODIFY_STATUS

*&---------------------------------------------------------------------*
*&      Form  CREATE_EQUIP
*&---------------------------------------------------------------------*
*       Create equipment
*----------------------------------------------------------------------*
FORM create_equip .

  DATA: lv_bukrs TYPE bukrs,
        lv_vkorg TYPE vkorg,
        lv_vtweg TYPE vtweg,
        lv_vkbur TYPE vkbur,
        lv_vkgrp TYPE vkgrp,
        lv_ingrp TYPE ingrp,
        lv_lgwid TYPE lgwid,
        lv_workc TYPE arbpl,
        lv_spart TYPE spart.
*** MOD-002 * begin ***
  DATA: lv_sline   TYPE num02,
        lv_sfield  TYPE char20.
*** MOD-002 * end ***

  REFRESH: i_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    'YAM_EQUI_CREATE'  '9001'  'X'  ''   ''
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  SELECT SINGLE bukrs INTO lv_bukrs
         FROM t001k
         WHERE bwkey = t_rec-swerk.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'T001-BUKRS'  lv_bukrs
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'AFIH-IWERK'  t_rec-swerk
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  SELECT SINGLE vkorg vtweg vkbur vkgrp ingrp lgwid
    INTO (lv_vkorg, lv_vtweg, lv_vkbur, lv_vkgrp, lv_ingrp, lv_lgwid)
    FROM iflo
    WHERE tplnr = t_rec-tplnr
      AND spras = sy-langu.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'VBAK-VKORG'  lv_vkorg
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'VBAK-VTWEG'  lv_vtweg
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  SELECT SINGLE spart INTO lv_spart
    FROM tspat WHERE spras = sy-langu
                 AND vtext = t_rec-vtext.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'VBAK-SPART'  lv_spart
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'AFIH-INGPR'  lv_ingrp
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'VBAK-VKBUR'  lv_vkbur
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'VBAK-VKGRP'  lv_vkgrp
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'ITOB-TPLNR'  t_rec-tplnr
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  SELECT SINGLE arbpl INTO lv_workc
    FROM crhd WHERE objty = 'A'
                AND objid = lv_lgwid.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
       USING    ''  ''  ''  'AFVGD-ARBPL'  lv_workc
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

*** MOD-002 * begin ***
*  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*       USING    ''  ''  ''  'D9001_SERNR(01)'  t_rec-sernr
*          CHANGING struct_bdcdata.
*  APPEND struct_bdcdata  TO i_bdcdata.
*  CLEAR  struct_bdcdata.
*
*  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*       USING    ''  ''  ''  'D9001_DESC(01)'  t_rec-eqktx
*          CHANGING struct_bdcdata.
*  APPEND struct_bdcdata  TO i_bdcdata.
*  CLEAR  struct_bdcdata.

  CLEAR lv_sline.

  LOOP AT t_rec_cr WHERE sel     = 'X'
                     AND ystatus = 'N'
                     AND tplnr   = t_rec-tplnr.

    lv_sline = lv_sline + 1.
    CONCATENATE 'D9001_SERNR(' lv_sline ')' INTO lv_sfield.
    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
         USING    ''  ''  ''  lv_sfield  t_rec_cr-sernr
            CHANGING struct_bdcdata.
    APPEND struct_bdcdata  TO i_bdcdata.
    CLEAR  struct_bdcdata.

    CONCATENATE 'D9001_DESC(' lv_sline ')' INTO lv_sfield.
    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
         USING    ''  ''  ''  lv_sfield  t_rec_cr-eqktx
            CHANGING struct_bdcdata.
    APPEND struct_bdcdata  TO i_bdcdata.
    CLEAR  struct_bdcdata.
  ENDLOOP.
*** MOD-002 * end ***

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING    ''  ''  ''  'BDC_OKCODE'  '=EXEC'
           CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

ENDFORM.                    " CREATE_EQUIP

*----------------------------------------------------------------------*
*       Move t_export in the given file               "MOD-003
*----------------------------------------------------------------------*
*       -->I_FILE
*----------------------------------------------------------------------*
FORM save_table_to_file_local  TABLES  i_file STRUCTURE t_export
                               CHANGING user_action.

  TYPES: abap_encoding TYPE abap_encod.

  DATA: filefilter TYPE string,
        fullpath TYPE string.
  DATA: file_encoding TYPE abap_encoding,
        default_extension type string value 'xls',
        param_extension type c length 20.

  clear user_action.
  get parameter id 'LIST_CONVERT_TO_DAT' field param_extension.
  if sy-subrc = 0.
    translate param_extension to lower case.
    default_extension = param_extension.
  endif.
  filefilter = text-xls.

  CALL FUNCTION 'GUI_FILE_SAVE_DIALOG'
    EXPORTING
      file_filter       = filefilter
      default_extension = default_extension
      with_encoding     = 'X'
    IMPORTING
      fullpath          = fullpath
      user_action       = user_action
      file_encoding     = file_encoding.

  if file_encoding is initial.
    file_encoding = '4103'.                               "UTF16-LE
  endif.

  MOVE  'Plant' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Request_by' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Request_date' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Equipment_Serial' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Equipment_Description' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Brand' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Functional_Location' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Equipment_Type' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Status' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Equipment_number' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Current_user_status' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'New_user_status' to it_title-title.
  APPEND it_title.
  clear it_title.

  MOVE  'Type' to it_title-title.
  APPEND it_title.
  clear it_title.

  IF user_action = 1 OR user_action = 0.                  "Replace or Load
    CALL FUNCTION 'GUI_DOWNLOAD'
      EXPORTING
        filename         = fullpath
        filetype         = 'ASC'
        codepage         = file_encoding
        WRITE_FIELD_SEPARATOR = 'X'
        write_bom        = 'X'
      TABLES
        data_tab         = i_file
        fieldnames       = it_title
      EXCEPTIONS
        file_write_error = 01
        no_batch         = 04
        unknown_error    = 05
        OTHERS           = 99.

    CASE sy-subrc.
      WHEN 0.
      WHEN OTHERS.
        MESSAGE i050(02) RAISING some_error.
    ENDCASE.
    REFRESH i_file.
  ELSEIF user_action = 2.                                 "Append
    CALL FUNCTION 'GUI_DOWNLOAD'
      EXPORTING
        append                = 'X'
        filename              = fullpath
        filetype              = 'ASC'
        trunc_trailing_blanks = 'X'
        WRITE_FIELD_SEPARATOR = 'X'
        write_bom             = 'X'
        codepage              = file_encoding
      TABLES
        data_tab              = i_file
      EXCEPTIONS
        invalid_type          = 03
        no_batch              = 04
        unknown_error         = 05
        OTHERS                = 99.
    CASE sy-subrc.
      WHEN 0.
      WHEN OTHERS.
        MESSAGE i050(02) RAISING some_error.
    ENDCASE.
  ENDIF.

ENDFORM.                    " save_table_to_file_local
