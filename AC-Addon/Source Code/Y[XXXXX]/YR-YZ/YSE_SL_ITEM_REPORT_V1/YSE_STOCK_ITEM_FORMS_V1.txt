*&---------------------------------------------------------------------*
*&  Include           YSE_STOCK_ITEM_FORMS_V1
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&  Include           YSE_STOCK_ITEM_FORMS                             *
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  FILL_GAC_PGC_TABLE
*&---------------------------------------------------------------------*
FORM FILL_GAC_PGC_TABLE.

* Select all level 2 hierarchy codes from the prodh table
  SELECT *
         FROM T179
         INTO TABLE IT_T179
        WHERE STUFE = '2'.

ENDFORM.                    "fill_gac_pgc_table

*&---------------------------------------------------------------------*
*&      Form  CHECK_GAC_PGC
*&---------------------------------------------------------------------*
FORM  CHECK_GAC_PGC.

* Default fields in range
  R_PRDHA-SIGN   = 'I'.
  R_PRDHA-OPTION = 'EQ'.

* Loop over hierarchy codes where the first 4 char's fit in S_GAC
  CLEAR WA_T179-PRODH.
  IF NOT S_GAC IS INITIAL.
    LOOP AT IT_T179 INTO WA_T179 WHERE PRODH(4) IN S_GAC.
      R_PRDHA-LOW = WA_T179-PRODH.
      APPEND R_PRDHA.
    ENDLOOP.
* Show message if s_gac is a non existing gac and therefore no selection is made
    IF WA_T179-PRODH IS INITIAL.
      MESSAGE E043.
    ENDIF.
  ENDIF.

* Loop over hierarchy codes where the second 4 char's fit in S_PGC
  CLEAR WA_T179-PRODH.
  IF NOT S_PGC IS INITIAL.
    LOOP AT IT_T179 INTO WA_T179 WHERE PRODH+4(4) IN S_PGC.
      R_PRDHA-LOW = WA_T179-PRODH.
      APPEND R_PRDHA.
    ENDLOOP.
* Show message if s_pgc is a non existing gac and therefore no selection is made
    IF WA_T179-PRODH IS INITIAL.
      MESSAGE E044.
    ENDIF.
  ENDIF.

ENDFORM.                    "CHECK_GAC_PGC

*&---------------------------------------------------------------------*
*&      Form  get_material_stock
*&---------------------------------------------------------------------*
FORM GET_MATERIAL_STOCK.


* Select the materials which correspond to most of the selection crit.
  SELECT      A~MATNR C~WERKS D~LGORT
* begin of MOD-013
*              a~mtart
* end of MOD-013
              A~MATKL C~MMSTA A~MEINS
              A~PRDHA B~MAKTX BC~MAKTX
* begin of MOD-013
*              bd~maktx
* end of MOD-013
              C~DISMM D~LABST D~INSME D~SPEME D~RETME
* begin of MOD-013
*              d~umlme
* end of MOD-013
* Begin of insert MOD-010
              D~LMINB
* End of insert MOD-010
* begin of MOD-013
*              c~umlmc
*              c~trame
* end of MOD-013
              C~MINBE C~BSTFE C~EISBE C~LGRAD
              C~PLIFZ
* begin of MOD-013
*              c~maxlz
* end of MOD-013
              C~MMSTD C~NFMAT C~PRCTR D~LGPBE
         INTO TABLE IT_MATERIAL
         FROM MARA AS A
        INNER JOIN MAKT AS B
           ON A~MATNR = B~MATNR
* Begin of insert MOD-010
        INNER JOIN MVKE AS M
           ON A~MATNR = M~MATNR
* End of insert MOD-010
        LEFT OUTER JOIN MAKT AS BC
           ON A~MATNR = BC~MATNR AND BC~SPRAS EQ '1'
* begin of MOD-013
** Begin of insert MOD-007
*        LEFT OUTER JOIN makt AS bd
*           ON a~matnr = bd~matnr AND bd~spras EQ 'R'
** End of insert MOD-007
* end of MOD-013
        INNER JOIN MARC AS C
           ON A~MATNR = C~MATNR
        LEFT OUTER JOIN MARD AS D
           ON C~MATNR = D~MATNR
          AND C~WERKS = D~WERKS
        WHERE A~LVORM EQ SPACE
          AND A~MATNR IN S_MATNR
*          AND A~PRDHA IN R_PRDHA
          AND B~SPRAS = 'E'
          AND C~WERKS EQ P_WERKS
*          AND D~LGORT EQ P_LGORT.
* Begin of insert MOD-010
          AND M~VKORG EQ P_SALORG.
* End of insert MOD-010


* Eliminate records where Storage location is filled but in conflict with selection parameter
  LOOP AT IT_MATERIAL.
    IF IT_MATERIAL-LGORT NE SPACE AND NOT IT_MATERIAL-LGORT IN S_LGORT.
      DELETE IT_MATERIAL.
    ENDIF.
  ENDLOOP.

* Check if stock found
  IF SY-SUBRC NE 0.
    MESSAGE S002.  " No stock found
    GV_NORESULT = 'X'.
    EXIT.
  ELSE.
*   If stock found, sort the selected data
    SORT IT_MATERIAL BY MATNR WERKS LGORT.
  ENDIF.

* Get the superseding items
  SELECT      MATNR NFMAT
         INTO TABLE IT_SUPERS
         FROM MARC
        WHERE (    MATNR IN S_MATNR
                OR NFMAT IN S_MATNR )
          AND WERKS EQ P_WERKS.

* Get special stock from MSKU
  SELECT      MATNR WERKS SUM( E~KULAB )
         INTO TABLE IT_MSKU
         FROM MSKU AS E
        WHERE MATNR IN S_MATNR
          AND WERKS EQ P_WERKS
          AND SOBKZ EQ 'W'
        GROUP BY MATNR WERKS.

* Get sales order stock from MSKA
  SELECT      MATNR WERKS LGORT SUM( E~KALAB )
         INTO TABLE IT_MSKA
         FROM MSKA AS E
        WHERE MATNR IN S_MATNR
          AND WERKS EQ P_WERKS
          AND LGORT IN S_LGORT
          AND SOBKZ EQ 'E'
        GROUP BY MATNR WERKS LGORT.

* begin of insert MOD-008
* Get additional storage locations from table with sales order stock
  LOOP AT IT_MSKA.
    READ TABLE IT_MATERIAL WITH KEY MATNR = IT_MSKA-MATNR
                                    WERKS = IT_MSKA-WERKS
                                    LGORT = IT_MSKA-LGORT
                              BINARY SEARCH.
    IF SY-SUBRC <> 0.
      READ TABLE IT_MATERIAL WITH KEY MATNR = IT_MSKA-MATNR
                                      WERKS = IT_MSKA-WERKS
                                BINARY SEARCH.
      IF SY-SUBRC = 0.
        CLEAR: IT_MATERIAL-LABST,
               IT_MATERIAL-INSME,
               IT_MATERIAL-SPEME,
               IT_MATERIAL-RETME,
* begin of MOD-013
*               it_material-umlme,
* end of MOD-013
               IT_MATERIAL-LGPBE.
        IT_MATERIAL-LGORT = IT_MSKA-LGORT.
        APPEND IT_MATERIAL.
      ENDIF.
    ENDIF.
  ENDLOOP.
  SORT IT_MATERIAL BY MATNR WERKS LGORT.
* end of insert MOD-008

ENDFORM.                    " GET_MATERIAL_STOCK

*&---------------------------------------------------------------------*
*&      Form  output_table_fill
*&---------------------------------------------------------------------*
FORM OUTPUT_TABLE_FILL.

  DATA:
    LV_SKIP TYPE C.
* begin of insertion MOD-004
  DATA : GV_BUKRS TYPE BUKRS,
         GV_BWKEY TYPE BWKEY.



* Begin of insert MOD-007
  TYPES: BEGIN OF TY_MCHA,
          ERSDA TYPE ERSDA,
          MATNR TYPE MATNR,
          BWART TYPE BWART,
          CHARG TYPE CHARG_D,
         END OF   TY_MCHA.



  CONSTANTS: LC_ATNAM       TYPE CABN-ATNAM  VALUE 'ZRU_GR_DATE'.

  DATA: LV_CHARG TYPE CHARG_D.

  DATA: V_CUOBJ_BM       TYPE MCHA-CUOBJ_BM,
        INOB_KLART       TYPE INOB-KLART,
        INOB_OBJEK       TYPE INOB-OBJEK,
        INOB_OBTAB       TYPE INOB-OBTAB,
        IT_CLASS         TYPE TABLE OF SCLASS,
        IT_CLOBJDAT      TYPE TABLE OF CLOBJDAT WITH HEADER LINE.



* End of insert MOD-007

  CLEAR: GV_BUKRS, GV_BWKEY.
  SELECT SINGLE BWKEY INTO GV_BWKEY FROM T001W
    WHERE WERKS = P_WERKS.
  SELECT SINGLE BUKRS INTO GV_BUKRS FROM T001K
    WHERE BWKEY = GV_BWKEY.

  SORT:
* begin of MOD-013
    IT_T141T        BY MMSTA,
* end of MOD-013
    IT_EORD         BY MATNR WERKS,
    IT_MSKU         BY MATNR WERKS,
    IT_MBEW         BY MATNR WERKS,
    IT_MSKA         BY MATNR WERKS LGORT,
    IT_ALLOC        BY MATNR WERKS LGORT,
* begin of MOD-013
*    it_matplant     BY matnr werks,
* end of MOD-013
    IT_EINE         BY MATNR WERKS,
* begin of MOD-013
*    it_evers        BY evers,
* end of MOD-013
    IT_MVKE         BY MATNR,
* begin of MOD-013
*    it_mvgr5        BY mvgr5,
*    it_stbo_so      BY matnr werks lgort,
*    it_transit_aggr BY matnr werks lgort,
* end of MOD-013
    IT_SOHIST       BY MATNR,
    IT_FCHDR        BY MATNR.

* Loop through stock per StLoc table
  LOOP AT IT_MATERIAL.

*   Copy fields from master table to output table
    CLEAR WA_OUTPUT.
*   WA_OUTPUT-GAC   = IT_MATERIAL-PRDHA(4).    " GAC
*   WA_OUTPUT-PGC   = IT_MATERIAL-PRDHA+4(4).  " PGC
    WA_OUTPUT-MATNR = IT_MATERIAL-MATNR.       " Material number
    WA_OUTPUT-MAKTX = IT_MATERIAL-MAKTX.       " Material description
    WA_OUTPUT-MAKTX_C = IT_MATERIAL-MAKTX_C.   " Chinese Material description
* begin of MOD-013
** Begin of insert MOD-007
*    wa_output-maktx_d = it_material-maktx_d.   " Russian Material description
** End of insert MOD-007
*    wa_output-mtart = it_material-mtart.       " Mat type
* end of MOD-013
    WA_OUTPUT-MATKL = IT_MATERIAL-MATKL.       " Mat grp
    WA_OUTPUT-WERKS = IT_MATERIAL-WERKS.       " Plant
    WA_OUTPUT-LGORT = IT_MATERIAL-LGORT.       " Storage location
* begin of insertion MOD-004
    CALL FUNCTION 'YSE_CONVERT_PRCTR_BL'
      EXPORTING
        PRCTR_IN    = IT_MATERIAL-PRCTR
        BUKRS       = GV_BUKRS
      IMPORTING
        SEGMENT_OUT = IT_MATERIAL-PRCTR.
* end of insertion MOD-004

* begin of MOD-013
** Begin of insert MOD-007
** Get storage date of oldest batch
*
*    IF it_material-lgort IS INITIAL.
*      SELECT MIN( charg )
*            INTO lv_charg
*            FROM mchb
*          WHERE    mchb~matnr  EQ it_material-matnr AND
*                   mchb~lgort  EQ '1000' AND
*                   mchb~werks  EQ it_material-werks AND
*                   mchb~clabs <> 0.
*
*    ELSE.
*      SELECT MIN( charg )
*            INTO lv_charg
*            FROM mchb
*          WHERE    mchb~matnr  EQ it_material-matnr AND
*                   mchb~lgort  EQ it_material-lgort AND
*                   mchb~werks  EQ it_material-werks AND
*                   mchb~clabs <> 0.
*    ENDIF.
*
*    SELECT SINGLE cuobj_bm " for batch detail
*     FROM mcha
*     INTO v_cuobj_bm
*     WHERE matnr = it_material-matnr
*     AND charg = lv_charg
*     AND werks = it_material-werks.
*
*    IF v_cuobj_bm IS NOT INITIAL. " for object link with material
*      SELECT SINGLE klart
*      objek
*      obtab
*      FROM inob
*      INTO (inob_klart,inob_objek,inob_obtab)
*      WHERE cuobj = v_cuobj_bm.
*    ENDIF.
*
*    IF inob_klart IS NOT INITIAL
*    AND inob_objek IS NOT INITIAL
*    AND inob_obtab IS NOT INITIAL.
*
*      CALL FUNCTION 'CLAF_CLASSIFICATION_OF_OBJECTS' " extract Batch Characteristics
*      EXPORTING
*      classtype = inob_klart
*      features = 'X'
*      language = sy-langu
*      object = inob_objek
*      objecttable = inob_obtab
*      TABLES
*      t_class = it_class
*      t_objectdata = it_clobjdat
*      EXCEPTIONS
*      no_classification = 1
*      no_classtypes = 2
*      invalid_class_type = 3
*      OTHERS = 4.
*
*      READ TABLE it_clobjdat WITH KEY atnam = lc_atnam.
*      IF sy-subrc = 0 .
*        CONCATENATE it_clobjdat-ausp1+6(4)  it_clobjdat-ausp1+3(2) it_clobjdat-ausp1+0(2) INTO wa_output-ersda.
*      ENDIF.
*    ENDIF.
*
** End of insert MOD-007
* end of MOD-013

    WA_OUTPUT-PRCTR = IT_MATERIAL-PRCTR.       " Profit center
    WA_OUTPUT-MMSTA = IT_MATERIAL-MMSTA.       " Mat status
    WA_OUTPUT-MMSTD = IT_MATERIAL-MMSTD.       " Valid from
    WA_OUTPUT-LABST = IT_MATERIAL-LABST.       " UU stock
    WA_OUTPUT-INSME = IT_MATERIAL-INSME.       " QI stock
    WA_OUTPUT-SPEME = IT_MATERIAL-SPEME.       " Blocked stock
    WA_OUTPUT-RETME = IT_MATERIAL-RETME.       " Return stock
* begin of MOD-013
*    wa_output-umlmc = it_material-umlmc.       " Stock in transfer (plant)
*    wa_output-umlme = it_material-umlme.       " Stock in transfer (StLoc)
*    wa_output-trame = it_material-trame.       " Stock in transit (plant)
* end of MOD-013
* Begin of insert MOD-010
    IF IT_MATERIAL-LGORT = '1000'
    OR IT_MATERIAL-LGORT = '6100'
    OR IT_MATERIAL-LGORT = '6200'. "CD1K979910 #CR3022
* End of insert MOD-010
      WA_OUTPUT-MINBE = IT_MATERIAL-MINBE.       " Reorder point
* Begin of insert MOD-010
    ELSE.
      WA_OUTPUT-MINBE = IT_MATERIAL-LMINB.       " Reorder point
    ENDIF.
    WA_OUTPUT-VKORG = IT_MATERIAL-VKORG.      "Sales Organisation
* begin of MOD-013
*    wa_output-ekorg = gv_ekorg.               "Purcharse Organisation
* end of MOD-013
    WA_OUTPUT-VKORG = P_SALORG.               "Sales Organisation
* End of insert MOD-010
    WA_OUTPUT-BSTFE = IT_MATERIAL-BSTFE.       " Lot size
    WA_OUTPUT-EISBE = IT_MATERIAL-EISBE.       " Safety stock
    WA_OUTPUT-LGRAD = IT_MATERIAL-LGRAD.       " Service level
    WA_OUTPUT-PLIFZ = IT_MATERIAL-PLIFZ.       " Planned delivery time (mat)
* begin of MOD-013
*    wa_output-maxlz = it_material-maxlz.       " Stock on request flag
* end of MOD-013
    WA_OUTPUT-NFMAT = IT_MATERIAL-NFMAT.       " Follow up material
    WA_OUTPUT-LGPBE = IT_MATERIAL-LGPBE.       " Bin number
    WA_OUTPUT-WAERK = GV_WAERS.                " Currency key
    IF SY-BATCH EQ SPACE.
      WA_OUTPUT-MEINS = IT_MATERIAL-MEINS.     " UoM
    ELSE.
      CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
        EXPORTING
          INPUT    = IT_MATERIAL-MEINS
          LANGUAGE = SY-LANGU
        IMPORTING
          OUTPUT   = WA_OUTPUT-MEINS.
    ENDIF.

*   Fixed vendor
    PERFORM FIND_FIXED_VENDOR_FOR_MAT CHANGING LV_SKIP.
*   If vendor not according to selection criteria, skip the material
    IF LV_SKIP NE SPACE.
      CONTINUE.
    ENDIF.
*   GAC / PGC, MVGR5 (Anti piracy flag), distribution mode
    PERFORM SET_SALES_DATA CHANGING LV_SKIP.
*   Don't keep material if GAC / PGC not found (not meeting selection screen parameter)
    IF WA_OUTPUT-GAC EQ SPACE AND WA_OUTPUT-PGC EQ SPACE.
      CONTINUE.
    ENDIF.
* begin of MOD-013
** Begin of insert MOD-007
*    PERFORM set_hits_for_x_months.
** End of insert MOD-007
* end of MOD-013
*   MRP Type
    PERFORM SET_MRP_TYPE_FOR_MAT.
*   Material status description
* begin of MOD-013
*    PERFORM set_status_desc_for_mat.
* end of MOD-013
*   Consignment stock
    PERFORM SET_CONSIGN_STOCK_FOR_MAT.
*   Standard cost
    PERFORM SET_STCOST_FOR_MAT.
*   Sales order stock
    PERFORM SET_SO_STOCK_FOR_MAT.
*   Stock (Allocated)
    PERFORM SET_ALLOC_STOCK_FOR_MAT.
*   Lot size flag and Pack qty
* begin of MOD-013
*    PERFORM set_matplant_data.
* end of MOD-013
*   Planned delivery time (info record), shipping instructions and transfer price
    PERFORM SET_PIR_DATA.
*   Last receipt ans issue dates
    PERFORM SET_ISS_REC_DATES.
*   Stock Back Ordered
* begin of MOD-013
*    PERFORM set_stock_back_ordered.
* end of MOD-013
*   Material memo
    PERFORM GET_MATERIAL_MEMO.

* begin of MOD-013
** Begin of insert MOD-010
*    IF p_goods <> 'X'.
** End of insert MOD-010
**   Goods in Transit
** begin of MOD-013
**      PERFORM set_goods_in_transit.
** end of MOD-013
** Begin of insert MOD-010
*    ENDIF.
** End of insert MOD-010
* end of MOD-013

*   Calculate "Total stock balance","Total stock value", "Stock available" ...
    PERFORM CALC_FOR_MAT.
*   Planned reciepts (open po qty)
* begin of MOD-013
*    PERFORM set_planned_receipts.
* end of MOD-013
*   Set Stock History
    PERFORM SET_STOCK_HISTORY.
*   Set Stock Forecast
* begin of MOD-013
*    PERFORM set_history_forecast.
* end of MOD-013

    APPEND WA_OUTPUT TO IT_OUTPUT.

  ENDLOOP.

  SORT IT_OUTPUT BY GAC PGC MATNR.

ENDFORM.                    " OUTPUT_TABLE_FILL

*&---------------------------------------------------------------------*
*&      Form  OUTPUT_TABLE_RESTRICT
*&---------------------------------------------------------------------*
FORM OUTPUT_TABLE_RESTRICT .

* Filter the extra selection criteria on the selection screen
  IT_OUTPUT1[] = IT_OUTPUT[].
  CLEAR IT_OUTPUT[].

* Filter all the values on the screen
  LOOP AT IT_OUTPUT1 INTO WA_OUTPUT.
    CHECK WA_OUTPUT-STPRS IN S_STPRS.
* begin of MOD-013
** begin of insertion MOD-006
*    CHECK wa_output-verpr IN s_verpr.
** end of insertion MOD-006
* end of MOD-013
    CHECK WA_OUTPUT-PRCTR IN S_PRCTR.
    CHECK WA_OUTPUT-MATKL IN S_MATKL.
    CHECK WA_OUTPUT-LGPBE IN S_LGPBE.
    CHECK WA_OUTPUT-DISTRI_MODE IN S_DISMOD.
    CHECK WA_OUTPUT-STOCK_POL IN S_STPOL.
    CHECK WA_OUTPUT-MMSTA IN S_MMSTA.
    CHECK WA_OUTPUT-LGRAD IN S_LGRAD.
    CHECK WA_OUTPUT-PLIFZ IN S_PLIFZ.
* begin of MOD-013
*    CHECK wa_output-aplfz IN s_aplfz.
* end of MOD-013
    CHECK WA_OUTPUT-MINBE IN S_MINBE.
* begin of MOD-013
*    CHECK wa_output-lotsize_ind IN s_lotind.
* end of MOD-013
    CHECK WA_OUTPUT-BSTFE IN S_BSTFE.
    CHECK WA_OUTPUT-EISBE IN S_EISBE.
    CHECK WA_OUTPUT-LAST_ISS_DATE IN S_LISSD.
    CHECK WA_OUTPUT-LAST_REC_DATE IN S_LRECD.
    CHECK WA_OUTPUT-EVERS IN S_EVERS.
    CHECK WA_OUTPUT-MVGR5 IN S_MVGR5.
    CHECK WA_OUTPUT-LABST IN S_LABST.
    CHECK WA_OUTPUT-INSME IN S_INSME.
    CHECK WA_OUTPUT-SPEME IN S_SPEME.
    CHECK WA_OUTPUT-RETME IN S_RETME.
* begin of MOD-013
*    CHECK wa_output-umlmc IN s_umlmc.
*    CHECK wa_output-umlme IN s_umlme.
*    CHECK wa_output-trame IN s_trame.
* end of MOD-013
    CHECK WA_OUTPUT-TOTAL_STOCK IN S_TOTST.
*    CHECK wa_output-available IN s_avail.
* end of MOD-013
    APPEND WA_OUTPUT TO IT_OUTPUT.
  ENDLOOP.

ENDFORM.                    " OUTPUT_TABLE_RESTRICT

*&---------------------------------------------------------------------*
*&      Form  get_goods_in_transit
*&---------------------------------------------------------------------*
FORM GET_GOODS_IN_TRANSIT.

* Get qty's of inbound delivery items not status "complete"
  SELECT      LIPS~VBELN LIPS~POSNR MATNR LIPS~WERKS LGORT LFIMG
         INTO TABLE IT_TRANSIT
         FROM LIKP
        INNER JOIN LIPS
           ON LIKP~VBELN = LIPS~VBELN
        INNER JOIN VBUP
           ON LIPS~VBELN = VBUP~VBELN
          AND LIPS~POSNR = VBUP~POSNR
        WHERE LIPS~MATNR IN S_MATNR
          AND LFART      EQ 'EL'
          AND LIPS~WERKS EQ P_WERKS
*          AND LGORT      EQ P_LGORT
          AND LGORT      IN S_LGORT
          AND (    VBUP~WBSTA EQ 'A'
                OR VBUP~WBSTA EQ 'B' ).
* Begin of insert MOD-010
*          AND likp~VKORG EQ p_SALORG.
* End of insert MOD-010


* Sum Qty's per material/plant/StLoc
  LOOP AT IT_TRANSIT.
    READ TABLE IT_MATERIAL WITH KEY MATNR = IT_TRANSIT-MATNR
                                    WERKS = IT_TRANSIT-WERKS
                                    LGORT = IT_TRANSIT-LGORT.
    IF SY-SUBRC EQ 0.
      MOVE-CORRESPONDING IT_TRANSIT TO IT_TRANSIT_AGGR.
      COLLECT IT_TRANSIT_AGGR.
    ENDIF.

  ENDLOOP.

ENDFORM.                    " GET_GOODS_IN_TRANSIT

*&---------------------------------------------------------------------*
*&      Form  get_allocated_stock
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM GET_ALLOCATED_STOCK.

* Get Safety stock
  PERFORM GET_SAFETY_STOCK.

* Get open sales orders
  PERFORM GET_OPEN_SALES_ORDERS.

* Get open reservations
  PERFORM GET_OPEN_RESERVATIONS.

* Get open transport req
  PERFORM GET_OPEN_TRANSPORT_REQ.

* Get open transport orders
* Cf. Function get_allocated stock > perform find_open_transport_orders
  PERFORM GET_OPEN_TRANSPORT_ORDERS.

ENDFORM.                    " GET_ALLOCATED_STOCK

*&---------------------------------------------------------------------*
*&      Form  GET_STOCK_BORDER
*&---------------------------------------------------------------------*
*       Stock back order
*----------------------------------------------------------------------*
FORM GET_STOCK_BORDER .

* Sales order part *
* **************** *
* Open quantity already collected into IT_STBO_SO during VBAP loop for Open quantity in Allocations routine

* Get confirmed quantities
  IF NOT IT_VBAP[] IS INITIAL.
    SELECT      VBELN POSNR BMENG
           INTO TABLE IT_VBEP
           FROM VBEP
            FOR ALL ENTRIES IN IT_VBAP
          WHERE VBELN EQ IT_VBAP-VBELN
            AND POSNR EQ IT_VBAP-POSNR.
    SORT IT_VBEP BY VBELN POSNR.

* Subtract confirmed quantities from back order table
    LOOP AT IT_VBAP.
      IT_STBO_SO-MATNR = IT_VBAP-MATNR.
      IT_STBO_SO-WERKS = IT_VBAP-WERKS.
      IT_STBO_SO-LGORT = IT_VBAP-LGORT.
      IT_STBO_SO-ALLOC_QUANTITY = 0.
      LOOP AT IT_VBEP WHERE VBELN = IT_VBAP-VBELN
                        AND POSNR = IT_VBAP-POSNR.
        IT_STBO_SO-ALLOC_QUANTITY = IT_VBEP-BMENG * ( -1 ).
      ENDLOOP.
      COLLECT IT_STBO_SO.
    ENDLOOP.
  ENDIF.
* Service part *
* ************ *
* Open quantity already collected into IT_STBO_SO during RESB loop for Open quantity in Allocations routine

* subtract confirmed quantities from back order table
  LOOP AT IT_RESB WHERE XWAOK EQ 'X'.
    READ TABLE IT_MATERIAL WITH KEY MATNR = IT_RESB-MATNR
                                    WERKS = IT_RESB-WERKS
                           BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      IT_STBO_SO-MATNR = IT_RESB-MATNR.
      IT_STBO_SO-WERKS = IT_RESB-WERKS.
      IT_STBO_SO-ALLOC_QUANTITY = ( IT_RESB-VMENG * ( IT_RESB-UMREN / IT_RESB-UMREZ ) ) * -1.
      COLLECT IT_STBO_SO.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " GET_STOCK_BORDER

*&---------------------------------------------------------------------*
*&      Form  view_material
*&---------------------------------------------------------------------*

FORM VIEW_MATERIAL  USING    P_E_ROW_ID TYPE LVC_S_ROW.

  READ TABLE IT_OUTPUT INTO WA_OUTPUT INDEX P_E_ROW_ID.

  SET PARAMETER ID 'MAT' FIELD WA_OUTPUT-MATNR.
  CALL TRANSACTION 'MM03' AND SKIP FIRST SCREEN.

ENDFORM.                    " view_material

*&---------------------------------------------------------------------*
*&      Form  check_authorization
*&---------------------------------------------------------------------*

FORM CHECK_AUTHORIZATION .

  DATA: T_T001W LIKE STANDARD TABLE OF T001W WITH HEADER LINE.

  SELECT *
  FROM T001W
  INTO TABLE T_T001W WHERE WERKS EQ P_WERKS. " so_werks.

  LOOP AT T_T001W.
    AUTHORITY-CHECK OBJECT 'M_MATE_WRK'
             ID 'ACTVT' DUMMY
             ID 'WERKS' FIELD T_T001W-WERKS.
    IF SY-SUBRC = 4.
*   No authorisation to display data from Sales Organisation p_vkorg
      MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '008' WITH T_T001W-WERKS.
      EXIT.
    ELSEIF SY-SUBRC <> 0.
*   Error checking authorization.
      MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '004'.
      EXIT.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " check_authorization

*&---------------------------------------------------------------------*
*&      Form  VALREQ_WERKS
*&---------------------------------------------------------------------*
FORM VALREQ_WERKS.

  SELECT      A~WERKS A~WHTYPE A~WHSTDES B~NAME1
*         INTO CORRESPONDING FIELDS OF TABLE IT_PLANT
         INTO TABLE IT_PLANT
         FROM YSE_EM_PLANT AS A
        INNER JOIN T001W AS B
           ON A~WERKS = B~WERKS
        WHERE A~WHTYPE NE 'D'   " Report only for non DTC plants
          AND B~SPRAS  EQ 'E'.                         "#EC CI_BUFFJOIN

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'WERKS'
      WINDOW_TITLE    = TEXT-003
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = IT_PLANT
      RETURN_TAB      = IT_RETURN_TAB
    EXCEPTIONS
      PARAMETER_ERROR = 0
      NO_VALUES_FOUND = 0
      OTHERS          = 0.

ENDFORM.                    " VALREQ_WERKS

*&---------------------------------------------------------------------*
*&      Form  SEND2SPOOL
*&---------------------------------------------------------------------*
FORM SEND2SPOOL.

  DATA:
    FNAM             LIKE RLGRAP-FILENAME,
    IT_DD03L         LIKE DD03L OCCURS 0 WITH HEADER LINE,
    IT_DD04T         LIKE DD04T OCCURS 0 WITH HEADER LINE,
    IT_OUTXLS(4096)  TYPE C OCCURS 0,
    WA_OUTXLS(4096)  TYPE C.

  CONSTANTS:
    C_TAB TYPE C VALUE CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB.

* Get fields of structure 'YSE_STOCK_OVERVIEW_ITEM_V1'
  SELECT *
         FROM DD03L
         INTO TABLE IT_DD03L
        WHERE TABNAME = 'YSE_STOCK_OVERVIEW_ITEM_V1'.

* Get the descriptions of the fields in the structure
  SELECT *
         FROM DD04T
         INTO TABLE IT_DD04T
          FOR ALL ENTRIES IN IT_DD03L
        WHERE ROLLNAME EQ IT_DD03L-ROLLNAME
          AND DDLANGUAGE EQ 'EN'.

* Build filename
  CONCATENATE '/var/load/' SY-SYSID '/UK/original/YSE_ITEMREP_'
              SY-UNAME '_' V_DAT '_' V_TIM '.TXT'
         INTO FNAM.

* Make the output table ; delimited
  CALL FUNCTION 'SAP_CONVERT_TO_CSV_FORMAT'
    TABLES
      I_TAB_SAP_DATA       = IT_OUTPUT
    CHANGING
      I_TAB_CONVERTED_DATA = IT_OUTXLS
    EXCEPTIONS
      CONVERSION_FAILED    = 1
      OTHERS               = 2.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

* Open file
  OPEN DATASET FNAM FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.
  IF SY-SUBRC <> 0.
    WRITE 'Error opening file. Action aborted.'(026).
    EXIT.
  ENDIF.

* Write header line
  CLEAR WA_OUTXLS.
  SORT IT_DD03L BY POSITION.
  LOOP AT IT_DD03L.
    READ TABLE IT_DD04T WITH KEY ROLLNAME = IT_DD03L-ROLLNAME.
    IF WA_OUTXLS IS INITIAL.
      WA_OUTXLS = IT_DD04T-REPTEXT.
    ELSE.
      CONCATENATE WA_OUTXLS C_TAB IT_DD04T-REPTEXT INTO WA_OUTXLS.
    ENDIF.
  ENDLOOP.
  TRANSFER WA_OUTXLS TO FNAM LENGTH 4096.

* Process lines
  LOOP AT IT_OUTXLS INTO WA_OUTXLS.
    REPLACE ALL OCCURRENCES OF ';' IN WA_OUTXLS WITH C_TAB.
    TRANSFER WA_OUTXLS TO FNAM.
  ENDLOOP.

  CLOSE DATASET FNAM.

  WRITE: 'Report output written to file:'(027),
         FNAM.

ENDFORM.                    " SEND2SPOOL

*&---------------------------------------------------------------------*
*&      Form  GET_open_sales_orders
*&---------------------------------------------------------------------*
FORM GET_OPEN_SALES_ORDERS .

* Salesorder items have been selected before

* Add order quantities to allocations table
  SORT IT_VBAP BY MATNR.
  LOOP AT IT_VBAP WHERE ABGRU EQ SPACE.
*   When the sales item's StLoc is initial, treat it is if it were
    " Begin CD1K979910 CR3022
    READ TABLE IT_MATERIAL WITH KEY MATNR = IT_VBAP-MATNR.
    IF SY-SUBRC = 0.
      IT_VBAP-LGORT = IT_MATERIAL-LGORT.
    ENDIF.
    " End CD1K979910
*   StLoc 1000
    IF IT_VBAP-LGORT IS INITIAL.
      IT_VBAP-LGORT = '1000'.
    ENDIF.
    READ TABLE IT_MATERIAL WITH KEY MATNR = IT_VBAP-MATNR
                                    WERKS = IT_VBAP-WERKS
                                    LGORT = IT_VBAP-LGORT
                           BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      IT_ALLOC-LGORT          = IT_VBAP-LGORT.
      IT_ALLOC-WERKS          = IT_VBAP-WERKS.
      IT_ALLOC-MATNR          = IT_VBAP-MATNR.
      IT_ALLOC-ALLOC_QUANTITY = IT_VBAP-KWMENG.
      COLLECT IT_ALLOC.
*     To collect the Open Qty for Stock Back Ordered
      COLLECT IT_ALLOC INTO IT_STBO_SO.
    ENDIF.
  ENDLOOP.

* Get delivered quantities for the above selected order items
  IF NOT IT_VBAP[] IS INITIAL.
    SELECT      B~VBELN B~POSNR B~MATNR B~LGORT B~LFIMG B~WERKS
           INTO TABLE IT_LIPS
           FROM VBFA AS A
           JOIN LIPS AS B
             ON A~VBELN EQ B~VBELN
            AND A~POSNN EQ B~POSNR
           JOIN VBUK AS C
             ON A~VBELN EQ C~VBELN
            FOR ALL ENTRIES IN IT_VBAP
          WHERE A~VBELV = IT_VBAP-VBELN
            AND A~POSNV = IT_VBAP-POSNR
            AND A~VBTYP_N = 'J'  " Deliveries
            AND C~WBSTK = 'C'.
  ENDIF.

* Subtract remaining delivered quantities from allocation table
  LOOP AT IT_LIPS.
    " Begin CD1K979910 CR3022
    READ TABLE IT_MATERIAL WITH KEY MATNR = IT_LIPS-MATNR.
    IF SY-SUBRC = 0.
      IT_LIPS-LGORT = IT_MATERIAL-LGORT.
    ENDIF.
    " End CD1K979910
*   StLoc 1000
    IF IT_LIPS-LGORT IS INITIAL.
      IT_LIPS-LGORT = '1000'.
    ENDIF.
    READ TABLE IT_MATERIAL WITH KEY MATNR = IT_LIPS-MATNR
                                    WERKS = IT_LIPS-WERKS
                                    LGORT = IT_LIPS-LGORT
                           BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      IT_ALLOC-LGORT          = IT_LIPS-LGORT.
      IT_ALLOC-WERKS          = IT_LIPS-WERKS.
      IT_ALLOC-MATNR          = IT_LIPS-MATNR.
      IT_ALLOC-ALLOC_QUANTITY = IT_LIPS-LFIMG * ( -1 ).
      COLLECT IT_ALLOC.
*     To collect the Open Qty for Stock Back Ordered
      COLLECT IT_ALLOC INTO IT_STBO_SO.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " GET_open_sales_orders

*&---------------------------------------------------------------------*
*&      Form  GET_open_reservations
*&---------------------------------------------------------------------*
FORM GET_OPEN_RESERVATIONS .

* Service details selected before, but whithout condition >> XWAOK EQ 'X' <<

* Add open reservation quantities to allocations table
  SORT IT_RESB BY MATNR WERKS LGORT.
  LOOP AT IT_RESB WHERE XWAOK EQ 'X'.
    READ TABLE IT_MATERIAL
               WITH KEY MATNR = IT_RESB-MATNR
                        WERKS = IT_RESB-WERKS
                        LGORT = IT_RESB-LGORT
               BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      IT_ALLOC-MATNR          = IT_RESB-MATNR.
      IT_ALLOC-WERKS          = IT_RESB-WERKS.
      IT_ALLOC-LGORT          = IT_RESB-LGORT.
      IT_ALLOC-ALLOC_QUANTITY = IT_RESB-BDMNG - IT_RESB-ENMNG.
      COLLECT IT_ALLOC.
*     To collect the Open Qty for Stock Back Ordered
      COLLECT IT_ALLOC INTO IT_STBO_SO.
    ENDIF.
  ENDLOOP.




ENDFORM.                    " GET_open_reservations

*&---------------------------------------------------------------------*
*&      Form  get_safety_stock
*&---------------------------------------------------------------------*
FORM GET_SAFETY_STOCK .

* Only consider safety stock if "safety stock indicator" is flagged
  CHECK P_SAF = 'X'.
* Only consider safety stock if storage location = 1000
*  CHECK P_LGORT = '1000'.
  IF '1000' IN S_LGORT OR '6100' IN S_LGORT OR '6200' IN S_LGORT. "CD1K979910 CR3022

* Safety stock has already been fetched from MARC, just copy it over into IT_ALLOC_EXT
* Put material with it's safety stock in allocations table
*      IT_ALLOC-LGORT = '1000'.
    LOOP AT IT_MATERIAL.
      " Begin "CD1K979910 CR3022
      IF IT_MATERIAL-LGORT IS NOT INITIAL.
        IT_ALLOC-LGORT         = IT_MATERIAL-LGORT.
      ELSE.
        IT_ALLOC-LGORT         = '1000'.
      ENDIF.
      " End "CD1K979910 CR3022
      IT_ALLOC-MATNR          = IT_MATERIAL-MATNR.
      IT_ALLOC-WERKS          = IT_MATERIAL-WERKS.
      IT_ALLOC-ALLOC_QUANTITY = IT_MATERIAL-EISBE.
      COLLECT IT_ALLOC.
    ENDLOOP.
  ENDIF.
ENDFORM.                    " get_safety_stock

*&---------------------------------------------------------------------*
*&      Form  get_open_transport_req
*&---------------------------------------------------------------------*
FORM GET_OPEN_TRANSPORT_REQ .

* Only consider open transport req if storage location = 1000
*  CHECK p_lgort = '1000'.

  IF '1000' IN S_LGORT OR '6100' IN S_LGORT OR '6200' IN S_LGORT. "CD1K979910 CR3022

    SELECT      MATNR RESWK MENGE
           INTO TABLE IT_EBAN
           FROM EBAN
          WHERE MATNR IN S_MATNR
            AND BSART EQ C_PO_REPLENISHMENT
            AND PSTYP EQ C_PSTYP_STOCK_TR      "STOCK TRANSFER
            AND STATU EQ 'N'
            AND LOEKZ EQ SPACE
            AND EBAKZ EQ SPACE
            AND RESWK EQ P_WERKS " so_werks
            AND ( LGORT EQ '1000'
                 OR LGORT EQ '6100'
                 OR LGORT EQ '6200'
                 OR LGORT EQ ' ').
* Begin of insert MOD-010
*            AND EKORG = gv_EKORG.
* End of insert MOD-010

* Add open transport req quant's to allocations table
    LOOP AT IT_EBAN.
      READ TABLE IT_MATERIAL WITH KEY MATNR = IT_EBAN-MATNR
                                      WERKS = IT_EBAN-RESWK
                             BINARY SEARCH.
*      IT_ALLOC-LGORT = '1000'.
      IF SY-SUBRC EQ 0.
        " Begin "CD1K979910 CR3022
        IF IT_MATERIAL-LGORT IS NOT INITIAL.
          IT_ALLOC-LGORT         = IT_MATERIAL-LGORT.
        ELSE.
          IT_ALLOC-LGORT         = '1000'.
        ENDIF.
        " End "CD1K979910 CR3022
        IT_ALLOC-MATNR = IT_EBAN-MATNR.
        IT_ALLOC-WERKS = IT_EBAN-RESWK.
        IT_ALLOC-ALLOC_QUANTITY = IT_EBAN-MENGE.
        COLLECT IT_ALLOC.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.                    " GET_open_transport_req

*&---------------------------------------------------------------------*
*&      Form  get_material_memo
*&---------------------------------------------------------------------*
FORM GET_MATERIAL_MEMO.

  CLEAR LV_TDNAME.
  LV_TDNAME(18)   = IT_MATERIAL-MATNR.
  LV_TDNAME+19(4) = IT_MATERIAL-WERKS.

  CLEAR: IT_LINES, IT_LINES[].
  CALL FUNCTION 'READ_TEXT'
    EXPORTING
      ID                      = 'LTXT'
      LANGUAGE                = 'E'
      NAME                    = LV_TDNAME
      OBJECT                  = 'MDTXT'
    TABLES
      LINES                   = IT_LINES
    EXCEPTIONS
      ID                      = 1
      LANGUAGE                = 2
      NAME                    = 3
      NOT_FOUND               = 4
      OBJECT                  = 5
      REFERENCE_CHECK         = 6
      WRONG_ACCESS_TO_ARCHIVE = 7
      OTHERS                  = 8.
  IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  READ TABLE IT_LINES INDEX 1.
  IF SY-SUBRC EQ 0.
    WA_OUTPUT-MATNR_MEMO = IT_LINES-TDLINE.
  ENDIF.

ENDFORM.                    " get_material_memo

*&---------------------------------------------------------------------*
*&      Form  GET_dateS
*&---------------------------------------------------------------------*
FORM GET_DATES.

  DATA:
    BEGIN OF LT_EBELN_KEEP OCCURS 0,
      EBELN LIKE MSEG-EBELN,
    END OF LT_EBELN_KEEP,
    BEGIN OF LT_EBELN_RECEIPT OCCURS 0,
      EBELN LIKE MSEG-EBELN,
    END OF LT_EBELN_RECEIPT,
    BEGIN OF LT_VBELN_KEEP OCCURS 0,
      VBELN LIKE MSEG-MBLNR,
    END OF LT_VBELN_KEEP,
    BEGIN OF LT_VBELN_ISSUE OCCURS 0,
      VBELN LIKE VBFA-VBELN,
    END OF LT_VBELN_ISSUE.

* **************************************************************************************************
* TVO: New logic is just after the commented lines: process monitor showed that at least 2 hours of
*      the total running time was spent selecting from MSEG. Therefore trying to combine into 1
*      select and further refinement in later processing
* **************************************************************************************************
** Receipt dates from MKPF/MSEG
*  SELECT      MKPF~MBLNR MKPF~MJAHR MSEG~ZEILE MKPF~BUDAT MSEG~BWART MSEG~MATNR
*         INTO TABLE IT_MSEG
*         FROM MSEG
*         JOIN MKPF
*           ON MKPF~MBLNR = MSEG~MBLNR
*          AND MKPF~MJAHR = MSEG~MJAHR
*         JOIN EKKO
*           ON MSEG~EBELN = EKKO~EBELN
*          FOR ALL ENTRIES IN IT_SUPERS
*        WHERE MSEG~BWART IN R_BWART_RECEIPT
*          AND MSEG~MATNR EQ IT_SUPERS-MATNR
*          AND WERKS EQ P_WERKS
*          AND BSART NE 'ZUB1'
*          AND LGORT EQ P_LGORT.
** Issue dates from MKPF/MSEG
*  SELECT      MKPF~MBLNR MKPF~MJAHR MSEG~ZEILE MKPF~BUDAT MSEG~BWART MSEG~MATNR
*    APPENDING TABLE IT_MSEG
*         FROM MSEG
*         JOIN MKPF
*           ON MKPF~MBLNR = MSEG~MBLNR
*          AND MKPF~MJAHR = MSEG~MJAHR
*         JOIN VBFA
*           ON MSEG~MBLNR = VBFA~VBELN
*         JOIN LIKP
*           ON VBFA~VBELV = LIKP~VBELN
*          FOR ALL ENTRIES IN IT_SUPERS
*        WHERE MSEG~BWART IN R_BWART_ISSUE
*          AND MSEG~MATNR EQ IT_SUPERS-MATNR
*          AND MSEG~WERKS EQ P_WERKS
*          AND LGORT      EQ P_LGORT
*          AND VBTYP_N    EQ 'R'          " Document flow: Follow up doc is "Goods mvt"
*          AND VBTYP_V    EQ 'J'          " Document flow: Preced doc is "Delivery"
*          AND LFART      NE 'NL'.
** Sort the table by date descending
*  SORT IT_MSEG BY BUDAT DESCENDING.


* New logic starts here/ get all goods movements
  IF NOT IT_SUPERS[] IS INITIAL.
    SELECT      MKPF~MBLNR MKPF~MJAHR MSEG~ZEILE MKPF~BUDAT MSEG~BWART MSEG~MATNR MSEG~EBELN
           INTO TABLE IT_MSEG
           FROM MSEG
           JOIN MKPF
             ON MKPF~MBLNR = MSEG~MBLNR
            AND MKPF~MJAHR = MSEG~MJAHR
            FOR ALL ENTRIES IN IT_SUPERS
          WHERE MSEG~BWART IN R_BWART_ALL
            AND MSEG~MATNR EQ IT_SUPERS-MATNR
            AND WERKS EQ P_WERKS
            AND ( LGORT EQ '1000'
             OR LGORT EQ '6100'
             OR LGORT EQ '6200' ). " CD1K979910
  ENDIF.

* Build tables with PO numbers for receipts and with Goods Mvt numbers for issues
  LOOP AT IT_MSEG.
    IF IT_MSEG-BWART IN R_BWART_RECEIPT.
      LT_EBELN_RECEIPT-EBELN = IT_MSEG-EBELN.
      APPEND LT_EBELN_RECEIPT.
    ELSEIF IT_MSEG-BWART IN R_BWART_ISSUE.
      LT_VBELN_ISSUE-VBELN = IT_MSEG-MBLNR.
      APPEND LT_VBELN_ISSUE.
    ENDIF.
  ENDLOOP.
  SORT:
    LT_EBELN_RECEIPT BY EBELN,
    LT_VBELN_ISSUE   BY VBELN.
  DELETE ADJACENT DUPLICATES FROM:
    LT_EBELN_RECEIPT,
    LT_VBELN_ISSUE.
* Check the PO type for receipts (internal orders don't count)
  IF NOT LT_EBELN_RECEIPT[] IS INITIAL.
    SELECT      EBELN
           INTO TABLE LT_EBELN_KEEP
           FROM EKKO
            FOR ALL ENTRIES IN LT_EBELN_RECEIPT
          WHERE EBELN EQ LT_EBELN_RECEIPT-EBELN
            AND BSART NE 'ZUB1'.
    SORT LT_EBELN_KEEP BY EBELN.
  ENDIF.
* Check the delivery type preceding the currently selected good mvt's
  IF NOT LT_VBELN_ISSUE[] IS INITIAL.
    SELECT      VBFA~VBELN
           INTO TABLE LT_VBELN_KEEP
           FROM VBFA
           JOIN LIKP
             ON VBFA~VBELV = LIKP~VBELN
            FOR ALL ENTRIES IN LT_VBELN_ISSUE
          WHERE VBFA~VBELN EQ LT_VBELN_ISSUE-VBELN
            AND VBTYP_N    EQ 'R'          " Document flow: Follow up doc is "Goods mvt"
            AND VBTYP_V    EQ 'J'          " Document flow: Preced doc is "Delivery"
            AND LFART      NE 'NL'.
    SORT LT_VBELN_KEEP BY VBELN.
  ENDIF.
* Issue and receipt dates from YSE_SURPLUS_HD01
  IF NOT IT_SUPERS[] IS INITIAL.
    SELECT      *
           FROM YSE_SURPLUS_HD01
           INTO TABLE IT_SURPLUS
            FOR ALL ENTRIES IN IT_SUPERS
          WHERE WERKS EQ P_WERKS
            AND MATNR EQ IT_SUPERS-MATNR
*          AND lgort EQ p_lgort.
             AND LGORT IN S_LGORT.

    SORT IT_SURPLUS BY BUDAT DESCENDING.
  ENDIF.

* Add MSEG (goods mvt data) to surplus table, which than holds all receipts and issue dates
  LOOP AT IT_MSEG.
    IT_SURPLUS-MATNR = IT_MSEG-MATNR.
    IT_SURPLUS-WERKS = P_WERKS.
    " Begin CD1K979910 CR3022
    READ TABLE IT_MATERIAL WITH KEY MATNR = IT_MSEG-MATNR.
    IF SY-SUBRC = 0.
      IT_SURPLUS-LGORT = IT_MATERIAL-LGORT.
    ELSE.
      IT_SURPLUS-LGORT = '1000'.
    ENDIF.
    " End CD1K979910

*   When receipt
    IF IT_MSEG-BWART IN R_BWART_RECEIPT.
      IT_SURPLUS-ZMOVT = 'R'.
*     Check if PO type is correct
      READ TABLE LT_EBELN_KEEP WITH KEY EBELN = IT_MSEG-EBELN BINARY SEARCH.
      IF SY-SUBRC EQ 0.
        IT_SURPLUS-BUDAT = IT_MSEG-BUDAT.
        APPEND IT_SURPLUS.
      ENDIF.
*   When issue
    ELSEIF IT_MSEG-BWART IN R_BWART_ISSUE.
      IT_SURPLUS-ZMOVT = 'I'.
*     Check preceding delivery type
      READ TABLE LT_VBELN_KEEP WITH KEY VBELN = IT_MSEG-MBLNR BINARY SEARCH.
      IF SY-SUBRC EQ 0.
        IT_SURPLUS-BUDAT = IT_MSEG-BUDAT.
        APPEND IT_SURPLUS.
      ENDIF.
    ENDIF.
  ENDLOOP.

* Sort the issue and receipt data
  SORT IT_SURPLUS BY MATNR ASCENDING BUDAT DESCENDING.
* Process all dates to keep only 1 issue and 1 receipt date per material
  LOOP AT IT_SURPLUS.
*   When receipt
    IF IT_SURPLUS-ZMOVT = 'R'.
*     When we don't have a receipt date for the material yet
      IF IT_SURPLUS-MATNR NE IT_REC-MATNR.
*       Keep the date (due to sorting, it will be the most recent receipt)
        IT_REC-MATNR = IT_SURPLUS-MATNR.
        IT_REC-BUDAT = IT_SURPLUS-BUDAT.
        APPEND IT_REC.
      ENDIF.
*   When issue
    ELSEIF IT_SURPLUS-ZMOVT = 'I'.
*     When we don't have a issue date for the material yet
      IF IT_SURPLUS-MATNR NE IT_ISS-MATNR.
*       Keep the date (due to sorting, it will be the most recent receipt)
        IT_ISS-MATNR = IT_SURPLUS-MATNR.
        IT_ISS-BUDAT = IT_SURPLUS-BUDAT.
        APPEND IT_ISS.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " GET_dateS


*&---------------------------------------------------------------------*
*&      Form  get_data_mkpf
*&---------------------------------------------------------------------*
FORM GET_DATA_MKPF .

* Last receipt date.
  IF NOT IT_MATERIAL IS INITIAL.
    SELECT MKPF~MBLNR MSEG~MATNR MSEG~MATNR MSEG~WERKS MKPF~BUDAT MSEG~EBELN
        INTO TABLE GT_REC_DAT
        FROM MSEG
       INNER JOIN MKPF
          ON   MSEG~MBLNR EQ MKPF~MBLNR
         AND   MSEG~MJAHR EQ MKPF~MJAHR
     FOR ALL ENTRIES IN IT_MATERIAL
     WHERE    MSEG~MATNR  EQ IT_MATERIAL-MATNR
          AND MSEG~WERKS  EQ P_WERKS " so_werks
          AND ( MSEG~BWART EQ '101'
          OR   MSEG~BWART EQ '651'
          OR   MSEG~BWART EQ '634' ).
  ENDIF.

* Superseding materials for receipt date
  IF NOT IT_SUPERS[] IS INITIAL.
    SELECT MKPF~MBLNR MSEG~MATNR MSEG~WERKS MKPF~BUDAT MSEG~EBELN
*      INTO  CORRESPONDING FIELDS OF TABLE GT_REC_DAT1
        INTO TABLE GT_REC_DAT1
        FROM MSEG
       INNER JOIN MKPF
          ON   MSEG~MBLNR EQ MKPF~MBLNR
         AND   MSEG~MJAHR EQ MKPF~MJAHR
     FOR ALL ENTRIES IN IT_SUPERS
     WHERE    MSEG~MATNR  EQ IT_SUPERS-MATNR
          AND MSEG~WERKS  EQ P_WERKS " so_werks
          AND ( MSEG~BWART EQ '101'
          OR   MSEG~BWART EQ '651'
          OR   MSEG~BWART EQ '634' ).
  ENDIF.

* Append the superseded items to the table
  LOOP AT GT_REC_DAT1.
    READ TABLE IT_SUPERS WITH KEY MATNR = GT_REC_DAT1-MATNR.
    IF SY-SUBRC EQ 0.
      CLEAR GT_REC_DAT.
      MOVE-CORRESPONDING GT_REC_DAT1 TO GT_REC_DAT.
      GT_REC_DAT-NFMAT = IT_SUPERS-NFMAT.
      APPEND GT_REC_DAT.
    ENDIF.
  ENDLOOP.

  SORT GT_REC_DAT BY BUDAT DESCENDING.

  LOOP AT GT_REC_DAT.
    READ TABLE IT_MATERIAL
                  WITH KEY MATNR = GT_REC_DAT-NFMAT
                           WERKS = GT_REC_DAT-WERKS.
    IF SY-SUBRC NE 0.
      DELETE GT_REC_DAT.
    ELSE.
*     Do another check on type of po linked, must not be ZUB1
      IF NOT GT_REC_DAT-EBELN IS INITIAL.
*       Means it was a 101 movement
        SELECT SINGLE EBELN FROM EKKO INTO EKKO-EBELN
                     WHERE EBELN EQ GT_REC_DAT-EBELN AND
                           BSART EQ 'ZUB1'.          "#EC CI_SEL_NESTED
        IF SY-SUBRC EQ 0.
          DELETE GT_REC_DAT.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.


* Last issue date.
  IF NOT IT_MATERIAL[] IS INITIAL.
    SELECT MKPF~MBLNR MSEG~MATNR MSEG~MATNR MSEG~WERKS MKPF~BUDAT
        INTO TABLE GT_ISS_DAT
        FROM MSEG
       INNER JOIN MKPF
          ON   MSEG~MBLNR EQ MKPF~MBLNR
         AND   MSEG~MJAHR EQ MKPF~MJAHR
     FOR ALL ENTRIES IN IT_MATERIAL
     WHERE     MSEG~MATNR  EQ IT_MATERIAL-MATNR
           AND MSEG~WERKS  EQ P_WERKS " so_werks
           AND ( MSEG~BWART EQ '261'
            OR   MSEG~BWART EQ '601'
            OR   MSEG~BWART EQ '633' ).
  ENDIF.
* Get the superseded items
  IF NOT IT_SUPERS[] IS INITIAL.
    SELECT MKPF~MBLNR MSEG~MATNR MSEG~WERKS MKPF~BUDAT
        INTO TABLE GT_ISS_DAT1
        FROM MSEG
       INNER JOIN MKPF
          ON   MSEG~MBLNR EQ MKPF~MBLNR
         AND   MSEG~MJAHR EQ MKPF~MJAHR
     FOR ALL ENTRIES IN IT_SUPERS
     WHERE     MSEG~MATNR  EQ IT_SUPERS-MATNR
           AND MSEG~WERKS  EQ P_WERKS " so_werks
           AND ( MSEG~BWART EQ '261'
            OR   MSEG~BWART EQ '601'
            OR   MSEG~BWART EQ '633' ).

* Append the superseded items to the table
    LOOP AT GT_ISS_DAT1.
      READ TABLE IT_SUPERS WITH KEY MATNR = GT_ISS_DAT1-MATNR.
      IF SY-SUBRC EQ 0.
        CLEAR GT_ISS_DAT.
        MOVE-CORRESPONDING GT_ISS_DAT1 TO GT_ISS_DAT.
        GT_ISS_DAT-NFMAT = IT_SUPERS-NFMAT.
        APPEND GT_ISS_DAT.
      ENDIF.
    ENDLOOP.
  ENDIF.

  SORT GT_ISS_DAT BY BUDAT DESCENDING.


  LOOP AT GT_ISS_DAT.
    READ TABLE IT_MATERIAL
                  WITH KEY MATNR = GT_ISS_DAT-NFMAT
                           WERKS = GT_ISS_DAT-WERKS.
    IF SY-SUBRC NE 0.
      DELETE GT_ISS_DAT.
    ELSE.
*     Do another check on type delivery.
      SELECT SINGLE LIKP~VBELN INTO LIKP-VBELN FROM LIKP
                        INNER JOIN VBFA
                        ON VBFA~VBELN EQ LIKP~VBELN
                        WHERE VBFA~VBELN EQ GT_ISS_DAT-MBLNR AND
                              VBFA~VBTYP_V EQ 'J' AND
                              LIKP~LFART EQ 'NL'.    "#EC CI_SEL_NESTED
      IF SY-SUBRC EQ 0.
        DELETE GT_ISS_DAT.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " get_data_mkpf

*&---------------------------------------------------------------------*
*&      Form  SET_12_MONTH_PERIOD
*&---------------------------------------------------------------------*
FORM SET_12_MONTH_PERIOD.

  DATA:
    LV_DATUM      LIKE SY-DATUM.

* *****
* Start with current date
  MOVE SY-DATUM TO LV_DATUM.
* Set the "day" to 01 ==> first of current month
  LV_DATUM+6 = '01'.
* Go to the day before the first of current month ==> last day of last month
  LV_DATUM = LV_DATUM - 1.
* Set "last month" period
  WA_PER_LASTMONTH = LV_DATUM(6).

* *****
* Go 11 months back from last month ==> 1 yr back
  CALL FUNCTION 'MONTH_PLUS_DETERMINE'
    EXPORTING
      MONTHS  = -11
      OLDDATE = LV_DATUM
    IMPORTING
      NEWDATE = LV_DATUM.
* Set "1 Year Back" period
  MOVE LV_DATUM(6) TO  WA_PER_1YRBACK.

ENDFORM.                    " SET_12_MONTH_PERIOD

*&---------------------------------------------------------------------*
*&      Form  GET_stock_history
*&---------------------------------------------------------------------*
FORM GET_STOCK_HISTORY .

  DATA: PREV_MATNR TYPE MATNR.

* Get P_VKORG from the plant (can be only 1 from selection screen)
  READ TABLE IT_MVKE INDEX 1.
  IF SY-SUBRC EQ 0.
    P_VKORG = IT_MVKE-VKORG.
  ENDIF.

* The linked sales organisation will be on all lines but just different matnr
* SELECT ALL PLANTS FOR WHICH CHOSEN PLANT IS RESPONSIBLE
  SELECT *
  INTO TABLE IT_YSE_EM_PL_CENTR
    FROM YSE_EM_PL_CENTR
    WHERE CWERKS = P_WERKS.
* If no branch plants found for the provided plant on selection screen
  IF SY-SUBRC NE 0.
    CLEAR SY-SUBRC.
*   Just add a line for the branch plant
    IT_YSE_EM_PL_CENTR-BWERKS = P_WERKS.
    APPEND IT_YSE_EM_PL_CENTR.
  ENDIF.

  IF SY-SUBRC EQ 0.
    SELECT *
      INTO TABLE IT_YSE_EM_PL_DISTR
      FROM YSE_EM_PL_DISTR
      FOR ALL ENTRIES IN IT_YSE_EM_PL_CENTR
      WHERE WERKS = IT_YSE_EM_PL_CENTR-BWERKS.
*-- selection of sales organisation/plant combinations
    CLEAR: IT_TVKWZ.
    REFRESH: IT_TVKWZ.
    SELECT VKORG VTWEG WERKS
        FROM TVKWZ
        INTO TABLE IT_TVKWZ
           WHERE VKORG EQ P_VKORG.
    CLEAR: R_BZIRK.
    REFRESH: R_BZIRK.
    LOOP AT  IT_YSE_EM_PL_DISTR.
* CHECK IF THE DEPENDEND PLANT IS ALLOWED
* FOR SALES ORG/DIST CHANNEL
      READ TABLE IT_TVKWZ
      WITH KEY WERKS =  IT_YSE_EM_PL_DISTR-WERKS.
      CHECK SY-SUBRC EQ 0.
      CLEAR: R_BZIRK.
      R_BZIRK-SIGN   = 'I'.
      R_BZIRK-OPTION = 'EQ'.
      R_BZIRK-LOW    = IT_YSE_EM_PL_DISTR-BZIRK.
      APPEND R_BZIRK.
    ENDLOOP.
  ENDIF.

* ADD HISTORY FOR DEPENDEND SALES DISTRICTS
  READ TABLE R_BZIRK INDEX 1.

  IF SY-SUBRC EQ 0.
    SELECT *
     INTO TABLE IT_YSE_EM_SOHIST
     FROM YSE_EM_SOHIST
     WHERE VKORG EQ P_VKORG
     AND BZIRK IN R_BZIRK
     AND PERIOD
     BETWEEN WA_PER_1YRBACK AND WA_PER_LASTMONTH.
    SELECT * FROM YSE_EM_SOHISTMIG WHERE PERIOD LE WA_PER_LASTMONTH
                                    AND PERIOD GE WA_PER_1YRBACK
                                    AND VKORG  EQ P_VKORG
                                    AND BZIRK IN R_BZIRK
                                    AND WERKS EQ P_WERKS.
      IT_YSE_EM_SOHIST = YSE_EM_SOHISTMIG.
      COLLECT IT_YSE_EM_SOHIST.
    ENDSELECT.
  ENDIF.

  SORT IT_YSE_EM_SOHIST.
* Set history for materials without history to 0.01
  SORT IT_MATERIAL BY WERKS MATNR LGORT.
  DELETE ADJACENT DUPLICATES FROM IT_MATERIAL COMPARING WERKS MATNR LGORT.

  LOOP AT IT_MATERIAL.
    CLEAR IT_SOHIST.
    IF IT_MATERIAL-MATNR NE PREV_MATNR OR PREV_MATNR IS INITIAL.
      MOVE IT_MATERIAL-MATNR TO PREV_MATNR.
      LOOP AT IT_YSE_EM_SOHIST WHERE MATNR EQ IT_MATERIAL-MATNR.
*                             and   werks EQ it_material-werks.
        MOVE-CORRESPONDING IT_YSE_EM_SOHIST TO IT_SOHIST.

        PERFORM ROUND_VALUE CHANGING IT_SOHIST-ZMENG.

        COLLECT IT_SOHIST.
      ENDLOOP.
    ENDIF.

  ENDLOOP.

ENDFORM.                    " get_stock_history
*&---------------------------------------------------------------------*
*&      Form  round_value
*&---------------------------------------------------------------------*
FORM ROUND_VALUE  CHANGING NUMBER TYPE SBMENGE.

  CALL FUNCTION 'ROUND'
    EXPORTING
      DECIMALS      = 0
      INPUT         = NUMBER
*     sign          = ' '
    IMPORTING
      OUTPUT        = NUMBER
    EXCEPTIONS
      INPUT_INVALID = 1
      OVERFLOW      = 2
      TYPE_INVALID  = 3
      OTHERS        = 4.
  IF SY-SUBRC <> 0.
*   message id sy-msgid type sy-msgty number sy-msgno
*           with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " round_value

*&---------------------------------------------------------------------*
*&      Form  VALREQ_DISMODE
*&---------------------------------------------------------------------*
FORM VALREQ_DISMODE.

  REFRESH IT_DISMOD.
  IT_DISMOD-DISMOD = 'DTC'.
  APPEND IT_DISMOD.

  IT_DISMOD-DISMOD = 'NDTC'.
  APPEND IT_DISMOD.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'DISMOD'
      WINDOW_TITLE    = TEXT-019
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = IT_DISMOD
      RETURN_TAB      = IT_RETURN_TAB
    EXCEPTIONS
      PARAMETER_ERROR = 0
      NO_VALUES_FOUND = 0
      OTHERS          = 0.

ENDFORM.                    " VALREQ_DISMODE

*&---------------------------------------------------------------------*
*&      Form  VALREQ_STPOL
*&---------------------------------------------------------------------*
FORM VALREQ_STPOL. " MRP type

  REFRESH IT_STOCKPOL.
  IT_STOCKPOL-STOCKPOL = 'ST'.
  APPEND IT_STOCKPOL.

  IT_STOCKPOL-STOCKPOL = 'NS'.
  APPEND IT_STOCKPOL.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'STOCKPOL'
      WINDOW_TITLE    = TEXT-020
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = IT_STOCKPOL
      RETURN_TAB      = IT_RETURN_TAB
    EXCEPTIONS
      PARAMETER_ERROR = 0
      NO_VALUES_FOUND = 0
      OTHERS          = 0.

ENDFORM.                    " VALREQ_STPOL

*&---------------------------------------------------------------------*
*&      Form  SET_DATE_AND_TIME
*&---------------------------------------------------------------------*
FORM SET_DATE_AND_TIME .

  IF SY-BATCH NE SPACE.
    V_DAT = SY-DATUM.
    V_TIM = SY-UZEIT.
  ENDIF.

ENDFORM.                    " SET_DATE_AND_TIME

*&---------------------------------------------------------------------*
*&      Form  GET_ADD_DATA
*&---------------------------------------------------------------------*
FORM GET_ADD_DATA .

* Begin of change MOD-010
* Get responsible POrg for the provided plant
*  SELECT SINGLE ekorg
*           INTO gv_ekorg
*           FROM t001w
*          WHERE werks EQ p_werks.

  SELECT SINGLE EKORG FROM YSE_PO_SORG_PORG INTO GV_EKORG
    WHERE VKORG = P_SALORG.
* End of change MOD-010

* Get Material/plant parameters
* begin of MOD-013
*  SELECT      *
*         INTO TABLE it_matplant
*         FROM yse_em_matplant
*        WHERE matnr IN s_matnr
*          AND werks EQ p_werks.
* end of MOD-013

* Get the descriptions of the material status
* begin of MOD-013
*  SELECT      *
*         INTO TABLE it_t141t
*         FROM t141t
*        WHERE spras EQ sy-langu.
* end of MOD-013

* Get the sales data of the materials selected before
*  SELECT      MVKE~MATNR MVKE~VKORG MVKE~VTWEG MVKE~PRODH T001W~WERKS MVKE~MTPOS MVKE~MVGR5 MVKE~MVGR4
  IF NOT IT_MATERIAL[] IS INITIAL.
    SELECT      MATNR VKORG VTWEG PRODH MTPOS MVGR5 MVGR4
           INTO TABLE IT_MVKE
*         FROM T001W
*         JOIN YSE_PO_SORG_PORG
*           ON YSE_PO_SORG_PORG~EKORG EQ T001W~EKORG
*         JOIN MVKE
*           ON MVKE~VKORG EQ YSE_PO_SORG_PORG~VKORG
           FROM MVKE
            FOR ALL ENTRIES IN IT_MATERIAL
*        WHERE T001W~WERKS EQ P_WERKS
*          AND MVKE~MATNR  EQ IT_MATERIAL-MATNR
*          AND MVKE~VTWEG  EQ '01'.  "#EC CI_BUFFJOIN
          WHERE MATNR EQ IT_MATERIAL-MATNR
* Begin of change MOd-010
            AND VKORG EQ P_SALORG
*            AND vkorg EQ gv_vkorg
* End of change MOd-010
            AND VTWEG EQ '01'
            AND PRODH IN R_PRDHA.                     "#EC CI_BUFFJOIN*
  ENDIF.

* Get the description of MVKE-MVGR5 values
* begin of MOD-013
*  SELECT      *
*         FROM tvm5t
*         INTO TABLE it_mvgr5
*        WHERE spras EQ sy-langu.
* end of MOD-013

* Get the shipping instruction for EINE-EVERS
* begin of MOD-013
*  SELECT      *
*         FROM t027b
*         INTO TABLE it_evers
*        WHERE spras EQ sy-langu.
* end of MOD-013

* Currency
  SELECT SINGLE T001~WAERS
           INTO GV_WAERS
           FROM T001W
          INNER JOIN T001K
             ON T001W~BWKEY = T001K~BWKEY
          INNER JOIN T001
             ON T001K~BUKRS = T001~BUKRS
          WHERE T001W~WERKS EQ P_WERKS.                "#EC CI_BUFFJOIN

* Fixed vendor
  IF NOT IT_MATERIAL[] IS INITIAL.
    SELECT      MATNR EORD~WERKS EORD~LIFNR FLIFN KTOKK
           INTO TABLE IT_EORD
           FROM EORD
          INNER JOIN LFA1
             ON EORD~LIFNR = LFA1~LIFNR
            FOR ALL ENTRIES IN IT_MATERIAL
          WHERE MATNR EQ IT_MATERIAL-MATNR
            AND EORD~WERKS EQ P_WERKS
            AND FLIFN EQ C_X.                          "#EC CI_BUFFJOIN
  ENDIF.

* Get PIR data, but only when we have suppliers
  READ TABLE IT_EORD INDEX 1.
  IF SY-SUBRC EQ 0.
    SELECT      A~MATNR
                B~WERKS B~NETPR B~PEINH B~WAERS
* begin of MOD-013
*                b~aplfz
* end of MOD-013
                B~EVERS
           INTO TABLE IT_EINE
           FROM EINA AS A
          INNER JOIN EINE AS B
             ON A~INFNR = B~INFNR
            FOR ALL ENTRIES IN IT_EORD
          WHERE A~MATNR EQ IT_EORD-MATNR
            AND A~LIFNR EQ IT_EORD-LIFNR
            AND A~LOEKZ EQ SPACE
            AND B~WERKS EQ P_WERKS
            AND B~EKORG EQ GV_EKORG.

*   Get transfer prices
    IF NOT IT_EORD[] IS INITIAL.
      SELECT      KAPPL KSCHL LIFNR MATNR EKORG WERKS ESOKZ DATBI DATAB KNUMH
             INTO CORRESPONDING FIELDS OF TABLE IT_A017
             FROM A017
              FOR ALL ENTRIES IN IT_EORD
            WHERE KAPPL EQ 'M'
              AND KSCHL EQ 'PB00'
              AND LIFNR EQ IT_EORD-LIFNR
              AND MATNR EQ IT_EORD-MATNR
              AND DATBI GT SY-DATUM
              AND ESOKZ EQ '0'.
* Begin of MOD-010
*              AND ekorg EQ gv_ekorg.
* End of MOD-010
    ENDIF.
    SORT IT_A017 BY LIFNR MATNR EKORG WERKS.
* Begin of delete MOD-012
*    LOOP AT it_a017.
*      SELECT SINGLE kopos kbetr kpein konwa
*               INTO (it_a017-kopos, it_a017-kbetr, it_a017-kpein, it_a017-konwa)
*               FROM konp
*              WHERE knumh EQ it_a017-knumh.
*      MODIFY it_a017.
*    ENDLOOP.
* End of delete MOD-012
* begin of MOD-013
** Begin of insert MOD-012
*    IF it_a017[] IS NOT INITIAL.
*      SELECT kopos kbetr kpein konwa
*      INTO  (it_a017-kopos, it_a017-kbetr, it_a017-kpein, it_a017-konwa)
*      FROM konp FOR ALL ENTRIES IN it_a017
*      WHERE knumh EQ it_a017-knumh.
*         IF sy-subrc = 0.
*          APPEND it_a017.
*          CLEAR it_a017.
*        ENDIF.
*      ENDSELECT.
*    ENDIF.
** End of insert MOD-012
    LOOP AT IT_A017.
      SELECT SINGLE KOPOS KBETR KPEIN KONWA
               INTO (IT_A017-KOPOS, IT_A017-KBETR, IT_A017-KPEIN, IT_A017-KONWA)
               FROM KONP
              WHERE KNUMH EQ IT_A017-KNUMH.
      MODIFY IT_A017.
    ENDLOOP.
* end of MOD-013
  ENDIF.

* Material cost (standard price)
  IF NOT IT_MATERIAL[] IS INITIAL.
    SELECT      STPRS MATNR PEINH WERKS
* begin of MOD-013
** begin of insertion MOD-006
*                  verpr
** end of insertion MOD-006
* end of MOD-013
           INTO CORRESPONDING FIELDS OF TABLE IT_MBEW
           FROM MBEW
          INNER JOIN T001W
             ON MBEW~BWKEY = T001W~BWKEY
            FOR ALL ENTRIES IN IT_MATERIAL
          WHERE MATNR = IT_MATERIAL-MATNR
            AND WERKS = P_WERKS
* begin of insertion MOD-006
            AND BWTAR = ' '.
* end of insertion MOD-006
  ENDIF.
* Get Planned receipts
* begin of MOD-013
*    PERFORM get_planned_receipts.
* end of MOD-013

* begin of MOD-013
** Begin of insert MOD-010
*    IF p_goods <> 'X'.
** End of insert MOD-010
** Get goods qty's in transit
** begin of MOD-013
**      PERFORM get_goods_in_transit.
** end of MOD-013
** Begin of insert MOD-010
*    ENDIF.
** End of insert MOD-010
* end of MOD-013


* Get order data for "stock back order" and "open sales orders" (allocated stock)
  PERFORM GET_ORDER_DATA.

* Get service reservation data for "stock back order" and "open reservations" (allocated stock)
  PERFORM GET_SERVICE_DATA.

* Get allocated stock
  PERFORM GET_ALLOCATED_STOCK.

*>>>>>> Begin of insert EXTUVE 20090807
  PERFORM GET_ALLOCATED_STOCK1.
*>>>>>> End of insert EXTUVE 20090807
* Get stock back order
* begin of MOD-013
*    PERFORM get_stock_border.
* end of MOD-013
* Get issue / receipt data
  PERFORM GET_DATES.

* Surplus data
*  PERFORM FILL_SURPLUS.

* Find the stock history

  PERFORM GET_STOCK_HISTORY.

* Find the stock forecast
* begin of MOD-013
*    PERFORM get_stock_forecast.
* end of MOD-013

ENDFORM.                    " GET_ADD_DATA

*&---------------------------------------------------------------------*
*&      Form  GET_PLANNED_RECEIPTS
*&---------------------------------------------------------------------*
FORM GET_PLANNED_RECEIPTS.

*if in selection screen 1000 as storage location, take materials into account storage location blank
*  IF p_lgort NE '1000'.
  IF '1000' NOT IN S_LGORT AND '6100' NOT IN S_LGORT AND '6200' NOT IN S_LGORT. " CD1K979910
* Find PO quantities
    SELECT    EBELN EBELP MATNR WERKS LGORT MENGE
      INTO TABLE IT_EKPO
      FROM EKPO
* Begin of change MOD-010
*     AS a INNER JOIN ekpo AS b
*      ON a~ebeln = b~ebeln
*           FROM ekpo
* End of change MOD-010
          WHERE MATNR IN S_MATNR
            AND WERKS EQ P_WERKS
*            AND lgort EQ p_lgort
            AND LGORT IN S_LGORT
            AND LOEKZ EQ SPACE
            AND RETPO EQ SPACE
            AND ELIKZ EQ SPACE.
* Begin of insert MOD-010
*            AND ekorg = gv_ekorg.
* End of insert MOD-010
  ELSE.
    SELECT     EBELN EBELP MATNR WERKS LGORT MENGE
      INTO TABLE IT_EKPO
      FROM EKPO
* Begin of change MOD-010
*       AS a INNER JOIN ekpo AS b
*      ON a~ebeln = b~ebeln
*         FROM ekpo
* End of change MOD-010
         WHERE MATNR IN S_MATNR
          AND WERKS EQ P_WERKS
*          AND ( lgort EQ '1000'
           AND ( LGORT IN S_LGORT
                      OR  LGORT EQ  '' )
          AND LOEKZ EQ SPACE
          AND RETPO EQ SPACE
          AND ELIKZ EQ SPACE.
* Begin of insert MOD-010
*          AND a~ekorg = gv_ekorg.
* End of insert MOD-010
  ENDIF.

* Summarize PO target quanities per Plant/Stloc material
*   and delete entries that are not in material table
  LOOP AT IT_EKPO.
    READ TABLE IT_MATERIAL WITH KEY MATNR = IT_EKPO-MATNR
                           BINARY SEARCH.
    IF SY-SUBRC NE 0.
      DELETE IT_EKPO.
    ELSE.
      IT_OPEN_PO-MATNR = IT_EKPO-MATNR.
      IT_OPEN_PO-WERKS = IT_EKPO-WERKS.
      IT_OPEN_PO-LGORT = IT_EKPO-LGORT.
      IT_OPEN_PO-QTY   = IT_EKPO-MENGE.
      COLLECT IT_OPEN_PO.
    ENDIF.
  ENDLOOP.

* If open PO quantities found
  READ TABLE IT_OPEN_PO INDEX 1.
  IF SY-SUBRC EQ 0.

*   Select receipt items
    SELECT      EBELN EBELP ZEKKN VGABE GJAHR BELNR BUZEI MATNR WERKS MENGE BWART
           INTO TABLE IT_EKBE
           FROM EKBE
            FOR ALL ENTRIES IN IT_EKPO
          WHERE EBELN EQ IT_EKPO-EBELN
            AND VGABE = '1'.            " Goods Receipt

*   Subtract receipted qty's from open PO table
    LOOP AT IT_EKBE.
      READ TABLE IT_EKPO WITH KEY EBELN = IT_EKBE-EBELN
                                  EBELP = IT_EKBE-EBELP.
      IF SY-SUBRC EQ 0.
        IT_OPEN_PO-MATNR = IT_EKBE-MATNR.
        IT_OPEN_PO-WERKS = IT_EKPO-WERKS.
        IT_OPEN_PO-LGORT = IT_EKPO-LGORT.
*  Take debet and credit (or bwart into account)
        IF IT_EKBE-BWART EQ '641' OR IT_EKBE-BWART EQ '101' OR IT_EKBE-BWART EQ '643'.
          IT_OPEN_PO-QTY = IT_EKBE-MENGE * ( -1 ).
        ELSEIF IT_EKBE-BWART EQ '642' OR IT_EKBE-BWART EQ '102' OR IT_EKBE-BWART EQ '644'.
          IT_OPEN_PO-QTY = IT_EKBE-MENGE.
        ELSE.
          CLEAR IT_OPEN_PO-QTY.
        ENDIF.
        COLLECT IT_OPEN_PO.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.                    " GET_PLANNED_RECEIPTS

*&---------------------------------------------------------------------*
*&      Form  SET_ADD_VARS
*&---------------------------------------------------------------------*
FORM SET_ADD_VARS .

* To get automatic search help for vendor, another field was referenced. However, that
* field allows for 4 more positions, so that testing for equality fails. Therefore, copy
* to global variable.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = P_LIFNR
    IMPORTING
      OUTPUT = GV_LIFNR.

ENDFORM.                    " SET_ADD_VARS

*&---------------------------------------------------------------------*
*&      Form  FIND_FIXED_VENDOR_FOR_MAT
*&---------------------------------------------------------------------*
FORM FIND_FIXED_VENDOR_FOR_MAT CHANGING P_SKIP TYPE C.

* Assume we want to keep the material
  CLEAR P_SKIP.
* Supplier (fixed vendor)
  CLEAR SY-SUBRC.
* If current entry in EORD does not correspond to current materil
  IF    IT_MATERIAL-MATNR NE IT_EORD-MATNR
     OR IT_MATERIAL-WERKS NE IT_EORD-WERKS.
*   Read table EORD for current material
    READ TABLE IT_EORD WITH KEY MATNR = IT_MATERIAL-MATNR
                                WERKS = IT_MATERIAL-WERKS.
  ENDIF.
* If supplier found, check it against selection criteria
  IF SY-SUBRC EQ 0.
*   Copy supplier
    WA_OUTPUT-LIFNR = IT_EORD-LIFNR.    " Supplier (fixed vendor)
*   If user specified vendor on selection screen
    IF NOT P_LIFNR IS INITIAL.
*     If different from vendor of the material, skip the material
      IF IT_EORD-LIFNR NE GV_LIFNR.
        P_SKIP = 'X'.
      ENDIF.
    ENDIF.
*   If user specified vendor account group on selection screen
    IF NOT P_KTOKK IS INITIAL.
*     If vendor account group is different from selection crit, skip
      IF IT_EORD-KTOKK NE P_KTOKK.
        P_SKIP = 'X'.
      ENDIF.
    ENDIF.
* Supplier not found, while vendor or vendor account group specified
* on selection screen, skip the material
  ELSEIF NOT P_LIFNR IS INITIAL OR NOT P_KTOKK IS INITIAL.
    P_SKIP = 'X'.
  ENDIF.

ENDFORM.                    " FIND_FIXED_VENDOR_FOR_MAT

*&---------------------------------------------------------------------*
*&      Form  SET_MRP_TYPE_FOR_MAT
*&---------------------------------------------------------------------*
FORM SET_MRP_TYPE_FOR_MAT .

  CASE IT_MATERIAL-DISMM.
    WHEN 'Z5'.
      WA_OUTPUT-STOCK_POL = 'ST'.
    WHEN 'Z6' OR 'Z7'.
      WA_OUTPUT-STOCK_POL = 'NS'.
  ENDCASE.

ENDFORM.                    " SET_MRP_TYPE_FOR_MAT


* Begin of insert MOD-007
*&---------------------------------------------------------------------*
*&      Form  SET_HITS_FOR_X_MONTHS
*&---------------------------------------------------------------------*
FORM SET_HITS_FOR_X_MONTHS.

  DATA: P_DATE6 LIKE SY-DATUM,
        P_DATE12 LIKE SY-DATUM.

*Begin of insert MOD-009
  TYPES: BEGIN OF TY_VBRP_ZOR_QTY,
           VBELN TYPE VBELN_VF,
           POSNR TYPE POSNR_VF,
           FKIMG TYPE FKIMG,
           AUBEL TYPE VBELN_VA,
           MATNR TYPE MATNR,
         END OF TY_VBRP_ZOR_QTY.

  TYPES: BEGIN OF TY_VBAP_ZRE1_QTY,
           VBELN  TYPE VBELN_VA,
           POSNR  TYPE POSNR_VA,
           MATNR  TYPE MATNR,
           KWMENG TYPE KWMENG,
         END OF TY_VBAP_ZRE1_QTY.

  TYPES: BEGIN OF TY_LIPS_ZO03_QTY,
           VBELN  TYPE VBELN_VL,
           POSNR  TYPE POSNR_VL,
           MATNR  TYPE MATNR,
           LFIMG  TYPE LFIMG,
         END OF TY_LIPS_ZO03_QTY.

  DATA: IT_VBRP_ZOR_QTY_6   TYPE STANDARD TABLE OF TY_VBRP_ZOR_QTY,
        WA_VBRP_ZOR_QTY_6   TYPE TY_VBRP_ZOR_QTY,
        LV_QTY_ZOR_6        TYPE VBRP-FKIMG,
        IT_VBRP_ZOR_QTY_12  TYPE STANDARD TABLE OF TY_VBRP_ZOR_QTY,
        WA_VBRP_ZOR_QTY_12  TYPE TY_VBRP_ZOR_QTY,
        LV_QTY_ZOR_12       TYPE VBRP-FKIMG,
        IT_VBAP_ZRE1_QTY_6  TYPE STANDARD TABLE OF TY_VBAP_ZRE1_QTY,
        WA_VBAP_ZRE1_QTY_6  TYPE TY_VBAP_ZRE1_QTY,
        LV_QTY_ZRE1_6       TYPE VBAP-KWMENG,
        IT_VBAP_ZRE1_QTY_12 TYPE STANDARD TABLE OF TY_VBAP_ZRE1_QTY,
        WA_VBAP_ZRE1_QTY_12 TYPE TY_VBAP_ZRE1_QTY,
        LV_QTY_ZRE1_12      TYPE VBAP-KWMENG,
        IT_LIPS_HT_ZO03_6   TYPE STANDARD TABLE OF TY_LIPS_ZO03_QTY,
        WA_LIPS_HT_ZO03_6   TYPE TY_LIPS_ZO03_QTY,
        LV_QTY_ZO03_6       TYPE LIPS-LFIMG,
        IT_LIPS_HT_ZO03_12  TYPE STANDARD TABLE OF TY_LIPS_ZO03_QTY,
        WA_LIPS_HT_ZO03_12  TYPE TY_LIPS_ZO03_QTY,
        LV_QTY_ZO03_12      TYPE LIPS-LFIMG.

  REFRESH: IT_VBRP_ZOR_QTY_6,
           IT_VBRP_ZOR_QTY_12,
           IT_VBAP_ZRE1_QTY_6,
           IT_VBAP_ZRE1_QTY_12.

  CLEAR:   LV_QTY_ZOR_6,
           LV_QTY_ZOR_12,
           LV_QTY_ZRE1_6,
           LV_QTY_ZRE1_12.

*End of insert MOD-009

  CLEAR LV_NBR_ZOR_6.
  CLEAR LV_NBR_ZOR_12.
  CLEAR LV_NBR_ZRE1_6.
  CLEAR LV_NBR_ZRE1_12.
  CLEAR LV_NBR_ZO03_6.
  CLEAR LV_NBR_ZO03_12.
  CLEAR IT_VBAP_HT_ZOR_6[].
  CLEAR IT_VBAP_HT_ZOR_12[].
  CLEAR IT_VBAP_HT_ZO03_6[].
  CLEAR IT_VBAP_HT_ZO03_12[].

* Retrieve period 6 months
  CALL FUNCTION 'MONTH_PLUS_DETERMINE'
    EXPORTING
      MONTHS  = -6
      OLDDATE = SY-DATUM
    IMPORTING
      NEWDATE = P_DATE6.
  P_DATE6 = P_DATE6 + 1.

* Retrieve period 12 months
  CALL FUNCTION 'MONTH_PLUS_DETERMINE'
    EXPORTING
      MONTHS  = -12
      OLDDATE = SY-DATUM
    IMPORTING
      NEWDATE = P_DATE12.
  P_DATE12 = P_DATE12 + 1.

  IF IT_MATERIAL-LGORT IS INITIAL OR IT_MATERIAL-LGORT = '1000'.
* Retrieve type ZOR orders
    SELECT VBAP~VBELN VBAP~POSNR VBAP~MATNR VBAP~KWMENG VBAP~WERKS VBAK~VBTYP
         INTO TABLE IT_VBAP_HT_ZOR
         FROM VBAK
        INNER JOIN VBAP
           ON VBAK~VBELN EQ VBAP~VBELN
        WHERE AUART IN ('ZOR') AND
              MATNR = IT_MATERIAL-MATNR AND
              WERKS = P_WERKS AND
              ( LGORT = '1000' OR LGORT = '6100' OR LGORT = '6200' OR LGORT = ' ' ). " CR3022 CD1K979910
* Begin of insert MOD-010
*        AND vbak~VKORG = p_SALORG.
* End of insert MOD-010




* Retrieve type ZO03 orders
    SELECT VBAP~VBELN VBAP~POSNR VBAP~MATNR VBAP~KWMENG VBAP~WERKS VBAK~VBTYP
         INTO TABLE IT_VBAP_HT_ZO03
         FROM VBAK
        INNER JOIN VBAP
           ON VBAK~VBELN EQ VBAP~VBELN
        WHERE AUART IN ('ZO03') AND
              MATNR = IT_MATERIAL-MATNR AND
              WERKS = P_WERKS AND
              ( LGORT = '1000' OR LGORT = '6100' OR LGORT = '6200' OR LGORT = ' ' ). " CR3022 CD1K979910
* Begin of insert MOD-010
*        AND vbak~VKORG = p_SALORG.
* End of insert MOD-010



* Retrieve nbr of type ZRE1 orders for 6 months period
    SELECT COUNT(*)
         INTO LV_NBR_ZRE1_6
         FROM VBAK AS A
        INNER JOIN VBAP AS B
           ON A~VBELN EQ B~VBELN
        WHERE AUART IN ('ZRE1') AND
              MATNR = IT_MATERIAL-MATNR AND
              WERKS = P_WERKS AND
              ( LGORT = '1000' OR LGORT = '6100' OR LGORT = '6200' OR LGORT = ' ' ) " CR3022 CD1K979910
              AND
              A~ERDAT BETWEEN P_DATE6 AND SY-DATUM.
* Begin of insert MOD-010
*              AND a~VKORG = p_SALORG.
* End of insert MOD-010
*Begin of insert MOD-009
*Retrieve quantities of type ZRE1 orders for 6 months period
    SELECT B~VBELN
           B~POSNR
           B~MATNR
           B~KWMENG
         INTO CORRESPONDING FIELDS OF TABLE IT_VBAP_ZRE1_QTY_6
         FROM VBAK AS A
        INNER JOIN VBAP AS B
           ON A~VBELN EQ B~VBELN
        WHERE AUART IN ('ZRE1') AND
              MATNR = IT_MATERIAL-MATNR AND
              WERKS = P_WERKS AND
              ( LGORT = '1000' OR LGORT = '6100' OR LGORT = '6200' OR LGORT = ' ' ) " CR3022 CD1K979910
              AND
              A~ERDAT BETWEEN P_DATE6 AND SY-DATUM.
* Begin of insert MOD-010
*        AND a~VKORG = p_SALORG.
* End of insert MOD-010

*Total quantity for ZRE1 type for 6 months
    CLEAR: LV_QTY_ZRE1_6.
    LOOP AT IT_VBAP_ZRE1_QTY_6 INTO WA_VBAP_ZRE1_QTY_6.
      LV_QTY_ZRE1_6 = LV_QTY_ZRE1_6 + WA_VBAP_ZRE1_QTY_6-KWMENG.
    ENDLOOP.

*End of insert MOD-009

* Retrieve nbr of type ZRE1 orders for 12 months period
    SELECT COUNT(*)
         INTO LV_NBR_ZRE1_12
         FROM VBAK AS A
        INNER JOIN VBAP AS B
           ON A~VBELN EQ B~VBELN
        WHERE AUART IN ('ZRE1') AND
              MATNR = IT_MATERIAL-MATNR AND
              WERKS = P_WERKS AND
              ( LGORT = '1000' OR LGORT = '6100' OR LGORT = '6200' OR LGORT = ' ' ) " CR3022 CD1K979910
              AND
              A~ERDAT BETWEEN P_DATE12 AND SY-DATUM.
* Begin of insert MOD-010
*        AND a~VKORG = p_SALORG.
* End of insert MOD-010

*Begin of insert MOD-009
*Retrieve quantities of type ZRE1 orders for 12 months period
    SELECT B~VBELN
           B~POSNR
           B~MATNR
           B~KWMENG
         INTO CORRESPONDING FIELDS OF TABLE IT_VBAP_ZRE1_QTY_12
         FROM VBAK AS A
        INNER JOIN VBAP AS B
           ON A~VBELN EQ B~VBELN
        WHERE AUART IN ('ZRE1') AND
              MATNR = IT_MATERIAL-MATNR AND
              WERKS = P_WERKS AND
              ( LGORT = '1000' OR LGORT = '6100' OR LGORT = '6200' OR LGORT = ' ' ) " CR3022 CD1K979910
              AND
              A~ERDAT BETWEEN P_DATE12 AND SY-DATUM.
* Begin of insert MOD-010
*        AND a~VKORG = p_SALORG.
* End of insert MOD-010

*Total quantity for ZRE1 type for 12 months
    CLEAR: LV_QTY_ZRE1_12.
    LOOP AT IT_VBAP_ZRE1_QTY_12 INTO WA_VBAP_ZRE1_QTY_12.
      LV_QTY_ZRE1_12 = LV_QTY_ZRE1_12 + WA_VBAP_ZRE1_QTY_12-KWMENG.
    ENDLOOP.

*End of insert MOD-009

  ELSE.
* Retrieve type ZOR orders
    SELECT VBAP~VBELN VBAP~POSNR VBAP~MATNR VBAP~KWMENG VBAP~WERKS VBAK~VBTYP
         INTO TABLE IT_VBAP_HT_ZOR
         FROM VBAK
        INNER JOIN VBAP
           ON VBAK~VBELN EQ VBAP~VBELN
        WHERE AUART IN ('ZOR') AND
              MATNR = IT_MATERIAL-MATNR AND
              WERKS = P_WERKS AND
              LGORT = IT_MATERIAL-LGORT.
* Begin of insert MOD-010
*        AND vbak~VKORG = p_SALORG.
* End of insert MOD-010




* Retrieve type ZO03 orders
    SELECT VBAP~VBELN VBAP~POSNR VBAP~MATNR VBAP~KWMENG VBAP~WERKS VBAK~VBTYP
         INTO TABLE IT_VBAP_HT_ZO03
         FROM VBAK
        INNER JOIN VBAP
           ON VBAK~VBELN EQ VBAP~VBELN
        WHERE AUART IN ('ZO03') AND
              MATNR = IT_MATERIAL-MATNR AND
              WERKS = P_WERKS AND
              LGORT = IT_MATERIAL-LGORT.
* Begin of insert MOD-010
*        AND vbak~VKORG = p_SALORG.
* End of insert MOD-010



* Retrieve nbr of type ZRE1 orders for 6 months period
    SELECT COUNT(*)
         INTO LV_NBR_ZRE1_6
         FROM VBAK AS A
        INNER JOIN VBAP AS B
           ON A~VBELN EQ B~VBELN
        WHERE AUART IN ('ZRE1') AND
              MATNR = IT_MATERIAL-MATNR AND
              WERKS = P_WERKS AND
              LGORT = IT_MATERIAL-LGORT AND
              A~ERDAT BETWEEN P_DATE6 AND SY-DATUM.
* Begin of insert MOD-010
*        AND a~VKORG = p_SALORG.
* End of insert MOD-010

*Begin of insert MOD-009
*Retrieve quantities of type ZRE1 orders for 6 months period
    SELECT B~VBELN
           B~POSNR
           B~MATNR
           B~KWMENG
         INTO CORRESPONDING FIELDS OF TABLE IT_VBAP_ZRE1_QTY_6
         FROM VBAK AS A
        INNER JOIN VBAP AS B
           ON A~VBELN EQ B~VBELN
        WHERE AUART IN ('ZRE1') AND
              MATNR = IT_MATERIAL-MATNR AND
              WERKS = P_WERKS AND
              LGORT = IT_MATERIAL-LGORT AND
              A~ERDAT BETWEEN P_DATE6 AND SY-DATUM.
* Begin of insert MOD-010
*        AND a~VKORG = p_SALORG.
* End of insert MOD-010

*Total quantity for ZRE1 type for 6 months
    CLEAR: LV_QTY_ZRE1_6.
    LOOP AT IT_VBAP_ZRE1_QTY_6 INTO WA_VBAP_ZRE1_QTY_6.
      LV_QTY_ZRE1_6 = LV_QTY_ZRE1_6 + WA_VBAP_ZRE1_QTY_6-KWMENG.
    ENDLOOP.

*End of insert MOD-009

* Retrieve nbr of type ZRE1 orders for 12 months period
    SELECT COUNT(*)
         INTO LV_NBR_ZRE1_12
         FROM VBAK AS A
        INNER JOIN VBAP AS B
           ON A~VBELN EQ B~VBELN
        WHERE AUART IN ('ZRE1') AND
              MATNR = IT_MATERIAL-MATNR AND
              WERKS = P_WERKS AND
              LGORT = IT_MATERIAL-LGORT AND
              A~ERDAT BETWEEN P_DATE12 AND SY-DATUM.
* Begin of insert MOD-010
*        AND a~VKORG = p_SALORG.
* End of insert MOD-010

*Begin of insert MOD-009
*Retrieve quantities of type ZRE1 orders for 12 months period
    SELECT B~VBELN
           B~POSNR
           B~MATNR
           B~KWMENG
         INTO CORRESPONDING FIELDS OF TABLE IT_VBAP_ZRE1_QTY_12
         FROM VBAK AS A
        INNER JOIN VBAP AS B
           ON A~VBELN EQ B~VBELN
        WHERE AUART IN ('ZRE1') AND
              MATNR = IT_MATERIAL-MATNR AND
              WERKS = P_WERKS AND
              LGORT = IT_MATERIAL-LGORT AND
              A~ERDAT BETWEEN P_DATE12 AND SY-DATUM.
* Begin of insert MOD-010
*        AND a~VKORG = p_SALORG.
* End of insert MOD-010

*Total quantity for ZRE1 type for 12 months
    CLEAR: LV_QTY_ZRE1_12.
    LOOP AT IT_VBAP_ZRE1_QTY_12 INTO WA_VBAP_ZRE1_QTY_12.
      LV_QTY_ZRE1_12 = LV_QTY_ZRE1_12 + WA_VBAP_ZRE1_QTY_12-KWMENG.
    ENDLOOP.

*End of insert MOD-009

  ENDIF.

********************** ZOR ********************************
* Valid ZOR's for 6 months period
  IF NOT IT_VBAP_HT_ZOR[] IS INITIAL.
    SELECT      A~VBELV B~VBELN
           INTO TABLE IT_VBAP_HT_ZOR_6
           FROM VBFA AS A
           JOIN VBRK AS B
             ON A~VBELN EQ B~VBELN
            FOR ALL ENTRIES IN IT_VBAP_HT_ZOR
          WHERE A~VBELV = IT_VBAP_HT_ZOR-VBELN
            AND A~POSNV = IT_VBAP_HT_ZOR-POSNR
            AND A~VBTYP_N = 'M'
            AND B~FKDAT BETWEEN P_DATE6 AND SY-DATUM.
    .  " Deliveries
*            AND c~wbstk = 'C'.
  ENDIF.

* select number of hits material in 6 months (ZOR)
  IF IT_VBAP_HT_ZOR_6[] IS NOT INITIAL.
    SELECT COUNT(*) INTO LV_NBR_ZOR_6 FROM VBAP
      FOR ALL ENTRIES IN IT_VBAP_HT_ZOR_6
      WHERE VBELN = IT_VBAP_HT_ZOR_6-VBELN AND
            MATNR = IT_MATERIAL-MATNR AND
            KWMENG <> 0.
  ENDIF.

*Begin of insert MOD-009
*Get ZOR's quanities for 6 months period
  IF IT_VBAP_HT_ZOR_6[] IS NOT INITIAL.
    SELECT VBELN
           POSNR
           FKIMG
           AUBEL
           MATNR
    INTO   CORRESPONDING FIELDS OF TABLE IT_VBRP_ZOR_QTY_6
    FROM   VBRP
    FOR    ALL ENTRIES IN IT_VBAP_HT_ZOR_6
    WHERE  VBELN EQ IT_VBAP_HT_ZOR_6-VBELV
    AND    MATNR EQ IT_MATERIAL-MATNR.
  ENDIF.

*Total quantity for ZOR for 6 months period
  CLEAR: WA_VBRP_ZOR_QTY_6,
         LV_QTY_ZOR_6.
  LOOP AT IT_VBRP_ZOR_QTY_6 INTO WA_VBRP_ZOR_QTY_6.
    LV_QTY_ZOR_6 = LV_QTY_ZOR_6 + WA_VBRP_ZOR_QTY_6-FKIMG.
  ENDLOOP.
*End of insert MOD-009


* Valid ZOR's for 12 months period
  IF NOT IT_VBAP_HT_ZOR[] IS INITIAL.
    SELECT      A~VBELV B~VBELN
           INTO TABLE IT_VBAP_HT_ZOR_12
           FROM VBFA AS A
           JOIN VBRK AS B
             ON A~VBELN EQ B~VBELN
            FOR ALL ENTRIES IN IT_VBAP_HT_ZOR
          WHERE A~VBELV = IT_VBAP_HT_ZOR-VBELN
            AND A~POSNV = IT_VBAP_HT_ZOR-POSNR
            AND A~VBTYP_N = 'M'
            AND B~FKDAT BETWEEN P_DATE12 AND SY-DATUM.
    .  " Deliveries
*            AND c~wbstk = 'C'.
  ENDIF.

* select number of hits material in 12 months (ZOR)
  IF IT_VBAP_HT_ZOR_12[] IS NOT INITIAL.
    SELECT COUNT(*) INTO LV_NBR_ZOR_12 FROM VBAP
      FOR ALL ENTRIES IN IT_VBAP_HT_ZOR_12
      WHERE VBELN = IT_VBAP_HT_ZOR_12-VBELN AND
            MATNR = IT_MATERIAL-MATNR AND
            KWMENG <> 0.
  ENDIF.

*Begin of insert MOD-009
*Get ZOR's quanities for 12 months period
  IF IT_VBAP_HT_ZOR_12[] IS NOT INITIAL.
    SELECT VBELN
           POSNR
           FKIMG
           AUBEL
           MATNR
    INTO   CORRESPONDING FIELDS OF TABLE IT_VBRP_ZOR_QTY_12
    FROM   VBRP
    FOR    ALL ENTRIES IN IT_VBAP_HT_ZOR_12
    WHERE  VBELN EQ IT_VBAP_HT_ZOR_12-VBELV
    AND    MATNR EQ IT_MATERIAL-MATNR.
  ENDIF.

*Total quantity for ZOR for 12 months period
  CLEAR: WA_VBRP_ZOR_QTY_12,
         LV_QTY_ZOR_12.
  LOOP AT IT_VBRP_ZOR_QTY_12 INTO WA_VBRP_ZOR_QTY_12.
    LV_QTY_ZOR_12 = LV_QTY_ZOR_12 + WA_VBRP_ZOR_QTY_12-FKIMG.
  ENDLOOP.
*End of insert MOD-009

****************** ZO03 ***********************************
* Valid ZO03's for 6 months period
  IF NOT IT_VBAP_HT_ZO03[] IS INITIAL.
    SELECT      A~VBELV B~VBELN
           INTO TABLE IT_VBAP_HT_ZO03_6
           FROM VBFA AS A
           JOIN LIKP AS B
             ON A~VBELN EQ B~VBELN
            FOR ALL ENTRIES IN IT_VBAP_HT_ZO03
          WHERE A~VBELV = IT_VBAP_HT_ZO03-VBELN
            AND A~POSNV = IT_VBAP_HT_ZO03-POSNR
            AND A~VBTYP_N = 'J'
            AND B~WADAT BETWEEN P_DATE6 AND SY-DATUM.
    .  " Deliveries
*            AND c~wbstk = 'C'.
  ENDIF.

* select number of hits material in 6 months (ZO03)
  IF IT_VBAP_HT_ZO03_6[] IS NOT INITIAL.
    SELECT COUNT(*) INTO LV_NBR_ZO03_6 FROM VBAP
      FOR ALL ENTRIES IN IT_VBAP_HT_ZO03_6
      WHERE VBELN = IT_VBAP_HT_ZO03_6-VBELN AND
            MATNR = IT_MATERIAL-MATNR AND
            KWMENG <> 0.
  ENDIF.

*Begin of insert MOD-009
*Retrieve quantities for type ZO03 for 6 months
  IF NOT IT_VBAP_HT_ZO03_6[] IS INITIAL.
    SELECT VBELN
           POSNR
           MATNR
           LFIMG
    FROM   LIPS
    INTO   CORRESPONDING FIELDS OF TABLE IT_LIPS_HT_ZO03_6
    FOR    ALL ENTRIES IN IT_VBAP_HT_ZO03_6
    WHERE  VBELN EQ IT_VBAP_HT_ZO03_6-VBELV
    AND    MATNR EQ IT_MATERIAL-MATNR.
  ENDIF.

*Total quantity for ZO03 type for 6 months
  LOOP AT IT_LIPS_HT_ZO03_6 INTO WA_LIPS_HT_ZO03_6.
    LV_QTY_ZO03_6 = LV_QTY_ZO03_6 + WA_LIPS_HT_ZO03_6-LFIMG.
  ENDLOOP.
*End of insert MOD-009

* Valid ZO03's for 12 months period
  IF NOT IT_VBAP_HT_ZO03[] IS INITIAL.
    SELECT      A~VBELV B~VBELN
           INTO TABLE IT_VBAP_HT_ZO03_12
           FROM VBFA AS A
           JOIN LIKP AS B
             ON A~VBELN EQ B~VBELN
            FOR ALL ENTRIES IN IT_VBAP_HT_ZO03
          WHERE A~VBELV = IT_VBAP_HT_ZO03-VBELN
            AND A~POSNV = IT_VBAP_HT_ZO03-POSNR
            AND A~VBTYP_N = 'J'
            AND B~WADAT BETWEEN P_DATE12 AND SY-DATUM.
    .  " Deliveries
*            AND c~wbstk = 'C'.
  ENDIF.

* select number of hits material in 12 months (ZO03)
  IF IT_VBAP_HT_ZO03_12[] IS NOT INITIAL.
    SELECT COUNT(*) INTO LV_NBR_ZO03_12 FROM VBAP
      FOR ALL ENTRIES IN IT_VBAP_HT_ZO03_12
      WHERE VBELN = IT_VBAP_HT_ZO03_12-VBELN AND
            MATNR = IT_MATERIAL-MATNR AND
            KWMENG <> 0.
  ENDIF.

*Begin of insert MOD-009
*Retrieve quantities for type ZO03 for 6 months
  IF IT_VBAP_HT_ZO03_12[] IS NOT INITIAL.
    SELECT VBELN
           POSNR
           MATNR
           LFIMG
    FROM   LIPS
    INTO   CORRESPONDING FIELDS OF TABLE IT_LIPS_HT_ZO03_12
    FOR    ALL ENTRIES IN IT_VBAP_HT_ZO03_12
    WHERE  VBELN EQ IT_VBAP_HT_ZO03_12-VBELV
    AND    MATNR EQ IT_MATERIAL-MATNR.
  ENDIF.

  LOOP AT IT_LIPS_HT_ZO03_12 INTO WA_LIPS_HT_ZO03_12.
    LV_QTY_ZO03_12 = LV_QTY_ZO03_12 + WA_LIPS_HT_ZO03_12-LFIMG.
  ENDLOOP.
*End of insert MOD-009
* begin of MOD-013
*  wa_output-hits6 = lv_nbr_zor_6 + lv_nbr_zo03_6 - lv_nbr_zre1_6.
*  wa_output-hits12 = lv_nbr_zor_12 + lv_nbr_zo03_12 - lv_nbr_zre1_12.
* end of MOD-013
*Begin of insert MOD-009
* begin of MOD-013
*  wa_output-qty6  = lv_qty_zor_6  + lv_qty_zo03_6  - lv_qty_zre1_12.
*  wa_output-qty12 = lv_qty_zor_12 + lv_qty_zo03_12 - lv_qty_zre1_12.
* end of MOD-013
*End of insert MOD-009

ENDFORM.                    "set_hits_for_x_months
* End of insert MOD-007

*&---------------------------------------------------------------------*
*&      Form  SET_STATUS_DESC_FOR_MAT
*&---------------------------------------------------------------------*
FORM SET_STATUS_DESC_FOR_MAT .

  CLEAR IT_T141T.
  READ TABLE IT_T141T WITH KEY MMSTA = IT_MATERIAL-MMSTA
                      BINARY SEARCH.
  IF SY-SUBRC EQ 0.
* begin of MOD-013
*    wa_output-mmsta_descr = it_t141t-mtstb.
* end of MOD-013
  ENDIF.

ENDFORM.                    " SET_STATUS_DESC_FOR_MAT

*&---------------------------------------------------------------------*
*&      Form  SET_CONSIGN_STOCK_FOR_MAT
*&---------------------------------------------------------------------*
FORM SET_CONSIGN_STOCK_FOR_MAT .

  CLEAR IT_MSKU.
  READ TABLE IT_MSKU WITH KEY MATNR = IT_MATERIAL-MATNR
                              WERKS = IT_MATERIAL-WERKS
                     BINARY SEARCH.
  IF SY-SUBRC EQ 0.
    WA_OUTPUT-KULAB = IT_MSKU-KULAB.
  ENDIF.

ENDFORM.                    " SET_CONSIGN_STOCK_FOR_MAT

*&---------------------------------------------------------------------*
*&      Form  SET_STCOST_FOR_MAT
*&---------------------------------------------------------------------*
FORM SET_STCOST_FOR_MAT .

  CLEAR IT_MBEW.
* Standard cost
  READ TABLE IT_MBEW WITH KEY MATNR = IT_MATERIAL-MATNR
                              WERKS = IT_MATERIAL-WERKS
                     BINARY SEARCH.
  IF SY-SUBRC EQ 0.
    IF IT_MBEW-PEINH NE 0.
      WA_OUTPUT-STPRS = IT_MBEW-STPRS / IT_MBEW-PEINH.
* begin of MOD-013
** begin of insertion MOD-006
*      wa_output-verpr = it_mbew-verpr / it_mbew-peinh.
** end of insertion MOD-006
* end of MOD-013
    ENDIF.
  ENDIF.

ENDFORM.                    " SET_STCOST_FOR_MAT

*&---------------------------------------------------------------------*
*&      Form  CALC_FOR_MAT
*&---------------------------------------------------------------------*
FORM CALC_FOR_MAT .

* Total stock balance
  WA_OUTPUT-TOTAL_STOCK = WA_OUTPUT-LABST +
                          WA_OUTPUT-INSME +
                          WA_OUTPUT-SPEME +
                          WA_OUTPUT-RETME +
* begin of MOD-013
*                          wa_output-umlmc +
*                          wa_output-umlme +
*                          wa_output-trame +
* end of MOD-013
                          WA_OUTPUT-KULAB.

* Total stock value/Goods in transit value
  IF WA_OUTPUT-STPRS EQ '999999999'.
    WA_OUTPUT-TOTAL_VALUE = WA_OUTPUT-STPRS.
* begin of MOD-013
*    wa_output-git = wa_output-stprs.
** begin of inertion MOD-006
*    wa_output-total_value_mac = wa_output-verpr.
*    wa_output-git_mac = wa_output-verpr.
** end of insertion MOD-006
* end of MOD-013
  ELSE.
    WA_OUTPUT-TOTAL_VALUE = WA_OUTPUT-TOTAL_STOCK * WA_OUTPUT-STPRS.
* begin of MOD-013
*    wa_output-git = wa_output-goods_transit * wa_output-stprs.
** begin of insertion MOD-006
*    wa_output-total_value_mac = wa_output-total_stock * wa_output-verpr.
*    wa_output-git_mac = wa_output-goods_transit * wa_output-verpr.
** end of insertion MOD-006
* end of MOD-013
  ENDIF.
*  Begin Of Insert EXTUVE 20090821
* Stock available
* begin of MOD-013
*  wa_output-available = wa_output-labst - wa_output-allocated.
* end of MOD-013
*  end Of Insert EXTUVE 20090821
* SBO
*  Begin Of Insert EXTUVE 20090810
*  wa_output-back = wa_output-available - wa_output-allocated.
*  commented on 15/10/2009
*  End of Insert EXTUVE 20090810

ENDFORM.                    " CALC_FOR_MAT

*&---------------------------------------------------------------------*
*&      Form  SET_SO_STOCK_FOR_MAT
*&---------------------------------------------------------------------*
FORM SET_SO_STOCK_FOR_MAT .

* Sales order stock (not on lgort level)
  READ TABLE IT_MSKA WITH KEY MATNR = IT_MATERIAL-MATNR
                              WERKS = IT_MATERIAL-WERKS
                              LGORT = IT_MATERIAL-LGORT     "CR1452
                              BINARY SEARCH.
  IF SY-SUBRC EQ 0.
    WA_OUTPUT-KALAB = IT_MSKA-KALAB.
  ENDIF.

ENDFORM.                    " SET_SO_STOCK_FOR_MAT

*&---------------------------------------------------------------------*
*&      Form  SET_ALLOC_STOCK_FOR_MAT
*&---------------------------------------------------------------------*
FORM SET_ALLOC_STOCK_FOR_MAT .

* Allocated stock
  READ TABLE IT_ALLOC WITH KEY MATNR = IT_MATERIAL-MATNR
                               WERKS = IT_MATERIAL-WERKS
*                               lgort = it_material-lgort "EXTUVE
                      BINARY SEARCH.
  IF SY-SUBRC EQ 0.
    WA_OUTPUT-ALLOCATED = IT_ALLOC-ALLOC_QUANTITY.
  ENDIF.

ENDFORM.                    " SET_ALLOC_STOCK_FOR_MAT

*&---------------------------------------------------------------------*
*&      Form  GET_ORDER_DATA
*&---------------------------------------------------------------------*
FORM GET_ORDER_DATA .

  RANGES:
    R_LGORT FOR VBAP-LGORT.

* Fill R_LGORT: If StLoc (LGORT) is 1000, also include lines with LGORT = '    '
*  r_lgort-sign   = 'I'.
*  r_lgort-option = 'EQ'.
*  r_lgort-low    = p_lgort.
*  APPEND r_lgort.
*  IF p_lgort = '1000'.
*    r_lgort-low  = '    '.
*    APPEND r_lgort.
*  ENDIF.

  R_LGORT[]  = S_LGORT[].

*>>>>>> bEGIN OF MOD 005 EXTUVE   20090602
*  IF '1000' IN s_lgort.
*    r_lgort-sign   = 'I'.
*    r_lgort-option = 'EQ'.
*    r_lgort-low  = '    '.
*    APPEND r_lgort.
*  ENDIF.
*>>>>>> eND OF MOD 005 EXTUVE   20090602

* Get open order item quantities
  SELECT      VBAP~VBELN VBAP~POSNR MATNR KWMENG WERKS LGORT ABGRU
         INTO TABLE IT_VBAP
         FROM VBAK
        INNER JOIN VBAP
           ON VBAK~VBELN EQ VBAP~VBELN
        WHERE MATNR IN S_MATNR
          AND WERKS EQ P_WERKS
          AND (    LGORT IN R_LGORT
                OR LGORT EQ ' ' )
          AND PSTYV IN S_PSTYV
          AND VBTYP EQ 'C'.
* Begin of insert MOD-010
*         AND vbak~vkorg EQ p_SALORG.
* End of insert MOD-010

ENDFORM.                    " GET_ORDER_DATA

*&---------------------------------------------------------------------*
*&      Form  GET_SERVICE_DATA
*&---------------------------------------------------------------------*
FORM GET_SERVICE_DATA .

* Get reservation data
* Begin of change MOD-010
*  SELECT      matnr werks lgort bdmng enmng vmeng umrez umren xwaok
*         INTO TABLE it_resb
*         FROM resb
*        WHERE matnr IN s_matnr
*          AND werks EQ p_werks
**          AND lgort EQ p_lgort
*          AND (    lgort IN s_lgort
*                OR lgort EQ ' ' )
*          AND xloek EQ space
*          AND (    xwaok EQ 'X'
*           OR xwaok EQ space ).

  SELECT      R~MATNR R~WERKS R~LGORT R~BDMNG R~ENMNG R~VMENG R~UMREZ R~UMREN R~XWAOK A~AUFNR
         INTO TABLE IT_RESB
         FROM RESB AS R
         INNER JOIN AUFK AS A
          ON R~KDAUF EQ A~AUFNR
         INNER JOIN VBAK AS V
          ON A~KDAUF EQ V~VBELN
        WHERE R~MATNR IN S_MATNR
          AND R~WERKS EQ P_WERKS
*          AND lgort EQ p_lgort
          AND (    R~LGORT IN S_LGORT
                OR R~LGORT EQ ' ' )
          AND R~XLOEK EQ SPACE
          AND (    R~XWAOK EQ 'X'
           OR R~XWAOK EQ SPACE )
          AND V~VKORG = P_SALORG.
* End of change MOD-010

ENDFORM.                    " GET_SERVICE_DATA

*&---------------------------------------------------------------------*
*&      Form  SET_MATPLANT_DATA
*&---------------------------------------------------------------------*
FORM SET_MATPLANT_DATA .

* Pack qty and lot size flag
  READ TABLE IT_MATPLANT WITH KEY MATNR = IT_MATERIAL-MATNR
                                  WERKS = IT_MATERIAL-WERKS
                         BINARY SEARCH.
  IF SY-SUBRC EQ 0.
* begin of MOD-013
*    wa_output-pack_qty    = it_matplant-pack_qty.
*    wa_output-lotsize_ind = it_matplant-lotsize_ind.
* end of MOD-013
  ENDIF.

ENDFORM.                    " SET_MATPLANT_DATA

*&---------------------------------------------------------------------*
*&      Form  SET_PIR_DATA
*&---------------------------------------------------------------------*
FORM SET_PIR_DATA .

* Find PIR line
  READ TABLE IT_EINE WITH KEY MATNR = IT_MATERIAL-MATNR
                              WERKS = IT_MATERIAL-WERKS
                     BINARY SEARCH.
  IF SY-SUBRC EQ 0.

*   Set planned delivery time (info record)
* begin of MOD-013
*    wa_output-aplfz = it_eine-aplfz.
* end of MOD-013

*   If there is a value in the PIR for shipping instructions
    IF NOT IT_EINE-EVERS IS INITIAL.
* begin of MOD-013
*      READ TABLE it_evers WITH KEY evers = it_eine-evers BINARY SEARCH.
*      wa_output-evers_descr = it_evers-evtxt.
* end of MOD-013
      WA_OUTPUT-EVERS = IT_EINE-EVERS.
    ENDIF.

  ENDIF.

* Find condition
  READ TABLE IT_A017 WITH KEY LIFNR = WA_OUTPUT-LIFNR
                              MATNR = WA_OUTPUT-MATNR
                              EKORG = GV_EKORG
                              WERKS = WA_OUTPUT-WERKS
                     BINARY SEARCH.
  IF SY-SUBRC EQ 0.
*   Transfer price
    WA_OUTPUT-NETPR = IT_A017-KBETR.
    WA_OUTPUT-NETWA = IT_A017-KONWA.
*    IF IT_A017-KONWA = WA_OUTPUT-WAERK.
*      WA_OUTPUT-NETPR = IT_A017-KBETR.
**   If not in CoCo currency, convert the value
*    ELSE.
*      CALL FUNCTION 'CONVERT_AMOUNT_TO_CURRENCY'
*        EXPORTING
*          DATE             = SY-DATUM
*          FOREIGN_CURRENCY = IT_A017-KONWA
*          FOREIGN_AMOUNT   = IT_A017-KBETR
*          LOCAL_CURRENCY   = WA_OUTPUT-WAERK
*        IMPORTING
*          LOCAL_AMOUNT     = WA_OUTPUT-NETPR
*        EXCEPTIONS
*          ERROR            = 0
*          OTHERS           = 0.
*    ENDIF.
*   Now express it as unit price
    IF IT_A017-KPEIN NE 0.
      WA_OUTPUT-NETPR = WA_OUTPUT-NETPR / IT_A017-KPEIN.
    ENDIF.
  ENDIF.

ENDFORM.                    " SET_PIR_DATA

*&---------------------------------------------------------------------*
*&      Form  SET_SALES_DATA
*&---------------------------------------------------------------------*
FORM SET_SALES_DATA  CHANGING P_SKIP TYPE C.
* Begin of insert MOD-007
  DATA: LV_PRCTR_MAT TYPE PRCTR,
        IT_PLC         TYPE K9RCD11000010    OCCURS 0 WITH HEADER LINE.
  DATA : GV_BUKRS TYPE BUKRS,
         GV_BWKEY TYPE BWKEY.

  CLEAR: GV_BUKRS, GV_BWKEY.
  SELECT SINGLE BWKEY INTO GV_BWKEY FROM T001W
    WHERE WERKS = P_WERKS.
  SELECT SINGLE BUKRS INTO GV_BUKRS FROM T001K
    WHERE BWKEY = GV_BWKEY.

* End of insert MOD-007

* Read sales data
  READ TABLE IT_MVKE WITH KEY MATNR = IT_MATERIAL-MATNR
                     BINARY SEARCH.
  IF SY-SUBRC EQ 0.
    WA_OUTPUT-GAC   = IT_MVKE-PRODH(4).    " GAC
    WA_OUTPUT-PGC   = IT_MVKE-PRODH+4(4).  " PGC
* Begin of insert MOD-007
* Get PLC Data
    SELECT SINGLE PRCTR INTO LV_PRCTR_MAT
                        FROM YSE_PRCTR_DERIV WHERE PGC = WA_OUTPUT-PGC
                                             AND VTWEG = '01'.
    IF SY-SUBRC = 0.

      CALL FUNCTION 'YSE_CONVERT_PRCTR_BL'
        EXPORTING
          PRCTR_IN    = LV_PRCTR_MAT
          BUKRS       = GV_BUKRS
        IMPORTING
          SEGMENT_OUT = LV_PRCTR_MAT.
*.. Derive segment from profit center
      CLEAR IT_PLC[].
      SELECT      *
*         FROM K9RCD11000009
             FROM K9RCD11000010                             "20080417
             INTO TABLE IT_PLC.

      LOOP AT IT_PLC WHERE SOUR1_FROM LE LV_PRCTR_MAT
                       AND SOUR1_TO   GE LV_PRCTR_MAT
                       AND VALID_FROM LE SY-DATUM.
        WA_OUTPUT-PLC = IT_PLC-TARGET1.
        EXIT.
      ENDLOOP.
    ENDIF.
* End of insert MOD-007

*   If anti piracy flag set
    IF NOT IT_MVKE-MVGR5 IS INITIAL.
*     Find description for anti piracy flag
* begin of MOD-013
*      CLEAR it_mvgr5.
*      READ TABLE it_mvgr5 WITH KEY mvgr5 = it_mvke-mvgr5 BINARY SEARCH.
*      wa_output-mvgr5_descr = it_mvgr5-bezei.
* end of MOD-013
      WA_OUTPUT-MVGR5       = IT_MVKE-MVGR5.
    ENDIF.

*   Set distribution mode
    IF IT_MVKE-MTPOS EQ 'ZDTC'.
      WA_OUTPUT-DISTRI_MODE = 'DTC'.
    ELSEIF IT_MVKE-MTPOS EQ 'NORM' AND IT_MVKE-MVGR4 EQ SPACE.
      WA_OUTPUT-DISTRI_MODE = 'NDTC'.
    ELSEIF IT_MVKE-MTPOS EQ 'NORM' AND IT_MVKE-MVGR4 EQ 'LCL'.
      WA_OUTPUT-DISTRI_MODE = 'LCL'.
    ENDIF.
  ELSE.
    P_SKIP = 'X'.
  ENDIF.

ENDFORM.                    " SET_SALES_DATA

*&---------------------------------------------------------------------*
*&      Form  FILL_RANGES
*&---------------------------------------------------------------------*
FORM FILL_RANGES .

  R_BWART_RECEIPT-SIGN = 'I'.
  R_BWART_RECEIPT-OPTION = 'EQ'.
  R_BWART_RECEIPT-LOW = '101'.
  APPEND R_BWART_RECEIPT.
  R_BWART_RECEIPT-LOW = '651'.
  APPEND R_BWART_RECEIPT.
  R_BWART_RECEIPT-LOW = '634'.
  APPEND R_BWART_RECEIPT.

  R_BWART_ISSUE-SIGN = 'I'.
  R_BWART_ISSUE-OPTION = 'EQ'.
  R_BWART_ISSUE-LOW = '261'.
  APPEND R_BWART_ISSUE.
  R_BWART_ISSUE-LOW = '601'.
  APPEND R_BWART_ISSUE.
  R_BWART_ISSUE-LOW = '633'.
  APPEND R_BWART_ISSUE.

  R_BWART_ALL[] = R_BWART_RECEIPT[].
  APPEND LINES OF R_BWART_ISSUE TO R_BWART_ALL.

ENDFORM.                    " FILL_RANGES

*&---------------------------------------------------------------------*
*&      Form  SET_ISS_REC_DATES
*&---------------------------------------------------------------------*
FORM SET_ISS_REC_DATES .

** Set the last receipt date from MSEG
*  CLEAR IT_MSEG.
*  LOOP AT IT_MSEG WHERE MATNR EQ IT_MATERIAL-MATNR
*                    AND BWART IN R_BWART_RECEIPT.
*    EXIT.
*  ENDLOOP.
*  IF SY-SUBRC EQ 0 AND IT_MSEG-BUDAT GT WA_OUTPUT-LAST_REC_DATE.
*    WA_OUTPUT-LAST_REC_DATE = IT_MSEG-BUDAT.
*  ENDIF.
*
** Set the last receipt date from YSE_SURPLUS_HD01
*  CLEAR IT_SURPLUS.
*  LOOP AT IT_SURPLUS WHERE MATNR EQ IT_MATERIAL-MATNR
*                       AND ZMOVT EQ 'R'.
*    EXIT.
*  ENDLOOP.
*  IF SY-SUBRC EQ 0 AND IT_SURPLUS-BUDAT GT WA_OUTPUT-LAST_REC_DATE.
*    WA_OUTPUT-LAST_REC_DATE = IT_SURPLUS-BUDAT.
*  ENDIF.
*
** Set the last issue date from MSEG
*  CLEAR IT_MSEG.
*  LOOP AT IT_MSEG WHERE MATNR EQ IT_MATERIAL-MATNR
*                    AND BWART IN R_BWART_ISSUE.
*    EXIT.
*  ENDLOOP.
*  IF SY-SUBRC EQ 0 AND IT_MSEG-BUDAT GT WA_OUTPUT-LAST_ISS_DATE.
*    WA_OUTPUT-LAST_ISS_DATE = IT_MSEG-BUDAT.
*  ENDIF.
*
** Set the last issue date from YSE_SURPLUS_HD01
*  CLEAR IT_SURPLUS.
*  LOOP AT IT_SURPLUS WHERE MATNR EQ IT_MATERIAL-MATNR
*                       AND ZMOVT EQ 'I'.
*    EXIT.
*  ENDLOOP.
*  IF SY-SUBRC EQ 0 AND IT_SURPLUS-BUDAT GT WA_OUTPUT-LAST_ISS_DATE.
*    WA_OUTPUT-LAST_ISS_DATE = IT_SURPLUS-BUDAT.
*  ENDIF.

  READ TABLE IT_REC WITH KEY MATNR = IT_MATERIAL-MATNR BINARY SEARCH.
  IF SY-SUBRC EQ 0 AND IT_REC-BUDAT GT WA_OUTPUT-LAST_REC_DATE.
    WA_OUTPUT-LAST_REC_DATE = IT_REC-BUDAT.
  ENDIF.

  READ TABLE IT_ISS WITH KEY MATNR = IT_MATERIAL-MATNR BINARY SEARCH.
  IF SY-SUBRC EQ 0 AND IT_ISS-BUDAT GT WA_OUTPUT-LAST_ISS_DATE.
    WA_OUTPUT-LAST_ISS_DATE = IT_ISS-BUDAT.
  ENDIF.


ENDFORM.                    " SET_ISS_REC_DATES

*&---------------------------------------------------------------------*
*&      Form  SET_STOCK_BACK_ORDERED
*&---------------------------------------------------------------------*
FORM SET_STOCK_BACK_ORDERED .

  CLEAR IT_STBO_SO.
* Stock Back Ordered
  READ TABLE IT_STBO_SO WITH KEY MATNR = IT_MATERIAL-MATNR
                              WERKS = IT_MATERIAL-WERKS
                              LGORT = IT_MATERIAL-LGORT
                     BINARY SEARCH.
  IF SY-SUBRC EQ 0.
* begin of MOD-013
*    wa_output-back = it_stbo_so-alloc_quantity.
* end of MOD-013
  ENDIF.

ENDFORM.                    " SET_STOCK_BACK_ORDERED

*&---------------------------------------------------------------------*
*&      Form  SET_GOODS_IN_TRANSIT
*&---------------------------------------------------------------------*
FORM SET_GOODS_IN_TRANSIT.

  CLEAR IT_TRANSIT_AGGR.
* Goods in Transit
  READ TABLE IT_TRANSIT_AGGR WITH KEY MATNR = IT_MATERIAL-MATNR
                              WERKS = IT_MATERIAL-WERKS
                              LGORT = IT_MATERIAL-LGORT
                     BINARY SEARCH.
  IF SY-SUBRC EQ 0.
* begin of MOD-013
*    wa_output-goods_transit = it_transit_aggr-lfimg.
* end of MOD-013
  ENDIF.

ENDFORM.                    " GET_GOODS_TRANSIT

*&---------------------------------------------------------------------*
*&      Form  SET_PLANNED_RECEIPTS
*&---------------------------------------------------------------------*
FORM SET_PLANNED_RECEIPTS .

*   Planned reciepts (open po qty)
  CLEAR IT_OPEN_PO.
  READ TABLE IT_OPEN_PO WITH KEY MATNR = IT_MATERIAL-MATNR
                                       WERKS = IT_MATERIAL-WERKS
                                       LGORT = IT_MATERIAL-LGORT.
  IF SY-SUBRC EQ 0.
* begin of MOD-013
*    wa_output-planned_receipt = it_open_po-qty.
* end of MOD-013
  ENDIF.

ENDFORM.                    " SET_PLANNED_RECEIPTS

*&---------------------------------------------------------------------*
*&      Form  GET_STOCK_FORECAST
*&---------------------------------------------------------------------*
FORM GET_STOCK_FORECAST .

* Weighted average forecast is now saved as part of the forecast results in Exc Mgt Run
  IF NOT IT_MATERIAL[] IS INITIAL.
    SELECT      MATNR CONFC
           INTO TABLE IT_FCHDR
           FROM YSE_EM_FCHDR
            FOR ALL ENTRIES IN IT_MATERIAL
          WHERE MATNR EQ IT_MATERIAL-MATNR
            AND WERKS EQ P_WERKS.
  ENDIF.

ENDFORM.                    " GET_STOCK_FORECAST

*&---------------------------------------------------------------------*
*&      Form  SET_STOCK_HISTORY
*&---------------------------------------------------------------------*
FORM SET_STOCK_HISTORY .

*   Stock History
  CLEAR IT_SOHIST.
  READ TABLE IT_SOHIST WITH KEY MATNR = IT_MATERIAL-MATNR
                       BINARY SEARCH.
  IF SY-SUBRC EQ 0.
    WA_OUTPUT-HIST_QTY = IT_SOHIST-ZMENG.
    WA_OUTPUT-HIST_LINES = IT_SOHIST-ZLINE.
  ENDIF.

ENDFORM.                    " SET_STOCK_HISTORY

*&---------------------------------------------------------------------*
*&      Form  SET_HISTORY_FORECAST
*&---------------------------------------------------------------------*
FORM SET_HISTORY_FORECAST .

*   Stock Forecast
  CLEAR IT_FCHDR.
  READ TABLE IT_FCHDR WITH KEY MATNR = IT_MATERIAL-MATNR
                      BINARY SEARCH.
  IF SY-SUBRC EQ 0.
* begin of MOD-013
*    wa_output-confc = it_fchdr-confc.
* end of MOD-013
  ENDIF.

ENDFORM.                    " SET_HISTORY_FORECAST

*&---------------------------------------------------------------------*
*&      Form  GET_OPEN_TRANSPORT_ORDERS
*&---------------------------------------------------------------------*
FORM GET_OPEN_TRANSPORT_ORDERS .

* Only consider open transport orders if storage location = 1000
*  CHECK p_lgort = '1000'.

  IF '1000' IN S_LGORT OR '6100' IN S_LGORT OR '6200' IN S_LGORT.

* Select from ekpo/ekko
    IF NOT IT_MATERIAL[] IS INITIAL.
      SELECT      B~EBELN B~EBELP B~MATNR B~LGORT B~MENGE
             INTO TABLE IT_EKPO2
             FROM EKKO AS A
            INNER JOIN EKPO AS B
               ON A~EBELN = B~EBELN
              FOR ALL ENTRIES IN IT_MATERIAL
            WHERE B~MATNR EQ IT_MATERIAL-MATNR
              AND (    A~BSART EQ 'ZUB1'
                    OR A~BSART EQ 'ZNB4' )
              AND A~RESWK EQ P_WERKS
              AND B~LOEKZ EQ SPACE.
* Begin of insert MOD-010
*              AND a~ekorg = gv_ekorg.
* End of insert MOD-010

* Don't continue open transport orders if no rows returned
      CHECK SY-SUBRC EQ 0.

* Select receipted quantities for the open transport order items
      SELECT      EBELN EBELP MATNR MENGE BELNR BWART
             INTO TABLE IT_EKBE2
             FROM EKBE
             FOR ALL ENTRIES IN IT_EKPO2
            WHERE EBELN EQ IT_EKPO2-EBELN
              AND EBELP EQ IT_EKPO2-EBELP
              AND VGABE = '6'.

* Add transport orders to allocation table
      LOOP AT IT_EKPO2.
        IT_ALLOC-MATNR = IT_EKPO2-MATNR.
        IT_ALLOC-ALLOC_QUANTITY = IT_EKPO2-MENGE.
        COLLECT IT_ALLOC.
      ENDLOOP.

* Subtract receipted qty's from allocation table
      LOOP AT IT_EKBE2.
        IT_ALLOC-MATNR = IT_EKBE2-MATNR.
        IF IT_EKBE2-BWART EQ '641'.
          IT_ALLOC-ALLOC_QUANTITY = IT_EKBE2-MENGE * ( -1 ).
        ELSEIF IT_EKBE2-BWART EQ '642'.
          IT_ALLOC-ALLOC_QUANTITY = IT_EKBE2-MENGE.
        ENDIF.
        COLLECT IT_ALLOC.
      ENDLOOP.
    ENDIF.
  ENDIF.

ENDFORM.                    " GET_OPEN_TRANSPORT_ORDERS

*&---------------------------------------------------------------------*
*&      Form  GET_SALESORG
*&---------------------------------------------------------------------*
*FORM get_salesorg .
*
*  CLEAR gv_vkorg.
*  SELECT SINGLE vkorg
*           INTO gv_vkorg
*           FROM tvkwz
*          WHERE vtweg EQ '01'
*            AND werks EQ p_werks.
*  IF sy-subrc NE 0.
*    MESSAGE ID 'YSE_SALES_LOG' TYPE 'E' NUMBER '301' WITH p_werks.
*  ENDIF.
*
*ENDFORM.                    " GET_SALESORG
*&---------------------------------------------------------------------*
*&      Form  GET_ALLOCATED_STOCK1
*&---------------------------------------------------------------------*
FORM GET_ALLOCATED_STOCK1 .
  DATA : BEGIN OF IT_VBBE OCCURS 0,
         VBELN LIKE VBBE-VBELN,
         POSNR LIKE VBBE-POSNR,
         MATNR LIKE VBBE-MATNR,
         WERKS LIKE VBBE-WERKS,
         VBTYP LIKE VBBE-VBTYP,    "EXTUVE 2009/11/11
         VMENG LIKE VBBE-VMENG,
         END OF IT_VBBE.
  DATA : WA_VBBE LIKE IT_VBBE.
*>>>> bEGIN OF EXTUVE 21/08/2009
  DATA : BEGIN OF IT_LIKP OCCURS 0,
         VBELN LIKE LIKP-VBELN,
         LFART LIKE LIKP-LFART,
         END OF IT_LIKP.
  DATA : WA_LIKP LIKE IT_LIKP.
*>>>> END OF EXTUVE 21/08/2009
*>>>> bEGIN OF EXTUVE 11/11/2009
  DATA : BEGIN OF IT_LIPS OCCURS 0,
          VBELN LIKE LIPS-VBELN,
          POSNR LIKE LIPS-POSNR,
          PSTYV LIKE LIPS-PSTYV,
         END OF IT_LIPS.
  DATA : WA_LIPS LIKE IT_LIPS.
*>>>> END OF EXTUVE 11/11/2009


  SELECT VBELN POSNR MATNR WERKS VBTYP VMENG FROM VBBE
               INTO TABLE IT_VBBE
                 WHERE MATNR IN S_MATNR
                   AND WERKS EQ P_WERKS.
* Begin of change MOD-010
*  SELECT A~vbeln A~posnr A~matnr A~werks A~vbtyp A~vmeng INTO TABLE it_vbbe
*               FROM vbbe AS A
*                INNER JOIN vbak AS B
*                 ON A~VBELN = B~VBELN
*                 WHERE A~matnr IN s_matnr
*                   AND A~werks EQ p_werks
*                   AND B~VKORG EQ p_SALORG.
* End of change MOD-010
  IF SY-SUBRC = 0.
    SORT IT_VBBE BY MATNR WERKS.
  ENDIF.

*>>>> bEGIN OF EXTUVE 21/08/2009
  CHECK NOT IT_VBBE[] IS INITIAL.
  SELECT VBELN LFART  FROM LIKP
               INTO TABLE IT_LIKP
                FOR ALL ENTRIES IN IT_VBBE
                 WHERE VBELN = IT_VBBE-VBELN.
  IF SY-SUBRC = 0.
    SORT IT_LIKP BY VBELN.
    DELETE ADJACENT DUPLICATES FROM IT_LIKP COMPARING ALL FIELDS.
  ENDIF.
*>>>> END OF EXTUVE 21/08/2009
  REFRESH IT_ALLOC.
  CLEAR IT_ALLOC.
  LOOP AT IT_VBBE INTO WA_VBBE.
    READ TABLE IT_MATERIAL WITH KEY MATNR = WA_VBBE-MATNR
                                      WERKS = WA_VBBE-WERKS
                             BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      IT_ALLOC-WERKS          = WA_VBBE-WERKS.
      IT_ALLOC-MATNR          = WA_VBBE-MATNR.
      IT_ALLOC-ALLOC_QUANTITY = WA_VBBE-VMENG.
      COLLECT IT_ALLOC.
    ENDIF.
  ENDLOOP.
*
*>>>> BEGIN OF EXTUVE 21/08/2009
  LOOP AT IT_VBBE INTO WA_VBBE.
    CLEAR WA_LIKP.
    READ TABLE IT_LIKP INTO WA_LIKP WITH KEY VBELN = WA_VBBE-VBELN
                            BINARY SEARCH.
    IF SY-SUBRC = 0 AND WA_LIKP-LFART = 'ZL03'.
      IT_ALLOC-WERKS          = WA_VBBE-WERKS.
      IT_ALLOC-MATNR          = WA_VBBE-MATNR.
      IT_ALLOC-ALLOC_QUANTITY = WA_VBBE-VMENG * -1.
      COLLECT IT_ALLOC.
    ENDIF.
  ENDLOOP.
*>>>> END OF EXTUVE 21/08/2009

*>>>> BEGIN OF EXTUVE 11/11/2009
  CHECK NOT IT_VBBE[] IS INITIAL.
  SELECT VBELN
          POSNR
          PSTYV
          FROM LIPS
               INTO TABLE IT_LIPS
                FOR ALL ENTRIES IN IT_VBBE
                 WHERE VBELN = IT_VBBE-VBELN
                   AND POSNR = IT_VBBE-POSNR.
  IF SY-SUBRC = 0.
    SORT IT_LIPS BY VBELN POSNR.
  ENDIF.

  LOOP AT IT_VBBE INTO WA_VBBE.
    CLEAR WA_LIPS.
    READ TABLE IT_LIPS INTO WA_LIPS WITH KEY VBELN = WA_VBBE-VBELN
                                             POSNR = WA_VBBE-POSNR
                                             BINARY SEARCH.
    IF SY-SUBRC = 0 AND WA_VBBE-VBTYP = 'J' AND WA_LIPS-PSTYV = 'ZDTC'.
      IT_ALLOC-WERKS          = WA_VBBE-WERKS.
      IT_ALLOC-MATNR          = WA_VBBE-MATNR.
      IT_ALLOC-ALLOC_QUANTITY = WA_VBBE-VMENG * -1.
      COLLECT IT_ALLOC.
    ENDIF.
  ENDLOOP.
*>>>> END OF EXTUVE 11/11/2009
ENDFORM.                    " GET_ALLOCATED_STOCK1
