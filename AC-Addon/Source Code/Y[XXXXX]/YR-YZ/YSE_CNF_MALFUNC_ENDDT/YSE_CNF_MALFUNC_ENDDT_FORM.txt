*&---------------------------------------------------------------------*
*&  Include           YSE_CNF_MALFUNC_ENDDT_FORM
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_FINAL_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM display_final_data .

  wa_layout-zebra              = 'X'.
  wa_layout-colwidth_optimize  = 'X'.
  gd_repid = sy-repid.
  IF sy-batch = 'X'.
    CALL FUNCTION 'REUSE_ALV_LIST_DISPLAY'
      EXPORTING
        i_callback_program = gd_repid
        it_fieldcat        = it_fieldcat
      TABLES
        t_outtab           = gt_final
      EXCEPTIONS
        program_error      = 1
        OTHERS             = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ELSE.
    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
      EXPORTING
        i_callback_program     = gd_repid
        i_callback_top_of_page = 'TOP_OF_PAGE'
        is_layout              = wa_layout
        it_fieldcat            = it_fieldcat
        i_save                 = 'X'
      TABLES
        t_outtab               = gt_final
      EXCEPTIONS
        program_error          = 1
        OTHERS                 = 2.
    IF sy-subrc <> 0.
      IF sy-batch NE 'X'.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.                    " DISPLAY_FINAL_DATA
*&---------------------------------------------------------------------*
*&      Form  GET_JCDS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_jcds .
  LOOP AT gt_aufk INTO wa_aufk.
    CONCATENATE 'OR' wa_aufk-aufnr INTO wa_temp-objnr.
    APPEND wa_temp TO gt_temp.
  ENDLOOP.
  SELECT
    objnr                    " Object number
    stat                     " Object status
    chgnr                    " Change number
    udate                    " Creation date of the change document
    utime                    " Time changed
    inact                    " Indicator: Status Is Inactive
   FROM jcds
   INTO TABLE gt_jcds
   FOR ALL ENTRIES IN gt_temp
   WHERE objnr = gt_temp-objnr
   AND   stat  = c_i0009
   AND   inact = space.
  SORT gt_jcds BY objnr chgnr DESCENDING.
  DELETE ADJACENT DUPLICATES FROM gt_jcds COMPARING objnr.
  REFRESH gt_aufk.
  CLEAR wa_aufk.
  LOOP AT gt_jcds INTO wa_jcds.
    wa_aufk-aufnr = wa_jcds-objnr+2(12).
    APPEND wa_aufk TO gt_aufk.
  ENDLOOP.
ENDFORM.                    " GET_JCDS
*&---------------------------------------------------------------------*
*&      Form  GET_QMEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_viqmel.
  IF gt_aufk[] IS NOT INITIAL.
    SELECT
      qmnum       " Notification No
      ausvn	      " Start of Malfunction (Date)
      ausbs	      " End of Malfunction (Date)
      auztv       "	Start of Malfunction (Time)
      auztb	      " End of Malfunction (Time)
      qmart       " Notification type
      aedat	      "	Changed On
      mzeit	      " Time of Notification
      aufnr	      " Order Number
      bukrs	      " Company Code
     FROM viqmel
     INTO TABLE gt_viqmel
     FOR ALL ENTRIES IN gt_aufk
     WHERE aufnr  = gt_aufk-aufnr
     AND   bukrs  IN s_bukrs.
    IF gt_viqmel[] IS INITIAL.
      IF sy-batch = 'X'.
        WRITE: text-001.
      ELSE.
        MESSAGE text-001 TYPE 'E' DISPLAY LIKE 'I'.
        LEAVE LIST-PROCESSING.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.                    " GET_QMEL
*&---------------------------------------------------------------------*
*&      Form  PREPARE_FCAT_TABLE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0021   text
*      -->P_0022   text
*      -->P_0023   text
*----------------------------------------------------------------------*
FORM prepare_fcat_table USING    p_col    TYPE char2
                                 p_fname  TYPE char15
                                 p_text   TYPE char30.
  wa_fcat1-col_pos   = p_col.
  wa_fcat1-fieldname = p_fname.
  wa_fcat1-seltext_l = p_text.
  wa_fcat1-no_zero = 'X'.
  APPEND wa_fcat1 TO it_fieldcat.
  CLEAR wa_fcat1.

ENDFORM.                    " PREPARE_FCAT_TABLE
*&---------------------------------------------------------------------*
*&      Form  VALIDATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM validation .
  IF s_bukrs-low NE 'POLA'.
    IF sy-batch = 'X'.
      WRITE: text-005.
    ELSE.
      MESSAGE text-005 TYPE 'E' DISPLAY LIKE 'S'.
    ENDIF.
  ENDIF.
  SELECT
    aufnr	                  " Order Number
    auart	                  " Order Type
    erdat	                  " Service order Created on
    bukrs	                  " Company Code
    werks	                  " Plant
    phas2	                  " Phase "order completed" (TECO)
    phas3                   " Phase "order clsed" (CLSD)
    idat2                   " SO Technical completion date
    FROM  aufk
    INTO  TABLE gt_aufk
    WHERE bukrs IN s_bukrs
    AND   aufnr IN s_aufnr
    AND   ( phas2 = c_x OR phas3 = c_x )
    AND   idat2 IN s_idat2.
  IF sy-subrc <> 0.
    IF sy-batch = 'X'.
      WRITE: text-001.
    ELSE.
      MESSAGE text-001 TYPE 'E' DISPLAY LIKE 'S'.
    ENDIF.
  ENDIF.

ENDFORM.                    " VALIDATION
*&---------------------------------------------------------------------*
*&      Form  top_of_page_setup
*&---------------------------------------------------------------------*
*  Set-up what to display at the top of the ALV pages
*  Note that the link to this form is in the
*  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY' parameter
*  i_callback_top_of_page   = 'TOP_OF_PAGE' in form display_alv
*----------------------------------------------------------------------*
FORM top_of_page.

  DATA: t_header TYPE slis_t_listheader,
        wa_header TYPE slis_listheader.

  wa_header-typ  = 'H'.
  wa_header-info = text-002.
  APPEND wa_header TO t_header.

  wa_header-typ  = 'S'.
  CONCATENATE text-004 sy-uname INTO wa_header-info SEPARATED BY ':'.
  APPEND wa_header TO t_header.

  wa_header-typ  = 'S'.
  CONCATENATE text-003 sy-datum INTO wa_header-info SEPARATED BY ':'.
  APPEND wa_header TO t_header.

  CLEAR wa_header.
  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      it_list_commentary = t_header.
ENDFORM.                    " top_of_page_setup
*&---------------------------------------------------------------------*
*&      Form  CALL_IW52
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM call_iw52 .

  PERFORM inprocess_notification.
  PERFORM complete_notifcation.

ENDFORM.                    " CALL_IW52
*&---------------------------------------------------------------------*
*&      Form  BDC_DYNPRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0346   text
*      -->P_0347   text
*----------------------------------------------------------------------*
FORM bdc_dynpro  USING    program dynpro.
  CLEAR struct_bdcdata.
  struct_bdcdata-program  = program.
  struct_bdcdata-dynpro   = dynpro.
  struct_bdcdata-dynbegin = 'X'.
  APPEND struct_bdcdata TO i_bdcdata.
ENDFORM.                    " BDC_DYNPRO
*&---------------------------------------------------------------------*
*&      Form  BDC_FIELD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0351   text
*      -->P_0352   text
*----------------------------------------------------------------------*
FORM bdc_field  USING    fnam fval.
  CLEAR struct_bdcdata.
  struct_bdcdata-fnam = fnam.
  struct_bdcdata-fval = fval.
  APPEND struct_bdcdata TO i_bdcdata.
ENDFORM.                    " BDC_FIELD
*&---------------------------------------------------------------------*
*&      Form  PROCESS_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM process_data .
  LOOP AT gt_viqmel INTO wa_viqmel.
    flag = sy-tabix.
    wa_final-qmnum      = wa_viqmel-qmnum.             " Notification No
    wa_final-aufnr      = wa_viqmel-aufnr.             " Order Number
    wa_final-bukrs      = wa_viqmel-bukrs.             " Company Code
    wa_final-ausvn      = wa_viqmel-ausvn.             " Start of Malfunction (Date)
    wa_final-auztv      = wa_viqmel-auztv.             " Start of Malfunction (Time)
    wa_final-qmart      = wa_viqmel-qmart.             " Notification type
    wa_final-aedat      = wa_viqmel-aedat.             "  Changed On
    wa_final-mzeit      = wa_viqmel-mzeit.             " Time of Notification
    CLEAR: wa_temp, wa_jcds.
    CONCATENATE 'OR' wa_viqmel-aufnr INTO wa_temp-objnr.
    READ TABLE gt_jcds INTO wa_jcds WITH KEY objnr = wa_temp-objnr.
    IF sy-subrc = 0.
      IF wa_viqmel-ausbs   =     wa_jcds-udate AND wa_viqmel-auztb   =     wa_jcds-utime.
        CONTINUE.
      ELSE.
        wa_viqmel-ausbs   =     wa_jcds-udate.           " End of Malfunction (Date)
        wa_viqmel-auztb   =     wa_jcds-utime.           " End of Malfunction (Time)
        MODIFY gt_viqmel FROM wa_viqmel INDEX flag TRANSPORTING ausbs auztb.
      ENDIF.
    ENDIF.
    wa_final-ausbs      = wa_viqmel-ausbs.
    wa_final-auztb      = wa_viqmel-auztb.
    IF p_test IS INITIAL.
      wa_final-gv_msgtxt  = text-012.
      PERFORM call_iw52.
    ENDIF.
    APPEND wa_final TO gt_final.
  ENDLOOP.
ENDFORM.                    " PROCESS_DATA
*&---------------------------------------------------------------------*
*&      Form  COMPLETE_NOTIFCATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM complete_notifcation .
  DATA: lv_date(10)   TYPE c,
        lv_time(8)   TYPE c.
  CLEAR: lv_time, lv_date.
  CONCATENATE wa_viqmel-ausbs+6(2) '.' wa_viqmel-ausbs+4(2) '.' wa_viqmel-ausbs+0(4) INTO lv_date.
  CONCATENATE wa_viqmel-auztb+0(2) ':' wa_viqmel-auztb+2(2) ':' wa_viqmel-auztb+4(2) INTO lv_time.
  REFRESH: i_bdcdata, gt_err.
  PERFORM bdc_dynpro      USING 'SAPLIQS0' '0100'.
  PERFORM bdc_field       USING 'BDC_CURSOR'
                                'RIWO00-QMNUM'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '/00'.
  PERFORM bdc_field       USING 'RIWO00-QMNUM'
                                wa_viqmel-qmnum.
  PERFORM bdc_dynpro      USING 'SAPLIQS0' '7200'.
  if ( wa_viqmel-ausvn GT wa_viqmel-ausbs ) OR ( ( wa_viqmel-ausvn EQ wa_viqmel-ausbs ) AND ( wa_viqmel-auztv GT wa_viqmel-auztb ) ).
  PERFORM bdc_field       USING 'VIQMEL-AUSVN'
                                lv_date.
  PERFORM bdc_field       USING 'VIQMEL-AUZTV'
                                lv_time.
  endif.
  PERFORM bdc_field       USING 'VIQMEL-AUSBS'
                                lv_date.
  PERFORM bdc_field       USING 'VIQMEL-AUZTB'
                                lv_time.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '=ARCH'.
  IF wa_viqmel-qmart = c_x4 AND ( wa_viqmel-ausbs LE wa_viqmel-aedat ) OR ( ( wa_viqmel-ausbs EQ wa_viqmel-aedat ) AND ( wa_viqmel-auztb LT wa_viqmel-mzeit ) ).
    PERFORM bdc_dynpro      USING 'SAPLCOI0' '1000'.
    PERFORM bdc_field       USING 'BDC_CURSOR'
                                  'RIARCH-ADDAT'.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '=WEIT'.
  ELSE.
    PERFORM bdc_dynpro      USING 'SAPLIWO1' '0200'.
    PERFORM bdc_field       USING 'BDC_CURSOR'
                                  'RIWO1-BEZDT'.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '=WTER'.
  ENDIF.
  PERFORM bdc_dynpro      USING 'SAPMSSY0' '0120'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '=&ONT'.
  CALL TRANSACTION 'IW52' USING i_bdcdata
                          MODE gv_mode
                          UPDATE 'S'
                          MESSAGES INTO gt_err.

  LOOP AT gt_err INTO wa_err WHERE msgtyp = 'E'
                             OR msgtyp = 'A'.
    CALL FUNCTION 'FORMAT_MESSAGE'
     EXPORTING
       id              = wa_err-msgid "SY-MSGID
*       LANG            = '-D'
       no              = wa_err-msgnr "SY-MSGNO
       v1              = wa_err-msgv1 "SY-MSGV1
       v2              = wa_err-msgv2 "SY-MSGV2
       v3              = wa_err-msgv3 "SY-MSGV3
       v4              = wa_err-msgv4 "SY-MSGV4
     IMPORTING
       msg             =  gv_msgtxt
     EXCEPTIONS
       not_found       = 1
       OTHERS          = 2.
    IF sy-subrc = 0.
      wa_final-gv_msgtxt = gv_msgtxt.
    ENDIF.
  ENDLOOP.
ENDFORM.                    " COMPLETE_NOTIFCATION
*&---------------------------------------------------------------------*
*&      Form  INPROCESS_NOTIFICATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM inprocess_notification .
  REFRESH: i_bdcdata, gt_err.
  PERFORM bdc_dynpro      USING 'SAPLIQS0' '0100'.
  PERFORM bdc_field       USING 'BDC_CURSOR'
                                'RIWO00-QMNUM'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '/00'.
  PERFORM bdc_field       USING 'RIWO00-QMNUM'
                                wa_viqmel-qmnum.
  PERFORM bdc_dynpro      USING 'SAPLIQS0' '7200'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '=WIAR'.
  PERFORM bdc_field       USING 'BDC_CURSOR'
                                'VIQMEL-QMNUM'.
  CALL TRANSACTION 'IW52' USING i_bdcdata
                          MODE gv_mode
                          UPDATE 'S'
                          MESSAGES INTO gt_err.

ENDFORM.                    " INPROCESS_NOTIFICATION
