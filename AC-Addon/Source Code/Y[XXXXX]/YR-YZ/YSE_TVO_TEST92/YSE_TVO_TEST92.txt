REPORT barcocx1 MESSAGE-ID cg.

INCLUDE sgrccnst.                      "Allgemeine Konstanten der Grafik
INCLUDE lbarccon.                      "Konstanten zum Balkenplan
INCLUDE barcdata.                      "Allgemeine Datendeklarationen

* Objekttabellen zum Halten der Grafikdaten im ABAP (Verprobungen)
DATA: all_boxes     LIKE bcboxes    OCCURS 0 WITH HEADER LINE, "Boxen
      all_box_vals  LIKE bcvals     OCCURS 0 WITH HEADER LINE, "Attrib.
      all_links     LIKE bclinks    OCCURS 0 WITH HEADER LINE, "Kanten
      all_link_vals LIKE bcnvals    OCCURS 0 WITH HEADER LINE, "Kanten
      all_nodes     LIKE bcnodes    OCCURS 0 WITH HEADER LINE, "Knoten
      all_node_vals LIKE bcnvals    OCCURS 0 WITH HEADER LINE, "Attrib.
      all_positions LIKE bcposition OCCURS 0 WITH HEADER LINE. "Posit.

* Temporary Tables
DATA: tmp_boxes LIKE bcboxes OCCURS 0 WITH HEADER LINE,     "Boxen
      tmp_nodes LIKE bcnodes OCCURS 0 WITH HEADER LINE.     "Knoten

* Verwendete Layertypen
DATA: BEGIN OF layer_types OCCURS 0,
        type LIKE tbcl-type,
      END OF layer_types.

* Bl#ttern in Selektionsdynpro
DATA: BEGIN OF scroll_tab OCCURS 0,
        flag(1) TYPE c,
      END OF scroll_tab.

* Attribute im Modifikationdynpro
DATA: vals LIKE bcvals OCCURS 0 WITH HEADER LINE.

* Excluding-Tabelle f¨¹r CUA-Status
DATA: BEGIN OF excluding_tab OCCURS 0.
        INCLUDE STRUCTURE sgrcexclud.
DATA: END OF excluding_tab.

* Einstellungen im Optionenprofil
DATA: settings LIKE barc_set.

* Datumslinie f¨¹r Einf¨¹gedynpro
DATA: BEGIN OF dateline,
        chart_id   LIKE bcdatlin-chart_id,
        color_type LIKE bcdatlin-color_type,
        date LIKE  bcdatlin-date,
      END OF dateline.

* Diverse Variablen
DATA: act_box_id       LIKE bcboxes-id,
      act_node_id      LIKE bcnodes-id,
      act_link_id      LIKE bclinks-id,
      anz              TYPE i,
      anz_b            TYPE i,         "Boxen
      anz_n            TYPE i,         "Knoten
      calendar1        LIKE bccalendar-id,
      chart1           LIKE bcchart-id,
      chart2           LIKE bcchart-id,
      con_d            LIKE object_type  VALUE 'D', "Datumslinie
      con_g            LIKE object_type  VALUE 'V', "Grid
      con_r            LIKE object_type  VALUE 'R', "Ribbon
      con_s            LIKE object_type  VALUE 'S', "Section
      count            TYPE i,
      entry_act        LIKE sy-tabix,
      entry_to         LIKE sy-tabix,
      entry_new        LIKE sy-tabix,
      errno(2)         TYPE c,
      firstdate        LIKE tbcl-firstdate,
      fl               LIKE bcvals-fl,
      graph_cmd_info   LIKE bccmdinfo,
      gr_sel_field     LIKE net_graph-sel_field,
      layer_type       LIKE tbcl-type,
      layer_kind       LIKE tbcl-layer_type,
      line_count       LIKE sy-tabix,
      line_count_b     LIKE sy-tabix                VALUE 4,  "Boxen
      line_count_n     LIKE sy-tabix                VALUE 8,  "Knoten
      line_count_sel   LIKE sy-tabix                VALUE 10, "Selekt.
      line_count_val   LIKE sy-tabix                VALUE 4,  "Attrib.
      max_pos          LIKE bcposition-row_number,
      ok_code          TYPE syucomm,
      save_ok_code     LIKE ok_code,
      seconddate       LIKE tbcl-seconddate,
      section1         LIKE bcsection-id,
      section2         LIKE bcsection-id,
      section3         LIKE bcsection-id,
      symboltype       LIKE tbcl-symboltype,
      tabix            TYPE i.

*----------------------------f¨¹r Umstellung auf OCX -------------------*
INCLUDE <ctldef>.

DATA: barc_ocx TYPE cntl_handle,
      this_repid LIKE sy-repid,
      this_dynnr LIKE sy-dynnr.

SELECTION-SCREEN ULINE.
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
PARAMETER: gruppe    LIKE tbcgt-prf_gruppe  DEFAULT 'DEMO',
           name      LIKE tbcgt-prf_name    DEFAULT '000000000001',
           index     LIKE tbcgt-prf_index   DEFAULT '3'.
SELECTION-SCREEN END OF BLOCK b1.

* *********************************************
* Start of Program
* *********************************************
PERFORM CHECK_WIN32.

this_dynnr = '300'.
this_repid = sy-repid.

* Balkenplan-Control erzeugen
CALL FUNCTION 'BARCHART_CREATE'
  EXPORTING
    owner_repid = this_repid
    dynnr       = this_dynnr
  CHANGING
    handle      = barc_ocx.

* Daten zusammenstellen
PERFORM collect_data.

CALL SCREEN 300.

*---------------------------------------------------------------------*
*       FORM COLLECT_DATA                                             *
*---------------------------------------------------------------------*
*       Daten zusammenstellen                                         *
*---------------------------------------------------------------------*
FORM collect_data.

* Activate customizing modus (Wizards)
  CALL FUNCTION 'BARC_SET_OPTIONS'
    EXPORTING
      customize = sgrc_const-yes  " This allows the user to change the chart layout upon doubleclicking on it
      EDITINLINE = sgrc_const-no. " not sure what this does

* Grafikprofil - this has major impact on the look and feel, even behaviour of the chart !!!
  graph_profile-prf_gruppe = gruppe.
  graph_profile-prf_name   = name.
  graph_profile-prf_index  = index.

* Define time axis
  PERFORM set_time_axis USING section1 section2 section3.

* Define calendar (weekend, holidays etc.)
  PERFORM set_calendar USING calendar1.

* Define charts
  PERFORM set_charts TABLES boxes
                            box_vals
                            positions
                     USING  act_box_id
                            chart1 chart2
                            section1 section2 section3
                            calendar1.

* Define rows on the charts (left-hand side)
  PERFORM set_boxes TABLES boxes
                           box_vals
                           positions
                    USING  act_box_id
                           chart1 chart2.

* Define boxes on the charts (right-hand side)
  PERFORM set_nodes TABLES nodes
                           node_vals
                           positions
                    USING  act_node_id
                           chart1 chart2
                           calendar1.

* Sicheren des Anfangszustandes
  CALL FUNCTION 'BARC_LOGIC'
    TABLES
      all_boxes     = all_boxes
      all_box_vals  = all_box_vals
      all_links     = all_links
      all_link_vals = all_link_vals
      all_nodes     = all_nodes
      all_node_vals = all_node_vals
      all_positions = all_positions
      boxes         = boxes
      box_vals      = box_vals
      deletions     = deletions
      links         = links
      link_vals     = link_vals
      nodes         = nodes
      node_vals     = node_vals
      positions     = positions.

  status_text = text-002.
  stat = sgrc_const-stat_1. "Open Window, Transfer Data, Wait for Input

ENDFORM.                               "COLLECT_DATA


*---------------------------------------------------------------------*
*       FORM USER_COMMAND                                             *
*---------------------------------------------------------------------*
*       Verprobungsmodul                                              *
*---------------------------------------------------------------------*
FORM user_command.

* Auswertung der Daten von der Grafik
  CALL FUNCTION 'BARC_GRAPHIC_PAI'
    EXPORTING
      control_handle = barc_ocx  "f¨¹r Umstellung auf OCX
    IMPORTING
      graph_cmd      = graph_cmd
      graph_cmd_info = graph_cmd_info
      gr_sel_field   = gr_sel_field
      layer_type     = layer_kind
      settings       = settings
      symboltype     = symboltype
    TABLES
      boxes          = boxes
      box_vals       = box_vals
      deletions      = deletions
      links          = links
      link_vals      = link_vals
      nodes          = nodes
      node_vals      = node_vals
      positions      = positions
    EXCEPTIONS
      inv_winid      = 1.

  CLEAR: abap_cmd,
         status_text.

  stat = sgrc_const-stat_4.            "Wait for input

* Auswertung des Benutzerkommandos
  CASE graph_cmd.
*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_insert.      "einf¨¹gen
      abap_cmd = graph_cmd.

      DESCRIBE TABLE boxes LINES anz.
      IF anz <> 0.                     "Box eingef¨¹gt
        object_type = bc_const-box_object.
      ELSE.
        DESCRIBE TABLE nodes LINES anz.
        IF anz <> 0.                   "Knoten eingef¨¹gt
          object_type = bc_const-node_object.
        ELSE.
          DESCRIBE TABLE node_vals LINES anz.
          IF anz <> 0.                 "Layer eingef¨¹gt
            object_type = bc_const-layer_object.
          ENDIF.
        ENDIF.
      ENDIF.

      CASE object_type.
        WHEN bc_const-box_object.      "Box eingef¨¹gt
          READ TABLE positions INDEX 1.
          LOOP AT all_positions
           WHERE obj_type   = bc_const-box_object
             AND chart_id   = positions-chart_id
             AND row_number = positions-row_number.
            EXIT.
          ENDLOOP.                     "at ALL_POSITIONS
          IF sy-subrc IS INITIAL.
            REFRESH: boxes,
                     positions.
            status_text = text-004.    "Box bereits in Zeile

          ELSE.                        "noch keine Box vorhanden
            act_box_id = act_box_id + 1.

            READ TABLE boxes INDEX 1.
            boxes-id   = act_box_id.
            boxes-type = bc_const-row_box.
            CASE boxes-chart_id.
              WHEN 1.
                boxes-form_type  = 'B3'.
                boxes-color_type = 'B1'.
              WHEN 2.
                boxes-form_type  = 'B2'.
                boxes-color_type = 'B1'.
            ENDCASE.                   "case BOXES-CHART_ID
            MODIFY boxes INDEX 1.

            box_vals-id  = boxes-id.
            box_vals-fl  = '0'.
            WRITE boxes-id TO box_vals-val.
            CONDENSE box_vals-val NO-GAPS.
            APPEND box_vals.

            box_vals-fl  = '1'.
            WRITE box_vals-id TO box_vals-val.
            CONDENSE box_vals-val NO-GAPS.
            APPEND box_vals.

            box_vals-fl  = '2'.
            box_vals-val = text-016.                        "Box
            APPEND box_vals.

            box_vals-fl  = '3'.
            box_vals-val = '0001'.
            APPEND box_vals.

            positions-obj_id = act_box_id.
            MODIFY positions INDEX 1.

            status_text = text-005.    "Box eingef¨¹gt
          ENDIF.                       "Box in Zeile bereits vorhanden

        WHEN bc_const-node_object.     "Knoten eingef¨¹gt
*         Layertyp f¨¹r den Knoten erzeugen
*         PERFORM make_next_layer_type TABLES layer_types
*                                       USING  graph_profile
*                                              layer_type.
          IF layer_type IS INITIAL.
            REFRESH node_vals.
            status_text = text-013.    "Kein Typ mehr verf¨¹gbar

          ELSE.
*           neuen Layer erzeugen
            CALL FUNCTION 'BARC_ADD_LAYER'
              EXPORTING
                color_type   = 'L0'
                firstdate    = 1
                layer_kind   = layer_kind
                symboltype   = symboltype
                seconddate   = 2
                layer_type   = layer_type
              EXCEPTIONS
                invalid_type = 01.

            CHECK sy-subrc IS INITIAL.

            act_node_id = act_node_id + 1.

            READ TABLE nodes INDEX 1.
            nodes-id = act_node_id.
            MODIFY nodes INDEX 1.

            READ TABLE node_vals INDEX 1.
            node_vals-id = nodes-id.
            node_vals-fl = '1'.
            MODIFY node_vals INDEX 1.

            READ TABLE node_vals INDEX 2.
            node_vals-id = nodes-id.
            node_vals-fl = '2'.
            MODIFY node_vals INDEX 2.

            node_vals-fl  = bc_const-add_layer.
            node_vals-val = layer_type.
            APPEND node_vals.

            READ TABLE positions INDEX 1.
            positions-obj_id = act_node_id.
            MODIFY positions INDEX 1.

            status_text = text-006.    "Knoten eingef¨¹gt
          ENDIF.                       "Layertyp verf¨¹gbar

        WHEN bc_const-layer_object.    "Layer eingef¨¹gt
*         N#chsten Layertyp festlegen
*         PERFORM make_next_layer_type TABLES layer_types
*                                       USING  graph_profile
*                                              layer_type.
          IF layer_type IS INITIAL.
            REFRESH node_vals.
            status_text = text-013.    "Kein Typ mehr verf¨¹gbar

          ELSE.
*           H#chsten vergebenen Index im Knoten ermitteln
            CLEAR fl.
            READ TABLE node_vals INDEX 1.
            LOOP AT all_node_vals WHERE id = node_vals-id.
              IF '0123456789'      CA all_node_vals-fl    "#EC PORTABLE
              AND all_node_vals-fl >  fl.
                fl = all_node_vals-fl.
              ENDIF.
            ENDLOOP.
            IF fl > '97'.                                 "#EC PORTABLE
              REFRESH node_vals.
              status_text = text-014.  "Kein Textindex verf¨¹gbar

            ELSE.
              firstdate  = fl + 1.
              seconddate = fl + 2.

*             neuen Layer erzeugen
              CALL FUNCTION 'BARC_ADD_LAYER'
                EXPORTING
                  color_type   = 'L0'
                  firstdate    = firstdate
                  layer_kind   = layer_kind
                  layer_type   = layer_type
                  seconddate   = seconddate
                  symboltype   = symboltype
                EXCEPTIONS
                  invalid_type = 01.

              CHECK sy-subrc IS INITIAL.

              READ TABLE node_vals INDEX 1.
              node_vals-fl = firstdate.
              MODIFY node_vals INDEX 1.

              READ TABLE node_vals INDEX 2.
              node_vals-fl = seconddate.
              MODIFY node_vals INDEX 2.

              node_vals-fl  = bc_const-add_layer.
              node_vals-val = layer_type.
              APPEND node_vals.

              status_text = text-012.  "Layer eingef¨¹gt
            ENDIF.                     "if FL > '97'
          ENDIF.                       "if TYPE is initial
      ENDCASE.                         "case OBJECT_TYPE

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_duplicate.   "duplizieren
      abap_cmd = graph_cmd.

*     Boxes, Nodes zwischenspeichern
      LOOP AT boxes.
        MOVE-CORRESPONDING boxes TO tmp_boxes.
        APPEND tmp_boxes.
      ENDLOOP.

      LOOP AT nodes.
        MOVE-CORRESPONDING nodes TO tmp_nodes.
        APPEND tmp_nodes.
      ENDLOOP.

      REFRESH: boxes, nodes, positions.

*     Boxen duplizieren
      LOOP AT tmp_boxes.
*       Werte der Box ¨¹bertragen
        LOOP AT all_boxes WHERE id = tmp_boxes-id.
          CLEAR boxes.
          MOVE-CORRESPONDING all_boxes TO boxes.
          act_box_id = act_box_id + 1.
          boxes-id = act_box_id.
          APPEND boxes.
          EXIT.
        ENDLOOP.                       "at ALL_BOXES

*       Attribute der Box ¨¹bertragen
        LOOP AT all_box_vals WHERE id = tmp_boxes-id.
          CLEAR box_vals.
          MOVE-CORRESPONDING all_box_vals TO box_vals.
          box_vals-id = boxes-id.
          IF box_vals-fl  = '1'.
            WRITE box_vals-id TO box_vals-val.
            CONDENSE box_vals-val NO-GAPS.
          ENDIF.
          APPEND box_vals.
        ENDLOOP.                       "at ALL_BOX_VALS

*       Position bestimmen
        PERFORM get_max_pos TABLES all_positions positions
                            USING  tmp_boxes-chart_id max_pos.
        max_pos = max_pos + 1.
        CLEAR positions.
        positions-chart_id   = tmp_boxes-chart_id.
        positions-obj_type   = bc_const-box_object.
        positions-obj_id     = boxes-id.
        positions-row_number = max_pos.
        APPEND positions.
      ENDLOOP.                         "at TMP_BOXES
      REFRESH tmp_boxes.

*     Knoten duplizieren
      LOOP AT tmp_nodes.
*       Werte des Knotens ¨¹bertragen
        LOOP AT all_nodes WHERE id = tmp_nodes-id.
          CLEAR nodes.
          MOVE-CORRESPONDING all_nodes TO nodes.
          act_node_id = act_node_id + 1.
          nodes-id = act_node_id.
          APPEND nodes.
          EXIT.
        ENDLOOP.                       "at ALL_BOXES

*       Attribute des Knotens ¨¹bertragen
        LOOP AT all_node_vals WHERE id = tmp_nodes-id.
          CLEAR node_vals.
          MOVE-CORRESPONDING all_node_vals TO node_vals.
          node_vals-id = nodes-id.
          APPEND node_vals.
        ENDLOOP.                       "at ALL_NODE_VALS

*       Position bestimmen
        PERFORM get_max_pos TABLES all_positions positions
                            USING  tmp_nodes-chart_id max_pos.
        max_pos = max_pos + 1.
        CLEAR positions.
        positions-chart_id   = tmp_nodes-chart_id.
        positions-obj_type   = bc_const-node_object.
        positions-obj_id     = nodes-id.
        positions-row_number = max_pos.
        APPEND positions.
      ENDLOOP.                         "at TMP_NODES
      REFRESH tmp_nodes.

      status_text = text-003.          "Box/Knoten dupliziert

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_connect.     "verbinden
      abap_cmd = graph_cmd.

      READ TABLE links INDEX 1.
      CHECK sy-subrc IS INITIAL.

      act_link_id = act_link_id + 1.
      links-id = act_link_id.
      MODIFY links INDEX 1.

      LOOP AT link_vals.
        link_vals-id = act_link_id.
        MODIFY link_vals.
      ENDLOOP.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_modify.      "modifizieren
      abap_cmd = graph_cmd.

*     z.Z. nur f¨¹r Boxen
      READ TABLE box_vals INDEX 1.
      CHECK sy-subrc IS INITIAL.

*     Feldname in Textindex umwandeln
      READ TABLE all_boxes WITH KEY box_vals-id BINARY SEARCH.
      CHECK sy-subrc IS INITIAL.

*     Verprobung
      IF  all_boxes-chart_id = chart1 AND box_vals-fl = 'c'.
        status_text = text-007.        "Werk nicht #nderbar
        REFRESH box_vals.

      ELSE.
*       Textindex ermitteln
        CALL FUNCTION 'BARC_GET_TEXTINDEX'
          EXPORTING
            box_type        = all_boxes-type
            field           = box_vals-fl
            form_type       = all_boxes-form_type
            object_type     = bc_const-box_object
          IMPORTING
            textindex       = box_vals-fl
          EXCEPTIONS
            inv_box_type    = 01
            inv_object_type = 02
            inv_winid       = 03.

        CHECK sy-subrc IS INITIAL.

        MODIFY box_vals INDEX 1.

        status_text = text-008.        "Feldinhalt ge#ndert
      ENDIF.                           "Verprobung

*----------------------------------------------------------------------*
    WHEN bc_const-double_click.        "doppelklicken
      abap_cmd  = bc_const-ask_for_modify.
      graph_cmd = bc_const-ask_for_modify.

      DESCRIBE TABLE boxes LINES anz.                       "Box
      IF NOT anz IS INITIAL.
        object_type = bc_const-box_object.

        READ TABLE boxes INDEX 1.
        LOOP AT all_boxes WHERE id = boxes-id.
          EXIT.
        ENDLOOP.                       "at ALL_BOXES
        MOVE-CORRESPONDING all_boxes TO boxes.
        MODIFY boxes INDEX 1.

        LOOP AT all_box_vals WHERE id = boxes-id.
          MOVE-CORRESPONDING all_box_vals TO box_vals.
          APPEND box_vals.
        ENDLOOP.                       "at ALL_BOX_VALS
        SORT box_vals BY fl.

        entry_act = 1.
        CALL SCREEN 100 STARTING AT 2 2 ENDING AT 53 13.

        CLEAR   boxes.
        REFRESH boxes.
      ENDIF.                           "if not ANZ is initial.

      DESCRIBE TABLE nodes LINES anz.  "Node
      IF NOT anz IS INITIAL.
        object_type = bc_const-node_object.

        READ TABLE nodes INDEX 1.
        LOOP AT all_nodes WHERE id = nodes-id.
          EXIT.
        ENDLOOP.                       "at ALL_NODES
        MOVE-CORRESPONDING all_nodes TO nodes.
        MODIFY nodes INDEX 1.

        LOOP AT all_node_vals WHERE id = nodes-id.
          MOVE-CORRESPONDING all_node_vals TO node_vals.
          APPEND node_vals.
        ENDLOOP.                       "at ALL_NODE_VALS
        SORT node_vals BY fl.

        entry_act = 1.
        CALL SCREEN 101 STARTING AT 2 2 ENDING AT 53 16.

        CLEAR   nodes.
        REFRESH nodes.
      ENDIF.                           "if not ANZ is initial.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_delete.      "l#schen
      abap_cmd = graph_cmd.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_movelayer.   "Layer verschieben
      abap_cmd = graph_cmd.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_movenode.    "Knoten verschieben
      abap_cmd = graph_cmd.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_movemulti.   "mehrere Knoten verschieben
      abap_cmd = graph_cmd.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_movebox.     "Box verschieben
      abap_cmd = graph_cmd.
      READ TABLE positions INDEX 1.
      CHECK sy-subrc IS INITIAL.
      READ TABLE all_boxes WITH KEY positions-obj_id.
      CHECK sy-subrc IS INITIAL.
      IF positions-chart_id <> all_boxes-chart_id.
        REFRESH: boxes, positions, deletions.
        status_text = text-026.        "Funktion nicht m#glich
      ENDIF.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_scaleleft.   "skalieren links
      abap_cmd = graph_cmd.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_scaleright.  "skalieren rechts
      abap_cmd = graph_cmd.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_back.        "Zur¨¹ck
      abap_cmd = graph_cmd.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_quit.        "Abbruch
      abap_cmd = graph_cmd.

*----------------------------------------------------------------------*
    WHEN bc_const-ask_for_exit.        "Ende
      abap_cmd = graph_cmd.

*----------------------------------------------------------------------*
    WHEN bc_const-get_selection.       "Selektionen ermittelt
      DESCRIBE TABLE boxes LINES anz_b.
      DESCRIBE TABLE nodes LINES anz_n.
      IF anz_b > anz_n.
        anz = anz_b.
      ELSE.
        anz = anz_n.
      ENDIF.
      IF anz = 0.
        status_text = text-025.        "Kein Objekt selektiert
      ELSE.
        CLEAR scroll_tab.
        REFRESH scroll_tab.
        DO anz TIMES.
          APPEND scroll_tab.
        ENDDO.
        SORT boxes BY id.
        SORT nodes BY id.

        entry_act = 1.
        CALL SCREEN 102 STARTING AT 10 10 ENDING AT 30 23.

        REFRESH: boxes, nodes.
      ENDIF.                                                "if ANZ = 0

*----------------------------------------------------------------------*
    WHEN bc_const-movetabcol.          "Spalte verschoben
      abap_cmd = bc_const-movetabcol.

*----------------------------------------------------------------------*
    WHEN 'XBO1'.                       "Selektionen ermitteln
      abap_cmd = bc_const-get_selection.

*----------------------------------------------------------------------*
    WHEN 'XBO2'.                       "Sektionattribute #ndern
      abap_cmd = bc_const-ask_for_modify.

      CLEAR   vals.
      REFRESH vals.
      DO 7 TIMES.
        APPEND vals.
      ENDDO.

      object_type = con_s.             "Section
      entry_act = 1.
      CALL SCREEN 103 STARTING AT 10 10 ENDING AT 61 16.

      LOOP AT vals.
        CHECK NOT vals-id IS INITIAL.
*       Sectionattribute setzten
        CALL FUNCTION 'BARC_SET_SECTION_ATTRIB'
          EXPORTING
            fl  = vals-fl
            id  = vals-id
            val = vals-val.

      ENDLOOP.                         "at VALS

*----------------------------------------------------------------------*
    WHEN 'XBO3'.                       "Ribbonattribute #ndern
      abap_cmd = bc_const-ask_for_modify.

      CLEAR   vals.
      REFRESH vals.
      DO 7 TIMES.
        APPEND vals.
      ENDDO.

      object_type = con_r.             "Ribbon
      entry_act = 1.
      CALL SCREEN 104 STARTING AT 10 10 ENDING AT 61 16.

      LOOP AT vals.
        CHECK NOT vals-id IS INITIAL.
*       Ribbonattribute setzten
        CALL FUNCTION 'BARC_SET_RIBBON_ATTRIB'
          EXPORTING
            fl  = vals-fl
            id  = vals-id
            val = vals-val.

      ENDLOOP.                         "at VALS

*----------------------------------------------------------------------*
    WHEN 'XBO4'.                       "Gridattribute #ndern
      abap_cmd = bc_const-ask_for_modify.

      CLEAR   vals.
      REFRESH vals.
      DO 7 TIMES.
        APPEND vals.
      ENDDO.

      object_type = con_g.             "Grid
      entry_act = 1.
      CALL SCREEN 105 STARTING AT 10 10 ENDING AT 61 16.

      LOOP AT vals.
        CHECK NOT vals-id IS INITIAL.
*       Gridattribute setzten
        CALL FUNCTION 'BARC_SET_GRID_ATTRIB'
          EXPORTING
            fl  = vals-fl
            id  = vals-id
            val = vals-val.

      ENDLOOP.                         "at VALS

*----------------------------------------------------------------------*
    WHEN 'XBO5'.                       "Datumslinie einf¨¹gen
      abap_cmd = bc_const-ask_for_modify.

      object_type = con_d.             "Dateline
      CLEAR dateline.
      CALL SCREEN 106 STARTING AT 10 10 ENDING AT 40 15.

      IF NOT dateline IS INITIAL.
*       Datumslinie einf¨¹gen
        CALL FUNCTION 'BARC_ADD_DATELINE'
          EXPORTING
            chart_id   = dateline-chart_id
            color_type = dateline-color_type
            date       = dateline-date.

      ENDIF.

*----------------------------------------------------------------------*
  ENDCASE.                             "case GRAPH_CMD

* Objekttabellen aktualisieren
  CALL FUNCTION 'BARC_LOGIC'
    EXPORTING
      graph_cmd     = graph_cmd
    TABLES
      all_boxes     = all_boxes
      all_box_vals  = all_box_vals
      all_links     = all_links
      all_link_vals = all_link_vals
      all_nodes     = all_nodes
      all_node_vals = all_node_vals
      all_positions = all_positions
      boxes         = boxes
      box_vals      = box_vals
      deletions     = deletions
      links         = links
      link_vals     = link_vals
      nodes         = nodes
      node_vals     = node_vals
      positions     = positions.

ENDFORM.                               "user_command

*---------------------------------------------------------------------*
*       FORM GET_MAX_POS                                              *
*---------------------------------------------------------------------*
*       maximale, belegte Position ermitteln                          *
*---------------------------------------------------------------------*
FORM get_max_pos TABLES all_positions STRUCTURE bcposition
                         positions STRUCTURE bcposition
                 USING   chart_id LIKE tmp_boxes-chart_id
                         max_pos LIKE bcposition-row_number.

  CLEAR max_pos.

  LOOP AT all_positions WHERE chart_id = chart_id.
    IF all_positions-row_number > max_pos.
      max_pos = all_positions-row_number.
    ENDIF.
  ENDLOOP.                             "at ALL_POSITIONS

  LOOP AT positions WHERE chart_id = chart_id.
    IF positions-row_number > max_pos.
      max_pos = positions-row_number.
    ENDIF.
  ENDLOOP.                             "at POSITIONS

ENDFORM.                               " GET_MAX_POS

*---------------------------------------------------------------------*
*       FORM SET_CUA_STATUS.                                          *
*---------------------------------------------------------------------*
*       Pflegen der CUA-Oberfl#che ¨¹ber den CUA-Painter               *
*---------------------------------------------------------------------*
FORM set_cua_status.

  DATA: prog LIKE sy-repid.

  prog = sy-repid.

* CUA-Status
  CALL FUNCTION 'GRAPH_SET_CUA_STATUS'
    EXPORTING
      program      = prog
      status       = 'GRAFIK'
    TABLES
      excluding    = excluding_tab
    EXCEPTIONS
      inv_cua_info = 01.

  REFRESH excluding_tab.

* Fenstertitel
  SET TITLEBAR '011'.

ENDFORM.                               "form SET_CUA_STATUS


*---------------------------------------------------------------------*
*       FORM SET_BOXES                                                *
*---------------------------------------------------------------------*
*       Festlegen der Boxen (Tabellenteil)                            *
*---------------------------------------------------------------------*
FORM set_boxes TABLES boxes STRUCTURE bcboxes
                      box_vals STRUCTURE bcvals
                      positions STRUCTURE bcposition
               USING  act_box_id LIKE bcboxes-id
                      chart1 LIKE bcchart-id
                      chart2 LIKE bcchart-id.

* Boxes for chart 1
* Box 1 ~ Row 1
  act_box_id = act_box_id + 1.
  boxes-id         = act_box_id.
  boxes-type       = bc_const-row_box.
  boxes-chart_id   = chart1.
  boxes-form_type  = 'B3'.
  boxes-color_type = 'B1'.
  APPEND boxes.
* Enter row properties (contents)
  box_vals-id  = boxes-id.
  box_vals-fl  = '0'.            " Set 'Context text' (shown in status bar upon hovering on the line)
  WRITE boxes-id TO box_vals-val.
  CONDENSE box_vals-val NO-GAPS.
  box_vals-val = 'TVO'.
  APPEND box_vals.
  box_vals-fl  = '1'.            " Fill value in column 1
  WRITE boxes-id TO box_vals-val.
  CONDENSE box_vals-val NO-GAPS.
  box_vals-val = 'Tom Van Oevelen'.
  APPEND box_vals.
  box_vals-fl  = '2'.            " Fill value in column 2
  box_vals-val = text-016.       " ~ Box
  APPEND box_vals.
  box_vals-fl  = '3'.            " Fill value in column 3
  box_vals-val = '0001'.
  APPEND box_vals.
* Add the box to the positions table
  positions-obj_id     = boxes-id.
  positions-obj_type   = bc_const-box_object.
  positions-chart_id   = boxes-chart_id.
  positions-row_number = 1.
  APPEND positions.

* Box 2 ~ Row 2
  act_box_id = act_box_id + 1.
  boxes-id         = act_box_id.
  boxes-type       = bc_const-row_box.
  boxes-chart_id   = chart1.
  boxes-form_type  = 'B3'.
  boxes-color_type = 'B1'.
  APPEND boxes.
* Enter row properties (contents)
  box_vals-id  = boxes-id.
  box_vals-fl  = '0'.
  WRITE boxes-id TO box_vals-val.
  CONDENSE box_vals-val NO-GAPS.
  APPEND box_vals.
  box_vals-fl  = '1'.
  box_vals-val = boxes-id.
  CONDENSE box_vals-val NO-GAPS.
  APPEND box_vals.
  box_vals-fl  = '2'.
  box_vals-val = text-016.                                  "Box
  APPEND box_vals.
  box_vals-fl  = '3'.
  box_vals-val = '0001'.
  APPEND box_vals.
* Add the box to the positions table
  positions-obj_id     = boxes-id.
  positions-obj_type   = bc_const-box_object.
  positions-chart_id   = boxes-chart_id.
  positions-row_number = 2.
  APPEND positions.

* Box 3 ~ Row 3
  act_box_id = act_box_id + 1.
  boxes-id         = act_box_id.
  boxes-type       = bc_const-row_box.
  boxes-chart_id   = chart1.
  boxes-form_type  = 'B3'.
  boxes-color_type = 'B1'.
  APPEND boxes.
* Enter row properties (contents)
  box_vals-id  = boxes-id.
  box_vals-fl  = '0'.
  WRITE boxes-id TO box_vals-val.
  CONDENSE box_vals-val NO-GAPS.
  APPEND box_vals.
  box_vals-fl  = '1'.
  box_vals-val = boxes-id.
  CONDENSE box_vals-val NO-GAPS.
  APPEND box_vals.
  box_vals-fl  = '2'.
  box_vals-val = text-016.                                  "Box
  APPEND box_vals.
  box_vals-fl  = '3'.
  box_vals-val = '0001'.
  APPEND box_vals.
* Add the box to the positions table
  positions-obj_id     = boxes-id.
  positions-obj_type   = bc_const-box_object.
  positions-chart_id   = boxes-chart_id.
  positions-row_number = 3.
  APPEND positions.

* Boxes for chart 1
* Box 1 ~ Row 1
  act_box_id = act_box_id + 1.
  boxes-id         = act_box_id.
  boxes-type       = bc_const-row_box.
  boxes-chart_id   = chart2.
  boxes-form_type  = 'B2'.
  boxes-color_type = 'B1'.
  APPEND boxes.
* Enter row properties (contents)
  box_vals-id  = boxes-id.
  box_vals-fl  = '0'.
  WRITE boxes-id TO box_vals-val.
  CONDENSE box_vals-val NO-GAPS.
  APPEND box_vals.
  box_vals-fl  = '1'.
  box_vals-val = boxes-id.
  CONDENSE box_vals-val NO-GAPS.
  APPEND box_vals.
  box_vals-fl  = '2'.
  box_vals-val = text-016.                                  "Box
  APPEND box_vals.
* Add the box to the positions table
  positions-obj_id     = boxes-id.
  positions-obj_type   = bc_const-box_object.
  positions-chart_id   = boxes-chart_id.
  positions-row_number = 1.
  APPEND positions.

* Box 2 ~ Row 2
  act_box_id = act_box_id + 1.
  boxes-id         = act_box_id.
  boxes-type       = bc_const-row_box.
  boxes-chart_id   = chart2.
  boxes-form_type  = 'B2'.
  boxes-color_type = 'B1'.
  APPEND boxes.
* Enter row properties (contents)
  box_vals-id  = boxes-id.
  box_vals-fl  = '0'.
  WRITE boxes-id TO box_vals-val.
  CONDENSE box_vals-val NO-GAPS.
  APPEND box_vals.
  box_vals-fl  = '1'.
  box_vals-val = boxes-id.
  CONDENSE box_vals-val NO-GAPS.
  APPEND box_vals.
  box_vals-fl  = '2'.
  box_vals-val = text-016.                                  "Box
  APPEND box_vals.
* Add the box to the positions table
  positions-obj_id     = boxes-id.
  positions-obj_type   = bc_const-box_object.
  positions-chart_id   = boxes-chart_id.
  positions-row_number = 2.
  APPEND positions.

* Box 3 ~ Row 3
  act_box_id = act_box_id + 1.
  boxes-id         = act_box_id.
  boxes-type       = bc_const-row_box.
  boxes-chart_id   = chart2.
  boxes-form_type  = 'B2'.
  boxes-color_type = 'B1'.
  APPEND boxes.
* Enter row properties (contents)
  box_vals-id  = boxes-id.
  box_vals-fl  = '0'.
  WRITE boxes-id TO box_vals-val.
  CONDENSE box_vals-val NO-GAPS.
  APPEND box_vals.
  box_vals-fl  = '1'.
  box_vals-val = boxes-id.
  CONDENSE box_vals-val NO-GAPS.
  APPEND box_vals.
  box_vals-fl  = '2'.
  box_vals-val = text-016.                                  "Box
  APPEND box_vals.
* Add the box to the positions table
  positions-obj_id     = boxes-id.
  positions-obj_type   = bc_const-box_object.
  positions-chart_id   = boxes-chart_id.
  positions-row_number = 3.
  APPEND positions.

* Box 4 ~ Row 4
  act_box_id = act_box_id + 1.
  boxes-id         = act_box_id.
  boxes-type       = bc_const-row_box.
  boxes-chart_id   = chart2.
  boxes-form_type  = 'B2'.
  boxes-color_type = 'B1'.
  APPEND boxes.
* Enter row properties (contents)
  box_vals-id  = boxes-id.
  box_vals-fl  = '0'.
  WRITE boxes-id TO box_vals-val.
  CONDENSE box_vals-val NO-GAPS.
  APPEND box_vals.
  box_vals-fl  = '1'.
  box_vals-val = boxes-id.
  CONDENSE box_vals-val NO-GAPS.
  APPEND box_vals.
  box_vals-fl  = '2'.
  box_vals-val = text-016.                                  "Box
  APPEND box_vals.
* Add the box to the positions table
  positions-obj_id     = boxes-id.
  positions-obj_type   = bc_const-box_object.
  positions-chart_id   = boxes-chart_id.
  positions-row_number = 4.
  APPEND positions.

* Box 5 ~ Row 5
  act_box_id = act_box_id + 1.
  boxes-id         = act_box_id.
  boxes-type       = bc_const-row_box.
  boxes-chart_id   = chart2.
  boxes-form_type  = 'B2'.
  boxes-color_type = 'B1'.
  APPEND boxes.
* Enter row properties (contents)
  box_vals-id  = boxes-id.
  box_vals-fl  = '0'.
  WRITE boxes-id TO box_vals-val.
  CONDENSE box_vals-val NO-GAPS.
  APPEND box_vals.
  box_vals-fl  = '1'.
  box_vals-val = boxes-id.
  CONDENSE box_vals-val NO-GAPS.
  APPEND box_vals.
  box_vals-fl  = '2'.
  box_vals-val = text-016.                                  "Box
  APPEND box_vals.
* Add the box to the positions table
  positions-obj_id     = boxes-id.
  positions-obj_type   = bc_const-box_object.
  positions-chart_id   = boxes-chart_id.
  positions-row_number = 5.
  APPEND positions.

ENDFORM.                               "form SET_BOXES

*----------------------------------------------------------------------*
*       Form  SET_CALENDAR
*----------------------------------------------------------------------*
*       Kalender definieren                                            *
*----------------------------------------------------------------------*
FORM set_calendar USING calendar LIKE bccalendar-id.

  DATA: to1      LIKE bctimeobj-id,
        to2      LIKE bctimeobj-id,
        int1     LIKE bcinterval-id,
        prof1    LIKE bctimeprof-id,
        val      LIKE bcvals-val.

* Create a new calendar
  CALL FUNCTION 'BARC_ADD_CALENDAR'
    IMPORTING
      id = calendar.

* Define weekends to have different colour
* Create a time object for every saturday
  CALL FUNCTION 'BARC_ADD_TIME_OBJECT'
    EXPORTING
      fl              = bc_const-day_in_week
      r_val           = bc_const-saturday
      timeobject_type = bc_const-recurrent
    IMPORTING
      id              = to1.
* Create a time object for every sunday
  CALL FUNCTION 'BARC_ADD_TIME_OBJECT'
    EXPORTING
      fl              = bc_const-day_in_week
      r_val           = bc_const-sunday
      timeobject_type = bc_const-recurrent
    IMPORTING
      id              = to2.

* Create a time profile
  CALL FUNCTION 'BARC_ADD_TIME_PROFILE'
    EXPORTING
      timeprof_type = bc_const-week
    IMPORTING
      id            = prof1.
* Add the saturdays to the timeprofile
  WRITE to1 TO val.
  CALL FUNCTION 'BARC_SET_TIME_PROFILE_ATTRIB'
    EXPORTING
      fl  = bc_const-add_nw_time
      id  = prof1
      val = val.
* Add the sundays to the timeprofile
  WRITE to2 TO val.
  CALL FUNCTION 'BARC_SET_TIME_PROFILE_ATTRIB'
    EXPORTING
      fl  = bc_const-add_nw_time
      id  = prof1
      val = val.

* Add the profile (weekends) to the calendar
  WRITE prof1 TO val.
  CALL FUNCTION 'BARC_SET_CALENDAR_ATTRIB'
    EXPORTING
      fl  = bc_const-add_profile
      id  = calendar
      val = val.

* Define Holiday
* Create a time object for the start of the holiday
  CALL FUNCTION 'BARC_ADD_TIME_OBJECT'
    EXPORTING
      u_val = '20.03.1999'
    IMPORTING
      id    = to1.
* Create a time object for the end of the holiday
  CALL FUNCTION 'BARC_ADD_TIME_OBJECT'
    EXPORTING
      u_val = '10.04.1999'
    IMPORTING
      id    = to2.

* Create an interval for the holiday
  CALL FUNCTION 'BARC_ADD_INTERVAL'
    IMPORTING
      id = int1.

* Add start to interval
  WRITE to1 TO val.
  CALL FUNCTION 'BARC_SET_INTERVAL_ATTRIB'
    EXPORTING
      fl  = bc_const-interval_start
      id  = int1
      val = val.
* Add end to interval
  WRITE to2 TO val.
  CALL FUNCTION 'BARC_SET_INTERVAL_ATTRIB'
    EXPORTING
      fl  = bc_const-interval_end
      id  = int1
      val = val.

* Add interval (holiday) to the calendar
  WRITE int1 TO val.
  CALL FUNCTION 'BARC_SET_CALENDAR_ATTRIB'
    EXPORTING
      fl  = bc_const-unique_interval
      id  = calendar
      val = val.

ENDFORM.                               " SET_CALENDAR

*---------------------------------------------------------------------*
*       FORM SET_CHARTS                                               *
*---------------------------------------------------------------------*
*       Festlegen der Charts                                          *
*---------------------------------------------------------------------*
FORM set_charts TABLES boxes STRUCTURE bcboxes
                       box_vals STRUCTURE bcvals
                       positions STRUCTURE bcposition
                USING  act_box_id LIKE bcboxes-id
                       chart1 LIKE bcchart-id
                       chart2 LIKE bcchart-id
                       section1 LIKE bcsection-id
                       section2 LIKE bcsection-id
                       section3 LIKE bcsection-id
                       calendar1 LIKE bccalendar-id.

  DATA: val LIKE bcvals-val.

* Create chart 1
  CALL FUNCTION 'BARC_ADD_CHART'
    EXPORTING
      column_anz = 3
      index      = 1
      size       = 300
      chart_type = '00'
    IMPORTING
      id         = chart1
    EXCEPTIONS
      inv_winid  = 01.

* Title
* Title - New box_id
  act_box_id = act_box_id + 1.
* Title - Define box
  boxes-id         = act_box_id.
  boxes-type       = bc_const-border_box.
  boxes-chart_id   = chart1.
  boxes-form_type  = 'T1'.   " This value is defined in the graphics profile and determines how the values (below) should be provided
  boxes-color_type = 'T0'.
  APPEND boxes.
* Title - Define box values - 'Hover' value - shown in status bar when hovering over the cell
  box_vals-id  = boxes-id.
  box_vals-fl  = '0'.
  box_vals-val = text-015.             "Ressourcen
  APPEND box_vals.
* Title - Define box values - Cell Value for column 1
  box_vals-fl  = '1'.
  box_vals-val = text-019.             "Titel
  APPEND box_vals.

* Title - Add box id to chart as "chart_border_box
  WRITE boxes-id TO val.
  CONDENSE val NO-GAPS.
  CALL FUNCTION 'BARC_SET_CHART_ATTRIB'
    EXPORTING
      fl  = bc_const-chart_border_box
      id  = chart1
      val = val.

* Title Table Part
* Title Table Part - New box_id
  act_box_id = act_box_id + 1.
* Title Table Part - Define box
  boxes-id         = act_box_id.
  boxes-type       = bc_const-row_box.
  boxes-chart_id   = chart1.
  boxes-form_type  = 'B3'.   " This value is defined in the graphics profile and determines how the values (below) should be provided
  boxes-color_type = 'B0'.
  APPEND boxes.
* Title Table Part - Define box values - Title
  box_vals-id  = boxes-id.
  box_vals-fl  = '0'.
  box_vals-val = text-020.             "#berschrift Tabellenteil
  APPEND box_vals.
* Title Table Part - Define box values - Title Col 1
  box_vals-fl  = '1'.
  box_vals-val = text-021.             "Nr.
  APPEND box_vals.
* Title Table Part - Define box values - Title Col 2
  box_vals-fl  = '2'.
  box_vals-val = text-022.             "Bezeichnung
  APPEND box_vals.
* Title Table Part - Define box values - Title Col 3
  box_vals-fl  = '3'.
  box_vals-val = text-023.             "Werk
  APPEND box_vals.

* Title Table Part - Add the box to the positions table
  positions-obj_id     = boxes-id.
  positions-obj_type   = bc_const-box_object.
  positions-chart_id   = chart1.
  positions-row_number = 0.
  APPEND positions.

* Title Table Part - Add box id to chart as chart_title_box
  WRITE boxes-id TO val.
  CALL FUNCTION 'BARC_SET_CHART_ATTRIB'
    EXPORTING
      id  = chart1
      fl  = bc_const-chart_title_box
      val = val.

* R¨¹ckmeldung auf einzelnen Zeilen beim mehrfachen Verschieben ???
  CALL FUNCTION 'BARC_SET_CHART_ATTRIB'
    EXPORTING
      id  = chart1
      fl  = bc_const-multi_line_confirm
      val = bc_const-x.

* Set the width of the columns
  CALL FUNCTION 'BARC_SET_COLUMN_WIDTH'
    EXPORTING
      chart_id = chart1
      index    = 1
      width    = 1500.
  CALL FUNCTION 'BARC_SET_COLUMN_WIDTH'
    EXPORTING
      chart_id = chart1
      index    = 2
      width    = 3500.
  CALL FUNCTION 'BARC_SET_COLUMN_WIDTH'
    EXPORTING
      chart_id = chart1
      index    = 3
      width    = 2000.

* Set height of the second row (header = row_number 0)
  CALL FUNCTION 'BARC_SET_ROW_HEIGHT'
    EXPORTING
      chart_id   = chart1
      height     = 1300
      row_number = 2.                                       "Zeile 2

* Create ribbons for each section
* Ribbons are time scales to be defined for every time axis per chart and section.
* The time scales are presented underneath one another
  CALL FUNCTION 'BARC_ADD_RIBBON'  " Add a ribbon for section1 displaying the months ('5')
    EXPORTING
      chart_id   = chart1
      color_type = 'R1'
      section_id = section1
      unit       = '5'.
  CALL FUNCTION 'BARC_ADD_RIBBON'  " Add a ribbon for section1 displaying the days ('3')
    EXPORTING
      chart_id   = chart1
      color_type = 'R2'
      section_id = section1
      unit       = '3'.
  CALL FUNCTION 'BARC_ADD_RIBBON'  " Add a ribbon for section2 displaying the months ('5')
    EXPORTING
      chart_id   = chart1
      color_type = 'R3'
      section_id = section2
      unit       = '5'.
  CALL FUNCTION 'BARC_ADD_RIBBON'  " Add a ribbon for section2 displaying the days ('3')
    EXPORTING
      chart_id   = chart1
      color_type = 'R4'
      section_id = section2
      unit       = '3'.
  CALL FUNCTION 'BARC_ADD_RIBBON'  " Add a ribbon for section3 displaying the months ('5')
    EXPORTING
      chart_id   = chart1
      color_type = 'R5'
      section_id = section3
      unit       = '5'.
  CALL FUNCTION 'BARC_ADD_RIBBON'  " Add a ribbon for section3 displaying the days ('3')
    EXPORTING
      chart_id   = chart1
      color_type = 'R6'
      section_id = section3
      unit       = '3'.

* Visualize the calendar's weekends and holidays for each section
  CALL FUNCTION 'BARC_ADD_GRID'
    EXPORTING
      calendar_id = calendar1
      chart_id    = chart1
      color_type  = 'G1'
      section_id  = section1
      grid_type   = bc_const-calendar_grid.
  CALL FUNCTION 'BARC_ADD_GRID'
    EXPORTING
      calendar_id = calendar1
      chart_id    = chart1
      color_type  = 'G2'
      section_id  = section2
      grid_type   = bc_const-calendar_grid.
  CALL FUNCTION 'BARC_ADD_GRID'
    EXPORTING
      calendar_id = calendar1
      chart_id    = chart1
      color_type  = 'G3'
      section_id  = section3
      grid_type   = bc_const-calendar_grid.

* Create chart 2
  CALL FUNCTION 'BARC_ADD_CHART'
    EXPORTING
      column_anz = 2    " Only 2 columns now
      index      = 2    " it's the second chart on the screen
      size       = 200  " ...
      chart_type = '01' " ??? don't know the impact of this one
    IMPORTING
      id         = chart2
    EXCEPTIONS
      inv_winid  = 01.

* Title
* Title - New box_id
  act_box_id = act_box_id + 1.
* Title - Define box
  boxes-id         = act_box_id.
  boxes-type       = bc_const-border_box.
  boxes-chart_id   = chart2.
  boxes-form_type  = 'T1'.
  boxes-color_type = 'T0'.
  APPEND boxes.
* Title - Define box values - Title
  box_vals-id  = boxes-id.
  box_vals-fl  = '0'.
  box_vals-val = text-024.             "Angebot
  APPEND box_vals.
* Title - Define box values - ???
  box_vals-fl  = '1'.
  box_vals-val = text-019.             "Titel
  APPEND box_vals.

* Title - Add box id to chart as "chart_border_box
  WRITE boxes-id TO val.
  CONDENSE val NO-GAPS.
  CALL FUNCTION 'BARC_SET_CHART_ATTRIB'
    EXPORTING
      fl  = bc_const-chart_border_box
      id  = chart2
      val = val.

* Title Table Part
* Title Table Part - New box_id
  act_box_id = act_box_id + 1.
* Title Table Part - Define box
  boxes-id         = act_box_id.
  boxes-type       = bc_const-row_box.
  boxes-chart_id   = chart2.
  boxes-form_type  = 'B2'.
  boxes-color_type = 'B0'.
  APPEND boxes.
* Title Table Part - Define box values - Title
  box_vals-id  = boxes-id.
  box_vals-fl  = '0'.
  box_vals-val = text-020.             "#berschrift Tabellenteil
  APPEND box_vals.
* Title Table Part - Define box values - Title Col 1
  box_vals-fl  = '1'.
  box_vals-val = 'AVO'.
  APPEND box_vals.
* Title Table Part - Define box values - Title Col 2
  box_vals-fl  = '2'.
  box_vals-val = text-022.             "Bezeichnung
  APPEND box_vals.
* Title Table Part - Add the box to the positions table
  positions-obj_id     = boxes-id.
  positions-obj_type   = bc_const-box_object.
  positions-chart_id   = chart2.
  positions-row_number = 0.
  APPEND positions.

* Title Table Part - Add box id to chart as chart_title_box
  WRITE boxes-id TO val.
  CALL FUNCTION 'BARC_SET_CHART_ATTRIB'
    EXPORTING
      id  = chart2
      fl  = bc_const-chart_title_box
      val = val.

* R¨¹ckmeldung auf einzelnen Zeilen beim mehrfachen Verschieben " ???
  CALL FUNCTION 'BARC_SET_CHART_ATTRIB'
    EXPORTING
      id  = chart2
      fl  = bc_const-multi_line_confirm
      val = bc_const-x.

* Set the width of the columns
  CALL FUNCTION 'BARC_SET_COLUMN_WIDTH'
    EXPORTING
      chart_id = chart2
      index    = 1
      width    = 3000.
  CALL FUNCTION 'BARC_SET_COLUMN_WIDTH'
    EXPORTING
      chart_id = chart2
      index    = 2
      width    = 4000.

* Set height of the rows (header = row number 0)
  CALL FUNCTION 'BARC_SET_ROW_HEIGHT'
    EXPORTING
      chart_id   = chart2
      height     = 1000
      row_number = 1.
  CALL FUNCTION 'BARC_SET_ROW_HEIGHT'
    EXPORTING
      chart_id   = chart2
      height     = 1000
      row_number = 2.
  CALL FUNCTION 'BARC_SET_ROW_HEIGHT'
    EXPORTING
      chart_id   = chart2
      height     = 1000
      row_number = 3.

* Create ribbons for each section
* Ribbons are time scales to be defined for every time axis per chart and section.
* The time scales are presented underneath one another
  CALL FUNCTION 'BARC_ADD_RIBBON'
    EXPORTING
      chart_id   = chart2
      color_type = 'R6'
      section_id = section1
      unit       = '5'.
  CALL FUNCTION 'BARC_ADD_RIBBON'
    EXPORTING
      chart_id   = chart2
      color_type = 'R5'
      section_id = section1
      unit       = '3'.
  CALL FUNCTION 'BARC_ADD_RIBBON'
    EXPORTING
      chart_id   = chart2
      color_type = 'R4'
      section_id = section2
      unit       = '5'.
  CALL FUNCTION 'BARC_ADD_RIBBON'
    EXPORTING
      chart_id   = chart2
      color_type = 'R3'
      section_id = section2
      unit       = '3'.
  CALL FUNCTION 'BARC_ADD_RIBBON'
    EXPORTING
      chart_id   = chart2
      color_type = 'R2'
      section_id = section3
      unit       = '5'.
  CALL FUNCTION 'BARC_ADD_RIBBON'
    EXPORTING
      chart_id   = chart2
      color_type = 'R1'
      section_id = section3
      unit       = '3'.

* Visualize the calendar's weekends and holidays for each section
  CALL FUNCTION 'BARC_ADD_GRID'
    EXPORTING
      chart_id   = chart2
      color_type = 'G1'
      section_id = section1
      unit       = '3'.
  CALL FUNCTION 'BARC_ADD_GRID'
    EXPORTING
      chart_id   = chart2
      color_type = 'G1'
      section_id = section2
      unit       = '3'.
  CALL FUNCTION 'BARC_ADD_GRID'
    EXPORTING
      chart_id   = chart2
      color_type = 'G1'
      section_id = section3
      unit       = '3'.
ENDFORM.                               "form SET_CHART


*---------------------------------------------------------------------*
*       FORM SET_NODES                                                *
*---------------------------------------------------------------------*
*       Festlegen der Knoten (Diagrammteil)                           *
*---------------------------------------------------------------------*
FORM set_nodes TABLES nodes STRUCTURE bcnodes
                      node_vals STRUCTURE bcnvals
                      positions STRUCTURE bcposition
               USING  act_node_id  LIKE bcnodes-id
                      chart1 LIKE bcchart-id
                      chart2 LIKE bcchart-id
                      calendar1 LIKE bccalendar-id.

* Knoten in Chart 1 ---------------------------------------------------*
  act_node_id = act_node_id + 1.

  nodes-id         = act_node_id.
  nodes-chart_id   = chart1.
  APPEND nodes.

  node_vals-id       = nodes-id.
  node_vals-chart_id = nodes-chart_id.
  node_vals-fl       = '0'.
  WRITE node_vals-id TO node_vals-val.
  CONDENSE node_vals-val NO-GAPS.
  APPEND node_vals.

  node_vals-fl       = '1'.
  node_vals-val      = '01.02.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '2'.
  node_vals-val      = '15.03.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '3'.
  node_vals-val      = '10.07.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl  = bc_const-add_layer.
  node_vals-val = '07'.
  APPEND node_vals.

  node_vals-fl  = bc_const-add_layer.
  node_vals-val = '08'.
  APPEND node_vals.

  positions-obj_id     = nodes-id.
  positions-obj_type   = bc_const-node_object.
  positions-chart_id   = nodes-chart_id.
  positions-row_number = 1.
  APPEND positions.

*----------------------------------------------------------------------*
  act_node_id = act_node_id + 1.

  nodes-id         = act_node_id.
  nodes-chart_id   = chart1.
  APPEND nodes.

  node_vals-id       = nodes-id.
  node_vals-chart_id = nodes-chart_id.
  node_vals-fl       = '0'.
  WRITE node_vals-id TO node_vals-val.
  CONDENSE node_vals-val NO-GAPS.
  APPEND node_vals.

  node_vals-fl       = '1'.
  node_vals-val      = '01.02.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '2'.
  node_vals-val      = '01.04.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '3'.
  node_vals-val      = '01.06.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '4'.
  node_vals-val      = '01.08.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl  = bc_const-add_layer.
  node_vals-val = '09'.
  APPEND node_vals.

  node_vals-fl = bc_const-add_layer.
  node_vals-val = '10'.
  APPEND node_vals.

  node_vals-fl  = bc_const-add_layer.
  node_vals-val = '11'.
  APPEND node_vals.

  positions-obj_id     = nodes-id.
  positions-obj_type   = bc_const-node_object.
  positions-chart_id   = nodes-chart_id.
  positions-row_number = 1.
  APPEND positions.

*----------------------------------------------------------------------*
  act_node_id = act_node_id + 1.

  nodes-id         = act_node_id.
  nodes-chart_id   = chart1.
  APPEND nodes.

  node_vals-id       = nodes-id.
  node_vals-chart_id = nodes-chart_id.
  node_vals-fl       = '0'.
  WRITE node_vals-id TO node_vals-val.
  CONDENSE node_vals-val NO-GAPS.
  APPEND node_vals.

  node_vals-fl       = '1'.
  node_vals-val      = '15.01.1999;8:00:05;'.
  APPEND node_vals.

  node_vals-fl       = '2'.
  node_vals-val      = '15.02.1999;9:30:10;'.
  APPEND node_vals.

  node_vals-fl  = bc_const-add_layer.
  node_vals-val = '12'.
  APPEND node_vals.

  node_vals-fl  = bc_const-set_calendar.
  node_vals-val = calendar1.
  APPEND node_vals.

  positions-obj_id     = nodes-id.
  positions-obj_type   = bc_const-node_object.
  positions-chart_id   = nodes-chart_id.
  positions-row_number = 2.
  APPEND positions.

*----------------------------------------------------------------------*
  act_node_id = act_node_id + 1.

  nodes-id         = act_node_id.
  nodes-chart_id   = chart1.
  APPEND nodes.

  node_vals-id       = nodes-id.
  node_vals-chart_id = nodes-chart_id.
  node_vals-fl       = '0'.
  WRITE node_vals-id TO node_vals-val.
  CONDENSE node_vals-val NO-GAPS.
  APPEND node_vals.

  node_vals-fl       = '1'.
  node_vals-val      = '01.04.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '2'.
  node_vals-val      = '01.05.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '3'.
  node_vals-val      = '01.06.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '4'.
  node_vals-val      = '01.07.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '5'.
  node_vals-val      = '01.08.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '6'.
  node_vals-val      = '01.09.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl = bc_const-add_layer.
  node_vals-val = '13'.
  APPEND node_vals.

  node_vals-fl  = bc_const-add_layer.
  node_vals-val = '14'.
  APPEND node_vals.

  node_vals-fl  = bc_const-add_layer.
  node_vals-val = '15'.
  APPEND node_vals.

  node_vals-fl = bc_const-add_layer.
  node_vals-val = '16'.
  APPEND node_vals.

  node_vals-fl  = bc_const-add_layer.
  node_vals-val = '17'.
  APPEND node_vals.

  node_vals-fl  = bc_const-add_layer.
  node_vals-val = '18'.
  APPEND node_vals.

  positions-obj_id     = nodes-id.
  positions-obj_type   = bc_const-node_object.
  positions-chart_id   = nodes-chart_id.
  positions-row_number = 3.
  APPEND positions.


* Knoten in Chart 2 ---------------------------------------------------*
  act_node_id = act_node_id + 1.

  nodes-id         = act_node_id.
  nodes-chart_id   = chart2.
  APPEND nodes.

  node_vals-id       = nodes-id.
  node_vals-chart_id = nodes-chart_id.
  node_vals-fl       = '0'.
  WRITE node_vals-id TO node_vals-val.
  CONDENSE node_vals-val NO-GAPS.
  APPEND node_vals.

  node_vals-fl       = '1'.
  node_vals-val      = '01.02.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '2'.
  node_vals-val      = '20.04.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '3'.
  node_vals-val      = '10.05.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '4'.
  node_vals-val      = '10.06.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl = bc_const-add_layer.
  node_vals-val  = '19'.                                "#EC NO_M_RISC3
  APPEND node_vals.

  node_vals-fl = bc_const-add_layer.
  node_vals-val  = '20'.
  APPEND node_vals.

  node_vals-fl = bc_const-add_layer.
  node_vals-val  = '21'.
  APPEND node_vals.

  positions-obj_id     = nodes-id.
  positions-obj_type   = bc_const-node_object.
  positions-chart_id   = nodes-chart_id.
  positions-row_number = 1.
  APPEND positions.

*----------------------------------------------------------------------*
  act_node_id = act_node_id + 1.

  nodes-id         = act_node_id.
  nodes-chart_id   = chart2.
  APPEND nodes.

  node_vals-id       = nodes-id.
  node_vals-chart_id = nodes-chart_id.
  node_vals-fl       = '0'.
  WRITE node_vals-id TO node_vals-val.
  CONDENSE node_vals-val NO-GAPS.
  APPEND node_vals.

  node_vals-fl       = '1'.
  node_vals-val      = '01.02.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '2'.
  node_vals-val      = '01.04.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '3'.
  node_vals-val      = '01.05.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '4'.
  node_vals-val      = '01.07.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = bc_const-add_layer.
  node_vals-val      = '00'.
  APPEND node_vals.

  node_vals-fl       = bc_const-add_layer.
  node_vals-val      = '01'.
  APPEND node_vals.

  node_vals-fl       = bc_const-add_layer.
  node_vals-val      = '02'.
  APPEND node_vals.

  positions-obj_id     = nodes-id.
  positions-obj_type   = bc_const-node_object.
  positions-chart_id   = nodes-chart_id.
  positions-row_number = 2.
  APPEND positions.

*----------------------------------------------------------------------*
  act_node_id = act_node_id + 1.

  nodes-id         = act_node_id.
  nodes-chart_id   = chart2.
  APPEND nodes.

  node_vals-id       = nodes-id.
  node_vals-chart_id = nodes-chart_id.
  node_vals-fl       = '0'.
  WRITE node_vals-id TO node_vals-val.
  CONDENSE node_vals-val NO-GAPS.
  APPEND node_vals.

  node_vals-fl       = '1'.
  node_vals-val      = '01.04.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '2'.
  node_vals-val      = '01.06.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '3'.
  node_vals-val      = '01.05.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '4'.
  node_vals-val      = '01.07.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = bc_const-add_layer.
  node_vals-val      = '00'.
  APPEND node_vals.

  node_vals-fl       = bc_const-add_layer.
  node_vals-val      = '01'.
  APPEND node_vals.

  node_vals-fl       = bc_const-add_layer.
  node_vals-val      = '02'.
  APPEND node_vals.

  positions-obj_id     = nodes-id.
  positions-obj_type   = bc_const-node_object.
  positions-chart_id   = nodes-chart_id.
  positions-row_number = 3.
  APPEND positions.

*----------------------------------------------------------------------*
  act_node_id = act_node_id + 1.

  nodes-id         = act_node_id.
  nodes-chart_id   = chart2.
  APPEND nodes.

  node_vals-id       = nodes-id.
  node_vals-chart_id = nodes-chart_id.
  node_vals-fl       = '0'.
  WRITE node_vals-id TO node_vals-val.
  CONDENSE node_vals-val NO-GAPS.
  APPEND node_vals.

  node_vals-fl       = '1'.
  node_vals-val      = '01.02.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '2'.
  node_vals-val      = '01.07.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '3'.
  node_vals-val      = '01.03.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '4'.
  node_vals-val      = '01.05.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = bc_const-add_layer.
  node_vals-val      = '03'.
  APPEND node_vals.

  node_vals-fl       = bc_const-add_layer.
  node_vals-val      = '04'.
  APPEND node_vals.

  node_vals-fl       = bc_const-add_layer.
  node_vals-val      = '05'.
  APPEND node_vals.

  node_vals-fl       = bc_const-add_layer.
  node_vals-val      = '06'.
  APPEND node_vals.

  positions-obj_id     = nodes-id.
  positions-obj_type   = bc_const-node_object.
  positions-chart_id   = nodes-chart_id.
  positions-row_number = 4.
  APPEND positions.

*----------------------------------------------------------------------*
  act_node_id = act_node_id + 1.

  nodes-id         = act_node_id.
  nodes-chart_id   = chart2.
  APPEND nodes.

  node_vals-id       = nodes-id.
  node_vals-chart_id = nodes-chart_id.
  node_vals-fl       = '0'.
  WRITE node_vals-id TO node_vals-val.
  CONDENSE node_vals-val NO-GAPS.
  APPEND node_vals.

  node_vals-fl       = '1'.
  node_vals-val      = '01.03.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '2'.
  node_vals-val      = '12.08.1999;12:05:45;'.
  APPEND node_vals.

  node_vals-fl       = '3'.
  node_vals-val      = '10.03.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = '4'.
  node_vals-val      = '10.05.1999;0:00:00;'.
  APPEND node_vals.

  node_vals-fl       = bc_const-add_layer.
  node_vals-val      = '03'.
  APPEND node_vals.

  node_vals-fl       = bc_const-add_layer.
  node_vals-val      = '04'.
  APPEND node_vals.

  node_vals-fl       = bc_const-add_layer.
  node_vals-val      = '05'.
  APPEND node_vals.

  node_vals-fl       = bc_const-add_layer.
  node_vals-val      = '06'.
  APPEND node_vals.

  positions-obj_id     = nodes-id.
  positions-obj_type   = bc_const-node_object.
  positions-chart_id   = nodes-chart_id.
  positions-row_number = 5.
  APPEND positions.

ENDFORM.                               "form SET_NODES


*---------------------------------------------------------------------*
*       FORM SET_TIME_AXIS                                            *
*---------------------------------------------------------------------*
*       Define time axis                                              *
*---------------------------------------------------------------------*
FORM set_time_axis USING section1     LIKE bcsection-id
                         section2     LIKE bcsection-id
                         section3     LIKE bcsection-id.

* Start und Ende der Zeitachse festlegen
  CALL FUNCTION 'BARC_SET_TIME_AXIS'
    EXPORTING
      start = '01.01.1999;'
      end   = '31.12.2000;'.

* Unit : 5 = Week, 6 = Day
* size : width of 1 unit (see above)

* Sektionen festlegen
  CALL FUNCTION 'BARC_ADD_SECTION'
    EXPORTING
      size  = 50
      start = '01.01.1999;'
      unit  = '5'
    IMPORTING
      id    = section1.

  CALL FUNCTION 'BARC_ADD_SECTION'
    EXPORTING
      size  = 10
      start = '15.03.1999;'
      unit  = '6'
    IMPORTING
      id    = section2.

  CALL FUNCTION 'BARC_ADD_SECTION'
    EXPORTING
      size  = 50
      start = '01.03.2000;'
      unit  = '5'
    IMPORTING
      id    = section3.

ENDFORM.                               "form SET_TIME_AXIS


*---------------------------------------------------------------------*
*       MODULE SET_PF-STATUS_0100 OUTPUT                              *
*---------------------------------------------------------------------*
*       Boxen #ndern                                                  *
*---------------------------------------------------------------------*
MODULE set_pf-status_0100 OUTPUT.

  SET PF-STATUS 'BARC'.
  SET TITLEBAR '001'.

ENDMODULE.                             "module SET_PF-STATUS_0100


*---------------------------------------------------------------------*
*       MODULE SET_PF-STATUS_0101 OUTPUT                              *
*---------------------------------------------------------------------*
*       Knoten #ndern                                                 *
*---------------------------------------------------------------------*
MODULE set_pf-status_0101 OUTPUT.

  SET PF-STATUS 'BARC'.
  SET TITLEBAR '002'.

ENDMODULE.                             "module SET_PF-STATUS_0101


*---------------------------------------------------------------------*
*       MODULE SET_PF-STATUS_0102 OUTPUT                              *
*---------------------------------------------------------------------*
*       Selektierte Onjekte anzeigen                                  *
*---------------------------------------------------------------------*
MODULE set_pf-status_0102 OUTPUT.

  SET PF-STATUS 'SELEKT'.
  SET TITLEBAR '003'.

ENDMODULE.                             "module SET_PF-STATUS_0102


*---------------------------------------------------------------------*
*       MODULE SET_PF-STATUS_0103 OUTPUT                              *
*---------------------------------------------------------------------*
*       Sectionattribute #ndern                                       *
*---------------------------------------------------------------------*
MODULE set_pf-status_0103 OUTPUT.

  SET PF-STATUS 'BARC'.
  SET TITLEBAR '004'.

ENDMODULE.                             "module SET_PF-STATUS_0103


*---------------------------------------------------------------------*
*       MODULE SET_PF-STATUS_0104 OUTPUT                              *
*---------------------------------------------------------------------*
*       Ribbonattribute #ndern                                        *
*---------------------------------------------------------------------*
MODULE set_pf-status_0104 OUTPUT.

  SET PF-STATUS 'BARC'.
  SET TITLEBAR '005'.

ENDMODULE.                             "module SET_PF-STATUS_0104


*---------------------------------------------------------------------*
*       MODULE SET_PF-STATUS_0105 OUTPUT                              *
*---------------------------------------------------------------------*
*       Gridattribute #ndern                                          *
*---------------------------------------------------------------------*
MODULE set_pf-status_0105 OUTPUT.

  SET PF-STATUS 'BARC'.
  SET TITLEBAR '006'.

ENDMODULE.                             "module SET_PF-STATUS_0105


*---------------------------------------------------------------------*
*       MODULE SET_PF-STATUS_0106 OUTPUT                              *
*---------------------------------------------------------------------*
*       Datumslinie einf¨¹gen                                          *
*---------------------------------------------------------------------*
MODULE set_pf-status_0106 OUTPUT.

  SET PF-STATUS 'DLINS'.
  SET TITLEBAR '007'.

ENDMODULE.                             "module SET_PF-STATUS_0106


*---------------------------------------------------------------------*
*       MODULE MODIFY_TAB_0100 INPUT                                  *
*---------------------------------------------------------------------*
*       Boxen #ndern                                                  *
*---------------------------------------------------------------------*
MODULE modify_tab_0100 INPUT.

  MODIFY box_vals INDEX entry_act.

ENDMODULE.                             "module MODIFY_TAB_0100


*---------------------------------------------------------------------*
*       MODULE MODIFY_TAB_0101 INPUT                                  *
*---------------------------------------------------------------------*
*       Knoten #ndern                                                 *
*---------------------------------------------------------------------*
MODULE modify_tab_0101 INPUT.

  MODIFY node_vals INDEX entry_act.

ENDMODULE.                             "module MODIFY_TAB_0101


*---------------------------------------------------------------------*
*       MODULE MODIFY_TAB_0103 INPUT                                  *
*---------------------------------------------------------------------*
*       Modifikation von Attributen                                   *
*---------------------------------------------------------------------*
MODULE modify_tab_0103 INPUT.

  MODIFY vals INDEX entry_act.

ENDMODULE.                             "module MODIFY_TAB_0103


*---------------------------------------------------------------------*
*       MODULE OK_CODE_BARC INPUT                                     *
*---------------------------------------------------------------------*
*       OK_Code-Verarbeitung in den Modifikationsdynpros              *
*---------------------------------------------------------------------*
MODULE ok_code_barc INPUT.

  save_ok_code = ok_code.
  CLEAR ok_code.

  CASE save_ok_code.
    WHEN 'UPDA'.
      CASE object_type.
        WHEN bc_const-box_object.                           "Box
          box_vals-id  = boxes-id.
          box_vals-fl  = bc_const-form_type.  "Formtyp
          box_vals-val = boxes-form_type.
          APPEND box_vals.
          box_vals-fl  = bc_const-color_type.   "Farbtyp
          box_vals-val = boxes-color_type.
          APPEND box_vals.
      ENDCASE.                         "case OBJECT_TYPE

      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'ABBR'.
      CASE object_type.
        WHEN bc_const-box_object.                           "Box
          REFRESH box_vals.
        WHEN bc_const-node_object.     "Node
          REFRESH node_vals.
        WHEN con_d.                    "Dateline
          CLEAR dateline.
        WHEN con_g.                    "Grid
          REFRESH vals.
        WHEN con_r.                    "Ribbon
          REFRESH vals.
        WHEN con_s.                    "Section
          REFRESH vals.
      ENDCASE.                         "case OBJECT_TYPE

      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN OTHERS.
      CASE object_type.
        WHEN bc_const-box_object.                           "Box
          DESCRIBE TABLE box_vals LINES entry_to.
          line_count = line_count_b.
        WHEN bc_const-node_object.     "Node
          DESCRIBE TABLE node_vals LINES entry_to.
          line_count = line_count_n.
        WHEN con_g.                    "Grid
          DESCRIBE TABLE vals LINES entry_to.
          line_count = line_count_val.
        WHEN con_r.                    "Ribbon
          DESCRIBE TABLE vals LINES entry_to.
          line_count = line_count_val.
        WHEN con_s.                    "Section
          DESCRIBE TABLE vals LINES entry_to.
          line_count = line_count_val.
      ENDCASE.                         "case OBJECT_TYPE

      CALL FUNCTION 'SCROLLING_IN_TABLE'
        EXPORTING
          entry_act             = entry_act
          entry_to              = entry_to
          last_page_full        = space
          loops                 = line_count
          ok_code               = save_ok_code
        IMPORTING
          entry_new             = entry_new
        EXCEPTIONS
          no_entry_or_page_act  = 01
          no_entry_to           = 02
          no_ok_code_or_page_go = 03.

      IF sy-subrc <> 3.
        entry_act = entry_new.
      ENDIF.
  ENDCASE.                             "case SAVE_OK_CODE

ENDMODULE.                             "module OK_CODE_BARC


*---------------------------------------------------------------------*
*       MODULE OK_CODE_0102 INPUT                                     *
*---------------------------------------------------------------------*
*       OK-Code-Verarbeitung bei selektierte Objekte anzeigen         *
*---------------------------------------------------------------------*
MODULE ok_code_0102 INPUT.

  save_ok_code = ok_code.
  CLEAR ok_code.

  CASE save_ok_code.
    WHEN 'ENTR'.
      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'ABBR'.
      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN OTHERS.
      DESCRIBE TABLE scroll_tab LINES entry_to.

      CALL FUNCTION 'SCROLLING_IN_TABLE'
        EXPORTING
          entry_act             = entry_act
          entry_to              = entry_to
          last_page_full        = space
          loops                 = line_count_sel
          ok_code               = save_ok_code
        IMPORTING
          entry_new             = entry_new
        EXCEPTIONS
          no_entry_or_page_act  = 01
          no_entry_to           = 02
          no_ok_code_or_page_go = 03.

      IF sy-subrc <> 3.
        entry_act = entry_new.
      ENDIF.
  ENDCASE.                             "case SAVE_OK_CODE

ENDMODULE.                             "module OK_CODE_0102


*----------------------------f¨¹r Umstellung auf OCX -------------------*
*&---------------------------------------------------------------------*
*&      Module  STATUS_0300  OUTPUT
*&---------------------------------------------------------------------*
*       CUA-Status, Fenstertitel setzen
*----------------------------------------------------------------------*
MODULE status_0300 OUTPUT.

  SET PF-STATUS 'GRAFIK' EXCLUDING excluding_tab.
  SET TITLEBAR '011'.

  REFRESH excluding_tab.

ENDMODULE.                             " STATUS_0300  OUTPUT


*&---------------------------------------------------------------------*
*&      Module  GRAPHIC_PBO  OUTPUT
*&---------------------------------------------------------------------*
*       Daten an Grafik ¨¹bergeben
*----------------------------------------------------------------------*
MODULE graphic_pbo OUTPUT.

  CALL FUNCTION 'BARC_GRAPHIC_PBO'
    EXPORTING
      abap_cmd       = abap_cmd
      confirm        = 'X'
      profile        = graph_profile
      stat           = stat
      status_text    = status_text
      control_handle = barc_ocx  "f¨¹r OCX-Umstellung
    TABLES
      boxes          = boxes
      box_vals       = box_vals
      deletions      = deletions
      links          = links
      link_vals      = link_vals
      nodes          = nodes
      node_vals      = node_vals
      positions      = positions
    EXCEPTIONS
      err_in_profile = 1
      inv_profile    = 2
      inv_winid      = 3.

ENDMODULE.                             " GRAPHIC_PBO  OUTPUT


*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*       OK-Code-Verarbeitung
*----------------------------------------------------------------------*
MODULE user_command_0300 INPUT.

  DATA: retval TYPE i.

  save_ok_code = ok_code.
  CLEAR ok_code.

  CASE save_ok_code.
    WHEN 'EXIT'.
      PERFORM end_300.                 "Control abbauen
    WHEN 'QUIT'.
      PERFORM end_300.                 "Control abbauen
    WHEN 'BACK'.
      PERFORM end_300.                 "Control abbauen
    WHEN OTHERS.
      IF save_ok_code(4) = sgrc_const-event"Event '%_GC'
      OR save_ok_code(4) = sgrc_const-shell_event.  "Shell-Event '%_GS'
*       Bei Event (Doppelklick, ..) Verprobungsroutine direkt aufrufen
        PERFORM user_command.
      ELSE.                            "Funktionscode
*       Ansonsten Funktionscode an Grafik ¨¹bergeben
        CALL FUNCTION 'BARCHART_SET_FUNCTION_CODE'
          EXPORTING
            handle        = barc_ocx
            function_code = save_ok_code
          IMPORTING
            return        = retval.
        IF retval = 0.
*         Falls mit Funktionscode Daten#nderungen verbunden
          PERFORM user_command.        "Verprobungsroutine
          IF abap_cmd = bc_const-get_selection
          OR abap_cmd = bc_const-get_overlap
          OR abap_cmd = bc_const-get_settings
          OR abap_cmd = bc_const-get_color.
*           Falls weitere Daten zu ermitteln sind, zust#ndiges
*           Kommando an Grafik schicken
            CALL FUNCTION 'BARC_GRAPHIC_PBO'
              EXPORTING
                abap_cmd       = abap_cmd
                stat           = stat
                control_handle = barc_ocx.
*           ... Daten abholen und verarbeiten
            PERFORM user_command.
          ENDIF.
        ELSE.
*         Funktionscode konnte direkt abgearbeitet werden (Zoom in, ..)
          stat = sgrc_const-stat_4.    "Wait for input
        ENDIF.
      ENDIF.
  ENDCASE.

ENDMODULE.                             " USER_COMMAND_0300  INPUT

*&---------------------------------------------------------------------*
*&      Form  END_300
*&---------------------------------------------------------------------*
*       Destruktor f¨¹r Control
*----------------------------------------------------------------------*
FORM end_300.

* Aufr#umen
  CALL FUNCTION 'BARC_GRAPHIC_PAI'
    EXPORTING
      control_handle     = barc_ocx
      at_control_destroy = sgrc_const-yes.

* Control l#schen
  CALL FUNCTION 'CONTROL_DESTROY'
    CHANGING
      h_control = barc_ocx
    EXCEPTIONS
      OTHERS    = 1.

  SET SCREEN 0.
  LEAVE SCREEN.

ENDFORM.                                                    " END_300
*----------------------------f¨¹r Umstellung auf OCX -------------------*

*&---------------------------------------------------------------------*
*&      Form  CHECK_WIN32
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CHECK_WIN32 .

DATA:       ws(4) TYPE c.

CALL FUNCTION 'WS_QUERY'
  EXPORTING
    query          = 'WS'
  IMPORTING
    return         = ws
  EXCEPTIONS
    inv_query      = 1
    no_batch       = 2
    frontend_error = 3
    OTHERS         = 4.

IF NOT sy-subrc IS INITIAL OR ws <> 'WN32'.
  EXIT.
ENDIF.

ENDFORM.                    " CHECK_WIN32

*Text symbol text£º
*001:Graphics Profile
*002:End of loading process
*003:Box/node duplicated
*004:Box already exists in the line
*005:Box inserted
*006:Node inserted
*007:Cannot change plant
*008:Fld content changed
*012:Layer inserted
*013:No free layer type available
*014:No free text index available
*015:Resources
*016:Box
*019:Title
*020:Title table part
*021:No.
*022:Name
*023:Plnt
*024:Offer
*025:No Object Selected

*026:Not possible to move boxes between charts
*Selection text£º
*GRUPPE:        Group
*INDEX:        Index
*NAME:        Name
*OCX:        Call as control
