*----------------------------------------------------------------------*
***INCLUDE YSE_FICO_SDI_SETT_RRB_F01 .
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  copy_chars
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*

FORM copy_chars USING p_item.

  FIELD-SYMBOLS: <fs_field> TYPE ANY.

  DATA: ref_table_des  TYPE REF TO cl_abap_tabledescr,
        structref  TYPE REF TO cl_abap_structdescr,
        idetails   TYPE abap_compdescr_tab,
        xdetails   TYPE abap_compdescr.


  structref ?= cl_abap_typedescr=>describe_by_name( 'CE41000' ).

  idetails[] = structref->components[].


  LOOP AT idetails INTO xdetails WHERE name NE 'MANDT'.
    IF sy-subrc NE 0.
      EXIT.
    ELSEIF xdetails-name EQ 'AKTBO'
      OR   xdetails-name EQ 'PAOBJNR'
      OR   xdetails-name EQ 'PASUBNR'
      OR   xdetails-name EQ 'BISDAT'
      OR   xdetails-name EQ 'KNT_FRM_KZ'
      OR   xdetails-name EQ 'UNUSED_CE3'.
*     or   XDETAILS-NAME eq 'AUFNR'
*     or   XDETAILS-NAME eq 'MEINH'.
      CONTINUE.
    ELSE.
      CLEAR gs_criteria.
      ASSIGN COMPONENT xdetails-name OF STRUCTURE gs_ce41000 TO <fs_field>.
      MOVE:  p_item         TO   gs_criteria-itemno_acc,
*             xdetails-name  to   gs_criteria-fieldname,
             <fs_field>     TO   gs_criteria-character.
      CASE xdetails-name.
        WHEN 'AUFNR'.
          MOVE 'RKAUFNR' TO gs_criteria-fieldname.
        WHEN 'MEINH'.
          MOVE 'VV010_ME' TO gs_criteria-fieldname.
        WHEN OTHERS.
          MOVE xdetails-name  TO   gs_criteria-fieldname.
      ENDCASE.
      APPEND gs_criteria TO gt_criteria.
    ENDIF.
  ENDLOOP.


ENDFORM.                    " copy_chars
*&---------------------------------------------------------------------*
*&      Form  create_line_10
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM   create_line_10 .
  PERFORM copy_chars USING '10'.              "Copy the chars for item 10

  CLEAR gs_valuefield.
  gs_valuefield-itemno_acc = '10'.
  gs_valuefield-fieldname = 'VV100'.
  gs_valuefield-amt_valcom = gs_dmr-netwr * -1.
  gs_valuefield-currency = gv_waers.
  APPEND gs_valuefield TO gt_valuefield.

  CLEAR: gs_accountgl.
  gs_accountgl-itemno_acc = '10'.
  gs_accountgl-gl_account = p_re_rev.
  gs_accountgl-tax_code   = gv_tax_code.
  gs_accountgl-item_text  = 'RRB reposting'.                "#EC *
  gs_accountgl-comp_code  = p_bukrs.
* GS_ACCOUNTGL-FUNC_AREA  = '2051'.          "20100122 EXTUVE CR1223
  gs_accountgl-func_area  = '3111'.          "20100122 EXTUVE CR1223
  gs_accountgl-plant      = gs_ce41000-werks.
  gs_accountgl-fis_period = gv_period.
  gs_accountgl-fisc_year  = p_letja.
  gs_accountgl-pstng_date = gv_doc_date.
  CONCATENATE gs_dmr-vgbel gs_dmr-vgpos INTO gs_accountgl-alloc_nmbr SEPARATED BY space.
*** MOD-002 * begin ***
*  gs_accountgl-profit_ctr = gs_ce41000-prctr.
  gs_accountgl-profit_ctr = gs_ce41000-ww006.
*** MOD-002 * end ***
  APPEND gs_accountgl TO gt_accountgl.

  CLEAR gs_currencyamount.
  gs_currencyamount-itemno_acc = '10'.
  gs_currencyamount-currency = gv_waers.
  gs_currencyamount-amt_doccur = gs_dmr-netwr.
  APPEND gs_currencyamount TO gt_currencyamount.

ENDFORM.                    " create_line_10
*&---------------------------------------------------------------------*
*&      Form  create_line_20
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_line_20 .
  PERFORM copy_chars USING '20'.              "Copy the chars for item 20

  CLEAR gs_valuefield.
  gs_valuefield-itemno_acc = '20'.
  gs_valuefield-fieldname = 'VV200'.
  gs_valuefield-amt_valcom = gs_dmr-wavwr * -1.
  gs_valuefield-currency = gs_dmr-waerk.
  APPEND gs_valuefield TO gt_valuefield.

  CLEAR: gs_accountgl.
  gs_accountgl-itemno_acc = '20'.
  gs_accountgl-gl_account = p_re_cos.
  gs_accountgl-item_text  = 'RRB reposting'.
  gs_accountgl-comp_code  = p_bukrs.
* GS_ACCOUNTGL-FUNC_AREA  = '2061'.          "20100122 EXTUVE CR1223
  gs_accountgl-func_area  = '4111'.          "20100122 EXTUVE CR1223
  gs_accountgl-plant      = gs_ce41000-werks.
  gs_accountgl-fis_period = gv_period.
  gs_accountgl-fisc_year  = p_letja.
  gs_accountgl-pstng_date = gv_doc_date.
  CONCATENATE gs_dmr-vgbel gs_dmr-vgpos INTO gs_accountgl-alloc_nmbr SEPARATED BY space.
*** MOD-002 * begin ***
*  gs_accountgl-profit_ctr = gs_ce41000-prctr.
  gs_accountgl-profit_ctr = gs_ce41000-ww006.
*** MOD-002 * end ***
  APPEND gs_accountgl TO gt_accountgl.

  CLEAR gs_currencyamount.
  gs_currencyamount-itemno_acc = '20'.
  gs_currencyamount-currency = gv_waers.
  gs_currencyamount-amt_doccur = gs_dmr-wavwr * -1.
  APPEND gs_currencyamount TO gt_currencyamount.

ENDFORM.                    " create_line_20
*&---------------------------------------------------------------------*
*&      Form  create_line_30
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_line_30 .
  PERFORM copy_chars USING '30'.              "Copy the chars for item 30

  PERFORM rrb_pc_derivation USING '30'.

  gs_valuefield-itemno_acc = '30'.
  gs_valuefield-fieldname = 'VV100'.
  gs_valuefield-amt_valcom = gs_dmr-netwr.
  gs_valuefield-currency = gv_waers.
  APPEND gs_valuefield TO gt_valuefield.

  CLEAR: gs_accountgl.
  gs_accountgl-itemno_acc = '30'.
  gs_accountgl-gl_account = p_revs.
  gs_accountgl-tax_code   = gv_tax_code.
  gs_accountgl-item_text  = 'RRB reposting'.
  gs_accountgl-comp_code  = p_bukrs.
* GS_ACCOUNTGL-FUNC_AREA  = '2051'.          "20100122 EXTUVE CR1223
  gs_accountgl-func_area  = '3111'.          "20100122 EXTUVE CR1223
  gs_accountgl-plant      = gs_ce41000-werks.
  gs_accountgl-fis_period = gv_period.
  gs_accountgl-fisc_year  = p_letja.
  gs_accountgl-pstng_date = gv_doc_date.
  CONCATENATE gs_dmr-vgbel gs_dmr-vgpos INTO gs_accountgl-alloc_nmbr SEPARATED BY space.
  READ TABLE gt_criteria INTO gs_criteria
  WITH KEY itemno_acc = '30'
       fieldname = 'PRCTR'.
  gs_accountgl-profit_ctr = gs_criteria-character.
  APPEND gs_accountgl TO gt_accountgl.

  CLEAR gs_currencyamount.
  gs_currencyamount-itemno_acc = '30'.
  gs_currencyamount-currency = gv_waers.
  gs_currencyamount-amt_doccur = gs_dmr-netwr * -1.
  APPEND gs_currencyamount TO gt_currencyamount.

ENDFORM.                    " create_line_30
*&---------------------------------------------------------------------*
*&      Form  create_line_40
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_line_40 .
  PERFORM copy_chars USING '40'.              "Copy the chars for item 40

  PERFORM rrb_pc_derivation USING '40'.

  CLEAR gs_valuefield.
  gs_valuefield-itemno_acc = '40'.
  gs_valuefield-fieldname = 'VV200'.
  gs_valuefield-amt_valcom = gs_dmr-wavwr.
  gs_valuefield-currency = gs_dmr-waerk.
  APPEND gs_valuefield TO gt_valuefield.

  CLEAR: gs_accountgl.
  gs_accountgl-itemno_acc = '40'.
  gs_accountgl-gl_account = p_costs.
  gs_accountgl-item_text  = 'RRB reposting'.
  gs_accountgl-comp_code  = p_bukrs.
* GS_ACCOUNTGL-FUNC_AREA  = '2061'.          "20100122 EXTUVE CR1223
  gs_accountgl-func_area  = '4111'.          "20100122 EXTUVE CR1223
  gs_accountgl-plant      = gs_ce41000-werks.
  gs_accountgl-fis_period = gv_period.
  gs_accountgl-fisc_year  = p_letja.
  gs_accountgl-pstng_date = gv_doc_date.
  CONCATENATE gs_dmr-vgbel gs_dmr-vgpos INTO gs_accountgl-alloc_nmbr SEPARATED BY space.
  READ TABLE gt_criteria INTO gs_criteria
  WITH KEY itemno_acc = '40'
       fieldname = 'PRCTR'.
  gs_accountgl-profit_ctr = gs_criteria-character.
  APPEND gs_accountgl TO gt_accountgl.

  CLEAR gs_currencyamount.
  gs_currencyamount-itemno_acc = '40'.
  gs_currencyamount-currency = gv_waers.
  gs_currencyamount-amt_doccur = gs_dmr-wavwr.
  APPEND gs_currencyamount TO gt_currencyamount.

ENDFORM.                    " create_line_40
*&---------------------------------------------------------------------*
*&      Form  create_header
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_header .

  gs_documentheader-header_txt =  'RRB reposting'.          "#EC *
  gs_documentheader-comp_code  =  p_bukrs.
  gs_documentheader-username   =  sy-uname.
  gs_documentheader-bus_act    =  'RFBU'.
*  gs_documentheader-doc_date   =  gv_doc_date.
*  gs_documentheader-pstng_date =  sy-datum.
*CGEE 03/09/2007 Turn the assignment to these variables around
  gs_documentheader-doc_date   =  sy-datum.
  gs_documentheader-pstng_date =  gv_doc_date.
*------------------------------------------------
  gs_documentheader-fisc_year  =  p_letja.
  gs_documentheader-fis_period =  gv_period.
  gs_documentheader-doc_type   =  'SA'.
  gs_documentheader-ref_doc_no =  gs_dmr-vgbel.

ENDFORM.                    " create_header
*&---------------------------------------------------------------------*
*&      Form  execute_repost
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM execute_repost .
*  if not gs_dmr-orig_repost is initial.
*    perform reverse_posting changing gv_subrc.
*  endif.
  IF gv_subrc NE 0.
    "Write error log
  ELSE.
    CLEAR: gt_return[], gv_objkey.
    CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
      EXPORTING
        documentheader = gs_documentheader
      IMPORTING
        obj_key        = gv_objkey
        obj_type       = gv_obtype
        obj_sys        = gv_obsys
      TABLES
        accountgl      = gt_accountgl
        currencyamount = gt_currencyamount
        criteria       = gt_criteria
        valuefield     = gt_valuefield
        return         = gt_return.

    LOOP AT gt_return INTO gs_return
      WHERE type EQ 'E'.
      "Show error messages
      WRITE: /, 'E',gs_return-message.
    ENDLOOP.
    IF sy-subrc NE 0.      "No error messages, so commit and show success message
      READ TABLE gt_return INTO gs_return INDEX 1.
      WRITE: /, 'S', gs_return-message, gs_dmr-vbeln, gs_dmr-vgbel, gs_dmr-vgpos, 'Reposted'.
      COMMIT WORK AND WAIT.

      LOOP AT gt_rrb_repost ASSIGNING <fs_rrb_repost> WHERE invoice EQ gs_dmr-billing_doc.
        <fs_rrb_repost>-reposted = 'X'.
        <fs_rrb_repost>-obj_key  = gv_objkey.
        <fs_rrb_repost>-obj_typ  = gv_obtype.
        <fs_rrb_repost>-obj_sys  = gv_obsys.
        <fs_rrb_repost>-gjahr    = p_letja.
        <fs_rrb_repost>-bus_act  = 'RFBU'.
        <fs_rrb_repost>-redat    = sy-datum.
        <fs_rrb_repost>-rezet    = sy-timlo.
      ENDLOOP.
    ENDIF.
  ENDIF.


ENDFORM.                    " execute_repost
*&---------------------------------------------------------------------*
*&      Form  reverse_posting
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM reverse_posting. " CHANGING P_SUBRC.

  DATA: ls_reversal TYPE bapiacrev.
  CLEAR: ls_reversal, gt_return[].

*Fill reversal structure
  MOVE: <fs_rrb_repost>-obj_key TO ls_reversal-obj_key,
        <fs_rrb_repost>-obj_typ TO ls_reversal-obj_type,
        <fs_rrb_repost>-obj_sys TO ls_reversal-obj_sys,
        <fs_rrb_repost>-obj_key TO ls_reversal-obj_key_r,
        gv_doc_date TO ls_reversal-pstng_date,
        gv_period TO ls_reversal-fis_period.

*** MOD-002 * begin ***
  DATA: lv_bus_act  TYPE glvor.

  lv_bus_act = <fs_rrb_repost>-bus_act.
*** MOD-002 * end ***

  CALL FUNCTION 'BAPI_ACC_DOCUMENT_REV_POST'
    EXPORTING
      reversal       = ls_reversal
*** MOD-002 * begin ***
*      bus_act        = gs_dmr-orig_bus_act
      bus_act        = lv_bus_act
*** MOD-002 * end ***
   IMPORTING
*     OBJ_TYPE       =
     obj_key        = <fs_rrb_repost>-obj_key_rev
*     OBJ_SYS        =
    TABLES
      return         = gt_return
            .

  LOOP AT gt_return INTO gs_return
    WHERE type EQ 'E'.
  ENDLOOP.
  IF sy-subrc NE 0.
    <fs_rrb_repost>-repost_canceled = 'X'.
    WRITE: / 'Reposting for invoice: ', <fs_rrb_repost>-invoice, ' cancelled.'.
    COMMIT WORK AND WAIT.                                   "MOD-002
  ELSE.
    CLEAR: <fs_rrb_repost>-repost_canceled,
           <fs_rrb_repost>-obj_key_rev.
    "P_SUBRC = 4.
  ENDIF.



ENDFORM.                    " reverse_posting
*&---------------------------------------------------------------------*
*&      Form  rrb_pc_derivation
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM rrb_pc_derivation USING p_item.
**  append gs_criteria to gt_criteria.
*  data: lv_equnr type equnr,
*        lv_werks type werks,
*        lv_matnr_equnr type matnr,
*        lv_prdha_equnr type PRODH_D,
*        lv_prdha_prctr type prctr,
*        lv_plc_temp(4) type c,
*        lv_prdha_plc(4) type c,
*        lv_kunnr type kunnr.
*
*
**Get the equnr and plant from char table
*  read table gt_criteria into gs_criteria
*    with key itemno_acc = p_item
*         fieldname = 'EQUNR'.
*  if sy-subrc eq 0.
*    move gs_criteria-CHARACTER to lv_equnr.
*  endif.
*  read table gt_criteria into gs_criteria
*  with key itemno_acc = p_item
*       fieldname = 'WERKS'.
*  if sy-subrc eq 0.
*    move gs_criteria-CHARACTER to lv_werks.
*  endif.
*  read table gt_criteria into gs_criteria
*  with key itemno_acc = p_item
*       fieldname = 'KNDNR'.
*  if sy-subrc eq 0.
*    move gs_criteria-CHARACTER to lv_kunnr.
*  endif.
*
*
**  SELECT SINGLE MATNR FROM V_EQUI INTO LV_MATNR_EQUNR
**    WHERE EQUNR EQ lv_EQUNR.
*
*  IF SY-SUBRC EQ 0.
*    SELECT SINGLE PRDHA FROM MARA INTO LV_PRDHA_EQUNR
**               WHERE MATNR EQ LV_MATNR_EQUNR.
*                WHERE MATNR EQ gs_dmr-matnr.
*
*    IF SY-SUBRC EQ 0.
*      SELECT SINGLE PRCTR FROM MARC INTO LV_PRDHA_PRCTR
*               WHERE MATNR EQ gs_dmr-matnr        "changed to vbap-matnr
*               AND WERKS = lv_WERKS.
*        IF SY-SUBRC = 0.
*          lv_PLC_TEMP = LV_PRDHA_PRCTR+6(4).
*      SELECT SINGLE TARGET1 FROM K9RCD11000009 INTO LV_PRDHA_PLC"#EC *
*             WHERE SOUR1_FROM >= lv_PLC_TEMP                "#EC *
*              AND SOUR1_TO <= lv_PLC_TEMP                   "#EC *
*              AND VALID_FROM <= SY-DATUM.
*    endif.
*  endif.
*endif.
*
*
**  ---------------------------------------------------------------------------  *
**  New logic for it derivation                                                  *
**  ---------------------------------------------------------------------------  *
*DATA: WA_PRCTR_VKORG TYPE YSE_PRCTR_VKORG.
*DATA: V_BRAN1 TYPE KNA1-BRAN1.
*DATA: WA_PRCTR_CLASS TYPE YSE_PRCTR_CLASS.
*DATA: V_CLASS TYPE CHAR4.
*DATA: WA_PRCTR TYPE YSE_PRCTR_DERIV.
*DATA: LV_PRCTR type PRCTR.
*
*CLEAR WA_PRCTR_VKORG.
**SELECTION 1
*SELECT SINGLE * FROM YSE_PRCTR_VKORG INTO WA_PRCTR_VKORG
*  WHERE VKORG EQ gs_dmr-VKORG.
*
*IF SY-SUBRC EQ 0.
**SELECTION 2
*  CLEAR V_BRAN1.
*  SELECT SINGLE BRAN1 FROM KNA1 INTO V_BRAN1
*         WHERE KUNNR EQ lv_kunnr.
*  IF SY-SUBRC EQ 0.
*    CLEAR WA_PRCTR_CLASS.
*    SELECT SINGLE * FROM YSE_PRCTR_CLASS INTO WA_PRCTR_CLASS
*           WHERE SPART EQ gs_dmr-SPART AND
*           BRAN1 EQ V_BRAN1.
*    IF SY-SUBRC EQ 0.
*      V_CLASS = WA_PRCTR_CLASS-CLASS.
*    ENDIF.
*  ENDIF.
*
**-----------------------
**V_class will be default empty or it will be filled in in the logic above via the 2 extra tables.
*  CLEAR WA_PRCTR.
*  SELECT SINGLE * FROM YSE_PRCTR_DERIV INTO WA_PRCTR
*                    WHERE VTWEG EQ gs_dmr-VTWEG AND
*                          PGC EQ LV_PRDHA_EQUNR+4(4) AND
*                          CLASS EQ V_CLASS.
*  IF SY-SUBRC EQ 0.
**Excellent, now get the GAC and PGC and assign accordingly
*    LV_PRDHA_EQUNR(4) = WA_PRCTR-REP_GAC.
*    LV_PRDHA_EQUNR+4(4) = WA_PRCTR-REP_PGC.
*    lv_prctr         = WA_PRCTR-prctr.
*  endif.
**Overwrite prctr
*  read table gt_criteria into gs_criteria
*  with key itemno_acc = p_item
*       fieldname = 'PRCTR'.
*  if sy-subrc eq 0.
*    move lv_prctr to gs_criteria-CHARACTER.
*    modify gt_criteria from gs_criteria
*      transporting character
*      where ( itemno_acc = p_item )
*        and ( fieldname = 'PRCTR' ).
*  endif.
*ENDIF.
*  ---------------------------------------------------------------------------  *
*  End of new logic for it derivation                                           *
*  ---------------------------------------------------------------------------  *
  DATA: lv_equnr TYPE equnr,
        lv_werks TYPE werks_d,
        lv_kunnr TYPE kunnr,
        lv_gac   TYPE rkeg_ww006,
        lv_pgc   TYPE rkeg_ww007,
        lv_prctr TYPE prctr,
        lv_plc   TYPE rkeg_ww002,
        lv_prodh TYPE prodh_d.

*Get the equnr, plant and customer nr from char table
  READ TABLE gt_criteria INTO gs_criteria
    WITH KEY itemno_acc = p_item
         fieldname = 'EQUNR'.
  IF sy-subrc EQ 0.
    MOVE gs_criteria-character TO lv_equnr.
  ENDIF.
  READ TABLE gt_criteria INTO gs_criteria
  WITH KEY itemno_acc = p_item
       fieldname = 'WERKS'.
  IF sy-subrc EQ 0.
    MOVE gs_criteria-character TO lv_werks.
  ENDIF.
  READ TABLE gt_criteria INTO gs_criteria
  WITH KEY itemno_acc = p_item
       fieldname = 'KNDNR'.
  IF sy-subrc EQ 0.
    MOVE gs_criteria-character TO lv_kunnr.
  ENDIF.


  CALL METHOD yse_am_derivation=>rrb_reposting_derivation
    EXPORTING
      im_vkorg  = gs_dmr-vkorg
      im_kunnr  = lv_kunnr
      im_spart  = gs_dmr-spart
      im_vtweg  = gs_dmr-vtweg
      im_equnr  = lv_equnr
      im_werks  = lv_werks
      im_matnr  = gs_dmr-matnr
    IMPORTING
      exp_gac   = lv_gac
      exp_pgc   = lv_pgc
      exp_prctr = lv_prctr
      exp_plc   = lv_plc
      exp_prodh = lv_prodh.


*Overwrite prodh
  READ TABLE gt_criteria INTO gs_criteria
  WITH KEY itemno_acc = p_item
       fieldname = 'PRODH'.
  IF sy-subrc EQ 0.
    MOVE lv_prodh TO gs_criteria-character.
    MODIFY gt_criteria FROM gs_criteria
      TRANSPORTING character
      WHERE ( itemno_acc = p_item )
        AND ( fieldname = 'PRODH' ).
  ENDIF.

*Overwrite profitcenter
  READ TABLE gt_criteria INTO gs_criteria
  WITH KEY itemno_acc = p_item
       fieldname = 'PRCTR'.
  IF sy-subrc EQ 0.
    MOVE lv_prctr TO gs_criteria-character.
    MODIFY gt_criteria FROM gs_criteria
      TRANSPORTING character
      WHERE ( itemno_acc = p_item )
        AND ( fieldname = 'PRCTR' ).
  ENDIF.
*Overwrite PLC
  READ TABLE gt_criteria INTO gs_criteria
  WITH KEY itemno_acc = p_item
  fieldname = 'WW002'.
  IF sy-subrc EQ 0.
    MOVE lv_plc TO gs_criteria-character.
    MODIFY gt_criteria FROM gs_criteria
    TRANSPORTING character
    WHERE ( itemno_acc = p_item )
      AND ( fieldname = 'WW002' ).

  ENDIF.
*Overwrite GAC
  READ TABLE gt_criteria INTO gs_criteria
  WITH KEY itemno_acc = p_item
       fieldname = 'WW006'.
  IF sy-subrc EQ 0.
    MOVE lv_gac TO gs_criteria-character.
    MODIFY gt_criteria FROM gs_criteria
      TRANSPORTING character
      WHERE ( itemno_acc = p_item )
        AND ( fieldname = 'WW006' ).
  ENDIF.
*Overwrite PGC
  READ TABLE gt_criteria INTO gs_criteria
  WITH KEY itemno_acc = p_item
       fieldname = 'WW007'.
  IF sy-subrc EQ 0.
    MOVE lv_pgc TO gs_criteria-character.
    MODIFY gt_criteria FROM gs_criteria
      TRANSPORTING character
      WHERE ( itemno_acc = p_item )
        AND ( fieldname = 'WW007' ).
  ENDIF.

ENDFORM.                    " rrb_pc_derivation
*&---------------------------------------------------------------------*
*&      Form  execute_copa_repost_sdi
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM execute_copa_repost_sdi .
*Get all SDI's of current DMR.
  DATA: ls_comwa TYPE vbco6,
        lt_vbfa TYPE STANDARD TABLE OF vbfa,
        lt_sdi_copa TYPE STANDARD TABLE OF yse_sdi_copa,
        ls_sdi_copa TYPE yse_sdi_copa,
        lv_copas TYPE i.


  FIELD-SYMBOLS: <fs_vbfa> TYPE vbfa,
                 <fs_ce11del> TYPE ce11000.

*Read doc flow of DMR
  MOVE: gs_last_dmr-vbeln TO ls_comwa-vbeln,
        gs_last_dmr-posnr TO ls_comwa-posnr.

  CALL FUNCTION 'RV_ORDER_FLOW_INFORMATION'
    EXPORTING
      comwa    = ls_comwa
    TABLES
      vbfa_tab = lt_vbfa.
*Get SDI's from document flow
  LOOP AT lt_vbfa ASSIGNING <fs_vbfa>
    WHERE vbeln EQ gs_last_dmr-vbeln
    AND posnn > 0
    AND vbtyp_v = 'C'.
    MOVE: <fs_vbfa>-vbelv TO gs_sdi-vbeln.
*          <fs_vbfa>-posnv to gs_sdi-posnr.

    APPEND gs_sdi TO gt_sdi.
  ENDLOOP.
*Delete duplicates
  DELETE ADJACENT DUPLICATES FROM gt_sdi.
  DATA: BEGIN OF lt_sales_mat OCCURS 0,
          vbeln TYPE vbeln,
          posnr TYPE posnr,
          matnr TYPE matnr,
          pstyv TYPE pstyv,
        END OF lt_sales_mat.
  DATA: ls_sales_mat LIKE LINE OF lt_sales_mat.

  DATA: lv_tmp TYPE ad01invmat.

*
  SELECT vbeln posnr matnr pstyv FROM vbap INTO CORRESPONDING FIELDS OF TABLE lt_sales_mat
    FOR ALL ENTRIES IN gt_sdi
    WHERE vbeln = gt_sdi-vbeln
    AND ( pstyv = 'ZO04' OR pstyv = 'ZO03' ).

**Check every material for raw material by checking the material group, only repost zmat
  DATA: lv_matnr TYPE matnr,
        lv_mtart TYPE mtart.

  LOOP AT lt_sales_mat INTO ls_sales_mat WHERE pstyv = 'ZO04'.
    SELECT SINGLE matnr mtart FROM mara INTO (lv_matnr, lv_mtart)
      WHERE matnr = ls_sales_mat-matnr.
    IF lv_mtart <> 'ZMAT'.
      DELETE lt_sales_mat WHERE matnr EQ lv_matnr.
    ENDIF.

  ENDLOOP.

  CLEAR gt_sdi[].

  LOOP AT lt_sales_mat INTO ls_sales_mat.
    MOVE: ls_sales_mat-vbeln TO gs_sdi-vbeln,
          ls_sales_mat-posnr TO gs_sdi-posnr,
          ls_sales_mat-pstyv TO gs_sdi-pstyv.
    APPEND gs_sdi TO gt_sdi.
  ENDLOOP.

*For all found SDI's material items, read copa data and repost
  LOOP AT gt_sdi ASSIGNING <fs_sdi>.

*Get all copa postings to filter out the not yet processed ones
    SELECT * FROM ce11000 INTO TABLE gt_ce11000
      WHERE kaufn EQ <fs_sdi>-vbeln
            AND kdpos EQ <fs_sdi>-posnr
            AND vrgar = 'A'
            ORDER BY sto_belnr.

    SELECT * FROM yse_sdi_copa INTO TABLE lt_sdi_copa
      FOR ALL ENTRIES IN gt_ce11000
*      where PALEDGER = gt_ce11000-paledger
*      and VRGAR = gt_ce11000-vrgar
*      and VERSI = gt_ce11000-versi
      WHERE perio = gt_ce11000-perio
*      and PAOBJNR = gt_ce11000-paobjnr
*      and PASUBNR = gt_ce11000-pasubnr
      AND belnr = gt_ce11000-belnr.
*      and POSNR = gt_ce11000-posnr.

    IF sy-subrc EQ 0.  "Delete already processed copa items, they don't need to be reposted again.
      LOOP AT gt_ce11000 ASSIGNING <fs_ce11000>.
        READ TABLE lt_sdi_copa INTO ls_sdi_copa
          WITH KEY mandt = <fs_ce11000>-mandt
*             PALEDGER = <fs_ce11000>-paledger
*            VRGAR = <fs_ce11000>-vrgar
*            VERSI = <fs_ce11000>-versi
            perio = <fs_ce11000>-perio
*            PAOBJNR = <fs_ce11000>-paobjnr
*            PASUBNR = <fs_ce11000>-pasubnr
            belnr = <fs_ce11000>-belnr.
*            POSNR = <fs_ce11000>-posnr.
        IF sy-subrc EQ 0.
          DELETE gt_ce11000
            WHERE mandt = <fs_ce11000>-mandt
*            where PALEDGER = <fs_ce11000>-paledger
*            and VRGAR = <fs_ce11000>-vrgar
*            and VERSI = <fs_ce11000>-versi
             AND perio = <fs_ce11000>-perio
*            and PAOBJNR = <fs_ce11000>-paobjnr
*            and PASUBNR = <fs_ce11000>-pasubnr
            AND belnr = <fs_ce11000>-belnr.
*            and POSNR = <fs_ce11000>-posnr.
        ENDIF.
      ENDLOOP.
    ENDIF.

***All copa postings that havent been reposted yet have to be reposted, the already reposted items are stored in a custom table
    DESCRIBE TABLE gt_ce11000 LINES lv_copas.
    CHECK lv_copas > 0.

*Now we can copy them, derive the new GAC and PGC and repost them
**Check if we only have to reverse and repost the parts of the service product
    IF <fs_sdi>-pstyv = 'ZO03'.    "Service product
      PERFORM reverse_only_parts_sdi.
    ELSE.

      CLEAR gt_items[].
      LOOP AT gt_ce11000 ASSIGNING <fs_ce11000>.
        MOVE-CORRESPONDING <fs_ce11000> TO ls_sdi_copa.
        INSERT yse_sdi_copa FROM ls_sdi_copa.
        COMMIT WORK AND WAIT.
*Reversal
        PERFORM reverse_item.
      ENDLOOP.
      PERFORM execute_sdi_repost.

      CLEAR gt_items[].
      LOOP AT gt_ce11000 ASSIGNING <fs_ce11000>.
*Repost with new GAC, PGC etc.
        PERFORM repost_item.
      ENDLOOP.
      PERFORM execute_sdi_repost.
    ENDIF.
  ENDLOOP.


ENDFORM.                    " execute_copa_repost_sdi
*&---------------------------------------------------------------------*
*&      Form  set_reverse_number
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_GS_ITEMS_VV010  text
*----------------------------------------------------------------------*
FORM set_reverse_number  CHANGING p_gs_item.

  p_gs_item = p_gs_item * -1.

ENDFORM.                    " set_reverse_number
*&---------------------------------------------------------------------*
*&      Form  reverse_item
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM reverse_item .
  MOVE: <fs_ce11000> TO gs_items.

  PERFORM: set_reverse_number CHANGING gs_items-vv010,
           set_reverse_number CHANGING gs_items-vv100,
           set_reverse_number CHANGING gs_items-vv110,
           set_reverse_number CHANGING gs_items-vv200,
           set_reverse_number CHANGING gs_items-vv300,
           set_reverse_number CHANGING gs_items-vv400,
           set_reverse_number CHANGING gs_items-vv500,
           set_reverse_number CHANGING gs_items-vv600,
           set_reverse_number CHANGING gs_items-vv120,
           set_reverse_number CHANGING gs_items-vv101,
           set_reverse_number CHANGING gs_items-vv199,
           set_reverse_number CHANGING gs_items-vv111,
           set_reverse_number CHANGING gs_items-vv112,
           set_reverse_number CHANGING gs_items-vv130,
           set_reverse_number CHANGING gs_items-vv140,
           set_reverse_number CHANGING gs_items-vv150,
           set_reverse_number CHANGING gs_items-vv650,
           set_reverse_number CHANGING gs_items-vv700,
           set_reverse_number CHANGING gs_items-vv710,
           set_reverse_number CHANGING gs_items-vv720,
           set_reverse_number CHANGING gs_items-vv113,
           set_reverse_number CHANGING gs_items-vv114,
           set_reverse_number CHANGING gs_items-vv115.

  CLEAR: gs_items-mandt, gs_items-versi, gs_items-paobjnr, gs_items-pasubnr, gs_items-belnr, gs_items-posnr.

  MOVE gv_perio_copa TO gs_items-perio.

*  move <fs_ce11000>-belnr to gs_items-STO_BELNR.

  APPEND gs_items TO gt_items.
ENDFORM.                    " reverse_item
*&---------------------------------------------------------------------*
*&      Form  repost_item
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM repost_item .
  CLEAR gs_items.
  MOVE: <fs_ce11000> TO gs_items.
*  append gs_criteria to gt_criteria.
  DATA: lv_equnr TYPE equnr,
        lv_werks TYPE werks,
        lv_matnr TYPE matnr,
        lv_matnr_equnr TYPE matnr,
        lv_prdha_equnr TYPE prodh_d,
        lv_prdha_prctr TYPE prctr,
        lv_plc_temp(4) TYPE c,
        lv_prdha_plc(4) TYPE c.


*Get the equnr and plant
  MOVE <fs_ce11000>-equnr TO lv_equnr.
  MOVE <fs_ce11000>-werks TO lv_werks.
*Get matnr
  SELECT SINGLE matnr FROM vbap INTO lv_matnr
    WHERE vbeln EQ <fs_sdi>-vbeln
    AND posnr EQ <fs_sdi>-posnr.
*  SELECT SINGLE MATNR FROM V_EQUI INTO LV_MATNR_EQUNR
*    WHERE EQUNR EQ lv_EQUNR.

  IF sy-subrc EQ 0.
    SELECT SINGLE prdha FROM mara INTO lv_prdha_equnr
*               WHERE MATNR EQ LV_MATNR_EQUNR.
                WHERE matnr EQ gs_last_dmr-matnr.

    IF sy-subrc EQ 0.
      SELECT SINGLE prctr FROM marc INTO lv_prdha_prctr
               WHERE matnr EQ lv_matnr        "changed to vbap-matnr
               AND werks = lv_werks.
      IF sy-subrc = 0.
        lv_plc_temp = lv_prdha_prctr+6(4).
        SELECT SINGLE target1 FROM k9rcd11000009 INTO lv_prdha_plc "#EC *
               WHERE sour1_from >= lv_plc_temp              "#EC *
                AND sour1_to <= lv_plc_temp                 "#EC *
                AND valid_from <= sy-datum.
      ENDIF.
    ENDIF.
  ENDIF.
*Overwrite prodh
  MOVE lv_prdha_equnr TO gs_items-prodh.

*Overwrite profitcenter
  MOVE lv_prdha_prctr TO gs_items-prctr.
*Overwrite PLC
  MOVE lv_prdha_plc TO gs_items-ww002.

*Overwrite GAC
  MOVE lv_prdha_equnr(4) TO gs_items-ww006.
*Overwrite GAC
  MOVE lv_prdha_equnr+4(4) TO gs_items-ww007.

  CLEAR: gs_items-mandt, gs_items-versi, gs_items-paobjnr, gs_items-pasubnr, gs_items-belnr, gs_items-posnr.

  MOVE gv_perio_copa TO gs_items-perio.

  APPEND gs_items TO gt_items.

ENDFORM.                    " repost_item
*&---------------------------------------------------------------------*
*&      Form  execute_SDi_repost
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM execute_sdi_repost .
  DATA:  lv_erkrs TYPE erkrs VALUE '1000',
         lt_paledg TYPE copa_yt_paledger,
         ls_paledg TYPE ledbo,
         ls_sdi_copa TYPE yse_sdi_copa.

  CLEAR: lt_paledg[].

  ls_paledg = '01'.
  APPEND ls_paledg TO lt_paledg.

  ls_paledg = '02'.
  APPEND ls_paledg TO lt_paledg.

  CALL FUNCTION 'RKE_POST_ACT_LINE_ITEM_CORE'
    EXPORTING
      erkrs                      = '1000'
      butyp                      = '3'
      check_belnr                = 'X'
      is_reversal                = ' '
      t_paledger                 = lt_paledg
*   I_SCHEDMAN_KEY             =
    TABLES
      line_item_tab              = gt_items
   EXCEPTIONS
     already_exists             = 1
     doc_nr_iv_not_exists       = 2
     doc_nr_iv_overflow         = 3
     foreign_lock               = 4
     system_failure             = 5
     OTHERS                     = 6
            .
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ELSE.
    MOVE-CORRESPONDING gt_items TO ls_sdi_copa.
    INSERT yse_sdi_copa FROM ls_sdi_copa.
    COMMIT WORK AND WAIT.
  ENDIF.

ENDFORM.                    " execute_SDi_repost
*&---------------------------------------------------------------------*
*&      Form  reverse_only_parts_sdi
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM reverse_only_parts_sdi .
*Get all SDI's of current DMR.
  DATA: ls_comwa TYPE vbco6,
        lt_vbfa TYPE STANDARD TABLE OF vbfa,
        lt_sdi_copa TYPE STANDARD TABLE OF yse_sdi_copa,
        ls_sdi_copa TYPE yse_sdi_copa.

  CLEAR gt_items[].
  LOOP AT gt_ce11000 ASSIGNING <fs_ce11000>.
    MOVE-CORRESPONDING <fs_ce11000> TO ls_sdi_copa.
    INSERT yse_sdi_copa FROM ls_sdi_copa.
    COMMIT WORK AND WAIT.
*Reversal
    PERFORM reverse_item_parts_sdi_only.
  ENDLOOP.
  PERFORM execute_sdi_repost.

  CLEAR gt_items[].
  LOOP AT gt_ce11000 ASSIGNING <fs_ce11000>.
*Repost with new GAC, PGC etc.
    PERFORM repost_item_sdi_parts_only.
  ENDLOOP.
  PERFORM execute_sdi_repost.


ENDFORM.                    " reverse_only_parts_sdi
*&---------------------------------------------------------------------*
*&      Form  reverse_item_parts_sdi_only
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM reverse_item_parts_sdi_only .
  MOVE: <fs_ce11000> TO gs_items.

  CLEAR:   gs_items-vv010,
           gs_items-vv100,
           gs_items-vv110,
           gs_items-vv300,
           gs_items-vv400,
           gs_items-vv500,
           gs_items-vv600,
           gs_items-vv120,
           gs_items-vv101,
           gs_items-vv199,
           gs_items-vv111,
           gs_items-vv112,
           gs_items-vv130,
           gs_items-vv140,
           gs_items-vv150,
           gs_items-vv650,
           gs_items-vv700,
           gs_items-vv710,
           gs_items-vv720,
           gs_items-vv113,
           gs_items-vv114,
           gs_items-vv115.

  CLEAR: gs_items-mandt, gs_items-versi, gs_items-paobjnr, gs_items-pasubnr, gs_items-belnr, gs_items-posnr.

*  move <fs_ce11000>-belnr to gs_items-STO_BELNR.
  PERFORM: set_reverse_number CHANGING gs_items-vv200.

  MOVE gv_perio_copa TO gs_items-perio.

  APPEND gs_items TO gt_items.

ENDFORM.                    " reverse_item_parts_sdi_only
*&---------------------------------------------------------------------*
*&      Form  repost_item_sdi_parts_only
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM repost_item_sdi_parts_only .
  CLEAR gs_items.
  MOVE: <fs_ce11000> TO gs_items.
*  append gs_criteria to gt_criteria.
  DATA: lv_equnr TYPE equnr,
        lv_werks TYPE werks,
        lv_matnr TYPE matnr,
        lv_matnr_equnr TYPE matnr,
        lv_prdha_equnr TYPE prodh_d,
        lv_prdha_prctr TYPE prctr,
        lv_plc_temp(4) TYPE c,
        lv_prdha_plc(4) TYPE c.


*Get the equnr and plant
  MOVE <fs_ce11000>-equnr TO lv_equnr.
  MOVE <fs_ce11000>-werks TO lv_werks.
*Get matnr
  SELECT SINGLE matnr FROM vbap INTO lv_matnr
    WHERE vbeln EQ <fs_sdi>-vbeln
    AND posnr EQ <fs_sdi>-posnr.
*  SELECT SINGLE MATNR FROM V_EQUI INTO LV_MATNR_EQUNR
*    WHERE EQUNR EQ lv_EQUNR.

  IF sy-subrc EQ 0.
    SELECT SINGLE prdha FROM mara INTO lv_prdha_equnr
*               WHERE MATNR EQ LV_MATNR_EQUNR.
                WHERE matnr EQ gs_last_dmr-matnr.

    IF sy-subrc EQ 0.
      SELECT SINGLE prctr FROM marc INTO lv_prdha_prctr
               WHERE matnr EQ lv_matnr        "changed to vbap-matnr
               AND werks = lv_werks.
      IF sy-subrc = 0.
        lv_plc_temp = lv_prdha_prctr+6(4).
        SELECT SINGLE target1 FROM k9rcd11000009 INTO lv_prdha_plc "#EC *
               WHERE sour1_from >= lv_plc_temp              "#EC *
                AND sour1_to <= lv_plc_temp                 "#EC *
                AND valid_from <= sy-datum.
      ENDIF.
    ENDIF.
  ENDIF.
*Overwrite prodh
  MOVE lv_prdha_equnr TO gs_items-prodh.

*Overwrite profitcenter
  MOVE lv_prdha_prctr TO gs_items-prctr.
*Overwrite PLC
  MOVE lv_prdha_plc TO gs_items-ww002.

*Overwrite GAC
  MOVE lv_prdha_equnr(4) TO gs_items-ww006.
*Overwrite GAC
  MOVE lv_prdha_equnr+4(4) TO gs_items-ww007.

  CLEAR: gs_items-mandt, gs_items-versi, gs_items-paobjnr, gs_items-pasubnr, gs_items-belnr, gs_items-posnr.

  CLEAR:   gs_items-vv010,
           gs_items-vv100,
           gs_items-vv110,
           gs_items-vv300,
           gs_items-vv400,
           gs_items-vv500,
           gs_items-vv600,
           gs_items-vv120,
           gs_items-vv101,
           gs_items-vv199,
           gs_items-vv111,
           gs_items-vv112,
           gs_items-vv130,
           gs_items-vv140,
           gs_items-vv150,
           gs_items-vv650,
           gs_items-vv700,
           gs_items-vv710,
           gs_items-vv720,
           gs_items-vv113,
           gs_items-vv114,
           gs_items-vv115.

  MOVE gv_perio_copa TO gs_items-perio.

  APPEND gs_items TO gt_items.

ENDFORM.                    " repost_item_sdi_parts_only
*&---------------------------------------------------------------------*
*&      Form  get_last_date_of_period
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_last_date_of_period .

*  IF SO_LETPE-HIGH IS INITIAL.  "No range so take low
  gv_period = p_letpe.

  CONCATENATE p_letja p_letpe INTO gv_perio_copa.

  CALL FUNCTION 'LAST_DAY_IN_PERIOD_GET'
    EXPORTING
      i_gjahr              = p_letja
*     I_MONMIT             = 00
      i_periv              = 'K4'
      i_poper              = p_letpe
    IMPORTING
      e_date               = gv_doc_date
    EXCEPTIONS
      input_false          = 1
      t009_notfound        = 2
      t009b_notfound       = 3
      OTHERS               = 4
            .
*  ELSE.  "Take highest value of range
*    GV_PERIOD = SO_LETPE-HIGH.
*    CONCATENATE SO_LETJA-LOW SO_LETPE-HIGH INTO GV_PERIO_COPA.
*
*    CALL FUNCTION 'LAST_DAY_IN_PERIOD_GET'
*    EXPORTING
*      I_GJAHR              = SO_LETJA-LOW
**     I_MONMIT             = 00
*      I_PERIV              = 'K4'
*      I_POPER              = SO_LETPE-HIGH
*    IMPORTING
*      E_DATE               = GV_DOC_DATE
*    EXCEPTIONS
*      INPUT_FALSE          = 1
*      T009_NOTFOUND        = 2
*      T009B_NOTFOUND       = 3
*      OTHERS               = 4
*            .
*  ENDIF.
ENDFORM.                    " get_last_date_of_period
