*----------------------------------------------------------------------*
***INCLUDE RSAUDIT_SYSTEM_STATUS_ALV .
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  SHOW_ALV
*&---------------------------------------------------------------------*
FORM show_alv USING pt_list TYPE tt_lst_crtl.

  cl_salv_form_content=>set_modus( 2 ).  "c_modus_exceed_top_tol_eop

  PERFORM alv_display_list_level USING pt_list 1.

  cl_salv_form_content=>set_modus( 0 ).  "c_modus_standard

ENDFORM.                    " SHOW_ALV

*&---------------------------------------------------------------------*
*&      Form  ALV_DISPLAY_LIST_LEVEL
*&---------------------------------------------------------------------*
FORM alv_display_list_level  USING pt_list TYPE tt_lst_crtl
                                   pv_lvl TYPE sy-tabix.

  FIELD-SYMBOLS:
    <fs_lst> TYPE ts_lst_crtl.
*-----------------------------------------------------------------------
  READ TABLE pt_list ASSIGNING <fs_lst> WITH KEY cnt = pv_lvl.
  IF sy-subrc = 0.
    CASE <fs_lst>-name.
      WHEN gc_lst_client.
        PERFORM display_client_list USING <fs_lst>-cnt.
      WHEN gc_lst_nspace.
        PERFORM display_nspace_list USING <fs_lst>-cnt.
      WHEN gc_lst_scomp.
        PERFORM display_sys_comp_list USING <fs_lst>-cnt.
    ENDCASE.
  ENDIF.

ENDFORM.                    " ALV_DISPLAY_LIST_LEVEL

*&---------------------------------------------------------------------*
*&      Form  DISPLAY_CLIENT_LIST
*&---------------------------------------------------------------------*
FORM display_client_list  USING pv_level TYPE sy-tabix.
  DATA:
    lv_report    TYPE syrepid,
    lt_fcat      TYPE slis_t_fieldcat_alv,
*    lt_excl_func TYPE  slis_t_extab,
    lt_exc       TYPE tt_ttip,
    lt_events    TYPE slis_t_event,
    ls_layo      TYPE slis_layout_alv,
    ls_prnt      TYPE slis_print_alv.
*-----------------------------------------------------------------------
  lv_report = sy-repid.
*  prepare list layout
  PERFORM alv_pri_set_fieldcatalog USING    gc_lst_client
                                   CHANGING lt_fcat.

  PERFORM alv_pri_set_events USING    pv_level
                             CHANGING lt_events.

  PERFORM alv_pri_set_layout USING    pv_level
                             CHANGING ls_layo.
**  PERFORM salv_pri_excl_func        USING lt_excl_func.
  PERFORM alv_pri_set_print  CHANGING ls_prnt.

  PERFORM alv_pri_tooltipp  CHANGING lt_exc.

* 3rd - create first list
  CALL FUNCTION 'REUSE_ALV_LIST_DISPLAY'
    EXPORTING
      i_callback_program       = lv_report
*     i_callback_pf_status_set = 'HANDLE_EVENT_PF_STATUS'
*     i_callback_user_command  = 'HANDLE_EVENT_USER_COMMAND'
      is_layout                = ls_layo
      it_fieldcat              = lt_fcat
*     it_excluding             = lt_excl_func
      it_events                = lt_events
      is_print                 = ls_prnt
      it_except_qinfo          = lt_exc
    TABLES
      t_outtab                 = gt_out0
    EXCEPTIONS
      OTHERS                   = 0.
ENDFORM.                    " DISPLAY_CLIENT_LIST


*&---------------------------------------------------------------------*
*&      Form  display_nspace_list
*&---------------------------------------------------------------------*
FORM display_nspace_list USING pv_level TYPE sy-tabix.
  DATA:
    lv_report    TYPE syrepid,
    lt_fcat      TYPE slis_t_fieldcat_alv,
*    lt_excl_func TYPE  slis_t_extab,
    lt_events    TYPE slis_t_event,
    ls_layo      TYPE slis_layout_alv,
    ls_prnt      TYPE slis_print_alv.
*-----------------------------------------------------------------------
  lv_report = sy-repid.

*  prepare list layout
  PERFORM alv_pri_set_fieldcatalog USING    gc_lst_nspace
                                   CHANGING lt_fcat.

  PERFORM alv_pri_set_events USING    pv_level
                             CHANGING lt_events.

  PERFORM alv_pri_set_layout USING    pv_level
                             CHANGING ls_layo.
**  PERFORM salv_pri_excl_func        USING lt_excl_func.
  PERFORM alv_pri_set_print  CHANGING ls_prnt.

* 3rd - create first list
  CALL FUNCTION 'REUSE_ALV_LIST_DISPLAY'
    EXPORTING
      i_callback_program       = lv_report
*      i_callback_pf_status_set = 'HANDLE_EVENT_PF_STATUS'
*      i_callback_user_command  = 'HANDLE_EVENT_USER_COMMAND'
      is_layout                = ls_layo
      it_fieldcat              = lt_fcat
      it_events                = lt_events
      is_print                 = ls_prnt
    TABLES
      t_outtab                 = gt_out1
    EXCEPTIONS
      OTHERS                   = 0.

ENDFORM.                    " display_nspace_list

*&---------------------------------------------------------------------*
*&      Form  display_sys_comp_list
*&---------------------------------------------------------------------*
FORM display_sys_comp_list USING pv_level TYPE sy-tabix .
  DATA:
    lv_report    TYPE syrepid,
    lt_fcat      TYPE slis_t_fieldcat_alv,
    lt_events    TYPE slis_t_event,
    ls_layo      TYPE slis_layout_alv,
    ls_prnt      TYPE slis_print_alv.
*-----------------------------------------------------------------------
  lv_report = sy-repid.

*  prepare list layout
  PERFORM alv_pri_set_fieldcatalog USING    gc_lst_scomp
                                   CHANGING lt_fcat.

  PERFORM alv_pri_set_events USING    pv_level
                             CHANGING lt_events.

  PERFORM alv_pri_set_layout USING    pv_level
                             CHANGING ls_layo.
**  PERFORM salv_pri_excl_func        USING lt_excl_func.
  PERFORM alv_pri_set_print  CHANGING ls_prnt.

* 3rd - create first list
  CALL FUNCTION 'REUSE_ALV_LIST_DISPLAY'
    EXPORTING
      i_callback_program       = lv_report
*      i_callback_pf_status_set = 'HANDLE_EVENT_PF_STATUS'
*      i_callback_user_command  = 'HANDLE_EVENT_USER_COMMAND'
      is_layout                = ls_layo
      it_fieldcat              = lt_fcat
*     it_excluding             = lt_excl_func
      it_events                = lt_events
      is_print                 = ls_prnt
    TABLES
      t_outtab                 = gt_out2
    EXCEPTIONS
      OTHERS                   = 0.
ENDFORM.                    " display_sys_comp_list

*&---------------------------------------------------------------------*
*&      Form  handle_event_pf_status
*&---------------------------------------------------------------------*
FORM handle_event_pf_status USING rt_extab TYPE slis_t_extab. "#EC *

*  set pf-status 'SALV_PRINT' excluding rt_extab.

ENDFORM.                    " handle_event_pf_status

*&---------------------------------------------------------------------*
*&      Form  ALV_PRI_SET_FIELDCATALOG
*&---------------------------------------------------------------------*
FORM alv_pri_set_fieldcatalog USING    pv_name TYPE tv_status_tx
                              CHANGING pt_fcat TYPE slis_t_fieldcat_alv.
  CASE pv_name.
    WHEN gc_lst_nspace.
      PERFORM alv_fieldcatalog_nspace CHANGING pt_fcat.

    WHEN gc_lst_scomp.
      PERFORM alv_fieldcatalog_scomp CHANGING pt_fcat.

    WHEN gc_lst_client.
      PERFORM alv_fieldcatalog_client CHANGING pt_fcat.

  ENDCASE.

  SORT pt_fcat BY col_pos.

ENDFORM.                    " ALV_PRI_SET_FIELDCATALOG


*&---------------------------------------------------------------------*
*&      Form  alv_pri_set_events
*&---------------------------------------------------------------------*
FORM alv_pri_set_events USING pv_key  TYPE sy-tabix
                     CHANGING pt_evts TYPE slis_t_event.
  DATA:
    ls_events TYPE slis_alv_event.
*----------------------------------------------------------------------

  CASE pv_key.
    WHEN 1 OR 0.
*     register list events for the 1st output list
      ls_events-name = 'END_OF_LIST'.
      ls_events-form = 'ALV_PRI_HANDLE_EVENT_EOL'.
      APPEND ls_events TO pt_evts.
      ls_events-name = 'TOP_OF_PAGE'.
      ls_events-form = 'ALV_PRI_HANDLE_EVENT_TOL1'.
      APPEND ls_events TO pt_evts.

    WHEN 2.
*     register list events for the 2nd output list
      ls_events-name = 'TOP_OF_LIST'.
      ls_events-form = 'ALV_PRI_HANDLE_EVENT_TOL2'.
      APPEND ls_events TO pt_evts.
      ls_events-name = 'TOP_OF_PAGE'.
      ls_events-form = 'ALV_PRI_HANDLE_EVENT_TOL2'.
      APPEND ls_events TO pt_evts.

    WHEN 3.
*     register list events for the 3nd output list
      ls_events-name = 'TOP_OF_LIST'.
      ls_events-form = 'ALV_PRI_HANDLE_EVENT_TOL3'.
      APPEND ls_events TO pt_evts.
      ls_events-name = 'TOP_OF_PAGE'.
      ls_events-form = 'ALV_PRI_HANDLE_EVENT_TOL3'.
      APPEND ls_events TO pt_evts.

  ENDCASE.

ENDFORM.                    " alv_pri_set_events

*&---------------------------------------------------------------------*
*&      Form  alv_pri_set_layout
*&---------------------------------------------------------------------*
FORM alv_pri_set_layout USING pv_key  TYPE sy-tabix
                     CHANGING ps_layo TYPE slis_layout_alv.
*-----------------------------------------------------------------------
* dynamic title assignment to the result list
* define the list append mode per list component
  CASE pv_key.
    WHEN 1.
      IF p_mandt = abap_true AND p_system = abap_true.
        ps_layo-window_titlebar = gv_tx_t01.
      ELSEIF p_mandt = abap_true.
        ps_layo-window_titlebar = gv_tx_t02.
      ELSE.
        ps_layo-window_titlebar = gv_tx_t03.
      ENDIF.
      ps_layo-list_append  = 'Y'.

    WHEN OTHERS.
      ps_layo-list_append  = abap_true.

  ENDCASE.
* optimize column width for all columns
  ps_layo-colwidth_optimize = abap_true.

ENDFORM.                    " alv_pri_set_layout

*&---------------------------------------------------------------------*
*&      Form  salv_pri_set_print
*&---------------------------------------------------------------------*
FORM alv_pri_set_print CHANGING ps_prnt TYPE slis_print_alv.
* define print attributes for the whole output
*  cs_prnt-print                  = abap_true.
  ps_prnt-prnt_title             = abap_true.
  ps_prnt-footline               = abap_true.
  ps_prnt-prnt_info              = abap_true.
  ps_prnt-no_change_print_params = abap_true.
  ps_prnt-no_print_listinfos     = abap_true.
  ps_prnt-no_print_selinfos      = abap_true.
  ps_prnt-reserve_lines          = 1 .

ENDFORM.                    " set_print


*&---------------------------------------------------------------------*
*&      Form  alv_pri_handle_event_eol
*&---------------------------------------------------------------------*
FORM alv_pri_handle_event_eol.                              "#EC CALLED
  FIELD-SYMBOLS:
    <fs_lst> TYPE ts_lst_crtl.
*-----------------------------------------------------------------------
  LOOP AT gt_lst_cnt ASSIGNING <fs_lst>.
    IF <fs_lst>-cnt = 1.
      CONTINUE.
    ENDIF.
    PERFORM alv_display_list_level USING gt_lst_cnt <fs_lst>-cnt.
  ENDLOOP.

ENDFORM.                    "alv_pri_handle_event_eol

*&---------------------------------------------------------------------*
*&      Form  alv_pri_handle_event_tol1
*&---------------------------------------------------------------------*
FORM alv_pri_handle_event_tol1 .                            "#EC CALLED

  PERFORM alv_create_list_header USING 1.

ENDFORM.                    "  alv_pri_handle_event_tol1

*&---------------------------------------------------------------------*
*&      Form  alv_pri_handle_event_tol2
*&---------------------------------------------------------------------*
FORM alv_pri_handle_event_tol2 .                            "#EC CALLED

  PERFORM alv_create_list_header USING 2.

ENDFORM.                    "  alv_pri_handle_event_tol2

*&---------------------------------------------------------------------*
*&      Form  alv_pri_handle_event_tol3
*&---------------------------------------------------------------------*
FORM alv_pri_handle_event_tol3 .                            "#EC CALLED

  PERFORM alv_create_list_header USING 3.

ENDFORM.                    "  alv_pri_handle_event_tol2

*&---------------------------------------------------------------------*
*&      Form  ALV_CREATE_LIST_HEADER
*&---------------------------------------------------------------------*
FORM alv_create_list_header  USING pv_level TYPE sy-tabix.
  STATICS:
    lr_grid    TYPE REF TO cl_salv_form_layout_grid.
  DATA:
    lv_tx      TYPE string,
    lv_row     TYPE sy-tabix,
    lr_content TYPE REF TO cl_salv_form_element.
  FIELD-SYMBOLS:
    <fs_list> TYPE ts_lst_crtl.
*-----------------------------------------------------------------------
* we do not need the header if we have no list for that list level
  READ TABLE gt_lst_cnt ASSIGNING <fs_list> INDEX pv_level.
  IF sy-subrc <> 0.
    RETURN.
  ENDIF.

* on the 1st call we have also to publish the global report header
  IF lr_grid IS INITIAL.
    CREATE OBJECT lr_grid.
    PERFORM get_global_header CHANGING lr_grid lv_row.
  ELSE.
    CLEAR lr_grid.
    CREATE OBJECT lr_grid.
    lv_row = 1.
  ENDIF.

* define the list specific header
  CASE <fs_list>-name.
    WHEN gc_lst_client.
      lv_tx = 'Client list'(t10).                        "#EC TEXT_DIFF
      lr_grid->create_label( row = lv_row
                             column = 1
                             text = lv_tx ).
    WHEN gc_lst_nspace.
      lv_tx = 'System change options - name spaces'(t20). "#EC TEXT_DIFF
      lr_grid->create_label( row = lv_row
                             column = 1
                             text = lv_tx ).
    WHEN gc_lst_scomp.
      lv_tx =
          'System change options - component list'(t30). "#EC TEXT_DIFF
      lr_grid->create_label( row = lv_row
                             column = 1
                             text = lv_tx ).
  ENDCASE.

  lr_content = lr_grid.
  cl_salv_form_content=>set( lr_content ).

ENDFORM.                    " ALV_CREATE_LIST_HEADER

*&---------------------------------------------------------------------*
*&      Form  GET_GLOBAL_HEADER
*&---------------------------------------------------------------------*
FORM get_global_header  CHANGING
                            pt_grid TYPE REF TO cl_salv_form_layout_grid
                            pv_row  TYPE sy-tabix.

  DATA:
    lv_tx      TYPE string.
*-----------------------------------------------------------------------
  pv_row = 1.
  lv_tx = 'Report environment'(h01).                     "#EC TEXT_DIFF
  pt_grid->create_label( row = pv_row
                         column = 1
                         colspan = 3
                         text = lv_tx ).
  ADD 1 TO pv_row.
  lv_tx = 'System-Id:'(h02).                             "#EC TEXT_DIFF
  pt_grid->create_label( row = pv_row
                         column = 2
                         text = lv_tx ).
  pt_grid->create_label( row = pv_row
                         column = 3
                         text = sy-sysid ).
  ADD 1 TO pv_row.
  lv_tx = 'Client:'(h03).                                "#EC TEXT_DIFF
  pt_grid->create_label( row = pv_row
                         column = 2
                         text = lv_tx ).
  pt_grid->create_label( row = pv_row
                         column = 3
                         text = sy-mandt ).
  ADD 1 TO pv_row.
  lv_tx = 'User:'(h04).                                  "#EC TEXT_DIFF
  pt_grid->create_label( row = pv_row
                         column = 2
                         text = lv_tx ).
  pt_grid->create_label( row = pv_row
                         column = 3
                         text = sy-uname ).

  ADD 1 TO pv_row.
  lv_tx = 'Date:'(h05).                                  "#EC TEXT_DIFF
  pt_grid->create_label( row = pv_row
                         column = 2
                         text = lv_tx ).
  pt_grid->create_label( row = pv_row
                         column = 3
                         text = sy-datum ).

  ADD 1 TO pv_row.
  lv_tx = 'Time:'(h06).                                  "#EC TEXT_DIFF
  pt_grid->create_label( row = pv_row
                         column = 2
                         text = lv_tx ).
  pt_grid->create_label( row = pv_row
                         column = 3
                         text = sy-uzeit ).


  IF p_system = abap_true.
    ADD 1 TO pv_row.
    lv_tx = 'System environment'(h10).                   "#EC TEXT_DIFF
    pt_grid->create_label( row = pv_row
                           column = 1
                           colspan = 3
                           text = lv_tx ).


    ADD 1 TO pv_row.
    lv_tx = 'System global setting:'(h11).               "#EC TEXT_DIFF
    pt_grid->create_label( row = pv_row
                           column = 2
                           text = lv_tx ).
    IF gs_crtl-global_chg = gc_changeable.
      lv_tx = gv_tx_c01.
    ELSE.
      lv_tx = gv_tx_c03.
    ENDIF.
    pt_grid->create_label( row = pv_row
                           column = 3
                           text = lv_tx ).
  ENDIF.
  ADD 1 TO pv_row.
  lv_tx = space.
  pt_grid->create_label( row = pv_row
                           column = 2
                           text = lv_tx ).
  ADD 1 TO pv_row.
  lv_tx = space.
  pt_grid->create_label( row = pv_row
                           column = 2
                           text = lv_tx ).
  ADD 1 TO pv_row.
ENDFORM.                    " GET_GLOBAL_HEADER

*&---------------------------------------------------------------------*
*&      Form  ALV_FIELDCATALOG_NSPACE
*&---------------------------------------------------------------------*
* prepare the field catalog for the namespace output list
*----------------------------------------------------------------------*
FORM alv_fieldcatalog_nspace CHANGING pt_fcat TYPE slis_t_fieldcat_alv.
  CONSTANTS:
    lc_tab2 TYPE tv_c1 VALUE '2',
    lc_ref_tab1 TYPE tabname VALUE 'TRNSPACE',
    lc_ref_tab2 TYPE tabname VALUE 'TRNSPACETT',
    lc_ref_tab3 TYPE tabname VALUE 'TRNSPACET'.
  DATA:
   ls_fcat TYPE slis_fieldcat_alv.
*-----------------------------------------------------------------------
  CLEAR pt_fcat.
* 1st - prepare the main columns

* -> key field namespace
  PERFORM alv_get_column_descr USING lc_ref_tab1  'NAMESPACE'
                            CHANGING ls_fcat.
  ls_fcat-tabname   = lc_tab2.
  ls_fcat-col_pos   = 1.
  ls_fcat-key       = abap_true.
  APPEND ls_fcat TO pt_fcat. CLEAR ls_fcat.
* -> namespace description field
  PERFORM alv_get_column_descr USING lc_ref_tab2  'DESCRIPTN'
                            CHANGING ls_fcat.
  ls_fcat-tabname   = lc_tab2.
  ls_fcat-col_pos   = 2.
  APPEND ls_fcat TO pt_fcat. CLEAR ls_fcat.
* -> owner of the namespace
  PERFORM alv_get_column_descr USING lc_ref_tab2  'OWNER'
                            CHANGING ls_fcat.
  ls_fcat-tabname   = lc_tab2.
  ls_fcat-col_pos   = 3.
  APPEND ls_fcat TO pt_fcat. CLEAR ls_fcat.
* -> additional prefix column
  ls_fcat-col_pos = 4.
  ls_fcat-fieldname = 'PREFIX'.
  ls_fcat-seltext_m = 'Prefix'(cn4).                     "#EC TEXT_DIFF
  ls_fcat-datatype  = 'CHAR'.
  ls_fcat-inttype   = 'C'.
  ls_fcat-intlen    = 10.
  APPEND ls_fcat TO pt_fcat.

  IF p_supp IS INITIAL.  "normal auditor mode
*   get main attributes form EDITFLAG and take it for EXT_TEXT
    PERFORM alv_get_column_descr USING lc_ref_tab1  'EDITFLAG'
                              CHANGING ls_fcat.
    ls_fcat-tabname   = lc_tab2.
    ls_fcat-col_pos   = 5.
    ls_fcat-fieldname = 'EXT_TEXT'.
    ls_fcat-intlen    = 20.
    APPEND ls_fcat TO pt_fcat.
*   -> last changed by
    PERFORM alv_get_column_descr USING lc_ref_tab3  'CHANGEUSER'
                              CHANGING ls_fcat.
    ls_fcat-tabname   = lc_tab2.
    ls_fcat-col_pos   = 6.
    APPEND ls_fcat TO pt_fcat.
*   -> last changed on
    PERFORM alv_get_column_descr USING lc_ref_tab3  'CHANGEDATE'
                              CHANGING ls_fcat.
    ls_fcat-tabname   = lc_tab2.
    ls_fcat-col_pos   = 7.
    APPEND ls_fcat TO pt_fcat.

  ELSE.                  "extended technical view
*    -> owner of the namespace
    PERFORM alv_get_column_descr USING lc_ref_tab1  'ROLE'
                              CHANGING ls_fcat.
    ls_fcat-tabname   = lc_tab2.
    ls_fcat-col_pos   = 5.
    ls_fcat-fieldname = 'ROLE_TX'.
    ls_fcat-intlen    = 20.
    APPEND ls_fcat TO pt_fcat.
*   -> get main attributes form EDITFLAG and take it for EXT_TEXT
    ls_fcat-tabname   = lc_tab2.
    ls_fcat-col_pos   = 6.
    ls_fcat-fieldname = 'EXT_TEXT'.
    ls_fcat-seltext_m = 'Change option'(cn5).            "#EC TEXT_DIFF
    ls_fcat-seltext_l = 'Change option status'(cn6).     "#EC TEXT_DIFF
    ls_fcat-datatype  = 'CHAR'.
    ls_fcat-inttype   = 'C'.
    ls_fcat-intlen    = 20.
    APPEND ls_fcat TO pt_fcat.
*   -> status of license validation
    ls_fcat-tabname   = lc_tab2.
    ls_fcat-col_pos   = 7.
    ls_fcat-fieldname = 'LICENSE_TX'.
    ls_fcat-seltext_m = 'License'(cna).                  "#EC TEXT_DIFF
    ls_fcat-seltext_l = 'License status'(cnb).           "#EC TEXT_DIFF
    ls_fcat-datatype  = 'CHAR'.
    ls_fcat-inttype   = 'C'.
    ls_fcat-intlen    = 20.
    APPEND ls_fcat TO pt_fcat.

*   -> flag for SSCR relevance
    PERFORM alv_get_column_descr USING lc_ref_tab1  'SSCRFLAG'
                              CHANGING ls_fcat.
    ls_fcat-tabname   = lc_tab2.
    ls_fcat-col_pos   = 8.
    ls_fcat-just      = 'C'.
    APPEND ls_fcat TO pt_fcat.
*   -> flag if the namespace is part of the SAP standard
    PERFORM alv_get_column_descr USING lc_ref_tab1  'SAPFLAG'
                              CHANGING ls_fcat.
    ls_fcat-tabname   = lc_tab2.
    ls_fcat-col_pos   = 9.
    ls_fcat-just      = 'C'.
    APPEND ls_fcat TO pt_fcat.
*   -> falg if the namespace will be used only for generated objects
    PERFORM alv_get_column_descr USING lc_ref_tab1  'GEN_ONLY'
                              CHANGING ls_fcat.
    ls_fcat-tabname   = lc_tab2.
    ls_fcat-col_pos   = 10.
    ls_fcat-just      = 'C'.
    APPEND ls_fcat TO pt_fcat.
*   -> last changed by
    PERFORM alv_get_column_descr USING lc_ref_tab3  'CHANGEUSER'
                               CHANGING ls_fcat.
    ls_fcat-tabname   = lc_tab2.
    ls_fcat-col_pos   = 11.
    APPEND ls_fcat TO pt_fcat. CLEAR ls_fcat.
*   -> last changed on
    PERFORM alv_get_column_descr USING lc_ref_tab3  'CHANGEDATE'
                               CHANGING ls_fcat.
    ls_fcat-tabname   = lc_tab2.
    ls_fcat-col_pos   = 12.
    APPEND ls_fcat TO pt_fcat. CLEAR ls_fcat.
  ENDIF.

ENDFORM.                    " ALV_FIELDCATALOG_NSPACE

*&---------------------------------------------------------------------*
*&      Form  ALV_GET_COLUMN_DESCR
*&---------------------------------------------------------------------*
* read column attributes for list output from a reference
* dictionary field and transfer it to the field catalog
*----------------------------------------------------------------------*
FORM alv_get_column_descr  USING pv_table TYPE tabname
                                 pv_field TYPE ddobjname
                        CHANGING ps_fcat TYPE slis_fieldcat_alv.
  DATA:
    lt_dfies TYPE STANDARD TABLE OF dfies.
  FIELD-SYMBOLS:
    <fs_dfies> TYPE dfies.
*-----------------------------------------------------------------------
  CLEAR ps_fcat.

  CALL FUNCTION 'DDIF_FIELDINFO_GET'
    EXPORTING
      tabname        = pv_table
      fieldname      = pv_field
      langu          = sy-langu
      all_types      = abap_true
    TABLES
      dfies_tab      = lt_dfies
    EXCEPTIONS
      not_found      = 1
      internal_error = 2
      OTHERS         = 3.
  IF sy-subrc <> 0.
    "nothing found - should not happen
    ps_fcat-fieldname = pv_field.
    ps_fcat-seltext_m = pv_field.
    RETURN.
  ENDIF.
* we should have exactly 1 record in lt_dfies
  READ TABLE lt_dfies ASSIGNING <fs_dfies> INDEX 1.
  IF sy-subrc = 0.
*   if information was found transfer it to the field catalog
    ps_fcat-fieldname = pv_field.
    ps_fcat-seltext_l = <fs_dfies>-scrtext_l.
    ps_fcat-seltext_m = <fs_dfies>-scrtext_m.
    ps_fcat-seltext_s = <fs_dfies>-scrtext_s.
    ps_fcat-datatype  = <fs_dfies>-datatype.
    ps_fcat-inttype   = <fs_dfies>-inttype.
    ps_fcat-intlen    = <fs_dfies>-outputlen.
  ENDIF.
ENDFORM.                    " ALV_GET_COLUMN_TEXTS

*&---------------------------------------------------------------------*
*&      Form  ALV_FIELDCATALOG_SCOMP
*&---------------------------------------------------------------------*
* prepare the field catalog for the software component output list
*----------------------------------------------------------------------*
FORM alv_fieldcatalog_scomp CHANGING pt_fcat TYPE slis_t_fieldcat_alv.
  DATA:
    ls_fcat TYPE slis_fieldcat_alv.
  FIELD-SYMBOLS:
    <fs_fcat> TYPE slis_fieldcat_alv.
*-----------------------------------------------------------------------
* 1st - load the catalog for the refering database table TRDLVUNIT
  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = gc_lst_stru2
    CHANGING
      ct_fieldcat            = pt_fcat
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

* 2nd - set the ALV specific attributes
  IF sy-subrc IS INITIAL.
    LOOP AT pt_fcat ASSIGNING <fs_fcat>.
*     deactivate flag columns
      CASE <fs_fcat>-fieldname.
        WHEN 'DLVUNIT'.
          <fs_fcat>-key  = abap_true.
        WHEN 'CHANGEABLE'.
          <fs_fcat>-tech = abap_true.
        WHEN 'EXTENDABLE'.
          <fs_fcat>-tech = abap_true.
      ENDCASE.
    ENDLOOP.
*   append text column for component change status
    ls_fcat-col_pos = 5.
    ls_fcat-fieldname = 'EXT_TEXT'.
    ls_fcat-seltext_m = 'Change option'(cn5).            "#EC TEXT_DIFF
    ls_fcat-seltext_l = 'Change option status'(cn6).     "#EC TEXT_DIFF
    ls_fcat-datatype  = 'CHAR'.
    ls_fcat-inttype   = 'C'.
    ls_fcat-intlen    = 20.
    APPEND ls_fcat TO pt_fcat.
  ENDIF.

ENDFORM.                    " ALV_FIELDCATALOG_SCOMP

*&---------------------------------------------------------------------*
*&      Form  ALV_FIELDCATALOG_CLIENT
*&---------------------------------------------------------------------*
FORM alv_fieldcatalog_client CHANGING pt_fcat TYPE slis_t_fieldcat_alv.

  DATA:
    lv_pos  TYPE sy-tabix,
    ls_fcat TYPE slis_fieldcat_alv.
  FIELD-SYMBOLS:
    <fs_fcat> TYPE slis_fieldcat_alv.
*-----------------------------------------------------------------------
* 1st - load table structure T000 to the LAV field catalog
  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = gc_lst_stru0
    CHANGING
      ct_fieldcat      = pt_fcat
    EXCEPTIONS
      OTHERS           = 0.

  lv_pos = 6.
  LOOP AT pt_fcat ASSIGNING <fs_fcat>.
    CASE <fs_fcat>-fieldname.
      WHEN 'MANDT'.
*       client field must be visible here
        <fs_fcat>-tech = abap_false.
      WHEN 'MTEXT' OR 'ADRNR'.
*       that technical fields are not needed in the list
        <fs_fcat>-key = abap_true.

      WHEN 'LOGSYS'.
        <fs_fcat>-col_pos = 6.

      WHEN 'CCCATEGORY'.
*       TX_CATEGORY inherits the attributes from CCCATEGORY
*       make the technical column CCCATEGORY invisible
        ls_fcat = <fs_fcat>.
        ADD 1 TO lv_pos.
        <fs_fcat>-col_pos = lv_pos.
        <fs_fcat>-no_out  = abap_true.

        ADD 1 TO lv_pos.
        ls_fcat-col_pos   = lv_pos.
        ls_fcat-fieldname = 'TX_CATEGORY'.
        ls_fcat-intlen    = gc_tx_len.
        APPEND ls_fcat TO pt_fcat.

      WHEN 'CCCORACTIV'.
*       TX_CORACTIV inherits the attributes from CCCORACTIV
*       make the technical column CCCORACTIV invisible
        ls_fcat = <fs_fcat>.
        ADD 1 TO lv_pos.
        <fs_fcat>-col_pos = lv_pos.
        <fs_fcat>-no_out  = abap_true.

        ADD 1 TO lv_pos.
        ls_fcat-col_pos   = lv_pos.
        ls_fcat-fieldname = 'TX_CORACTIV'.
        ls_fcat-intlen    = gc_tx_len.
        APPEND ls_fcat TO pt_fcat.

      WHEN 'CCNOCLIIND'.
*       TX_NOCLIIND inherits the attributes from CCNOCLIIND
*       make the technical column CCNOCLIIND invisible
        ls_fcat = <fs_fcat>.
        ADD 1 TO lv_pos.
        <fs_fcat>-col_pos = lv_pos.
        <fs_fcat>-no_out  = abap_true.

        ADD 1 TO lv_pos.
        ls_fcat-col_pos   = lv_pos.
        ls_fcat-fieldname = 'TX_NOCLIIND'.
        ls_fcat-intlen    = gc_tx_len.
        APPEND ls_fcat TO pt_fcat.

      WHEN 'CCCOPYLOCK'.
*       TX_COPYLOCK inherits the attributes from CCCOPYLOCK
*       make the technical column CCCOPYLOCK invisible
        ls_fcat = <fs_fcat>.
        ADD 1 TO lv_pos.
        <fs_fcat>-col_pos = lv_pos.
        <fs_fcat>-no_out  = abap_true.

        ADD 1 TO lv_pos.
        ls_fcat-col_pos   = lv_pos.
        ls_fcat-fieldname = 'TX_COPYLOCK'.
        ls_fcat-intlen    = gc_tx_len.
        APPEND ls_fcat TO pt_fcat.

      WHEN 'CCSOFTLOCK'.
*       TI_SOFTLOCK inherits the attributes from CCSOFTLOCK
*       make the technical column CCSOFTLOCK invisible
        ls_fcat = <fs_fcat>.
        ADD 1 TO lv_pos.
        <fs_fcat>-tech    = abap_true.
        <fs_fcat>-col_pos = lv_pos.
        <fs_fcat>-no_out  = abap_true.

        ADD 1 TO lv_pos.
        ls_fcat-col_pos   = lv_pos.
        ls_fcat-tech    = abap_true.
        ls_fcat-fieldname = 'TI_SOFTLOCK'.
        ls_fcat-intlen    = gc_tx_len.
        APPEND ls_fcat TO pt_fcat.

      WHEN 'CCORIGCONT'.
*       TI_ORIGCONT inherits the attributes from CCORIGCONT
*       make the technical column CCORIGCONT invisible
        ls_fcat = <fs_fcat>.
        ADD 1 TO lv_pos.
        <fs_fcat>-col_pos = lv_pos.
        <fs_fcat>-no_out  = abap_true.

        ADD 1 TO lv_pos.
        ls_fcat-col_pos   = lv_pos.
        ls_fcat-fieldname = 'TI_ORIGCONT'.
        ls_fcat-icon      = abap_true.
        ls_fcat-intlen    = gc_icon_len.
        APPEND ls_fcat TO pt_fcat.

      WHEN 'CCIMAILDIS'.
*       TX_IMAILDIS inherits the attributes from CCIMAILDIS
*       make the technical column CCIMAILDIS invisible
        ls_fcat = <fs_fcat>.
        ADD 1 TO lv_pos.
        <fs_fcat>-col_pos = lv_pos.
        <fs_fcat>-no_out  = abap_true.

        ADD 1 TO lv_pos.
        ls_fcat-col_pos   = 15.
        ls_fcat-fieldname = 'TX_IMAILDIS'.
        ls_fcat-intlen    = gc_tx_len.
        APPEND ls_fcat TO pt_fcat.

      WHEN 'CCNOCASCAD'.
*       TI_NOCASCAD inherits the attributes from CCNOCASCAD
*       make the technical column CCNOCASCAD invisible
        ls_fcat = <fs_fcat>.
        ADD 1 TO lv_pos.
        <fs_fcat>-col_pos = lv_pos.
        <fs_fcat>-no_out  = abap_true.

        ADD 1 TO lv_pos.
        ls_fcat-col_pos   = lv_pos.
        ls_fcat-fieldname = 'TI_NOCASCAD'.
        ls_fcat-icon      = abap_true.
        ls_fcat-intlen    = gc_icon_len.
        APPEND ls_fcat TO pt_fcat.

      WHEN 'CCTEMPLOCK'.
*       TI_TEMPLOCK inherits the attributes from CCTEMPLOCK
*       make the technical column CCTEMPLOCK invisible
        ls_fcat = <fs_fcat>.
        ADD 1 TO lv_pos.
        <fs_fcat>-col_pos = lv_pos.
        <fs_fcat>-no_out  = abap_true.

        ADD 1 TO lv_pos.
        ls_fcat-col_pos   = lv_pos.
        ls_fcat-fieldname = 'TI_TEMPLOCK'.
        ls_fcat-icon      = abap_true.
        ls_fcat-intlen    = gc_icon_len.
        APPEND ls_fcat TO pt_fcat.

      WHEN 'CHANGEUSER' OR 'CHANGEDATE' .
        ADD 1 TO lv_pos.
        <fs_fcat>-col_pos = lv_pos.

    ENDCASE.
  ENDLOOP.

ENDFORM.                    " ALV_FIELDCATALOG_CLIENT

*&---------------------------------------------------------------------*
*&      Form  ALV_PRI_TOOLTIPP
*&---------------------------------------------------------------------*
FORM alv_pri_tooltipp  CHANGING pt_ttip TYPE tt_ttip.
  DATA:
    ls_ttip TYPE ts_ttip.
*-----------------------------------------------------------------------
* define tooltip for icons in the result list
  ls_ttip-type  = cl_salv_tooltip=>c_type_icon.
* tooltip for client lock status regarding client copy
  ls_ttip-fieldname = 'TI_TEMPLOCK'.
  ls_ttip-value = gc_icon_lock.
  ls_ttip-text  = 'Locked due to client copy'(tt1).      "#EC TEXT_DIFF
  APPEND ls_ttip TO pt_ttip.
  ls_ttip-value = gc_icon_unlock.
  ls_ttip-text  = 'No client copy lock'(tt2).            "#EC TEXT_DIFF
  APPEND ls_ttip TO pt_ttip.
* tooltip for client protection during upgrade (cascading)
*  ls_ttip-type  = cl_salv_tooltip=>c_type_icon.
  ls_ttip-fieldname = 'TI_NOCASCAD'.
  ls_ttip-value = gc_icon_marked.
  ls_ttip-text  = 'Protection against SAP-Upgrade'(tt3). "#EC TEXT_DIFF
  APPEND ls_ttip TO pt_ttip.
  ls_ttip-value = gc_icon_umarked .
 ls_ttip-text = 'No protection against SAP-Upgrade'(tt4). "#EC TEXT_DIFF
  APPEND ls_ttip TO pt_ttip.
* tooltip for BC-Set switch status
*  ls_ttip-type  = cl_salv_tooltip=>c_type_icon.
  ls_ttip-fieldname = 'TI_ORIGCONT'.
  ls_ttip-value = gc_icon_active.
  ls_ttip-text  = 'Create Switch BC-Sets active'(tt5).   "#EC TEXT_DIFF
  APPEND ls_ttip TO pt_ttip.
  ls_ttip-value = gc_icon_inactive .
  ls_ttip-text  = 'Create Switch BC-Sets inactive'(tt6). "#EC TEXT_DIFF
  APPEND ls_ttip TO pt_ttip.

ENDFORM.                    " ALV_PRI_TOOLTIPP
