*----------------------------------------------------------------------*
***INCLUDE YSE_RU_FI_INVOICE_F02.
*----------------------------------------------------------------------*

FORM user_command_FOR USING r_ucomm LIKE sy-ucomm
                         rs_selfield TYPE slis_selfield.

  DATA: lv_answer TYPE char1,
        lv_value_field TYPE zvalue_field.
  DATA: ld_subrc TYPE sy-subrc.
  DATA: bdcdata_wa  TYPE bdcdata,
      bdcdata_tab TYPE TABLE OF bdcdata.
  DATA: LS_OPTIONS      TYPE CTU_PARAMS.
  DATA: rate(14) TYPE C,
        lv_date_c(8)  TYPE c,
        lv_date_c2(8)  TYPE c,
        lv_ukurs TYPE tcurr-ukurs.
  DATA: gt_bsid_belnr TYPE bsid-belnr,
       gt_bsid_xref2 TYPE bsid-xref2,
       gt_bsid_dmbtr TYPE BSID-DMBTR,
       gt_bsid_gjahr TYPE BSID-GJAHR.


  DATA: lv_date_bkpf TYPE bkpf-bldat.




  CASE r_ucomm.
    WHEN 'RATE' or 'RATE1'.

*   Begin of MOD-001

      clear lv_form.
      if r_ucomm eq 'RATE'.
        LV_FORM = 'YSE_J_3RVINVOICE_FI_NEW'.
      ELSEIF  r_ucomm eq 'RATE1'.
        LV_FORM = 'YSE_J_3RVINVOICE_FI'.
      ENDIF.

      EXPORT LV_FORM TO MEMORY ID 'YSE_FIFORM'.
*      End of MOD-001


      PERFORM confirm_step_popup CHANGING ld_subrc.
      CHECK ld_subrc EQ 0.
      PERFORM check_object_tab_marked_f14 USING r_ucomm
                                               rs_selfield.

      LS_OPTIONS-NOBIEND = 'X'.
      LS_OPTIONS-DISMODE = 'E'.
      LS_OPTIONS-UPDMODE = 'S'.

      CLEAR bdcdata_wa.
      bdcdata_wa-program  = 'YSE_RU_FI_INVOICE_rate'.
      bdcdata_wa-dynpro   = '9001'.
      bdcdata_wa-dynbegin = 'X'.
      APPEND bdcdata_wa TO bdcdata_tab.

      IF P_OPN = 'X'.
        LOOP AT gt_bsid WHERE selected = g_x AND flag EQ space.
          if gt_bsid-xref2 = ' '.
            MESSAGE e001(00) WITH  gt_bsid-belnr text-A01 .
          endif.
        ENDLOOP.
      ELSE.
        LOOP AT gt_bsad WHERE selected = g_x AND flag EQ space.
          if gt_bsad-xref2 = ' '.
            MESSAGE e001(00) WITH  gt_bsad-belnr text-A01 .
          endif.
        ENDLOOP.
      ENDIF.

      EXPORT s_budat TO MEMORY ID 'YSE_RU_FI_INV_budat'.
      CALL TRANSACTION 'YSE_RU_FI_INV_RATE' using bdcdata_tab OPTIONS  FROM LS_OPTIONS.
      IMPORT rate FROM MEMORY ID 'YSE_RATE'.
      IMPORT gv_ucomm FROM MEMORY ID 'YSE_UCOMM'.
      CHECK gv_ucomm EQ 'INV_PRINT'.
      IF P_OPN = 'X'.
        LOOP AT gt_bsid WHERE selected = g_x AND flag EQ space.
          if rate is initial.
            clear lv_date_c.
            clear lv_date_bkpf.
            select single BLDAT into lv_date_bkpf from bkpf
* begin of change MOD-004
              where BELNR = gt_bsid-BELNR and BUKRS = 'XRAA'.
*              where BELNR = gt_bsid-BELNR and BUKRS = 'MRUA'.
* end of change MOD-004

            CONVERT INVERTED-DATE lv_date_bkpf into date lv_date_c .
            SELECT single ukurs  FROM tcurr INTO lv_ukurs
            where kurst = 'DRU' and TCURR = 'RUB' and FCURR = gt_bsid-waerk
                         and gdatu = lv_date_c.
            rate = lv_ukurs.

            if lv_ukurs is initial.
              clear lv_date_c2.
              SELECT min( gdatu )  FROM tcurr INTO lv_date_c2 "#EC CI_BYPASS
              where kurst = 'DRU' and TCURR = 'RUB' and FCURR = gt_bsid-waerk
                         and gdatu > lv_date_c.
              SELECT single ukurs  FROM tcurr INTO lv_ukurs
              where kurst = 'DRU' and TCURR = 'RUB' and FCURR = gt_bsid-waerk
                         and gdatu = lv_date_c2.

              rate = lv_ukurs.
            endif.
          endif.
          if rate is initial or rate = '      0.00000'.
            CALL FUNCTION 'POPUP_TO_DISPLAY_TEXT'
                EXPORTING
                   TEXTLINE1    = text-009
*                    TEXTLINE2    =
                   START_COLUMN = 25
                   START_ROW    = 6.
          endif.
          gt_bsid_xref2 = gt_bsid-xref2.
          gt_bsid_belnr = gt_bsid-belnr.
          gt_bsid_dmbtr = gt_bsid-dmbtr.
          gt_bsid_gjahr = gt_bsid-gjahr.
          EXPORT gt_bsid_xref2  gt_bsid_gjahr gt_bsid_belnr rate gt_bsid_dmbtr TO MEMORY ID 'YSE_RU_FI_INV_BSID'.
          perform ENTRY(YSE_J_3RV_INV_A_FI).
        ENDLOOP.

        READ TABLE gt_bsid INDEX rs_selfield-tabindex.
        IF sy-subrc = 0.
          gt_bsid-selected = gc_charx.
          MODIFY gt_bsid INDEX rs_selfield-tabindex.
        ENDIF.
      ELSE.
        LOOP AT gt_bsad WHERE selected = g_x AND flag EQ space.
          if rate is initial.
            clear lv_date_c.
            clear lv_date_bkpf.
            select single BLDAT into lv_date_bkpf from bkpf
* begin of change MOD-004
              where BELNR = gt_bsad-BELNR and BUKRS = 'XRAA'.
*              where BELNR = gt_bsad-BELNR and BUKRS = 'MRUA'.
* end of change MOD-004

            CONVERT INVERTED-DATE lv_date_bkpf into date lv_date_c .
            SELECT single ukurs  FROM tcurr INTO lv_ukurs
            where kurst = 'DRU' and TCURR = 'RUB' and FCURR = gt_bsad-waerk
                         and gdatu = lv_date_c.
            rate = lv_ukurs.

            if lv_ukurs is initial.
              clear lv_date_c2.
              SELECT min( gdatu )  FROM tcurr INTO lv_date_c2 "#EC CI_BYPASS
              where kurst = 'DRU' and TCURR = 'RUB' and FCURR = gt_bsad-waerk
                         and gdatu > lv_date_c.
              SELECT single ukurs  FROM tcurr INTO lv_ukurs
              where kurst = 'DRU' and TCURR = 'RUB' and FCURR = gt_bsad-waerk
                         and gdatu = lv_date_c2.

              rate = lv_ukurs.
            endif.
          endif.
          if rate is initial or rate = '      0.00000'.
            CALL FUNCTION 'POPUP_TO_DISPLAY_TEXT'
                EXPORTING
                   TEXTLINE1    = text-009
*                    TEXTLINE2    =
                   START_COLUMN = 25
                   START_ROW    = 6.
          endif.
          gt_bsid_xref2 = gt_bsad-xref2.
          gt_bsid_belnr = gt_bsad-belnr.
          gt_bsid_dmbtr = gt_bsad-dmbtr.
          gt_bsid_gjahr = gt_bsad-gjahr.
          EXPORT gt_bsid_xref2 gt_bsid_gjahr gt_bsid_belnr rate gt_bsid_dmbtr TO MEMORY ID 'YSE_RU_FI_INV_BSID'.
          perform ENTRY(YSE_J_3RV_INV_A_FI).
        ENDLOOP.

        READ TABLE gt_bsad INDEX rs_selfield-tabindex.
        IF sy-subrc = 0.
          gt_bsad-selected = gc_charx.
          MODIFY gt_bsad INDEX rs_selfield-tabindex.
        ENDIF.

      ENDIF. " BSAD

      FREE MEMORY ID 'YSE_FIFORM'. "MOD-001

    WHEN 'SALO'.

      PERFORM check_object_tab_marked_f14 USING r_ucomm
                                                  rs_selfield.
      IF P_OPN = 'X'.
        LOOP AT gt_bsid WHERE selected = g_x.
          if gt_bsid-xref2 is initial.
            PERFORM confirm_step_popup2 CHANGING ld_subrc.
            CHECK ld_subrc EQ 0.
          else.
            SET PARAMETER ID 'AUN' FIELD  gt_bsid-xref2.
            CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.
          endif.
        ENDLOOP.
      ELSE.
        LOOP AT gt_bsad WHERE selected = g_x.
          if gt_bsad-xref2 is initial.
            PERFORM confirm_step_popup2 CHANGING ld_subrc.
            CHECK ld_subrc EQ 0.
          else.
            SET PARAMETER ID 'AUN' FIELD  gt_bsad-xref2.
            CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.
          endif.
        ENDLOOP.

      ENDIF.

    WHEN 'LOG'.
      PERFORM display_log.
  ENDCASE.

ENDFORM.                    " user_command_equi


*&---------------------------------------------------------------------*
*&      Form  confirm_step_popup
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->LD_SUBRC   text
*----------------------------------------------------------------------*
FORM confirm_step_popup  USING ld_subrc TYPE sy-subrc.
*.. Local variables
  DATA: ld_answer.
  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = text-t01
      text_question         = text-t02
      text_button_1         = space
      icon_button_1         = 'ICON_OKAY'
      text_button_2         = space
      icon_button_2         = 'ICON_CANCEL'
      default_button        = '2'
      display_cancel_button = space
    IMPORTING
      answer                = ld_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.
  IF ld_answer EQ '2'.
    ld_subrc = 4.
  ELSE.
    ld_subrc = 0.
  ENDIF.
ENDFORM.                    "confirm_step_popup

*&---------------------------------------------------------------------*
*&      Form  confirm_step_popup2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->LD_SUBRC   text
*----------------------------------------------------------------------*
FORM confirm_step_popup2  USING ld_subrc TYPE sy-subrc.
*.. Local variables
  DATA: ld_answer.
  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = text-t03
      text_question         = text-t04
      text_button_1         = space
      icon_button_1         = 'ICON_OKAY'
      text_button_2         = space
      icon_button_2         = 'ICON_CANCEL'
      default_button        = '2'
      display_cancel_button = space
    IMPORTING
      answer                = ld_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.
  IF ld_answer EQ '2'.
    ld_subrc = 4.
  ELSE.
    ld_subrc = 0.
  ENDIF.
ENDFORM.                    "confirm_step_popup2

*&---------------------------------------------------------------------*
*&      Form  check_object_tab_marked_f14
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_UCOMM    text
*      -->P_SELFIELD text
*----------------------------------------------------------------------*
FORM check_object_tab_marked_f14 USING p_ucomm    LIKE sy-ucomm
                                       p_selfield TYPE slis_selfield.

  if P_OPN = 'X'.
    READ TABLE gt_bsid WITH KEY selected = g_x.
    IF NOT sy-subrc IS INITIAL.
      IF NOT p_selfield-tabindex IS INITIAL.
        READ TABLE gt_bsid INDEX p_selfield-tabindex.
        gt_bsid-selected = g_x.
        MODIFY gt_bsid INDEX p_selfield-tabindex.
      ENDIF.
    ELSE.
*--- Checkbox markiert -----------------------------------------------*
      p_selfield-sel_tab_field = 'G_MARK'.
    ENDIF.
  else.
    READ TABLE gt_bsad WITH KEY selected = g_x.
    IF NOT sy-subrc IS INITIAL.
      IF NOT p_selfield-tabindex IS INITIAL.
        READ TABLE gt_bsad INDEX p_selfield-tabindex.
        gt_bsad-selected = g_x.
        MODIFY gt_bsad INDEX p_selfield-tabindex.
      ENDIF.
    ELSE.
*--- Checkbox markiert -----------------------------------------------*
      p_selfield-sel_tab_field = 'G_MARK'.
    ENDIF.
  endif.
ENDFORM.                    "check_object_tab_marked_f14


*&---------------------------------------------------------------------*
*&      Form  pf_status_set_FOR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->RT_EXTAB   text
*----------------------------------------------------------------------*
FORM pf_status_set_FOR USING rt_extab TYPE slis_t_extab.

  SET PF-STATUS 'YSE_VAT_INV_RU'.

ENDFORM.                    "pf_status_set_FOR

*eject
*&---------------------------------------------------------------------*
*&      Form  top_of_page_bsid
*&---------------------------------------------------------------------*
*       Top of page callback routine for ALV
*----------------------------------------------------------------------*
FORM top_of_page_bsid.

*.. Local variables
  DATA: lt_comment TYPE slis_t_listheader,
        ls_comment TYPE slis_listheader.

*.. Header
  ls_comment-typ  = 'H'.
  ls_comment-info = text-h00.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

*.. Selection
  ls_comment-typ  = 'S'.
  ls_comment-key  = text-h01.
  if P_RUB = 'X'.
    ls_comment-info = 'RUB'.
  else.
    ls_comment-info = 'Foreign'.
  endif.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-h02.
  CONCATENATE s_budat-low s_budat-high INTO ls_comment-info SEPARATED BY
 space.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      it_list_commentary       = lt_comment
*     I_LOGO                   =
*     I_END_OF_LIST_GRID       =
            .

ENDFORM.                    " top_of_page_equi

*&---------------------------------------------------------------------*
*&      Form  user_command_inst
*&---------------------------------------------------------------------*
*       text: User Command callback routine for ALV
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_rub USING r_ucomm LIKE sy-ucomm
                        rs_selfield TYPE slis_selfield.
  DATA: lv_answer TYPE char1,
         lv_value_field TYPE zvalue_field.
  DATA: ld_subrc TYPE sy-subrc.
  DATA: rate(14) TYPE C.
  DATA: gt_bsid_belnr TYPE bsid-belnr,
        gt_bsid_xref2 TYPE bsid-xref2,
        gt_bsid_dmbtr TYPE BSID-DMBTR,
        gt_bsid_gjahr TYPE BSID-GJAHR.



  CASE r_ucomm.

    WHEN 'PRINT_INV' OR 'PRINT_INV1'.

*      *   Begin of MOD-001
      clear lv_form.
      if r_ucomm eq 'PRINT_INV'.
        LV_FORM = 'YSE_J_3RVINVOICE_FI_NEW'.
      ELSEIF  r_ucomm eq 'PRINT_INV1'.
        LV_FORM = 'YSE_J_3RVINVOICE_FI'.
      ENDIF.

      EXPORT LV_FORM TO MEMORY ID 'YSE_FIFORM'.
*      End of MOD-001
      PERFORM confirm_step_popup CHANGING ld_subrc.
      CHECK ld_subrc EQ 0.
      PERFORM check_object_tab_marked_f14 USING r_ucomm
                                               rs_selfield.
      rate = '1'.

      IF P_OPN = 'X'.
        LOOP AT gt_bsid WHERE selected = g_x AND flag EQ space.
          if gt_bsid-xref2 = ' '.
            MESSAGE e001(00) WITH  gt_bsid-belnr text-A01 .
          endif.
        ENDLOOP.

        LOOP AT gt_bsid WHERE selected = g_x AND flag EQ space.
          clear: gt_bsid_belnr, gt_bsid_xref2.
          gt_bsid_xref2 =  gt_bsid-xref2.
          gt_bsid_belnr = gt_bsid-belnr.
          gt_bsid_dmbtr = gt_bsid-dmbtr.
          gt_bsid_gjahr = gt_bsid-gjahr.
          EXPORT gt_bsid_xref2 gt_bsid_gjahr gt_bsid_belnr rate gt_bsid_dmbtr TO MEMORY ID 'YSE_RU_FI_INV_BSID'.
          perform ENTRY(YSE_J_3RV_INV_A_FI).
        ENDLOOP.

        READ TABLE gt_bsid INDEX rs_selfield-tabindex.
        IF sy-subrc = 0.
          gt_bsid-selected = gc_charx.
          MODIFY gt_bsid INDEX rs_selfield-tabindex.
        ENDIF.


      ELSE.
        LOOP AT gt_bsad WHERE selected = g_x AND flag EQ space.
          if gt_bsad-xref2 = ' '.
            MESSAGE e001(00) WITH  gt_bsad-belnr text-A01 .
          endif.
        ENDLOOP.

        LOOP AT gt_bsad WHERE selected = g_x AND flag EQ space.
          clear: gt_bsid_belnr, gt_bsid_xref2.
          gt_bsid_xref2 =  gt_bsad-xref2.
          gt_bsid_belnr = gt_bsad-belnr.
          gt_bsid_dmbtr = gt_bsad-dmbtr.
          gt_bsid_gjahr = gt_bsad-gjahr.
          EXPORT gt_bsid_xref2 gt_bsid_gjahr gt_bsid_belnr rate gt_bsid_dmbtr TO MEMORY ID 'YSE_RU_FI_INV_BSID'.
          perform ENTRY(YSE_J_3RV_INV_A_FI).
        ENDLOOP.
        READ TABLE gt_bsad INDEX rs_selfield-tabindex.
        IF sy-subrc = 0.
          gt_bsad-selected = gc_charx.
          MODIFY gt_bsad INDEX rs_selfield-tabindex.
        ENDIF.
      ENDIF.

      FREE MEMORY ID 'YSE_FIFORM'. "MOD-001

    WHEN 'SALO'.

      PERFORM check_object_tab_marked_f14 USING r_ucomm
                                                  rs_selfield.
      IF P_OPN = 'X'.
        LOOP AT gt_bsid WHERE selected = g_x.
          if gt_bsid-xref2 is initial.
            PERFORM confirm_step_popup CHANGING ld_subrc.
            CHECK ld_subrc EQ 0.
          else.
            SET PARAMETER ID 'AUN' FIELD  gt_bsid-xref2.
            CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.
          endif.
        ENDLOOP.
      ELSE.
        LOOP AT gt_bsad WHERE selected = g_x.
          if gt_bsad-xref2 is initial.
            PERFORM confirm_step_popup CHANGING ld_subrc.
            CHECK ld_subrc EQ 0.
          else.
            SET PARAMETER ID 'AUN' FIELD  gt_bsad-xref2.
            CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.
          endif.
        ENDLOOP.
      ENDIF.

    WHEN 'LOG'.
      PERFORM display_log.
  ENDCASE.

ENDFORM.                    " user_command_inst


*&---------------------------------------------------------------------*
*&      Form  pf_status_set_RUB
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->RT_EXTAB   text
*----------------------------------------------------------------------*
FORM PF_STATUS_SET_RUB USING RT_EXTAB TYPE SLIS_T_EXTAB.

  SET PF-STATUS 'YSE_VAT_INV_RU2'.

ENDFORM.                    "pf_status_set_RUB

*&---------------------------------------------------------------------*
*&      Form  end_of_list
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM end_of_list .

*.. Output message to indicate log entries exist
  IF gv_log EQ gc_charx.
    MESSAGE s124.
  ENDIF.

ENDFORM.                    " end_of_list
*&---------------------------------------------------------------------*
*&      Form  OUTPUT_LIST_BSID_BSAD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM OUTPUT_LIST_BSID_BSAD .

*.. Local variables
  DATA: ls_layout TYPE slis_layout_alv,
        ls_grid   TYPE lvc_s_glay,
        ls_events TYPE slis_alv_event.

  DATA: lt_events TYPE slis_t_event,
        lt_event_exits TYPE slis_t_event_exit,
        lt_fieldcat TYPE slis_t_fieldcat_alv.

*.. Fill events
  REFRESH lt_events.

  ls_events-name = 'TOP_OF_PAGE'.
  ls_events-form = 'TOP_OF_PAGE_BSID_BSAD'.
  APPEND ls_events TO lt_events.
  ls_events-form = ls_events-name = 'END_OF_LIST'.
  APPEND ls_events TO lt_events.
  ls_events-name = 'USER_COMMAND'.
  ls_events-form = 'USER_COMMAND_RUB'.
  APPEND ls_events TO lt_events.
  ls_events-name = 'PF_STATUS_SET'.
  ls_events-form = 'PF_STATUS_SET_RUB'.
  APPEND ls_events TO lt_events.
*.. Define layout
  CLEAR ls_layout.
  ls_layout-box_fieldname        = 'SELECTED'.  "field for checkbox
  ls_layout-get_selinfos         = g_x. "show selection screen
  ls_layout-detail_popup         = g_x. "show detail via popup
  ls_layout-detail_initial_lines = g_x. "all fields in detail
  ls_layout-zebra                = g_x. "striped pattern
  ls_layout-info_fieldname       = 'COLOR'.

*.. Define grid settings
* ls_grid-coll_end_l = gc_charx.

*.. Prepare field catalog
  DATA : ls_fcat TYPE slis_fieldcat_alv,
         ls_sort TYPE slis_sortinfo_alv.
**---------------------------downpayment Doc----------------------------*
  ls_fcat-fieldname = 'ZUONR'.
  ls_fcat-seltext_l = 'Downpayment Doc'.
  ls_fcat-col_pos  = 3.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '20'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Quotation Doc----------------------------*
  ls_fcat-fieldname = 'XBLNR'.
  ls_fcat-seltext_l = 'Quotation Doc'.
  ls_fcat-col_pos  = 4.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '20'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------Total Amount of Doc----------------------------*
  ls_fcat-fieldname = 'DMBTR'.
  ls_fcat-seltext_l = 'Total Amount of Doc'.
  ls_fcat-col_pos  = 5.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '30'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.

**---------------------------printed----------------------------*
  ls_fcat-fieldname = 'PRINTED'.
  ls_fcat-seltext_l = ls_fcat-seltext_m = ls_fcat-seltext_s = 'Printed'.
  ls_fcat-col_pos  = 7.
  ls_fcat-inttype = 'N'.
  ls_fcat-outputlen = '3'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat.
**---------------------------message-------------------------------*
  ls_fcat-fieldname = 'MSG'.
  ls_fcat-seltext_l = ls_fcat-seltext_m = ls_fcat-seltext_s = 'Message'.
  ls_fcat-col_pos  = 8.
  ls_fcat-inttype = 'C'.
  ls_fcat-outputlen = '25'.
  ls_sort-spos = 1.
  ls_sort-fieldname = ls_fcat-fieldname.
  ls_sort-up = 'X'.
  APPEND ls_sort TO gt_sort.
*  ls_fcat-seltext_l = 'Document No'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR: ls_fcat,
         ls_sort.

  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'YSE_INV_RU'
      i_client_never_display = 'X'
    CHANGING
      ct_fieldcat            = lt_fieldcat
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*.. Call ALV grid output
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program = 'YSE_RU_FI_INVOICE_XRAA'
      i_structure_name   = 'YSE_INV_RU'
*      i_grid_settings    = ls_grid
      is_layout          = ls_layout
      i_save             = 'A'
      it_fieldcat        = lt_fieldcat
      it_events          = lt_events
      it_sort            = gt_sort
    TABLES
      t_outtab           = gt_bsid
    EXCEPTIONS
      program_error      = 1
      OTHERS             = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
ENDFORM.                    " OUTPUT_LIST_BSID_BSAD


*eject
*&---------------------------------------------------------------------*
*&      Form  top_of_page_bsid
*&---------------------------------------------------------------------*
*       Top of page callback routine for ALV
*----------------------------------------------------------------------*
FORM top_of_page_bsid_bsad.

*.. Local variables
  DATA: lt_comment TYPE slis_t_listheader,
        ls_comment TYPE slis_listheader.

*.. Header
  ls_comment-typ  = 'H'.
  ls_comment-info = text-h00.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

*.. Selection
  ls_comment-typ  = 'S'.
  ls_comment-key  = text-h01.
  ls_comment-info = 'RUB & Foreign'.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-h02.
  CONCATENATE s_budat-low s_budat-high INTO ls_comment-info SEPARATED BY
 space.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      it_list_commentary       = lt_comment
*     I_LOGO                   =
*     I_END_OF_LIST_GRID       =
            .

ENDFORM.                    " top_of_page_equi
