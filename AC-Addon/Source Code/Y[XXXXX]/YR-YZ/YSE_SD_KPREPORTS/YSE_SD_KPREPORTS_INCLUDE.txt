*----------------------------------------------------------------------*
***INCLUDE YSE_SD_KPREPORTS_INCLUDE .
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  select_gen_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM select_gen_data .

  SELECT *
  FROM yse_em_plant
  INTO TABLE i_plants
  WHERE werks IN s_werks.

ENDFORM.                    " select_gen_data




*&---------------------------------------------------------------------*
*&      Form  select_salesorders
*&---------------------------------------------------------------------*
*       Select all relevant Sales orders
*----------------------------------------------------------------------*

FORM select_salesorders .

* For the KP1 reports select sales orders with relevant requested delivery date

  IF r_kp1 EQ 'X'.
* For the KP1 reports select sales orders with relevant requested delivery date
* and with relevant doc type & sales org parameters

* Select first schedule lines
    SELECT vbeln posnr etenr wmeng bmeng edatu
    FROM vbep
    INTO TABLE i_vbep
    WHERE etenr = '1'
    AND edatu IN s_edatu.

    DESCRIBE TABLE i_vbep LINES sy-tfill.
    IF sy-tfill NE 0.

      SELECT vbeln auart vkorg vtweg
      INTO TABLE i_vbak
      FROM vbak
      FOR ALL ENTRIES IN i_vbep
      WHERE vbeln EQ i_vbep-vbeln
        AND auart IN s_auart
        AND vkorg IN s_vkorg
        AND vtweg IN s_vtweg.

* Delete vbep lines for order that are not in i_vbak
      DESCRIBE TABLE i_vbak LINES sy-tfill.
      IF sy-tfill NE 0.
        SORT: i_vbak, i_vbep.
        LOOP AT i_vbep.
          CLEAR i_vbak.
          READ TABLE i_vbak WITH KEY vbeln = i_vbep-vbeln
                                     BINARY SEARCH.
          IF sy-subrc NE 0.
            DELETE i_vbep.
          ENDIF.
        ENDLOOP.



* Select relevant sales order items
        SELECT a~vbeln a~posnr a~matnr a~werks a~kwmeng b~matkl b~prdha
        INTO TABLE i_vbap
        FROM vbap AS a
        INNER JOIN mara AS b
        ON a~matnr = b~matnr
        FOR ALL ENTRIES IN i_vbep
        WHERE a~vbeln EQ i_vbep-vbeln
        AND a~posnr EQ i_vbep-posnr
        AND a~werks IN s_werks
        AND b~mtart IN s_mtart
        AND b~matkl IN s_matkl.

        DESCRIBE TABLE i_vbap LINES sy-tfill.
        IF sy-tfill NE 0.

* Select relevant sales order status
          SELECT vbeln cmgst
          FROM vbuk
          INTO TABLE i_vbuk
          FOR ALL ENTRIES IN i_vbap
          WHERE vbeln = i_vbap-vbeln.

* Select relevant order line status
          SELECT vbeln posnr lfgsa fssta lssta
          FROM vbup
          INTO TABLE i_vbup
          FOR ALL ENTRIES IN i_vbap
          WHERE vbeln = i_vbap-vbeln
          AND posnr = i_vbap-posnr.

* Select standard cost
          SELECT matnr bwkey stprs
          FROM mbew
          INTO TABLE i_mbew
          FOR ALL ENTRIES IN i_vbap
          WHERE matnr = i_vbap-matnr
          AND bwkey = i_vbap-werks.

          PERFORM get_issues_for_sales_order.


        ENDIF.

      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    " select_salesorders

*&---------------------------------------------------------------------*
*&      Form  select_serviceorders
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*

FORM select_serviceorders .


* select all relevant reservations
  SELECT a~rsnum a~rspos a~rsart a~matnr a~werks a~bdter a~bdmng a~aufnr b~matkl b~prdha
  INTO TABLE i_resb
  FROM resb AS a
  INNER JOIN mara AS b
  ON a~matnr = b~matnr
  WHERE a~matnr IN r_matnr
  AND a~werks IN s_werks
  AND a~xloek EQ ' '
  AND a~kzear IN r_kzear
  AND a~bdter IN s_edatu
  AND a~bwart EQ '261'
  AND a~postp EQ 'L'
  AND a~xwaok EQ 'X'
  AND a~vorab_sm EQ ' '
  AND b~mtart IN s_mtart
  AND b~matkl IN s_matkl.

  DESCRIBE TABLE i_resb LINES sy-tfill.
  IF sy-tfill NE 0.
    SORT i_resb BY aufnr.

* select all relevant service orders

    SELECT a~aufnr a~auart a~kdauf a~kdpos a~bemot b~vkorg b~vtweg
    INTO TABLE i_aufk
     FROM aufk AS a INNER JOIN pmsdo AS b
     ON a~objnr = b~objnr
     FOR ALL ENTRIES IN i_resb
     WHERE a~aufnr EQ i_resb-aufnr
     AND a~auart IN s_auart2
     AND a~bemot IN s_bemot
     AND b~vkorg IN s_vkorg
     AND b~vtweg IN s_vtweg.

* select relevant material documents
    SELECT *
    FROM mseg
    INTO TABLE i_mseg
    FOR ALL ENTRIES IN i_resb
    WHERE rsnum EQ i_resb-rsnum.


  ENDIF.

ENDFORM.                    " select_serviceorders

*&---------------------------------------------------------------------*
*&      Form  process_sales_orders
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM process_sales_orders .

  SORT: i_vbak, i_vbap, i_vbep, i_vbup, i_mbew.

  LOOP AT i_vbap.
    CLEAR: i_output.
    MOVE-CORRESPONDING i_vbap TO i_output.
* PGC Code
    i_output-pgc = i_vbap-prdha+4(3).
    CLEAR i_vbak.
    READ TABLE i_vbak WITH KEY vbeln = i_vbap-vbeln
                               BINARY SEARCH.
    IF sy-subrc EQ 0.
      MOVE-CORRESPONDING i_vbak TO i_output.
    ENDIF.

* Warehouse Type
    CLEAR i_plants.
    READ TABLE i_plants WITH KEY werks = i_vbap-werks.
    IF sy-subrc EQ 0.
      i_output-whtype = i_plants-whtype.
    ENDIF.

* Available at requested date
    CLEAR: i_vbep.
    i_output-avreq = '0'.
    READ TABLE i_vbep WITH KEY vbeln = i_vbap-vbeln
                               posnr = i_vbap-posnr
                               BINARY SEARCH.
    IF sy-subrc EQ 0.
      i_output-edatu = i_vbep-edatu.
      IF i_vbep-wmeng EQ i_vbep-bmeng.
        i_output-avreq = '1'.
      ENDIF.
* Fully delivered at requested date
      i_output-fdreq = '0'.
      CLEAR: lv_issueqty.
*--- get issued qty's before requested date
      LOOP AT i_issues WHERE vbelv = i_vbap-vbeln
                         AND posnv = i_vbap-posnr.
        IF i_issues-erdat LE i_vbep-edatu.
          lv_issueqty = lv_issueqty + i_issues-rfmng.
        ENDIF.
      ENDLOOP.
*--- if issued qty GE requested qty => fully delivered
      IF lv_issueqty GE i_vbap-kwmeng.
        i_output-fdreq = '1'.
      ENDIF.
    ENDIF.


* Completely delivered
* Delivery block
    CLEAR: i_vbup.
    i_output-cdel = '0'.
    READ TABLE i_vbup WITH KEY vbeln = i_vbap-vbeln
                               posnr = i_vbap-posnr
                               BINARY SEARCH.
    IF sy-subrc EQ 0.
      IF i_vbup-lfgsa EQ 'C'.
        i_output-cdel = '1'.
      ENDIF.
      IF i_vbup-fssta EQ 'B' OR i_vbup-fssta EQ 'C'
      OR i_vbup-lssta EQ 'B' OR i_vbup-lssta EQ 'C'.
        i_output-block = '1'.
      ENDIF.
    ENDIF.

* Blocked
    CLEAR: i_vbuk.
    READ TABLE i_vbuk WITH KEY vbeln = i_vbap-vbeln
                               BINARY SEARCH.
    IF sy-subrc EQ 0.
      IF i_vbuk-cmgst EQ 'B' OR i_vbuk-cmgst EQ 'C'.
        i_output-block = '1'.
      ENDIF.
    ENDIF.


    CLEAR: i_mbew.
    READ TABLE i_mbew WITH KEY matnr = i_vbap-matnr
                               bwkey = i_vbap-werks
                               BINARY SEARCH.
    IF sy-subrc EQ 0.
      i_output-stprs = i_mbew-stprs.
    ENDIF.


    APPEND i_output.

  ENDLOOP.


ENDFORM.                    " process_sales_orders

*&---------------------------------------------------------------------*
*&      Form  process_service_orders
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM process_service_orders .

  SORT: i_mseg, i_aufk, i_resb.


  LOOP AT i_resb.
    CLEAR i_output.
* only append reservations related to relevant sales order
    CLEAR i_aufk.
    READ TABLE i_aufk WITH KEY aufnr = i_resb-aufnr
                               BINARY SEARCH.
    IF sy-subrc EQ 0.
      MOVE-CORRESPONDING i_resb TO i_output.
      MOVE-CORRESPONDING i_aufk TO i_output.
      i_output-vbeln = i_resb-rsnum.
      i_output-posnr = i_resb-rspos.
      i_output-kwmeng = i_resb-bdmng.

* PGC code
      i_output-pgc = i_resb-prdha+4(3).
      i_output-edatu = i_resb-bdter.
      CLEAR i_plants.
      READ TABLE i_plants WITH KEY werks = i_resb-werks.
      IF sy-subrc EQ 0.
        i_output-whtype = i_plants-whtype.
      ENDIF.

      PERFORM get_service_order_detail.

      CLEAR lt_resbd.
      READ TABLE lt_resbd WITH KEY rsnum = i_resb-rsnum
                                   rspos = i_resb-rspos.
      IF sy-subrc EQ 0.
* Compare committed qty with resb-bdmng
* to fill the variable avreq (available at requested date)
      ENDIF.



      APPEND i_output.
    ENDIF.
  ENDLOOP.
ENDFORM.                    " process_service_orders

*&---------------------------------------------------------------------*
*&      Form  get_issues_for_sales_order
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_issues_for_sales_order .

* get deliveries via document flow

  SELECT vbelv posnv vbeln posnn rfmng erdat
  FROM vbfa
  INTO TABLE i_issues
  FOR ALL ENTRIES IN i_vbap
  WHERE vbelv EQ i_vbap-vbeln
  AND posnv EQ i_vbap-posnr
  AND vbtyp_n EQ 'R'.


ENDFORM.                    " get_issues_for_sales_order


*&---------------------------------------------------------------------*
*&      Form  get_service_order_detail
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_service_order_detail .

  CLEAR: ls_caufvd.
  REFRESH: lt_resbd.

*.. Select the order header information
  CALL FUNCTION 'IBAPI_H_ORDER_READ'
    EXPORTING
      iv_aufnr               = i_resb-aufnr
*     IV_ENQUEUE_ORDER       = 'X'
    IMPORTING
*     EV_AUFPL               =
      es_caufvd              = ls_caufvd
*     ES_AFFLD               =
*     ES_PMSDO               =
*   EXCEPTIONS
*     ORDER_LOCKED           = 1
*     ORDER_READ_ERROR       = 2
*     OTHERS                 = 3
      .
*.. Read order components
  CALL FUNCTION 'IBAPI_C_COMPONENT_GETLIST'
    EXPORTING
*     IV_INIT_LOG              = CC_X
      is_caufvd                = ls_caufvd
*     IS_AFVGD                 =
    IMPORTING
*     ET_MESSAGES              =
      et_resbd                 = lt_resbd[]
    EXCEPTIONS
*     LOG_ERROR                = 1
      no_component_found       = 2
*     OTHERS                   = 3
            .





ENDFORM.                    " get_service_order_detail
