*&---------------------------------------------------------------------*
*&  Include           YSE_SDMM_MASS_CHG_GAC_PGC_FRM
*&---------------------------------------------------------------------*




*&---------------------------------------------------------------------*
*&      Form  CHECK_AUTHORIZATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CHECK_AUTHORIZATION .
* Display the progress to the user in the status bar.
  IF SY-BATCH <> C_X.
  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      PERCENTAGE = '25'
      TEXT       = 'Checking Authorizations'.
  ENDIF.
* Get all the plants into LT_WERKS based on the sales org. and dist channel in the selection screen.
  SELECT *
         FROM TVKWZ
               INTO TABLE LT_WERKS
               WHERE VKORG = P_VKORG
               AND   VTWEG IN S_VTWEG.


  IF SY-SUBRC = 0.
* Get everything from the plants/ Branches table to check if the user has authorization in that plant.
    SELECT *
           FROM T001W
           INTO TABLE LT_T001W
           FOR ALL ENTRIES IN LT_WERKS
           WHERE WERKS = LT_WERKS-WERKS.


* Check if the user has authorization in that plant or else display error.
    LOOP AT LT_T001W.
      AUTHORITY-CHECK OBJECT 'M_MATE_WRK'
               ID 'ACTVT' DUMMY
               ID 'WERKS' FIELD LT_T001W-WERKS.
      IF SY-SUBRC = 4.
*   No authorisation to display data from plant
        MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '010' WITH LT_T001W-WERKS.
        EXIT.
      ELSEIF SY-SUBRC <> 0.
*   Error checking authorization.
        MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '004'.
        EXIT.
      ENDIF.

* Move the plants to the table GT_PLANTS
CLEAR GT_PLANTS.
GT_PLANTS-WERKS = LT_T001W-WERKS.
APPEND GT_PLANTS.
    ENDLOOP.


  ELSE.
    MESSAGE 'Please enter valid Sales org. / Distribution Channel.' TYPE 'E'.

  ENDIF.


* Clear the temporary tables.
 CLEAR LT_T001W.
 FREE  LT_T001W.

 CLEAR LT_WERKS.
 FREE  LT_WERKS.


ENDFORM.                    " CHECK_AUTHORIZATION




*&---------------------------------------------------------------------*
*&      Form  UPLOAD_FILES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM UPLOAD_FILES .
* Display the progress to the user in the status bar.
 IF SY-BATCH <> C_X.
CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      PERCENTAGE = '25'
      TEXT       = 'Uploading GAC / PGC file'.
 ENDIF.

* Upload the GAC / PGC data from the excel file
  CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
     EXPORTING
* I_FIELD_SEPERATOR          =
* I_LINE_HEADER              =
       I_TAB_RAW_DATA             = I_TAB_RAW_DATA
       I_FILENAME                 = P_FILE1
     TABLES
       I_TAB_CONVERTED_DATA       = GT_UPLOAD_PRODH
   EXCEPTIONS
    CONVERSION_FAILED          = 1
    OTHERS                     = 2
             .
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
           WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.



* Display the progress to the user in the status bar.
 IF SY-BATCH <> C_X.
CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      PERCENTAGE = '25'
      TEXT       = 'Uploading profit centers file'.
 ENDIF.

* Upload the profit centers from the excel file
  CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
      EXPORTING
* I_FIELD_SEPERATOR          =
* I_LINE_HEADER              =
        I_TAB_RAW_DATA             = I_TAB_RAW_DATA
        I_FILENAME                 = P_FILE2
      TABLES
        I_TAB_CONVERTED_DATA       = GT_UPLOAD_PRCTR
    EXCEPTIONS
     CONVERSION_FAILED          = 1
     OTHERS                     = 2
              .
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
           WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.



* Check if the uploaded files have data in them.
  IF GT_UPLOAD_PRODH[] IS INITIAL AND GT_UPLOAD_PRCTR[] IS INITIAL.
     MESSAGE 'Target PH & PC is empty. Please upload the product hierarchies and profit center first.' TYPE 'E'.
ELSEIF GT_UPLOAD_PRODH[] IS INITIAL.
    MESSAGE 'Target Product Hierarchy is empty. Please upload the product hierarchies.' TYPE 'I'.
ELSEIF GT_UPLOAD_PRCTR[] IS INITIAL.
    MESSAGE 'Target Profit centers is empty. Please upload the profit centers.' TYPE 'I'.
  ENDIF.
ENDFORM.                    " UPLOAD_FILE






*&---------------------------------------------------------------------*
*&      Form  OPTIMIZE_FILES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM OPTIMIZE_FILES .
* Display the progress to the user in the status bar.
 IF SY-BATCH <> C_X.
CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      PERCENTAGE = '25'
      TEXT       = 'Optimizing the uploaded files'.
 ENDIF.

* Sort the product hierarchies and delete the duplicates from them.
SORT GT_UPLOAD_PRODH BY OLDGAC OLDPGC.
DELETE ADJACENT DUPLICATES FROM GT_UPLOAD_PRODH COMPARING OLDGAC OLDPGC.

* Move the corresponding GAC and PGC as product hierarchy.
LOOP AT GT_UPLOAD_PRODH.
    CLEAR GT_PRODUCT_HIER.
    GT_PRODUCT_HIER-OLDPRODH+0(4) = GT_UPLOAD_PRODH-OLDGAC.
    GT_PRODUCT_HIER-OLDPRODH+4(4) = GT_UPLOAD_PRODH-OLDPGC.

    GT_PRODUCT_HIER-NEWPRODH+0(4) = GT_UPLOAD_PRODH-NEWGAC.
    GT_PRODUCT_HIER-NEWPRODH+4(4) = GT_UPLOAD_PRODH-NEWPGC.

*   Only take those records which have different OLD and NEW product hierarchies.
    IF GT_PRODUCT_HIER-OLDPRODH  <> GT_PRODUCT_HIER-NEWPRODH.
      GT_PRODUCT_HIER-MANDT = SY-MANDT.
      APPEND GT_PRODUCT_HIER.
    ENDIF.
ENDLOOP.

* Sort the table based on old product hierarchy
SORT GT_PRODUCT_HIER BY OLDPRODH.

* Clear the contents of the database table and insert these new records
DELETE FROM YSE_PH_UPLOADS.
IF NOT GT_PRODUCT_HIER[] IS INITIAL.
  INSERT YSE_PH_UPLOADS FROM TABLE GT_PRODUCT_HIER.
  IF SY-SUBRC = 0.
    WRITE /: ' Data uploaded successfully into product hierarchy table'.
  ELSE.
    WRITE /: ' Data upload failed for product hierarchy table'.
  ENDIF.
ELSE.
  WRITE /: ' Data not uploaded for product hierarchy table'.
ENDIF.


* Sort the profit centers and delete the duplicates from them.
SORT GT_UPLOAD_PRCTR BY OLDPRCTR.
DELETE ADJACENT DUPLICATES FROM GT_UPLOAD_PRCTR COMPARING OLDPRCTR.


* Move the corresponding profit centers to new table.
LOOP AT GT_UPLOAD_PRCTR.
  CLEAR GT_PROFIT_CENTRS.

* Add leading zeros in case it is not..
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
  EXPORTING
    INPUT         =  GT_UPLOAD_PRCTR-OLDPRCTR
 IMPORTING
   OUTPUT        =   GT_PROFIT_CENTRS-OLDPRCTR.

* Add leading zeros in case it is not..
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
  EXPORTING
    INPUT         =  GT_UPLOAD_PRCTR-NEWPRCTR
 IMPORTING
   OUTPUT        =   GT_PROFIT_CENTRS-NEWPRCTR.


* Take those records which have different OLD and NEW Profit centers.
   IF GT_PROFIT_CENTRS-OLDPRCTR  <> GT_PROFIT_CENTRS-NEWPRCTR.
      GT_PROFIT_CENTRS-MANDT = SY-MANDT.
      APPEND GT_PROFIT_CENTRS.
    ENDIF.

ENDLOOP.

* Sort the table based on old profit centers
SORT GT_PROFIT_CENTRS BY OLDPRCTR.


* Clear the contents of the database table and insert these new records
DELETE FROM YSE_PC_UPLOADS.
IF NOT GT_PROFIT_CENTRS[] IS INITIAL.
  INSERT YSE_PC_UPLOADS FROM TABLE GT_PROFIT_CENTRS.
  IF SY-SUBRC = 0.
    WRITE /: ' Data uploaded successfully into profit center table.'.
  ELSE.
    WRITE /: ' Data upload failed for profit center table.'.
  ENDIF.
ELSE.
   WRITE /: ' Data not uploaded into profit center table.'.
ENDIF.
ENDFORM.                    " OPTIMIZE_FILES





*&---------------------------------------------------------------------*
*&      Form  CHECK_TABLES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CHECK_TABLES .
* Select the product hierarchy data into the internal table
SELECT * FROM  YSE_PH_UPLOADS INTO TABLE GT_PRODUCT_HIER.

* Select the profit center data into the internal table
SELECT * FROM  YSE_PC_UPLOADS INTO TABLE GT_PROFIT_CENTRS.

* Check the number of records in each of these tables
DESCRIBE TABLE GT_PRODUCT_HIER  LINES GV_PH_RECORDS.
DESCRIBE TABLE GT_PROFIT_CENTRS LINES GV_PC_RECORDS.

* If both product hierachy and profit center tables are empty, don't proceed further.
IF  GV_PH_RECORDS < 1 AND  GV_PC_RECORDS < 1.
  MESSAGE 'Please upload the product hierachy and profit center data from excel then run this report type. Select option one to upload from excel' TYPE 'E'.


* If only product hierachy data is present, check if user wants to continue
ELSEIF GV_PH_RECORDS < 1.
CALL FUNCTION 'POPUP_TO_CONFIRM'
  EXPORTING
   TITLEBAR                    = 'Are you sure?'
    TEXT_QUESTION               = 'No data in product hierarchy table. Do you really want to continue? '
   TEXT_BUTTON_1               = 'YES'
   ICON_BUTTON_1               = 'ICON_OKAY'
   TEXT_BUTTON_2               = 'NO'
   ICON_BUTTON_2               = 'ICON_CANCEL'
   DEFAULT_BUTTON              = '2'
   DISPLAY_CANCEL_BUTTON       = ''
 IMPORTING
   ANSWER                      =  GV_USER_ANS          .

    IF  GV_USER_ANS = '2'.
        LEAVE TO SCREEN '0'.
    ENDIF.

* If only profit center data is present, check if user wants to continue
ELSEIF GV_PC_RECORDS < 1.
 CALL FUNCTION 'POPUP_TO_CONFIRM'
  EXPORTING
   TITLEBAR                    = 'Are you sure?'
   TEXT_QUESTION               = 'No data in profit center table. Do you really want to continue? '
   TEXT_BUTTON_1               = 'YES'
   ICON_BUTTON_1               = 'ICON_OKAY'
   TEXT_BUTTON_2               = 'NO'
   ICON_BUTTON_2               = 'ICON_CANCEL'
   DEFAULT_BUTTON              = '2'
   DISPLAY_CANCEL_BUTTON       = ''
 IMPORTING
   ANSWER                      =  GV_USER_ANS          .

    IF  GV_USER_ANS = '2'.
       LEAVE TO SCREEN '0'.
    ENDIF.

ENDIF.
ENDFORM.                    " CHECK_TABLES







*&---------------------------------------------------------------------*
*&      Form  GET_PLANTVIEW
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_PLANTVIEW .

* Display the progress to the user in the status bar.
 IF SY-BATCH <> C_X.
CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      PERCENTAGE = '25'
      TEXT       = 'Getting all the materials for plant view.'.
 ENDIF.

IF NOT GT_PROFIT_CENTRS[] IS INITIAL.
* Get the list of all the materials in all the plants within our sales org.which have our profit centers.
LOOP AT GT_PLANTS.
    SELECT MATNR
           WERKS
           PRCTR
              FROM MARC
              APPENDING TABLE GT_PLANT_VIEW
              FOR ALL ENTRIES IN GT_PROFIT_CENTRS
              WHERE PRCTR = GT_PROFIT_CENTRS-OLDPRCTR
              AND   WERKS =  GT_PLANTS-WERKS.
ENDLOOP.
ENDIF.
ENDFORM.                    " PLANTVIEW


*&---------------------------------------------------------------------*
*&      Form  GET_BASICVIEW
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_BASICVIEW .
* Display the progress to the user in the status bar.
 IF SY-BATCH <> C_X.
CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      PERCENTAGE = '25'
      TEXT       = 'Getting all the materials for basic view.'.
 ENDIF.

IF NOT  GT_PRODUCT_HIER[] IS INITIAL.
* Get the list of all the materials which have our product hierarchies.
SELECT  MATNR
        PRDHA
          FROM MARA
          INTO TABLE GT_BASIC_VIEW
          FOR ALL ENTRIES IN GT_PRODUCT_HIER
          WHERE PRDHA = GT_PRODUCT_HIER-OLDPRODH.
ENDIF.

* In the above list of materials, check if they are present in our target plants
IF NOT GT_BASIC_VIEW[] IS INITIAL.
LOOP AT GT_PLANTS.
    SELECT MATNR
              FROM MARC
              APPENDING TABLE GT_MATERIALS
              FOR ALL ENTRIES IN GT_BASIC_VIEW
              WHERE MATNR =  GT_BASIC_VIEW-MATNR
              AND   WERKS =  GT_PLANTS-WERKS.
ENDLOOP.
ENDIF.

* Sort those materials and get the unique list of materials in our plants
SORT GT_MATERIALS.
DELETE ADJACENT DUPLICATES FROM GT_MATERIALS.

* From the list of materials, check if they are present in our target plants or else delete them
LOOP AT GT_BASIC_VIEW.
  GV_LINE_NUM = SY-TABIX.
  CLEAR GT_MATERIALS.
  READ TABLE GT_MATERIALS WITH KEY MATNR = GT_BASIC_VIEW-MATNR.
  IF SY-SUBRC <> 0.
    DELETE GT_BASIC_VIEW INDEX GV_LINE_NUM.
  ENDIF.
ENDLOOP.

ENDFORM.                    " BASICVIEW




*&---------------------------------------------------------------------*
*&      Form  GET_SALESVIEW
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_SALESVIEW .

* Display the progress to the user in the status bar.
 IF SY-BATCH <> C_X.
CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      PERCENTAGE = '25'
      TEXT       = 'Getting all the materials for sales view.'.
 ENDIF.

IF NOT  GT_PRODUCT_HIER[] IS INITIAL.
* Get the list of all the materials in the sales org. and dist. channel which have our product hierarchies.
SELECT  MATNR
        VKORG
        VTWEG
        PRODH
          FROM MVKE
          INTO TABLE GT_SALES_VIEW
          FOR ALL ENTRIES IN GT_PRODUCT_HIER
          WHERE PRODH = GT_PRODUCT_HIER-OLDPRODH
          AND   VKORG = P_VKORG
          AND   VTWEG IN S_VTWEG.
ENDIF.
ENDFORM.                    " SALESVIEW





*&---------------------------------------------------------------------*
*&      Form  UPDATE_BASICVIEW
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM UPDATE_BASICVIEW .

* Display the progress to the user in the status bar.
 IF SY-BATCH <> C_X.
CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      PERCENTAGE = '25'
      TEXT       = 'Updating the materials of the basic view.'.
 ENDIF.


* Lets update the material product hierarchies in Basic view using the BAPI
LOOP AT GT_BASIC_VIEW.
  CLEAR GT_PRODUCT_HIER.
  READ TABLE GT_PRODUCT_HIER WITH KEY OLDPRODH =  GT_BASIC_VIEW-PRDHA.
  IF SY-SUBRC = 0.

      WA_HEADDATA-MATERIAL     =  GT_BASIC_VIEW-MATNR.
      WA_HEADDATA-BASIC_VIEW   =  C_X.

      WA_CLIENTDATA-PROD_HIER  =  GT_PRODUCT_HIER-NEWPRODH.
      WA_CLIENTDATAX-PROD_HIER =  C_X.

      CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
        EXPORTING
          HEADDATA                  =   WA_HEADDATA
         CLIENTDATA                 =   WA_CLIENTDATA
         CLIENTDATAX                =   WA_CLIENTDATAX
       IMPORTING
         RETURN                     =   WA_RETURN                       .

*       Check if the update was successful.
      IF WA_RETURN-TYPE = 'S'.
           CLEAR GT_BASIC_SUCC.
           GT_BASIC_SUCC-MATNR    = GT_BASIC_VIEW-MATNR.
           GT_BASIC_SUCC-OLDPRDHA = GT_BASIC_VIEW-PRDHA.
           GT_BASIC_SUCC-NEWPRDHA = GT_PRODUCT_HIER-NEWPRODH.
           APPEND GT_BASIC_SUCC.

*        Lets save the record into the database.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
         EXPORTING
           WAIT          =  'X'         .
      ELSE.
           CLEAR GT_BASIC_FAIL.
           GT_BASIC_FAIL-MATNR      = GT_BASIC_VIEW-MATNR.
           GT_BASIC_FAIL-OLDPRDHA   = GT_BASIC_VIEW-PRDHA.
           GT_BASIC_FAIL-MESSAGE    = WA_RETURN-MESSAGE.
           APPEND GT_BASIC_FAIL.

      ENDIF.

  CLEAR : WA_HEADDATA,
          WA_CLIENTDATA,
          WA_CLIENTDATAX,
          WA_RETURN.
  ENDIF.
ENDLOOP.

ENDFORM.                    " UPDATE_BASICVIEW




*&---------------------------------------------------------------------*
*&      Form  UPDATE_PLANTVIEW
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM UPDATE_PLANTVIEW .

* Display the progress to the user in the status bar.
 IF SY-BATCH <> C_X.
CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      PERCENTAGE = '25'
      TEXT       = 'Updating the materials of the plant view.'.
 ENDIF.

* Lets update the material profit centers in the Plant view using the BAPI
LOOP AT GT_PLANT_VIEW.
  CLEAR GT_PROFIT_CENTRS.
  READ TABLE GT_PROFIT_CENTRS WITH KEY OLDPRCTR =  GT_PLANT_VIEW-PRCTR.
  IF SY-SUBRC = 0.

      WA_HEADDATA-MATERIAL     =  GT_PLANT_VIEW-MATNR.
      WA_HEADDATA-COST_VIEW    =  C_X.

      WA_PLANTDATA-PLANT       =  GT_PLANT_VIEW-WERKS.
      WA_PLANTDATA-PROFIT_CTR  =  GT_PROFIT_CENTRS-NEWPRCTR.

      WA_PLANTDATAX-PLANT      =  GT_PLANT_VIEW-WERKS.
      WA_PLANTDATAX-PROFIT_CTR =  C_X.



      CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
        EXPORTING
          HEADDATA                  =   WA_HEADDATA
          PLANTDATA                 =   WA_PLANTDATA
          PLANTDATAX                =   WA_PLANTDATAX

       IMPORTING
         RETURN                     =   WA_RETURN                       .

*       Check if the update was successful.
      IF WA_RETURN-TYPE = 'S'.
           CLEAR GT_PLANT_SUCC.
           GT_PLANT_SUCC-MATNR    = GT_PLANT_VIEW-MATNR.
           GT_PLANT_SUCC-WERKS    = GT_PLANT_VIEW-WERKS.
           GT_PLANT_SUCC-OLDPRCTR = GT_PLANT_VIEW-PRCTR.
           GT_PLANT_SUCC-NEWPRCTR = GT_PROFIT_CENTRS-NEWPRCTR.
           APPEND GT_PLANT_SUCC.

*        Lets save the record into the database.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
         EXPORTING
           WAIT          =  'X'         .
      ELSE.
           CLEAR GT_PLANT_FAIL.
           GT_PLANT_FAIL-MATNR      = GT_PLANT_VIEW-MATNR.
           GT_PLANT_FAIL-WERKS      = GT_PLANT_VIEW-WERKS.
           GT_PLANT_FAIL-OLDPRCTR   = GT_PLANT_VIEW-PRCTR.
           GT_PLANT_FAIL-MESSAGE    = WA_RETURN-MESSAGE.
        APPEND GT_PLANT_FAIL.
      ENDIF.


  CLEAR : WA_HEADDATA,
          WA_PLANTDATA,
          WA_PLANTDATAX,
          WA_RETURN.
  ENDIF.
ENDLOOP.



ENDFORM.                    " UPDATE_PLANTVIEW



*&---------------------------------------------------------------------*
*&      Form  UPDATE_SALESVIEW
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM UPDATE_SALESVIEW .

* Display the progress to the user in the status bar.
 IF SY-BATCH <> C_X.
CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      PERCENTAGE = '25'
      TEXT       = 'Updating the materials of the sales view.'.
 ENDIF.


* Lets update the material product hierarchies in Sales view using the BAPI
LOOP AT GT_SALES_VIEW.
  CLEAR GT_PRODUCT_HIER.
  READ TABLE GT_PRODUCT_HIER WITH KEY OLDPRODH =  GT_SALES_VIEW-PRODH.
  IF SY-SUBRC = 0.

      WA_HEADDATA-MATERIAL     =  GT_SALES_VIEW-MATNR.
      WA_HEADDATA-SALES_VIEW   =  C_X.

      WA_SALESDATA-SALES_ORG   =  GT_SALES_VIEW-VKORG.
      WA_SALESDATA-DISTR_CHAN  =  GT_SALES_VIEW-VTWEG.
      WA_SALESDATA-PROD_HIER   =  GT_PRODUCT_HIER-NEWPRODH.

      WA_SALESDATAX-SALES_ORG  =  GT_SALES_VIEW-VKORG.
      WA_SALESDATAX-DISTR_CHAN =  GT_SALES_VIEW-VTWEG.
      WA_SALESDATAX-PROD_HIER  =  C_X.


      CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
        EXPORTING
          HEADDATA              =   WA_HEADDATA
          SALESDATA             =   WA_SALESDATA
          SALESDATAX            =   WA_SALESDATAX
       IMPORTING
         RETURN                 =   WA_RETURN                       .

*       Check if the update was successful.
      IF WA_RETURN-TYPE = 'S'.
           CLEAR GT_SALES_SUCC.
           GT_SALES_SUCC-MATNR     = GT_SALES_VIEW-MATNR.
           GT_SALES_SUCC-VKORG     = GT_SALES_VIEW-VKORG.
           GT_SALES_SUCC-VTWEG     = GT_SALES_VIEW-VTWEG.
           GT_SALES_SUCC-OLDPRODH  = GT_SALES_VIEW-PRODH.
           GT_SALES_SUCC-NEWPRODH  = GT_PRODUCT_HIER-NEWPRODH.
           APPEND GT_SALES_SUCC.

*        Lets save the record into the database.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
         EXPORTING
           WAIT          =  'X'         .


      ELSE.
           CLEAR GT_SALES_FAIL.
           GT_SALES_FAIL-MATNR      = GT_SALES_VIEW-MATNR.
           GT_SALES_FAIL-VKORG      = GT_SALES_VIEW-VKORG.
           GT_SALES_FAIL-VKORG      = GT_SALES_VIEW-VKORG.
           GT_SALES_FAIL-VTWEG      = GT_SALES_VIEW-VTWEG.
           GT_SALES_FAIL-OLDPRODH   = GT_SALES_VIEW-PRODH.
           GT_SALES_FAIL-MESSAGE    = WA_RETURN-MESSAGE.
           APPEND GT_SALES_FAIL.
      ENDIF.


  CLEAR : WA_HEADDATA,
          WA_SALESDATA,
          WA_SALESDATAX,
          WA_RETURN.
  ENDIF.
ENDLOOP.

ENDFORM.                    " UPDATE_SALESVIEW



*&---------------------------------------------------------------------*
*&      Form  DISPLAY_STATUS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DISPLAY_STATUS .

* Display the progress to the user in the status bar.
 IF SY-BATCH <> C_X.
CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      PERCENTAGE = '25'
      TEXT       = 'Collecting the update status information.'.
 ENDIF.

* Lets start with the Basic view status
DESCRIBE TABLE GT_BASIC_VIEW  LINES GV_BASIC_TOTAL.
DESCRIBE TABLE GT_BASIC_SUCC  LINES GV_BASIC_SUCC.
DESCRIBE TABLE GT_BASIC_FAIL  LINES GV_BASIC_FAIL.


  WRITE : /'*********************************************************************************************************************************'.
  WRITE  /65 'BASIC VIEW'.
  WRITE : /'*********************************************************************************************************************************'.
   FORMAT COLOR COL_HEADING INTENSIFIED.
  WRITE  :/25  'Total Number of Materials to be updated         :  ',  GV_BASIC_TOTAL.
  FORMAT RESET.
*  WRITE : /'**********************************************************************'.

IF GV_BASIC_SUCC  > 0.
    SKIP 2.
    WRITE : /'**********************************************************************'.
    FORMAT COLOR COL_POSITIVE INTENSIFIED.
    WRITE : /'The Materials successfully updated are :  '  .
    SKIP 1.
    FORMAT RESET.
    LOOP AT GT_BASIC_SUCC.
     WRITE :/2 GT_BASIC_SUCC-MATNR, 22  'with product hierarchy  ', 46  GT_BASIC_SUCC-OLDPRDHA, 55 'to product hierarchy  ', 78 GT_BASIC_SUCC-NEWPRDHA.
    ENDLOOP.
    WRITE : /'**********************************************************************'.
ENDIF.

IF GV_BASIC_FAIL > 0.
    SKIP 2.
    WRITE : /'**********************************************************************'.
    FORMAT COLOR COL_GROUP INTENSIFIED.
    WRITE : /'The Materials not updated are :  '.
    SKIP 1.
    FORMAT RESET.
    LOOP AT GT_BASIC_FAIL.
      WRITE :/2 GT_BASIC_FAIL-MATNR, 22 'with product hierarchy  ', 46  GT_BASIC_FAIL-OLDPRDHA.
      WRITE /: GT_BASIC_FAIL-MESSAGE.
    ENDLOOP.
    WRITE : /'**********************************************************************'.
ENDIF.


IF GV_BASIC_SUCC > 0 OR GV_BASIC_FAIL > 0.
    SKIP 2.
    WRITE : /'**********************************************************************'.
    IF GV_BASIC_SUCC > 0.
      FORMAT COLOR COL_POSITIVE INTENSIFIED.
      WRITE :  /'Number of records updated successfully                 :  ',  GV_BASIC_SUCC.
      FORMAT RESET.
    ENDIF.
    IF GV_BASIC_FAIL > 0.
      FORMAT COLOR COL_NEGATIVE INTENSIFIED.
      WRITE : /'Total Number of records not updated                    :  ',  GV_BASIC_FAIL.
      FORMAT RESET.
    ENDIF.
    WRITE : /'**********************************************************************'.
  ENDIF.













* Lets update the Plant view status
DESCRIBE TABLE GT_PLANT_VIEW  LINES GV_PLANT_TOTAL.
DESCRIBE TABLE GT_PLANT_SUCC  LINES GV_PLANT_SUCC.
DESCRIBE TABLE GT_PLANT_FAIL  LINES GV_PLANT_FAIL.

  SKIP 5.
  WRITE : /'*********************************************************************************************************************************'.
  WRITE /65 'PLANT VIEW'.
  WRITE : /'*********************************************************************************************************************************'.
  FORMAT COLOR COL_HEADING INTENSIFIED.
  WRITE  :/25 'Total Number of Materials to be updated         :  ',   GV_PLANT_TOTAL.
  FORMAT RESET.
*  WRITE : /'**********************************************************************'.

IF GV_PLANT_SUCC  > 0.
    SKIP 2.
    WRITE : /'**********************************************************************'.
    FORMAT COLOR COL_POSITIVE INTENSIFIED.
    WRITE : /'The Materials successfully updated are :  '  .
    SKIP 1.
    FORMAT RESET.
    LOOP AT GT_PLANT_SUCC.
       WRITE :/2 GT_PLANT_SUCC-MATNR, 21  'in plant  ', 32 GT_PLANT_SUCC-WERKS, 37 'with profit center  ', 58  GT_PLANT_SUCC-OLDPRCTR, 65 'to profit center  ', 83 GT_PLANT_SUCC-NEWPRCTR.
    ENDLOOP.
    WRITE : /'**********************************************************************'.
ENDIF.

IF GV_PLANT_FAIL > 0.
    SKIP 2.
    WRITE : /'**********************************************************************'.
    FORMAT COLOR COL_GROUP INTENSIFIED.
    WRITE : /'The Materials not updated are :  '.
    SKIP 1.
    FORMAT RESET.
    LOOP AT GT_PLANT_FAIL.
     WRITE :/2 GT_PLANT_FAIL-MATNR, 21 'in plant  ', 32 GT_PLANT_FAIL-WERKS, 37 'with profit center  ', 58   GT_PLANT_FAIL-OLDPRCTR.
      WRITE /: GT_PLANT_FAIL-MESSAGE.
    ENDLOOP.
    WRITE : /'**********************************************************************'.
ENDIF.


IF GV_PLANT_SUCC > 0 OR GV_PLANT_FAIL > 0.
    SKIP 2.
    WRITE : /'**********************************************************************'.
    IF GV_PLANT_SUCC > 0.
      FORMAT COLOR COL_POSITIVE INTENSIFIED.
      WRITE :  /'Number of records updated successfully                 :  ',  GV_PLANT_SUCC.
      FORMAT RESET.
    ENDIF.
    IF GV_PLANT_FAIL > 0.
      FORMAT COLOR COL_NEGATIVE INTENSIFIED.
      WRITE : /'Total Number of records not updated                    :  ',  GV_PLANT_FAIL.
      FORMAT RESET.
    ENDIF.
    WRITE : /'**********************************************************************'.
  ENDIF.












* Lets update the Sales view status
DESCRIBE TABLE GT_SALES_VIEW  LINES GV_SALES_TOTAL.
DESCRIBE TABLE GT_SALES_SUCC  LINES GV_SALES_SUCC.
DESCRIBE TABLE GT_SALES_FAIL  LINES GV_SALES_FAIL.

  SKIP 5.

  WRITE : /'*********************************************************************************************************************************'.
  WRITE /65 'SALES VIEW'.
  WRITE : /'*********************************************************************************************************************************'.
  FORMAT COLOR COL_HEADING INTENSIFIED.
  WRITE :/25 'Total Number of Materials to be updated         :  ',   GV_SALES_TOTAL.
  FORMAT RESET.
*  WRITE : /'**********************************************************************'.

IF GV_SALES_SUCC  > 0.
    SKIP 2.
    WRITE : /'**********************************************************************'.
    FORMAT COLOR COL_POSITIVE INTENSIFIED.
    WRITE : /'The Materials successfully updated are :  '  .
    SKIP 1.
    FORMAT RESET.
    LOOP AT GT_SALES_SUCC.
        WRITE :/2  GT_SALES_SUCC-MATNR, 21 'in Sales Org.  ', 36 GT_SALES_SUCC-VKORG , 42 'in Dist. Channel  ', 61 GT_SALES_SUCC-VTWEG, 64  'with Product Hierarchy  ', 89 GT_SALES_SUCC-OLDPRODH,  100 'to Product Hierarchy  ' , GT_SALES_SUCC-NEWPRODH.
    ENDLOOP.
    WRITE : /'**********************************************************************'.
ENDIF.

IF GV_SALES_FAIL > 0.
    SKIP 2.
    WRITE : /'**********************************************************************'.
    FORMAT COLOR COL_GROUP INTENSIFIED.
    WRITE : /'The Materials not updated are :  '.
    SKIP 1.
    FORMAT RESET.
    LOOP AT GT_SALES_FAIL.
      WRITE :/2 GT_SALES_FAIL-MATNR, 21 'in Sales Org.  ', 36 GT_SALES_FAIL-VKORG, 42 ' in Dist. Channel  ', 61 GT_SALES_FAIL-VTWEG, 64  ' with Product Hierarchy  ' , 89 GT_SALES_FAIL-OLDPRODH.
      WRITE /: GT_SALES_FAIL-MESSAGE.
    ENDLOOP.
    WRITE : /'**********************************************************************'.
ENDIF.


IF GV_SALES_SUCC > 0 OR GV_SALES_FAIL > 0.
    SKIP 2.
    WRITE : /'**********************************************************************'.
    IF GV_SALES_SUCC > 0.
      FORMAT COLOR COL_POSITIVE INTENSIFIED.
      WRITE :  /'Number of records updated successfully                 :  ',  GV_SALES_SUCC.
      FORMAT RESET.
    ENDIF.
    IF GV_SALES_FAIL > 0.
      FORMAT COLOR COL_NEGATIVE INTENSIFIED.
      WRITE : /'Total Number of records not updated                    :  ',  GV_SALES_FAIL.
      FORMAT RESET.
    ENDIF.
    WRITE : /'**********************************************************************'.
  ENDIF.


ENDFORM.                    " DISPLAY_STATUS



*&---------------------------------------------------------------------*
*&      Form  DELETE_ENTRIES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DELETE_ENTRIES .
DELETE FROM YSE_PH_UPLOADS.
DELETE FROM YSE_PC_UPLOADS.
ENDFORM.                    " DELETE_ENTRIES
