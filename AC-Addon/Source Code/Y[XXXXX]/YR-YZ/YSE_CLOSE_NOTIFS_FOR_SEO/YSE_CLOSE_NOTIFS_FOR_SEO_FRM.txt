*&---------------------------------------------------------------------*
*&  Include           YSE_CLOSE_NOTIFS_FOR_SEO_FRM
*&---------------------------------------------------------------------*


*&---------------------------------------------------------------------*
*&      Form  CHECK_AUTHORIZATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CHECK_AUTHORIZATION .

* Check if the user has authorization for that sales org. or else display error.
  AUTHORITY-CHECK OBJECT 'V_VBAK_VKO'
           ID 'VKORG' FIELD P_VKORG
           ID 'VTWEG' DUMMY
           ID 'SPART' DUMMY
           ID 'ACTVT' DUMMY.

    IF SY-SUBRC = 4.
*   No authorisation to change data in sales org.
        MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '006' WITH P_VKORG.
        EXIT.
    ELSEIF SY-SUBRC <> 0.
*   Error checking authorization.
        MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '004'.
        EXIT.
    ENDIF.



ENDFORM.                    " CHECK_AUTHORIZATION



*&---------------------------------------------------------------------*
*&      Form  CHECK_SELECTIONS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CHECK_SELECTIONS .

* Check if the user entered atleast one of the selection criteria else display error message.
 IF  P_VKORG IS INITIAL   AND  SO_QMNUM[] IS INITIAL AND SO_AUFNR[] IS INITIAL AND SO_QMDAT[] IS INITIAL.
    MESSAGE TEXT-E01 TYPE 'E'.
  ENDIF.


ENDFORM.                    " CHECK_SELECTIONS



*&---------------------------------------------------------------------*
*&      Form  SELECT_NOTIFS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SELECT_NOTIFS .
* Get the notification numbers based on the selection parameters
* Check if the parameter Sales org. is empty
IF P_VKORG IS INITIAL.
    SELECT QMNUM                              "Notification No
           QMDAT                              "Notification Date
           AUFNR                              "Order Number
           OBJNR                              "Object Number
           VKORG                              "Sales Organization
           INTO  TABLE GT_QMEL
           FROM  QMEL
           WHERE QMNUM IN SO_QMNUM
           AND   AUFNR IN SO_AUFNR
           AND   QMDAT IN SO_QMDAT.

ELSE.

    SELECT QMNUM                              "Notification No
           QMDAT                              "Notification Date
           AUFNR                              "Order Number
           OBJNR                              "Object Number
           VKORG                              "Sales Organization
           INTO  TABLE GT_QMEL
           FROM  QMEL
           WHERE QMNUM IN SO_QMNUM
           AND   AUFNR IN SO_AUFNR
           AND   QMDAT IN SO_QMDAT
           AND   VKORG EQ P_VKORG.
ENDIF.

ENDFORM.                    " SELECT_NOTIFS



*&---------------------------------------------------------------------*
*&      Form  CHANGE_NOTIF_STATUS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CHANGE_NOTIF_STATUS .
* Check if any notifications are selected or else display message.
IF GT_QMEL[] IS INITIAL.
    MESSAGE TEXT-I01 TYPE 'S'.
ELSE.


* Prepare the input parameters to be called with BAPI
  CLEAR WA_NOTSTI.
  MOVE 'E'      TO WA_NOTSTI-LANGU.
  MOVE 'EN'     TO WA_NOTSTI-LANGUISO.
  MOVE SY-DATUM TO WA_NOTSTI-REFDATE.
  MOVE SY-UZEIT TO WA_NOTSTI-REFTIME.



* Sort the table based on order numbers
  SORT GT_QMEL BY AUFNR.


* Close notifications for all those service orders which are TECO/CLSD
  LOOP AT GT_QMEL.


*   Check if the SEO is created for the Notification else remove that notification and substract the total number of records.
    IF GT_QMEL-AUFNR IS INITIAL.
      GV_NO_AUFNR = GV_NO_AUFNR + 1.
    ENDIF.
    CHECK GT_QMEL-AUFNR IS NOT INITIAL.

    CONCATENATE 'OR' GT_QMEL-AUFNR INTO GV_OBJNR.




*.. Check if related notification is already completed (NOCO) and if yes then skip
    CALL FUNCTION 'STATUS_CHECK'
      EXPORTING
*       BYPASS_BUFFER           = ' '
*       CLIENT                  = SY-MANDT
        OBJNR                   = GT_QMEL-OBJNR
        STATUS                  = 'I0072'
      EXCEPTIONS
        OBJECT_NOT_FOUND        = 1
        STATUS_NOT_ACTIVE       = 2
        OTHERS                  = 3.

    IF SY-SUBRC EQ 0.
              GT_QMEL_CLOSED-QMNUM   = GT_QMEL-QMNUM.
              GT_QMEL_CLOSED-AUFNR   = GT_QMEL-AUFNR.
              GT_QMEL_CLOSED-VKORG   = GT_QMEL-VKORG.
              GT_QMEL_CLOSED-MESSAGE = TEXT-M02.        "notification is already completed with status NOCO
              APPEND GT_QMEL_CLOSED.
              CLEAR  GT_QMEL_CLOSED.
      CONTINUE.
    ENDIF.



*  Check if notification has a deletion flag (DLFL) and if yes then skip
    CALL FUNCTION 'STATUS_CHECK'
      EXPORTING
*       BYPASS_BUFFER           = ' '
*       CLIENT                  = SY-MANDT
        OBJNR                   = GT_QMEL-OBJNR
        STATUS                  = 'I0076'
      EXCEPTIONS
        OBJECT_NOT_FOUND        = 1
        STATUS_NOT_ACTIVE       = 2
        OTHERS                  = 3.

    IF SY-SUBRC EQ 0.
              GT_QMEL_FAIL-QMNUM   = GT_QMEL-QMNUM.
              GT_QMEL_FAIL-AUFNR   = GT_QMEL-AUFNR.
              GT_QMEL_FAIL-VKORG   = GT_QMEL-VKORG.
              GT_QMEL_FAIL-MESSAGE = TEXT-M03.        "Notification has a deletion flag with status DLFL
              APPEND GT_QMEL_FAIL.
              CLEAR  GT_QMEL_FAIL.
      CONTINUE.
    ENDIF.



*  Check if related notification still has outstanding tasks (OSTS) and if yes then skip
    CALL FUNCTION 'STATUS_CHECK'
      EXPORTING
*       BYPASS_BUFFER           = ' '
*       CLIENT                  = SY-MANDT
        OBJNR                   = GT_QMEL-OBJNR
        STATUS                  = 'I0158'
      EXCEPTIONS
        OBJECT_NOT_FOUND        = 1
        STATUS_NOT_ACTIVE       = 2
        OTHERS                  = 3.

     IF SY-SUBRC EQ 0.
              GT_QMEL_FAIL-QMNUM   = GT_QMEL-QMNUM.
              GT_QMEL_FAIL-AUFNR   = GT_QMEL-AUFNR.
              GT_QMEL_FAIL-VKORG   = GT_QMEL-VKORG.
              GT_QMEL_FAIL-MESSAGE = TEXT-M04.        "Notification still has outstanding tasks with status OSTS
              APPEND GT_QMEL_FAIL.
              CLEAR  GT_QMEL_FAIL.
      CONTINUE.
    ENDIF.




*  Check if the Service order has TECO / CLSD status
    CALL FUNCTION 'STATUS_CHECK'
      EXPORTING
*       BYPASS_BUFFER           = ' '
*       CLIENT                  = SY-MANDT
        OBJNR                   = GV_OBJNR
        STATUS                  = 'I0045'
      EXCEPTIONS
        OBJECT_NOT_FOUND        = 1
        STATUS_NOT_ACTIVE       = 2
        OTHERS                  = 3.

    IF SY-SUBRC NE 0.
      CALL FUNCTION 'STATUS_CHECK'
        EXPORTING
*         BYPASS_BUFFER           = ' '
*         CLIENT                  = SY-MANDT
          OBJNR                   = GV_OBJNR
          STATUS                  = 'I0046'
        EXCEPTIONS
          OBJECT_NOT_FOUND        = 1
          STATUS_NOT_ACTIVE       = 2
          OTHERS                  = 3.

      IF SY-SUBRC NE 0.
              GT_QMEL_FAIL-QMNUM   = GT_QMEL-QMNUM.
              GT_QMEL_FAIL-AUFNR   = GT_QMEL-AUFNR.
              GT_QMEL_FAIL-VKORG   = GT_QMEL-VKORG.
              GT_QMEL_FAIL-MESSAGE = TEXT-M01.        "Service order is not closed
              APPEND GT_QMEL_FAIL.
              CLEAR  GT_QMEL_FAIL.
        CONTINUE.
      ENDIF.
    ENDIF.




*  Call the BAPi to close the notification as all is OK and notif can be closed.
    CALL FUNCTION 'BAPI_ALM_NOTIF_CLOSE'
      EXPORTING
        NUMBER       = GT_QMEL-QMNUM
        SYSTSTAT     = WA_NOTSTI
        TESTRUN      = P_TEST
      IMPORTING
        SYSTEMSTATUS = WA_SYSTATUS
        USERSTATUS   = WA_USRSTATUS
      TABLES
        RETURN       = GT_BAPIRET2.


* Check if it is run via a test run
      IF P_TEST IS NOT INITIAL.
              GT_QMEL_FAIL-QMNUM   = GT_QMEL-QMNUM.
              GT_QMEL_FAIL-AUFNR   = GT_QMEL-AUFNR.
              GT_QMEL_FAIL-VKORG   = GT_QMEL-VKORG.
              GT_QMEL_FAIL-MESSAGE = TEXT-M13.        "Test run selected, so no update done.
              APPEND GT_QMEL_FAIL.
              CLEAR  GT_QMEL_FAIL.
      ENDIF.




*  Check if the update was successful
    IF NOT GT_BAPIRET2[] IS INITIAL.

      CLEAR GT_BAPIRET2.
      READ TABLE GT_BAPIRET2 INDEX 1.
      IF SY-SUBRC = 0.
              GT_QMEL_FAIL-QMNUM   = GT_QMEL-QMNUM.
              GT_QMEL_FAIL-AUFNR   = GT_QMEL-AUFNR.
              GT_QMEL_FAIL-VKORG   = GT_QMEL-VKORG.
              GT_QMEL_FAIL-MESSAGE = GT_BAPIRET2-MESSAGE.
              APPEND GT_QMEL_FAIL.
              CLEAR  GT_QMEL_FAIL.
      ENDIF.


    ELSE.

      IF P_TEST IS INITIAL.
*    As the update is successful, save the data into the tables.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.

              GT_QMEL_SUCC-QMNUM   = GT_QMEL-QMNUM.
              GT_QMEL_SUCC-AUFNR   = GT_QMEL-AUFNR.
              GT_QMEL_SUCC-VKORG   = GT_QMEL-VKORG.
              APPEND GT_QMEL_SUCC.
              CLEAR  GT_QMEL_SUCC.
      ENDIF.

    ENDIF.

  ENDLOOP.


  ENDIF.


ENDFORM.                    " CHANGE_NOTIF_STATUS






*&---------------------------------------------------------------------*
*&      Form  DISPLAY_STATUS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DISPLAY_STATUS .

* Check the number of closed records.
* If run through background job for the sales org. it will have many notifications which have NOCO status.
* So to minimize the spool size check number of records.

  DESCRIBE TABLE GT_QMEL_CLOSED  LINES GV_QMEL_CLOSED.
* If the number of records are <= 2000, then write it to spool.
  IF GV_QMEL_CLOSED <= GC_MAXLINES.
    LOOP AT GT_QMEL_CLOSED.
        GT_QMEL_FAIL-QMNUM   = GT_QMEL_CLOSED-QMNUM.
        GT_QMEL_FAIL-AUFNR   = GT_QMEL_CLOSED-AUFNR.
        GT_QMEL_FAIL-VKORG   = GT_QMEL_CLOSED-VKORG.
        GT_QMEL_FAIL-MESSAGE = GT_QMEL_CLOSED-MESSAGE.
        APPEND GT_QMEL_FAIL.
        CLEAR  GT_QMEL_FAIL.
    ENDLOOP.
  ENDIF.



* Lets update the status
  DESCRIBE TABLE GT_QMEL       LINES GV_QMEL_TOTAL.
  DESCRIBE TABLE GT_QMEL_SUCC  LINES GV_QMEL_SUCC.
  DESCRIBE TABLE GT_QMEL_FAIL  LINES GV_QMEL_FAIL.


* Remove the notif's for which SEO's are not created
  GV_QMEL_TOTAL = GV_QMEL_TOTAL - GV_NO_AUFNR.


  WRITE : /'************************************************************************************************************************'.
  WRITE /35 TEXT-M05.
  WRITE : /'************************************************************************************************************************'.
  FORMAT COLOR COL_HEADING INTENSIFIED.
  WRITE :/25 TEXT-M06 ,   GV_QMEL_TOTAL.
  FORMAT RESET.




 IF GV_QMEL_SUCC  > 0.
    SKIP 2.
    WRITE : /'**********************************************************************'.
    FORMAT COLOR COL_POSITIVE INTENSIFIED.
    WRITE : / TEXT-M07.
    SKIP 1.
    FORMAT RESET.
    LOOP AT GT_QMEL_SUCC.
      WRITE :/2  GT_QMEL_SUCC-QMNUM, 16 TEXT-M08, 27 GT_QMEL_SUCC-AUFNR , 40 TEXT-M09, 56 GT_QMEL_SUCC-VKORG.
    ENDLOOP.
    WRITE : /'**********************************************************************'.
  ENDIF.






  IF GV_QMEL_FAIL > 0.
    SKIP 2.
    WRITE : /'**********************************************************************'.
    FORMAT COLOR COL_GROUP INTENSIFIED.
    WRITE : / TEXT-M10.
    SKIP 1.
    FORMAT RESET.
    LOOP AT GT_QMEL_FAIL.
      WRITE :/2 GT_QMEL_FAIL-QMNUM, 16 TEXT-M08, 27 GT_QMEL_FAIL-AUFNR , 40 TEXT-M09, 56 GT_QMEL_FAIL-VKORG.
      WRITE /: GT_QMEL_FAIL-MESSAGE.
    ENDLOOP.
    WRITE : /'**********************************************************************'.
  ENDIF.







 IF GV_QMEL_SUCC  > 0 OR GV_QMEL_FAIL > 0.
    SKIP 2.
    WRITE : /'**********************************************************************'.
    IF GV_QMEL_SUCC  > 0.
      FORMAT COLOR COL_POSITIVE INTENSIFIED.
      WRITE :  / TEXT-M11,  GV_QMEL_SUCC.
      FORMAT RESET.
    ENDIF.
    IF GV_QMEL_FAIL > 0.
      FORMAT COLOR COL_NEGATIVE INTENSIFIED.
      WRITE : / TEXT-M12,  GV_QMEL_FAIL.
      FORMAT RESET.
    ENDIF.
    WRITE : /'**********************************************************************'.
  ENDIF.


ENDFORM.                    " DISPLAY_STATUS
