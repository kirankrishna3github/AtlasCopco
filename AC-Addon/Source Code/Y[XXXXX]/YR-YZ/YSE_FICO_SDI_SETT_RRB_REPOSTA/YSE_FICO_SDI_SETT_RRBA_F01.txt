*----------------------------------------------------------------------*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
* MOD. NR.| DATE       | NAME           | CORRECT. NR. | CHANGE REF. # *
*----------------------------------------------------------------------*
* MOD-002 |08-02-2017  | Anda Wu        | CD1K990877   | CR4081        *
* BugFix : YSE_FICO_SDI_SETT_RRB_REPOSTA program is not posting to
*          correct order INC# 49489
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
***INCLUDE YSE_FICO_SDI_SETT_RRBA_F01
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  copy_chars
*&---------------------------------------------------------------------*

FORM copy_chars USING p_item.

  FIELD-SYMBOLS: <fs_field> TYPE ANY.

  DATA: structref      TYPE REF TO cl_abap_structdescr,
        idetails       TYPE abap_compdescr_tab,
        xdetails       TYPE abap_compdescr.

  structref ?= cl_abap_typedescr=>describe_by_name( 'CE41000' ).

  idetails[] = structref->components[].

  LOOP AT idetails INTO xdetails WHERE name NE 'MANDT'.
    IF sy-subrc NE 0.
      EXIT.
    ELSEIF xdetails-name = 'AKTBO'
      OR   xdetails-name = 'PAOBJNR'
      OR   xdetails-name = 'PASUBNR'
      OR   xdetails-name = 'BISDAT'
      OR   xdetails-name = 'KNT_FRM_KZ'
      OR   xdetails-name = 'UNUSED_CE3'.
      CONTINUE.
    ELSE.
      CLEAR gs_criteria.
      ASSIGN COMPONENT xdetails-name OF STRUCTURE gs_ce41000 TO <fs_field>.
      MOVE:  p_item         TO   gs_criteria-itemno_acc,
*             xdetails-name  to   gs_criteria-fieldname,
             <fs_field>     TO   gs_criteria-character.
      CASE xdetails-name.
        WHEN 'AUFNR'.
          MOVE 'RKAUFNR' TO gs_criteria-fieldname.
        WHEN 'MEINH'.
          MOVE 'VV010_ME' TO gs_criteria-fieldname.
        WHEN OTHERS.
          MOVE xdetails-name  TO   gs_criteria-fieldname.
      ENDCASE.
      APPEND gs_criteria TO gt_criteria.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " copy_chars

*&---------------------------------------------------------------------*
*&      Form  create_line_10
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM   create_line_10 .

  PERFORM copy_chars USING '10'.              "Copy the chars for item 10

  CLEAR gs_valuefield.
  gs_valuefield-itemno_acc = '10'.
  gs_valuefield-fieldname = 'VV100'.
  IF gs_dmr-fkart = 'ZF2'.
    gs_valuefield-amt_valcom = gs_dmr-netwr * -1.
  ELSEIF gs_dmr-fkart = 'S1'.
    gs_valuefield-amt_valcom = gs_dmr-netwr.
  ENDIF.

  gs_valuefield-currency = gv_waers.
  APPEND gs_valuefield TO gt_valuefield.

  CLEAR: gs_accountgl.
  gs_accountgl-itemno_acc = '10'.
  gs_accountgl-gl_account = gv_saknr.
  gs_accountgl-tax_code   = gv_tax_code.
  gs_accountgl-item_text  = 'RRB GAC Adj'(050).
  gs_accountgl-comp_code  = p_bukrs.
  gs_accountgl-func_area_long = gv_fkber.
  gs_accountgl-plant      = gs_ce41000-werks.
  gs_accountgl-fis_period = gv_period.
  gs_accountgl-fisc_year  = p_letja.
  gs_accountgl-pstng_date = gv_doc_date.
  CONCATENATE gs_dmr-vgbel '/' gs_dmr-vgpos
    INTO gs_accountgl-alloc_nmbr .
  gs_accountgl-profit_ctr = gs_ce41000-ww006.
  APPEND gs_accountgl TO gt_accountgl.

  CLEAR gs_currencyamount.
  gs_currencyamount-itemno_acc = '10'.
  gs_currencyamount-currency = gv_waers.
  IF gs_dmr-fkart = 'ZF2'.
    gs_currencyamount-amt_doccur = gs_dmr-netwr.
  ELSEIF gs_dmr-fkart = 'S1'.
    gs_currencyamount-amt_doccur = gs_dmr-netwr * -1.
  ENDIF.
  APPEND gs_currencyamount TO gt_currencyamount.

ENDFORM.                    " create_line_10

*&---------------------------------------------------------------------*
*&      Form  create_line_20
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM create_line_20 .

  PERFORM copy_chars USING '20'.              "Copy the chars for item 30

  PERFORM rrb_pc_derivation USING '20'.

  gs_valuefield-itemno_acc = '20'.
  gs_valuefield-fieldname = 'VV100'.
  IF gs_dmr-fkart = 'ZF2'.
    gs_valuefield-amt_valcom = gs_dmr-netwr.
  ELSEIF gs_dmr-fkart = 'S1'.
    gs_valuefield-amt_valcom = gs_dmr-netwr * -1.
  ENDIF.
  gs_valuefield-currency = gv_waers.
  APPEND gs_valuefield TO gt_valuefield.

  CLEAR: gs_accountgl.
  gs_accountgl-itemno_acc = '20'.
*  gs_accountgl-gl_account = p_revs.
  gs_accountgl-gl_account = gv_saknr.
  gs_accountgl-tax_code   = gv_tax_code.
  gs_accountgl-item_text  = 'RRB GAC Adj'(050).
  gs_accountgl-comp_code  = p_bukrs.
* GS_ACCOUNTGL-FUNC_AREA  = '2051'.          "20100122 EXTUVE CR1223
*  gs_accountgl-func_area  = '3111'.          "20100122 EXTUVE CR1223
  gs_accountgl-func_area_long = gv_fkber.
  gs_accountgl-plant      = gs_ce41000-werks.
  gs_accountgl-fis_period = gv_period.
  gs_accountgl-fisc_year  = p_letja.
  gs_accountgl-pstng_date = gv_doc_date.
  CONCATENATE gs_dmr-vgbel '/' gs_dmr-vgpos
    INTO gs_accountgl-alloc_nmbr.
  READ TABLE gt_criteria INTO gs_criteria
    WITH KEY  itemno_acc = '20'
              fieldname = 'PRCTR'.
  gs_accountgl-profit_ctr = gs_criteria-character.
  APPEND gs_accountgl TO gt_accountgl.

  CLEAR gs_currencyamount.
  gs_currencyamount-itemno_acc = '20'.
  gs_currencyamount-currency = gv_waers.
  IF gs_dmr-fkart = 'ZF2'.
    gs_currencyamount-amt_doccur = gs_dmr-netwr * -1.
  ELSEIF gs_dmr-fkart = 'S1'.
    gs_currencyamount-amt_doccur = gs_dmr-netwr.
  ENDIF.
  APPEND gs_currencyamount TO gt_currencyamount.

ENDFORM.                    " create_line_20

*&---------------------------------------------------------------------*
*&      Form  create_header
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM create_header .

  gs_documentheader-header_txt =  'RRB Service GAC'.        "#EC *
  gs_documentheader-comp_code  =  p_bukrs.
  gs_documentheader-username   =  sy-uname.
*  gs_documentheader-bus_act    =  'RFBU'.
  gs_documentheader-doc_date   =  sy-datum.
  gs_documentheader-pstng_date =  gv_doc_date.
*------------------------------------------------
  gs_documentheader-fisc_year  =  p_letja.
  gs_documentheader-fis_period =  gv_period.
  gs_documentheader-doc_type   =  'SA'.
  gs_documentheader-ref_doc_no =  gs_dmr-vgbel.

ENDFORM.                    " create_header

*&---------------------------------------------------------------------*
*&      Form  execute_repost
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM execute_repost .

  IF gv_subrc NE 0.
    "Write error log
  ELSE.
    CLEAR: gt_return[], gv_objkey.
    CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
      EXPORTING
        documentheader = gs_documentheader
      IMPORTING
        obj_key        = gv_objkey
        obj_type       = gv_obtype
        obj_sys        = gv_obsys
      TABLES
        accountgl      = gt_accountgl
        currencyamount = gt_currencyamount
        criteria       = gt_criteria
        valuefield     = gt_valuefield
        return         = gt_return.

    LOOP AT gt_return INTO gs_return
                      WHERE type = 'E'  OR
                            type = 'A'.
      "Show error messages
      WRITE: /, gs_return-type, gs_return-message.
    ENDLOOP.

    IF sy-subrc NE 0.      "No error messages, so commit and show success message
      READ TABLE gt_return INTO gs_return INDEX 1.
      WRITE: /, 'S', gs_return-message,
                gs_dmr-vbeln, gs_dmr-vgbel,
                gs_dmr-vgpos, 'Reposted'(065).
      COMMIT WORK AND WAIT.
      IF gv_mode = 'REVENUE'.
        LOOP AT gt_rrb_reposta ASSIGNING <fs_rrb_reposta>
                               WHERE invoice = gs_dmr-billing_doc
                                 AND item    = gs_dmr-billing_item.
          <fs_rrb_reposta>-reposted = 'X'.
          <fs_rrb_reposta>-obj_key  = gv_objkey.
          <fs_rrb_reposta>-obj_typ  = gv_obtype.
          <fs_rrb_reposta>-obj_sys  = gv_obsys.
          <fs_rrb_reposta>-gjahr    = p_letja.
          <fs_rrb_reposta>-bus_act  = 'RFBU'.
          <fs_rrb_reposta>-redat    = sy-datum.
          <fs_rrb_reposta>-rezet    = sy-timlo.

        ENDLOOP.
      ELSEIF gv_mode = 'COGS'.
        LOOP AT gt_rrb_reposta_cogs ASSIGNING <fs_rrb_reposta>
                               WHERE sales_order  = gs_dmr-vgbel
                                 AND sales_item   = gs_dmr-vgpos.
          <fs_rrb_reposta>-reposted2 = 'X'.
          <fs_rrb_reposta>-obj_key2  = gv_objkey.
          <fs_rrb_reposta>-obj_typ2  = gv_obtype.
          <fs_rrb_reposta>-obj_sys2  = gv_obsys.
          <fs_rrb_reposta>-gjahr    = p_letja.
          <fs_rrb_reposta>-bus_act  = 'RFBU'.
          <fs_rrb_reposta>-redat    = sy-datum.
          <fs_rrb_reposta>-rezet    = sy-timlo.

        ENDLOOP.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    " execute_repost

*&---------------------------------------------------------------------*
*&      Form  rrb_pc_derivation
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM rrb_pc_derivation USING p_item.

  DATA: lv_equnr TYPE equnr,
        lv_werks TYPE werks_d,
        lv_kunnr TYPE kunnr,
        lv_gac   TYPE rkeg_ww006,
        lv_pgc   TYPE rkeg_ww007,
        lv_prctr TYPE prctr,
        lv_plc   TYPE rkeg_ww002,
        lv_prodh TYPE prodh_d.

* Get the equnr, plant and customer nr from char table
  READ TABLE gt_criteria INTO gs_criteria
                         WITH KEY itemno_acc = p_item
                                  fieldname = 'EQUNR'.
  IF sy-subrc = 0.
    MOVE gs_criteria-character TO lv_equnr.
  ENDIF.
*  READ TABLE gt_criteria INTO gs_criteria
*  WITH KEY itemno_acc = p_item
*       fieldname = 'WERKS'.
*  IF sy-subrc EQ 0.
*    MOVE gs_criteria-character TO lv_werks.
*  ENDIF.
  READ TABLE gt_criteria INTO gs_criteria
  WITH KEY itemno_acc = p_item
       fieldname = 'KNDNR'.
  IF sy-subrc EQ 0.
    MOVE gs_criteria-character TO lv_kunnr.
  ENDIF.

  CALL METHOD yse_am_derivation=>rrb_reposting_derivation
    EXPORTING
      im_vkorg  = gs_dmr-vkorg
      im_kunnr  = lv_kunnr
      im_spart  = gs_dmr-spart
      im_vtweg  = gs_dmr-vtweg
      im_equnr  = lv_equnr
      im_werks  = gs_dmr-werks
      im_matnr  = gs_dmr-matnr
    IMPORTING
      exp_gac   = lv_gac
      exp_pgc   = lv_pgc
      exp_prctr = lv_prctr
      exp_plc   = lv_plc
      exp_prodh = lv_prodh.

* Overwrite prodh
  READ TABLE gt_criteria INTO gs_criteria
                         WITH KEY itemno_acc = p_item
                                  fieldname = 'PRODH'.
  IF sy-subrc EQ 0.
    MOVE lv_prodh TO gs_criteria-character.
    MODIFY gt_criteria FROM gs_criteria
      TRANSPORTING character
      WHERE ( itemno_acc = p_item )
        AND ( fieldname = 'PRODH' ).
  ENDIF.

* Overwrite profitcenter
  READ TABLE gt_criteria INTO gs_criteria
  WITH KEY itemno_acc = p_item
       fieldname = 'PRCTR'.
  IF sy-subrc EQ 0.
    MOVE lv_prctr TO gs_criteria-character.
    MODIFY gt_criteria FROM gs_criteria
      TRANSPORTING character
      WHERE ( itemno_acc = p_item )
        AND ( fieldname = 'PRCTR' ).
  ENDIF.

* Overwrite PLC
  READ TABLE gt_criteria INTO gs_criteria
  WITH KEY itemno_acc = p_item
  fieldname = 'WW002'.
  IF sy-subrc EQ 0.
    MOVE lv_plc TO gs_criteria-character.
    MODIFY gt_criteria FROM gs_criteria
    TRANSPORTING character
    WHERE ( itemno_acc = p_item )
      AND ( fieldname = 'WW002' ).

  ENDIF.

* Overwrite GAC
  READ TABLE gt_criteria INTO gs_criteria
  WITH KEY itemno_acc = p_item
       fieldname = 'WW006'.
  IF sy-subrc EQ 0.
    MOVE lv_gac TO gs_criteria-character.
    MODIFY gt_criteria FROM gs_criteria
      TRANSPORTING character
      WHERE ( itemno_acc = p_item )
        AND ( fieldname = 'WW006' ).
  ENDIF.

* Overwrite PGC
  READ TABLE gt_criteria INTO gs_criteria
  WITH KEY itemno_acc = p_item
       fieldname = 'WW007'.
  IF sy-subrc EQ 0.
    MOVE lv_pgc TO gs_criteria-character.
    MODIFY gt_criteria FROM gs_criteria
      TRANSPORTING character
      WHERE ( itemno_acc = p_item )
        AND ( fieldname = 'WW007' ).
  ENDIF.

ENDFORM.                    " rrb_pc_derivation

*&---------------------------------------------------------------------*
*&      Form  get_last_date_of_period
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM get_last_date_of_period .

  gv_period = p_letpe.

  CALL FUNCTION 'LAST_DAY_IN_PERIOD_GET'
    EXPORTING
      i_gjahr              = p_letja
*     I_MONMIT             = 00
      i_periv              = 'K4'
      i_poper              = p_letpe
    IMPORTING
      e_date               = gv_doc_date.
*    EXCEPTIONS
*      input_false          = 1
*      t009_notfound        = 2
*      t009b_notfound       = 3
*      OTHERS               = 4.

ENDFORM.                    " get_last_date_of_period

*&---------------------------------------------------------------------*
*&      Form  CONVERT_AMOUNT_INT
*&---------------------------------------------------------------------*
*       Convert amount via intermediate currency
*----------------------------------------------------------------------*
*      -->P_KWERT_IN  : Given Value
*      -->P_WAERS_IN  : Given Currency
*      -->P_KWERT_OUT : Converted Value
*      -->P_WAERS_RES : Result Currency
*----------------------------------------------------------------------*
FORM convert_amount_int  USING    p_kwert_in
                                  p_waers_in
                                  p_kwert_out
                                  p_waers_res.

  DATA: lv_value_int    TYPE wtgxxx,
        ls_curr         TYPE ty_curr.

* Input Currency = Result currency -> NO conversion
  IF p_waers_in = p_waers_res.
    p_kwert_out = p_kwert_in.
    RETURN.
  ENDIF.

* Intermediate exchange rate
  IF p_waers_in = gv_waers_int.
    lv_value_int = p_kwert_in.
  ELSE.
    CLEAR gt_curr.
    READ TABLE gt_curr INTO ls_curr
      WITH TABLE KEY kurst = gv_kurst
                    fcurr = p_waers_in
                    tcurr = gv_waers_int.
    CHECK sy-subrc = 0.
*     Calculate ammount in intermediate currency
    IF ls_curr-ukurs = 0.
      ls_curr-ukurs = 1.
    ENDIF.
    lv_value_int = p_kwert_in * ls_curr-ukurs.
  ENDIF.

* Result exchange rate
  IF p_waers_res = gv_waers_int.
    p_kwert_out = lv_value_int.
  ELSE.
    CLEAR gt_curr.
    READ TABLE gt_curr INTO ls_curr
      WITH TABLE KEY  kurst = gv_kurst
                      fcurr = p_waers_res
                      tcurr = gv_waers_int.
    CHECK sy-subrc = 0.
*     Calculate ammount in result currency
    IF ls_curr-ukurs = 0.
      ls_curr-ukurs = 1.
    ENDIF.
    p_kwert_out = lv_value_int / ls_curr-ukurs.
  ENDIF.

ENDFORM.                    " CONVERT_AMOUNT_INT
*&---------------------------------------------------------------------*
*&      Form  FRM_SCREEN_CHECK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM frm_screen_check .
  SELECT SINGLE y_version_new INTO gv_version_new
       FROM yse_rrb_comp_new
       WHERE bukrs = p_bukrs.

  IF gv_version_new IS INITIAL.
    MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '000'
            WITH 'Company not processed via the new version'(e01).
  ENDIF.
ENDFORM.                    " FRM_SCREEN_CHECK
*&---------------------------------------------------------------------*
*&      Form  FRM_DO_REPOSTING
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM frm_do_reposting .

  DATA: ls_matnr  TYPE ty_matnr,
        ls_parts  TYPE ty_parts,
        ls_c001   TYPE ty_c001,
        ls_ska1   TYPE ty_ska1.
  TYPES:  BEGIN OF lty_cobrb,
            objnr   TYPE cobrb-objnr,
            letja   TYPE cobrb-letja,
            letpe   TYPE cobrb-letpe,
            paobjnr TYPE cobrb-paobjnr,
          END OF lty_cobrb.
  DATA: ls_cobrb  TYPE lty_cobrb,
        lv_prodh    TYPE mvke-prodh,
        lv_vkorg    TYPE vbrp-vkorg_auft,
        lv_vtweg    TYPE vbrp-vtweg_auft,
        ls_rrb_reposta TYPE yse_rrb_reposta,
        lt_cobrb  TYPE STANDARD TABLE OF lty_cobrb.

* Get the materials of the invoices ck if any spare parts are used
  SELECT * INTO TABLE gt_vbrp
         FROM vbrp
         FOR ALL ENTRIES IN gt_rrb_reposta
         WHERE vbeln = gt_rrb_reposta-invoice
           AND posnr = gt_rrb_reposta-item.

  SORT gt_vbrp BY vbeln posnr.

* Copy all materials to local matnr table and select material types
  LOOP AT gt_vbrp INTO gs_vbrp.
    MOVE gs_vbrp-matnr TO ls_matnr-matnr.
    COLLECT ls_matnr INTO gt_matnr.
  ENDLOOP.

* Get raw materials
  SELECT matnr INTO TABLE gt_zdips
         FROM mara
         FOR ALL ENTRIES IN gt_matnr
         WHERE matnr = gt_matnr-matnr
           AND mtart = 'ZDIP'.

  SORT gt_zdips.
  LOOP AT gt_rrb_reposta ASSIGNING <fs_rrb_reposta>
                         WHERE reposted = ' '   "Only to be reposted
                           AND cancel_doc = ' '.
*   First check if any parts to repost
    LOOP AT gt_vbrp INTO gs_vbrp WHERE vbeln = <fs_rrb_reposta>-invoice
                                   AND posnr = <fs_rrb_reposta>-item.
      READ TABLE gt_zdips INTO ls_parts
                 WITH KEY matnr = gs_vbrp-matnr.
      "       No spare part so no reposting for this item
      IF sy-subrc NE 0.
        DELETE gt_vbrp WHERE vbeln = gs_vbrp-vbeln
                         AND posnr = gs_vbrp-posnr.
      ENDIF.
    ENDLOOP.
  ENDLOOP.

  LOOP AT gt_vbrp INTO gs_vbrp.
    CLEAR gs_dmr.
    MOVE: p_bukrs         TO gs_dmr-bukrs,
          gs_vbrp-vgbel   TO gs_dmr-vbeln,
          gs_vbrp-vgpos   TO gs_dmr-posnr,
          gs_vbrp-vbelv   TO gs_dmr-vgbel,
          gs_vbrp-posnv   TO gs_dmr-vgpos.
*          gs_vbrp-werks   TO gs_dmr-werks.
    CLEAR: ls_rrb_reposta.
    SELECT SINGLE matnr werks vkorg_auft vtweg_auft
      INTO (gs_dmr-matnr , gs_dmr-werks,lv_vkorg, lv_vtweg)
      FROM vbrp
      WHERE vbeln = gs_vbrp-vbeln
        AND posnr = gs_vbrp-uepos.
    READ TABLE gt_rrb_reposta_cogs INTO ls_rrb_reposta
      WITH KEY invoice = gs_vbrp-vbeln
               item    = gs_vbrp-posnr.
    SELECT SINGLE prodh
      INTO lv_prodh
      FROM mvke
      WHERE   matnr = gs_dmr-matnr
       AND    vkorg = lv_vkorg
       AND    vtweg = lv_vtweg.
    CONDENSE lv_prodh.
    IF lv_prodh(2) = '85'.
      APPEND ls_rrb_reposta TO gt_rrb_reposta_ingn.
      CONTINUE.
    ENDIF.
    SELECT SINGLE fkart
      INTO gs_dmr-fkart
      FROM vbrk
      WHERE vbeln = gs_vbrp-vbeln.

    SELECT SINGLE netwr wavwr stcur waerk
           INTO CORRESPONDING FIELDS OF gs_dmr
           FROM vbap
           WHERE vbeln = gs_vbrp-vgbel
             AND posnr = gs_vbrp-vgpos.

    SELECT SINGLE objnr
           INTO gs_dmr-objnr
           FROM vbap
           WHERE vbeln = gs_dmr-vgbel
             AND posnr = gs_dmr-vgpos.

*   Check settlement (Get the cobrb entry required)
    SELECT  objnr
            letja
            letpe
            paobjnr
           INTO TABLE lt_cobrb
           FROM cobrb
           WHERE objnr = gs_dmr-objnr
             AND perbz = 'PER'
             AND letja <= p_letja
             AND letpe <= p_letpe.
    IF sy-subrc NE 0.
      "      If no settlement entry found, delete the entry
      DELETE gt_vbrp WHERE vbeln = gs_vbrp-vbeln
                       AND posnr = gs_vbrp-posnr.
      CONTINUE.
    ELSE.
      SORT lt_cobrb BY letja DESCENDING
                       letpe   DESCENDING.
      READ TABLE lt_cobrb INTO ls_cobrb INDEX 1.
      gs_dmr-paobjnr = ls_cobrb-paobjnr.
    ENDIF.

*   Sales area and sold-to customer
    SELECT SINGLE vkorg
                  vtweg
                  spart
                  kunnr
           INTO CORRESPONDING FIELDS OF gs_dmr
           FROM vbak
           WHERE vbeln = gs_dmr-vgbel.

*   Customer account assignment group
    SELECT SINGLE ktgrd INTO gs_dmr-ktgrd
           FROM knvv
           WHERE kunnr = gs_dmr-kunnr
             AND vkorg = gs_dmr-vkorg
             AND vtweg = gs_dmr-vtweg
             AND spart = gs_dmr-spart.

*   Get the serial number and the equipment
    SELECT SINGLE afih~serialnr afih~equnr
           INTO CORRESPONDING FIELDS OF gs_dmr
           FROM afih
           INNER JOIN aufk
                   ON afih~aufnr EQ aufk~aufnr
           WHERE aufk~kdauf = gs_dmr-vgbel
             AND aufk~kdpos = gs_dmr-vgpos.

*   Check if the sales doc currency equal the company code currency
    IF gs_dmr-waerk <> gv_waers.
*     Convert to local currency (company currency)
      PERFORM convert_amount_int USING gs_dmr-netwr
                                       gs_dmr-waerk
                                       gs_dmr-netwr
                                       gv_waers.
    ENDIF.

*   Get the profit center
    SELECT SINGLE prctr INTO gs_dmr-prctr
           FROM marc
           WHERE matnr = gs_dmr-matnr
             AND werks = gs_dmr-werks.

*   Get actual costs
    SELECT SUM( in_wtgbtr ) INTO gs_dmr-wavwr
           FROM ad01dlief
           WHERE vbeln = gs_dmr-vbeln
             AND vbpos = gs_dmr-posnr.

    MOVE gs_vbrp-vbeln TO gs_dmr-billing_doc.
    MOVE gs_vbrp-posnr TO gs_dmr-billing_item.

    APPEND gs_dmr TO gt_dmr.

  ENDLOOP.

* Now we have all the relevant DMR
* loop over all DMR's, find the new PC, PLC, GAC and PGC
* and post the adjustments against these new characteristics.
  LOOP AT gt_dmr INTO gs_dmr.
*    MOVE gs_dmr TO gs_last_dmr.
    READ TABLE gt_rrb_reposta ASSIGNING <fs_rrb_reposta>
                             WITH KEY invoice = gs_dmr-billing_doc
                                      item    = gs_dmr-billing_item.

    CLEAR:  gs_ce41000,
            gt_criteria[],
            gt_valuefield[],
            gt_accountgl[],
            gt_currencyamount[],
            gs_documentheader,
            gt_return[].

*   Profitability Segment (per invoice)
    IF <fs_rrb_reposta>-invoice NE gv_invoice_sv OR
       <fs_rrb_reposta>-sales_order NE gv_sales_order.
      CLEAR gv_paobjnr.
      SELECT SINGLE paobjnr INTO gv_paobjnr
             FROM vbrp
             WHERE vbeln   =  <fs_rrb_reposta>-invoice
               AND aubel   =  <fs_rrb_reposta>-sales_order
               AND paobjnr NE 0.
      CHECK sy-subrc = 0.
      gv_invoice_sv = <fs_rrb_reposta>-invoice.
      gv_sales_order = <fs_rrb_reposta>-sales_order.
    ENDIF.

*   Get copa ce4 key field
    SELECT SINGLE ce4key INTO gs_dmr-ce4key                 "#EC *
           FROM ce41000_acct
           WHERE aktbo   = 'X'
             AND paobjnr = gv_paobjnr
             AND pasubnr = 1.
    CHECK sy-subrc = 0.
*   Get the old characteristics from CE41000
    SELECT SINGLE * FROM ce41000                            "#EC *
           INTO gs_ce41000
           WHERE aktbo   = 'X'
             AND paobjnr = gs_dmr-ce4key
             AND pasubnr = 1.
    CHECK sy-subrc = 0.

*   Get the revenue account
    CLEAR gv_saknr.
    READ TABLE gt_c001 INTO ls_c001
      WITH TABLE KEY  vkorg = gs_dmr-vkorg
                      ktgrd = gs_dmr-ktgrd
                      ktgrm = gs_dmr-vtweg.
    IF sy-subrc = 0.
      gv_saknr = ls_c001-sakn1.
    ENDIF.

*   Get the functional area
    CLEAR gv_fkber.
    READ TABLE gt_ska1 INTO ls_ska1
      WITH TABLE KEY saknr = gv_saknr.
    IF sy-subrc = 0.
      gv_fkber = ls_ska1-func_area.
    ENDIF.

    PERFORM create_header.
*   Copy all the characteristics to the bapi internal table.
    PERFORM create_line_10.
    PERFORM create_line_20.

    PERFORM execute_repost.
  ENDLOOP.
ENDFORM.                    " FRM_DO_REPOSTING
*&---------------------------------------------------------------------*
*&      Form  GAIN_REPOST_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM gain_repost_data .

  DATA:  lv_gdatu  TYPE gdatu_inv.     "Exchange rate date (inverted)
  REFRESH:  gt_dmr[],
            gt_rrb_reposta[],
            gt_rrb_reposta_canc[].

* Get last day of period used
  PERFORM get_last_date_of_period.

* Get non taxable tax code of company code
  SELECT SINGLE mwska
    INTO gv_tax_code
    FROM t001
    WHERE bukrs EQ p_bukrs.

* Get the company code currency
  CLEAR gv_waers.
  SELECT SINGLE waers
    INTO gv_waers
    FROM t001
    WHERE bukrs EQ p_bukrs.

* Invert posting date date
  CONVERT DATE gv_doc_date INTO INVERTED-DATE lv_gdatu.
*  CALL FUNCTION 'CONVERSION_EXIT_INVDT_INPUT'
*    EXPORTING
*      input  = gv_doc_date
*    IMPORTING
*      output = lv_gdatu.

* Exchange rate type
  CASE p_bukrs.
    WHEN 'MRUA'.
      gv_kurst = 'DRU'.
    WHEN 'POLA'.
      gv_kurst = 'D'.
    WHEN OTHERS.
      gv_kurst = 'EURX'.
  ENDCASE.

* Intermediate currency
  CASE p_bukrs.
    WHEN 'MRUA'.
      gv_waers_int = gv_waers.
    WHEN 'POLA'.
      gv_waers_int = gv_waers.
    WHEN OTHERS.
      gv_waers_int = 'EUR'.
  ENDCASE.

* Exchange rates
  SELECT kurst fcurr tcurr gdatu ukurs
    INTO TABLE gt_curri
    FROM tcurr
    WHERE kurst =  gv_kurst
      AND tcurr =  gv_waers_int
      AND gdatu GE lv_gdatu.
  SORT gt_curri BY kurst fcurr tcurr gdatu.
  DELETE ADJACENT DUPLICATES FROM gt_curri
    COMPARING kurst fcurr tcurr.
  gt_curr[] = gt_curri[].
  FREE gt_curri.

* Get reposting accounts
  SELECT vkorg ktgrd ktgrm sakn1
    INTO TABLE gt_c001i
    FROM c001
    WHERE kappl  = 'V '
      AND kschl IN ('KOFI', 'KOFK')
      AND ktopl  = 'SCOA'
      AND kvsl1  = 'ERL'.
  SORT gt_c001i BY vkorg ktgrd ktgrm.
  DELETE ADJACENT DUPLICATES FROM gt_c001i
         COMPARING vkorg ktgrd ktgrm.
  gt_c001[] = gt_c001i[].
  FREE gt_c001i.

* Get functional areas for the reposting accounts
  SELECT saknr func_area
    INTO TABLE gt_ska1i
    FROM ska1
    FOR ALL ENTRIES IN gt_c001
    WHERE ktopl  = 'SCOA'
      AND saknr  = gt_c001-sakn1.
  SORT gt_ska1i BY saknr.
  DELETE ADJACENT DUPLICATES FROM gt_ska1i
         COMPARING saknr.
  gt_ska1[] = gt_ska1i[].
  FREE gt_ska1i.

* Get all entries to process:
**Either invoices that haven't been cancelled yet and to be reposted
  SELECT * INTO TABLE gt_rrb_reposta
    FROM yse_rrb_reposta
    WHERE bukrs = p_bukrs
      AND sales_order IN so_vbeln
      AND no_repost_req = ' '
      AND  reposted = ' '     "Not yet reposted
      AND cancel_doc = ' '.   "and not cancelled so repost required

** Or
** Invoices that have been reposted already and now need to be reversed
  SELECT * INTO TABLE gt_rrb_reposta_canc
    FROM yse_rrb_reposta
    WHERE bukrs = p_bukrs
      AND sales_order IN so_vbeln
      AND no_repost_req = ' '
      AND reposted = 'X'       "Not yet reposted
      AND cancel_doc <> ' '
      AND repost_canceled = ' '.
*  APPEND LINES OF gt_rrb_reposta TO gt_rrb_reposta_comb.
*  APPEND LINES OF gt_rrb_reposta_canc TO gt_rrb_reposta_comb.
*
**  SELECT
ENDFORM.                    " GAIN_REPOST_DATA
*&---------------------------------------------------------------------*
*&      Form  FRM_REVENUE_REPOSTING
*&---------------------------------------------------------------------*
*       Do revenue reposting
*----------------------------------------------------------------------*
FORM frm_revenue_reposting .

  gv_mode = 'REVENUE'.
  PERFORM gain_repost_data.

  IF gt_rrb_reposta[] IS INITIAL. "No invoices to be processed found
    WRITE: 'No invoices to be processed found(Revenue reposting)'(061).
  ELSE.
    PERFORM frm_do_reposting.
  ENDIF.

  IF NOT gt_rrb_reposta[] IS INITIAL.
    MODIFY yse_rrb_reposta FROM TABLE gt_rrb_reposta.
    COMMIT WORK.
  ENDIF.

ENDFORM.                    " FRM_REVENUE_REPOSTING
*&---------------------------------------------------------------------*
*&      Form  FRM_COGS_REPOSTING
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM frm_cogs_reposting .
  gv_mode = 'COGS'.
* Get all entries to process:
**Either invoices that haven't been cancelled yet and to be reposted
  SELECT * INTO TABLE gt_rrb_reposta_cogs
    FROM yse_rrb_reposta
    WHERE bukrs = p_bukrs
      AND sales_order IN so_vbeln
      AND reposted2 = ' '.     "Not yet reposted
  IF gt_rrb_reposta_cogs[] IS INITIAL. "No invoices to be processed found
    WRITE: /, 'No invoices to be processed found(COGS Reposting)'(062).
  ELSE.
    PERFORM frm_do_reposting_cogs.
  ENDIF.

  IF NOT gt_rrb_reposta_cogs[] IS INITIAL.
    MODIFY yse_rrb_reposta FROM TABLE gt_rrb_reposta_cogs.
    COMMIT WORK.
  ENDIF.

ENDFORM.                    " FRM_COGS_REPOSTING
*&---------------------------------------------------------------------*
*&      Form  FRM_DO_REPOSTING_COGS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM frm_do_reposting_cogs .

  DATA:  ls_matnr  TYPE ty_matnr,
         ls_parts  TYPE ty_parts,
         lv_itemno TYPE posnr_acc,
         lv_fldn   TYPE fieldname,
         lv_amt    TYPE bapirkeval.

  TYPES:  BEGIN OF lty_cobrb,
            objnr   TYPE cobrb-objnr,
            letja   TYPE cobrb-letja,
            letpe   TYPE cobrb-letpe,
            paobjnr TYPE cobrb-paobjnr,
          END OF lty_cobrb,
          BEGIN OF lty_subtotal,
            kaufn       TYPE ce11000-kaufn,
            kdpos       TYPE ce11000-kdpos,
            rec_waers   TYPE ce11000-rec_waers,
            vv300       TYPE ce11000-vv300,
            vv400       TYPE ce11000-vv400,
            vv500       TYPE ce11000-vv500,
            vv600       TYPE ce11000-vv600,
          END OF lty_subtotal.

  DATA: ls_cobrb  TYPE lty_cobrb,
        ls_ce11000  TYPE ty_ce11000,
        lv_index    TYPE sy-index,
        lv_prodh    TYPE mvke-prodh,
        lv_vkorg    TYPE vbrp-vkorg_auft,
        lv_vtweg    TYPE vbrp-vtweg_auft,
        ls_rrb_reposta TYPE yse_rrb_reposta,
        lt_subt       TYPE STANDARD TABLE OF lty_subtotal,
        ls_subt       TYPE lty_subtotal,
        lt_cobrb  TYPE STANDARD TABLE OF lty_cobrb.
  FIELD-SYMBOLS: <lfs_ce1100> TYPE ty_ce11000.
  CHECK gt_rrb_reposta_cogs IS NOT INITIAL.
* Get Atlas Copco Operatin
  SELECT    paledger
            vrgar
            gjahr
            perde
            hzdat
            rec_waers
            kaufn
            kdpos
            bukrs
            vv300
            vv400
            vv500
            vv600
    INTO TABLE gt_ce11000
    FROM ce11000
    FOR ALL ENTRIES IN gt_rrb_reposta_cogs
    WHERE paledger = '02'
      AND vrgar = 'C'
      AND gjahr = p_letja
      AND perde = p_letpe
*      AND hzdat IN so_budat  "MOD-002 DEL
      AND budat = p_budat  "MOD-002 INSERT
      AND kaufn = gt_rrb_reposta_cogs-sales_order
      AND kdpos = gt_rrb_reposta_cogs-sales_item
      AND bukrs = p_bukrs.

  SORT gt_ce11000 BY kaufn  kdpos rec_waers.

  LOOP AT gt_ce11000 INTO ls_ce11000.
    MOVE-CORRESPONDING ls_ce11000 TO ls_subt.
    COLLECT ls_subt INTO lt_subt.
  ENDLOOP.

  DELETE ADJACENT DUPLICATES FROM gt_ce11000
    COMPARING kaufn  kdpos rec_waers.

  LOOP AT gt_ce11000 ASSIGNING <lfs_ce1100> .
    CLEAR: ls_subt.
    READ TABLE lt_subt INTO ls_subt
      WITH KEY  kaufn = <lfs_ce1100>-kaufn
                kdpos = <lfs_ce1100>-kdpos
                rec_waers = <lfs_ce1100>-rec_waers.
    IF sy-subrc = 0.
      <lfs_ce1100>-cst_amt = ls_subt-vv300  +
                             ls_subt-vv400  +
                             ls_subt-vv500  +
                             ls_subt-vv600.
      <lfs_ce1100>-vv300 = ls_subt-vv300.
      <lfs_ce1100>-vv400 = ls_subt-vv400.
      <lfs_ce1100>-vv500 = ls_subt-vv500.
      <lfs_ce1100>-vv600 = ls_subt-vv600.
    ENDIF.
  ENDLOOP.

* Get the materials of the invoices ck if any spare parts are used
  SELECT * INTO TABLE gt_vbrp
         FROM vbrp
         FOR ALL ENTRIES IN gt_rrb_reposta_cogs
         WHERE vbeln = gt_rrb_reposta_cogs-invoice
           AND posnr = gt_rrb_reposta_cogs-item.

  SORT gt_vbrp BY vbeln posnr.

* Copy all materials to local matnr table and select material types
  LOOP AT gt_vbrp INTO gs_vbrp.
    MOVE gs_vbrp-matnr TO ls_matnr-matnr.
    COLLECT ls_matnr INTO gt_matnr.
  ENDLOOP.

* Get raw materials
  SELECT matnr INTO TABLE gt_zdips
         FROM mara
         FOR ALL ENTRIES IN gt_matnr
         WHERE matnr = gt_matnr-matnr
           AND mtart = 'ZDIP'.

  SORT gt_zdips.
  LOOP AT gt_rrb_reposta_cogs ASSIGNING <fs_rrb_reposta>
                         WHERE reposted = ' '   "Only to be reposted
                           AND cancel_doc = ' '.
*   First check if any parts to repost
    LOOP AT gt_vbrp INTO gs_vbrp WHERE vbeln = <fs_rrb_reposta>-invoice
                                   AND posnr = <fs_rrb_reposta>-item.
      READ TABLE gt_zdips INTO ls_parts
                 WITH KEY matnr = gs_vbrp-matnr.
      "       No spare part so no reposting for this item
      IF sy-subrc NE 0.
        DELETE gt_vbrp WHERE vbeln = gs_vbrp-vbeln
                         AND posnr = gs_vbrp-posnr.
      ENDIF.
    ENDLOOP.
  ENDLOOP.

  LOOP AT gt_vbrp INTO gs_vbrp.

    CLEAR: gs_dmr,ls_ce11000.
    MOVE: p_bukrs         TO gs_dmr-bukrs,
          gs_vbrp-vgbel   TO gs_dmr-vbeln,
          gs_vbrp-vgpos   TO gs_dmr-posnr,
          gs_vbrp-vbelv   TO gs_dmr-vgbel,
          gs_vbrp-posnv   TO gs_dmr-vgpos.
    CLEAR: ls_rrb_reposta.
    SELECT SINGLE matnr werks vkorg_auft vtweg_auft
      INTO (gs_dmr-matnr , gs_dmr-werks , lv_vkorg, lv_vtweg)
      FROM vbrp
      WHERE vbeln = gs_vbrp-vbeln
        AND posnr = gs_vbrp-uepos.

    READ TABLE gt_rrb_reposta_cogs INTO ls_rrb_reposta
      WITH KEY invoice = gs_vbrp-vbeln
               item    = gs_vbrp-posnr.
    IF sy-subrc = 0.
      READ TABLE gt_ce11000 INTO ls_ce11000
        WITH KEY kaufn = ls_rrb_reposta-sales_order
                 kdpos = ls_rrb_reposta-sales_item.
    ENDIF.

    SELECT SINGLE prodh
      INTO lv_prodh
      FROM mvke
      WHERE   matnr = gs_dmr-matnr
       AND    vkorg = lv_vkorg
       AND    vtweg = lv_vtweg.
    CONDENSE lv_prodh.
    IF lv_prodh(2) = '85'.
      APPEND ls_rrb_reposta TO gt_rrb_reposta_ingn.
      CONTINUE.
    ENDIF.

    SELECT SINGLE fkart
      INTO gs_dmr-fkart
      FROM vbrk
      WHERE vbeln = gs_vbrp-vbeln.

    SELECT SINGLE netwr wavwr stcur waerk
           INTO CORRESPONDING FIELDS OF gs_dmr
           FROM vbap
           WHERE vbeln = gs_vbrp-vgbel
             AND posnr = gs_vbrp-vgpos.
    gs_dmr-netwr = ls_ce11000-cst_amt.
    gs_dmr-waerk = ls_ce11000-rec_waers.
    gs_dmr-vv300 = ls_ce11000-vv300.
    gs_dmr-vv400 = ls_ce11000-vv400.
    gs_dmr-vv500 = ls_ce11000-vv500.
    gs_dmr-vv600 = ls_ce11000-vv600.

    SELECT SINGLE objnr
                  prctr
           INTO CORRESPONDING FIELDS OF gs_dmr
           FROM vbap
           WHERE vbeln = gs_dmr-vgbel
             AND posnr = gs_dmr-vgpos.

*   Check settlement (Get the cobrb entry required)
    SELECT  objnr
            letja
            letpe
            paobjnr
      INTO TABLE lt_cobrb
      FROM cobrb
      WHERE objnr = gs_dmr-objnr
        AND perbz = 'PER'
        AND letja <= p_letja
        AND letpe <= p_letpe.
    IF sy-subrc NE 0.
      "      If no settlement entry found, delete the entry
      DELETE gt_vbrp WHERE vbeln = gs_vbrp-vbeln
                       AND posnr = gs_vbrp-posnr.
      CONTINUE.
    ELSE.
      SORT lt_cobrb BY letja DESCENDING
                       letpe   DESCENDING.
      READ TABLE lt_cobrb INTO ls_cobrb INDEX 1.
      gs_dmr-paobjnr = ls_cobrb-paobjnr.
    ENDIF.

*   Sales area and sold-to customer
    SELECT SINGLE vkorg
                  vtweg
                  spart
                  kunnr
           INTO CORRESPONDING FIELDS OF gs_dmr
           FROM vbak
           WHERE vbeln = gs_dmr-vgbel.

*   Customer account assignment group
    SELECT SINGLE ktgrd INTO gs_dmr-ktgrd
      FROM knvv
      WHERE kunnr = gs_dmr-kunnr
        AND vkorg = gs_dmr-vkorg
        AND vtweg = gs_dmr-vtweg
        AND spart = gs_dmr-spart.

*   Get the serial number and the equipment
    SELECT SINGLE afih~serialnr afih~equnr
           INTO CORRESPONDING FIELDS OF gs_dmr
           FROM afih
           INNER JOIN aufk
                   ON afih~aufnr EQ aufk~aufnr
           WHERE aufk~kdauf = gs_dmr-vgbel
             AND aufk~kdpos = gs_dmr-vgpos.

*   Check if the sales doc currency equal the company code currency
    IF gs_dmr-waerk <> gv_waers.
*     Convert to local currency (company currency)
      PERFORM convert_amount_int USING gs_dmr-netwr
                                       gs_dmr-waerk
                                       gs_dmr-netwr
                                       gv_waers.
    ENDIF.

*   Get actual costs
    SELECT SUM( in_wtgbtr ) INTO gs_dmr-wavwr
           FROM ad01dlief
           WHERE vbeln = gs_dmr-vbeln
             AND vbpos = gs_dmr-posnr.

    MOVE gs_vbrp-vbeln TO gs_dmr-billing_doc.
    MOVE gs_vbrp-posnr TO gs_dmr-billing_item.

    APPEND gs_dmr TO gt_dmr.

  ENDLOOP.
  SORT gt_dmr BY vgbel vgpos.
  DELETE ADJACENT DUPLICATES FROM gt_dmr COMPARING vgbel vgpos.
  IF gt_dmr IS INITIAL.
    WRITE: /, 'No invoices to be processed found(COGS Reposting)'(062).
  ENDIF.
  CLEAR: lv_itemno,lv_fldn,lv_amt.
* Now we have all the relevant DMR
* loop over all DMR's, find the new PC, PLC, GAC and PGC
* and post the adjustments against these new characteristics.
  LOOP AT gt_dmr INTO gs_dmr.
*    MOVE gs_dmr TO gs_last_dmr.
    READ TABLE gt_rrb_reposta_cogs ASSIGNING <fs_rrb_reposta>
                             WITH KEY invoice = gs_dmr-billing_doc
                                      item    = gs_dmr-billing_item.

    CLEAR:  gs_ce41000,
            gt_criteria[],
            gt_valuefield[],
            gt_accountgl[],
            gt_currencyamount[],
            gs_documentheader,
            gt_return[].

*   Profitability Segment (per invoice)
    IF <fs_rrb_reposta>-invoice NE gv_invoice_sv OR
       <fs_rrb_reposta>-sales_order NE gv_sales_order.
      CLEAR gv_paobjnr.
      SELECT SINGLE paobjnr INTO gv_paobjnr
             FROM vbrp
             WHERE vbeln   =  <fs_rrb_reposta>-invoice
               AND aubel   =  <fs_rrb_reposta>-sales_order
               AND paobjnr NE 0.
      CHECK sy-subrc = 0.
      gv_invoice_sv = <fs_rrb_reposta>-invoice.
      gv_sales_order = <fs_rrb_reposta>-sales_order.
    ENDIF.

*   Get copa ce4 key field
    SELECT SINGLE ce4key INTO gs_dmr-ce4key                 "#EC *
           FROM ce41000_acct
           WHERE aktbo   = 'X'
             AND paobjnr = gv_paobjnr
             AND pasubnr = 1.
    CHECK sy-subrc = 0.
*   Get the old characteristics from CE41000
    SELECT SINGLE * FROM ce41000                            "#EC *
           INTO gs_ce41000
           WHERE aktbo   = 'X'
             AND paobjnr = gs_dmr-ce4key
             AND pasubnr = 1.
    CHECK sy-subrc = 0.

    IF ( gs_dmr-vv300 IS INITIAL
            AND gs_dmr-vv400 IS INITIAL
            AND gs_dmr-vv500 IS INITIAL
            AND gs_dmr-vv600 IS INITIAL ).
      CONTINUE.
    ENDIF.

    PERFORM create_header.
*   Copy all the characteristics to the bapi internal table.
    IF gs_dmr-vv300 <> 0.
      lv_fldn = 'VV300'.
      lv_amt = gs_dmr-vv300.
      lv_itemno = lv_itemno + 10.
      PERFORM create_line_a USING lv_itemno lv_fldn lv_amt.
      lv_itemno = lv_itemno + 10.
      PERFORM create_line_b USING lv_itemno lv_fldn lv_amt.
      CLEAR: lv_fldn,lv_amt.
    ENDIF.
*   Copy all the characteristics to the bapi internal table.
    IF gs_dmr-vv400 <> 0.
      lv_fldn = 'VV400'.
      lv_amt = gs_dmr-vv400.
      lv_itemno = lv_itemno + 10.
      PERFORM create_line_a USING lv_itemno lv_fldn lv_amt.
      lv_itemno = lv_itemno + 10.
      PERFORM create_line_b USING lv_itemno lv_fldn lv_amt.
      CLEAR: lv_fldn,lv_amt.
    ENDIF.
*   Copy all the characteristics to the bapi internal table(VV500)
    IF gs_dmr-vv500 <> 0.
      lv_fldn = 'VV500'.
      lv_amt = gs_dmr-vv500.
      lv_itemno = lv_itemno + 10.
      PERFORM create_line_a USING lv_itemno lv_fldn lv_amt.
      lv_itemno = lv_itemno + 10.
      PERFORM create_line_b USING lv_itemno lv_fldn lv_amt.
      CLEAR: lv_fldn,lv_amt.
    ENDIF.
*   Copy all the characteristics to the bapi internal table(VV600)
    IF gs_dmr-vv600 <> 0.
      lv_fldn = 'VV600'.
      lv_amt = gs_dmr-vv600.
      lv_itemno = lv_itemno + 10.
      PERFORM create_line_a USING lv_itemno lv_fldn lv_amt.
      lv_itemno = lv_itemno + 10.
      PERFORM create_line_b USING lv_itemno lv_fldn lv_amt.
      CLEAR: lv_fldn,lv_amt.
    ENDIF.

    PERFORM execute_repost.
  ENDLOOP.
ENDFORM.                    " FRM_DO_REPOSTING_COGS
*&---------------------------------------------------------------------*
*&      Form  FRM_INITILIZATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM frm_initilization .

  REFRESH: gt_dmr ,
      gt_criteria ,
      gt_valuefield ,
      gt_accountgl ,
      gt_currencyamount ,
      gt_return ,
      gt_rrb_reposta ,       "Items to process
      gt_rrb_reposta_canc ,  "Items to cancel
      gt_rrb_reposta_comb ,  "All Items
      gt_rrb_reposta_cogs ,  " COGS repost
      gt_vbrp ,  "Invoice items
      gt_matnr ,
      gt_zdips ,
      gt_ska1i .


  CLEAR:gs_ce41000 ,
        gs_dmr,
        gs_criteria ,
        gs_valuefield ,
        gs_accountgl ,
        gs_currencyamount,
        gs_documentheader,
        gs_vbrp,               "Invoice items
        gs_return ,
        gv_objkey ,
        gv_obtype ,
        gv_obsys  ,
        gv_subrc ,
        gv_version_new ,        "Version of program
        gv_saknr ,              "Account number
        gv_fkber ,              "Functional area
        gv_invoice_sv  ,
        gv_paobjnr      ,
        gv_sales_order  .

ENDFORM.                    " FRM_INITILIZATION
*&---------------------------------------------------------------------*
*&      Form  CREATE_LINE_A
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM create_line_a USING p_item p_fieldname p_amt.

  PERFORM copy_chars USING p_item.              "Copy the chars for item 10

  CLEAR gs_valuefield.
  gs_valuefield-itemno_acc = p_item.
  gs_valuefield-fieldname = p_fieldname.
  gs_valuefield-amt_valcom = p_amt * -1.
  gs_valuefield-currency = gv_waers.
  APPEND gs_valuefield TO gt_valuefield.

  CLEAR: gs_accountgl.
  gs_accountgl-itemno_acc = p_item.
  gs_accountgl-gl_account = p_re_cos.
  gs_accountgl-item_text  = 'RRB GAC Adj'(050).
  gs_accountgl-comp_code  = p_bukrs.
  gs_accountgl-plant      = gs_ce41000-werks.
  gs_accountgl-fis_period = gv_period.
  gs_accountgl-fisc_year  = p_letja.
  gs_accountgl-pstng_date = gv_doc_date.
  CONCATENATE gs_dmr-vgbel '/' gs_dmr-vgpos
    INTO gs_accountgl-alloc_nmbr.
  gs_accountgl-profit_ctr = gs_ce41000-ww006.
  APPEND gs_accountgl TO gt_accountgl.

  CLEAR gs_currencyamount.
  gs_currencyamount-itemno_acc = p_item.
  gs_currencyamount-currency = gv_waers.
  gs_currencyamount-amt_doccur = p_amt * -1.
  APPEND gs_currencyamount TO gt_currencyamount.

ENDFORM.                    " CREATE_LINE_A
*&---------------------------------------------------------------------*
*&      Form  CREATE_LINE_B
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM create_line_b USING p_item p_fieldname p_amt.

  PERFORM copy_chars USING p_item.              "Copy the chars for item 30

  PERFORM rrb_pc_derivation USING p_item.

  gs_valuefield-itemno_acc = p_item.
  gs_valuefield-fieldname = p_fieldname.
  gs_valuefield-amt_valcom = p_amt .
  gs_valuefield-currency = gv_waers.
  APPEND gs_valuefield TO gt_valuefield.

  CLEAR: gs_accountgl.
  gs_accountgl-itemno_acc = p_item.
  gs_accountgl-gl_account = p_costs.
  gs_accountgl-item_text  = 'RRB GAC Adj'(050).
  gs_accountgl-comp_code  = p_bukrs.
  gs_accountgl-plant      = gs_ce41000-werks.
  gs_accountgl-fis_period = gv_period.
  gs_accountgl-fisc_year  = p_letja.
  gs_accountgl-pstng_date = gv_doc_date.
  CONCATENATE gs_dmr-vgbel '/' gs_dmr-vgpos
    INTO gs_accountgl-alloc_nmbr.
  READ TABLE gt_criteria INTO gs_criteria
    WITH KEY  itemno_acc = p_item
              fieldname = 'PRCTR'.
  gs_accountgl-profit_ctr = gs_criteria-character.
  APPEND gs_accountgl TO gt_accountgl.

  CLEAR gs_currencyamount.
  gs_currencyamount-itemno_acc = p_item.
  gs_currencyamount-currency = gv_waers.
  gs_currencyamount-amt_doccur = p_amt .
  APPEND gs_currencyamount TO gt_currencyamount.

ENDFORM.                    " CREATE_LINE_B
*&---------------------------------------------------------------------*
*&      Form  FRM_UPDATE_IGNORE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM frm_update_ignore .

  FIELD-SYMBOLS: <lfs_rrb_reposta> TYPE yse_rrb_reposta.

  IF NOT gt_rrb_reposta_ingn[] IS INITIAL.
    LOOP AT gt_rrb_reposta_ingn ASSIGNING <lfs_rrb_reposta>.
      <lfs_rrb_reposta>-reposted2 = 'X'.
      <lfs_rrb_reposta>-reposted  = 'X'.
      <lfs_rrb_reposta>-redat    = sy-datum.
      <lfs_rrb_reposta>-rezet    = sy-timlo.
    ENDLOOP.
    MODIFY yse_rrb_reposta FROM TABLE gt_rrb_reposta_ingn.
    COMMIT WORK.
  ENDIF.

ENDFORM.                    " FRM_UPDATE_IGNORE
