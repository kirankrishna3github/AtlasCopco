*&---------------------------------------------------------------------*
*&  Include           YSE_VISA_AB_REPORT_FORMS                         *
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  DATA_GET
*&---------------------------------------------------------------------*
FORM DATA_GET .

  DATA:
    BEGIN OF WA_EBELN OCCURS 0,
      EBELN LIKE IT_OUT-EBELN,
    END OF WA_EBELN,
    LT_EBELN_ZNB3  LIKE TABLE OF WA_EBELN,
    LT_EBELN_ZNB2  LIKE TABLE OF WA_EBELN,
    LT_EBELN_ZNB23 LIKE TABLE OF WA_EBELN,
    LT_EBELN_ALL   LIKE TABLE OF WA_EBELN.

* Get confirmations from YSE_VISA_AB_HIST and join with EKKO and EKPO
  SELECT      YSE_VISA_AB_HIST~MANDT
              DOCNUM
              YSE_VISA_AB_HIST~EBELN
              YSE_VISA_AB_HIST~EBELP
              CREDAT CRETIM EBTYP
              YSE_VISA_AB_HIST~MATNR
              BSTMG  EINDT
              YSE_VISA_AB_HIST~BUKRS
              YSE_VISA_AB_HIST~EKORG
              IDTNR  YSE_VISA_AB_HIST~XBLNR  BBEIN  WMENG
              BBMNG
              YSE_VISA_AB_HIST~PLIFZ
              YSE_VISA_AB_HIST~MEINS
              ERDAT  ERZEIT
              YSE_VISA_AB_HIST~AEDAT
              AEZEIT
              YSE_VISA_AB_HIST~STATUS
              TEXT   BSART
              EKGRP  LIFNR WERKS TXZ01 as MAKTX
              AFNAM  YSE_PO_CONFIRM~ZZEINDT
         INTO TABLE IT_AB_CONF
         FROM YSE_VISA_AB_HIST
         JOIN EKKO
           ON YSE_VISA_AB_HIST~EBELN  EQ EKKO~EBELN
         JOIN EKPO
           ON YSE_VISA_AB_HIST~EBELN  EQ EKPO~EBELN
          AND YSE_VISA_AB_HIST~EBELP  EQ EKPO~EBELP
         JOIN YSE_PO_CONFIRM
           ON YSE_VISA_AB_HIST~EBELN  EQ YSE_PO_CONFIRM~EBELN
          AND YSE_VISA_AB_HIST~EBELP  EQ YSE_PO_CONFIRM~EBELP
        WHERE YSE_VISA_AB_HIST~STATUS EQ '40'
          AND ERDAT                   IN S_ERDAT
          AND YSE_VISA_AB_HIST~EBELN  IN S_EBELN
          AND BSART                   IN S_BSART
          AND YSE_VISA_AB_HIST~EKORG  IN S_EKORG
          AND YSE_VISA_AB_HIST~BUKRS  IN S_BUKRS
          AND EKGRP                   IN S_EKGRP
          AND LIFNR                   IN S_LIFNR
          AND WERKS                   IN S_WERKS
          AND EINDT                   IN S_EINDT
          AND EKPO~LOEKZ              EQ SPACE.
* Don't do next steps if nothing was returned
  CHECK SY-SUBRC EQ 0.
* Sort table
  SORT IT_AB_CONF BY EBELN EBELP DOCNUM.

* First build tables of PO's according to PO type
  LOOP AT IT_AB_CONF.
    WA_EBELN-EBELN = IT_AB_CONF-EBELN.
    IF IT_AB_CONF-BSART EQ 'ZNB3'.
      APPEND WA_EBELN TO LT_EBELN_ZNB3.
      APPEND WA_EBELN TO LT_EBELN_ZNB23.
      APPEND WA_EBELN TO LT_EBELN_ALL.
    ELSEIF IT_AB_CONF-BSART EQ 'ZNB2'.
      APPEND WA_EBELN TO LT_EBELN_ZNB2.
      APPEND WA_EBELN TO LT_EBELN_ZNB23.
      APPEND WA_EBELN TO LT_EBELN_ALL.
    ELSE.
      APPEND WA_EBELN TO LT_EBELN_ALL.
    ENDIF.
  ENDLOOP.
  SORT:
    LT_EBELN_ZNB2  BY EBELN,
    LT_EBELN_ZNB3  BY EBELN,
    LT_EBELN_ZNB23 BY EBELN,
    LT_EBELN_ALL   BY EBELN.
  DELETE ADJACENT DUPLICATES FROM:
    LT_EBELN_ZNB2,
    LT_EBELN_ZNB3,
    LT_EBELN_ZNB23,
    LT_EBELN_ALL.

* Get full history of the PO's involved
  IF NOT LT_EBELN_ALL[] IS INITIAL.
    SELECT      *
           INTO TABLE IT_AB_HIST
           FROM YSE_VISA_AB_HIST
            FOR ALL ENTRIES IN LT_EBELN_ALL
          WHERE EBELN                   EQ LT_EBELN_ALL-EBELN
            AND YSE_VISA_AB_HIST~STATUS EQ '40'.
*   Sort table
    SORT IT_AB_HIST BY EBELN EBELP DOCNUM.
  ENDIF.

* Get SDI data for ZNB2 PO's
  IF NOT LT_EBELN_ZNB2[] IS INITIAL.
    SELECT      EBELN
                EBELP
                ZEKKN
                VBELN
                VBELP
           INTO TABLE IT_EKKN
           FROM EKKN
            FOR ALL ENTRIES IN LT_EBELN_ZNB2
          WHERE EBELN EQ LT_EBELN_ZNB2-EBELN
            AND LOEKZ EQ SPACE.
*   Sort table
    SORT IT_EKKN BY EBELN EBELP.
  ENDIF.

* Get SDI data for ZNB3 PO's
  IF NOT LT_EBELN_ZNB3[] IS INITIAL.
    SELECT      RSDBS~EBELN
                RSDBS~EBELP
                RSDBS~BANFN
                RSDBS~BNFPO
                RSDBS~RSNUM
                RSDBS~RSPOS
                RSDBS~RSART
                RSDBS~RSINZ
                YSE_VBAP_RESB~VBELN
                YSE_VBAP_RESB~POSNR
           INTO TABLE IT_SDI
           FROM RSDBS
           JOIN YSE_VBAP_RESB
             ON RSDBS~RSNUM EQ YSE_VBAP_RESB~RSNUM
            AND RSDBS~RSPOS EQ YSE_VBAP_RESB~RSPOS
            FOR ALL ENTRIES IN LT_EBELN_ZNB3
          WHERE RSDBS~EBELN EQ LT_EBELN_ZNB3-EBELN.
*   Sort table
    SORT IT_SDI BY EBELN EBELP.
  ENDIF.

  IF NOT LT_EBELN_ALL[] IS INITIAL.
*   Get existing deliveries for all PO's
    SELECT      EBELN EBELP ETENS EBTYP VBELN VBELP EINDT MENGE
           INTO TABLE IT_EKES
           FROM EKES
            FOR ALL ENTRIES IN LT_EBELN_ALL
          WHERE EBELN EQ LT_EBELN_ALL-EBELN
            AND EBTYP EQ 'LA'.
*   Sort table
    SORT IT_EKES BY EBELN ASCENDING EBELP ASCENDING EINDT DESCENDING.

*   Get GR information from EKBE (history)
    SELECT      EBELN EBELP ZEKKN VGABE GJAHR BELNR BUZEI BUDAT MENGE BWART
           INTO TABLE IT_EKBE
           FROM EKBE
            FOR ALL ENTRIES IN LT_EBELN_ALL
          WHERE EBELN EQ LT_EBELN_ALL-EBELN
            AND ( BWART EQ '101' OR BWART EQ '102' ).
    SORT IT_EKBE BY EBELN ASCENDING
                    EBELP ASCENDING
                    BWART ASCENDING
                    BUDAT DESCENDING.
  ENDIF.

ENDFORM.                    " DATA_GET

*&---------------------------------------------------------------------*
*&      Form  DATA_PROCESS
*&---------------------------------------------------------------------*
FORM DATA_PROCESS .

  DATA:
    BEGIN OF LV_STRUC, " STS4_DURATIONSTRUC Copied from conversion routine CONVERSION_EXIT_TSTRG_OUTPUT
      HOURS(7)   TYPE N,
      MINUTES(2) TYPE N,
      SECONDS(2) TYPE N,
      SIGN       TYPE C,
    END   OF LV_STRUC,
    LS_OUT LIKE LINE OF IT_OUT.

* If "details" flag is not set, sort to skip all lines but last per PO item (based on docnum)
  IF P_DETAIL IS INITIAL.
    SORT IT_AB_CONF BY EBELN  ASCENDING
                       EBELP  ASCENDING
                       DOCNUM DESCENDING.
  ENDIF.

* Get preceding SalesOrders / ASSOrders for ZNB2 and ZNB3 PO's
  LOOP AT IT_AB_CONF.
*   If "details" flag is not set
    IF P_DETAIL IS INITIAL.
*     Check if this is the last conf for the PO item
      IF LS_OUT-EBELN EQ IT_AB_CONF-EBELN AND LS_OUT-EBELP EQ IT_AB_CONF-EBELP.
        CONTINUE.
      ELSE.
        LS_OUT-EBELN = IT_AB_CONF-EBELN.
        LS_OUT-EBELP = IT_AB_CONF-EBELP.
      ENDIF.
    ENDIF.
*   Initialize out structure
    CLEAR IT_OUT.
*   Move corresponding fields from confirmation line to out struct
    MOVE-CORRESPONDING IT_AB_CONF TO IT_OUT.
*   Calculate delta compared to prev conf
    PERFORM CALC_DELTA.
*   Check delta is in allowed range
    CHECK IT_OUT-CDDELTA IN S_CDD.
*   Calculate delta compared to PO requested date
    IT_OUT-CDDELTAPO = IT_OUT-BBEIN - IT_OUT-EINDT.
*   Check delta PO is in allowed range
    CHECK IT_OUT-CDDELTAPO IN S_CDDPO.
*   Calculate delta compared with first confirmation date
    IT_OUT-CDDELTAFIRST = IT_OUT-BBEIN - IT_OUT-ZZEINDT.
*   Move Lead time to out struct
    IT_OUT-PLIFZ_VE = IT_AB_CONF-PLIFZ.
*   Set sales order number
    PERFORM SET_SDI.
*   Check SDI is in allowed range
    CHECK IT_OUT-VBELN IN S_VBELN.
*   Set Service order number
    PERFORM SET_AUFNR.
*   Check Service order number is in allowed range
    CHECK IT_OUT-AUFNR IN S_AUFNR.
*   Set Delivery information
    PERFORM SET_EKES_DATA.
*   Set Goods receipted information
    PERFORM SET_EKBE_DATA.
*   Insert output structure
    APPEND IT_OUT.
  ENDLOOP.

  IF NOT IT_OUT[] IS INITIAL.
*   Get sales details for determined SalesOrders (Get Sales group and other SD details)
    PERFORM DATA_GET_SD_DATA.
*   Get notification creator for found Service orders
    PERFORM DATA_GET_NOTIF_DATA.
*   Get Goods issue data
    PERFORM DATA_GET_GI_DATA.
  ENDIF.

* Complete IT_OUT with newly selected data
  LOOP AT IT_OUT.
*   Set SDoc details
    PERFORM SET_SD_DATA.
*   Check Sales group is in allowed range
    IF NOT IT_OUT-VKGRP IN S_VKGRP.
      DELETE IT_OUT.
      CONTINUE.
    ENDIF.
*   Set Notification creator
    PERFORM SET_NOTIF_DATA.
*   Check Creator ServNot is in allowed range
    IF NOT IT_OUT-ERNAM IN S_ERNAM.
      DELETE IT_OUT.
      CONTINUE.
    ENDIF.
*   Set GI data
    PERFORM SET_GI_DATA.
*   Get Customer requested delivery date
    PERFORM DATA_GET_CUST_REQ_DATE.
*   Calculate confirmed date to customer (only for ZNB2 and ZNB3 orders)
    IF IT_OUT-BSART EQ 'ZNB2' OR IT_OUT-BSART EQ 'ZNB3'.
      LV_STRUC = IT_OUT-PLIFZ_EC.
      IT_OUT-BBEIN_CUST = IT_OUT-BBEIN + IT_OUT-PLIFZ_VE + ( LV_STRUC-HOURS / 24 ).
    ENDIF.
*   Modify output structure
    MODIFY IT_OUT.
  ENDLOOP.

ENDFORM.                    " DATA_PROCESS

*&---------------------------------------------------------------------*
*&      Form  CALC_DELTA
*&---------------------------------------------------------------------*
FORM CALC_DELTA .

** Find confirmation preceding the current one
*  LOOP AT IT_AB_HIST WHERE EBELN  EQ IT_AB_CONF-EBELN
*                       AND EBELP  EQ IT_AB_CONF-EBELP
*                       AND DOCNUM LT IT_AB_CONF-DOCNUM.
*    EXIT.
*  ENDLOOP.

* The above is not performant when processing many entries. Therefore
* trying a new approach
  DATA:
    LV_TABIX LIKE SY-TABIX.

* Find current entry in history table
  READ TABLE IT_AB_HIST WITH KEY EBELN  = IT_AB_CONF-EBELN
                                 EBELP  = IT_AB_CONF-EBELP
                                 DOCNUM = IT_AB_CONF-DOCNUM
                        BINARY SEARCH.
* Don't proceed if entry not found, or when entry is the first one
  CHECK:
    SY-SUBRC EQ 0,
    SY-TABIX GT 1.
* Read previous entry
  LV_TABIX = SY-TABIX - 1.
  READ TABLE IT_AB_HIST INDEX LV_TABIX.
* If found and if previous entry still covers the same PO item
  IF       SY-SUBRC EQ 0
       AND IT_AB_HIST-EBELN = IT_AB_CONF-EBELN
       AND IT_AB_HIST-EBELP = IT_AB_CONF-EBELP.
*   Calculate delta
    IT_OUT-CDDELTA =   IT_AB_CONF-BBEIN
                     - IT_AB_HIST-BBEIN.
  ENDIF.

ENDFORM.                    " CALC_DELTA

*&---------------------------------------------------------------------*
*&      Form  SET_SDI
*&---------------------------------------------------------------------*
FORM SET_SDI .

  IF IT_OUT-BSART EQ 'ZNB2'.
    READ TABLE IT_EKKN WITH KEY EBELN = IT_OUT-EBELN
                                EBELP = IT_OUT-EBELP
                       BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      IT_OUT-VBELN = IT_EKKN-VBELN.
      IT_OUT-POSNR = IT_EKKN-VBELP.
    ENDIF.
  ELSEIF IT_OUT-BSART EQ 'ZNB3'.
    READ TABLE IT_SDI WITH KEY EBELN = IT_OUT-EBELN
                               EBELP = IT_OUT-EBELP
                      BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      IT_OUT-VBELN = IT_SDI-VBELN.
      IT_OUT-POSNR = IT_SDI-POSNR.
    ENDIF.
  ENDIF.

ENDFORM.                    " SET_SDI

*&---------------------------------------------------------------------*
*&      Form  SET_AUFNR
*&---------------------------------------------------------------------*
FORM SET_AUFNR .

  IF IT_OUT-BSART EQ 'ZNB3'.
    IT_OUT-AUFNR = IT_AB_CONF-AFNAM+2(10).
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT         = IT_OUT-AUFNR
      IMPORTING
        OUTPUT        = IT_OUT-AUFNR.
  ENDIF.

ENDFORM.                    " SET_AUFNR

*&---------------------------------------------------------------------*
*&      Form  SET_EKES_DATA
*&---------------------------------------------------------------------*
FORM SET_EKES_DATA .

  DATA:
    LV_FIRST TYPE C,
    LV_TABIX LIKE SY-TABIX.

  LV_FIRST =  'X'.
* Read first entry for the current PO combination
  READ TABLE IT_EKES WITH KEY EBELN = IT_OUT-EBELN
                              EBELP = IT_OUT-EBELP
                     BINARY SEARCH.
* Don't continue if no entry found at all
  CHECK SY-SUBRC EQ 0.
* Start processing the confirmations in EKES from read position until we
* reach another PO
  LV_TABIX = SY-TABIX.
  WHILE SY-SUBRC      EQ 0
    AND IT_EKES-EBELN EQ IT_OUT-EBELN
    AND IT_EKES-EBELP EQ IT_OUT-EBELP.
*   If this is the first (actually last) LA delivery
    IF LV_FIRST NE SPACE.
*     Keep delivery number
      CLEAR LV_FIRST.
      IT_OUT-VBELN_VL   = IT_EKES-VBELN.
      IT_OUT-POSNR_VL   = IT_EKES-VBELP.
      IT_OUT-LATEST_ETA = IT_EKES-EINDT.
    ENDIF.
*   Accumulate delivered qty
    IT_OUT-CUM_SH_QTY   = IT_OUT-CUM_SH_QTY + IT_EKES-MENGE.
*   Increment tabix
    LV_TABIX = LV_TABIX + 1.
*   Read the next LA line
    READ TABLE IT_EKES INDEX LV_TABIX.
  ENDWHILE.

ENDFORM.                    " SET_EKES_DATA

*&---------------------------------------------------------------------*
*&      Form  SET_EKBE_DATA
*&---------------------------------------------------------------------*
FORM SET_EKBE_DATA .

  DATA:
    LV_FIRST TYPE C,
    LV_TABIX LIKE SY-TABIX.

  LV_FIRST =  'X'.
* Read first entry for the current PO combination
  READ TABLE IT_EKBE WITH KEY EBELN = IT_OUT-EBELN
                              EBELP = IT_OUT-EBELP
                     BINARY SEARCH.
* Don't continue if no entry found at all
  CHECK SY-SUBRC EQ 0.
* Start processing the lines in EKBE from read position until we
* reach another PO
  LV_TABIX = SY-TABIX.
  WHILE SY-SUBRC      EQ 0
    AND IT_EKBE-EBELN EQ IT_OUT-EBELN
    AND IT_EKBE-EBELP EQ IT_OUT-EBELP.

    IF IT_EKBE-BWART EQ '101'.
*     If this is the first (actually last) line
      IF LV_FIRST NE SPACE.
        CLEAR LV_FIRST.
        IT_OUT-BUDAT_GR   = IT_EKBE-BUDAT.
      ENDIF.
      IT_OUT-MENGE_GR     = IT_OUT-MENGE_GR + IT_EKBE-MENGE.
    ELSEIF IT_EKBE-BWART EQ '102'.
      IT_OUT-MENGE_GR     = IT_OUT-MENGE_GR - IT_EKBE-MENGE.
    ENDIF.

*   Increment tabix
    LV_TABIX = LV_TABIX + 1.
*   Read the next LA line
    READ TABLE IT_EKES INDEX LV_TABIX.
  ENDWHILE.

ENDFORM.                    " SET_EKBE_DATA

*&---------------------------------------------------------------------*
*&      Form  DATA_GET_SD_DATA
*&---------------------------------------------------------------------*
FORM DATA_GET_SD_DATA .

* Get SD details.
  SELECT        VBAK~VBELN VBAP~POSNR VKGRP LIFSK CMGST TRAZTD AS PLIFZ_EC
           INTO TABLE IT_VBAKUKAP
           FROM VBAK
           JOIN VBUK
             ON VBAK~VBELN EQ VBUK~VBELN
           JOIN VBAP
             ON VBAK~VBELN EQ VBAP~VBELN
           JOIN TVRO
             ON VBAP~ROUTE EQ TVRO~ROUTE
            FOR ALL ENTRIES IN IT_OUT
          WHERE VBAP~VBELN EQ IT_OUT-VBELN
            AND VBAP~POSNR EQ IT_OUT-POSNR.
  SORT IT_VBAKUKAP BY VBELN POSNR.

ENDFORM.                    " DATA_GET_SD_DATA

*&---------------------------------------------------------------------*
*&      Form  DATA_GET_NOTIF_DATA
*&---------------------------------------------------------------------*
FORM DATA_GET_NOTIF_DATA .

* Get notification data
  SELECT        QMNUM AUFNR ERNAM
           INTO TABLE IT_QMEL
           FROM QMEL
            FOR ALL ENTRIES IN IT_OUT
          WHERE AUFNR NE SPACE
            AND AUFNR EQ IT_OUT-AUFNR.
  SORT IT_QMEL BY AUFNR.

ENDFORM.                    " DATA_GET_NOTIF_DATA

*&---------------------------------------------------------------------*
*&      Form  DATA_GET_GI_DATA
*&---------------------------------------------------------------------*
FORM DATA_GET_GI_DATA .

* Get GI dates
  SELECT      VBELV POSNV VBFA~VBELN POSNN VBTYP_N WADAT_IST
         INTO TABLE IT_VBFA_LIKP
         FROM VBFA
         JOIN LIKP
           ON VBFA~VBELN EQ LIKP~VBELN
          FOR ALL ENTRIES IN IT_OUT
        WHERE VBELV   EQ IT_OUT-VBELN
          AND POSNV   EQ IT_OUT-POSNR
          AND VBTYP_N EQ 'J'.
  SORT IT_VBFA_LIKP BY VBELV ASCENDING
                       POSNV ASCENDING
                       WADAT_IST DESCENDING.

* Get GI quantities
  SELECT      VBELV POSNV VBELN POSNN VBTYP_N RFMNG
         INTO TABLE IT_VBFA
         FROM VBFA
          FOR ALL ENTRIES IN IT_OUT
        WHERE VBELV   EQ IT_OUT-VBELN
          AND POSNV   EQ IT_OUT-POSNR
          AND ( VBTYP_N EQ 'R' OR VBTYP_N EQ 'h' ).

ENDFORM.                    " DATA_GET_GI_DATA

*&---------------------------------------------------------------------*
*&      Form  SET_SD_DATA
*&---------------------------------------------------------------------*
FORM SET_SD_DATA .

  READ TABLE IT_VBAKUKAP WITH KEY VBELN = IT_OUT-VBELN
                                  POSNR = IT_OUT-POSNR
                         BINARY SEARCH.
  IF SY-SUBRC EQ 0.
    MOVE-CORRESPONDING IT_VBAKUKAP TO IT_OUT.
  ENDIF.

ENDFORM.                    " SET_SD_DATA

*&---------------------------------------------------------------------*
*&      Form  SET_NOTIF_DATA
*&---------------------------------------------------------------------*
FORM SET_NOTIF_DATA .

* Don't get details for notification if no service order is provided
  CHECK NOT IT_OUT-AUFNR IS INITIAL.
* Get notification data
  READ TABLE IT_QMEL WITH KEY AUFNR = IT_OUT-AUFNR
                     BINARY SEARCH.
  IF SY-SUBRC EQ 0.
    IT_OUT-ERNAM = IT_QMEL-ERNAM.
  ENDIF.

ENDFORM.                    " SET_NOTIF_DATA

*&---------------------------------------------------------------------*
*&      Form  SET_GI_DATA
*&---------------------------------------------------------------------*
FORM SET_GI_DATA .

* Find latest GI date
  LOOP AT IT_VBFA_LIKP WHERE VBELV EQ IT_OUT-VBELN
                         AND POSNV EQ IT_OUT-POSNR.
    EXIT.
  ENDLOOP.
  IF SY-SUBRC EQ 0.
    IT_OUT-BUDAT_GI = IT_VBFA_LIKP-WADAT_IST.
  ENDIF.

* Calculate Cumulative GI qty
  LOOP AT IT_VBFA WHERE VBELV EQ IT_OUT-VBELN
                    AND POSNV EQ IT_OUT-POSNR.
    IF IT_VBFA-VBTYP_N EQ 'R'.
      IT_OUT-MENGE_GI = IT_OUT-MENGE_GI + IT_VBFA-RFMNG.
    ELSEIF IT_VBFA-VBTYP_N EQ 'h'.
      IT_OUT-MENGE_GI = IT_OUT-MENGE_GI - IT_VBFA-RFMNG.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " SET_GI_DATA

*&---------------------------------------------------------------------*
*&      Form  DATA_GET_CUST_REQ_DATE
*&---------------------------------------------------------------------*
FORM DATA_GET_CUST_REQ_DATE .

  IF IT_OUT-BSART EQ 'ZNB2'.

    CHECK:
      NOT IT_OUT-VBELN IS INITIAL,
      NOT IT_OUT-POSNR IS INITIAL.

    SELECT SINGLE EDATU
             INTO IT_OUT-EDATU
             FROM VBEP
            WHERE VBELN EQ IT_OUT-VBELN
              AND POSNR EQ IT_OUT-POSNR
              AND ETENR EQ '0001'.

  ELSEIF IT_OUT-BSART = 'ZNB3'.

    CHECK NOT IT_OUT-AUFNR IS INITIAL.

    SELECT SINGLE STRMN
             INTO IT_OUT-EDATU
             FROM QMEL
            WHERE AUFNR EQ IT_OUT-AUFNR.

  ENDIF.

ENDFORM.                    " DATA_GET_CUST_REQ_DATE

*&---------------------------------------------------------------------*
*&      Form  S0100_DOUBLE_CLICK
*&---------------------------------------------------------------------*
FORM S0100_DOUBLE_CLICK  USING    P_ROW
                                  P_COLUMN
                                  P_ROW_NO.

  DATA:
    LS_OUT LIKE LINE OF IT_OUT.

* Read clicked row into local structure
  READ TABLE IT_OUT INTO LS_OUT INDEX P_ROW.
  CHECK SY-SUBRC EQ 0.

* Depending on the column which is double-clicked
  CASE P_COLUMN.
*   When PO or PO Item
    WHEN 'EBELN' OR 'EBELP'.
      SET PARAMETER ID 'BES' FIELD LS_OUT-EBELN.
      CALL TRANSACTION 'ME23N'.
*   When sales order or item
    WHEN 'VBELN' OR 'POSNR'.
      CHECK NOT LS_OUT-VBELN IS INITIAL.
      SET PARAMETER ID 'AUN' FIELD LS_OUT-VBELN.
      CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.
    WHEN 'AUFNR'.
      CHECK NOT LS_OUT-AUFNR IS INITIAL.
      SET PARAMETER ID 'ANR' FIELD LS_OUT-AUFNR.
      CALL TRANSACTION 'IW33' AND SKIP FIRST SCREEN.
  ENDCASE. " P_COLUMN.

ENDFORM.                    " S0100_DOUBLE_CLICK

*&---------------------------------------------------------------------*
*&      Form  CHECK_AUTH
*&---------------------------------------------------------------------*
FORM CHECK_AUTH .

  DATA:
    IT_T024E TYPE T024E OCCURS 0 WITH HEADER LINE.

* First get all purchase organizations matching the selection criteria
  SELECT      *
         FROM T024E
         INTO TABLE IT_T024E
        WHERE EKORG IN S_EKORG.

* For every of the purch org's matching the criteria
  LOOP AT IT_T024E.

*   Check if sufficient authorization in current purch org
    AUTHORITY-CHECK OBJECT 'M_BEST_EKO'
                        ID 'EKORG' FIELD IT_T024E-EKORG
                        ID 'ACTVT' FIELD '01'.

    IF SY-SUBRC = 4.
*     No authorisation to display the data
      MESSAGE ID 'YSE_RENTAL' TYPE 'E' NUMBER '080' WITH IT_T024E-EKORG.
    ELSEIF SY-SUBRC <> 0.
*     Error checking authorization.
      MESSAGE ID 'YSE_RENTAL' TYPE 'E' NUMBER '046'.
    ENDIF.

  ENDLOOP.

ENDFORM.                    " CHECK_AUTH
