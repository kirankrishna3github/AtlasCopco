*&---------------------------------------------------------------------*
*&  Include           YSE_SD_KP03_RPT_DATASEL                          *
*&---------------------------------------------------------------------*
*----------------------------------------------------------------------*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
* MOD. NO.|  DATE     | NAME     |CORRECTION NUMBER| CHANGE REFERENCE# *
*----------------------------------------------------------------------*
* MOD001  | 07.07.2008| UZZAWAL |                  | CD1K941851        *
************************************************************************



***************************************************************************
*START-OF-SELECTION.
***************************************************************************

*START-OF-SELECTION.
*&---------------------------------------------------------------------*
*&      Form  select_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SELECT_DATA.

  DATA: LT_VBAK2 LIKE IT_VBAK OCCURS 0 WITH HEADER LINE,
        LT_VBAK3 LIKE IT_VBAK OCCURS 0 WITH HEADER LINE,
        LT_VBAK4 LIKE IT_VBAK OCCURS 0 WITH HEADER LINE,
        LT_VBAK5 LIKE IT_VBAK OCCURS 0 WITH HEADER LINE,
        LT_VBAK6 LIKE IT_VBAK OCCURS 0 WITH HEADER LINE,
        LT_VBAK7 LIKE IT_VBAK OCCURS 0 WITH HEADER LINE,
        LT_VBAK8 LIKE IT_VBAK OCCURS 0 WITH HEADER LINE.

  DATA: LT_UUSTOCK_TMP TYPE STANDARD TABLE OF GTY_UUSTOCK,
        LS_UUSTOCK TYPE GTY_UUSTOCK.

  R_LFGSA-SIGN = 'I'.
  R_LFGSA-OPTION = 'EQ'.
  R_LFGSA-LOW = 'A'.
  APPEND R_LFGSA.
  R_LFGSA-LOW = 'B'.
  APPEND R_LFGSA.

*----------------------------------------------------
*Select vbak, vbap, vbup
*For the requested delivery date we can select from VBAK, because it is always the first line
*for field VBEP-EDATU
  SELECT VBAK~VBELN VBAK~AUART VBAK~VKORG VBAK~VTWEG VBAK~AUGRU
         VBAP~POSNR VBAP~WERKS VBAP~MATNR VBAP~MATKL VBAP~PRODH VBAP~BWTAR VBAP~LGORT
         YSE_EM_PLANT~WHTYPE
         VBAK~WAERK
         VBUK~CMGST
         VBUP~LFGSA VBUK~LSSTK
         VBUK~FSSTK                                         "DUD080310
         VBAK~VSBED
         VBAK~KUNNR
         VBAK~VKBUR
         VBAK~VKGRP
         VBAK~KVGR4                                         "+Mod-002 (Satya)
         VBAK~ERNAM                                         "+Mod-003 (Satya)
         VBAP~PSTYV                                         "+Mod-005 (Nanda)
     INTO TABLE IT_VBAK
     FROM VBAK
     JOIN VBUK  ON VBUK~VBELN = VBAK~VBELN
     JOIN VBAP  ON VBAP~VBELN = VBAK~VBELN
     JOIN VBUP  ON VBUP~VBELN = VBAP~VBELN
               AND VBUP~POSNR = VBAP~POSNR
     JOIN MARA  ON MARA~MATNR = VBAP~MATNR
     LEFT JOIN YSE_EM_PLANT ON YSE_EM_PLANT~WERKS = VBAP~WERKS
     WHERE          VBAK~AUART IN SO_AUART
                AND VBAK~VKORG IN SO_VKORG
                AND VBAK~VTWEG IN SO_VTWEG
*               AND vbak~VDATU IN SO_VDATU
                AND VBAK~AUGRU IN SO_AUGRU
                AND VBAP~WERKS IN SO_WERKS
                AND VBAP~LGORT IN SO_LGORT                  "DUD080310
                AND VBAP~MATKL IN SO_MATKL
                AND VBUP~LFGSA IN R_LFGSA
                AND MARA~MTART IN SO_MTART.


  CHECK SY-SUBRC = 0.

*Get the sales district
  SELECT VBELN POSNR VBKD~BZIRK BZTXT
    INTO TABLE GT_VBKD
    FROM VBKD INNER JOIN T171T"#EC CI_BUFFJOIN
    ON VBKD~BZIRK = T171T~BZIRK
    FOR ALL ENTRIES IN IT_VBAK
    WHERE VBKD~VBELN EQ IT_VBAK-VBELN
      AND VBKD~POSNR EQ IT_VBAK-POSNR
      AND T171T~SPRAS EQ 'E'.

*----------------------------------------------------
  LT_VBAK2[] = IT_VBAK[].
  SORT LT_VBAK2 BY MATNR WERKS.
  DELETE ADJACENT DUPLICATES FROM LT_VBAK2 COMPARING MATNR WERKS.
*Fill the MARC data
  SELECT MARC~MATNR MARC~WERKS MARC~PRCTR MARC~DISMM MARC~EISBE
         FROM MARC
         INTO TABLE IT_MARC
         FOR ALL ENTRIES IN LT_VBAK2
         WHERE MARC~MATNR = LT_VBAK2-MATNR AND
               MARC~WERKS = LT_VBAK2-WERKS.

*----------------------------------------------------
  LT_VBAK3[] = IT_VBAK[].
  SORT LT_VBAK3 BY MATNR VKORG.
  DELETE ADJACENT DUPLICATES FROM LT_VBAK3 COMPARING MATNR VKORG.
*Fill the MVKE data
  SELECT MVKE~MATNR MVKE~VKORG MVKE~MTPOS MVKE~MVGR4
         FROM MVKE
         INTO TABLE IT_MVKE
         FOR ALL ENTRIES IN LT_VBAK3
         WHERE MVKE~MATNR = LT_VBAK3-MATNR
           AND MVKE~VKORG = LT_VBAK3-VKORG
           AND MVKE~VTWEG = LT_VBAK3-VTWEG.                 "AIR23037

*----------------------------------------------------
*Use lt_vbak2 (is already sorted on matnr werks)
*Fill the MBEW data
  SELECT MBEW~MATNR MBEW~BWKEY MBEW~STPRS
         FROM MBEW
         INTO TABLE IT_MBEW
         FOR ALL ENTRIES IN LT_VBAK2
         WHERE MBEW~MATNR = LT_VBAK2-MATNR
           AND MBEW~BWKEY = LT_VBAK2-WERKS
           AND MBEW~BWTAR = LT_VBAK2-BWTAR.                 "air23037

*-----------------------------------------------------
*Fill the EORD data
  SELECT EORD~MATNR EORD~WERKS EORD~LIFNR EORD~FLIFN
         FROM EORD
         INTO TABLE IT_EORD
         FOR ALL ENTRIES IN LT_VBAK2
         WHERE EORD~MATNR = LT_VBAK2-MATNR AND
               EORD~WERKS = LT_VBAK2-WERKS.

  REFRESH LT_VBAK2.
  REFRESH LT_VBAK3.

*Fill VBEP
  SELECT VBEP~VBELN VBEP~POSNR VBEP~ETTYP VBEP~EDATU VBEP~WMENG
         FROM VBEP
         INTO TABLE IT_VBEP
         FOR ALL ENTRIES IN IT_VBAK
         WHERE VBEP~VBELN = IT_VBAK-VBELN
           AND VBEP~POSNR = IT_VBAK-POSNR
           AND VBEP~ETENR = '0001'   "first schedule line
           AND VBEP~EDATU IN SO_VDATU.

  SELECT * FROM TVAUT INTO TABLE IT_TVAUT
                WHERE SPRAS = SY-LANGU OR
                      SPRAS = 'E'.   "english

*Get the link between the advanced shipment number and item and the component
*>>>>>>> Start of Insert MOD001
*  SELECT RESB~RSNUM RESB~RSPOS
*         YSE_ADV_COMP_LIN~VBELN_ADV YSE_ADV_COMP_LIN~POSNR_ADV
*         RESB~SOBKZ
*      INTO TABLE IT_COMP
*      FROM YSE_ADV_COMP_LIN
*      JOIN RESB ON RESB~RSNUM = YSE_ADV_COMP_LIN~RSNUM
*               AND RESB~RSPOS = YSE_ADV_COMP_LIN~RSPOS
*      FOR ALL ENTRIES IN IT_VBAK
*      WHERE VBELN_ADV = IT_VBAK-VBELN AND
*            POSNR_ADV = IT_VBAK-POSNR.
  CHECK NOT IT_VBAK[] IS INITIAL.
  SELECT RESB~RSNUM RESB~RSPOS
          VBAP~VBELN VBAP~POSNR RESB~SOBKZ
            INTO TABLE IT_COMP
              FROM VBAP JOIN RESB ON RESB~RSNUM = VBAP~ZZ_ASO_RSNUM
                                 AND RESB~RSPOS = VBAP~ZZ_ASO_RSPOS
                FOR ALL ENTRIES IN IT_VBAK
                  WHERE VBAP~VBELN = IT_VBAK-VBELN AND
                        VBAP~POSNR = IT_VBAK-POSNR.
*>>>>>>> End of Insert MOD001

*Get the customer name
  MOVE IT_VBAK TO LT_VBAK4.
  SORT LT_VBAK4 BY KUNNR.
  DELETE ADJACENT DUPLICATES FROM LT_VBAK4 COMPARING KUNNR.

  SELECT KUNNR NAME1 FROM KNA1 INTO TABLE GT_KNA1
    FOR ALL ENTRIES IN LT_VBAK4
    WHERE KUNNR EQ LT_VBAK4-KUNNR.

*Get the sales office
  MOVE IT_VBAK TO LT_VBAK5.
  SORT LT_VBAK5 BY VKBUR.
  DELETE ADJACENT DUPLICATES FROM LT_VBAK5 COMPARING VKBUR.

  SELECT VKBUR BEZEI FROM TVKBT INTO TABLE GT_VKBUR
    FOR ALL ENTRIES IN LT_VBAK5
    WHERE VKBUR EQ LT_VBAK5-VKBUR
      AND SPRAS EQ 'E'.

*Get the sales group
  MOVE IT_VBAK TO LT_VBAK6.
  SORT LT_VBAK6 BY VKGRP.
  DELETE ADJACENT DUPLICATES FROM LT_VBAK6 COMPARING VKGRP.

  SELECT VKGRP BEZEI FROM TVGRT INTO TABLE GT_VKGRP
    FOR ALL ENTRIES IN LT_VBAK6
    WHERE VKGRP EQ LT_VBAK6-VKGRP
      AND SPRAS EQ 'E'.


*Issued quantity
  SELECT LIPS~VBELN LIPS~POSNR LIPS~VGBEL LIPS~VGPOS LIPS~LFIMG INTO TABLE GT_LIPS
    FROM LIPS INNER JOIN VBUK
    ON VBUK~VBELN = LIPS~VBELN
    FOR ALL ENTRIES IN IT_VBAK
    WHERE LIPS~VGBEL = IT_VBAK-VBELN
      AND VBUK~WBSTK = 'C'.

*UU stock
  MOVE IT_VBAK[] TO LT_VBAK7[].
  SORT LT_VBAK7 BY MATNR.
  DELETE ADJACENT DUPLICATES FROM LT_VBAK7 COMPARING MATNR.


  SELECT MATNR WERKS LGORT LABST FROM MARD INTO TABLE GT_UUSTOCK
    FOR ALL ENTRIES IN LT_VBAK7
    WHERE MATNR EQ LT_VBAK7-MATNR.

*  LOOP AT LT_UUSTOCK_TMP INTO LS_UUSTOCK.
*    COLLECT LS_UUSTOCK INTO GT_UUSTOCK.
*  ENDLOOP.


*Allocated stock
  "IT_MARC for safety stock was already selected earlier in the process
  "Open sales orders
  LT_VBAK8[] = IT_VBAK[].
  SORT LT_VBAK8 BY MATNR WERKS LGORT.

  DELETE ADJACENT DUPLICATES FROM LT_VBAK8 COMPARING MATNR WERKS LGORT.

  SELECT      VBAP~VBELN VBAP~POSNR MATNR KWMENG WERKS LGORT ABGRU
       INTO TABLE GT_VBAP
       FROM VBAK
      INNER JOIN VBAP
         ON VBAK~VBELN EQ VBAP~VBELN
      FOR ALL ENTRIES IN LT_VBAK8
      WHERE MATNR EQ LT_VBAK8-MATNR
        AND WERKS EQ LT_VBAK8-WERKS
*        AND LGORT EQ LT_VBAK8-LGORT
        AND PSTYV IN S_PSTYV
        AND VBTYP EQ 'C'.

  "Deliveries for open sales orders
  IF NOT GT_VBAP[] IS INITIAL.
    SELECT      B~VBELN B~POSNR B~MATNR B~LGORT B~LFIMG B~WERKS
       INTO TABLE GT_DEL
       FROM VBFA AS A
       JOIN LIPS AS B
         ON A~VBELN EQ B~VBELN
        AND A~POSNN EQ B~POSNR
       JOIN VBUK AS C
         ON A~VBELN EQ C~VBELN
        FOR ALL ENTRIES IN GT_VBAP
      WHERE A~VBELV = GT_VBAP-VBELN
        AND A~POSNV = GT_VBAP-POSNR
        AND A~VBTYP_N = 'J'  " Deliveries
        AND C~WBSTK = 'C'.
  ENDIF.

*RESB
  SELECT      RSNUM RSPOS MATNR WERKS LGORT BDMNG ENMNG VMENG UMREZ UMREN XWAOK
         INTO TABLE GT_RESB
         FROM RESB
         FOR ALL ENTRIES IN LT_VBAK8
        WHERE MATNR EQ LT_VBAK8-MATNR
          AND WERKS EQ LT_VBAK8-WERKS
*          AND lgort EQ p_lgort
*          AND LGORT EQ LT_VBAK8-LGORT
          AND XLOEK EQ SPACE
          AND (    XWAOK EQ 'X'
           OR XWAOK EQ SPACE ).

*Open PO's
  SELECT   BANFN BNFPO MATNR RESWK MENGE LGORT
           INTO TABLE GT_EBAN
           FROM EBAN
          FOR ALL ENTRIES IN LT_VBAK8
          WHERE MATNR EQ LT_VBAK8-MATNR
            AND BSART EQ 'ZNB1'
            AND PSTYP EQ '7'      "STOCK TRANSFER
            AND STATU EQ 'N'
            AND LOEKZ EQ SPACE
            AND EBAKZ EQ SPACE
            AND RESWK EQ LT_VBAK8-WERKS
            AND LGORT EQ '1000'.


*Transport orders
  SELECT      B~EBELN B~EBELP B~MATNR B~LGORT B~MENGE A~RESWK
             INTO TABLE GT_EKPO2
             FROM EKKO AS A
            INNER JOIN EKPO AS B
               ON A~EBELN = B~EBELN
              FOR ALL ENTRIES IN LT_VBAK8
            WHERE B~MATNR EQ LT_VBAK8-MATNR
              AND (    A~BSART EQ 'ZUB1'
                    OR A~BSART EQ 'ZNB4' )
              AND A~RESWK EQ LT_VBAK8-WERKS
              AND B~LOEKZ EQ SPACE.

  IF SY-SUBRC EQ 0.
    SELECT      EBELN EBELP MATNR MENGE BELNR BWART WERKS
            INTO TABLE GT_EKBE2
            FROM EKBE
            FOR ALL ENTRIES IN GT_EKPO2
           WHERE EBELN EQ GT_EKPO2-EBELN
              AND EBELP EQ GT_EKPO2-EBELP
              AND VGABE = '6'.
  ENDIF.

*Open PO's
  SELECT      EBELN EBELP MATNR WERKS LGORT MENGE
           INTO TABLE GT_EKPO
           FROM EKPO
           FOR ALL ENTRIES IN LT_VBAK8
          WHERE MATNR EQ LT_VBAK8-MATNR
            AND WERKS EQ LT_VBAK8-WERKS
*            AND lgort EQ p_lgort
*            AND LGORT EQ LT_VBAK8-LGORT
            AND LOEKZ EQ SPACE
            AND RETPO EQ SPACE
            AND ELIKZ EQ SPACE.


  SELECT      EBELN EBELP ZEKKN VGABE GJAHR BELNR BUZEI MATNR WERKS MENGE BWART
         INTO TABLE GT_EKBE
         FROM EKBE
          FOR ALL ENTRIES IN GT_EKPO
        WHERE EBELN EQ GT_EKPO-EBELN
          AND VGABE = '1'.            " Goods Receipt




  REFRESH: LT_VBAK4, LT_VBAK5, LT_VBAK6, LT_VBAK7.

ENDFORM.                    "select_data


*&---------------------------------------------------------------------*
*&      Form  process_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*

FORM PROCESS_DATA.

  SORT IT_VBAK BY VBELN POSNR.
  SORT IT_VBEP BY VBELN POSNR.
  SORT IT_MARC BY MATNR WERKS.
  SORT IT_MVKE BY MATNR VKORG.
  SORT IT_MBEW BY MATNR BWKEY.
  SORT IT_EORD BY MATNR WERKS FLIFN.
  SORT IT_COMP BY VBELN_ADV POSNR_ADV.
  SORT GT_KNA1 BY KUNNR.
  SORT GT_VKBUR BY VKBUR.
  SORT GT_VKGRP BY VKGRP.
  SORT GT_VBKD BY VBELN POSNR.




  LOOP AT IT_VBAK ASSIGNING <L_VBAK>.
    CLEAR IT_OUT.
    MOVE-CORRESPONDING <L_VBAK> TO IT_OUT.
*   All lines should have counter 1 so that a sum of this column gives you
*   the total nr of lines
*   GV_COUNTER = GV_COUNTER + 1.
    IT_OUT-COUNTER = GV_COUNTER.

* Begin of insert Mod-006
*Read the component link
    CLEAR IT_COMP.
    READ TABLE IT_COMP WITH KEY VBELN_ADV = <L_VBAK>-VBELN
                                POSNR_ADV = <L_VBAK>-POSNR
                     BINARY SEARCH.
* End   of insert Mod-006

*   VBEP
    READ TABLE IT_VBEP WITH KEY VBELN = <L_VBAK>-VBELN
                                POSNR = <L_VBAK>-POSNR
                     BINARY SEARCH
                                .
    IF SY-SUBRC = 0.
      IT_OUT-EDATU = IT_VBEP-EDATU.
      IT_OUT-WMENG = IT_VBEP-WMENG.
      IF IT_VBEP-ETTYP = 'Z2'.
        IF IT_COMP-SOBKZ = 'E'.
          IT_OUT-DTC_SFS = 'DTC'.
        ELSE.
          IT_OUT-DTC_SFS = 'SFS'.
        ENDIF.
* Begin of insert Mod-004
      ELSEIF  IT_VBEP-ETTYP = 'Z5'.
        IT_OUT-DTC_SFS = 'DTC'.
* End   of insert Mod-004
* Begin of insert Mod-005
      ELSEIF  IT_VBEP-ETTYP = 'CP'.
        IT_OUT-DTC_SFS = 'SFS'.
* End   of insert Mod-005
      ELSE.
        IF IT_VBEP-ETTYP = 'ZB'.
          IT_OUT-DTC_SFS = 'DTC'.
        ELSE.
          IT_OUT-DTC_SFS = 'SFS'.
        ENDIF.
      ENDIF.
    ELSE.
      CONTINUE.
    ENDIF.

    CLEAR IT_OUT-PRODH.
    IT_OUT-PRODH = <L_VBAK>-PRODH+4(4).

    IF <L_VBAK>-CMGST = 'B' OR
       <L_VBAK>-CMGST = 'C'.
      IT_OUT-BLOCK = 'X'.
*Credit block
    ELSEIF <L_VBAK>-LSSTK = 'B' OR
           <L_VBAK>-LSSTK = 'C'.
*Delivery block
      IT_OUT-BLOCK = 'X'.
    ELSEIF <L_VBAK>-FSSTK = 'B' OR
           <L_VBAK>-FSSTK = 'C'.
*Billing block
      IT_OUT-BLOCK = 'X'.

    ENDIF.

    "Mod-007 begin
    "Credit block
    IF <L_VBAK>-CMGST = 'B' OR
       <L_VBAK>-CMGST = 'C'.
      IT_OUT-CMGST = 'X'.
    ELSEIF <L_VBAK>-CMGST = '' OR
           <L_VBAK>-CMGST = 'A' OR
           <L_VBAK>-CMGST = 'D'.
      IT_OUT-CMGST = ''.
    ENDIF.

    SELECT SINGLE KUNNR FROM VBPA INTO IT_OUT-KUNWE
                           WHERE VBELN = <L_VBAK>-VBELN
                             AND PARVW = 'WE'.
    "Mod-007 end
*-----------------------------------------
*MARC
    READ TABLE IT_MARC WITH KEY MATNR = <L_VBAK>-MATNR
                                WERKS = <L_VBAK>-WERKS
                             BINARY SEARCH.
    IF SY-SUBRC = 0.
      IF IT_MARC-DISMM = 'Z5'.
        IT_OUT-STOCKPOL = 'ST'.
      ELSEIF IT_MARC-DISMM = 'Z6' OR
             IT_MARC-DISMM = 'Z7'.
        IT_OUT-STOCKPOL = 'NS'.
      ENDIF.
    ENDIF.
*MVKE

    READ TABLE IT_MVKE WITH KEY MATNR = <L_VBAK>-MATNR
                                VKORG = <L_VBAK>-VKORG
                        BINARY SEARCH.
    IF SY-SUBRC = 0.
      IF IT_MVKE-MTPOS = 'ZDTC'.
        IT_OUT-DISTRI_MODE = 'DTC'.
      ELSEIF IT_MVKE-MTPOS = 'NORM'.
        IF IT_MVKE-MVGR4 = ''.
          IT_OUT-DISTRI_MODE = 'NDTC'.
        ELSEIF IT_MVKE-MVGR4 = 'LCL'.
          IT_OUT-DISTRI_MODE = 'LCL'.
        ENDIF.
      ENDIF.
    ENDIF.

*MBEW

    READ TABLE IT_MBEW WITH KEY MATNR = <L_VBAK>-MATNR
                                BWKEY = <L_VBAK>-WERKS
                        BINARY SEARCH
                                .
    IF SY-SUBRC = 0.
      IT_OUT-STPRS = IT_MBEW-STPRS.
    ENDIF.


*EORD
    READ TABLE IT_EORD WITH KEY MATNR = <L_VBAK>-MATNR
                                WERKS = <L_VBAK>-WERKS
                                FLIFN = 'X'
                     BINARY SEARCH.
    IF SY-SUBRC = 0.
      IT_OUT-LIFNR = IT_EORD-LIFNR.
    ELSE.
*There could only be 1 line not indicated as fixed
      READ TABLE IT_EORD WITH KEY MATNR = <L_VBAK>-MATNR
                                  WERKS = <L_VBAK>-WERKS
                       BINARY SEARCH.
      IF SY-SUBRC = 0.
        IT_OUT-LIFNR = IT_EORD-LIFNR.
      ENDIF.
    ENDIF.

* Begin of insert Mod-006     ///commented the below lines here and moved it up to the correct place
**Read the component link
*    CLEAR IT_COMP.
*    READ TABLE IT_COMP WITH KEY VBELN_ADV = <L_VBAK>-VBELN
*                                POSNR_ADV = <L_VBAK>-POSNR
*                     BINARY SEARCH.
* End   of insert Mod-006

*Kna1
    READ TABLE GT_KNA1 ASSIGNING <FS_KNA1> WITH KEY KUNNR = <L_VBAK>-KUNNR
      BINARY SEARCH.

    MOVE <FS_KNA1>-NAME1 TO IT_OUT-NAME1.

*vkbur
    READ TABLE GT_VKBUR ASSIGNING <FS_VKBUR> WITH KEY VKBUR = <L_VBAK>-VKBUR
      BINARY SEARCH.
    MOVE <FS_VKBUR>-BEZEI TO IT_OUT-VKBUR.

*vkgrp

    READ TABLE GT_VKGRP ASSIGNING <FS_VKGRP> WITH KEY VKGRP = <L_VBAK>-VKGRP
      BINARY SEARCH.
    MOVE <FS_VKGRP>-BEZEI TO IT_OUT-VKGRP.

*Get sales district
    READ TABLE GT_VBKD ASSIGNING <FS_VBKD> WITH KEY VBELN = <L_VBAK>-VBELN
                                                    POSNR = <L_VBAK>-POSNR
                                           BINARY SEARCH.
    MOVE <FS_VBKD>-BZTXT TO IT_OUT-BZTXT.

*issued quantity
    LOOP AT GT_LIPS ASSIGNING <FS_LIPS>
      WHERE VGBEL = <L_VBAK>-VBELN
        AND VGPOS = <L_VBAK>-POSNR.

      ADD <FS_LIPS>-LFIMG TO IT_OUT-LFIMG.

    ENDLOOP.
*uu stock
    IF <L_VBAK>-LGORT IS INITIAL. "If no storage location cummulate all storage locations for this material
      LOOP AT GT_UUSTOCK ASSIGNING <FS_UUSTOCK>
        WHERE MATNR EQ <L_VBAK>-MATNR
          AND WERKS EQ <L_VBAK>-WERKS.
        ADD <FS_UUSTOCK>-LABST TO IT_OUT-LABST.
      ENDLOOP.
    ELSE. "Only take the current storage location stock
      READ TABLE GT_UUSTOCK ASSIGNING <FS_UUSTOCK>
        WITH TABLE KEY MATNR = <L_VBAK>-MATNR
                       WERKS = <L_VBAK>-WERKS
                       LGORT = <L_VBAK>-LGORT.
      MOVE <FS_UUSTOCK>-LABST TO IT_OUT-LABST.
    ENDIF.

*Allocated stock

    PERFORM ALLOCATED_STOCK.
    PERFORM AVAIL_QUAN.

    PERFORM OPEN_PO.

    APPEND IT_OUT.
    CLEAR IT_OUT.
  ENDLOOP.

  "MOD-007 begin
  PERFORM DETERMINE_AVL.
  "MOD-007 end
ENDFORM.                    "process_data

*&---------------------------------------------------------------------*
*&      Form  check_authorisation
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CHECK_AUTHORISATION .
  DATA: T_TVKO LIKE STANDARD TABLE OF TVKO WITH HEADER LINE.

*  free t_tvko.              " ????????
  SELECT * FROM TVKO
      INTO TABLE T_TVKO WHERE VKORG IN SO_VKORG.

  LOOP AT T_TVKO.
    AUTHORITY-CHECK OBJECT 'V_VBAK_VKO'
                    ID     'VKORG' FIELD T_TVKO-VKORG
                    ID     'VTWEG' DUMMY
                    ID     'SPART' DUMMY
                    ID     'ACTVT' DUMMY.

    IF SY-SUBRC = 4.
*         No authorisation to display data from Sales Organisation
*         p_vkorg
      MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '006'
                               WITH T_TVKO-VKORG.
    ELSEIF SY-SUBRC <> 0.
*         Error checking authorization.
      MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '004'.
    ENDIF.
  ENDLOOP.

  DATA: T_T001W LIKE STANDARD TABLE OF T001W WITH HEADER LINE.
*  free t_t001W.                        " what was this?
  SELECT *  FROM T001W
      INTO TABLE T_T001W WHERE WERKS IN SO_WERKS.

  LOOP AT T_T001W.
    AUTHORITY-CHECK OBJECT 'M_MATE_WRK'
             ID 'ACTVT' DUMMY
             ID 'WERKS' FIELD T_T001W-WERKS.
    IF SY-SUBRC = 4.
*   No authorisation to display data from Sales Organisation p_vkorg
      MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '010' WITH T_T001W-WERKS.
      EXIT.
    ELSEIF SY-SUBRC <> 0.
*   Error checking authorization.
      MESSAGE ID 'YSE_GENERAL' TYPE 'E' NUMBER '004'.
      EXIT.
    ENDIF.
  ENDLOOP.
ENDFORM.                    " check_authorisation
*&---------------------------------------------------------------------*
*&      Form  ALLOCATED_STOCK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ALLOCATED_STOCK .
  PERFORM SAFETY_STOCK.
  PERFORM OPEN_SALES_ORDERS.
  PERFORM RESERVATIONS.
  PERFORM STOCK_TRANSPORT_REQS.
  PERFORM TRANSPORT_ORDERS.
ENDFORM.                    " ALLOCATED_STOCK
*&---------------------------------------------------------------------*
*&      Form  SAFETY_STOCK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SAFETY_STOCK .

  CHECK P_SAF = 'X'.

  IF '1000' IN SO_LGORT. "Only for storage location 1000 is safety stock included
    READ TABLE IT_MARC WITH KEY MATNR = <L_VBAK>-MATNR
                                WERKS = <L_VBAK>-WERKS
                             BINARY SEARCH.
    IF SY-SUBRC = 0.
      ADD IT_MARC-EISBE TO IT_OUT-ALLOC.
    ENDIF.
  ENDIF.
ENDFORM.                    " SAFETY_STOCK
*&---------------------------------------------------------------------*
*&      Form  OPEN_SALES_ORDERS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM OPEN_SALES_ORDERS .
*  DATA: LV_QUAN  TYPE LFIMG.
  CLEAR GR_LGORT[].
  GR_LGORT-SIGN = 'I'.
  GR_LGORT-OPTION = 'EQ'.
  GR_LGORT-LOW = <L_VBAK>-LGORT.
  APPEND GR_LGORT.
  IF <L_VBAK>-LGORT IS INITIAL. "If storage location is 1000
    "we also need to take into account empty storage locations
    GR_LGORT-LOW = '1000'.
    APPEND GR_LGORT.
  ENDIF.

  "Open sales order quantities
  LOOP AT GT_VBAP ASSIGNING <FS_VBAP>
    WHERE MATNR EQ <L_VBAK>-MATNR
      AND WERKS EQ <L_VBAK>-WERKS
      AND LGORT IN GR_LGORT
      AND ABGRU IS INITIAL.
    ADD <FS_VBAP>-KWMENG TO IT_OUT-ALLOC.
  ENDLOOP.

  LOOP AT GT_DEL ASSIGNING <FS_DEL>
    WHERE MATNR EQ <L_VBAK>-MATNR
      AND WERKS EQ <L_VBAK>-WERKS
      AND LGORT IN GR_LGORT.
*    MOVE <FS_DEL>-LFIMG TO LV_QUAN.
    SUBTRACT <FS_DEL>-LFIMG FROM IT_OUT-ALLOC.
  ENDLOOP.




ENDFORM.                    " OPEN_SALES_ORDERS
*&---------------------------------------------------------------------*
*&      Form  RESERVATIONS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM RESERVATIONS .

  CLEAR GR_LGORT[].
  GR_LGORT-SIGN = 'I'.
  GR_LGORT-OPTION = 'EQ'.
  GR_LGORT-LOW = <L_VBAK>-LGORT.
  IF <L_VBAK>-LGORT IS INITIAL. "If storage location is 1000
    GR_LGORT-LOW = '1000'.
    APPEND GR_LGORT.
  ENDIF.

  LOOP AT GT_RESB ASSIGNING <FS_RESB>
    WHERE MATNR EQ <L_VBAK>-MATNR
      AND WERKS EQ <L_VBAK>-WERKS
      AND LGORT IN GR_LGORT
      AND XWAOK = 'X'.
    IT_OUT-ALLOC = IT_OUT-ALLOC  + ( <FS_RESB>-BDMNG - <FS_RESB>-ENMNG ).
  ENDLOOP.
ENDFORM.                    " RESERVATIONS                 " POS
*&---------------------------------------------------------------------*
*&      Form  TRANSPORT_ORDERS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM TRANSPORT_ORDERS .
  DATA:LV_QUAN  TYPE LFIMG.
  IF '1000' IN SO_LGORT. "Only for storage location 1000 is safety stock included
* Add transport orders to allocation table
    LOOP AT GT_EKPO2 ASSIGNING <FS_EKPO2>
      WHERE MATNR EQ <L_VBAK>-MATNR
        AND RESWK EQ <L_VBAK>-WERKS.
*        AND LGORT EQ <L_VBAK>-LGORT.

      ADD <FS_EKPO2>-MENGE TO IT_OUT-ALLOC.
    ENDLOOP.
    LOOP AT GT_EKBE2 ASSIGNING <FS_EKBE2>
      WHERE MATNR EQ <L_VBAK>-MATNR
        AND WERKS EQ <L_VBAK>-WERKS.
*          AND LGORT EQ LV_LGORT.
      IF <FS_EKBE2>-BWART EQ '641' OR <FS_EKBE2>-BWART EQ '643'.
        LV_QUAN = <FS_EKBE2>-MENGE * ( -1 ).
        ADD LV_QUAN TO IT_OUT-ALLOC.
      ELSEIF <FS_EKBE2>-BWART EQ '642' OR <FS_EKBE2>-BWART EQ '644'.
        ADD <FS_EKBE2>-MENGE TO IT_OUT-ALLOC.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.                    " TRANSPORT_ORDERS
*&---------------------------------------------------------------------*
*&      Form  AVAIL_QUAN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM AVAIL_QUAN .
  IT_OUT-AVAIL = IT_OUT-LABST - IT_OUT-ALLOC.
ENDFORM.                    " AVAIL_QUAN
*&---------------------------------------------------------------------*
*&      Form  STOCK_TRANSPORT_REQS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM STOCK_TRANSPORT_REQS .

  IF '1000' IN SO_LGORT.
    LOOP AT GT_EBAN ASSIGNING <FS_EBAN>
        WHERE MATNR EQ <L_VBAK>-MATNR
          AND RESWK EQ <L_VBAK>-WERKS
          AND LGORT EQ '1000'.
      ADD <FS_EBAN>-MENGE TO IT_OUT-ALLOC.
    ENDLOOP.
  ENDIF.
ENDFORM.                    " STOCK_TRANSPORT_REQS
*&---------------------------------------------------------------------*
*&      Form  OPEN_PO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM OPEN_PO .
  CLEAR GR_LGORT[].
  GR_LGORT-SIGN = 'I'.
  GR_LGORT-OPTION = 'EQ'.
  GR_LGORT-LOW = <L_VBAK>-LGORT.
  APPEND GR_LGORT.
  IF <L_VBAK>-LGORT IS INITIAL. "If storage location is 1000
    "we also need to take into account empty storage locations
    GR_LGORT-LOW = '1000'.
    APPEND GR_LGORT.
  ENDIF.


  LOOP AT GT_EKPO ASSIGNING <FS_EKPO>
    WHERE MATNR EQ <L_VBAK>-MATNR
          AND WERKS EQ <L_VBAK>-WERKS
          AND LGORT IN GR_LGORT.
    ADD <FS_EKPO>-MENGE TO IT_OUT-OPEN_PO.
  ENDLOOP.

  IF SY-SUBRC EQ 0. "Open PO quans found
    LOOP AT GT_EKBE ASSIGNING <FS_EKBE>
      WHERE MATNR EQ <L_VBAK>-MATNR
        AND WERKS EQ <L_VBAK>-WERKS.
*        AND LGORT IN GR_LGORT.
*  Take debet and credit (or bwart into account)
      IF <FS_EKBE>-BWART EQ '641' OR <FS_EKBE>-BWART EQ '101' OR <FS_EKBE>-BWART EQ '643'.
        SUBTRACT <FS_EKBE>-MENGE FROM IT_OUT-OPEN_PO.
      ELSEIF <FS_EKBE>-BWART EQ '642' OR <FS_EKBE>-BWART EQ '102' OR <FS_EKBE>-BWART EQ '644'.
        ADD <FS_EKBE>-MENGE TO IT_OUT-OPEN_PO.
      ENDIF.


    ENDLOOP.

  ENDIF. "Open PO quans found
ENDFORM.                    " OPEN_PO
*&---------------------------------------------------------------------*
*&      Form  SEND2SPOOL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SEND2SPOOL .
  DATA:
      FNAM             LIKE RLGRAP-FILENAME,
      IT_DD03L         LIKE DD03L OCCURS 0 WITH HEADER LINE,
      IT_DD04T         LIKE DD04T OCCURS 0 WITH HEADER LINE,
      IT_OUTXLS(4096)  TYPE C OCCURS 0,
      WA_OUTXLS(4096)  TYPE C.

  CONSTANTS:
    C_TAB TYPE C VALUE CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB.

* Get fields of structure 'YSE_STOCK_OVERVIEW_ITEM'
  SELECT *
         FROM DD03L
         INTO TABLE IT_DD03L
        WHERE TABNAME = 'YSE_SD_KP04_OUTPUT'.

* Get the descriptions of the fields in the structure
  SELECT *
         FROM DD04T
         INTO TABLE IT_DD04T
          FOR ALL ENTRIES IN IT_DD03L
        WHERE ROLLNAME EQ IT_DD03L-ROLLNAME
          AND DDLANGUAGE EQ 'EN'.

* Build filename
  CONCATENATE '/var/load/' SY-SYSID '/UK/original/YSE_OPENORDERS_'
              SY-UNAME '_' SY-DATUM '_' SY-UZEIT '.TXT'
         INTO FNAM.

* Make the output table ; delimited
  CALL FUNCTION 'SAP_CONVERT_TO_CSV_FORMAT'
    TABLES
      I_TAB_SAP_DATA       = IT_OUT
    CHANGING
      I_TAB_CONVERTED_DATA = IT_OUTXLS
    EXCEPTIONS
      CONVERSION_FAILED    = 1
      OTHERS               = 2.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

* Open file
  OPEN DATASET FNAM FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.
  IF SY-SUBRC <> 0.
    WRITE 'Error opening file. Action aborted.'(026).
    EXIT.
  ENDIF.

* Write header line
  CLEAR WA_OUTXLS.
  SORT IT_DD03L BY POSITION.
  LOOP AT IT_DD03L.
    READ TABLE IT_DD04T WITH KEY ROLLNAME = IT_DD03L-ROLLNAME.
    IF WA_OUTXLS IS INITIAL.
      WA_OUTXLS = IT_DD04T-REPTEXT.
    ELSE.
      CONCATENATE WA_OUTXLS C_TAB IT_DD04T-REPTEXT INTO WA_OUTXLS.
    ENDIF.
  ENDLOOP.
  TRANSFER WA_OUTXLS TO FNAM.

* Process lines
  LOOP AT IT_OUTXLS INTO WA_OUTXLS.
    REPLACE ALL OCCURRENCES OF ';' IN WA_OUTXLS WITH C_TAB.
    TRANSFER WA_OUTXLS TO FNAM.
  ENDLOOP.

  CLOSE DATASET FNAM.

  WRITE: 'Report output written to file:'(027),
         FNAM.

ENDFORM.                    " SEND2SPOOL
*MOD-007 begin
*&---------------------------------------------------------------------*
*&      Form  DETERMINE_AVL
*&---------------------------------------------------------------------*
FORM DETERMINE_AVL.

  DATA:
    BEGIN OF LT_MARA OCCURS 0,
         MATNR LIKE MARC-MATNR,
    END OF LT_MARA,

    BEGIN OF LT_MARC OCCURS 0,
         MATNR LIKE MARC-MATNR,
         WERKS LIKE MARC-WERKS,
    END OF LT_MARC,

    BEGIN OF LT_MARD OCCURS 0,
         MATNR LIKE MARD-MATNR,
         WERKS LIKE MARD-WERKS,
         LGORT LIKE MARD-LGORT,
         LABST LIKE MARD-LABST,
       END OF LT_MARD,

    BEGIN OF IT_EKES OCCURS 0,
         EBELN   LIKE EKES-EBELN,
         EBELP   LIKE EKES-EBELP,
       END OF IT_EKES,

    BEGIN OF LT_VBFA OCCURS 0,
    VBELV LIKE VBFA-VBELV,
    POSNV LIKE VBFA-POSNV,
    VBELN LIKE VBFA-VBELN,
    POSNN LIKE VBFA-POSNN,
  END OF LT_VBFA,

    BEGIN OF LT_LIPS OCCURS 0,
         MATNR TYPE LIPS-MATNR,    "insert MOD-002
         WERKS TYPE LIPS-WERKS,    "insert MOD-002
         VBELN LIKE LIPS-VBELN,
         POSNR LIKE LIPS-POSNR,
         VGBEL TYPE LIPS-VGBEL,    "insert MOD-002
         LFIMG LIKE LIPS-LFIMG,
         WBSTK LIKE VBUK-WBSTK,
       END OF LT_LIPS,

       BEGIN OF LT_OUTDEL OCCURS 0,
         MATNR TYPE LIPS-MATNR,
         WERKS TYPE LIPS-WERKS,
         LFIMG TYPE LIPS-LFIMG,
       END OF LT_OUTDEL,

    BEGIN OF LT_MARD_AGGR OCCURS 0,
      MATNR LIKE MARD-MATNR,
      WERKS LIKE MARD-WERKS,
      LABST LIKE MARD-LABST,
    END OF LT_MARD_AGGR,

    BEGIN OF LT_VBAP_ALL OCCURS 0,
      VBELN       LIKE VBAP-VBELN,
      POSNR       LIKE VBAP-POSNR,
      MATNR       LIKE VBAP-MATNR,
      WERKS       LIKE VBAP-WERKS,
      LGORT       LIKE VBAP-LGORT,
      LPRIO       LIKE VBAP-LPRIO,
      KWMENG      LIKE VBAP-KWMENG,
      KWMENG_OPEN LIKE VBAP-KWMENG,
      EDATU       LIKE VBEP-EDATU,
      AVAILABLE   TYPE C,
    END OF LT_VBAP_ALL.

  DATA: LV_KALAB            TYPE LABST,
        LV_LOEKZ            TYPE EKPO-LOEKZ.

  RANGES: LR_LGORT FOR MARD-LGORT.

* First build table of unique materials and plant materials based on output table
  LOOP AT IT_OUT.
    LT_MARA-MATNR = IT_OUT-MATNR.
    APPEND LT_MARA.
    LT_MARC-MATNR = IT_OUT-MATNR.
    LT_MARC-WERKS = IT_OUT-WERKS.
    APPEND LT_MARC.
  ENDLOOP.

  SORT LT_MARA BY MATNR.
  SORT LT_MARC BY MATNR WERKS.

  DELETE ADJACENT DUPLICATES FROM LT_MARC COMPARING ALL FIELDS.
  DELETE ADJACENT DUPLICATES FROM LT_MARA COMPARING MATNR.

* If no materials found in the order lines, leave them all to "not available"
  CHECK:
    NOT LT_MARA[] IS INITIAL,
    NOT LT_MARC[] IS INITIAL.

* Select unrestricted stock
* First add storage location 1000 and '    '
  LR_LGORT-SIGN   = 'I'.
  LR_LGORT-OPTION = 'EQ'.
  LR_LGORT-LOW    = '1000'.
  APPEND LR_LGORT.
  LR_LGORT-SIGN   = 'I'.
  LR_LGORT-OPTION = 'EQ'.
  LR_LGORT-LOW    = '    '.
  APPEND LR_LGORT.

* Then get stock
  SELECT MATNR WERKS LGORT LABST
         INTO TABLE LT_MARD
         FROM MARD
         FOR ALL ENTRIES IN LT_MARA
         WHERE MATNR EQ LT_MARA-MATNR
           AND LGORT IN LR_LGORT.

* Aggregate the stock to plant level
  LOOP AT LT_MARD.
    READ TABLE LT_MARC WITH KEY MATNR = LT_MARD-MATNR
                                WERKS = LT_MARD-WERKS
                       BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      MOVE-CORRESPONDING LT_MARD TO LT_MARD_AGGR.
      COLLECT LT_MARD_AGGR.
    ENDIF.
  ENDLOOP.

* Get all order items with any of the previously selected materials
  SELECT VAPMA~VBELN VAPMA~POSNR VAPMA~MATNR VAPMA~WERKS LGORT LPRIO KWMENG KWMENG AS KWMENG_OPEN
         INTO TABLE LT_VBAP_ALL
         FROM VAPMA
         JOIN VBAP
           ON VAPMA~VBELN EQ VBAP~VBELN
          AND VAPMA~POSNR EQ VBAP~POSNR
         JOIN VBAK
           ON VBAP~VBELN EQ VBAK~VBELN
         JOIN VBUP
           ON VBAP~VBELN EQ VBUP~VBELN
          AND VBAP~POSNR EQ VBUP~POSNR
          FOR ALL ENTRIES IN LT_MARA
        WHERE VAPMA~MATNR EQ LT_MARA-MATNR
          AND VBAK~VBTYP  = 'C'
          AND VBAP~ABGRU  = '  '
*          AND ( vbup~gbsta = 'A' OR vbup~gbsta = 'B' )   "CR2047
          AND ( VBUP~LFSTA = 'A' OR VBUP~LFSTA = 'B' )  "CR2047: switch to Delivery related check
          AND ( VBAP~PSTYV = 'ZTAN' OR VBAP~PSTYV = 'ZAS1' ).

* Eliminate records for which no match in LT_MARC (now including WERKS)
*                   or where StLoc conflicts with selection
  LOOP AT LT_VBAP_ALL.
*   Check storage location of the order line
    IF NOT LT_VBAP_ALL-LGORT IN LR_LGORT.
      DELETE LT_VBAP_ALL.
      CONTINUE.
    ENDIF.

*   Check plant of the order line
    READ TABLE LT_MARC WITH KEY MATNR = LT_VBAP_ALL-MATNR
                                WERKS = LT_VBAP_ALL-WERKS
                       BINARY SEARCH.
    IF SY-SUBRC NE 0.
      DELETE LT_VBAP_ALL.
    ENDIF.
  ENDLOOP.

  SORT:
*    lt_vbfa     BY vbeln posnn,
    LT_VBAP_ALL BY VBELN POSNR.

*Get out bound deliveries from LIPS table for all Materials
  REFRESH: LT_LIPS.
  SELECT LIPS~MATNR
         LIPS~WERKS
         LIPS~VBELN
         LIPS~POSNR
         LIPS~VGBEL
         LIPS~LFIMG
         VBUK~WBSTK
  INTO   TABLE LT_LIPS
  FROM   LIPS
  INNER  JOIN VBUK
  ON     LIPS~VBELN EQ VBUK~VBELN
  FOR    ALL ENTRIES IN LT_MARC
  WHERE  LIPS~MATNR EQ LT_MARC-MATNR
  AND    LIPS~WERKS EQ LT_MARC-WERKS
  AND    LIPS~VGTYP EQ 'C'
  AND    VBUK~WBSTK EQ 'A'.

  REFRESH:LT_OUTDEL.
  LOOP AT LT_LIPS.
    MOVE-CORRESPONDING LT_LIPS TO LT_OUTDEL.
    COLLECT LT_OUTDEL.
  ENDLOOP.

*Subtract outbound delivery stoc from total Material Stock
  LOOP AT LT_MARD_AGGR.
    READ TABLE LT_OUTDEL WITH KEY MATNR = LT_MARD_AGGR-MATNR
                                  WERKS = LT_MARD_AGGR-WERKS.
    IF SY-SUBRC EQ 0.
      LT_MARD_AGGR-LABST = LT_MARD_AGGR-LABST - LT_OUTDEL-LFIMG.
      MODIFY LT_MARD_AGGR.
    ENDIF.
  ENDLOOP.

*Subtract SO outbound delivery from SO stock,if the SO has outbound delivery
  LOOP AT LT_VBAP_ALL.
    LOOP AT LT_LIPS WHERE VGBEL = LT_VBAP_ALL-VBELN.
      LT_VBAP_ALL-KWMENG_OPEN = LT_VBAP_ALL-KWMENG_OPEN - LT_LIPS-LFIMG.
      MODIFY LT_VBAP_ALL.
    ENDLOOP.
  ENDLOOP.

* Subtract open order qty's from stock and set avly flag appropriately for each order line
  LOOP AT LT_VBAP_ALL.

*   If item is fully delivered
    IF LT_VBAP_ALL-KWMENG_OPEN LE 0.
*     It should be marked available
      LT_VBAP_ALL-AVAILABLE = '1'.
    ELSE.
*     Get the stock
      READ TABLE LT_MARD_AGGR WITH KEY MATNR = LT_VBAP_ALL-MATNR
                                       WERKS = LT_VBAP_ALL-WERKS
                            BINARY SEARCH.
*     When stock found
      IF SY-SUBRC EQ 0.
*       If stock is enough for current order item
        IF LT_MARD_AGGR-LABST GE LT_VBAP_ALL-KWMENG_OPEN.
          LT_VBAP_ALL-AVAILABLE = '1'.

*         Subtract order open qty from stock
          LT_MARD_AGGR-LABST = LT_MARD_AGGR-LABST - LT_VBAP_ALL-KWMENG_OPEN.
        ELSE.
*         Leave available mark empty
        ENDIF.
        MODIFY LT_MARD_AGGR INDEX SY-TABIX.
*     When stock NOT found
      ELSE.
*       Leave available mark empty
      ENDIF.
    ENDIF.
    MODIFY LT_VBAP_ALL.
  ENDLOOP.

* Get PO number
  SELECT VBELV POSNV VBELN POSNN
       INTO TABLE LT_VBFA
       FROM VBFA
       FOR ALL ENTRIES IN IT_OUT
       WHERE VBFA~VBELV   EQ IT_OUT-VBELN
         AND VBFA~POSNV   EQ IT_OUT-POSNR
         AND VBFA~VBTYP_N EQ 'V'
         AND VBFA~VBTYP_V EQ 'C'.

  SORT LT_VBFA BY VBELV POSNV.

  LOOP AT LT_VBFA.
    SELECT SINGLE LOEKZ INTO LV_LOEKZ
      FROM EKPO WHERE EBELN = LT_VBFA-VBELN
                  AND EBELP = LT_VBFA-POSNN
                  AND LOEKZ = ' '.

    IF SY-SUBRC <> 0.
      DELETE LT_VBFA.
    ENDIF.
  ENDLOOP.

  LOOP AT IT_OUT.
    IF IT_OUT-DTC_SFS = 'SFS'.
*.... Get the corresponding line in LT_VBAP_ALL
      READ TABLE LT_VBAP_ALL WITH KEY VBELN = IT_OUT-VBELN
                                      POSNR = IT_OUT-POSNR
                             BINARY SEARCH.
      IF SY-SUBRC EQ 0.
        IF LT_VBAP_ALL-AVAILABLE IS INITIAL.
          IT_OUT-AVAILABLE = 'N'.
        ELSE.
          IT_OUT-AVAILABLE = 'Y'.
        ENDIF.
      ELSE.
        IT_OUT-AVAILABLE = 'N'.
      ENDIF.
    ELSE.
*.... Check ordered quantity with sales order stock
      CLEAR LV_KALAB.
      SELECT SUM( KALAB )
         FROM MSKA
         INTO LV_KALAB
         WHERE VBELN = IT_OUT-VBELN
           AND POSNR = IT_OUT-POSNR.

      IF SY-SUBRC EQ 0 AND LV_KALAB > 0.
        SELECT SINGLE * FROM VBAP WHERE VBELN = IT_OUT-VBELN AND POSNR = IT_OUT-POSNR.
        IF LV_KALAB <> VBAP-KWMENG.
*        IF lv_kalab <> it_out-kwmeng.
*........ Check if inbound delivery exists
          READ TABLE LT_VBFA WITH KEY VBELV = IT_OUT-VBELN
                                      POSNV = IT_OUT-POSNR
                             BINARY SEARCH.
          IF SY-SUBRC = 0.
* Read EKES for the order items to check if inbound delivery exists
            CLEAR: IT_EKES[].
            SELECT EBELN EBELP
                   INTO TABLE IT_EKES
                   FROM EKES
*                     for all entries in lt_vbfa
                  WHERE EBELN EQ LT_VBFA-VBELN
                    AND EBELP EQ LT_VBFA-POSNN
                    AND EBTYP EQ 'LA'.
*            READ TABLE it_ekes WITH KEY ebeln = it_vbfa-vbeln
*                                        ebelp = it_vbfa-posnn
*                               BINARY SEARCH.
            IF SY-SUBRC = 0.
              IT_OUT-AVAILABLE = 'GIT'.
            ELSE.
              IT_OUT-AVAILABLE = 'N'.
            ENDIF.
          ELSE.
            IT_OUT-AVAILABLE = 'N'.
          ENDIF.
        ELSE.
          IT_OUT-AVAILABLE = 'Y'.
        ENDIF.
      ELSE.
*...... Check if inbound delivery exists
        READ TABLE LT_VBFA WITH KEY VBELV = IT_OUT-VBELN
                                    POSNV = IT_OUT-POSNR
                           BINARY SEARCH.

        IF SY-SUBRC = 0.
* Read EKES for the order items to check if inbound delivery exists
          CLEAR: IT_EKES[].
          SELECT EBELN EBELP
                 INTO TABLE IT_EKES
                 FROM EKES
*                   for all entries in it_out
                WHERE EBELN EQ LT_VBFA-VBELN
                  AND EBELP EQ LT_VBFA-POSNN
                  AND EBTYP EQ 'LA'.
*            read table it_ekes with key ebeln = it_vbfa-vbeln
*                                        ebelp = it_vbfa-posnn
*                               binary search.
          IF SY-SUBRC = 0.
            IT_OUT-AVAILABLE = 'GIT'.
          ELSE.
            IT_OUT-AVAILABLE = 'N'.
          ENDIF.
        ELSE.
          IT_OUT-AVAILABLE = 'N'.
        ENDIF.
      ENDIF.
    ENDIF.
    MODIFY it_out."CD1K970831
  ENDLOOP.
ENDFORM.                    " DETERMINE_AVL
*  "MOD-007 end
