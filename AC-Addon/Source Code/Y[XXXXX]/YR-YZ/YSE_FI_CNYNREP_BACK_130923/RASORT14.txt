
ON CHANGE OF ANLAV-BUKRS.

* Text/Waehrungsschluessel zu Bereich 1 in SAV_AFBE1/SAV_WAER1.
  IF NOT BEREICH1 IS INITIAL.
    PERFORM AFABEKTX_LESEN USING BEREICH1 SAV_AFBE1.
    PERFORM WAEHRUNG_ERMITTELN USING BEREICH1 SAV_WAER1.
  ENDIF.
* Text/Waehrungsschluessel zu Bereich 2 in SAV_AFBE2/SAV_WAER2.
  IF NOT BEREICH2 IS INITIAL.
    PERFORM AFABEKTX_LESEN USING BEREICH2 SAV_AFBE2.
    PERFORM WAEHRUNG_ERMITTELN USING BEREICH2 SAV_WAER2.
  ENDIF.
* Text/Waehrungsschluessel zu Bereich 3 in SAV_AFBE3/SAV_WAER3.
  IF NOT BEREICH3 IS INITIAL.
    PERFORM AFABEKTX_LESEN USING BEREICH3 SAV_AFBE3.
    PERFORM WAEHRUNG_ERMITTELN USING BEREICH3 SAV_WAER3.
  ENDIF.

* GJ-Variante T001-PERIV bestimmen. Buchungskreistext bestimmen.
  SELECT SINGLE * FROM T001
    WHERE BUKRS EQ ANLAV-BUKRS.
* Monatsmitte T093C-MONMIT bestimmen.
  SELECT SINGLE * FROM T093C
    WHERE BUKRS EQ ANLAV-BUKRS.
* GJ des Berichtsdatums in SAV_GJAHR sichern.
  CALL FUNCTION  'DATE_TO_PERIOD_CONVERT'
       EXPORTING  I_DATE    =  BERDATUM
                  I_PERIV   =  T001-PERIV
       IMPORTING  E_GJAHR   =  SAV_GJAHR
                  E_BUPER   =  SAV_POPER.
* Ersten Tag des GJ in SAV_GJBEG sichern.
  CALL FUNCTION 'FIRST_DAY_IN_PERIOD_GET'
       EXPORTING  I_GJAHR   =  SAV_GJAHR
                  I_PERIV   =  T001-PERIV
                  I_POPER   =  CON_POPER
       IMPORTING  E_DATE    =  SAV_GJBEG.
* Letzten Tag des GJ in SAV_GJEND sichern.
  CALL FUNCTION 'LAST_DAY_IN_YEAR_GET'
       EXPORTING
            I_DATE  = BERDATUM
            I_PERIV = T001-PERIV
       IMPORTING
            E_DATE  = SAV_GJEND
       EXCEPTIONS
            INPUT_FALSE = 01
            T009_NOTFOUND = 02
            T009B_NOTFOUND = 03.
* GJ zu SY-DATUM in SAV_AKTJHR sichern.
  CALL FUNCTION  'DATE_TO_PERIOD_CONVERT'
       EXPORTING  I_DATE    =  SY-DATLO
                  I_PERIV   =  T001-PERIV
       IMPORTING  E_GJAHR   =  SAV_AKTJHR.

* Report-Header (Titel).
  CLEAR HEAD.
  WRITE: SY-TITLE  TO HEAD-TITLE.

* Flag FLG_EINZEL (einmal) setzen, wenn nur genau ein Datensatz
* verarbeitet wird (wichtig fuer Unterdrueckung von Summen).
  IF FLG_EINZEL EQ SPACE.
    PERFORM FLG_EINZEL_SETZEN.
  ENDIF.

* Eventuell Simulationsvariante lesen.
  IF NOT *ANLA0-SIMVAR IS INITIAL.
*   Text ...
    SELECT SINGLE * FROM T090U
      WHERE SPRAS  EQ SY-LANGU
      AND   SIMVAR EQ *ANLA0-SIMVAR.
    IF SY-SUBRC NE 0.
      CLEAR: T090U.
    ENDIF.
*   ... und Ersetzungsvorschriften aus T090I ...
    REFRESH X090I.
    SELECT * FROM T090I INTO TABLE X090I
      WHERE SIMVAR EQ *ANLA0-SIMVAR ORDER BY PRIMARY KEY.
*   ... und NameTab zu T090I.
    CALL FUNCTION 'VIEW_GET_FIELDTAB'
         EXPORTING
              VIEW_NAME = 'T090I'
         TABLES
              FIELDTAB = NAMETAB.
  ENDIF.

* Hilfstexte aufbauen.
* Anlagengitterbezeichnung + (Un-)Vollstaendigkeitsvermerk.
  IF FLG_GITTER EQ '1'.
    CLEAR SAV_GITTERTXT.
    WRITE: GITBEZ       TO SAV_GITTERTXT(50),
           SAV_COMPLTXT TO SAV_GITTERTXT+51(15).
    CONDENSE SAV_GITTERTXT.
  ENDIF.
* Simulationsvariante + Bezeichnung.
  IF NOT T090U-SIMVAR IS INITIAL.
    READ TABLE NAMETAB INDEX 2.
    CLEAR SAV_SIMVARTXT.
    WRITE: NAMETAB-SCRTEXT_M TO SAV_SIMVARTXT(20),
           T090U-SIMVAR      TO SAV_SIMVARTXT+21(2),
           '-'               TO SAV_SIMVARTXT+24(1),
           T090U-SIMVTX      TO SAV_SIMVARTXT+26.
    CONDENSE SAV_SIMVARTXT.
  ENDIF.

ENDON.
