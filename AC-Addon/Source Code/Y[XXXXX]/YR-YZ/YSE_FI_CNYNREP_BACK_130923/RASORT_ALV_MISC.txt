*----------------------------------------------------------------------*
*   INCLUDE RASORT_ALV40                                               *
*----------------------------------------------------------------------*

*---------------------------------------------------------------------*
* Merken der benoetigten Feldattribute der Sortierfelder (aus DDIC)   *
* in der internen Tabelle FELD.                                       *
*---------------------------------------------------------------------*
* <-- FELD       Tabelle mit Feldattributen der Sortierfelder         *
* <-- FLG_XANLN1 Kennzeichen "Summe je Hauptnummer ausgeben"          *
*---------------------------------------------------------------------*
FORM feldattribute_merken.

*   T086 einlesen.
  SELECT SINGLE * FROM t086
    WHERE srtvar EQ srtvr.
*
  IF sy-subrc EQ 0.
*     Summe je Anlage ausgeben.
    MOVE t086-xanln1 TO flg_xanln1.
*     F¨¹r Add-Fields eine Initialisierung durchf¨¹hren
    IF t086-anzuntnr IS INITIAL.
      t086-anzuntnr = 2.
    ENDIF.
  ELSE.
*     Keine Sortiervariante angegeben.
    CLEAR flg_xanln1.
  ENDIF.

*   Tabelle Feld fuellen.
  REFRESH feld.
  PERFORM feld_fuellen USING t086-tabln1  t086-feldn1
                             t086-offset1 t086-laenge1
                             t086-xsumm1  t086-xaflg1
                             t086-xnewpg1.
  PERFORM feld_fuellen USING t086-tabln2  t086-feldn2
                             t086-offset2 t086-laenge2
                             t086-xsumm2  t086-xaflg2
                             t086-xnewpg2.
  PERFORM feld_fuellen USING t086-tabln3  t086-feldn3
                             t086-offset3 t086-laenge3
                             t086-xsumm3  t086-xaflg3
                             t086-xnewpg3.
  PERFORM feld_fuellen USING t086-tabln4  t086-feldn4
                             t086-offset4 t086-laenge4
                             t086-xsumm4  t086-xaflg4
                             t086-xnewpg4.
  PERFORM feld_fuellen USING t086-tabln5  t086-feldn5
                             t086-offset5 t086-laenge5
                             t086-xsumm5  t086-xaflg5
                             t086-xnewpg5.

* Muss Kostenstellenstamm/Bilanzversion gelesen werden?
  LOOP AT feld
    WHERE tabln EQ 'ANLAV'
    AND ( feldn EQ 'KHINR' OR
          feldn EQ 'TXJCD' OR
          feldn EQ 'PRCTR' OR
          feldn EQ 'ERGSO' OR
          feldn EQ 'ERGHB' ).
    CASE feld-feldn.
      WHEN 'KHINR'.
         *anla0-xkost = 'X'.
      WHEN 'TXJCD'.
         *anla0-xkost = 'X'.
      WHEN 'PRCTR'.
         *anla0-xkost = 'X'.
      WHEN 'ERGSO'.
         *anla0-xbilv = 'X'.
      WHEN 'ERGHB'.
         *anla0-xbilv = 'X'.
    ENDCASE.
  ENDLOOP.

* Summenbericht + keine Stufe zum Summieren vorgesehen ...
  IF summb NE space.
    DESCRIBE TABLE feld LINES cnt_count.
    IF cnt_count GT 0.
      LOOP AT feld
        WHERE xsumm NE space.
      ENDLOOP.
    ENDIF.
    IF cnt_count = 0  OR
     ( cnt_count > 0  AND
       sy-subrc NE 0 ).
*          ... Fehler!
      MESSAGE e036 WITH srtvr.
    ENDIF.
  ENDIF.

* Anzahl Sortierfelder in Sortierstufe merken.
  DESCRIBE TABLE feld LINES cnt_count.
  MOVE cnt_count TO con_srtst.

ENDFORM.                    "FELDATTRIBUTE_MERKEN


*---------------------------------------------------------------------*
*       FORM FELD_FUELLEN                                             *
*---------------------------------------------------------------------*
*       FELD ist die Tabelle f¨¹r die Sortierfelder.                   *
*---------------------------------------------------------------------*
*  -->  F_TABLN                                                       *
*  -->  F_FELDN                                                       *
*  -->  F_OFFSET                                                      *
*  -->  F_LAENGE                                                      *
*  -->  F_XSUMM                                                       *
*  -->  F_XAFLG                                                       *
*---------------------------------------------------------------------*
FORM feld_fuellen USING f_tabln  f_feldn
                        f_offset f_laenge
                        f_xsumm  f_xaflg
                        f_xnewpg.

  DATA: l_pack(6)      TYPE p,
        l_char(10)     TYPE c,
        l_ftext        LIKE dfies-reptext,
        l_position     LIKE sy-fdpos.
  DATA: wa_dfies TYPE dfies.
  DATA: ddic_tabname   LIKE dfies-tabname,
        ddic_fieldname LIKE dfies-lfieldname.

  IF f_tabln NE space.

    CLEAR feld.
*
    MOVE: f_tabln TO feld-tabln,
          f_feldn TO feld-feldn,
          f_offset TO feld-foffset,
          f_laenge TO feld-laenge,
          f_xsumm TO feld-xsumm,
          f_xaflg TO feld-xaflg,
          f_xnewpg TO feld-xnewpg.

    ddic_tabname   = feld-tabln.
    ddic_fieldname = feld-feldn.
    CALL FUNCTION 'DDIF_FIELDINFO_GET'
      EXPORTING
        tabname    = ddic_tabname
        lfieldname = ddic_fieldname
      IMPORTING
        dfies_wa   = wa_dfies
      EXCEPTIONS
        OTHERS     = 0.
    IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

**
*    PERFORM GET_FIELD(RDDFIE00)
*      USING F_TABLN F_FELDN SY-LANGU
*      CHANGING DFIES SY-SUBRC.
*
    MOVE: wa_dfies-scrtext_m TO feld-ftext,
          wa_dfies-headlen   TO feld-laeng,
          wa_dfies-reptext   TO feld-spalt.
*   Bei Offset und Laenge: FTEXT korrigieren.
*   Mit ALV leider nicht m#glich!
*    IF not f_offset is initial.
*      MOVE: '+'        TO l_char(1),
*            f_offset   TO l_pack.
*      WRITE l_pack     TO l_char+1(2).
*    ENDIF.
*    IF not f_laenge is initial.
*      MOVE: '(  )'     TO l_char+3(4),
*            f_laenge   TO l_pack.
*      WRITE l_pack     TO l_char+4(2).
*    ENDIF.
    CONDENSE l_char NO-GAPS.
    IF l_char CA ' '.
    ENDIF.
    l_position = 20 - sy-fdpos.
    l_ftext = feld-ftext.
    MOVE l_ftext+l_position TO  l_char.
*   PERFORM FIELD_ASSIGN USING L_FTEXT+L_POSITION L_CHAR.
    CONDENSE l_ftext NO-GAPS.
    feld-ftext = l_ftext.
*   Bei Offset und Laenge: LAENG korrigieren.
    IF NOT f_laenge IS INITIAL.
      feld-laeng = f_laenge.
    ENDIF.
*    IF not f_offset is initial and
*           f_laenge is initial .
*      feld-laeng = feld-laeng - f_offset.
*    ENDIF.
*
    APPEND feld.

  ENDIF.

ENDFORM.                    "FELD_FUELLEN


*---------------------------------------------------------------------*
*       FORM FIELD_ASSIGN                                             *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  F_SOURCE                                                      *
*  -->  F_TARGET                                                      *
*---------------------------------------------------------------------*
FORM field_assign USING f_source f_target.

  f_source = f_target.

ENDFORM.                    "FIELD_ASSIGN


*---------------------------------------------------------------------*
* Zuweisung der Sortierfelder aus T086 zu den Feldsymbolen.           *
*---------------------------------------------------------------------*
FORM feldsymbole_zuweisen.

* 1. Feldsymbol.
  READ TABLE feld INDEX 1.
  IF sy-subrc EQ 0.
    PERFORM flst_aufbauen.
    ASSIGN (flst) TO <s1>.
    ASSIGN COMPONENT feld-feldn OF STRUCTURE sumline TO <sum1>.
    ASSIGN COMPONENT feld-feldn OF STRUCTURE sumtab_data_s TO <sum_s1>.
  ELSE.
    ASSIGN sav_dummy TO <s1>.
  ENDIF.

* 2. Feldsymbol.
  READ TABLE feld INDEX 2.
  IF sy-subrc EQ 0.
    PERFORM flst_aufbauen.
    ASSIGN (flst) TO <s2>.
    ASSIGN COMPONENT feld-feldn OF STRUCTURE sumline TO <sum2>.
    ASSIGN COMPONENT feld-feldn OF STRUCTURE sumtab_data_s TO <sum_s2>.
  ELSE.
    ASSIGN sav_dummy TO <s2>.
  ENDIF.

* 3. Feldsymbol.
  READ TABLE feld INDEX 3.
  IF sy-subrc EQ 0.
    PERFORM flst_aufbauen.
    ASSIGN (flst) TO <s3>.
    ASSIGN COMPONENT feld-feldn OF STRUCTURE sumline TO <sum3>.
    ASSIGN COMPONENT feld-feldn OF STRUCTURE sumtab_data_s TO <sum_s3>.
  ELSE.
    ASSIGN sav_dummy TO <s3>.
  ENDIF.

* 4. Feldsymbol.
  READ TABLE feld INDEX 4.
  IF sy-subrc EQ 0.
    PERFORM flst_aufbauen.
    ASSIGN (flst) TO <s4>.
    ASSIGN COMPONENT feld-feldn OF STRUCTURE sumline TO <sum4>.
    ASSIGN COMPONENT feld-feldn OF STRUCTURE sumtab_data_s TO <sum_s4>.
  ELSE.
    ASSIGN sav_dummy TO <s4>.
  ENDIF.

* 5. Feldsymbol.
  READ TABLE feld INDEX 5.
  IF sy-subrc EQ 0.
    PERFORM flst_aufbauen.
    ASSIGN (flst) TO <s5>.
    ASSIGN COMPONENT feld-feldn OF STRUCTURE sumline TO <sum5>.
    ASSIGN COMPONENT feld-feldn OF STRUCTURE sumtab_data_s TO <sum_s5>.
  ELSE.
    ASSIGN sav_dummy TO <s5>.
  ENDIF.

ENDFORM.                    "FELDSYMBOLE_ZUWEISEN

*---------------------------------------------------------------------*
*       FORM FLST_AUFBAUEN                                            *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM flst_aufbauen.

  CLEAR flst.

  MOVE: feld-tabln TO flst-tabln,
        '-'        TO flst-stric,
        feld-feldn TO flst-feldn.
* Offset?
* Mit ALV leider nicht m#glich!
*  IF not feld-foffset is initial.
*    WRITE: '+'         TO flst-offset(1),
*           feld-foffset TO flst-offset+1(2).
*  ELSE.
  CLEAR flst-offset.
*  ENDIF.
* Laenge?
*  IF not feld-laenge is initial.
*    WRITE: '(  )'      TO flst-laenge,
*           feld-laenge TO flst-laenge+1(2).
*  ELSE.
  CLEAR flst-laenge.
*  ENDIF.
*
  CONDENSE flst NO-GAPS.

ENDFORM.                    "FLST_AUFBAUEN

*---------------------------------------------------------------------*
* Einlesen des Kurztextes zu AfA-Bereich AKL_AFABE.                   *
*---------------------------------------------------------------------*
* --> AKL_AFABE  AfA-Bereich                                          *
* <-- AKL_AFKTX  Kurztext zu AfA-Bereich                              *
*---------------------------------------------------------------------*
FORM afabektx_lesen USING akl_afabe akl_afktx.

* Default: Text = SPACE.
  CLEAR akl_afktx.
* Zuerst Bewertungsplan zu Buchungskreis lesen.
  SELECT SINGLE * FROM t093c
    WHERE bukrs EQ anlav-bukrs.
* Kurztext zu AfA-Bereich lesen.
  IF sy-subrc EQ 0.
    SELECT SINGLE * FROM t093t
      WHERE spras  EQ sy-langu
      AND   afapl  EQ t093c-afapl
      AND   afaber EQ akl_afabe.
    IF sy-subrc EQ 0.
      akl_afktx = t093t-afbktx.
    ENDIF.
  ENDIF.

ENDFORM.                    "AFABEKTX_LESEN


*---------------------------------------------------------------------*
* Ermittlung des Waehrungsschluessels zu AfA-Bereich WER_AFABE.       *
*---------------------------------------------------------------------*
* --> WER_AFABE  AfA-Bereich                                          *
* <-- WER_WAERS  Waehrungsschluessel                                  *
*---------------------------------------------------------------------*
FORM waehrung_ermitteln USING value(wer_afabe) wer_waers.

  CLEAR wer_waers.
  IF NOT umvar IS INITIAL.
    SELECT SINGLE * FROM t091c WHERE umvar = umvar.
    IF sy-subrc = 0 AND NOT t091c-waers IS INITIAL.
      wer_waers = t091c-waers.
      EXIT.
    ENDIF.
  ENDIF.

* Waehrungsschluessel aus T093B.
* select single * from t093b
*   where bukrs eq anlav-bukrs
*   and   afabe eq wer_afabe.

  t093b-bukrs = anlav-bukrs.
  IF wer_afabe = '*'.
    t093b-afabe = con_leitbe.
  ELSE.
    t093b-afabe = wer_afabe.
  ENDIF.
*  call function 'T093B_READ'
*       exporting
*            f_t093b   = t093b
*       importing
*            f_t093b   = t093b
*       exceptions
*            not_found = 1
*            others    = 2.

  CALL FUNCTION 'T093B_READ_VIRTUAL'
*    IMPORTING
*         E_VIRTUAL =
     CHANGING
          f_t093b   = t093b
     EXCEPTIONS
          not_found = 1
          OTHERS    = 2.
  IF sy-subrc EQ 0.
    wer_waers = t093b-waers.
* Nix gefunden?
  ELSE.
*   Dann nimm die Hauswaehrung.
    SELECT SINGLE * FROM t001
      WHERE bukrs EQ anlav-bukrs.
    wer_waers = t001-waers.
  ENDIF.

ENDFORM.                    "WAEHRUNG_ERMITTELN

*---------------------------------------------------------------------*
*       FORM FLG_EINZEL_SETZEN                                        *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM flg_einzel_setzen.

  DATA: l_cnt  LIKE sy-tfill,
        l_cnt1 LIKE sy-tfill,
        l_cnt2 LIKE sy-tfill.

* Default-Annahme: Keine Einzelsatzverarbeitung.
  flg_einzel = off.

* Mehrere Buchungskreise ==> Keine Einzelsatzverarbeitung.
  DESCRIBE TABLE bukrs LINES l_cnt.
  CHECK l_cnt EQ 1.
  READ TABLE bukrs INDEX 1.
  CHECK bukrs-sign  EQ 'I'                       AND
        ( bukrs-option  EQ 'EQ'              OR
          ( bukrs-option  EQ 'BT'        AND
            bukrs-low     EQ bukrs-high  )   )   .

* Verarbeitung von InvProgrammen oder Projekten ==>
* Keine Einzelsatzverarbeitung.
  CHECK pa_xinvp IS INITIAL AND
        pa_xproj IS INITIAL .

* Verarbeitung von Anlagen  u n d  Auftr#gen ==>
* Keine Einzelsatzverarbeitung.
  CHECK   pa_xanlg IS INITIAL OR
          pa_xauft IS INITIAL .

* Verarbeitung von Anlagen.
  IF NOT pa_xanlg IS INITIAL.
    DESCRIBE TABLE anlage   LINES l_cnt.
    CHECK l_cnt EQ 1.
    DESCRIBE TABLE untnr    LINES l_cnt.
    CHECK l_cnt EQ 1.
    READ TABLE anlage INDEX 1.
    READ TABLE untnr  INDEX 1.
    CHECK anlage-sign EQ 'I'                       AND
          ( anlage-option EQ 'EQ'              OR
            ( anlage-option EQ 'BT'        AND
              anlage-low    EQ anlage-high )   )   .
    CHECK untnr-sign EQ 'I'                      AND
          ( untnr-option EQ 'EQ'             OR
            ( untnr-option EQ 'BT'       AND
              untnr-low    EQ untnr-high )   )   .
    flg_einzel = on.
  ENDIF.

* Verarbeitung von Auftr#gen.
  IF NOT pa_xauft IS INITIAL.
*   Genau eine Abgrenzung Auftraege, sonst sicher keine
*   Einzelsatzverarbeitung.
    DESCRIBE TABLE so_eaufn LINES l_cnt1.
    CHECK l_cnt1 EQ 1.
    IF l_cnt1 EQ 1.
      READ TABLE so_eaufn INDEX 1.
      CHECK so_eaufn-sign EQ 'I'                         AND
            ( so_eaufn-option EQ 'EQ'                OR
              ( so_eaufn-option EQ 'BT'          AND
                so_eaufn-low    EQ so_eaufn-high )   )   .
      flg_einzel = on.
    ENDIF.
  ENDIF.

ENDFORM.                    "FLG_EINZEL_SETZEN

* Beim ersten Aufruf Selektionsoptionen sichern.
* Beim Aufruf aus einem PickUp werden die im Memory gespeicherten
* Selektionsoptionen wieder eingelesen.
FORM info_pick_up.
  IF flg_not_first <> 0.
    PERFORM sortierwerte_einlesen.
  ENDIF.
ENDFORM.                    "INFO_PICK_UP


*---------------------------------------------------------------------*
*       FORM SORTIERWERTE_EINLESEN                                    *
*---------------------------------------------------------------------*
*       Einlesen der Sortierwerte aus dem Memory                      *
*---------------------------------------------------------------------*
FORM sortierwerte_einlesen.
  IMPORT z_feld_ind FROM MEMORY ID 'ind'.
  IF z_feld_ind >= 1.
    IMPORT so_sel1 FROM MEMORY ID 'so_sel1'.
  ENDIF.
  IF z_feld_ind >= 2.
    IMPORT so_sel2 FROM MEMORY ID 'so_sel2'.
  ENDIF.
  IF z_feld_ind >= 3.
    IMPORT so_sel3 FROM MEMORY ID 'so_sel3'.
  ENDIF.
  IF z_feld_ind >= 4.
    IMPORT so_sel4 FROM MEMORY ID 'so_sel4'.
  ENDIF.
  IF z_feld_ind >= 5.
    IMPORT so_sel5 FROM MEMORY ID 'so_sel5'.
  ENDIF.
ENDFORM.                    "SORTIERWERTE_EINLESEN

* Bei Aufruf aus einem PickUp einer Zeile werden die Sortierwerte der
* aufgepickten Zeile gegen die aktuellen Daten gecheckt.
* Entsprechen die aktuellen Daten diesen nicht werden sie auch nicht
* in den Datenbestand extrahiert.
* Weiterhin werden alle Anlagen nicht angelistet, die einem Komplex
* zugeordnet sind.
FORM sort_check.
  IF flg_not_first = 1.
    PERFORM sortierwerte_checken USING flg_chk_success.
    IF flg_chk_success NE 1.
* Daten erf¨¹llen nicht die Sortierkriterien.
      REJECT.
    ENDIF.
  ENDIF.
ENDFORM.                    "SORT_CHECK

*---------------------------------------------------------------------*
*       FORM SORTIERWERTE_CHECKEN                                     *
*---------------------------------------------------------------------*
*       Die Sortierwerte der aufgepickten  Zeile werden gegen         *
*       die aktuellen Werte gecheckt                                  *
*---------------------------------------------------------------------*
*  -->  FLG_CHK_SUCCESS                                               *
*       gibt an, ob aktueller Wert den Check bestanden hat            *
*---------------------------------------------------------------------*
FORM sortierwerte_checken USING flg_chk_success.
* BREAK-POINT.
  flg_chk_success = 0.
  IF z_feld_ind >= 1.                  "Sortierstufe 1
    MOVE <s1> TO hlp_feld.
    CHECK hlp_feld IN so_sel1.
  ENDIF.
  IF z_feld_ind >= 2.                  "Sortierstufe 2
    MOVE <s2> TO hlp_feld.
    CHECK hlp_feld IN so_sel2.
  ENDIF.
  IF z_feld_ind >= 3.                  "Sortierstufe 3
    MOVE <s3> TO hlp_feld.
    CHECK hlp_feld IN so_sel3.
  ENDIF.
  IF z_feld_ind >= 4.                  "Sortierstufe 4
    MOVE <s4> TO hlp_feld.
    CHECK hlp_feld IN so_sel4.
  ENDIF.
  IF z_feld_ind >= 5.                  "Sortierstufe 5
    MOVE <s5> TO hlp_feld.
    CHECK hlp_feld IN so_sel5.
  ENDIF.
  flg_chk_success = 1.                 "Daten entsprechen Sortierwerten
ENDFORM.                    "SORTIERWERTE_CHECKEN

* Select-Option-Tabelle f¨¹r Pick-Up aufbauen bzw. zur¨¹cksetzen.
FORM so_tab_erneuern TABLES so_name sav_so_name.
* SO-Tabelle erfrischen
  CLEAR   so_name.
  REFRESH so_name.
* SO-Tabelle in Anfangszustand zur¨¹cksetzen
  LOOP AT sav_so_name.
    MOVE sav_so_name TO so_name.
    APPEND so_name.
  ENDLOOP.
ENDFORM.                    "SO_TAB_ERNEUERN

*---------------------------------------------------------------------*
*       FORM KOMPL_TESTEN                                             *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM kompl_testen.
  DATA: flg_kompl.
  DATA: x093c LIKE t093c OCCURS 0 WITH HEADER LINE.
  DATA: x093b LIKE t093b OCCURS 0 WITH HEADER LINE.

  IF summb IS INITIAL.
    IF *anla0-xakpl IS INITIAL.
*     select * from  t093b
*       where  bukrs  in bukrs
*       and  (  afabe = bereich1 or afabe = bereich2 or
*                 afabe = bereich3 )
*       order by primary key.
*
*       if not t093b-xakpl is initial.
*         flg_kompl = 'X'.
*         exit.
*       endif.
*     endselect.


      CALL FUNCTION 'T093C_READ_MULTIPLE'
        TABLES
          t_t093c          = x093c
        EXCEPTIONS
          no_bukrs_defined = 1
          OTHERS           = 2.

      LOOP AT x093c WHERE bukrs IN bukrs.

        CALL FUNCTION 'T093B_READ_MULTIPLE'
             EXPORTING
                  i_bukrs         =  x093c-bukrs
             TABLES
                  t_t093b         =  x093b
*                  T_T093T         =
             EXCEPTIONS
                  t093b_not_found = 1
                  OTHERS          = 2.

        LOOP AT x093b.
          IF bereich1 <> '*'.
            CHECK ( x093b-afabe = bereich1 OR
                    x093b-afabe = bereich2 OR
                    x093b-afabe = bereich3 ).
          ENDIF.
          IF NOT x093b-xakpl IS INITIAL.
            flg_kompl = 'X'.
            EXIT.
          ENDIF.
        ENDLOOP.
        IF flg_kompl = 'X'.
          EXIT.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDIF.
  IF flg_kompl IS INITIAL.
    CALL FUNCTION 'FIAA_FUNCTION_EXCLUDE'
      EXPORTING
        fcode = 'KOMP'.
  ENDIF.
ENDFORM.                    "KOMPL_TESTEN

*---------------------------------------------------------------------*
*       FORM KOMPLEX_AUFLOESEN                                        *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM komplex_aufloesen.

  IF anlav-xanlgr IS INITIAL.
    MESSAGE e421.
*    Die selektierte Anlage ist kein Komplex.
  ENDIF.
  SUBMIT rakomp_alv01 AND RETURN                            "> 961989
                  WITH bukrs EQ anlav-bukrs SIGN 'I'
                  WITH anlage EQ anlav-anln1 SIGN 'I'
                  WITH bereich1 EQ bereich1
                  WITH berdatum EQ berdatum
                  WITH srtvr EQ srtvr.
ENDFORM.                    "KOMPLEX_AUFLOESEN



* Anlagennummer aus Hide-Bereich in die Sel-Optiontabelle f¨¹llen.
FORM anlage_fuellen TABLES it_sel    STRUCTURE rstisel
                           it_fields STRUCTURE rstifields.

*   Anlagenhauptnummer f¨¹llen.
  PERFORM seloptions_eintrag TABLES it_sel
                                    it_fields
                             USING  'ANLAGE' 'ANLAV'
                                    'ANLN1' anlav-anln1.
*   Anlagenunternummer.
  PERFORM seloptions_eintrag TABLES it_sel
                                    it_fields
                             USING  'UNTNR' 'ANLAV'
                                    'ANLN2' anlav-anln2.
*   Buchungskreis.
  PERFORM seloptions_eintrag TABLES it_sel
                                    it_fields
                             USING  'BUKRS' 'ANLAV'
                                    'BUKRS' anlav-bukrs.

************************************************************************
* Listvariante f¨¹r Bestelllisten, sollte sp#ter eliminiert werden
  DATA: l_listvar LIKE t160o-listu.
  TABLES: t160b.


  SELECT * FROM  t160b
         WHERE  tcode       = 'AW01'.
    l_listvar = t160b-listu.
    EXIT.
  ENDSELECT.

  PERFORM seloptions_eintrag TABLES it_sel
                                    it_fields
                             USING  'LISTU' 'T160O'
                                    'LISTU' l_listvar.
************************************************************************
ENDFORM.                    "ANLAGE_FUELLEN



*---------------------------------------------------------------------*
*       FORM SELOPTIONS_EINTRAG                                       *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  SEL_OPTS                                                      *
*  -->  VALUE(SEL_NAM)                                                *
*  -->  VALUE(SEL_VAL)                                                *
*---------------------------------------------------------------------*
FORM seloptions_eintrag TABLES it_sel     STRUCTURE rstisel
                               it_fields  STRUCTURE rstifields
                        USING  value(sel_optnam)
                               value(sel_tabnam)
                               value(sel_fnam)
                               value(sel_val).

* Lokaler Tabellenindex.
  DATA: l_tabix LIKE sy-tabix.
  DATA: wa_dfies       TYPE dfies,
        ddic_tabname   LIKE dfies-tabname,
        ddic_fieldname LIKE dfies-lfieldname.

* Eintrag aus Tabelle it_sel genau spezifizieren.
  READ TABLE it_sel WITH KEY field = sel_optnam.
  IF sy-subrc = 0.
    CLEAR: it_sel-high.
    it_sel-low    = sel_val.
    it_sel-sign   = 'I'.
    it_sel-option = 'EQ'.
    MODIFY it_sel INDEX sy-tabix.
    l_tabix = sy-tabix + 1.
    LOOP AT it_sel FROM l_tabix
        WHERE field = sel_optnam.
      DELETE it_sel.
    ENDLOOP.
* Eintrag noch nicht vorhanden.
  ELSE.
    CLEAR: it_sel.
    it_sel-field  = sel_optnam.
    it_sel-low    = sel_val.
    it_sel-sign   = 'I'.
    it_sel-option = 'EQ'.
    APPEND it_sel.
*   Namen einf¨¹gen
    READ TABLE it_fields WITH KEY field = sel_optnam.
    IF sy-subrc <> 0.
      ddic_tabname   = sel_tabnam.
      ddic_fieldname = sel_fnam.
      CALL FUNCTION 'DDIF_FIELDINFO_GET'
        EXPORTING
          tabname    = ddic_tabname
          lfieldname = ddic_fieldname
        IMPORTING
          dfies_wa   = wa_dfies
        EXCEPTIONS
          OTHERS     = 0.

      it_fields-domname  = wa_dfies-domname.             " Dom#ne
      it_fields-rollname = wa_dfies-rollname.            " Datenelement
      it_fields-field = sel_optnam.    " Feldname
      it_fields-kind  = 'S'.           " Selectoption
      APPEND it_fields.
    ENDIF.
  ENDIF.

ENDFORM.                    "SELOPTIONS_EINTRAG

*---------------------------------------------------------------------*
*       FORM BBS_VERARBEITEN                                          *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM bbs_verarbeiten.
  DATA: hlp_lines LIKE sy-index.
  DATA: hlp_ionra LIKE ionra.
  DATA: l_obart           LIKE ionra-obart,
        l_measure         LIKE imcem-measure,
        l_aufnr_low       LIKE aufk-aufnr,
        l_aufnr_high      LIKE aufk-aufnr,
        l_ps_posid_low    LIKE prps-posid,
        l_ps_posid_high   LIKE prps-posid.


* Verarbeitung der ¨¹bergebenen Projekte. Konvertierung von externen
* zur internen Projektnummer.
  REFRESH posnr.

* Verarbeitung allgemeine Ma#nahmennummer.
  LOOP AT measure.

    l_measure = measure-low.
    CALL FUNCTION 'AIC0_MEASURE_SPLIT'
      EXPORTING
        i_measure  = l_measure
      IMPORTING
        e_obart    = l_obart
        e_aufnr    = l_aufnr_low
        e_ps_posid = l_ps_posid_low.
    .
    l_measure = measure-high.
    CALL FUNCTION 'AIC0_MEASURE_SPLIT'
      EXPORTING
        i_measure  = l_measure
      IMPORTING
        e_obart    = l_obart
        e_aufnr    = l_aufnr_high
        e_ps_posid = l_ps_posid_high.
    .
    CASE l_obart.
*   Auftrag.
      WHEN 'OR'.
        eaufn-sign   = measure-sign.
        eaufn-option = measure-option.
        eaufn-low    = l_aufnr_low.
        eaufn-high   = l_aufnr_high.
        APPEND eaufn.
*   Projekt.
      WHEN 'PR'.
        posnr-sign   = measure-sign.
        posnr-option = measure-option.
*       ACHTUNG: Dom#nen#nderung von ANLAV-POSNR
*       POSNR hat ab 4.5B die Dom#ne PS_POSID !!!
        posnr-low    = l_ps_posid_low.
        posnr-high   = l_ps_posid_high.
        APPEND posnr.

    ENDCASE.

  ENDLOOP.

  LOOP AT posid.
    posnr-sign = posid-sign.
    posnr-option = posid-option.
    posnr-low    = posid-low   .
    posnr-high   = posid-high  .

    APPEND posnr.
  ENDLOOP.

* Verarbeitung von allgemeiner Objektnummer
  LOOP AT objnr.

    CALL FUNCTION 'OBJECT_IDENTIFICATION_GET'
      EXPORTING
        objnr   = objnr-low
      IMPORTING
        e_ionra = hlp_ionra.

    CASE hlp_ionra-obart.
      WHEN 'OR'.
        eaufn-sign = 'I'.
        eaufn-option = 'EQ'.
        eaufn-low = hlp_ionra-aufnr.
        APPEND eaufn.

      WHEN 'PR'.
        posnr-sign = 'I'.
        posnr-option = 'EQ'.
        posnr-low = hlp_ionra-pspnr.
        APPEND posnr.
    ENDCASE.
  ENDLOOP.

* Parameter und Selektionsoptionen f¨¹r Simulation clearen - sonst doppel
  IF sy-subrc EQ 0.
    REFRESH so_pspnr.
    CLEAR pa_posid.
  ENDIF.

  DESCRIBE TABLE eaufn LINES hlp_lines.
  IF hlp_lines GT 0.
    REFRESH so_eaufn.
  ENDIF.

* Buchungskreis = SPACE eliminieren.
  LOOP AT bukrs.
    IF bukrs-sign = 'I' AND bukrs-option = 'EQ'
                        AND bukrs-low IS INITIAL.
      DELETE bukrs.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "BBS_VERARBEITEN

*---------------------------------------------------------------------*
*       FORM AV_BUKRS_CHECK                                           *
*---------------------------------------------------------------------*
*   Reports ¨¹ber mehr als einen Buchungskreis -> keine AV's erzeugen.
*   und auch bei Summenlisten                 -> keine AV's erzeugen.
*---------------------------------------------------------------------*
FORM av_bukrs_check.
* Summenbericht ?
  IF NOT summb IS INITIAL.
*   AV's erzeugen.
    CALL FUNCTION 'FIAA_FUNCTION_EXCLUDE'
      EXPORTING
        fcode = 'AICR'.
*   AV's erg#nzen.
    CALL FUNCTION 'FIAA_FUNCTION_EXCLUDE'
      EXPORTING
        fcode = 'AIME'.
    EXIT.
  ENDIF.


* mehrere Buchungskreise
  DESCRIBE TABLE bukrs LINES sy-tabix.
  IF sy-tabix > 1.
*   AV's erzeugen.
    CALL FUNCTION 'FIAA_FUNCTION_EXCLUDE'
      EXPORTING
        fcode = 'AICR'.
*   AV's erg#nzen.
    CALL FUNCTION 'FIAA_FUNCTION_EXCLUDE'
      EXPORTING
        fcode = 'AIME'.
  ELSE.
*   Buchungskreis mit Between angegeben.
    READ TABLE bukrs INDEX 1.
    IF bukrs-high > bukrs-low AND                         "#EC PORTABLE
       bukrs-sign <> 'EQ'.
*     AV's erzeugen.
      CALL FUNCTION 'FIAA_FUNCTION_EXCLUDE'
        EXPORTING
          fcode = 'AICR'.
*     AV's erg#nzen.
      CALL FUNCTION 'FIAA_FUNCTION_EXCLUDE'
        EXPORTING
          fcode = 'AIME'.
    ENDIF.
  ENDIF.

ENDFORM.                    "AV_BUKRS_CHECK


*---------------------------------------------------------------------*
*       FORM RSTI_SELECTION_EXIT                                      *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  IT_FIELDRM                                                    *
*  -->  FLG_OWN_LOGIC                                                 *
*---------------------------------------------------------------------*
FORM rsti_selection_exit TABLES it_fieldrm STRUCTURE rstifields
                        USING flg_own_logic.

* Bereich f¨¹r BBS
  it_fieldrm-rfield = 'BEREICH1'.
  it_fieldrm-trflg = 'I'.

  it_fieldrm-domname = 'AFABE'.
  APPEND it_fieldrm.
* SUMMB
  it_fieldrm-rfield = 'SUMMB'.
  it_fieldrm-trflg = 'I'.

  it_fieldrm-domname = 'SUMMB'.
  APPEND it_fieldrm.

* XEINZL
  it_fieldrm-rfield = 'XEINZEL'.
  it_fieldrm-trflg = 'I'.

  it_fieldrm-domname = 'XEINZL'.
  APPEND it_fieldrm.

* Gesch#ftsjahr                                                "> 380767
  it_fieldrm-rfield  = 'SO_GNJHR'.                          "> 380767
  it_fieldrm-trflg   = 'E'.                                 "> 380767

  it_fieldrm-domname = 'GJAHR'.                             "> 380767
  APPEND it_fieldrm.                                        "> 380767

* Bei bestimmten Berichten ...
  CASE sy-repid.
    WHEN 'RASOPO_ALV01'.        " RASOPO
*     Bereich2 und 3 f¨¹r BBS AUSschalten.
*     (RASOPO kann nur einen Bereich verarbeiten)
      it_fieldrm-rfield = 'BEREICH2'.
      it_fieldrm-trflg = 'E'.

      it_fieldrm-domname = 'AFABE'.
      APPEND it_fieldrm.

      it_fieldrm-rfield = 'BEREICH3'.
      it_fieldrm-trflg = 'E'.

      it_fieldrm-domname = 'AFABE'.
      APPEND it_fieldrm.
  ENDCASE.

ENDFORM.                    "RSTI_SELECTION_EXIT

* Hier wird gepr¨¹ft, ob dem ersten Schritt des Workflows zur
* Massenbearbeitung Bearbeiter zugeordnet worden sind.
* Wenn das nicht der Fall ist, kann der AV nur ¨¹ber
* das Programm RAWORK01 bearbeitet werden.
FORM wf_status_pruefen.

* WF aktiv
  CALL FUNCTION 'AM_WF_STATUS_PRUEFEN'
    IMPORTING
      e_wfactive = flg_wfaktiv
    EXCEPTIONS
      OTHERS     = 0.
ENDFORM.                    "WF_STATUS_PRUEFEN
*&---------------------------------------------------------------------*
*&      Form  fehler_ausgeben
*&---------------------------------------------------------------------*
*       Store erroneous assets before the list output
*----------------------------------------------------------------------*
* Form routine implemented new with note 1002552
FORM store_errors.

  FIELD-SYMBOLS: <lfs_anfm> TYPE anfm.

  CHECK NOT yanfm[] IS INITIAL.

* start of note 1421225
* Check message class is intial
  LOOP AT yanfm ASSIGNING <lfs_anfm>
                WHERE ID IS INITIAL.
    <lfs_anfm>-id = 'AA'.
  ENDLOOP.
* end of note 1421225

  APPEND INITIAL LINE TO gt_anfm[] ASSIGNING <lfs_anfm>.
  <lfs_anfm>-id = 'AB'.
  <lfs_anfm>-kz = 'W'.
  <lfs_anfm>-nr = '076'.
  <lfs_anfm>-v1 = anlav-bukrs.
  <lfs_anfm>-v2 = anlav-anln1.
  <lfs_anfm>-v3 = anlav-anln2.

  APPEND LINES OF yanfm[] TO gt_anfm[].
ENDFORM.                    " store_errors
*&---------------------------------------------------------------------*
*&      Form  CHECK_SORT_SELECT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->ld_select_index  text
*      -->ld_select_field  text
*      <--ld_select_not_found  text
*----------------------------------------------------------------------*
FORM CHECK_SORT_SELECT  USING    ld_select_index
                                 ld_select_field
                        CHANGING ld_select_found.

  CLEAR ld_select_found.

* select sort level from ALV list
* check sort level in selection tables in logical expressions
  IF flg_not_first = 1.

    CASE ld_select_index.
      WHEN 1.
        CHECK ld_select_field IN so_sel1.
      WHEN 2.
        CHECK ld_select_field IN so_sel2.
      WHEN 3.
        CHECK ld_select_field IN so_sel3.
      WHEN 4.
        CHECK ld_select_field IN so_sel4.
      WHEN 5.
        CHECK ld_select_field IN so_sel5.
    ENDCASE.

    ld_select_found = con_x.

  ELSE.

* No check, if select sort level from ALV list
    ld_select_found = con_x.

  ENDIF.

ENDFORM.                    " CHECK_SORT_SELECT
