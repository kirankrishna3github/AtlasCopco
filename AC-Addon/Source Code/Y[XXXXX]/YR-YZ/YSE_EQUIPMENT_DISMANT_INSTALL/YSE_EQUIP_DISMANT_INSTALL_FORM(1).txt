*&---------------------------------------------------------------------*
*&  Include           yse_fi_upl_noteditems_forms                      *
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  READ_FILE
*&---------------------------------------------------------------------*
FORM read_file.

  DATA : w_filename TYPE string.


  SELECT SINGLE * FROM usr01 WHERE bname = sy-uname.

  w_filename = p_fname.


  IF p_one = 'X'.

    CALL FUNCTION 'GUI_UPLOAD'
      EXPORTING
        filename                = w_filename
        filetype                = 'ASC'
        has_field_separator     = 'X'
      TABLES
        data_tab                = i_data1
      EXCEPTIONS
        file_open_error         = 1
        file_read_error         = 2
        no_batch                = 3
        gui_refuse_filetransfer = 4
        invalid_type            = 5
        no_authority            = 6
        unknown_error           = 7
        bad_data_format         = 8
        header_not_allowed      = 9
        separator_not_allowed   = 10
        header_too_long         = 11
        unknown_dp_error        = 12
        access_denied           = 13
        dp_out_of_memory        = 14
        disk_full               = 15
        dp_timeout              = 16
        OTHERS                  = 17.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

* Delete first row from file if user indicated that a header line is
* included
    IF p_header = 'X'.
      DELETE i_data1 INDEX 1.
    ENDIF.

    PERFORM copy_data.

  ELSE.

    CALL FUNCTION 'GUI_UPLOAD'
      EXPORTING
        filename                = w_filename
        filetype                = 'ASC'
        has_field_separator     = 'X'
      TABLES
        data_tab                = i_data
      EXCEPTIONS
        file_open_error         = 1
        file_read_error         = 2
        no_batch                = 3
        gui_refuse_filetransfer = 4
        invalid_type            = 5
        no_authority            = 6
        unknown_error           = 7
        bad_data_format         = 8
        header_not_allowed      = 9
        separator_not_allowed   = 10
        header_too_long         = 11
        unknown_dp_error        = 12
        access_denied           = 13
        dp_out_of_memory        = 14
        disk_full               = 15
        dp_timeout              = 16
        OTHERS                  = 17.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

* Delete first row from file if user indicated that a header line is
* included
    IF p_header = 'X'.
      DELETE i_data INDEX 1.
    ENDIF.
  ENDIF.
ENDFORM.                    " READ_FILE

*&---------------------------------------------------------------------*
*&      Form  CREATE_BATCH_INPUT
*&---------------------------------------------------------------------*
FORM create_batch_input .
* Copy the data lines to a table with fewer fields to allow grouping
  i_header[] = i_data[].

* Call Batch Input session method
  LOOP AT i_data.

    PERFORM open_group.

    PERFORM bdc_dynpro      USING 'SAPMIEQ0' '0100'.

    PERFORM bdc_field       USING 'RM63E-EQUNR'
                                   i_data-equnr.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '/00'.
    PERFORM bdc_dynpro      USING 'SAPMIEQ0' '0101'.

    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '=T\04'.

    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '=BU'.
    PERFORM bdc_transaction USING 'IE02'.

    PERFORM close_group.

  ENDLOOP.
ENDFORM.                    " CREATE_BATCH_INPUT

*&---------------------------------------------------------------------*
*&      Form  copy_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM copy_data.

  REFRESH i_data.
  CLEAR i_data.

  LOOP AT i_data1.
    MOVE-CORRESPONDING i_data1 TO i_data.
    APPEND i_data.
    CLEAR i_data.
  ENDLOOP.

ENDFORM.                    "copy_data
*&---------------------------------------------------------------------*
*&      Form  BDC_DYNPRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0315   text
*      -->P_0316   text
*----------------------------------------------------------------------*
FORM bdc_dynpro  USING program dynpro.
  CLEAR bdcdata.
  bdcdata-program  = program.
  bdcdata-dynpro   = dynpro.
  bdcdata-dynbegin = 'X'.
  APPEND bdcdata.
ENDFORM.                    " BDC_DYNPRO
*&---------------------------------------------------------------------*
*&      Form  BDC_FIELD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0320   text
*      -->P_I_DATA_ZUMSK  text
*----------------------------------------------------------------------*
FORM bdc_field  USING  fnam fval.
  IF fval <> nodata.
    CLEAR bdcdata.
    bdcdata-fnam = fnam.
    bdcdata-fval = fval.
    APPEND bdcdata.
  ENDIF.
ENDFORM.                    " BDC_FIELD
*&---------------------------------------------------------------------*
*&      Form  BDC_TRANSACTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0470   text
*----------------------------------------------------------------------*
FORM bdc_transaction  USING tcode.
  DATA: l_mstring(480).
  DATA: l_subrc LIKE sy-subrc.
* batch input session
  IF session = 'X'.
    CALL FUNCTION 'BDC_INSERT'
      EXPORTING
        tcode     = tcode
      TABLES
        dynprotab = bdcdata.
    IF smalllog <> 'X'.
      WRITE: / 'BDC_INSERT'(i03),
               tcode,
               'returncode:'(i05),
               sy-subrc,
               'RECORD:',
               sy-index.
    ENDIF.
  ENDIF.
ENDFORM.                    " BDC_TRANSACTION
*&---------------------------------------------------------------------*
*&      Form  OPEN_GROUP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM open_group .
  IF session = 'X'.
    SKIP.
    WRITE: /(20) 'Create group'(i01), 'NOTED_ITEMS'.
    SKIP.
*   open batchinput group
    CALL FUNCTION 'BDC_OPEN_GROUP'
      EXPORTING
        client   = sy-mandt
        group    = 'NOTED_ITEMS'
        user     = user
        keep     = keep
        holddate = holddate.
    WRITE: /(30) 'BDC_OPEN_GROUP'(i02),
            (12) 'returncode:'(i05),
                 sy-subrc.
  ENDIF.
ENDFORM.                    " OPEN_GROUP
*&---------------------------------------------------------------------*
*&      Form  CLOSE_GROUP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM close_group .
  IF session = 'X'.
*   close batchinput group
    CALL FUNCTION 'BDC_CLOSE_GROUP'.
    WRITE: /(30) 'BDC_CLOSE_GROUP'(i04),
            (12) 'returncode:'(i05),
                 sy-subrc.
  ELSE.
    IF e_group_opened = 'X'.
      CALL FUNCTION 'BDC_CLOSE_GROUP'.
      WRITE: /.
      WRITE: /(30) 'Fehlermappe wurde erzeugt'(i06).
      e_group_opened = ' '.
    ENDIF.
  ENDIF.
ENDFORM.                    " CLOSE_GROUP
