*&---------------------------------------------------------------------*
*& Report  YAM_MEREP_LOG_DISPLAY                                       *
*&                                                                     *
*&---------------------------------------------------------------------*
*& This report will select and output the applications logs generated  *
*& by the MEREP backend logging functions                              *
*&---------------------------------------------------------------------*

REPORT  yam_merep_log_display                   .

TABLES: syst.

*.................. Selection screen.................................. *
SELECT-OPTIONS: s_userid FOR syst-uname OBLIGATORY,
                s_datlo  FOR syst-datlo OBLIGATORY.

*.................. Main program...................................... *
START-OF-SELECTION.
*.. Search DB to find logs
  PERFORM select_logs.

*.. Display found logs
  PERFORM display_logs.

*.................. Form routines..................................... *
*eject
*&---------------------------------------------------------------------*
*&      Form  select_logs
*&---------------------------------------------------------------------*
*       text: Select logs from database
*----------------------------------------------------------------------*
FORM select_logs .
* DATA: lv_extnumber TYPE balnrext.

  DATA: ls_filter    TYPE bal_s_lfil,
*       ls_extnumber TYPE bal_s_extn,
        ls_object    TYPE bal_s_obj,
        ls_log_head  TYPE balhdr,
        ls_subobj    TYPE bal_s_sub.

  DATA: lt_log_header TYPE balhdr_t.

  CONSTANTS: c_i(1) TYPE c VALUE 'I',
             c_eq(2) TYPE c VALUE 'EQ'.

*.. Build external number
*  CONCATENATE p_userid p_datlo INTO lv_extnumber.
*
**.. Fill filter criteria
*  ls_extnumber-sign = c_i.
*  ls_extnumber-option = c_eq.
*  ls_extnumber-low = lv_extnumber.
*  APPEND ls_extnumber TO ls_filter-extnumber.

  ls_object-sign = c_i.
  ls_object-option = c_eq.
  ls_object-low = 'YAM_MEREP'.
  APPEND ls_object TO ls_filter-object.

  ls_filter-aluser[] = s_userid[].
  ls_filter-aldate[] = s_datlo[].
*  ls_subobj-sign = c_i.
*  ls_subobj-option = c_eq.
*  ls_subobj-low = ip_subobj.
*  APPEND ls_subobj TO ls_filter-subobject.

*.. Check if DB already contains log for user today
  CALL FUNCTION 'BAL_DB_SEARCH'
    EXPORTING
*     I_CLIENT                 = SY-MANDT
      i_s_log_filter           = ls_filter
    IMPORTING
      e_t_log_header           = lt_log_header
    EXCEPTIONS
      log_not_found            = 1
      no_filter_criteria       = 2
      OTHERS                   = 3
            .
  IF sy-subrc EQ 0.
*.... Load found logs from DB
    CALL FUNCTION 'BAL_DB_LOAD'
      EXPORTING
        i_t_log_header     = lt_log_header
      EXCEPTIONS
        no_logs_specified  = 1
        log_not_found      = 2
        log_already_loaded = 3
        OTHERS             = 4.
    IF sy-subrc NE 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.

    ENDIF.
  ELSE.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
ENDFORM.                    " select_logs


*eject
*&---------------------------------------------------------------------*
*&      Form  display_logs
*&---------------------------------------------------------------------*
*       text: Display the found logs
*----------------------------------------------------------------------*
FORM display_logs.
  DATA:
    ls_display_profile TYPE bal_s_prof,
    ls_fcat            TYPE bal_s_fcat.

*.. Get standard display profile
  CALL FUNCTION 'BAL_DSP_PROFILE_SINGLE_LOG_GET'
    IMPORTING
      e_s_display_profile = ls_display_profile
    EXCEPTIONS
      OTHERS              = 1.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*.. Add time to message table
  ls_fcat-ref_table = 'TTZTSTMP'.
  ls_fcat-ref_field = 'TIME'.
  APPEND ls_fcat TO ls_display_profile-mess_fcat.

*.. Change Level 1 field catalog
  LOOP AT ls_display_profile-lev1_fcat INTO ls_fcat.
    IF ls_fcat-ref_field NE 'ALDATE' AND
       ls_fcat-ref_field NE 'ALUSER' AND
       ls_fcat-ref_field NE 'T_SUBOBJ'.
      ls_fcat-no_out = 'X'.
    ELSE.
      CLEAR: ls_fcat-outputlen,
             ls_fcat-is_treecol.
    ENDIF.
    MODIFY ls_display_profile-lev1_fcat FROM ls_fcat.
  ENDLOOP.

*.. Change general profile settings
  ls_display_profile-head_size = 80.
  ls_display_profile-tree_size = 36.
  CLEAR: ls_display_profile-tree_ontop,
         ls_display_profile-show_all.

*.. No level 2
  FREE ls_display_profile-lev2_fcat.

*.. For display variants add report id
  ls_display_profile-disvariant-report = sy-repid.
*.. When you use also other ALV lists in your report,
*.. please specify a handle to distinguish between the display
*.. variants of these different lists, e.g:
  ls_display_profile-disvariant-handle = 'LOG'.

*.. Show log file with modified output profile
*.. - we specify the display profile since we created our own
*.. - we do not specify any filter (like I_S_LOG_FILTER, ...,
*..   I_T_MSG_HANDLE) since we want to display all messages available
  CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
       EXPORTING
*           I_S_LOG_FILTER         =
*           I_T_LOG_CONTEXT_FILTER =
*           I_S_MSG_FILTER         =
*           I_T_MSG_CONTEXT_FILTER =
*           I_T_LOG_HANDLE         =
*           I_T_MSG_HANDLE         =
            i_s_display_profile    = ls_display_profile
       EXCEPTIONS
            OTHERS                 = 1.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " display_logs

*Selection text£º
*S_DATLO:D       Local date
*S_USERID:D       User
