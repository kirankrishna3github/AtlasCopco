
*&---------------------------------------------------------------------*
*&  Include           YAM_COMMON_ROUTINES                              *
*&---------------------------------------------------------------------*
*                                                                      *
*----------------------------------------------------------------------*
*
* PROGRAM ID           : YAM_COMMON_ROUTINES                           *
* PROGRAM TITLE        : AM: Common routines for ABAP programs         *
* AUTHOR               : Karin Verelst                                 *
* DATE                 : 03/08/2004                                    *
* DEVELOPMENT ID       : XXXX                                          *
*
* CHANGE REQUEST NUMBER:                                               *
*                                                                      *
*----------------------------------------------------------------------*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
* MOD. NO.|  DATE     | NAME     |CORRECTION NUMBER| CHANGE REFERENCE #
*
*----------------------------------------------------------------------*
* MOD-001 | 2004.09.01 | Mira S  |CD1K900525 |To get the Equipment     |
*                                             Number in Data Conversion
*                                             Program
* MOD-002 | 2004.12.09 | Luc Mertens |CD1K901127 |Change errormessage  |
* MOD-003 | 2005.08.30 | Luc Mertens |CD1K903082 |Add routine to get
*   the equipment via serial number and maintenance plant for CTP data |
* MOD-004 | 2006.11.07 | Luc Mertens |CD1K907311 |All-CR274
*   copy routine for manual calls                                      |
* MOD-005 | 2010.09.29 | Geert Rutten |CD1K959625 |All-CR1261
*   Check latin characters                                       |
************************************************************************
* Common routines for Atlas Copco Aftermarket project
***********************************************************************

PROGRAM yam_common_routines.

***********************************************************************
* Data
***********************************************************************
DATA: g_program   LIKE bdcdata-program,   "BDC DATA program name
      g_dynpro    LIKE bdcdata-dynpro,    "BDC DATA Screen number
      g_dynbegin  LIKE bdcdata-dynbegin,  "BDC DATA New Screen
      g_fnam      LIKE bdcdata-fnam,      "BDC DATA Field name
      g_fval      LIKE bdcdata-fval.      "BDC DATA Field value

TYPES: BEGIN OF ty_upload,
         v_text(500) TYPE c,
       END OF ty_upload.
DATA :   i_upload TYPE STANDARD TABLE OF ty_upload INITIAL SIZE 0
         WITH HEADER LINE..
DATA: BEGIN OF i_equi OCCURS 0.
        INCLUDE STRUCTURE equi.
DATA :  wstra LIKE mpos-wstra.
DATA: END OF i_equi.

DATA :   g_msgtext(120)    TYPE c,
         g_equnr   LIKE   equi-equnr,
         g_matnr   LIKE   equi-matnr,
         g_sernr   LIKE   equi-sernr.


CONSTANTS :  c_msgtyp(001)  TYPE c   VALUE 'I',             "Message typ
             c_msgid(020)   TYPE c   VALUE 'YAM_DC',"Message ID
             c_msno(003) TYPE c VALUE '000'."MESSAGE NO


*&--------------------------------------------------------------------*
*&      Form  fill_bdcdata
*&--------------------------------------------------------------------*
*  This routine can be called when programming batch input programs   *
*---------------------------------------------------------------------*
*      -->PROGRAM    text
*      -->DYNPRO     text
*      -->DYNBEGIN   text
*      -->FNAM       text
*      -->FVAL       text
*      -->STRUCT_BDCDtext
*---------------------------------------------------------------------*
FORM fill_bdcdata
                USING g_program g_dynpro g_dynbegin g_fnam g_fval
                CHANGING struct_bdcdata.

  struct_bdcdata(40)      = g_program.
  struct_bdcdata+40(4)    = g_dynpro.
  struct_bdcdata+44(1)    = g_dynbegin.
  struct_bdcdata+45(132)  = g_fnam.
  struct_bdcdata+177(132) = g_fval.

ENDFORM.                    "fill_bdcdata


*&---------------------------------------------------------------------*
*&      Form  GET_EQUIPMENT_NUMBER
*&---------------------------------------------------------------------*
*       To Get the Equipment Number based on the Material Number &
*       Serial Number
*----------------------------------------------------------------------*
*      -->P_WA_PARTNER_MATNR        Material Number
*      -->P_WA_PARTNER_SERNR        Serial Number
*      <--P_IT_XIHPA_OBJNR          Equipment Number
*----------------------------------------------------------------------*
FORM get_equipment_number  CHANGING    wa_idoc_status
                                                   STRUCTURE bdidocstat
                                       p_wa_partner_matnr
                                       p_wa_partner_sernr
                                       p_it_xihpa_objnr
                                       p_wa_equipment1    .

** Internal table to check if there are more than single record
  DATA: l_count TYPE i .

** Convert to Internal Serial Number
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_wa_partner_sernr
    IMPORTING
      output = p_wa_partner_sernr.

** Convert to Internal Material Number
  CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
    EXPORTING
      input  = p_wa_partner_matnr
    IMPORTING
      output = p_wa_partner_matnr.


  CLEAR: l_count.


** Count the number of records found for the combination of
** Material & Serial Number
  SELECT COUNT( DISTINCT objnr ) INTO  l_count
                       FROM    equi
                       WHERE   matnr EQ p_wa_partner_matnr
                       AND     sernr EQ p_wa_partner_sernr .

** No record is found in SAP
  IF l_count = 0.

** Process error
    wa_idoc_status-status = '51'.
    wa_idoc_status-msgty  = 'E' .
    wa_idoc_status-msgid  = 'YAM_INF'.
    wa_idoc_status-msgno  = '012'.
    wa_idoc_status-msgv1  =  p_wa_partner_matnr .
    wa_idoc_status-msgv2  =  p_wa_partner_sernr .

** Unique Record is found in SAP
  ELSEIF l_count = 1 .

** Select Object Number (Equipment Number info)
    SELECT SINGLE objnr equnr INTO  (p_it_xihpa_objnr,
                                     p_wa_equipment1)
                         FROM    equi
                         WHERE   matnr EQ p_wa_partner_matnr
                         AND     sernr EQ p_wa_partner_sernr .

** More than 1 Record is found in SAP
  ELSEIF l_count > 1 .

** Process error
    wa_idoc_status-status = '51'.
    wa_idoc_status-msgty  = 'E' .
    wa_idoc_status-msgid  = 'YAM_INF'.
    wa_idoc_status-msgno  = '013'.
    wa_idoc_status-msgv1  =  p_wa_partner_matnr .
    wa_idoc_status-msgv2  =  p_wa_partner_sernr .

  ENDIF .

ENDFORM.                    " GET_EQUIPMENT_NUMBER

*&---------------------------------------------------------------------*
*&      Form  GET_EQUIPMENT_NUMBER_LSMW
*&---------------------------------------------------------------------*
*       To Get the Equipment Number based on the Material Number &
*       Serial Number
*----------------------------------------------------------------------*
*      -->P_MATNR        Material Number
*      -->P_SERNR        Serial Number
*      <--P_EQUNR        Equipment Number
*----------------------------------------------------------------------*
FORM get_equipment_lsmw_convert USING value(p_matnr) TYPE matnr
                                      value(p_sernr) TYPE gernr
                                   CHANGING p_equnr.


  CONSTANTS :   c_msgtyp(001)  TYPE c   VALUE 'I',      "Message typ
                c_msgid(020)   TYPE c   VALUE 'YAM_DC',"Message ID
                c_msno(003) TYPE c VALUE '000'."MESSAGE NO

  DATA: BEGIN OF i_equi OCCURS 0.
          INCLUDE STRUCTURE equi.
  DATA: END OF i_equi.
  DATA: BEGIN OF i_equz OCCURS 0.
          INCLUDE STRUCTURE equz.
  DATA: END OF i_equz.

  DATA :   g_msgtext(120)    TYPE c,
           g_equnr   LIKE   equi-equnr,
           g_matnr   LIKE   equi-matnr,
           g_sernr   LIKE   equi-sernr.


** Internal table to check if there are more than single record
  DATA: l_count TYPE i .

** Convert to Internal Material Number
  CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
    EXPORTING
      input  = p_matnr
    IMPORTING
      output = p_matnr.

** Convert to Internal Serial Number
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_sernr
    IMPORTING
      output = p_sernr.

  CLEAR: l_count.

** Select Equipment Number (Equipment Number info)
  SELECT COUNT( DISTINCT equnr ) INTO  l_count
                       FROM    equi
                       WHERE   matnr EQ p_matnr
                       AND     sernr EQ p_sernr .

  IF l_count = 0.
* if there are no equipments, generate error message
    MESSAGE ID c_msgid
             TYPE c_msgtyp
*   begin of change MOD-002
*            NUMBER '015'
             NUMBER '004'
*   end of change   MOD-002
             WITH p_matnr
                  p_sernr
            INTO g_msgtext.
    WRITE: / g_msgtext.
    CLEAR    g_msgtext.

  ELSEIF  l_count = 1.

** Select Equipment Number (Equipment Number info)
        SELECT SINGLE equnr INTO  i_equi-equnr
                             FROM    equi
                             WHERE   matnr EQ p_matnr
                             AND     sernr EQ p_sernr .

    if sy-subrc eq 0.

              .

* Equipment is found and data needs to be transfered for processing

       CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input         = i_equi-equnr
     IMPORTING
       OUTPUT         =  i_equi-equnr.


    endif.
    p_equnr = i_equi-equnr.


  ELSEIF l_count > 1.
* Multiple Equipments are in the database for Material Number and Serial
* Number combination. Generate an error message.
    MESSAGE ID c_msgid
            TYPE c_msgtyp
            NUMBER '017'
            WITH p_matnr
                 p_sernr
            INTO g_msgtext.
    WRITE: / g_msgtext.
    CLEAR    g_msgtext.


  ENDIF.

ENDFORM.                    "GET_EQUIPMENT_LSMW_CONVERT


*&---------------------------------------------------------------------*
*&      Form  GET_EQUIPMENT_NUMBER_LSMW
*&---------------------------------------------------------------------*
*       To Get the Equipment Number based on the Material Number &
*       Serial Number for which Superior Equipment does not exists
*----------------------------------------------------------------------*
*      -->P_MATNR        Material Number
*      -->P_SERNR        Serial Number
*      <--P_EQUNR        Equipment Number
*----------------------------------------------------------------------*
FORM get_equipment_lsmw USING value(p_matnr) TYPE matnr
                              value(p_sernr) TYPE gernr
                     CHANGING p_equnr.


CONSTANTS :  c_msgtyp(001)  TYPE c   VALUE 'I',             "Message typ
              c_msgid(020)   TYPE c   VALUE 'YAM_DC',"Message ID
              c_msno(003) TYPE c VALUE '000'."MESSAGE NO

  DATA: BEGIN OF i_equi OCCURS 0.
          INCLUDE STRUCTURE equi.
  DATA: END OF i_equi.
  DATA: BEGIN OF i_equz OCCURS 0.
          INCLUDE STRUCTURE equz.
  DATA: END OF i_equz.

  DATA :   g_msgtext(120)    TYPE c,
           g_equnr   LIKE   equi-equnr,
           g_matnr   LIKE   equi-matnr,
           g_sernr   LIKE   equi-sernr.


** Internal table to check if there are more than single record
  DATA: l_count TYPE i .

** Convert to Internal Material Number
  CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
    EXPORTING
      input  = p_matnr
    IMPORTING
      output = p_matnr.

** Convert to Internal Serial Number
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_sernr
    IMPORTING
      output = p_sernr.

  CLEAR: l_count.

* select the equipments for which no superior equipment exits
  SELECT i~equnr
      INTO CORRESPONDING FIELDS OF TABLE i_equi
      FROM equi AS i INNER JOIN equz AS z
      ON i~equnr    EQ   z~equnr
      WHERE i~matnr EQ   p_matnr
      AND i~sernr   EQ   p_sernr
      AND z~hequi   EQ  space.


  IF sy-subrc NE 0.
* if there are no equipments, generate error message
    MESSAGE ID c_msgid
             TYPE c_msgtyp
*   begin of change MOD-002
*            NUMBER '015'
             NUMBER '004'
*   end of change   MOD-002
             WITH p_matnr
                  p_sernr
            INTO g_msgtext.
    WRITE: / g_msgtext.
    CLEAR    g_msgtext.

  ELSE.
    CASE sy-tabix.
      WHEN 1.
* Equipment is found and data needs to be transfered for processing

        p_equnr = i_equi-equnr.

** Select Equipment Number (Equipment Number info)
        SELECT SINGLE equnr INTO  p_equnr
                             FROM    equi
                             WHERE   matnr EQ p_matnr
                             AND     sernr EQ p_sernr .




      WHEN OTHERS.
* Multiple Equipments are in the database for Material Number and Serial
* Number combination. Generate an error message.
        MESSAGE ID c_msgid
                TYPE c_msgtyp
                NUMBER '017'
                WITH p_matnr
                     p_sernr
                INTO g_msgtext.
        WRITE: / g_msgtext.
        CLEAR    g_msgtext.

    ENDCASE.
  ENDIF.

ENDFORM.                    "GET_EQUIPMENT_LSMW

************************************************************************
* COMMON ROUTINE TO GET THE EQUIPMENT NUMBER MAINTENANCE PLAN AND
* MAINTENANCE STRATEGY BY PASSING MATERIAL NUMBER AND SERIAL NUMBER
************************************************************************
FORM get_equipment_no_lsmw USING value(p_matnr) TYPE matnr
                                 value(p_sernr) TYPE gernr
                      CHANGING p_equnr
                               p_warpl
                               p_strat.
************************************************************************
* Convert to Internal Material Number
************************************************************************
  CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
    EXPORTING
      input  = p_matnr
    IMPORTING
      output = p_matnr.
************************************************************************
* Convert to Internal Serial Number
************************************************************************
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_sernr
    IMPORTING
      output = p_sernr.
************************************************************************
* select the equipments no based on the material no and serial no
************************************************************************
  SELECT a~equnr b~warpl b~wstra INTO CORRESPONDING FIELDS OF TABLE
  i_equi FROM equi AS a INNER JOIN mpos AS b
                   ON a~equnr EQ b~equnr
                   WHERE matnr EQ   p_matnr
                   AND sernr   EQ   p_sernr.

  IF sy-subrc NE 0.
************************************************************************
* if there are no equipments, generate error message
************************************************************************
    MESSAGE ID c_msgid
             TYPE c_msgtyp
*   begin of change MOD-002
*            NUMBER '015'
             NUMBER '004'
*   end of change   MOD-002
             WITH p_matnr
                  p_sernr
            INTO g_msgtext.
    WRITE: / g_msgtext.
    CLEAR    g_msgtext.
  ELSE.
    CASE sy-tabix.
      WHEN 1.
************************************************************************
* Equipment is found and data needs to be transfered for processing
*         p_equnr = i_equi-equnr.
************************************************************************
        LOOP AT i_equi.
          MOVE i_equi-equnr TO p_equnr.
          MOVE i_equi-warpl TO p_warpl.
          MOVE i_equi-wstra TO p_strat.
        ENDLOOP.
      WHEN OTHERS.
************************************************************************
* Multiple Equipments are in the database for Material Number and Serial
* Number combination. Generate an error message.
************************************************************************
        MESSAGE ID c_msgid
                TYPE c_msgtyp
                NUMBER '017'
                WITH p_matnr
                     p_sernr
                INTO g_msgtext.
        WRITE: / g_msgtext.
        CLEAR    g_msgtext.

    ENDCASE.
  ENDIF.
ENDFORM.                    "GET_EQUIPMENT_NO_LSMWUSING
***********************************************************************
* COMMON ROUTINE FOR GETTING THE FILE                                  *
* FROM  PRESENTATION SERVER                                            *
************************************************************************
FORM get_from_pres  TABLES i_infile USING p_infile
                                          c_filetype
                                          c_x.
  CALL FUNCTION 'GUI_UPLOAD'
    EXPORTING
      filename            = p_infile
      filetype            = c_filetype
      has_field_separator = c_x
    TABLES
      data_tab            = i_infile
    EXCEPTIONS
      OTHERS              = 17.
  IF sy-subrc <> 0.
    MESSAGE e010(yam_dc).        "DATA UPLOAD FAILED
  ENDIF.
ENDFORM.                    " GET_FROM_PRES
************************************************************************
* COMMON ROUTINE FOR GETTING THE FILE                                  *
* FROM APPLICATION SERVER INTO INTERNAL TABLE                          *
************************************************************************
FORM get_from_appl TABLES i_infile STRUCTURE i_upload
                   USING p_infile.
  OPEN DATASET p_infile FOR INPUT IN TEXT MODE ENCODING DEFAULT.
  IF sy-subrc <> 0.
    MESSAGE e011(yam_dc).        "OPEN DATASET FAILED
  ENDIF.
  DO.
    READ DATASET p_infile INTO i_infile-v_text.
    IF sy-subrc <> 0.
      EXIT.
    ENDIF..
    APPEND i_infile.
  ENDDO.
  CLOSE DATASET p_infile.
ENDFORM.                    " GET_FROM_APPL
************************************************************************
*ROUTINE CAN BE CALLED FOR GETTING THE FILE NAME BY PASSING PROJECT
*SUBPROJECT AND OBJECT NAME
************************************************************************
FORM get_lsmw USING  /sapdmc/lsmemory-project
                       /sapdmc/lsmemory-subproj
                      /sapdmc/lsmemory-object
                      c_x
                 CHANGING p_infile.

  CALL FUNCTION '/SAPDMC/LSM_FILE_INFO_GET'
    EXPORTING
      project           = /sapdmc/lsmemory-project
      subproj           = /sapdmc/lsmemory-subproj
      object            = /sapdmc/lsmemory-object
      x_only_used_files = c_x
    IMPORTING
      file_conv         = p_infile.

ENDFORM.                    "GET_LSMW

*&---------------------------------------------------------------------*
*&      Form  GET_EQUIPMENT_LSMW_CTP                       MOD-003
*&---------------------------------------------------------------------*
*       To Get the Equipment Number based on the Serial Number &
*       Maintenance plant for CTP data
*----------------------------------------------------------------------*
*      -->P_SWERK        Maintenance plant
*      -->P_SERNR        Serial Number
*      <--P_EQUNR        Equipment Number
*----------------------------------------------------------------------*
FORM get_equipment_lsmw_ctp USING value(p_swerk) TYPE werks_d
                                  value(p_sernr) TYPE gernr
                            CHANGING p_equnr.


  CONSTANTS :   c_msgtyp(001)  TYPE c   VALUE 'I',      "Message typ
                c_msgid(020)   TYPE c   VALUE 'YAM_DC', "Message ID
                c_msno(003)    TYPE c   VALUE '000',    "MESSAGE NO
                c_99991231 like sy-datum value '99991231'.

  DATA: BEGIN OF i_equi OCCURS 0.
          INCLUDE STRUCTURE equi.
  DATA: END OF i_equi.

  DATA :   g_msgtext(120)    TYPE c,
           g_equnr   LIKE   equi-equnr,
           g_sernr   LIKE   equi-sernr.


** Internal table to check if there are more than single record
  DATA: l_count TYPE i .

** Convert to Internal Serial Number
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_sernr
    IMPORTING
      output = p_sernr.

  CLEAR: l_count.

** Select Equipment Number (Equipment Number info)
  SELECT COUNT( DISTINCT equnr ) INTO  l_count
                       FROM    v_equi
                       WHERE   swerk EQ p_swerk
                       AND     sernr EQ p_sernr
                       AND     datbi EQ c_99991231.

  IF l_count = 0.
* if there are no equipments, generate error message
    MESSAGE ID c_msgid
             TYPE c_msgtyp
             NUMBER '054'
             WITH p_swerk
                  p_sernr
            INTO g_msgtext.
    WRITE: / g_msgtext.
    CLEAR    g_msgtext.

  ELSEIF  l_count = 1.

** Select Equipment Number (Equipment Number info)
    SELECT SINGLE equnr INTO  i_equi-equnr
                        FROM  v_equi
                        WHERE swerk EQ p_swerk
                        AND   sernr EQ p_sernr
                        AND   datbi EQ c_99991231.

    if sy-subrc eq 0.

* Equipment is found and data needs to be transfered for processing
     CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input         = i_equi-equnr
      IMPORTING
        OUTPUT        = i_equi-equnr.

    endif.
    p_equnr = i_equi-equnr.

  ELSEIF l_count > 1.
* Multiple Equipments are in the database for Maintenance plant & Serial
* Number combination. Generate an error message.
    MESSAGE ID c_msgid
            TYPE c_msgtyp
            NUMBER '055'
            WITH p_swerk
                 p_sernr
            INTO g_msgtext.
    WRITE: / g_msgtext.
    CLEAR    g_msgtext.

  ENDIF.

ENDFORM.                    "GET_EQUIPMENT_LSMW_CTP

* begin of insert MOD-004
************************************************************************
* COMMON ROUTINE TO CHECK FOR DUPLICATE MAINTENANCE PLANS AND
* MAINTENANCE STRATEGY BY PASSING MATERIAL NUMBER AND SERIAL NUMBER
************************************************************************
FORM get_equipment_no_lsmw_2 USING value(p_matnr) TYPE matnr
                                   value(p_sernr) TYPE gernr
                      CHANGING p_equnr
                               p_warpl
                               p_strat.

  data: lv_abnum like mpla-abnum.

************************************************************************
* Convert to Internal Material Number
************************************************************************
  CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
    EXPORTING
      input  = p_matnr
    IMPORTING
      output = p_matnr.

************************************************************************
* Convert to Internal Serial Number
************************************************************************
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_sernr
    IMPORTING
      output = p_sernr.

************************************************************************
* select the equipments no based on the material no and serial no
************************************************************************
  SELECT a~equnr b~warpl b~wstra INTO CORRESPONDING FIELDS OF TABLE
  i_equi FROM equi AS a INNER JOIN mpos AS b
                   ON a~equnr EQ b~equnr
                   WHERE matnr EQ   p_matnr
                   AND sernr   EQ   p_sernr.

  IF sy-subrc NE 0.
************************************************************************
* if there are no equipments, generate error message
************************************************************************
    MESSAGE ID c_msgid
             TYPE c_msgtyp
             NUMBER '004'
             WITH p_matnr
                  p_sernr
            INTO g_msgtext.
    WRITE: / g_msgtext.
    CLEAR    g_msgtext.
  ELSE.
    CASE sy-tabix.
      WHEN 1.
************************************************************************
* Equipment is found and data needs to be transfered for processing
*         p_equnr = i_equi-equnr.
************************************************************************
        clear p_warpl.
        LOOP AT i_equi.
*         skip MP with initil value !!
          if i_equi-warpl is initial.
            continue.
          endif.
*         if more than 1 MP available --> no action
          if i_equi-warpl ne p_warpl and
             not p_warpl is initial.
            clear p_warpl.
            exit.
          endif.
          MOVE i_equi-equnr TO p_equnr.
          MOVE i_equi-warpl TO p_warpl.
          MOVE i_equi-wstra TO p_strat.
        ENDLOOP.
        if not p_warpl is initial.
*         check if MP was already started
          clear lv_abnum.
          select single abnum into lv_abnum
               from MPLA
               where warpl = p_warpl.
          if sy-subrc = 0 and
             not lv_abnum is initial.
            clear p_warpl.
          endif.
        endif.
      WHEN OTHERS.
************************************************************************
* Multiple Equipments are in the database for Material Number and Serial
* Number combination. Generate an error message.
************************************************************************
        MESSAGE ID c_msgid
                TYPE c_msgtyp
                NUMBER '017'
                WITH p_matnr
                     p_sernr
                INTO g_msgtext.
        WRITE: / g_msgtext.
        CLEAR    g_msgtext.

    ENDCASE.
  ENDIF.

ENDFORM.                    "GET_EQUIPMENT_NO_LSMW_2
* end of insert MOD-004

* begin of insert MOD-005
************************************************************************
*ROUTINE CAN BE CALLED FOR CHECKING LATIN VALUES IN STRING
************************************************************************
FORM latin_check USING p_field_in TYPE text256
                      CHANGING p_check TYPE i.

FIELD-SYMBOLS: <in>,
               <hex>.

DATA: lv_len type i.
CONSTANTS: c_hex_min(2)  TYPE x  VALUE '0020',
           c_hex_max(2)  TYPE x  VALUE '00FF'.


* First character
  ASSIGN p_field_in(1)  TO <in>.

   lv_len = STRLEN( p_field_in ).
   DO lv_len TIMES.
*   Check hexadecimal value of character
    ASSIGN <in> TO <hex> TYPE 'X'.
    IF NOT <hex> BETWEEN c_hex_min AND c_hex_max.
*     No translation needed, move character
     p_check = p_check + 1.
    ENDIF.
*   Next character
    ASSIGN <in>+1(1)  TO <in>.
   ENDDO.

ENDFORM.
* endof insert MOD-005
