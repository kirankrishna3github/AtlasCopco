*&---------------------------------------------------------------------*
*&  Include           YAM_DEACTIVATE_MPLAN_F03                         *
*&---------------------------------------------------------------------*
*eject
*&---------------------------------------------------------------------*
*&      Form  display_maintenance_plan
*&---------------------------------------------------------------------*
*       Display the maintenance plan using transaction IP03
*       for the selected maintenance plan
*----------------------------------------------------------------------*
FORM display_maintenance_plan.

  LOOP AT gt_mpla WHERE selkz EQ gc_charx.
    SET PARAMETER ID 'MPL' FIELD gt_mpla-warpl.
    CALL TRANSACTION 'IP03' AND SKIP FIRST SCREEN.
    CLEAR gt_mpla-selkz.
    MODIFY gt_mpla TRANSPORTING selkz.
    EXIT.
  ENDLOOP.

ENDFORM.                    " display_maintenance_plan

*eject
*&---------------------------------------------------------------------*
*&      Form  display_order
*&---------------------------------------------------------------------*
*       Display the order using transaction IW33
*       for the selected order
*----------------------------------------------------------------------*
FORM display_order.

  LOOP AT gt_orde WHERE selkz EQ gc_charx.
    SET PARAMETER ID 'ANR' FIELD gt_orde-aufnr.
    CALL TRANSACTION 'IW33' AND SKIP FIRST SCREEN.
    CLEAR gt_orde-selkz.
    MODIFY gt_orde TRANSPORTING selkz.
    EXIT.
  ENDLOOP.

ENDFORM.                    " display_order

*eject
*&---------------------------------------------------------------------*
*&      Form  display_notification
*&---------------------------------------------------------------------*
*       Display the order using transaction IW53
*       for the selected order
*----------------------------------------------------------------------*
FORM display_notification.

  LOOP AT gt_noti WHERE selkz EQ gc_charx.
    SET PARAMETER ID 'IQM' FIELD gt_noti-qmnum.
    CALL TRANSACTION 'IW53' AND SKIP FIRST SCREEN.
    CLEAR gt_noti-selkz.
    MODIFY gt_noti TRANSPORTING selkz.
    EXIT.
  ENDLOOP.

ENDFORM.                    " display_notification
*eject
*&---------------------------------------------------------------------*
*&      Form complete notifications
*&---------------------------------------------------------------------*
*       complete selected notifications
*----------------------------------------------------------------------*
FORM complete_notification.

* Prepare the input parameters to be called with BAPI
  CLEAR wa_notsti.
  MOVE 'E' TO wa_notsti-langu.
  MOVE 'EN'   TO wa_notsti-languiso.
  MOVE sy-datum TO wa_notsti-refdate.
  MOVE sy-uzeit TO wa_notsti-reftime.

  REFRESH i_bapiret2.

  CALL FUNCTION 'BAPI_ALM_NOTIF_CLOSE'
    EXPORTING
      number       = gt_noti-qmnum
      syststat     = wa_notsti
      testrun      = ' '
    IMPORTING
      systemstatus = wa_systatus
      userstatus   = wa_usrstatus
    TABLES
      return       = i_bapiret2.

  IF i_bapiret2[] IS INITIAL.
    COMMIT WORK and wait.
  ENDIF.

  CLEAR gt_noti-selkz.
  MODIFY gt_noti TRANSPORTING selkz.

ENDFORM.                    "complete_notification
*eject
*&---------------------------------------------------------------------*
*&      Form deactivate_maintplan
*&---------------------------------------------------------------------*
*       deactivate selected maintenance plans
*----------------------------------------------------------------------*
FORM deactivate_maintplan.

concatenate 'WO' gt_mpla-warpl into gv_objnr.
refresh stat_tab.
move c_I0320 to stat_tab-stat.
append stat_tab.

CALL FUNCTION 'STATUS_CHANGE_INTERN'
         EXPORTING
              OBJNR       = gv_OBJNR     " maintenance plan
         TABLES
              STATUS      = stat_tab     " deactivate
         EXCEPTIONS
              OBJECT_NOT_FOUND
              STATUS_INCONSISTENT
              STATUS_NOT_ALLOWED.

commit work and wait.

IF sy-subrc EQ 0.
*.......... maintenance plan has been deactivated
            MESSAGE s352 WITH gt_mpla-warpl INTO gv_msg.
            PERFORM add_message_to_log.
else.
*.......... maintenance plan has not been deactivated
MESSAGE s353 WITH gt_mpla-warpl INTO gv_msg.
            PERFORM add_message_to_log.
endif.

ENDFORM.                    "deactivate_maintplan
*eject
*&---------------------------------------------------------------------*
*&      Form  display_log
*&---------------------------------------------------------------------*
*       Display the already generated application log
*----------------------------------------------------------------------*
FORM display_log .

*.. Local variables
  DATA: ls_prof TYPE bal_s_prof.

*.. Reset log indicator once displayed
  CLEAR gv_log.

*.. Get a prepared profile
  CALL FUNCTION 'BAL_DSP_PROFILE_POPUP_GET'
    IMPORTING
      e_s_display_profile = ls_prof
    EXCEPTIONS
      OTHERS              = 1.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*.. Use grid for display if wanted
  ls_prof-use_grid = gc_charx.
  ls_prof-start_row = 1.
  ls_prof-end_row = 25.
  CLEAR ls_prof-pop_adjst.

*.. When you use also other ALV lists in your report,
*.. please specify a handle to distinguish between the display
*.. variants of these different lists, e.g:
  ls_prof-disvariant-handle = 'LOG'.

*.. Call display function module
  CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
    EXPORTING
      i_s_display_profile = ls_prof
    EXCEPTIONS
      OTHERS              = 1.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " display_log
