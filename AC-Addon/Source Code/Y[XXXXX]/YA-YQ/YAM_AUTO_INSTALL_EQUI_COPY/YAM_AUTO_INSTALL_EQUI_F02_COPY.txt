*----------------------------------------------------------------------*
***INCLUDE YAM_AUTO_INSTALL_EQUI_F02.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  user_command_equi
*&---------------------------------------------------------------------*
*       text: User Command callback routine for ALV
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_equi USING r_ucomm LIKE sy-ucomm
                        rs_selfield TYPE slis_selfield.

  DATA: lv_answer TYPE char1,
        lv_value_field TYPE zvalue_field.

  CASE r_ucomm.
    WHEN 'EQUI'.
      READ TABLE gt_equi INDEX rs_selfield-tabindex.
      IF sy-subrc = 0.
        gt_equi-selkz = gc_charx.
        MODIFY gt_equi INDEX rs_selfield-tabindex.
      ENDIF.
      PERFORM display_equipment.
    WHEN 'QUER'.
      READ TABLE gt_equi INDEX rs_selfield-tabindex.
      IF sy-subrc = 0.
        gt_equi-selkz = gc_charx.
        MODIFY gt_equi INDEX rs_selfield-tabindex.
      ENDIF.
      LOOP AT gt_equi WHERE selkz EQ gc_charx AND
                            exclu NE gc_charx.
        PERFORM launch_queries.
        CLEAR gt_equi-selkz.
        MODIFY gt_equi TRANSPORTING selkz.

        LOOP AT gt_floc WHERE comp_ok EQ gc_charx.
          CLEAR: gt_floc-zzcol, gt_floc-comp_ok.
          MODIFY gt_floc TRANSPORTING zzcol comp_ok.
        ENDLOOP.
        EXIT.
      ENDLOOP.
      rs_selfield-refresh = gc_charx.
    WHEN 'LOG'.
      PERFORM display_log.
    WHEN 'AUTO'.
      lv_value_field = p_tplnr(2).
      CALL FUNCTION 'YSE_CHECK_DEV_MATRIX'
        EXPORTING
          object      = 'YAM_AUTO_INSTALL_EQUI_COPY'
          checkfield  = ''
          value_field = lv_value_field
          counter     = 0
        EXCEPTIONS
          active      = 1
          passive     = 2
          not_found   = 3
          OTHERS      = 4.

* If dev matrix check was succesfull so far, do next check
      IF sy-subrc EQ 1.
        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
            text_question         = text-t01
            display_cancel_button = ''
            start_column          = 35
            start_row             = 10
          IMPORTING
            answer                = lv_answer.
        IF lv_answer EQ '1' .
          READ TABLE gt_equi INDEX rs_selfield-tabindex.
          IF sy-subrc = 0.
            gt_equi-selkz = gc_charx.
            MODIFY gt_equi INDEX rs_selfield-tabindex.
            MOVE rs_selfield-tabindex TO equi_idx.
          ENDIF.
          LOOP AT gt_equi.
            MOVE sy-tabix TO equi_idx.
            PERFORM launch_auto_creation.
          ENDLOOP.
        ENDIF.
      ELSE.
          MESSAGE I016 with lv_value_field.
      ENDIF.
    WHEN 'POSTAL'.
      PERFORM maintain_postal_codes.
  ENDCASE.

ENDFORM.                    " user_command_equi

*eject
*&---------------------------------------------------------------------*
*&      Form  PF_STATUS_SET_EQUI
*&---------------------------------------------------------------------*
*       text: PF-status callback routine for ALV
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM pf_status_set_equi USING rt_extab TYPE slis_t_extab.

  SET PF-STATUS 'YAM_EQUI'.

ENDFORM.                    " PF_STATUS_SET_EQUI

*eject
*&---------------------------------------------------------------------*
*&      Form  top_of_page_equi
*&---------------------------------------------------------------------*
*       Top of page callback routine for ALV
*----------------------------------------------------------------------*
FORM top_of_page_equi.

*.. Local variables
  DATA: lt_comment TYPE slis_t_listheader,
        ls_comment TYPE slis_listheader.

*.. Header
  ls_comment-typ  = 'H'.
  ls_comment-info = text-h00.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

*.. Selection
  ls_comment-typ  = 'S'.
  ls_comment-key  = text-h01.
  ls_comment-info = p_tplnr.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-h02.
  CONCATENATE s_datab-low s_datab-high INTO ls_comment-info SEPARATED BY
 space.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      it_list_commentary       = lt_comment
*     I_LOGO                   =
*     I_END_OF_LIST_GRID       =
            .

ENDFORM.                    " top_of_page_equi

*eject
*&---------------------------------------------------------------------*
*&      Form  top_of_page_inst
*&---------------------------------------------------------------------*
*       Top of page callback routine for ALV
*----------------------------------------------------------------------*
FORM top_of_page_inst.

*.. Local variables
  DATA: lt_comment TYPE slis_t_listheader,
        ls_comment TYPE slis_listheader,
        lv_equnr   TYPE equnr.

  WRITE gt_equi-equnr TO lv_equnr NO-ZERO.

*.. Selection
  ls_comment-typ  = 'S'.
  ls_comment-info = lv_equnr.
  ls_comment-key = text-h11.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-h14.
  ls_comment-info = gt_equi-name1.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-h12.
  ls_comment-info = gt_equi-street.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  ls_comment-typ  = 'S'.
  ls_comment-key  = text-h13.
  CONCATENATE gt_equi-post_code1 gt_equi-city1 INTO ls_comment-info
          SEPARATED BY space.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

* Empty line
  ls_comment-typ  = 'S'.
  ls_comment-info = space.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      it_list_commentary       = lt_comment
*     I_LOGO                   =
*     I_END_OF_LIST_GRID       =
            .

ENDFORM.                    " top_of_page_inst

*&---------------------------------------------------------------------*
*&      Form  user_command_inst
*&---------------------------------------------------------------------*
*       text: User Command callback routine for ALV
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_inst USING r_ucomm LIKE sy-ucomm
                        rs_selfield TYPE slis_selfield.

  CASE r_ucomm.
    WHEN 'INST'.
      READ TABLE gt_floc INDEX rs_selfield-tabindex.
      IF sy-subrc = 0.
        gt_floc-selkz = gc_charx.
        MODIFY gt_floc INDEX rs_selfield-tabindex.
      ENDIF.

      CLEAR gv_nok.
      PERFORM install_equipment.
      IF gv_nok <> gc_charx.
        r_ucomm = '&F03'.
      ENDIF.
    WHEN 'FLOC'.
      READ TABLE gt_floc INDEX rs_selfield-tabindex.
      IF sy-subrc = 0.
        gt_floc-selkz = gc_charx.
        MODIFY gt_floc INDEX rs_selfield-tabindex.
      ENDIF.

      CLEAR gv_ok.
      LOOP AT gt_floc WHERE selkz = gc_charx.
        PERFORM create_floc.
        CLEAR gt_floc-selkz.
        MODIFY gt_floc TRANSPORTING selkz.
        EXIT.
      ENDLOOP.
    WHEN '&NTE'.
      IF gv_ok = gc_charx.
*...... Add new created funct.location to internal table (~refresh)
        PERFORM update_inttable_floc USING gv_ifl.
        CLEAR gv_ok.
      ENDIF.
*.... Look for updates
      PERFORM refresh_floc.
      SORT gt_floc BY tplnr(14) comp_ok DESCENDING.
      rs_selfield-refresh = gc_charx.
    WHEN 'DISP'.
      READ TABLE gt_floc INDEX rs_selfield-tabindex.
      IF sy-subrc = 0.
        gt_floc-selkz = gc_charx.
        MODIFY gt_floc INDEX rs_selfield-tabindex.
      ENDIF.
      PERFORM display_funcloc.


  ENDCASE.

ENDFORM.                    " user_command_inst

**eject
**&---------------------------------------------------------------------
**
**&      Form  HOTSPOT_CLICK_INST
**&---------------------------------------------------------------------
**
**       text: Hotspot routine for ALV
**----------------------------------------------------------------------
**
*FORM HOTSPOT_CLICK_INST.
*
*  data: lv_adrnr      like adrc-ADDRNUMBER,
*        lv_parnr      like ihpa-parnr,
*        lv_name1      like adrc-name1,
*        lv_name2      like adrc-name2,
*        lv_street     like adrc-street,
*        lv_post_code1 like adrc-post_code1,
*        lv_city1      like adrc-city1.
*
*  constants: lc_we type parvw value 'WE'.
*
*  SELECT single parnr
*      INTO lv_parnr
*      FROM ihpa
*      WHERE objnr = gt_floc-objnr
*        AND parvw = lc_we
*        AND kzloesch = ' '.
*
*  if sy-subrc = 0.
*    select single adrnr
*        into lv_adrnr
*        from kna1
*        where kunnr = lv_parnr.
*
*    if sy-subrc = 0.
*      select single name1 name2 street post_code1 city1
*         into (lv_name1, lv_name2, lv_street, lv_post_code1,
*               lv_city1)
*         from adrc
*         where addrnumber = lv_adrnr.
*    endif.
*  endif.
*
*  write: gt_floc-tplnr quickinfo lv_name1.
*
*ENDFORM.                    " HOTSPOT_CLICK_INST

*eject
*&---------------------------------------------------------------------*
*&      Form  PF_STATUS_SET_inst
*&---------------------------------------------------------------------*
*       text: PF-status callback routine for ALV
*----------------------------------------------------------------------*
FORM pf_status_set_inst USING rt_extab TYPE slis_t_extab.

  SET PF-STATUS 'YAM_INST'.

ENDFORM.                    " PF_STATUS_SET_inst

*eject
*&---------------------------------------------------------------------*
*&      Form  end_of_list
*&---------------------------------------------------------------------*
*       text: end of list callback routine for ALV
*----------------------------------------------------------------------*
FORM end_of_list .

*.. Output message to indicate log entries exist
  IF gv_log EQ gc_charx.
*.... Install-equipment log contains entries. Please check
    MESSAGE s124.
  ENDIF.

ENDFORM.                    " end_of_list
