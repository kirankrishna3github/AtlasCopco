*----------------------------------------------------------------------*
***INCLUDE YAM_AUTO_INSTALL_EQUI_F03.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  launch_queries
*&---------------------------------------------------------------------*
*       Some queries should be launched towards functional locat.
*----------------------------------------------------------------------*
FORM launch_queries.

*.. Local variables
  DATA: lv_tplma      LIKE iflo-tplma,
        lv_lgwid      TYPE lgwid,
        lv_swerk      TYPE swerk,
        lv_objnr      TYPE j_objnr,
        lv_lev2(1)    TYPE c.

  DATA: BEGIN OF lt_object OCCURS 0,
          objnr LIKE aufk-objnr,
        END OF lt_object,
        wa_obj LIKE lt_object.

  DATA: BEGIN OF lt_equi_obj OCCURS 0,
          objnr LIKE ihpa-objnr,
        END OF lt_equi_obj.

  DATA: BEGIN OF lt_tplnr OCCURS 0,
          tplnr LIKE v_equi-tplnr,
        END OF lt_tplnr.

*.. Search for functional locations based on equal 'sold-to party'
*.. or equal 'ship-to party'
*.. If no sold-to partner exists, no continuation is possible.
  IF gt_equi-kunnr IS INITIAL.
*.... Please do not continue until the sold-to partner is available
    MESSAGE e128 WITH gt_equi-equnr INTO gv_msg.
    PERFORM add_message_to_log.
    PERFORM update_list USING gt_equi-equnr '4'.
    EXIT.
  ENDIF.

  REFRESH: lt_object,
           lt_equi_obj,
           lt_tplnr.

  SELECT objnr
      INTO CORRESPONDING FIELDS OF TABLE lt_object
      FROM ihpa
      WHERE parnr = gt_equi-kunnr
        AND parvw = gc_ag
        AND obtyp = 'IFL'
        AND kzloesch = ' '.

* begin of insert MOD-002
  IF NOT gt_equi-kunwe IS INITIAL.
    SELECT objnr
        APPENDING CORRESPONDING FIELDS OF TABLE lt_object
        FROM ihpa
        WHERE parnr = gt_equi-kunwe
          AND parvw = gc_we
          AND obtyp = 'IFL'
          AND kzloesch = ' '.

    IF sy-subrc = 0.
      SORT lt_object BY objnr.
      DELETE ADJACENT DUPLICATES FROM lt_object COMPARING objnr.
    ENDIF.
  ENDIF.
* end of insert MOD-002

* Check in custom table if extended search for Floc is needed
  SELECT SINGLE swerk INTO lv_swerk
     FROM yam_equi_inst
* begin of change MOD-001
*    where swerk = gt_equi-swerk.
     WHERE swerk = gt_equi-iwerk.
* end of change MOD-001

  IF sy-subrc = 0.
    SELECT objnr
       INTO CORRESPONDING FIELDS OF TABLE lt_equi_obj
       FROM ihpa
       WHERE parnr = gt_equi-kunnr
         AND parvw = gc_ag
         AND obtyp = 'IEQ'
         AND kzloesch = ' '.

    IF sy-subrc = 0.
      LOOP AT lt_equi_obj.
        SELECT tplnr
           APPENDING CORRESPONDING FIELDS OF TABLE lt_tplnr
           FROM v_equi
           WHERE objnr = lt_equi_obj-objnr
             AND eqart = lv_eqart
             AND datbi = lv_99991231.
      ENDLOOP.
      IF NOT lt_tplnr[] IS INITIAL.
        LOOP AT lt_tplnr.
          SELECT SINGLE objnr tplma
             INTO (lv_objnr, lv_tplma)
             FROM iflot
             WHERE tplnr = lt_tplnr-tplnr.

          IF sy-subrc = 0.
            CHECK NOT lv_tplma IS INITIAL.
            MOVE lv_objnr TO lt_object-objnr.
            APPEND lt_object.
          ENDIF.
        ENDLOOP.
*...... Delete doubles
        IF sy-subrc = 0.
          SORT lt_object BY objnr.
          DELETE ADJACENT DUPLICATES FROM lt_object COMPARING objnr.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

* begin of insert MOD-003
  DATA: lv_tplnr LIKE iflo-tplnr.

  LOOP AT lt_object.
    SELECT SINGLE tplnr INTO lv_tplnr
      FROM iflo
      WHERE objnr = lt_object-objnr.

    IF sy-subrc IS INITIAL.
      IF lv_tplnr(2) NE p_tplnr.
        DELETE lt_object.
        CONTINUE.
      ENDIF.
    ENDIF.
  ENDLOOP.
* end of insert MOD-003

*  if sy-subrc <> 0.
  IF lt_object[] IS INITIAL.
*.... No automatic installation possible for the equipmant
*.... Create funct.location - 2nd level
    CLEAR gv_floc.
    CONCATENATE p_tplnr(2) '_9999999999' INTO gv_floc.
    gv_kunnr = gt_equi-kunnr.
*    gv_name1 = gt_equi-kunnr_name1.

*** MOD-005 * begin insert ***
*   Seed => when it_yam_ctam_ccodes is initial.
*   After Market => when it_yam_ctam_ccodes is NOT initial.
    CLEAR it_yam_ctam_ccodes.
    READ TABLE it_yam_ctam_ccodes WITH KEY bukrs =  gt_equi-bukrs
                                  BINARY SEARCH.
    IF it_yam_ctam_ccodes IS INITIAL.
      gv_name1 = gt_equi-kunnr_name1.
    ELSE.
*** MOD-005 * end insert ***
      IF gt_equi-kunnr_sortl(3) CO '1234567890'.
        gv_sortl = gt_equi-kunnr_sortl.
      ELSE.
        gv_sortl = gt_equi-kunnr_sortl+3(6).
      ENDIF.
      CONCATENATE gv_sortl gt_equi-kunnr_name1 INTO gv_name1
            SEPARATED BY space.
    ENDIF.                                                  "MOD-005

    gv_name2 = gt_equi-kunnr_name1.
* begin of change MOD-001
*   gv_swerk = gt_equi-swerk.
    gv_iwerk = gt_equi-iwerk.
* end of change MOD-001
    gv_land1 = gt_equi-land1.
    gv_spras = gt_equi-spras.
    gv_vkorg = gt_equi-vkorg.
    gv_vtweg = gt_equi-vtweg.
    gv_spart = gt_equi-spart.

*.... Show screen so that user can put in the data
*.... in order to be able to create the funt.loc in background
* begin of change MOD-001
*   export gv_floc gv_kunnr gv_name1 gv_swerk gv_name2
    EXPORT gv_floc gv_kunnr gv_name1 gv_iwerk gv_name2
* end of change MOD-001
           gv_land1 gv_spras gv_vkorg gv_vtweg gv_spart
                    TO MEMORY ID 'YAM_CR_FLOC_2'.

    SET PARAMETER ID 'IFL' FIELD gc_blank.
    CALL TRANSACTION 'YAM_CREATE_FLOC_LEV2'.
    IMPORT gv_ucomm gt_errmsg FROM MEMORY ID 'YAM_CR_FLOC_2'.
    CHECK gv_ucomm EQ 'EXEC'.

    GET PARAMETER ID 'IFL' FIELD gv_ifl.

    IF NOT gv_ifl IS INITIAL.
*.... Funct.location &1 has been successfully created for equipment &2
      MESSAGE s146 WITH gv_ifl gt_equi-equnr INTO gv_msg.
      PERFORM add_message_to_log.
      PERFORM update_list USING gt_equi-equnr '1'.
*      exit.
*     before going to the FL popup screen, append newly created FL to
*     internal table
      SELECT SINGLE objnr INTO wa_obj-objnr
         FROM iflot
         WHERE tplnr = gv_ifl.
      INSERT wa_obj INTO lt_object INDEX 1.
    ELSE.

*.... Call transaction IL01 failed for equipment &1
      MESSAGE e133 WITH gt_equi-equnr INTO gv_msg.
      PERFORM add_message_to_log.
      LOOP AT gt_errmsg INTO wa_errmsg.
        MESSAGE e147 WITH wa_errmsg-msgv1 wa_errmsg-msgv2
                    wa_errmsg-msgv3 wa_errmsg-msgv4 INTO gv_msg.
        PERFORM add_message_to_log.
      ENDLOOP.
      PERFORM update_list USING gt_equi-equnr '4'.
      EXIT.
    ENDIF.
  ENDIF.

  CHECK NOT lt_object[] IS INITIAL.

*.. Create internal table with functional locations info
  REFRESH gt_floc.
  LOOP AT lt_object.

    SELECT SINGLE tplnr adrnr tplma
                  vkorg vtweg spart vkbur vkgrp ingrp objnr lgwid
      INTO (gt_floc-tplnr, gt_floc-adrnr, lv_tplma,
            gt_floc-vkorg, gt_floc-vtweg, gt_floc-spart,
            gt_floc-vkbur, gt_floc-vkgrp, gt_floc-ingrp, gt_floc-objnr,
            lv_lgwid)
      FROM iflo
      WHERE objnr = lt_object-objnr.

    IF sy-subrc = 0.
*.... Delete inactive functional locations
      CALL FUNCTION 'STATUS_CHECK'
        EXPORTING
          objnr             = lt_object-objnr
          status            = 'I0320'
        EXCEPTIONS
          object_not_found  = 1
          status_not_active = 2
          OTHERS            = 3.

      IF sy-subrc = 0.
        DELETE lt_object.
        CONTINUE.
      ENDIF.

      SELECT SINGLE pltxt
        INTO gt_floc-pltxt
        FROM iflotx
        WHERE tplnr = gt_floc-tplnr
          AND spras = 'E'.

*.... Add addressfields via field adrnr
      SELECT SINGLE name1 street post_code1 city1
          INTO (gt_floc-name1, gt_floc-street, gt_floc-post_code1,
                gt_floc-city1)
          FROM adrc
          WHERE addrnumber = gt_floc-adrnr.

      IF NOT lv_tplma IS INITIAL.
        SELECT SINGLE pltxt
          INTO gt_floc-pltxt_sup
          FROM iflotx
          WHERE tplnr = lv_tplma
            AND spras = 'E'.
      ENDIF.

      PERFORM add_addr_shipto.

*.... Add main workcenter from table CRHD
      SELECT SINGLE arbpl
          INTO gt_floc-gewrk
          FROM crhd
          WHERE objty = 'A'
            AND objid = lv_lgwid.

      APPEND gt_floc.
      CLEAR gt_floc.
    ENDIF.

  ENDLOOP.

*.. In the existing 3rd level func.loc's compare the address with the
*.. one from the equipment. Comparison should be done via postcode.
  LOOP AT gt_floc.

*.... check level functional locations
    IF gt_floc-tplnr+13(5) IS INITIAL.
*...... level 2
    ELSE.
*...... level 3, so do comparison
      IF gt_floc-post_code1 = gt_equi-post_code1 AND
         NOT gt_floc-post_code1 IS INITIAL.
        gt_floc-comp_ok = gc_charx.
        gt_floc-zzcol = gc_blue.
        MODIFY gt_floc TRANSPORTING comp_ok zzcol.
      ENDIF.
    ENDIF.

  ENDLOOP.

*.. Sort on funct.location and put equal postcode at the beginning
  SORT gt_floc BY tplnr(14) comp_ok DESCENDING.

*.. Output the ALV list with selected functional locations
  PERFORM output_list_inst.

ENDFORM.                    " launch_queries

*eject
*&---------------------------------------------------------------------*
*&      Form  create_floc
*&---------------------------------------------------------------------*
*       Create functional location level 3
*----------------------------------------------------------------------*
FORM create_floc.

*.. Create funct.location - 3rd level
  CLEAR gv_floc.
  CONCATENATE gt_floc-tplnr(13) '_9999' INTO gv_floc.
  gv_kunnr      = gt_equi-kunnr.

*.. Get ship-to linked to sold-to
* gv_kunwe      = gt_equi-kunnr.
  SELECT SINGLE kunn2
     INTO gv_kunwe
     FROM knvp
     WHERE kunnr = gt_equi-kunnr
       AND vkorg = gt_floc-vkorg
       AND vtweg = gt_floc-vtweg
       AND spart = gt_floc-spart
       AND parvw = gc_we.

* begin of change MOD-001
* gv_swerk      = gt_equi-swerk.
  gv_iwerk      = gt_equi-iwerk.
* end of change MOD-001
  gv_land1      = gt_equi-land1.
  gv_spras      = gt_equi-spras.
  gv_name1      = gt_equi-name1.
  gv_street     = gt_equi-street.
  gv_post_code1 = gt_equi-post_code1.
  gv_city1      = gt_equi-city1.
  CONCATENATE gv_post_code1 gv_city1 INTO gv_pltxt
                  SEPARATED BY space.
  gv_ingrp      = gt_floc-ingrp.
  gv_vkorg      = gt_floc-vkorg.
  gv_vtweg      = gt_floc-vtweg.
  gv_spart      = gt_floc-spart.
  gv_vkbur      = gt_floc-vkbur.
  gv_vkgrp      = gt_floc-vkgrp.
  gv_name2      = gt_equi-name2.
  gv_telf1      = gt_equi-telf1.
  gv_mobnr      = gt_equi-mobnr.
  gv_faxnr      = gt_equi-faxnr.
  gv_email      = gt_equi-email.
  gv_gewrk      = gt_floc-gewrk.

*.. Show screen so that user can put in the data
*.. in order to be able to create the funt.loc in background
* begin of change MOD-001
* export gv_floc gv_kunnr gv_swerk gv_land1 gv_spras
  EXPORT gv_floc gv_kunnr gv_iwerk gv_land1 gv_spras
* end of change MOD-001
     gv_post_code1 gv_city1 gv_name1 gv_street gv_pltxt gv_kunwe
     gv_ingrp gv_vkorg gv_vtweg gv_spart gv_vkbur gv_vkgrp
     gv_name2 gv_telf1 gv_mobnr gv_faxnr gv_email gv_gewrk
                  TO MEMORY ID 'YAM_CR_FLOC_3'.

  SET PARAMETER ID 'IFL' FIELD gc_blank.
  CALL TRANSACTION 'YAM_CREATE_FLOC_LEV3'.

  IMPORT gv_ucomm gt_errmsg FROM MEMORY ID 'YAM_CR_FLOC_3'.
  CHECK gv_ucomm = 'EXEC'.
  GET PARAMETER ID 'IFL' FIELD gv_ifl.

  IF NOT gv_ifl IS INITIAL.
*.. Funct.location &1 has been successfully created for equipment &2
    MESSAGE s146 WITH gv_ifl gt_equi-equnr INTO gv_msg.
    PERFORM add_message_to_log.
    gv_ok = gc_charx.
  ELSE.

*.. Call transaction IL01 failed for equipment &1
    MESSAGE e133 WITH gt_equi-equnr INTO gv_msg.
    PERFORM add_message_to_log.
    LOOP AT gt_errmsg INTO wa_errmsg.
      MESSAGE e147 WITH wa_errmsg-msgv1 wa_errmsg-msgv2
                  wa_errmsg-msgv1 wa_errmsg-msgv2 INTO gv_msg.
      PERFORM add_message_to_log.
    ENDLOOP.
  ENDIF.

ENDFORM.                    " create_floc

*eject
*&---------------------------------------------------------------------*
*&      Form  install_equipment
*&---------------------------------------------------------------------*
*       Make installation of the equipment which was selected
*----------------------------------------------------------------------*
FORM install_equipment.

*.. Local variables
  DATA: lc_return LIKE bapiret2,
        lv_error(1) TYPE c.

  DATA: BEGIN OF i_bapi_itob_eq_install_ext OCCURS 100.
          INCLUDE STRUCTURE bapi_itob_eq_install_ext.
  DATA: END OF i_bapi_itob_eq_install_ext.

  LOOP AT gt_floc WHERE selkz EQ gc_charx.

    IF gt_floc-tplnr+13(5) IS INITIAL.
      CLEAR gt_floc-selkz.
      MODIFY gt_floc TRANSPORTING selkz.
      gv_nok = gc_charx.
      EXIT.
    ENDIF.

*.... Lock both functional locations
    CALL FUNCTION 'ENQUEUE_EIFLOT'
      EXPORTING
        tplnr          = p_tplnr
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.

    IF sy-subrc <> 0.
*.... Func.loc &1 locked by user &2. Dismantle not possible
      syst-msgv4 = syst-msgv1.
      MESSAGE e131 WITH p_tplnr sy-msgv4 INTO gv_msg.
      PERFORM add_message_to_log.
      PERFORM update_list USING gt_equi-equnr '4'.
      lv_error = gc_charx.
    ENDIF.

    CALL FUNCTION 'ENQUEUE_EIFLOT'
      EXPORTING
        tplnr          = gt_floc-tplnr
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.

    IF sy-subrc <> 0.
*.... Func.loc &1 already locked by user &2. Install not possible
      syst-msgv4 = syst-msgv1.
      MESSAGE e130 WITH gt_floc-tplnr sy-msgv4 INTO gv_msg.
      PERFORM add_message_to_log.
      PERFORM update_list USING gt_equi-equnr '4'.
      lv_error = gc_charx.
    ENDIF.

    IF lv_error IS INITIAL.

*.... Dismantle equipment
      CALL FUNCTION 'BAPI_EQUI_DISMANTLE'
        EXPORTING
          equipment = gt_equi-equnr
        IMPORTING
          return    = lc_return.

*.... If the Equip. has been dismantled from existing location, assign
*.... the Equipment to the new functional location.
      IF NOT lc_return IS INITIAL.
*...... Error in dismantling the equipment &1
        MESSAGE e125 WITH gt_equi-equnr INTO gv_msg.
        PERFORM add_message_to_log.
        PERFORM update_list USING gt_equi-equnr '4'.
      ELSE.

* begin of change MOD-003
*        clear i_bapi_itob_eq_install_ext.
*        refresh i_bapi_itob_eq_install_ext.
*
**...... Update the internal table i_data_install with the new Func.loc
*        i_bapi_itob_eq_install_ext-funcloc = gt_floc-tplnr.
*        i_bapi_itob_eq_install_ext-inst_date = sy-datum.
*        i_bapi_itob_eq_install_ext-inst_time = sy-uzeit.
*        append i_bapi_itob_eq_install_ext.
*
*        call function 'BAPI_EQUI_INSTALL'
*          EXPORTING
*            equipment    = gt_equi-equnr
*            data_install = i_bapi_itob_eq_install_ext
*          IMPORTING
*            return       = lc_return.

*...... If the equipment can not be assigned to the Function Location,
*...... Generate a warning.
*       if not lc_return is initial.

        CLEAR: i_inherit_flags,
               s_equi,
               r_iflo.

        MOVE 'X' TO: i_inherit_flags-stort,
                     i_inherit_flags-msgrp,
                     i_inherit_flags-beber,
                     i_inherit_flags-ppsid,
                     i_inherit_flags-abckz,
                     i_inherit_flags-eqfnr,
                     i_inherit_flags-gsber,
                     i_inherit_flags-kostl,
                     i_inherit_flags-proid,
                     i_inherit_flags-daufn,
                     i_inherit_flags-aufnr,
                     i_inherit_flags-iwerk,
                     i_inherit_flags-ingrp,
                     i_inherit_flags-gewrk,
                     i_inherit_flags-rbnr,
                     i_inherit_flags-vkorg,
                     i_inherit_flags-vtweg,
                     i_inherit_flags-spart,
                     i_inherit_flags-adrnr,
                     i_inherit_flags-vkbur,
                     i_inherit_flags-vkgrp.

        s_equi-equnr = gt_equi-equnr.
        r_iflo-tplnr = gt_floc-tplnr.

        CALL FUNCTION 'EQUIPMENT_INSTALL'
          EXPORTING
            read_sobj             = 'X'
            read_robj             = 'X'
            lock_sobj             = 'X'
*           POSEQUI               =
            i_date                = sy-datum
            i_time                = sy-uzeit
            i_inherit_flags       = i_inherit_flags
*           OLD_SEQUI             =
*           EXEC_MEAS             = ' '
*           CALL_EXIT             = ' '
*           CHECK_NEW             = 'X'
*           TRANSMIT_NEW          = 'X'
*           DIRECT_NEW            = ' '
*           COMMIT_NEW            = ' '
          CHANGING
            s_equi                = s_equi
*           R_EQUI                =
            r_iflo                = r_iflo
          EXCEPTIONS
            err_install           = 1
            OTHERS                = 2.

        IF sy-subrc <> 0.
*........ The equipment &1 could not be installed at the funct.loc. &2

* end of change MOD-003

          MESSAGE e126 WITH gt_equi-equnr gt_floc-tplnr INTO gv_msg.
          PERFORM add_message_to_log.
          PERFORM update_list USING gt_equi-equnr '4'.
        ELSE.
          COMMIT WORK.
          IF sy-subrc EQ 0.
*.......... Equipment &1 has been successfully installed
            MESSAGE s127 WITH gt_equi-equnr INTO gv_msg.
            PERFORM add_message_to_log.
            PERFORM update_list USING gt_equi-equnr '0'.
          ENDIF.
        ENDIF.
      ENDIF.

    ENDIF.
    CLEAR gt_floc-selkz.
    MODIFY gt_floc TRANSPORTING selkz.
    EXIT.

  ENDLOOP.

ENDFORM.                    " install_equipment

*eject
*&---------------------------------------------------------------------*
*&      Form  display_log
*&---------------------------------------------------------------------*
*       Display the already generated application log
*----------------------------------------------------------------------*
FORM display_log .

*.. Local variables
  DATA: ls_prof TYPE bal_s_prof.

*.. Reset log indicator once displayed
  CLEAR gv_log.

*.. Get a prepared profile
  CALL FUNCTION 'BAL_DSP_PROFILE_POPUP_GET'
    IMPORTING
      e_s_display_profile = ls_prof
    EXCEPTIONS
      OTHERS              = 1.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*.. Use grid for display if wanted
  ls_prof-use_grid = gc_charx.
  ls_prof-start_row = 1.
  ls_prof-end_row = 25.
  CLEAR ls_prof-pop_adjst.

*.. When you use also other ALV lists in your report,
*.. please specify a handle to distinguish between the display
*.. variants of these different lists, e.g:
  ls_prof-disvariant-handle = 'LOG'.

*.. Call display function module
  CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
    EXPORTING
      i_s_display_profile = ls_prof
    EXCEPTIONS
      OTHERS              = 1.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " display_log

*eject
*&---------------------------------------------------------------------*
*&      Form  display_equipment
*&---------------------------------------------------------------------*
*       Display the equipment information using transaction IE03
*       for the selected equipment
*----------------------------------------------------------------------*
FORM display_equipment.

  LOOP AT gt_equi WHERE selkz EQ gc_charx.
    SET PARAMETER ID 'EQN' FIELD gt_equi-equnr.
    CALL TRANSACTION 'IE03' AND SKIP FIRST SCREEN.
    CLEAR gt_equi-selkz.
    MODIFY gt_equi TRANSPORTING selkz.
    EXIT.
  ENDLOOP.

ENDFORM.                    " display_equipment

*eject
*&---------------------------------------------------------------------*
*&      Form  display_funcloc
*&---------------------------------------------------------------------*
*       Display the funct.loc. information using transaction IL03
*       for the selected functional location
*----------------------------------------------------------------------*
FORM display_funcloc.

  LOOP AT gt_floc WHERE selkz EQ gc_charx.
    SET PARAMETER ID 'IFL' FIELD gt_floc-tplnr.
    CALL TRANSACTION 'IL03' AND SKIP FIRST SCREEN.
    CLEAR gt_floc-selkz.
    MODIFY gt_floc TRANSPORTING selkz.
    EXIT.
  ENDLOOP.

ENDFORM.                    " display_equipment

*eject
*&---------------------------------------------------------------------*
*&      Form  update_list
*&---------------------------------------------------------------------*
*       Update list with installing results
*----------------------------------------------------------------------*
*  -->  ip_equnr  : Equipment number
*  -->  ip_subrc  : Creation equipm result 0: success, 4: failure
*                   creation funct.loc result 1: success, 4: failure
*----------------------------------------------------------------------*
FORM update_list USING ip_equnr TYPE equnr
                       ip_subrc TYPE syst-subrc.

*.. Update list table with corresponding result
  LOOP AT gt_equi WHERE equnr EQ ip_equnr AND
                        selkz EQ gc_charx AND
                        exclu EQ space.

    CASE ip_subrc.
      WHEN 0.
        gt_equi-zzcol = gc_green.
        gt_equi-exclu = 'X'.
      WHEN 1.
        gt_equi-zzcol = gc_yellow.
      WHEN 4.
        gt_equi-zzcol = gc_red.
    ENDCASE.

    CLEAR gt_equi-selkz.

    MODIFY gt_equi.
  ENDLOOP.

ENDFORM.                    " update_list

*&---------------------------------------------------------------------*
*&      Form  update_inttable_floc
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p_tplnr     functional location
*----------------------------------------------------------------------*
FORM update_inttable_floc USING p_tplnr.

  DATA: wa_floc    LIKE gt_floc,
        lv_lgwid   TYPE lgwid,
        lv_tplma_2 LIKE iflo-tplma.

  DATA: lv_adrnr      LIKE adrc-addrnumber,
        lv_parnr      LIKE ihpa-parnr.

  SELECT SINGLE adrnr tplma pltxt tplnr objnr lgwid
    INTO (wa_floc-adrnr, lv_tplma_2, wa_floc-pltxt, wa_floc-tplnr,
          wa_floc-objnr, lv_lgwid)
    FROM iflo
    WHERE tplnr = p_tplnr.

  IF sy-subrc = 0.
*.... Add addressfields via field adrnr
    SELECT SINGLE name1 street post_code1 city1
        INTO (wa_floc-name1, wa_floc-street, wa_floc-post_code1,
              wa_floc-city1)
        FROM adrc
        WHERE addrnumber = wa_floc-adrnr.

    IF NOT lv_tplma_2 IS INITIAL.
      SELECT SINGLE pltxt
        INTO wa_floc-pltxt_sup
        FROM iflotx
        WHERE tplnr = lv_tplma_2
          AND spras = 'E'.
    ENDIF.

*.. Add addressfields from ship-to
    SELECT SINGLE parnr
        INTO lv_parnr
        FROM ihpa
        WHERE objnr = wa_floc-objnr
          AND parvw = gc_we
          AND kzloesch = ' '.

    IF sy-subrc = 0.
      SELECT SINGLE adrnr
          INTO lv_adrnr
          FROM kna1
          WHERE kunnr = lv_parnr.

      IF sy-subrc = 0.
        SELECT SINGLE name1 post_code1
          INTO (wa_floc-yam_kunwe_name1, wa_floc-yam_kunwe_postc)
           FROM adrc
           WHERE addrnumber = lv_adrnr.
      ENDIF.
    ENDIF.

*.... Add main workcenter from table CRHD
    SELECT SINGLE arbpl
        INTO wa_floc-gewrk
        FROM crhd
        WHERE objty = 'A'
          AND objid = lv_lgwid.

    CLEAR wa_floc-selkz.
    wa_floc-comp_ok = gc_charx.
    wa_floc-zzcol = gc_yellow.
    INSERT wa_floc INTO TABLE gt_floc.
  ENDIF.

ENDFORM.                    " update_inttable_floc

*&---------------------------------------------------------------------*
*&      Form  refresh_floc
*&---------------------------------------------------------------------*
*       Refresh of internal table with functional locations
*----------------------------------------------------------------------*
FORM refresh_floc.

*.. Local variables
  DATA: lv_tplma LIKE iflo-tplma,
        lv_lgwid TYPE lgwid.

*.. Update internal table with functional locations info
  LOOP AT gt_floc.

    SELECT SINGLE adrnr tplma vkorg vtweg spart vkbur vkgrp ingrp objnr
                  lgwid
      INTO (gt_floc-adrnr, lv_tplma,
            gt_floc-vkorg, gt_floc-vtweg, gt_floc-spart,
            gt_floc-vkbur, gt_floc-vkgrp, gt_floc-ingrp, gt_floc-objnr,
            lv_lgwid)
      FROM iflo
      WHERE tplnr = gt_floc-tplnr.

    IF sy-subrc = 0.
      SELECT SINGLE pltxt
        INTO gt_floc-pltxt
        FROM iflotx
        WHERE tplnr = gt_floc-tplnr
          AND spras = 'E'.

*.... Add addressfields via field adrnr
      SELECT SINGLE name1 street post_code1 city1
          INTO (gt_floc-name1, gt_floc-street, gt_floc-post_code1,
                gt_floc-city1)
          FROM adrc
          WHERE addrnumber = gt_floc-adrnr.

      IF NOT lv_tplma IS INITIAL.
        SELECT SINGLE pltxt
          INTO gt_floc-pltxt_sup
          FROM iflotx
          WHERE tplnr = lv_tplma
            AND spras = 'E'.
      ENDIF.

      PERFORM add_addr_shipto.

*.... Add main workcenter from table CRHD
      SELECT SINGLE arbpl
          INTO gt_floc-gewrk
          FROM crhd
          WHERE objty = 'A'
            AND objid = lv_lgwid.

      MODIFY gt_floc.
    ENDIF.

  ENDLOOP.

ENDFORM.                    " refresh_floc

*&---------------------------------------------------------------------*
*&      Form add_addr_shipto
*&---------------------------------------------------------------------*
*       Add address fields from ship-to customer
*----------------------------------------------------------------------*
FORM add_addr_shipto.

  DATA: lv_adrnr      LIKE adrc-addrnumber,
        lv_parnr      LIKE ihpa-parnr.

* Add addressfields from ship-to
  SELECT SINGLE parnr
      INTO lv_parnr
      FROM ihpa
      WHERE objnr = gt_floc-objnr
        AND parvw = gc_we
        AND kzloesch = ' '.

  IF sy-subrc = 0.
    SELECT SINGLE adrnr
        INTO lv_adrnr
        FROM kna1
        WHERE kunnr = lv_parnr.

    IF sy-subrc = 0.
      SELECT SINGLE name1 post_code1
        INTO (gt_floc-yam_kunwe_name1, gt_floc-yam_kunwe_postc)
         FROM adrc
         WHERE addrnumber = lv_adrnr.
    ENDIF.
  ENDIF.

ENDFORM.                  " add_addr_shipto
*&---------------------------------------------------------------------*
*&      Form  LAUNCH_AUTO_CREATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM launch_auto_creation .
*.. Local variables
  DATA: lv_tplma      LIKE iflo-tplma,
        lv_lgwid      TYPE lgwid,
        lv_swerk      TYPE swerk,
        lv_objnr      TYPE j_objnr,
        lv_lev2(1)    TYPE c,
        lv_lev3(1)    TYPE c,
        lv_tplnr      TYPE tplnr,
        lv_pstlz      TYPE pstlz,
        lv_level      TYPE i.

  DATA: BEGIN OF lt_equi_obj OCCURS 0,
          objnr LIKE ihpa-objnr,
        END OF lt_equi_obj.

  DATA: BEGIN OF lt_tplnr OCCURS 0,
          tplnr LIKE v_equi-tplnr,
        END OF lt_tplnr.


  CLEAR it_yam_ctam_ccodes.
  READ TABLE it_yam_ctam_ccodes WITH KEY bukrs =  gt_equi-bukrs.

* first check the ship-to.
  IF gt_equi-kunwe IS INITIAL.
* After Market or Seed
    IF it_yam_ctam_ccodes IS INITIAL.
*     when nothing is found => Seed, generate an error
*.... Please do not continue until the shipt-to partner is available
      MESSAGE e134 WITH gt_equi-equnr INTO gv_msg.
      PERFORM add_message_to_log.
      PERFORM update_list USING gt_equi-equnr '4'.
      EXIT.
    ENDIF.
  ENDIF.

* second check the sold-to
  IF gt_equi-kunnr IS INITIAL.
*.... Please do not continue until the sold-to partner is available
    MESSAGE e128 WITH gt_equi-equnr INTO gv_msg.
    PERFORM add_message_to_log.
    PERFORM update_list USING gt_equi-equnr '4'.
    EXIT.
  ENDIF.

*  REFRESH: lt_object,
*           lt_equi_obj,
*           lt_tplnr.

  IF NOT gt_equi-kunwe_pstlz IS INITIAL.
* begin of deletion MOD-007
*    SELECT SINGLE *
*    FROM yse_auto_inst_eq
*    INTO lv_yse_auto_inst_eq
*    WHERE pstlz EQ gt_equi-kunwe_pstlz
*    AND   fl_tplnr EQ  p_tplnr(2) .
* end of deletion MOD-007
* begin of insertion MOD-007
    lv_pstlz = gt_equi-kunwe_pstlz.
    lv_len   = STRLEN( lv_pstlz ).
* begin of change MOD-011
*    lv_times = lv_len - 1.
    lv_times = lv_len.
* end of change MOD-011
    IF gt_equi-spart IS INITIAL.
      gt_equi-spart = '01'.
    ENDIF.
    DO lv_times TIMES.
      lv_pstlz_part = lv_pstlz(lv_len).
      SELECT SINGLE * FROM yse_auto_inst_eq INTO lv_yse_auto_inst_eq
        WHERE fl_tplnr = p_tplnr(2)
          AND pstlz    = lv_pstlz_part
          AND spart    = gt_equi-spart .
      IF sy-subrc = 0.
        EXIT.
      ENDIF.
      lv_len = lv_len - 1.
    ENDDO.
* end of insertion MOD-007
    IF sy-subrc EQ 4.
* begin of insert MOD-011
*.... Read table with wildcard ('*')
      SELECT SINGLE * FROM yse_auto_inst_eq INTO lv_yse_auto_inst_eq
        WHERE fl_tplnr = p_tplnr(2)
          AND pstlz    = '*'
          AND spart    = gt_equi-spart .
      IF sy-subrc eq 4.
* end of insert MOD-011
*.... Postal Code not in table  yse_auto_inst_eq
        MESSAGE e135 WITH gt_equi-equnr lv_pstlz INTO gv_msg.
        PERFORM add_message_to_log.
        PERFORM update_list USING gt_equi-equnr '4'.
        EXIT.
* begin of insert MOD-011
      endif.
* end of insert MOD-011
    ENDIF.
  ENDIF.


  IF NOT gt_equi-kunnr_pstlz IS INITIAL.
* begin of deletion MOD-007
*    SELECT SINGLE *
*    FROM yse_auto_inst_eq
*    INTO lv_yse_auto_inst_eq
*    WHERE pstlz EQ gt_equi-kunnr_pstlz
*    AND   fl_tplnr EQ  p_tplnr(2) .
* end of deletion MOD-007
* begin of insertion MOD-007
    lv_pstlz = gt_equi-kunnr_pstlz.
    lv_len   = STRLEN( lv_pstlz ).
* begin of change MOD-011
*    lv_times = lv_len - 1.
    lv_times = lv_len.
* end of change MOD-011
    IF gt_equi-spart IS INITIAL.
      gt_equi-spart = '01'.
    ENDIF.
    DO lv_times TIMES.
      lv_pstlz_part = lv_pstlz(lv_len).
      SELECT SINGLE * FROM yse_auto_inst_eq INTO lv_yse_auto_inst_eq
        WHERE fl_tplnr = p_tplnr(2)
          AND pstlz    = lv_pstlz_part
          AND spart    = gt_equi-spart .
      IF sy-subrc = 0.
        EXIT.
      ENDIF.
      lv_len = lv_len - 1.
    ENDDO.
* end of insertion MOD-007
    IF sy-subrc EQ 4.
* begin of insert MOD-011
*.... Read table with wildcard ('*')
      SELECT SINGLE * FROM yse_auto_inst_eq INTO lv_yse_auto_inst_eq
        WHERE fl_tplnr = p_tplnr(2)
          AND pstlz    = '*'
          AND spart    = gt_equi-spart .
      IF sy-subrc eq 4.
* end of insert MOD-011
*.... Postal Code not in table  yse_auto_inst_eq
        MESSAGE e135 WITH gt_equi-equnr lv_pstlz INTO gv_msg.
        PERFORM add_message_to_log.
        PERFORM update_list USING gt_equi-equnr '4'.
        EXIT.
* begin of insert MOD-011
      endif.
* end of insert MOD-011
    ENDIF.
  ENDIF.


  CLEAR: lv_yse_auto_inst_eq,
         lv_yse_auto_inst_eq_kunnr.



  IF it_yam_ctam_ccodes IS INITIAL.
* Seed use Ship-to Postal Code to check
    MOVE gt_equi-kunwe_pstlz TO lv_pstlz.
* also read with Sold-to Postal Code
* begin of deletion MOD-007
*    SELECT SINGLE *
*    FROM yse_auto_inst_eq
*    INTO lv_yse_auto_inst_eq_kunnr
*    WHERE pstlz EQ lv_pstlz
*    AND   fl_tplnr EQ  p_tplnr(2) .
* end of deletion MOD-007

  ELSE.
* After Market, use Sold-to Postal to check
    MOVE gt_equi-kunnr_pstlz TO lv_pstlz.
  ENDIF.
* begin of deletion MOD-007
*  SELECT SINGLE *
*  FROM yse_auto_inst_eq
*  INTO lv_yse_auto_inst_eq
*  WHERE pstlz EQ lv_pstlz
*  AND   fl_tplnr EQ  p_tplnr(2) .
* begin of insertion MOD-007
  lv_len   = STRLEN( lv_pstlz ).
* begin of change MOD-011
*  lv_times = lv_len - 1.
  lv_times = lv_len.
* end of change MOD-011
  IF gt_equi-spart IS INITIAL.
    gt_equi-spart = '01'.
  ENDIF.
  DO lv_times TIMES.
    lv_pstlz_part = lv_pstlz(lv_len).
    SELECT SINGLE * FROM yse_auto_inst_eq INTO lv_yse_auto_inst_eq
      WHERE fl_tplnr = p_tplnr(2)
        AND pstlz    = lv_pstlz_part
        AND spart    = gt_equi-spart .
    IF sy-subrc = 0.
      EXIT.
    ENDIF.
    lv_len = lv_len - 1.
  ENDDO.
* end of insertion MOD-007

* begin of insert MOD-011
  IF sy-subrc EQ 4.
*.. Read table with wildcard ('*')
    SELECT SINGLE * FROM yse_auto_inst_eq INTO lv_yse_auto_inst_eq
      WHERE fl_tplnr = p_tplnr(2)
        AND pstlz    = '*'
        AND spart    = gt_equi-spart .
  endif.
* end of insert MOD-011


  PERFORM update_equipment .

* SEED or After Market
* check if there is an existing FuncLoc for the ship-to (3thrd level)

* Seed => when it_yam_ctam_ccodes is initial.
* After Market => when it_yam_ctam_ccodes is NOT initial.
* begin of insertion MOD-010
  CLEAR : lt_object[].
* end of insertion MOD-010
  IF it_yam_ctam_ccodes IS INITIAL.
    SELECT i1~objnr
        INTO CORRESPONDING FIELDS OF TABLE lt_object
        FROM ihpa AS i1
        JOIN ihpa AS i2 ON i1~objnr = i2~objnr
        WHERE i1~parnr = gt_equi-kunwe
          AND i1~parvw = gc_we
          AND i1~obtyp = 'IFL'
          AND i1~kzloesch = ' '
          AND NOT EXISTS  ( SELECT * FROM jest
                           WHERE objnr EQ  i1~objnr
                           AND ( ( stat EQ 'I0076' AND inact EQ ' ' ) OR
                                 ( stat EQ 'I0320' AND inact EQ ' ' ) ) )
          AND i2~parnr = gt_equi-kunnr
          AND i2~parvw = gc_ag
          AND i2~obtyp = 'IFL'
          AND i2~kzloesch = ' '
          AND NOT EXISTS  ( SELECT * FROM jest
                           WHERE objnr EQ  i2~objnr
                           AND ( ( stat EQ 'I0076' AND inact EQ ' ' ) OR
                                 ( stat EQ 'I0320' AND inact EQ ' ' ) ) ).
* begin of insertion MOD-010
    LOOP AT lt_object.
      SELECT SINGLE tplnr INTO lv_tplnr
        FROM iflo
        WHERE objnr = lt_object-objnr.

      IF sy-subrc IS INITIAL.
        IF lv_tplnr(2) NE p_tplnr.
          DELETE lt_object.
          CONTINUE.
        ENDIF.
      ENDIF.
    ENDLOOP.
* end of insertion MOD-010
* begin of change  MOD-010
*    IF sy-subrc EQ 0.
    IF NOT lt_object[] IS INITIAL.
* end of change MOD-010
*  flow B
      CLEAR wa_iflot.
      MOVE 3 TO lv_level.
      PERFORM search_funcloc CHANGING wa_iflot
                                      lv_level.
      IF NOT wa_iflot IS INITIAL .
        PERFORM install_equipment_fl_3 USING wa_iflot.
        MOVE gv_ifl TO gt_equi-floc.
        MODIFY gt_equi INDEX equi_idx.
        PERFORM change_to_superior_addres.
      ENDIF.
* begin of change MOD-010
*    ELSEIF sy-subrc EQ 4.
    ELSE.
*  FLOW A
* first test, is there a FuncLoc on Sold-to (2nd Level)
      SELECT objnr
          INTO CORRESPONDING FIELDS OF TABLE lt_object
          FROM ihpa AS i
          WHERE parnr = gt_equi-kunnr
            AND parvw = gc_ag
            AND obtyp = 'IFL'
            AND kzloesch = ' '
            AND NOT EXISTS  ( SELECT * FROM jest
                              WHERE objnr EQ  i~objnr
                              AND ( ( stat EQ 'I0076' AND inact EQ ' ' ) OR
                                    ( stat EQ 'I0320' AND inact EQ ' ' ) ) ).
* begin of insertion MOD-010
      LOOP AT lt_object.
        SELECT SINGLE tplnr INTO lv_tplnr
          FROM iflo
          WHERE objnr = lt_object-objnr.

        IF sy-subrc IS INITIAL.
          IF lv_tplnr(2) NE p_tplnr.
            DELETE lt_object.
            CONTINUE.
          ENDIF.
        ENDIF.
      ENDLOOP.
* end of insertion MOD-010
* begin of change MOD-010
*      IF sy-subrc EQ 0.
      IF NOT lt_object[] IS INITIAL.
* end of change MOD-010
* create a 3thrd Level FuncLoc
        CLEAR wa_iflot.
        MOVE 2 TO lv_level.
        PERFORM search_funcloc CHANGING wa_iflot
                                        lv_level.

*        READ TABLE lt_object INDEX 1.
*        SELECT SINGLE tplnr
*        INTO lv_tplnr
*        FROM iflot
*        WHERE objnr EQ wa_iflot-tplnr.
        IF NOT wa_iflot IS INITIAL.
          MOVE wa_iflot-tplnr TO gt_equi-floc.
          MODIFY gt_equi INDEX equi_idx.
          PERFORM create_funcloc_l3 .
          PERFORM change_to_superior_addres.
        ENDIF.
      ELSE.
* create a second and third Level functional Location
        PERFORM create_funcloc_l2 .
* only create a third level if a second level is created
        IF NOT gv_ifl IS INITIAL.
          PERFORM create_funcloc_l3 .
          PERFORM change_to_superior_addres.
        ENDIF.
      ENDIF.
    ENDIF.
  ELSE.
* AfterMarket
* Search on Sold-to
    SELECT objnr
    INTO CORRESPONDING FIELDS OF TABLE lt_object
    FROM ihpa AS i
    WHERE parnr = gt_equi-kunnr
      AND parvw = gc_ag
      AND obtyp = 'IFL'
      AND kzloesch = ' '
      AND NOT EXISTS  ( SELECT * FROM jest
                        WHERE objnr EQ  i~objnr
                        AND ( ( stat EQ 'I0076' AND inact EQ ' ' ) OR
                              ( stat EQ 'I0320' AND inact EQ ' ' ) ) ).
    IF sy-subrc EQ 0.
*
      CLEAR wa_iflot.
      MOVE '3' TO lv_level.
      PERFORM search_funcloc CHANGING wa_iflot
                                      lv_level.
      IF NOT wa_iflot IS INITIAL .
        PERFORM install_equipment_fl_3 USING wa_iflot.
        MOVE gv_ifl TO gt_equi-floc.
        MODIFY gt_equi INDEX equi_idx.
        PERFORM change_to_superior_addres.
      ENDIF.
    ELSE.
* create a second and third Level functional Location
      PERFORM create_funcloc_l2 .
* only create a third level if a second level is created
      IF NOT gv_ifl IS INITIAL.
        PERFORM create_funcloc_l3 .
        PERFORM change_to_superior_addres.
      ENDIF.
    ENDIF.
  ENDIF.


ENDFORM.                    " LAUNCH_AUTO_CREATION

" CREATE_FUNCLOC_CREATE
*&---------------------------------------------------------------------*
*&      Form  CREATE_FUNCLOC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_funcloc_l2 .
  DATA: lv_tplma      LIKE iflo-tplma,
      lv_lgwid      TYPE lgwid,
      lv_swerk      TYPE swerk,
      lv_objnr      TYPE j_objnr,
      lv_lev2(1)    TYPE c.

  DATA: BEGIN OF lt_object OCCURS 0,
          objnr LIKE aufk-objnr,
        END OF lt_object,
        wa_obj LIKE lt_object.

  DATA: BEGIN OF lt_equi_obj OCCURS 0,
          objnr LIKE ihpa-objnr,
        END OF lt_equi_obj.

  DATA: BEGIN OF lt_tplnr OCCURS 0,
          tplnr LIKE v_equi-tplnr,
        END OF lt_tplnr.


  DATA: local_yse_auto_inst_eq   LIKE yse_auto_inst_eq.

  REFRESH: lt_object,
         lt_equi_obj,
         lt_tplnr.

  SELECT objnr
      INTO CORRESPONDING FIELDS OF TABLE lt_object
      FROM ihpa AS i
      WHERE parnr = gt_equi-kunnr
        AND parvw = gc_ag
        AND obtyp = 'IFL'
        AND kzloesch = ' '
        AND NOT EXISTS  ( SELECT * FROM jest
                          WHERE objnr EQ  i~objnr
                            AND ( ( stat EQ 'I0076' AND inact EQ ' ' ) OR
                                  ( stat EQ 'I0320' AND inact EQ ' ' ) ) ).

* begin of insert MOD-002
  IF NOT gt_equi-kunwe IS INITIAL.
* begin of deletion MOD-007
*    SELECT SINGLE *
*    FROM yse_auto_inst_eq
*    INTO local_yse_auto_inst_eq
*    WHERE pstlz EQ gt_equi-kunnr_pstlz
*    AND   fl_tplnr EQ  p_tplnr(2) ..
* end of deletion MOD-007
* begin of insertion MOD-007
    lv_pstlz = gt_equi-kunnr_pstlz.
    lv_len   = STRLEN( lv_pstlz ).
* begin of change MOD-011
*    lv_times = lv_len - 1.
    lv_times = lv_len.
* end of change MOD-011
    IF gt_equi-spart IS INITIAL.
      gt_equi-spart = '01'.
    ENDIF.
    DO lv_times TIMES.
      lv_pstlz_part = lv_pstlz(lv_len).
      SELECT SINGLE * FROM yse_auto_inst_eq INTO local_yse_auto_inst_eq
        WHERE fl_tplnr = p_tplnr(2)
          AND pstlz    = lv_pstlz_part
          AND spart    = gt_equi-spart .
      IF sy-subrc = 0.
        EXIT.
      ENDIF.
      lv_len = lv_len - 1.
    ENDDO.
* end of insertion MOD-007

* begin of insert MOD-011
    IF sy-subrc EQ 4.
*.... Read table with wildcard ('*')
      SELECT SINGLE * FROM yse_auto_inst_eq INTO lv_yse_auto_inst_eq
        WHERE fl_tplnr = p_tplnr(2)
          AND pstlz    = '*'
          AND spart    = gt_equi-spart .
    endif.
* end of insert MOD-011

    move lv_yse_auto_inst_eq to local_yse_auto_inst_eq.

    SELECT objnr
        APPENDING CORRESPONDING FIELDS OF TABLE lt_object
        FROM ihpa AS i
        WHERE parnr = gt_equi-kunwe
          AND parvw = gc_we
          AND obtyp = 'IFL'
          AND kzloesch = ' '
          AND NOT EXISTS  ( SELECT * FROM jest
                            WHERE objnr EQ  i~objnr
                            AND ( ( stat EQ 'I0076' AND inact EQ ' ' ) OR
                                  ( stat EQ 'I0320' AND inact EQ ' ' ) ) )..

    IF sy-subrc = 0.
      SORT lt_object BY objnr.
      DELETE ADJACENT DUPLICATES FROM lt_object COMPARING objnr.
    ENDIF.
  ENDIF.
* end of insert MOD-002

  IF sy-subrc = 0.
    SELECT objnr
       INTO CORRESPONDING FIELDS OF TABLE lt_equi_obj
       FROM ihpa
       WHERE parnr = gt_equi-kunnr
         AND parvw = gc_ag
         AND obtyp = 'IEQ'
         AND kzloesch = ' '.

    IF sy-subrc = 0.
      LOOP AT lt_equi_obj.
        SELECT tplnr
           APPENDING CORRESPONDING FIELDS OF TABLE lt_tplnr
           FROM v_equi
           WHERE objnr = lt_equi_obj-objnr
             AND eqart = lv_eqart
             AND datbi = lv_99991231.
      ENDLOOP.
      IF NOT lt_tplnr[] IS INITIAL.
        LOOP AT lt_tplnr.
          SELECT SINGLE objnr tplma
             INTO (lv_objnr, lv_tplma)
             FROM iflot
             WHERE tplnr = lt_tplnr-tplnr.

          IF sy-subrc = 0.
            CHECK NOT lv_tplma IS INITIAL.
            MOVE lv_objnr TO lt_object-objnr.
            APPEND lt_object.
          ENDIF.
        ENDLOOP.
*...... Delete doubles
        IF sy-subrc = 0.
          SORT lt_object BY objnr.
          DELETE ADJACENT DUPLICATES FROM lt_object COMPARING objnr.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

* begin of insert MOD-003
  DATA: lv_tplnr LIKE iflo-tplnr,
        str_len  TYPE i.

  LOOP AT lt_object.
    SELECT SINGLE tplnr INTO lv_tplnr
      FROM iflo
      WHERE objnr = lt_object-objnr.

    IF sy-subrc IS INITIAL.
      IF lv_tplnr(2) NE p_tplnr OR
        STRLEN( lv_tplnr ) EQ 18.
        DELETE lt_object.
        CONTINUE.
      ENDIF.
    ENDIF.
  ENDLOOP.
* end of insert MOD-003

*  if sy-subrc <> 0.
  IF lt_object[] IS INITIAL.
*.... No automatic installation possible for the equipmant
*.... Create funct.location - 2nd level
    CLEAR gv_floc.
    CONCATENATE p_tplnr(2) '_9999999999' INTO gv_floc.
    gv_kunnr = gt_equi-kunnr.
*    gv_name1 = gt_equi-kunnr_name1.


*** MOD-005 * begin insert ***
*   Seed => when it_yam_ctam_ccodes is initial.
*   After Market => when it_yam_ctam_ccodes is NOT initial.
    IF it_yam_ctam_ccodes IS INITIAL.
      gv_name1 = gt_equi-kunnr_name1.
    ELSE.
*** MOD-005 * end insert ***
      IF gt_equi-kunnr_sortl(3) CO '1234567890'.
        gv_sortl = gt_equi-kunnr_sortl.
      ELSE.
        gv_sortl = gt_equi-kunnr_sortl+3(6).
      ENDIF.
      CONCATENATE gv_sortl gt_equi-kunnr_name1 INTO gv_name1
            SEPARATED BY space.
    ENDIF.                                                  "MOD-005
    gv_name2 = gt_equi-kunnr_name1.
* begin of change MOD-001
*   gv_swerk = gt_equi-swerk.
    gv_iwerk = gt_equi-iwerk.
* end of change MOD-001
    gv_land1 = gt_equi-land1.
    gv_spras = gt_equi-spras.
* for After Market take values from
    IF NOT it_yam_ctam_ccodes IS INITIAL.
      gv_vkorg = it_yam_ctam_ccodes-bukrs.
      gv_vtweg = it_yam_ctam_ccodes-vtweg.
      gv_spart = it_yam_ctam_ccodes-spart.
    ELSE.
* for Seed tabke value from equipment
      gv_vkorg = gt_equi-vkorg.
      gv_vtweg = gt_equi-vtweg.
      gv_spart = gt_equi-spart.
    ENDIF.

    MOVE: local_yse_auto_inst_eq-ingrp TO gv_ingrp,
          local_yse_auto_inst_eq-gewrk TO gv_gewrk,
          local_yse_auto_inst_eq-iwerk TO gv_iwerk.

    IF NOT local_yse_auto_inst_eq-vkbur IS INITIAL.
      MOVE: local_yse_auto_inst_eq-vkbur TO gv_vkbur,
            local_yse_auto_inst_eq-vkgrp TO gv_vkgrp.
    ELSE.
      MOVE:  gt_equi-vkbur TO gv_vkbur,
             gt_equi-vkgrp TO gv_vkgrp.
      IF NOT gt_equi-vkgrp  IS INITIAL.
        gv_vkgrp = gt_equi-vkgrp.
      ELSE.
        SELECT MIN( vkgrp )
        INTO gv_vkgrp
        FROM tvbvk
        WHERE vkbur EQ gt_equi-vkbur.
      ENDIF.
    ENDIF.

    PERFORM prepare_bdc_floc_level_2.

    GET PARAMETER ID 'IFL' FIELD gv_ifl.

    IF NOT gv_ifl IS INITIAL.
*.... Funct.location &1 has been successfully created for equipment &2
      MESSAGE s146 WITH gv_ifl gt_equi-equnr INTO gv_msg.
      PERFORM add_message_to_log.
      PERFORM update_list USING gt_equi-equnr '1'.

* CVM.sn
*      SELECT SINGLE *
*         INTO wa_iflot
*         FROM iflot
*         WHERE tplnr = gv_ifl.
*      INSERT wa_iflot-objnr INTO lt_object INDEX 1.
*      PERFORM install_equipment_fl_2 USING wa_iflot.
      MOVE gv_ifl TO gt_equi-floc.
      MODIFY gt_equi INDEX equi_idx.
* CVM.en
    ELSE.

*.... Call transaction IL01 failed for equipment &1
      MESSAGE e133 WITH gt_equi-equnr INTO gv_msg.
      PERFORM add_message_to_log.
      LOOP AT gt_errmsg INTO wa_errmsg
        WHERE msgtyp EQ 'E'.
        MESSAGE e147 WITH wa_errmsg-msgv1 wa_errmsg-msgv2
                    wa_errmsg-msgv3 wa_errmsg-msgv4 INTO gv_msg.
        PERFORM add_message_to_log.

        MESSAGE ID wa_errmsg-msgid TYPE wa_errmsg-msgtyp
             NUMBER wa_errmsg-msgnr INTO gv_msg
          WITH wa_errmsg-msgv1 wa_errmsg-msgv2
               wa_errmsg-msgv3 wa_errmsg-msgv4.
        PERFORM add_message_to_log.

      ENDLOOP.
      PERFORM update_list USING gt_equi-equnr '4'.
      EXIT.
    ENDIF.
  ENDIF.



ENDFORM.                    " CREATE_FUNCLOC


*&---------------------------------------------------------------------*
*&      Form  prepare_create_floc_level_2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM prepare_bdc_floc_level_2.

* Local constants
  CONSTANTS: lc_tplkz     TYPE tplkz    VALUE 'AM_FL',
             lc_fltyp     TYPE fltyp    VALUE 'Z',
             lc_sp(2)     TYPE c        VALUE 'AG'.

  REFRESH i_bdcdata.
* First screen
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPMILO0' '1110' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'IFLOS-STRNO' gv_floc
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'RILO0-TPLKZ' lc_tplkz
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'IFLO-FLTYP' lc_fltyp
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '/00'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

* General screen
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPMILO0' '2100' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'IFLO-PLTXT' gv_name1
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

* CVM.sn
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPMILO0' '2100' 'X' ' ' ' '
                     CHANGING struct_bdcdata.


  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '=T\02'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPMILO0' '2100' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-SWERK' gv_iwerk
                     CHANGING struct_bdcdata.


  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-ABCKZ' 'A'
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.


* CVM.en

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '=ADRS'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Popup
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
          USING    'SAPMILO0'  '6050'  'X'  ''  ''
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
          USING    ''  ''  ''  'RILO0-INHER_NO'
                                'X'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
          USING  ''  ''  ''  'BDC_OKCODE'  '=NEXT'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Location - address
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPLSZA1' '0201' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                   USING: '' '' '' 'ADDR1_DATA-NAME2' gv_name2
                   CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                   USING: '' '' '' 'ADDR1_DATA-COUNTRY' gv_land1
                   CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                   USING: '' '' '' 'ADDR1_DATA-LANGU' gv_spras
                   CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '=CONT'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

*
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPMILO0' '2100' 'X' ' ' ' '
                     CHANGING struct_bdcdata.


  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '=T\03'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Organization screen
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPMILO0' '2100' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-IWERK' gv_iwerk
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.



  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-INGRP' gv_ingrp
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.



  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOBATTR-WERGW' gv_iwerk
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

*perform bdc_field       using 'ITOBATTR-GEWRK'
*                              'B_40_435'.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOBATTR-GEWRK'  gv_gewrk
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.


*  IF NOT itob-kostl IS INITIAL.
*    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
*                       USING: '' '' '' 'ITOB-KOSTL' gv_kostl
*                       CHANGING struct_bdcdata.
*
*    APPEND struct_bdcdata TO i_bdcdata.
*    CLEAR  struct_bdcdata.
*  ENDIF.
*CVM.en


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '=T\05'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Partner screen
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPMILO0' '2100' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'IHPA-PARVW(01)' lc_sp
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'IHPA-PARNR(01)' gv_kunnr
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '=T\06'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Sal.& Distr. screen
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPMILO0' '2100' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-VKORG' gv_vkorg
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-VTWEG' gv_vtweg
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-SPART' gv_spart
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-VKBUR' gv_vkbur
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-VKGRP' gv_vkgrp
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                       USING: '' '' '' 'BDC_OKCODE' '=T\03'
                       CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.
* Begin of insert Bug Fix 290/09
* Organization screen
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPMILO0' '2100' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-INGRP' gv_ingrp
                     CHANGING struct_bdcdata.


  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.
* End of insert Bug Fix 290/09

* Save
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '=BU'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  CLEAR gt_errmsg.
  CALL TRANSACTION gc_trans USING i_bdcdata MODE lv_mode UPDATE 'S'
      MESSAGES INTO gt_errmsg.
  IF sy-subrc <> 0.
    SET PARAMETER ID 'IFL' FIELD gc_blank.
  ENDIF.
  REFRESH i_bdcdata.


ENDFORM.                    "prepare_create_floc_level_2

*&---------------------------------------------------------------------*
*&      Form  install_equipment_fl_2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM install_equipment_fl_3 USING lv_iflot TYPE iflo.

*.. Local variables
  DATA: lc_return LIKE bapiret2,
        lv_error(1) TYPE c.

  DATA: BEGIN OF i_bapi_itob_eq_install_ext OCCURS 100.
          INCLUDE STRUCTURE bapi_itob_eq_install_ext.
  DATA: END OF i_bapi_itob_eq_install_ext.

*.... Lock both functional locations
  CALL FUNCTION 'ENQUEUE_EIFLOT'
    EXPORTING
      tplnr          = p_tplnr
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2
      OTHERS         = 3.

  IF sy-subrc <> 0.
*.... Func.loc &1 locked by user &2. Dismantle not possible
    syst-msgv4 = syst-msgv1.
    MESSAGE e131 WITH p_tplnr sy-msgv4 INTO gv_msg.
    PERFORM add_message_to_log.
    PERFORM update_list USING gt_equi-equnr '4'.
    lv_error = gc_charx.
  ENDIF.

  CALL FUNCTION 'ENQUEUE_EIFLOT'
    EXPORTING
      tplnr          = lv_iflot-tplnr
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2
      OTHERS         = 3.

  IF sy-subrc <> 0.
*.... Func.loc &1 already locked by user &2. Install not possible
    syst-msgv4 = syst-msgv1.
    MESSAGE e130 WITH lv_iflot-tplnr sy-msgv4 INTO gv_msg.
    PERFORM add_message_to_log.
    PERFORM update_list USING gt_equi-equnr '4'.
    lv_error = gc_charx.
  ENDIF.

  IF lv_error IS INITIAL.

*.... Dismantle equipment
    CALL FUNCTION 'BAPI_EQUI_DISMANTLE'
      EXPORTING
        equipment = gt_equi-equnr
      IMPORTING
        return    = lc_return.

*.... If the Equip. has been dismantled from existing location, assign
*.... the Equipment to the new functional location.
    IF NOT lc_return IS INITIAL.
*...... Error in dismantling the equipment &1
      MESSAGE e125 WITH gt_equi-equnr INTO gv_msg.
      PERFORM add_message_to_log.
      PERFORM update_list USING gt_equi-equnr '4'.
    ELSE.
      CLEAR: i_inherit_flags,
             s_equi,
             r_iflo.

      MOVE 'X' TO: i_inherit_flags-stort,
                   i_inherit_flags-msgrp,
                   i_inherit_flags-beber,
                   i_inherit_flags-ppsid,
                   i_inherit_flags-abckz,
                   i_inherit_flags-eqfnr,
                   i_inherit_flags-gsber,
                   i_inherit_flags-kostl,
                   i_inherit_flags-proid,
                   i_inherit_flags-daufn,
                   i_inherit_flags-aufnr,
                   i_inherit_flags-iwerk,
                   i_inherit_flags-ingrp,
                   i_inherit_flags-gewrk,
                   i_inherit_flags-rbnr,
                   i_inherit_flags-vkorg,
                   i_inherit_flags-vtweg,
                   i_inherit_flags-spart,
                   i_inherit_flags-adrnr,
                   i_inherit_flags-vkbur,
                   i_inherit_flags-vkgrp.

      s_equi-equnr = gt_equi-equnr.
      r_iflo-tplnr = lv_iflot-tplnr.

      CALL FUNCTION 'EQUIPMENT_INSTALL'
        EXPORTING
          read_sobj             = 'X'
          read_robj             = 'X'
          lock_sobj             = 'X'
*           POSEQUI               =
          i_date                = sy-datum
          i_time                = sy-uzeit
          i_inherit_flags       = i_inherit_flags
        CHANGING
          s_equi                = s_equi
*           R_EQUI                =
          r_iflo                = r_iflo
        EXCEPTIONS
          err_install           = 1
          OTHERS                = 2.

      IF sy-subrc <> 0.
*........ The equipment &1 could not be installed at the funct.loc. &2

* end of change MOD-003

        MESSAGE e126 WITH gt_equi-equnr lv_iflot-tplnr INTO gv_msg.
        PERFORM add_message_to_log.
        PERFORM update_list USING gt_equi-equnr '4'.
      ELSE.
        COMMIT WORK.
        IF sy-subrc EQ 0.
*.......... Equipment &1 has been successfully installed
          MESSAGE s136 WITH gt_equi-equnr lv_iflot-tplnr
                       INTO gv_msg.
          PERFORM add_message_to_log.
          PERFORM update_list USING gt_equi-equnr '0'.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDIF.


ENDFORM.                    " install_equipment
*&---------------------------------------------------------------------*
*&      Form  UPDATE_EQUIPMENT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM update_equipment .
  DATA: data_general     TYPE bapi_itob,
        data_generalx    TYPE bapi_itobx,
        data_specific    TYPE bapi_itob_eq_only,
        data_specificx   TYPE bapi_itob_eq_onlyx,
        data_general_exp TYPE bapi_itob,
        data_specific_exp TYPE bapi_itob_eq_only,
        return           TYPE bapiret2.



  DATA: lv_crhd TYPE crhd.

*fill the fields to be updated

  SELECT SINGLE * INTO lv_crhd
  FROM crhd
  WHERE objty = 'A'
  AND arbpl = lv_yse_auto_inst_eq-gewrk.


  MOVE: lv_yse_auto_inst_eq-iwerk TO data_general-planplant,
        lv_yse_auto_inst_eq-ingrp TO data_general-plangroup,
        lv_crhd-objid             TO data_general-work_ctr.


* when Afer Market, also fill VKORG, VTWEG, SPART
  IF NOT it_yam_ctam_ccodes IS INITIAL.
    MOVE: it_yam_ctam_ccodes-bukrs TO data_general-sales_org,
          it_yam_ctam_ccodes-vtweg TO data_general-distr_chan,
          it_yam_ctam_ccodes-spart TO data_general-division.
  ENDIF.


* fill X-structures data_generalx and data_specificx
  PERFORM x_to_tables
              CHANGING
                 data_general
                 data_generalx
                 data_specific
                 data_specificx.

* Update the equipment
  CALL FUNCTION 'BAPI_EQUI_CHANGE'
    EXPORTING
      equipment         = gt_equi-equnr
      data_general      = data_general
      data_generalx     = data_generalx
      data_specific     = data_specific
      data_specificx    = data_specificx
    IMPORTING
      data_general_exp  = data_general_exp
      data_specific_exp = data_specific_exp
      return            = return
    EXCEPTIONS
      OTHERS            = 1.
  IF sy-subrc  EQ 0.
    IF return-type EQ 'S' OR return-type IS INITIAL.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
      WAIT UP TO 2 SECONDS.
    ENDIF.
  ELSEIF return-type EQ 'E'.
    MESSAGE ID return-id TYPE return-type
    NUMBER return-number INTO gv_msg
    WITH return-message_v3 return-message_v4.
    PERFORM add_message_to_log.
  ENDIF.

ENDFORM.                    " UPDATE_EQUIPMENT

*&---------------------------------------------------------------------*
*&      Form  x_to_tables
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->PI_GEN     text
*      -->PI_GENX    text
*      -->PI_SPEC    text
*      -->PI_SPECX   text
*----------------------------------------------------------------------*
FORM x_to_tables CHANGING  pi_gen   STRUCTURE bapi_itob
                           pi_genx  STRUCTURE bapi_itobx
                           pi_spec  STRUCTURE bapi_itob_eq_only
                           pi_specx   STRUCTURE bapi_itob_eq_onlyx.
  DATA: lv_counter TYPE i,
       lv_counter_p TYPE i.

* lwa_order_header_in
  lv_counter = 1.

  DO.
    ASSIGN COMPONENT lv_counter
      OF STRUCTURE pi_gen TO <field1>.
    IF sy-subrc EQ 0.
      IF NOT <field1> IS INITIAL.
        ASSIGN COMPONENT lv_counter OF STRUCTURE pi_genx
          TO <field2>.
        <field2> = 'X'.
      ENDIF.
*      ADD 1 TO lv_counter.
    ELSE.
      EXIT.
    ENDIF.
    ADD 1 TO lv_counter.
  ENDDO.
*  pi_headerx-updateflag = 'U'.

  lv_counter = 1.
  lv_counter_p = 2.

  DO.
    ASSIGN COMPONENT lv_counter
      OF STRUCTURE pi_spec TO <field1>.
    IF sy-subrc EQ 0.
      IF NOT <field1> IS INITIAL.
        ASSIGN COMPONENT lv_counter_p
          OF STRUCTURE pi_specx TO <field2>.
        <field2> = 'X'.
      ENDIF.
    ELSE.
      EXIT.
    ENDIF.
    ADD 1 TO lv_counter.
    ADD 1 TO lv_counter_p.
  ENDDO.

ENDFORM.                    "x_to_tables
*&---------------------------------------------------------------------*
*&      Form  CREATE_FUNCLOC_L3
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_funcloc_l3 .

  DATA: lv_adrnr LIKE adrc-addrnumber,
        lv_err   TYPE char3.

  DATA: BEGIN OF lt_object OCCURS 0,
        objnr LIKE aufk-objnr,
      END OF lt_object,
      wa_obj LIKE lt_object.

  CLEAR gv_floc.
*  gt_floc-tplnr(13)
  CONCATENATE  gt_equi-floc(13)  '_9999' INTO gv_floc.

  gv_kunnr      = gt_equi-kunnr.


* Seed or AfterMarket
* when aftermarket take sold-to
* when Seed take Ship-to
  IF NOT it_yam_ctam_ccodes IS INITIAL.
    gv_kunwe = gt_equi-kunnr.
    gv_vkorg = it_yam_ctam_ccodes-bukrs.
    gv_vtweg = it_yam_ctam_ccodes-vtweg.
    gv_spart = it_yam_ctam_ccodes-spart.
  ELSE.
    gv_kunwe = gt_equi-kunwe.
    gv_vkorg = gt_equi-vkorg.
    gv_vtweg = gt_equi-vtweg.
    gv_spart = gt_equi-spart.
  ENDIF.

* begin of change MOD-001
* gv_swerk      = gt_equi-swerk.
  gv_iwerk      = gt_equi-iwerk.
* end of change MOD-001
  gv_land1      = gt_equi-land1.
  gv_spras      = gt_equi-spras.
  gv_name1      = gt_equi-name1.
  gv_street     = gt_equi-street.
  gv_post_code1 = gt_equi-post_code1.
  gv_city1      = gt_equi-city1.
* begin of delete mod-009
* CONCATENATE gv_post_code1 gv_city1 INTO gv_pltxt
*                 SEPARATED BY space.
* end of delete mod-009

  gv_name2      = gt_equi-name2.
  gv_telf1      = gt_equi-telf1.
  gv_mobnr      = gt_equi-mobnr.
  gv_faxnr      = gt_equi-faxnr.
  gv_email      = gt_equi-email.
*  gv_gewrk      = gt_equi-gewrk.

  MOVE: lv_yse_auto_inst_eq-ingrp TO gv_ingrp,
        lv_yse_auto_inst_eq-gewrk TO gv_gewrk,
        lv_yse_auto_inst_eq-iwerk TO gv_iwerk.

  IF NOT lv_yse_auto_inst_eq-vkbur IS INITIAL.
    MOVE: lv_yse_auto_inst_eq-vkbur TO gv_vkbur,
          lv_yse_auto_inst_eq-vkgrp TO gv_vkgrp.
  ELSE.
    MOVE:  gt_equi-vkbur TO gv_vkbur,
           gt_equi-vkgrp TO gv_vkgrp.
  ENDIF.

*.. Get address from ship-to
  SELECT SINGLE adrnr
      INTO lv_adrnr
      FROM kna1
      WHERE kunnr = gv_kunwe.

  IF sy-subrc = 0.
    SELECT SINGLE name1 name2 street post_code1 city1 country
                  langu tel_number fax_number
* begin of insert mod-009
                  region
* end of insert mod-009
*      tel_number
      INTO (addr1_data_name1_sh, addr1_data_name2_sh,
            addr1_data_street_sh,
            addr1_data_post_code1_sh, addr1_data_city1_sh,
            addr1_data_land_sh, addr1_data_spras_sh,
* begin of change mod-009
*           addr1_data_telf1_sh, addr1_data_faxnr_sh )
            addr1_data_telf1_sh, addr1_data_faxnr_sh,
            addr1_data_region_sh)
* end of change mod-009
       FROM adrc
       WHERE addrnumber = lv_adrnr.
    IF sy-subrc EQ 0.
      MOVE: addr1_data_name1_sh      TO gv_name1,
            addr1_data_name2_sh      TO gv_name2,
            addr1_data_street_sh     TO gv_street,
            addr1_data_post_code1_sh TO gv_post_code1,
            addr1_data_city1_sh      TO gv_city1,
            addr1_data_land_sh       TO gv_land1,
            addr1_data_spras_sh      TO gv_spras,
            addr1_data_telf1_sh      TO gv_telf1,
            addr1_data_faxnr_sh      TO gv_faxnr.
* begin of insert mod-009
      MOVE: addr1_data_region_sh     TO gv_region.
* end of insert mod-009
    ENDIF.
* search for a mobile number
    SELECT SINGLE tel_number
     INTO addr1_data_mob_sh
    FROM adr2
    WHERE addrnumber = lv_adrnr
    AND r3_user EQ '3'.
    IF sy-subrc EQ 0.
      MOVE addr1_data_mob_sh TO gv_mobnr.
    ENDIF.
* search for an email addres
    SELECT SINGLE smtp_srch
    INTO addr1_data_email_sh
    FROM adr6
    WHERE addrnumber = lv_adrnr.
    IF sy-subrc EQ 0.
      MOVE addr1_data_email_sh TO gv_email.
    ENDIF.
  ENDIF.
*ENDIF.

  CLEAR gv_ifl.

* begin of insert mod-009
* take description for 3rd level from postcode and city from ship-to
  CONCATENATE gv_post_code1 gv_city1 INTO gv_pltxt
                  SEPARATED BY space.
* end of insert mod-009
  PERFORM prepare_bdc_floc_level_3.

  GET PARAMETER ID 'IFL' FIELD gv_ifl.


  IF NOT gv_ifl IS INITIAL.
*.... Funct.location &1 has been successfully created for equipment &2
    MESSAGE s146 WITH gv_ifl gt_equi-equnr INTO gv_msg.
    PERFORM add_message_to_log.
    PERFORM update_list USING gt_equi-equnr '1'.
*      exit.
*     before going to the FL popup screen, append newly created FL to
*     internal table
* CVM.sn
    SELECT SINGLE *
       INTO wa_iflot
       FROM iflo
       WHERE tplnr = gv_ifl.
    INSERT wa_iflot-objnr INTO lt_object INDEX 1.
    PERFORM install_equipment_fl_3 USING wa_iflot.
    MOVE gv_ifl TO gt_equi-floc.
    MODIFY gt_equi INDEX equi_idx.
* CVM.en
  ELSE.

*.... Call transaction IL01 failed for equipment &1
    MESSAGE e133 WITH gt_equi-equnr INTO gv_msg.
    PERFORM add_message_to_log.
    LOOP AT gt_errmsg INTO wa_errmsg
    WHERE msgtyp EQ 'E'.
      MESSAGE e147 WITH wa_errmsg-msgv1 wa_errmsg-msgv2
                  wa_errmsg-msgv3 wa_errmsg-msgv4 INTO gv_msg.
      PERFORM add_message_to_log.

      MESSAGE ID wa_errmsg-msgid TYPE wa_errmsg-msgtyp
           NUMBER wa_errmsg-msgnr INTO gv_msg
        WITH wa_errmsg-msgv1 wa_errmsg-msgv2
             wa_errmsg-msgv3 wa_errmsg-msgv4.
      PERFORM add_message_to_log.

    ENDLOOP.
    PERFORM update_list USING gt_equi-equnr '4'.
    EXIT.
  ENDIF.

ENDFORM.                    " CREATE_FUNCLOC_L3
*&---------------------------------------------------------------------*
*&      Form  PREPARE_BDC_FLOC_LEVEL_3
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM prepare_bdc_floc_level_3 .

* Local constants
  CONSTANTS: lc_tplkz     TYPE tplkz    VALUE 'AM_FL',
             lc_fltyp     TYPE fltyp    VALUE 'Z',
             lc_sp(2)     TYPE c        VALUE 'AG',
             lc_sh(2)     TYPE c        VALUE 'WE'.

  REFRESH i_bdcdata.
* First screen
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPMILO0' '1110' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'IFLOS-STRNO' gv_floc
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'RILO0-TPLKZ' lc_tplkz
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'IFLO-FLTYP' lc_fltyp
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '/00'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

* General screen
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPMILO0' '2100' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'IFLO-PLTXT' gv_pltxt
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.


* CVM.sn
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPMILO0' '2100' 'X' ' ' ' '
                     CHANGING struct_bdcdata.


  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '=T\02'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPMILO0' '2100' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-SWERK' gv_iwerk
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-ABCKZ' 'A'
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.


* CVM.en

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '=ADRS'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Popup
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
          USING    'SAPMILO0'  '6050'  'X'  ''  ''
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
          USING    ''  ''  ''  'RILO0-INHER_NO'
                                'X'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
          USING  ''  ''  ''  'BDC_OKCODE'  '=NEXT'
          CHANGING struct_bdcdata.
  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Location - address
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPLSZA1' '0201' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                   USING: '' '' '' 'ADDR1_DATA-NAME1' gv_name1
                   CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                   USING: '' '' '' 'ADDR1_DATA-NAME2' gv_name2
                   CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                   USING: '' '' '' 'ADDR1_DATA-STREET' gv_street
                   CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING: '' '' '' 'ADDR1_DATA-POST_CODE1' gv_post_code1
           CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING: '' '' '' 'ADDR1_DATA-CITY1' gv_city1
           CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

* begin of insert mod-009
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
           USING: '' '' '' 'ADDR1_DATA-REGION' gv_region
           CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.
* end of insert mod-009

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                   USING: '' '' '' 'ADDR1_DATA-COUNTRY' gv_land1
                   CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                   USING: '' '' '' 'ADDR1_DATA-LANGU' gv_spras
                   CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                   USING: '' '' '' 'SZA1_D0100-TEL_NUMBER' gv_telf1
                   CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                   USING: '' '' '' 'SZA1_D0100-MOB_NUMBER' gv_mobnr
                   CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                   USING: '' '' '' 'SZA1_D0100-FAX_NUMBER' gv_faxnr
                   CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                   USING: '' '' '' 'SZA1_D0100-SMTP_ADDR' gv_email
                   CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '=CONT'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPMILO0' '2100' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '=T\03'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Organization screen
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPMILO0' '2100' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-IWERK' gv_iwerk
                     CHANGING struct_bdcdata.



  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-INGRP' gv_ingrp
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOBATTR-GEWRK' gv_gewrk
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

*CVM.sn


*perform bdc_field       using 'ITOBATTR-WERGW'
*                              'GBAA'.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOBATTR-WERGW' gv_iwerk
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.



** CVM.sn
**  if not itob-kostl is initial.
**    PERFORM fill_bdcdata IN PROGRAM yam_common_routines
**                       USING: '' '' '' 'ITOB-KOSTL' ITOB-KOSTL
**                       CHANGING struct_bdcdata.
**
**    APPEND struct_bdcdata TO i_bdcdata.
**    CLEAR  struct_bdcdata.
**  endif.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '=T\05'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Partner screen
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPMILO0' '2100' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'IHPA-PARVW(01)' lc_sp
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'IHPA-PARNR(01)' gv_kunnr
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'IHPA-PARVW(02)' lc_sh
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'IHPA-PARNR(02)' gv_kunwe
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '=T\06'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Sal.& Distr. screen
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPMILO0' '2100' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-VKORG' gv_vkorg
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-VTWEG' gv_vtweg
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-SPART' gv_spart
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-VKBUR' gv_vkbur
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-VKGRP' gv_vkgrp
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

* if the planning plant differ from planning plant
* on function Loc level 2
* reenter MaintPlan_group
* Begin of insert Bug fix 29/09
*  IF NOT lv_yse_auto_inst_eq_kunnr IS INITIAL.
*    IF gv_iwerk NE lv_yse_auto_inst_eq_kunnr-iwerk
*      OR ( gv_iwerk NE wa_iflot-iwerk AND
*           NOT wa_iflot-iwerk IS INITIAL ).
* End of insert Bug fix 29/09

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '=T\03'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

* Organization screen
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: 'SAPMILO0' '2100' 'X' ' ' ' '
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'ITOB-INGRP' gv_ingrp
                     CHANGING struct_bdcdata.


  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.
* Begin of insert Bug fix 29/09
*    ENDIF.
*  ENDIF.
* End of insert Bug fix 29/09

* Save
  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '' '' 'BDC_OKCODE' '=BU'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  CLEAR gt_errmsg.
  CALL TRANSACTION gc_trans USING i_bdcdata MODE lv_mode UPDATE 'S'
         MESSAGES INTO gt_errmsg.

  IF sy-subrc <> 0.
    SET PARAMETER ID 'IFL' FIELD  gc_blank.
  ENDIF.
  REFRESH i_bdcdata.

ENDFORM.                    " PREPARE_BDC_FLOC_LEVEL_3

*&---------------------------------------------------------------------*
*&      Form  SEARCH_FUNCLOC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
*FORM search_funcloc CHANGING l_iflo TYPE iflo
*                             l_level TYPE i.
*  DATA: n TYPE i,
*        l TYPE i.
*
*  CLEAR: n, l_iflo.
** search * an existing funcLoc
*  SELECT *
*  INTO TABLE it_iflo
*  FROM iflo
*  FOR ALL ENTRIES IN lt_object
*  WHERE objnr EQ lt_object-objnr.
*
* if l_level eq '2'.
*
* endif.
*
* if l_level eq '3'.
*
* endif.
*
*  DESCRIBE TABLE it_iflo LINES n.
*
*  IF n EQ 1.
*    READ TABLE it_iflo INDEX 1.
*    MOVE it_iflo TO l_iflo.
*  ELSE.
** search for the default Func Location.
*    LOOP AT it_iflo
*    WHERE abckz EQ 'A'.
*      MOVE it_iflo TO l_iflo.
*      ADD 1 TO l.
*    ENDLOOP.
*    IF sy-subrc EQ '4'.
**  error message
*      MESSAGE e151 WITH gt_equi-equnr INTO gv_msg.
*      PERFORM add_message_to_log.
*      PERFORM update_list USING gt_equi-equnr '4'.
*    ENDIF.
*    IF l > 1.
*      CLEAR l_iflo.
*      MESSAGE e152 WITH gt_equi-equnr INTO gv_msg.
*      PERFORM add_message_to_log.
*      PERFORM update_list USING gt_equi-equnr '4'.
** error message
*    ENDIF.
*  ENDIF.
*
*ENDFORM.                    " SEARCH_FUNCLOC
*&---------------------------------------------------------------------*
*&      Form  MAINTAIN_POSTAL_CODES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM maintain_postal_codes .

  DATA: BEGIN OF act_sellist OCCURS 10.
          INCLUDE STRUCTURE vimsellist.
  DATA: END OF act_sellist.

  CLEAR act_sellist.
  act_sellist-viewfield  = 'FL_TPLNR'.
  act_sellist-operator   = 'EQ'.
  act_sellist-value      =  p_tplnr(2).
*ACT_SELLIST-AND_OR     = 'AND'.
  APPEND act_sellist.


  CALL FUNCTION 'VIEW_MAINTENANCE_CALL'
       EXPORTING
            action                       = 'U'
*          CORR_NUMBER                  = '          '
*          SHOW_SELECTION_POPUP         = 'X'
            view_name                    = 'YSE_AUTO_INST_EQ'
       TABLES
            dba_sellist                  = act_sellist
*              excl_cua_funct               = act_exclfun
       EXCEPTIONS
            client_reference             = 01
            foreign_lock                 = 02
            invalid_action               = 03
            no_clientindependent_auth    = 04
            no_database_function         = 05
            no_editor_function           = 06
            no_show_auth                 = 07
            no_tvdir_entry               = 08
            no_upd_auth                  = 09
            only_show_allowed            = 10
            system_failure               = 11
            unknown_field_in_dba_sellist = 12
            view_not_found               = 13.

  IF sy-subrc NE 0.
    MESSAGE e001(00) WITH sy-subrc.
  ENDIF.



ENDFORM.                    " MAINTAIN_POSTAL_CODES
*&---------------------------------------------------------------------*
*&      Form  SEARCH_FUNCLOC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_WA_IFLOT  text
*      <--P_LV_LEVEL  text
*----------------------------------------------------------------------*
FORM search_funcloc  CHANGING l_iflo TYPE iflo
                              l_lev  TYPE i.
  DATA: n TYPE i,
        l TYPE i,
        check_length TYPE i.
* begin of insertion MOD-010
  DATA : lv_p_tplnr TYPE tplnr.
  CLEAR: lv_p_tplnr.
  CONCATENATE p_tplnr '%' INTO lv_p_tplnr.

  CLEAR: n, l_iflo,it_iflo_err[].

* search * an existing funcLoc
  SELECT *
  INTO TABLE it_iflo
  FROM iflo
  FOR ALL ENTRIES IN lt_object
  WHERE objnr EQ lt_object-objnr
* begin of insertion MOD-010
    AND tplnr LIKE lv_p_tplnr.
* end of insertion MOD-010

  IF l_lev EQ '2'.
    MOVE 13 TO check_length.
  ENDIF.
  IF l_lev EQ '3'.
    MOVE 18 TO check_length.
  ENDIF.

  LOOP AT it_iflo.
    IF STRLEN( it_iflo-tplnr ) NE check_length.
      APPEND it_iflo TO it_iflo_err.
      DELETE it_iflo.
    ENDIF.
* MOD-008 Begin of insert
* begin of deletion MOD-010
*      IF it_iflo-tplnr+0(2) <> p_tplnr.
*        DELETE it_iflo.
*      ENDIF.
* end of deletion MOD-010
* MOD-008 End of insert
  ENDLOOP.

  DESCRIBE TABLE it_iflo LINES n.

* begin of insertion MOD-010
  IF n > 0.
* end of insertion MOD-010
    IF n EQ 1.
      READ TABLE it_iflo INDEX 1.
      MOVE it_iflo TO l_iflo.
    ELSE.
* search for the default Func Location.
      LOOP AT it_iflo
      WHERE abckz EQ 'A'.
        MOVE it_iflo TO l_iflo.
        ADD 1 TO l.
      ENDLOOP.
      IF sy-subrc EQ '4'.
*  error message
        MESSAGE e151 WITH gt_equi-equnr INTO gv_msg.
        PERFORM add_message_to_log.
        PERFORM update_list USING gt_equi-equnr '4'.
      ENDIF.
      IF l > 1.
        CLEAR l_iflo.
        MESSAGE e152 WITH gt_equi-equnr INTO gv_msg.
        PERFORM add_message_to_log.
        PERFORM update_list USING gt_equi-equnr '4'.
* error message
      ENDIF.
    ENDIF.
* begin of insertion MOD-010
  ENDIF.
* end of insertion MOD-010
* Functional Locations are from wrong Level
  IF n EQ 0.
    LOOP AT it_iflo_err.
      MESSAGE e153 WITH gt_equi-equnr  it_iflo_err-tplnr INTO gv_msg.
      PERFORM add_message_to_log.
      PERFORM update_list USING gt_equi-equnr '4'.
    ENDLOOP.
  ENDIF.
ENDFORM.                    " SEARCH_FUNCLOC
*&---------------------------------------------------------------------*
*&      Form  CHANGE_TO_SUPERIOR_ADDRES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM change_to_superior_addres .

  REFRESH i_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: 'SAPMIEQ0' '0100' 'X' ' ' ' '
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '0000' '' 'BDC_OKCODE' '/00'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                     USING: '' '' '' 'RM63E-EQUNR' gt_equi-equnr
                     CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: 'SAPMIEQ0' '0101' 'X' ' ' ' '
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '0000' '' 'BDC_OKCODE' '=T\02'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.

  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: 'SAPMIEQ0' '0101' 'X' ' ' ' '
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: '' '0000' '' 'BDC_OKCODE' '=ADRE'
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: 'SAPMIEQ0' '6050' 'X' ' ' ' '
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.



  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
          USING  ''  '0000'  ''  'BDC_OKCODE'  '=NEXT'
          CHANGING struct_bdcdata.

  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
          USING  ''  '0000'  ''  'INL_TAB-INHER_MA'  'X'
          CHANGING struct_bdcdata.

  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: 'SAPLSZA1' '0201' 'X' ' ' ' '
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
          USING  ''  '0000'  ''  'BDC_OKCODE'  '=CONT'
          CHANGING struct_bdcdata.

  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
                      USING: 'SAPMIEQ0' '0101' 'X' ' ' ' '
                      CHANGING struct_bdcdata.

  APPEND struct_bdcdata TO i_bdcdata.
  CLEAR  struct_bdcdata.


  PERFORM fill_bdcdata IN PROGRAM yam_common_routines
          USING  ''  ''  ''  'BDC_OKCODE'  '=BU'
          CHANGING struct_bdcdata.

  APPEND struct_bdcdata  TO i_bdcdata.
  CLEAR  struct_bdcdata.


  CLEAR gt_errmsg.
  CALL TRANSACTION gc_trans_ie02 USING i_bdcdata MODE lv_mode UPDATE 'S'
      MESSAGES INTO gt_errmsg.
  IF sy-subrc <> 0.
    LOOP AT gt_errmsg INTO wa_errmsg
    WHERE msgtyp EQ 'E'.
      MESSAGE ID wa_errmsg-msgid TYPE wa_errmsg-msgtyp
           NUMBER wa_errmsg-msgnr INTO gv_msg
        WITH wa_errmsg-msgv1 wa_errmsg-msgv2
             wa_errmsg-msgv3 wa_errmsg-msgv4.
      PERFORM add_message_to_log.

    ENDLOOP.
  ENDIF.
  REFRESH i_bdcdata.



ENDFORM.                    " CHANGE_TO_SUPERIOR_ADDRES
