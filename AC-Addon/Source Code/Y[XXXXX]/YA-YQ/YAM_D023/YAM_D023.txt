REPORT yam_d023 NO STANDARD PAGE HEADING MESSAGE-ID yam_dc .
*----------------------------------------------------------------------*
* PROGRAM ID           : YAM_DO23                                      *
* PROGRAM TITLE        : PROGRAM TO UPLOAD MANUAL CALLS                *
*                        FOR MAINTENANCE STRATEGY                      *
* AUTHOR               : Amit Mahajan                                  *
* DATE                 : 20/09/2004                                    *
* DEVELOPMENT ID       : XXXX                                          *
* CHANGE REQUEST NUMBER:                                               *
* PROGRAM DESCRIPTION  : THIS IS A DATA UPLOAD PROGRAM FOR             *
*                        MANUAL CALLS IN MAINTENANCE STRATEGY.         *
*                                                                      *
*----------------------------------------------------------------------*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
* MOD. NO.|  DATE    | NAME     |CORRECTION NUMBER| CHANGE REFERENCE # *
*----------------------------------------------------------------------*
* MOD-001 | 2004.11.13|Amit Mahajan|CD1K900473|CR-030-D023|xxxxxxxxxx| *
* MOD-002 | 2005.03.10|Luc Mertens |CD1K901820|TPR-CP012  |            *
*                     counter of the maintenance text will be on input *
************************************************************************
************************************************************************
*                  D A T A B A S E   T A B L E S                       *
************************************************************************
TABLES : EQUI, "Equipment master data
         MPLA, "Maintenance Plan
         T351X,"Maintenance strategy package texts
       /sapdmc/lsmemory. "Default Values for Project, Subproject, Object


************************************************************************
*                  I N T E R N A L   T A B L E S                       *
************************************************************************
DATA: BEGIN OF M_PLAN OCCURS 0,
        WARPL    LIKE RMIPM-WARPL,
        MANDA(8) TYPE C,
        STRAT    LIKE T351X-STRAT,
        KZYK1    LIKE t351x-KZYK1,
        C_COUNTER(02) ,
END OF M_PLAN.

TYPES: BEGIN OF TY_UPLOAD,
         V_TEXT(500) TYPE C,
       END OF TY_UPLOAD.
************************************************************************
*    Internal Table and Work area                                      *
************************************************************************
DATA : I_BDCDATA      LIKE BDCDATA OCCURS 0 WITH HEADER LINE,
       STRUCT_BDCDATA TYPE BDCDATA,
       I_EQUI         LIKE EQUI OCCURS 0 WITH HEADER LINE,
       WA_MPLA        LIKE MPLA,
       I_T351X        LIKE T351X OCCURS 0 WITH HEADER LINE,
       I_UPLOAD TYPE STANDARD TABLE OF TY_UPLOAD INITIAL SIZE 0
                     WITH HEADER LINE.
************************************************************************
*   CONSTANTS AND VARIABLES                                            *
************************************************************************
DATA : P_INFILE     LIKE /sapdmc/lsoinp-filename,
       V_RB_PRE     TYPE c VALUE ' ',
       V_COUNT(2)   TYPE c,
       V_COUNT1(3)  TYPE c,
       V_COUNT2(2)  TYPE c,
       V_COUNT3     TYPE f,
       V_COUNT4(24) TYPE c,
       V_FNAME(19)  TYPE c,
       V_FNAME1(15) TYPE c.

CONSTANTS :  C_X            TYPE C VALUE 'X',
             C_FILE         TYPE C VALUE 'X',
             C_FILETYPE(10) TYPE C VALUE 'ASC',
             C_S(1)         TYPE C VALUE '1',
             C_1(2)         TYPE C VALUE '01',
             C_0(1)         TYPE C VALUE '0',
             C_8(2)         TYPE C VALUE '08',
             C_8I(2)        TYPE C VALUE '8',
             C_SEPERATOR(1) TYPE C VALUE 'X',
             C_TRANS        LIKE tstc-tcode   VALUE  'IP10',
             C_GROUP        LIKE apqi-groupid VALUE  'Y_IP10'.

************************************************************************
* START OF SELECTION                                                   *
************************************************************************
IMPORT /sapdmc/lsmemory FROM MEMORY ID '/SAPDMC/LSMW'.
PERFORM GET_LSMW IN PROGRAM YAM_COMMON_ROUTINES
                    USING  /sapdmc/lsmemory-project
                          /sapdmc/lsmemory-subproj
                         /sapdmc/lsmemory-object
                         C_X
                   CHANGING P_INFILE.
IF SY-SUBRC <> 0.
  MESSAGE E009.
ENDIF.
************************************************************************
* READ INPUT FILE FROM PRESENTATION OR APPLICATION SERVER              *
************************************************************************
PERFORM FILE_INPUT_GET.
*********************************************************************
************************************************************************
* SPLIT THE INPUT FILE INTO INTERNAL TABLE M_PLAN                      *
* PASS THE DATA TO THE INTERNAL TABLE I_BDCDATA FOR FURTHER PROCESSING *
************************************************************************
PERFORM SPLIT_INPUT_FILE.
************************************************************************
************************************************************************
* OPEN SESSION                                                         *
************************************************************************
PERFORM OPEN_GROUP.
LOOP AT M_PLAN .
************************************************************************
*PASS THE CONTROL TO GENERATE THE I_BDCDATA TABLE                      *
************************************************************************
  PERFORM BATCH_DATA .
ENDLOOP.
************************************************************************
* CLOSE SESSION
************************************************************************
PERFORM CLOSE_GROUP.
************************************************************************
*      Form  FILE_INPUT_GET                                            *
************************************************************************
FORM FILE_INPUT_GET .
  IF V_RB_PRE = C_FILE.                   "READ FROM PRESENTATION SERVER
    PERFORM GET_FROM_pres IN PROGRAM YAM_COMMON_ROUTINES
                                     TABLES  I_UPLOAD
                                     USING   P_INFILE
                                             C_FILETYPE
                                             C_X.
  ELSE.                                  "READ FROM APPLICATION SERVER
    PERFORM GET_FROM_APPL IN PROGRAM YAM_COMMON_ROUTINES
                                     TABLES I_UPLOAD
                                     USING  P_INFILE.

 ENDIF.
ENDFORM.                    " FILE_INPUT_GET
************************************************************************
*      FORM SPLIT_INPUT_FILE                                           *
************************************************************************
FORM SPLIT_INPUT_FILE .
  LOOP AT I_UPLOAD.
    IF I_UPLOAD-V_TEXT+51(12) NE space.
************************************************************************
* MOVE WARPL VALUE WHICH IS NOT EQ SPACE                               *
************************************************************************
      MOVE I_UPLOAD-V_TEXT+51(12) TO M_PLAN-WARPL.
      PERFORM GET_MAINTENANCE.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "SPLIT_INPUT_FILE
************************************************************************
*FORM  GET_MAINTENANCE                                                 *
************************************************************************
FORM GET_MAINTENANCE .
************************************************************************
* MOVE DATE AND CYCLE TEXT TO M_PLAN INTERNAL TABLE                    *
************************************************************************
  MOVE I_UPLOAD-V_TEXT+63(8)  TO M_PLAN-MANDA.
  MOVE I_UPLOAD-V_TEXT+71(2) TO M_PLAN-KZYK1.
* begin of MOD-002
************************************************************************
*SELECT MAINTENANCE STRATEGY FROM MAINTENANCE HEADER TABLE WITH THE    *
* HELP OF MAINTENANCE PLAN                                             *
************************************************************************
* SELECT SINGLE * FROM MPLA INTO WA_MPLA
*           WHERE  WARPL EQ M_PLAN-WARPL.
* MOVE WA_MPLA-STRAT TO M_PLAN-STRAT.
************************************************************************
* SELECT DATA FROM T351X WHICH WILLLL GIVE THE COUNTER OF THE          *
* MAINTENANCE TEXT FROM THE DATABASE.                                  *
************************************************************************
* SELECT * FROM T351X INTO TABLE I_T351X WHERE
*                      STRAT EQ WA_MPLA-STRAT.
* LOOP AT I_T351X WHERE STRAT = WA_MPLA-STRAT.
*    IF   I_T351X-kzyk1  EQ M_PLAN-KZYK1.
*     IF SY-SUBRC EQ 0.
************************************************************************
* PASSING THE TABIX TO THE INTERNAL TABLE FOR FURTHER PROCESSING       *
************************************************************************
*       MOVE SY-TABIX TO M_PLAN-C_COUNTER.
        MOVE I_UPLOAD-V_TEXT+73(2) TO M_PLAN-C_COUNTER.
* end of MOD-002
        APPEND M_PLAN.
        CLEAR  M_PLAN.
* begin of MOD-002
*     ENDIF.
*   ENDIF.
* ENDLOOP.
* end of MOD-002
ENDFORM.                    "GET_MAINTENANCE
************************************************************************
*  FORM  BATCH_DATA                                                    *
************************************************************************
FORM batch_data .
 PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                      USING:   'SAPLIWP3' '0140' 'X' ' ' ' '
                      CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                       USING:   ''  '' '' 'RMIPM-WARPL' m_plan-warpl
                       CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                       USING:   ''  '' '' 'BDC_OKCODE'  '/00'
                       CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                        USING:   'SAPLIWP3' '0103' 'X' ' ' ' '
                        CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                        USING:   ''  '' '' 'BDC_OKCODE'  '=MA'
                        CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                        USING:   'SAPLIWP3' '7002' 'X' ' ' ' '
                        CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.


  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                       USING:   ''  '' '' 'RMIPM-MANDA' m_plan-MANDA
                       CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                        USING:   ''  '' '' 'BDC_OKCODE'  '=ENTR'
                        CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.
************************************************************************
* PASSING THE INDEX VALUE FOR THE COUNTER                              *
************************************************************************
  V_COUNT = M_PLAN-C_COUNTER .
************************************************************************
* CHECKING THE STRING LENGTH FOR CONCATENATING ZERO                    *
************************************************************************
  V_COUNT2 = STRLEN( V_COUNT ).
************************************************************************
* IF LENGTH IS 1 CONCATENATE THE ZER0                                  *
************************************************************************
  IF V_COUNT2 EQ C_S.
     CONCATENATE '0' V_COUNT INTO V_COUNT.
  ENDIF.
************************************************************************
*GET THE COUNTER VALUE WHICH WILL BE USED IN THE TABLE CONTROL FOR     *
*ITTERATING                                                            *
************************************************************************
  IF V_COUNT GT C_8.
       V_COUNT1 =       V_COUNT.
       V_COUNT3 =       V_COUNT1 / C_8I.
       V_COUNT4 =       V_COUNT3.
 WRITE V_COUNT4+2(1) TO V_COUNT1.
       V_COUNT  =       m_plan-c_counter.

************************************************************************
* PASSING THE COUNTER VALUE TO BDCTABLE FOR NEXT ENTRY                 *
************************************************************************
    DO V_COUNT1 TIMES.

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                        USING:   'SAPLIPM5' '0100' 'X' ' ' ' '
                        CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                        USING:   ' ' ' ' ' '  'BDC_OKCODE' '=PNPG'
                        CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.

************************************************************************
* MINUS C_8 VALUE FROM V_COUNT TO PASS THE RIGHT RECORD TO THE         *
* BDC TABLE                                                            *
************************************************************************
      V_COUNT = V_COUNT - C_8.
************************************************************************
* IF V_COUNT BECOMES ZERO AFTER ABOVE CALCULATION,THEN PASS C_8I VALUE *
************************************************************************
      IF V_COUNT = C_0.
  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                        USING:   'SAPLIPM5' '0100' 'X' ' ' ' '
                        CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                        USING:   ' ' ' ' ' ' 'BDC_OKCODE' '=PNPG'
                        CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.
       V_COUNT = C_8I.
      ENDIF.
    ENDDO.
************************************************************************
* CONCATENATE LEADING ZERO TO THE V-COUNT VALUE                        *
************************************************************************
      CONCATENATE '0' v_count INTO v_count.
  IF V_COUNT LE C_8.
      CONCATENATE 'PAKET_TAB-KZYK1(' v_count')' INTO v_fname.
      CONCATENATE 'PAKETSELECT(' v_count')'     INTO v_fname1.
************************************************************************
* PASS THE CONTROL TO BDC DATA TABLE BY CONCATENATING THE V_COUNT VALUE*
* WITH PAKETSELECT.PACKETSELECT9V_COUNT) WILL HIGHLIGHT THE RECORD     *
* IN TABLE CONTROL WITH THE V_COUNT VALUE                              *
************************************************************************
  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                        USING:   'SAPLIPM5' '0100' 'X' ' ' ' '
                        CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                        USING:   ' ' ' ' ' '  'BDC_CURSOR'  v_fname
                        CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                        USING:   ' ' ' ' ' '   v_fname1     c_x
                        CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                        USING:   ''  '' '' 'BDC_OKCODE'  '=ENTR'
                        CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.

  ENDIF.
      ELSE.
      CONCATENATE 'PAKET_TAB-KZYK1(' v_count')' INTO v_fname.
      CONCATENATE 'PAKETSELECT(' v_count')'     INTO v_fname1.

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                        USING:   'SAPLIPM5' '0100' 'X' ' ' ' '
                        CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                        USING:   ' ' ' ' ' '  'BDC_CURSOR'  v_fname
                        CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                        USING:   ' ' ' ' ' '   v_fname1     c_x
                        CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                        USING:   ''  '' '' 'BDC_OKCODE'  '=ENTR'
                        CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.

ENDIF.

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                        USING:   'SAPLIWP3' '0103' 'X' ' ' ' '
                        CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.

  PERFORM FILL_BDCDATA IN PROGRAM YAM_COMMON_ROUTINES
                        USING:   ''  '' '' 'BDC_OKCODE'  '=BU'
                        CHANGING STRUCT_BDCDATA.

  APPEND STRUCT_BDCDATA TO I_BDCDATA.
  CLEAR  STRUCT_BDCDATA.

  PERFORM BDC_TRANSACTION USING C_TRANS.
  REFRESH I_BDCDATA.
ENDFORM.                    "BATCH_DATA
***********************************************************************
*      FORM  OPEN_GROUP                                               *
***********************************************************************
FORM OPEN_GROUP .
  CALL FUNCTION 'BDC_OPEN_GROUP'
    EXPORTING
      client = SY-MANDT
      group  = C_GROUP
      user   = SY-UNAME
      keep   = ' '.
  IF sy-subrc NE 0.
    MESSAGE E013.
  ENDIF.
ENDFORM.                    " OPEN_GROUP

***********************************************************************
*      FORM  CLOSE_GROUP
***********************************************************************
FORM CLOSE_GROUP.
  CALL FUNCTION 'BDC_CLOSE_GROUP'.
ENDFORM.                    " CLOSE_GROUP

************************************************************************
*      FORM  BDC_TRANSACTION
************************************************************************
FORM bdc_transaction USING p_c_trans.
  CALL FUNCTION 'BDC_INSERT'
    EXPORTING
      tcode            = p_c_trans
    TABLES
      dynprotab        = i_bdcdata
    EXCEPTIONS
      internal_error   = 1
      not_open         = 2
      queue_error      = 3
      tcode_invalid    = 4
      printing_invalid = 5
      posting_invalid  = 6
      OTHERS           = 7.
  IF sy-subrc NE 0.
    MESSAGE E014.
  ENDIF.
ENDFORM.                    " BDC_TRANSACTION
