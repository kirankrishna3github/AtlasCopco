***INCLUDE YHFDBI86 .
************************************************************************
*  Purpose
*   ... Include program for payment extraction details
************************************************************************
* Author    :  Deutsche Bank AG
* Created   : MM/DD/YYYY
* Updated   : MM/DD/YYYY
* Version   : 04.0
* Responsible (subject)       :   FI
* Responsible (technical)     :  Ajay
************************************************************************
** Global fields *******************************************************
** Global constants ****************************************************

*FOR 4.6
*DATA: v_column_value(1000) type C, v_output_line(5000),
*      v_column_value1(1000) type C,v_column_value2(1000) type C .
******************************************************************PP01
*END 4.6

*FOR 4.7
 DATA: V_COLUMN_VALUE(9999), V_OUTPUT_LINE(9999),
 v_column_value1(9999), v_column_value2(9999).
*END 4.7

DATA: v_payfile(270).
DATA: itab_fmt_det LIKE yhffmtdt, v_payprog(20), v_errfile(270).
DATA: v_payfile1(270),  v_progid(10).
DATA: v_bene_len_flag(1),  ws_pc_download(1).
DATA: ws_pc_eop(1),  l_filelength(10) TYPE n.
DATA: rnum TYPE i , bytes TYPE i, subrc LIKE sy-subrc.
DATA: l_filename LIKE rlgrap-filename.

*FOR 4.7
DATA: in_codepage    TYPE cpcodepage,
             out_codepage TYPE cpcodepage.
DATA: ctrlcode TYPE rscpctrlco value '.'.
DATA: OUTLEN TYPE I, LO_DATA_CONV(1).
DATA: EOL(2) TYPE X VALUE '0D0A'.
DATA: OUTFIELD(9999), OUTFIELD1(9999), OUTFIELD2(9999).
DATA: OUTFIELD3(9999).
DATA: CODEPAGE(50), DATALENGTH  TYPE I, L TYPE SY-FDPOS.
*END 4.7

** Global arrays and internal tables ***********************************
DATA: BEGIN OF i_table OCCURS 10,
                   line(800),
      END OF i_table.
DATA: BEGIN OF itab_paydet OCCURS 0,
                  details(194),
      END OF itab_paydet.
DATA: BEGIN OF itab_wtxdet OCCURS 0,
                  details(5000),
      END OF itab_wtxdet.
** DDIC-Customized Objects ********************************************
TABLES:  yhffmtxr, yhfparmi, yhffmtdt, yhffmtow,rlgrap.
*---------------------------------------------------------------------*
*       FORM WRITE_PAYMENT                                            *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  VALUE(P_FORMAT_NO)                                            *
*  -->  VALUE(P_INCLUDE_WTX)                                          *
*  -->  VALUE(P_OUTFILE)                                              *
*  -->  VALUE(P_PAYMETHOD)                                            *
*  -->  VALUE(P_CO_CODE)                                              *
*  -->  VALUE(P_PAY_DOC)                                              *
*  -->  VALUE(P_WTX_PC)                                               *
*  -->  VALUE(P_CONVERT)                                              *
*---------------------------------------------------------------------*
FORM write_payment USING
                      value(p_format_no) LIKE yhffmtxr-yhfno
                      value(p_include_wtx) LIKE yhffmtxr-ypaydtl
                      value(p_outfile) TYPE c
                      value(p_paymethod) LIKE reguh-rzawe
                      value(p_co_code) LIKE reguh-zbukr
                      value(p_pay_doc) TYPE c
                      value(p_wtx_pc) TYPE c
                      value(p_convert) TYPE c
                      value(zw_laufd) type c
                      value(zw_laufi) type c
                      value(zaugdt) type c.

  DATA: v_details_flag(1), v_output_len TYPE i.
  DATA: v_pos TYPE i , v_exceed TYPE c, v_size TYPE i.
  DATA: v_input_value(1000) TYPE c,
        v_cfirst_x_c(3),
        v_temp_i TYPE i VALUE 0,
        v_first_x_c type i value 0.
  CLEAR: v_output_line.
  v_pos = 0.


*FOR 4.7

*ORIGINAL COMMENT** CODE PAGE REQUIREMENT
  IF  LO_DATA_CONV NE SPACE.
    SELECT SINGLE PARM_VAL INTO codepage FROM YHFPARMI
                            WHERE BUKRS = CO_CODE
                            AND   PARM1 = REGUH-UBNKS
                            AND   PARM2 = SPACE.
*ORGNL COMMENT** Find out what codepage this source runs in right now
    CALL FUNCTION 'SCP_GET_CODEPAGE_NUMBER'
      EXPORTING
        database_also = ' '
     IMPORTING
        appl_codepage = in_codepage.
    out_codepage = codepage.
  ENDIF.

*END 4.7


  SELECT * FROM yhffmtdt
  WHERE format_no = p_format_no
  ORDER BY column_no.
    MOVE-CORRESPONDING yhffmtdt TO itab_fmt_det.

    CLEAR: v_exceed, v_size, v_column_value,
          v_first_x_c, v_temp_i.
** Take the mapping from the overrides table if exists.
** Allow blank pay method applies to all
** Company Code and Format Number is mandatory.
    SELECT SINGLE * FROM yhffmtow
         WHERE format_no = yhffmtdt-format_no
         AND   column_no = yhffmtdt-column_no
         AND pay_method  = p_paymethod
         AND co_code     = p_co_code.
    IF sy-subrc EQ 0.
      MOVE-CORRESPONDING yhffmtow TO itab_fmt_det.
    ELSE.
      SELECT SINGLE * FROM yhffmtow
           WHERE format_no = yhffmtdt-format_no
           AND   column_no = yhffmtdt-column_no
           AND pay_method  = space
           AND co_code     = p_co_code.
      IF sy-subrc EQ 0.
        MOVE-CORRESPONDING yhffmtow TO itab_fmt_det.
      ELSE.
        SELECT SINGLE * FROM yhffmtow
              WHERE format_no = yhffmtdt-format_no
              AND   column_no = yhffmtdt-column_no
              AND pay_method  = p_paymethod
              AND co_code     = space.

        IF sy-subrc EQ 0.
          MOVE-CORRESPONDING yhffmtow TO itab_fmt_det.
        ELSE.
          SELECT SINGLE * FROM yhffmtow
                WHERE format_no = yhffmtdt-format_no
                AND   column_no = yhffmtdt-column_no
                AND  pay_method = space
                AND co_code     = space.
          IF sy-subrc EQ 0.
            MOVE-CORRESPONDING yhffmtow TO itab_fmt_det.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF itab_fmt_det-source_typ = 'FUNCTION'.
*     MODIFIED BY Yusinto 7 Aug 2007
*     add truncate functionality to
*     Function to get first n characters of source_val
      SEARCH itab_fmt_det-source_val FOR ','.
*     if ',' exists
      IF sy-subrc EQ 0.
        SPLIT itab_fmt_det-source_val AT ','
        INTO itab_fmt_det-source_val v_cfirst_x_c.
        CONDENSE v_cfirst_x_c.

        v_temp_i = STRLEN( v_cfirst_x_c ).

        IF v_temp_i > 0.
          v_first_x_c = v_cfirst_x_c.
        ELSE.
          v_first_x_c = 0.
        ENDIF.
      ENDIF.
*     END MODIFICATION 7 Aug 2007

      IF itab_fmt_det-source_val = 'INSERT_DETAILS'
      AND v_payprog NE space.
        v_details_flag = 'Y'.
        PERFORM insert_details USING p_pay_doc v_output_line P_CO_CODE
             zw_laufd zw_laufi ZAUGDT.
        CLEAR v_output_line.
      ELSEIF itab_fmt_det-source_val = 'INSERT_WTX_COUNT'.
        CLEAR: v_column_value.
        IF p_include_wtx NE space.
          PERFORM insert_wtx_count USING p_pay_doc.
        ENDIF.
      ELSE.
        PERFORM call_func.
      ENDIF.

*ZK 26/10/2007 'TABLE' and Blank will do different things
    elseif itab_fmt_det-source_typ = 'TABLE'.
      perform get_table_value using itab_fmt_det-source_val.

    else.
      clear: v_column_value.
      v_column_value = itab_fmt_det-source_val.
    endif.

    IF v_details_flag <> 'Y'.
      IF ( v_column_value = space OR v_column_value EQ '00000000' )
           AND itab_fmt_det-default_v <> space.

        if itab_fmt_det-source_typ = 'TABLE'.
          PERFORM get_table_value USING itab_fmt_det-default_v.

        else.
          clear: v_column_value.
          v_column_value = itab_fmt_det-default_v.
        endif.
      ENDIF.
      CONDENSE v_column_value.
      IF p_convert EQ 'K'.
        v_input_value = v_column_value.
        PERFORM katakana(yhfdbifn) USING v_input_value
v_column_value.
      ELSEIF p_convert EQ 'E'.
        v_input_value = v_column_value.
        PERFORM eur_convert(yhfdbifn)
                USING v_input_value v_column_value.
      ENDIF.
      v_size = STRLEN( v_column_value ).
      IF v_size > itab_fmt_det-max_length.
        v_exceed = 'Y'.
      ENDIF.
* If bene name is > 35 characters set a flag. This will be used
* by the function fn_bene_alert.
      IF itab_fmt_det-column_nme = 'BENEFICIARY NAME'.
        IF v_size > 35.
          v_bene_len_flag = 'Y'.
        ELSE.
          v_bene_len_flag = 'N'.
        ENDIF.
      ENDIF.
      IF itab_fmt_det-max_length > 0.
        v_column_value =
v_column_value+0(itab_fmt_det-max_length).
      ELSE.
        v_column_value = space.
      ENDIF.

*** 23.07.2007 Yupinto
*** ensure transaction amount is not signed
      IF itab_fmt_det-column_nme = 'TRANSACTION AMOUNT'.
        REPLACE '-' WITH space INTO v_column_value.
        REPLACE '+' WITH space INTO v_column_value.
      ENDIF.
*** end 23.07.2007

*     MODIFIED BY Yusinto 7 Aug 2007
*     get X chars from column value from functions here
      IF itab_fmt_det-source_typ EQ 'FUNCTION' AND
        v_first_x_c >  0.
        v_column_value = v_column_value+0(v_first_x_c).
      ENDIF.
*     END MODIFICATION 7 Aug 2007

      CONCATENATE v_output_line v_column_value
                 ';' INTO v_output_line.

      PERFORM populate_report_fields USING v_exceed.
    ELSE.
      v_output_line = ';'.
      v_details_flag = 'N'.
    ENDIF.
  ENDSELECT.
* Remove last delimiter
  v_output_len = STRLEN( v_output_line ) - 1.
  v_output_line = v_output_line+0(v_output_len).
* For WTX output to PC, append to table.
  IF p_wtx_pc NE space.
    i_table-line = v_output_line.

    APPEND i_table.
  ELSE.
* For normal payment

*FOR 4.6
*    IF yhlive <> space.
*      TRANSFER v_output_line TO p_outfile.
*    ENDIF.
*END 4.6

*FOR 4.7
IF YHLIVE <> SPACE.
      IF  LO_DATA_CONV EQ SPACE.
        TRANSFER V_OUTPUT_LINE TO P_OUTFILE.
      ELSE.
* code page conversation logic starts
        CLEAR : DATALENGTH, L, OUTFIELD.

* START YUSINTO 17 DEC 2007: remove crazy '@' code
*        CONCATENATE V_OUTPUT_LINE '@'  INTO V_OUTPUT_LINE.
*        search V_OUTPUT_LINE FOR '@'.
*        L = ( SY-FDPOS * 2 ) .
*        REPLACE '@'  IN V_OUTPUT_LINE WITH SPACE.

          L = strlen( V_OUTPUT_LINE ).
          L = L * 2.

* END YUSINTO 17 DEC 2007

        CALL FUNCTION 'SCP_TRANSLATE_CHARS_46'
          EXPORTING
            INBUFF    = V_OUTPUT_LINE(L)    "WORKSTRING
            INCODE    = in_codepage
            OUTBUFFLG = 9999
            OUTCODE   = out_codepage
            CTRLCODE  = ctrlcode
          IMPORTING
            OUTUSED   = DATALENGTH
            OUTBUFF   = OUTFIELD.    " outstring.
        CLEAR :  OUTFIELD.
*Special Character Conversions
        CALL FUNCTION 'SCP_TRANSLATE_CHARS_46'
          EXPORTING
            INBUFF    = V_OUTPUT_LINE(DATALENGTH)    "WORKSTRING
            INCODE    = in_codepage
            OUTBUFFLG = 9999
            OUTCODE   = out_codepage
            CTRLCODE  = ctrlcode
          IMPORTING
            OUTBUFF   = OUTFIELD2.    " outstring.
        outlen = strlen( outfield2 ).

        CASE SY-SUBRC.
          WHEN 0.
            TRANSFER OUTFIELD2 TO V_PAYFILE length outlen. "OUTLEN.
            TRANSFER EOL TO V_PAYFILE LENGTH 2.
          WHEN 1.
            MESSAGE I368 WITH  'ERROR IN SCP_TRANSLATE_CHARS_46'
                          '- INVALID CODEPAGE'.
          WHEN 2.
            MESSAGE I368 WITH 'ERROR IN SCP_TRANSLATE_CHARS_46'
                          '- INTERNAL ERROR'.
          WHEN 3.
            MESSAGE I368 WITH  'ERROR IN SCP_TRANSLATE_CHARS_46'
                         '- CANNOT CONVERT'.
          WHEN 4.
            MESSAGE I368 WITH  'ERROR IN SCP_TRANSLATE_CHARS_46'
                         '- FIELD BAD TYPE'.
          WHEN 5.
            MESSAGE I368 WITH  'ERROR IN SCP_TRANSLATE_CHARS_46'
                         '- OTHERS'.
        ENDCASE.
      ENDIF.
    ENDIF.
*END 4.7
  ENDIF.
ENDFORM.                    "WRITE_PAYMENT
*---------------------------------------------------------------------*
*       FORM GET_TABLE_VALUE                                          *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  VALUE(P_SOURCE_VALUE)                                         *
*---------------------------------------------------------------------*
FORM get_table_value
             USING
                value(p_source_value) TYPE c.
  field-symbols: <fs_column>.
*   data: v_prefix(3) type c.

*zk 26/10/2007 the commented lines are to make sure that this
*subroutine is just for 'TABLE'.
*When it is 'FUNCTION' or Blank, it should not come into this subroutine

*   v_prefix = p_source_value.

*   if v_prefix = 'FN_'.
*     perform call_func.
*   else.
  search p_source_value for ',,'.
  if sy-subrc eq 0.
    perform concat_fields
                   using p_source_value ',,'
                   changing v_column_value.
  else.
    search p_source_value for ','.
    if sy-subrc eq 0.
      perform concat_fields
                     using p_source_value ','
                     changing v_column_value.
    else.
*zk 12/12/2007 Changes made*************************
      search p_source_value for '-'.
      if sy-subrc eq 0.
        assign (p_source_value) to <fs_column>.
        if sy-subrc = 0.
          v_column_value = <fs_column>.
*        else.
*          v_column_value = p_source_value.
        endif.
      else.
        v_column_value = p_source_value.
      endif.
    endif.
****************************************************
*       v_column_value = p_source_value.
*       else.
*         clear: sy-subrc.
*         search p_source_value for '-'.
*         if sy-subrc ne 0.
*           v_column_value = p_source_value.
*         endif.
  endif.
*   endif.
ENDFORM.                    "GET_TABLE_VALUE

*---------------------------------------------------------------------*
*       FORM CONCAT_FIELDS                                            *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  VALUE(P_SOURCE_VALUE)                                         *
*  -->  VALUE(P_DELIMITER)                                            *
*  -->  VALUE(P_OUT)                                                  *
*---------------------------------------------------------------------*
FORM concat_fields USING
                     value(p_source_value) TYPE c
                     value(p_delimiter) TYPE c
                   CHANGING
                     value(p_out) TYPE c.
  DATA: v_f1(100), v_f2(100), v_f3(100), v_f4(100), v_f5(100),
        v_f6(100), v_f7(100), v_f8(100), v_f9(100), v_f10(100).
  FIELD-SYMBOLS: <fs1>, <fs2>, <fs3>, <fs4>, <fs5>,
               <fs6>, <fs7>, <fs8>, <fs9>, <fs10>.
  SPLIT p_source_value AT p_delimiter
     INTO v_f1 v_f2 v_f3 v_f4 v_f5
          v_f6 v_f7 v_f8 v_f9 v_f10.
  PERFORM concat_fields_assign USING v_f1 CHANGING v_f1.
  PERFORM concat_fields_assign USING v_f2 CHANGING v_f2.
  PERFORM concat_fields_assign USING v_f3 CHANGING v_f3.
  PERFORM concat_fields_assign USING v_f4 CHANGING v_f4.
  PERFORM concat_fields_assign USING v_f5 CHANGING v_f5.
  PERFORM concat_fields_assign USING v_f6 CHANGING v_f6.
  PERFORM concat_fields_assign USING v_f7 CHANGING v_f7.
  PERFORM concat_fields_assign USING v_f8 CHANGING v_f8.
  PERFORM concat_fields_assign USING v_f9 CHANGING v_f9.
  PERFORM concat_fields_assign USING v_f10 CHANGING v_f10.
  IF p_delimiter = ',,'.
    CONCATENATE v_f1 v_f2 v_f3 v_f4 v_f5
                v_f6 v_f7 v_f8 v_f9 v_f10
                INTO p_out SEPARATED BY space.
  ELSE.
    CONCATENATE v_f1 v_f2 v_f3 v_f4 v_f5
                v_f6 v_f7 v_f8 v_f9 v_f10
                INTO p_out.
  ENDIF.
ENDFORM.                    "CONCAT_FIELDS

*---------------------------------------------------------------------*
*       FORM CONCAT_FIELDS_ASSIGN                                     *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  VALUE(P_FIELD)                                                *
*  -->  VALUE(P_VALUE)                                                *
*---------------------------------------------------------------------*
FORM concat_fields_assign USING
                            value(p_field) TYPE c
                          CHANGING
                            value(p_value) TYPE c.
  FIELD-SYMBOLS: <fs1>.
  ASSIGN (p_field) TO <fs1>.
  IF sy-subrc = 0.
    p_value = <fs1>.
  ELSE.
    p_value = p_field.
  ENDIF.
ENDFORM.                    "CONCAT_FIELDS_ASSIGN

*---------------------------------------------------------------------*
*       FORM INSERT_DETAILS                                           *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  VALUE(P_PAY_DOC)                                              *
*  -->  VALUE(P_DATA)                                                 *
*---------------------------------------------------------------------*

*FOR 4.6
*FORM insert_details USING value(p_pay_doc) TYPE c
*                          value(p_data) TYPE c.
*  DATA: v_match_flag(1), v_doc_no(10) TYPE n, v_cnt TYPE i.
*  CLEAR sy-subrc.
*  LOOP AT itab_paydet.
*    IF sy-subrc <> 0.
*      EXIT.
*    ENDIF.
*    IF itab_paydet-details+0(9) = '>>PAYMENT'.
*      v_doc_no = itab_paydet-details+12(10).
*      IF v_match_flag = 'Y'.
*        EXIT.
*      ELSEIF v_doc_no = p_pay_doc.
*        v_match_flag = 'Y'.
*        v_cnt = 1.
*        CONTINUE.
*      ENDIF.
*    ENDIF.
*    IF v_match_flag = 'Y' AND itab_paydet-details NE space.
*      IF v_cnt = 1.
*        v_cnt = v_cnt + 1.
*        CONCATENATE p_data itab_paydet-details INTO p_data.
*        TRANSFER p_data TO v_payfile.
*      ELSE.
*        TRANSFER itab_paydet-details TO v_payfile.
*      ENDIF.
*    ENDIF.
*  ENDLOOP.
*  IF v_match_flag NE 'Y' OR v_cnt EQ 1.
*    TRANSFER p_data TO v_payfile.
*  ENDIF.
*ENDFORM.                    "INSERT_DETAILS
*END 4.6

*FOR 4.7
FORM INSERT_DETAILS USING VALUE(P_PAY_DOC) TYPE C
                          VALUE(P_DATA) TYPE C
                          VALUE(P_CO_CODE) TYPE C
                          value(zw_laufd) type c
                          value(zw_laufi) type c
                          VALUE(ZAUGDT) TYPE C.

  DATA: V_MATCH_FLAG(1), V_DOC_NO(10) TYPE N, V_CNT TYPE I.
  CLEAR : DATALENGTH, L.

  data : wa_regup like regup.
  data : wa_bseg like bseg.
  DATA : WA_BSAK LIKE BSAK.

  data : begin of pay_doc_num occurs 0,
         doc_num(10),
         end of pay_doc_num.

  data : begin of inv_num occurs 0,
         bukrs(4),
         doc_num(10),
         fiscal_yr(4),
         end of inv_num.

  data : lv_name like thead-tdname.

  data : lt_lines like TLINE occurs 0 with HEADER LINE.

  data : LTX_FLAG.

  CLEAR SY-SUBRC.
  LOOP AT ITAB_PAYDET.
    IF SY-SUBRC <> 0.
      EXIT.
    ENDIF.
    IF ITAB_PAYDET-DETAILS+0(9) = '>>PAYMENT'.
      V_DOC_NO = ITAB_PAYDET-DETAILS+12(10).
      IF V_MATCH_FLAG = 'Y'.
        EXIT.
      ELSEIF V_DOC_NO = P_PAY_DOC.
        V_MATCH_FLAG = 'Y'.
        V_CNT = 1.
          pay_doc_num-doc_num = p_pay_doc.
          append pay_doc_num.
        CONTINUE.
      ENDIF.
    ENDIF.
    IF V_MATCH_FLAG = 'Y' AND ITAB_PAYDET-DETAILS NE SPACE.
      IF V_CNT = 1.
        V_CNT = V_CNT + 1.
        IF LO_DATA_CONV = SPACE.
          CONCATENATE P_DATA ITAB_PAYDET-DETAILS INTO P_DATA.
          TRANSFER P_DATA TO V_PAYFILE.
       ELSE.
* code page conversation logic starts

* START: YUSINTO 17 DEC 2007: Get rid of this crazy code
* to do with '@'
*          CONCATENATE P_DATA ITAB_PAYDET-DETAILS '@'  INTO P_DATA.
*          search P_DATA FOR '@'.
*          L = ( SY-FDPOS * 2 ) .
*          REPLACE '@'  IN P_DATA WITH SPACE.

          CONCATENATE P_DATA ITAB_PAYDET-DETAILS INTO P_DATA.
          L = strlen( P_DATA ).
          L = L * 2.

* END: YUSINTO 17 DEC 2007

          CALL FUNCTION 'SCP_TRANSLATE_CHARS_46'
            EXPORTING
              INBUFF    = P_DATA(L)    "WORKSTRING
              INCODE    = in_codepage
              OUTBUFFLG = 9999
              OUTCODE   = out_codepage
              CTRLCODE  = ctrlcode
            IMPORTING
              OUTUSED   = DATALENGTH
              OUTBUFF   = OUTFIELD.    " outstring.
          CLEAR :  OUTFIELD.
*Special Character Conversions
          CALL FUNCTION 'SCP_TRANSLATE_CHARS_46'
            EXPORTING
              INBUFF    = P_DATA(DATALENGTH)    "WORKSTRING
              INCODE    = in_codepage
              OUTBUFFLG = 9999
              OUTCODE   = out_codepage
              CTRLCODE  = ctrlcode
            IMPORTING
              OUTBUFF   = OUTFIELD.    " outstring.
          outlen = strlen( outfield ).

          CASE SY-SUBRC.
            WHEN 0.
              TRANSFER OUTFIELD TO V_PAYFILE length outlen.
              TRANSFER EOL TO V_PAYFILE LENGTH 2.
            WHEN 1.
              MESSAGE I368 WITH  'ERROR IN SCP_TRANSLATE_CHARS_46'
                            '- INVALID CODEPAGE'.
            WHEN 2.
              MESSAGE I368 WITH 'ERROR IN SCP_TRANSLATE_CHARS_46'
                            '- INTERNAL ERROR'.
            WHEN 3.
              MESSAGE I368 WITH  'ERROR IN SCP_TRANSLATE_CHARS_46'
                           '- CANNOT CONVERT'.
            WHEN 4.
              MESSAGE I368 WITH  'ERROR IN SCP_TRANSLATE_CHARS_46'
                           '- FIELD BAD TYPE'.
            WHEN 5.
              MESSAGE I368 WITH  'ERROR IN SCP_TRANSLATE_CHARS_46'
                           '- OTHERS'.
          ENDCASE.
        ENDIF.
      ELSE.
        IF LO_DATA_CONV = SPACE.
          TRANSFER ITAB_PAYDET-DETAILS TO V_PAYFILE.
        ELSE.
          CALL FUNCTION 'SCP_TRANSLATE_CHARS_46'
            EXPORTING
              INBUFF    = ITAB_PAYDET-DETAILS
              INCODE    = in_codepage
              OUTBUFFLG = 600
              OUTCODE   = out_codepage
              CTRLCODE  = ctrlcode
            IMPORTING
              OUTBUFF   = OUTFIELD1.
          outlen = strlen( outfield1 ).
          TRANSFER OUTFIELD1 TO V_PAYFILE LENGTH OUTLEN.
          TRANSFER EOL TO V_PAYFILE LENGTH 2.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.

***** Long text start **********************
 select single * from yhfparmi where bukrs = space
                    and parm1 = 'EPD'
                    and parm2 = 'LTX'
                    and PARM_VAL = 'Y'.
  if sy-subrc eq 0.
    move yhfparmi-parm_val to LTX_FLAG.
  else.
    select single * from yhfparmi where bukrs = p_co_code
                    and parm1 = 'EPD'
                    and parm2 = 'LTX'
                    and PARM_VAL = 'Y'.
    if sy-subrc eq 0.
      move yhfparmi-parm_val to LTX_FLAG.
    endif.
  endif.

IF LTX_FLAG EQ 'Y'.
  loop at pay_doc_num.
   if not zw_laufd is initial and not zw_laufi is initial.
     select * from regup into wa_regup
         where laufd =  zw_laufd
         and   laufi = zw_laufi
         and   vblnr = pay_doc_num-doc_num.
       if sy-subrc eq 0.
      inv_num-bukrs = wa_regup-zbukr.
      inv_num-doc_num = wa_regup-belnr.
      inv_num-fiscal_yr = wa_regup-gjahr.
      append inv_num.
       endif.
    endselect.
    else.
  SELECT * FROM BSAK INTO WA_BSAK
  WHERE BUKRS = P_CO_CODE AND
        AUGDT = ZAUGDT AND
        AUGBL = pay_doc_num-doc_num.
  if wa_bsak-belnr ne pay_doc_num.
       inv_num-bukrs = WA_BSAK-bukrs.
      inv_num-doc_num = wa_bsak-belnr.
      inv_num-fiscal_yr = wa_bsak-gjahr.
      append inv_num.
  endif.
  ENDSELECT.
    endif.
 endloop.


 loop at inv_num.
        clear wa_bseg.
        select * from bseg into wa_bseg
         where bukrs =  inv_num-bukrs
         and   belnr = inv_num-doc_num
         and   gjahr = inv_num-fiscal_yr.
          if sy-subrc eq 0.
      concatenate wa_bseg-bukrs wa_bseg-belnr wa_bseg-gjahr
             wa_bseg-buzei into lv_name.
      refresh lt_lines. clear lt_lines.

   CALL FUNCTION 'READ_TEXT'
     EXPORTING
       CLIENT                        = SY-MANDT
       id                            = '0001'
       language                      = SY-LANGU
       name                          = lv_name
       object                        = 'DOC_ITEM'
     tables
       lines                         = lt_lines
    EXCEPTIONS
      ID                            = 1
      LANGUAGE                      = 2
      NAME                          = 3
      NOT_FOUND                     = 4
      OBJECT                        = 5
      REFERENCE_CHECK               = 6
      WRONG_ACCESS_TO_ARCHIVE       = 7
      OTHERS                        = 8
             .
   IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
   else.
* To transfer a blank line separator
     clear lt_lines.
     transfer lt_lines-tdline to v_payfile.

   loop at lt_lines.
     CONDENSE lt_lines-tdline.
    IF LO_DATA_CONV = SPACE.
     transfer lt_lines-tdline to v_payfile.
    ELSE.
     clear outfield.
      CALL FUNCTION 'SCP_TRANSLATE_CHARS_46'
        EXPORTING
          INBUFF    = lt_lines-tdline    "WORKSTRING
          INCODE    = in_codepage
          OUTBUFFLG = 9999
          OUTCODE   = out_codepage
          CTRLCODE  = ctrlcode
        IMPORTING
          OUTBUFF   = OUTFIELD.    " outstring.
      outlen = strlen( outfield ).
      TRANSFER OUTFIELD TO V_PAYFILE LENGTH OUTLEN.
      TRANSFER EOL TO V_PAYFILE LENGTH 2.
    ENDIF.
   endloop.
   ENDIF.
   endif.
   endselect.
endloop.
ENDIF.

***** Long text end **********************

  IF V_MATCH_FLAG NE 'Y' OR V_CNT EQ 1.
    IF LO_DATA_CONV = SPACE.
      TRANSFER P_DATA TO V_PAYFILE.
    ELSE.
      CALL FUNCTION 'SCP_TRANSLATE_CHARS_46'
        EXPORTING
          INBUFF    = P_DATA    "WORKSTRING
          INCODE    = in_codepage
          OUTBUFFLG = 9999
          OUTCODE   = out_codepage
          CTRLCODE  = ctrlcode
        IMPORTING
          OUTBUFF   = OUTFIELD.    " outstring.
      outlen = strlen( outfield ).
      TRANSFER OUTFIELD TO V_PAYFILE LENGTH OUTLEN.
      TRANSFER EOL TO V_PAYFILE LENGTH 2.
    ENDIF.
  ENDIF.
ENDFORM.                    "INSERT_DETAILS
*END 4.7
*---------------------------------------------------------------------*
*       FORM INSERT_WTX_DETAILS                                       *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  VALUE(P_PAY_DOC)                                              *
*---------------------------------------------------------------------*
FORM insert_wtx_details USING value(p_pay_doc) TYPE c.
  DATA: v_match_flag(1), v_doc_no(10) TYPE n.
  LOOP AT itab_wtxdet.
    IF sy-subrc <> 0.
      EXIT.
    ENDIF.
    IF itab_wtxdet-details+0(11) = '>>NO OF REC'.
      IF v_match_flag = 'Y'.
        EXIT.
      ENDIF.
    ELSEIF itab_wtxdet-details+0(9) = '>>PAYMENT'.
      v_doc_no = itab_wtxdet-details+12(10).
      IF v_match_flag = 'Y'.
        EXIT.
      ELSEIF v_doc_no = p_pay_doc.
        v_match_flag = 'Y'.
        CONTINUE.
      ENDIF.
    ENDIF.
    IF v_match_flag = 'Y' AND itab_wtxdet-details NE space.

*FOR 4.6
*      TRANSFER itab_wtxdet-details TO v_payfile.
*END 4.6

*FOR 4.7
      IF LO_DATA_CONV = SPACE.
        TRANSFER ITAB_WTXDET-DETAILS TO V_PAYFILE.
      ELSE.
        CALL FUNCTION 'SCP_TRANSLATE_CHARS_46'
          EXPORTING
            INBUFF    = ITAB_WTXDET-DETAILS
            INCODE    = in_codepage
            OUTBUFFLG = 9999
            OUTCODE   = out_codepage
            CTRLCODE  = ctrlcode
          IMPORTING
            OUTBUFF   = OUTFIELD3.
        outlen = strlen( outfield3 ).
        TRANSFER OUTFIELD3 TO V_PAYFILE LENGTH OUTLEN.
        TRANSFER EOL TO V_PAYFILE LENGTH 2.
      ENDIF.
*END 4.7
    ENDIF.
  ENDLOOP.
ENDFORM.                    "INSERT_WTX_DETAILS

*---------------------------------------------------------------------*
*       FORM INSERT_WTX_COUNT                                         *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  VALUE(P_PAY_DOC)                                              *
*---------------------------------------------------------------------*
FORM insert_wtx_count USING value(p_pay_doc) TYPE c.
  DATA: v_match_flag(1), v_doc_no(10) TYPE n.
  LOOP AT itab_wtxdet.
    IF itab_wtxdet-details+0(11) = '>>NO OF REC'.
      IF v_match_flag = 'Y'.
        v_column_value = itab_wtxdet-details+12(10).
        CONDENSE v_column_value.
        CONCATENATE 'WHT' v_column_value INTO v_column_value.
        EXIT.
      ENDIF.
    ELSEIF itab_wtxdet-details+0(9) = '>>PAYMENT'.
      v_doc_no = itab_wtxdet-details+12(10).
      IF v_match_flag = 'Y'.
        EXIT.
      ELSEIF v_doc_no = p_pay_doc.
        v_match_flag = 'Y'.
        CONTINUE.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "INSERT_WTX_COUNT
