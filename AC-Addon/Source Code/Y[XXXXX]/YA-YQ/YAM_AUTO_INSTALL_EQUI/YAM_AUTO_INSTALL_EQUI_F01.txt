*----------------------------------------------------------------------*
***INCLUDE YAM_AUTO_INSTALL_EQUI_F01 .
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  initialization
*&---------------------------------------------------------------------*
*       Perform the necessary initialization actions
*----------------------------------------------------------------------*
FORM initialization .

*.. Local variables
  DATA: ls_log    TYPE bal_s_log.

  ls_log-object = 'YAM_AUTO_INST_EQUI'.

*.. Create application log
  CALL FUNCTION 'BAL_LOG_CREATE'
    EXPORTING
      i_s_log                 = ls_log
    IMPORTING
      e_log_handle            = gv_handle
    EXCEPTIONS
      log_header_inconsistent = 1
      OTHERS                  = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.


  SELECT * INTO TABLE it_yam_ctam_ccodes
           FROM yam_ctam_ccodes.

  SORT it_yam_ctam_ccodes.                                  "MOD-005

ENDFORM.                    " initialization

*eject
*&---------------------------------------------------------------------*
*&      Form  select_equipments
*&---------------------------------------------------------------------*
*       Select the relevant equipment information
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM select_equipments.

* Local variables
  DATA: lv_prdha TYPE prodh_d.

* begin of change MOD-001
* select equnr eqktx sernr datab objnr adrnr swerk matnr
  SELECT equnr eqktx sernr datab objnr adrnr iwerk matnr
* end of change MOD-001
         vkorg vtweg spart bukrs
    INTO CORRESPONDING FIELDS OF TABLE gt_equi
    FROM v_equi
    WHERE tplnr EQ p_tplnr
      AND eqart EQ lv_eqart
      AND datab IN s_datab
      AND datbi EQ lv_99991231
      AND equnr IN s_equnr
      AND sernr IN s_sernr.

* Add additional fields to internal table
  LOOP AT gt_equi.

*.. Add addressfields via field adrnr
    SELECT SINGLE name1 street post_code1 city1 name2
                  tel_number fax_number
        INTO (gt_equi-name1, gt_equi-street, gt_equi-post_code1,
              gt_equi-city1, gt_equi-name2, gt_equi-telf1,
              gt_equi-faxnr)
        FROM adrc
        WHERE addrnumber = gt_equi-adrnr.

*.. Add addit. communication date from tables ADR6/ADR2
    SELECT SINGLE smtp_addr
       INTO gt_equi-email
       FROM adr6
       WHERE addrnumber = gt_equi-adrnr.

    SELECT SINGLE tel_number
       INTO gt_equi-mobnr
       FROM adr2
       WHERE addrnumber = gt_equi-adrnr
         AND r3_user    = '3'.           "standard mobile tel.

*.. Add sold-to party and name via field objnr
    SELECT SINGLE parnr
        INTO gt_equi-kunnr
        FROM ihpa AS sp
        WHERE objnr = gt_equi-objnr
          AND parnr IN s_kunnr AND parvw = gc_ag
          AND kzloesch <> gc_charx.

    IF sy-subrc = 0.
      SELECT SINGLE name1 land1 spras sortl pstlz
         INTO (gt_equi-kunnr_name1, gt_equi-land1, gt_equi-spras,
               gt_equi-kunnr_sortl, gt_equi-kunnr_pstlz)
         FROM kna1
         WHERE kunnr = gt_equi-kunnr.

      SELECT SINGLE vkbur  vkgrp
        INTO (gt_equi-vkbur , gt_equi-vkgrp)
         FROM knvv
         WHERE kunnr = gt_equi-kunnr
* begin of change MOD-001
*          and vkorg = gt_equi-swerk
*          and vtweg = '11'
*          and spart = '01'.
           AND vkorg = gt_equi-vkorg
           AND vtweg = gt_equi-vtweg
           AND spart = gt_equi-spart.
* end of change MOD-001
    ELSE.
      DELETE gt_equi.
      CONTINUE.
    ENDIF.



*.. Take only equipment from selected product hierarchy
* begin of insert MOD-002
    IF NOT s_prdha[] IS INITIAL.
* end of insert MOD-002
      CLEAR lv_prdha.
      SELECT SINGLE prdha
          INTO lv_prdha
          FROM mara
          WHERE matnr = gt_equi-matnr.

      IF sy-subrc = 0.
        IF NOT lv_prdha IN s_prdha.
          DELETE gt_equi.
          CONTINUE.
        ENDIF.
      ELSE.
        DELETE gt_equi.
        CONTINUE.
      ENDIF.
* begin of insert MOD-002
    ENDIF.

*.. Add ship-to party
*.. first test if selection is filled
    IF NOT s_shipto[] IS INITIAL.
      SELECT SINGLE parnr
          INTO gt_equi-kunwe
          FROM ihpa
          WHERE objnr = gt_equi-objnr
            AND parnr IN s_shipto
            AND parvw = gc_we
            AND kzloesch <> gc_charx.
      IF sy-subrc EQ 0.
        SELECT SINGLE pstlz
         INTO gt_equi-kunwe_pstlz
         FROM kna1
         WHERE kunnr = gt_equi-kunwe.
      ELSE.
        DELETE gt_equi.
        CONTINUE.
      ENDIF.
    ELSE.
* when selection is not filled then fill data if exits but
* nothing is deleted (because equipment without SH can exist
      SELECT SINGLE parnr
      INTO gt_equi-kunwe
      FROM ihpa
      WHERE objnr = gt_equi-objnr
        AND parvw = gc_we
        AND kzloesch <> gc_charx.
      IF sy-subrc EQ 0.
        SELECT SINGLE pstlz
         INTO gt_equi-kunwe_pstlz
         FROM kna1
         WHERE kunnr = gt_equi-kunwe.
      ENDIF.
    ENDIF.
* end of insert MOD-002


    MODIFY gt_equi.

  ENDLOOP.

  SORT gt_equi BY datab DESCENDING equnr.

ENDFORM.                    " select_equipments

*eject
*&---------------------------------------------------------------------*
*&      Form  output_list_equi
*&---------------------------------------------------------------------*
*       Output the equipment list
*----------------------------------------------------------------------*
FORM output_list_equi.

*.. Local variables
  DATA: ls_layout TYPE slis_layout_alv,
        ls_grid   TYPE lvc_s_glay,
        ls_events TYPE slis_alv_event.

  DATA: lt_events TYPE slis_t_event,
        lt_event_exits TYPE slis_t_event_exit,
        lt_fieldcat TYPE slis_t_fieldcat_alv.

*.. Fill events
  REFRESH lt_events.
  ls_events-name = 'USER_COMMAND'.
  ls_events-form = 'USER_COMMAND_EQUI'.
  APPEND ls_events TO lt_events.
  ls_events-name = 'PF_STATUS_SET'.
  ls_events-form = 'PF_STATUS_SET_EQUI'.
  APPEND ls_events TO lt_events.
  ls_events-name = 'TOP_OF_PAGE'.
  ls_events-form = 'TOP_OF_PAGE_EQUI'.
  APPEND ls_events TO lt_events.
  ls_events-form = ls_events-name = 'END_OF_LIST'.
  APPEND ls_events TO lt_events.

*.. Define layout
  CLEAR ls_layout.
  ls_layout-get_selinfos      = gc_charx.
  ls_layout-colwidth_optimize = gc_charx.
  ls_layout-detail_popup      = gc_charx.
  ls_layout-no_keyfix         = gc_charx.
  ls_layout-info_fieldname    = 'ZZCOL'.

*.. Define grid settings
* ls_grid-coll_end_l = gc_charx.

*.. Prepare field catalog
  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'YAM_P057_EQUI'
      i_client_never_display = 'X'
    CHANGING
      ct_fieldcat            = lt_fieldcat
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*.. Call ALV grid output
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program = 'YAM_AUTO_INSTALL_EQUI'
      i_structure_name   = 'YAM_P057_EQUI'
      i_grid_settings    = ls_grid
      is_layout          = ls_layout
      i_save             = 'A'
      it_fieldcat        = lt_fieldcat
      it_events          = lt_events
    TABLES
      t_outtab           = gt_equi
    EXCEPTIONS
      program_error      = 1
      OTHERS             = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " output_list_equi

*eject
*&---------------------------------------------------------------------*
*&      Form  output_list_inst
*&---------------------------------------------------------------------*
*       Output the results of the queries launched towards floc's
*----------------------------------------------------------------------*
FORM output_list_inst.

*.. Local variables
  DATA: ls_layout TYPE slis_layout_alv,
        ls_grid   TYPE lvc_s_glay,
        ls_events TYPE slis_alv_event.

  DATA: lt_events TYPE slis_t_event,
        lt_event_exits TYPE slis_t_event_exit,
        lt_fieldcat TYPE slis_t_fieldcat_alv.

*.. Fill events
  REFRESH lt_events.
  ls_events-name = 'USER_COMMAND'.
  ls_events-form = 'USER_COMMAND_INST'.
  APPEND ls_events TO lt_events.
  ls_events-name = 'PF_STATUS_SET'.
  ls_events-form = 'PF_STATUS_SET_INST'.
  APPEND ls_events TO lt_events.
  ls_events-name = 'TOP_OF_PAGE'.
  ls_events-form = 'TOP_OF_PAGE_INST'.
  APPEND ls_events TO lt_events.
*  ls_events-name = 'HOTSPOT_CLICK'.
*  ls_events-form = 'HOTSPOT_CLICK_INST'.
*  APPEND ls_events TO lt_events.

*.. Define layout
  CLEAR ls_layout.
  ls_layout-get_selinfos      = gc_charx.
  ls_layout-colwidth_optimize = gc_charx.
  ls_layout-detail_popup      = gc_charx.
  ls_layout-no_keyfix         = gc_charx.
*  ls_layout-key_hotspot       = gc_charx.
*  ls_layout-hotspot_fieldname = 'TPLNR'.
  ls_layout-no_min_linesize   = gc_charx.
  ls_layout-info_fieldname    = 'ZZCOL'.

*.. Prepare field catalog
  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'YAM_P057_FLOC'
      i_client_never_display = 'X'
    CHANGING
      ct_fieldcat            = lt_fieldcat
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*.. Call ALV grid output
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program    = 'YAM_AUTO_INSTALL_EQUI'
      i_structure_name      = 'YAM_P057_FLOC'
      i_screen_start_column = 10
      i_screen_end_column   = 150
      i_screen_start_line   = 10
      i_screen_end_line     = 30
      i_grid_settings       = ls_grid
      is_layout             = ls_layout
      i_save                = 'A'
      it_fieldcat           = lt_fieldcat
      it_events             = lt_events
    TABLES
      t_outtab              = gt_floc
    EXCEPTIONS
      program_error         = 1
      OTHERS                = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " output_list_inst

*eject
*&---------------------------------------------------------------------*
*&      Form  add_message_to_log
*&---------------------------------------------------------------------*
*       Add a generated message to the application log
*----------------------------------------------------------------------*
FORM add_message_to_log .

*.. Local variables
  DATA: ls_msg TYPE bal_s_msg.

  MOVE-CORRESPONDING syst TO ls_msg.
  CALL FUNCTION 'BAL_LOG_MSG_ADD'
    EXPORTING
*     I_LOG_HANDLE              =
      i_s_msg                   = ls_msg
*   IMPORTING
*     E_S_MSG_HANDLE            =
*     E_MSG_WAS_LOGGED          =
*     E_MSG_WAS_DISPLAYED       =
    EXCEPTIONS
      log_not_found             = 1
      msg_inconsistent          = 2
      log_is_full               = 3
      OTHERS                    = 4
            .
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*.. Flag log as having entries
  IF gv_log IS INITIAL.
    gv_log = gc_charx.
  ENDIF.

ENDFORM.                    " add_message_to_log

*eject
*&---------------------------------------------------------------------*
*&      Form  save_application_log
*&---------------------------------------------------------------------*
*       Save the current application log to database
*----------------------------------------------------------------------*
FORM save_application_log .

*.. Local variables
  DATA: lt_handle TYPE bal_t_logh.

  APPEND gv_handle TO lt_handle.

  CALL FUNCTION 'BAL_DB_SAVE'
    EXPORTING
*     I_CLIENT               = SY-MANDT
      i_in_update_task       = 'X'
      i_t_log_handle         = lt_handle
*   IMPORTING
*     E_NEW_LOGNUMBERS       =
    EXCEPTIONS
      log_not_found          = 1
      save_not_allowed       = 2
      numbering_error        = 3
      OTHERS                 = 4
            .
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  COMMIT WORK.

ENDFORM.                    " save_application_log
*&---------------------------------------------------------------------*
*&      Form  CREATE_FUNCLOC_CREATE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
" CREATE_FUNCLOC_CREATE
