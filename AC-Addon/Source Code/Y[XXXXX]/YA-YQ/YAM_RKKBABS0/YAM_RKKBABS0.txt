*&---------------------------------------------------------------------*
*& Report  RKKBABS0                                                    *
*&                                                                     *
*&---------------------------------------------------------------------*
*&
*MOD-001|18/09/2008|Geert Rutten|Multiple Plant Sel|CD1K943332 |001
*&
*&
*&---------------------------------------------------------------------*

REPORT  YAM_RKKBABS0.
INCLUDE LCOKOTYP.
TABLES:
    AUFK,
    AFPO,
    VBAP,                              "Kd-Auf positionen.
    COSP,
    TKA01,                                                     "914733
    T001W,                                                     "914733
    T399I,                                                     "914733
    T003O.                                                     "914733

data: begin of i_t001w occurs 0,
        werks  type werks_d,
      end   of i_t001w.


PARAMETERS:
     P_KOKRS  LIKE TKA01-KOKRS OBLIGATORY.

*    P_WERKS  LIKE AUFK-WERKS,   " Del MOD-001

* begin Insert MOD-001
 SELECT-OPTIONS: S_WERKS   FOR AUFK-werks.
* end Insert MOD-001

PARAMETERS:
     P_AUART  like aufk-auart.

SELECTION-SCREEN SKIP 1.

PARAMETERS:
     P_RESZT     LIKE LKO99-RESZEIT,
     P_RFCGRP    LIKE LKO99-RFCGRP.



SELECTION-SCREEN SKIP 1.

PARAMETERS:
     P_FAUF      AS CHECKBOX DEFAULT 'X',
     P_PMAUF     AS CHECKBOX DEFAULT 'X',
     P_KDAUF     NO-DISPLAY, "AS CHECKBOX default 'X',
     P_TESTM     AS CHECKBOX DEFAULT 'X'.

DATA: l_kokrs LIKE LKO99-kokrs.                                "914733
DATA:
     GD_LKO99 LIKE LKO99.

 GD_LKO99-KOKRS  = P_KOKRS.

* GD_LKO99-WERKS  = P_WERKS. "MOD-001


GD_LKO99-AUART  = P_AUART.
GD_LKO99-RESZEIT = P_RESZT.
GD_LKO99-RFCGRP = P_RFCGRP.
GD_LKO99-TESTLAUF  = P_TESTM.

GD_LKO99-INCL_FAUF = P_FAUF.
GD_LKO99-INCL_PMAUF = P_PMAUF.


* Begin Insert MOD-001

SELECT WERKS from T001W
  into corresponding fields of table i_t001w
  where werks IN S_WERKS.


if NOT s_werks-low is INITIAL.

LOOP AT i_t001w.
PERFORM  ftests.
ENDLOOP.
ELSE.
PERFORM ftests.
ENDIF.



FORM ftests.
  GD_LKO99-WERKS  = i_t001w-werks.
* End Insert MOD-001

* -->>BEGIN OF NOTE 914733--------------------------------------914733-*
* Before running through the complete process, first check, if all
* selection criteria entered in the initial screen do fulfill all
* requirements to avoid unexpected results
* Step 1: Check, if KOKRS exists in table TKA01...


  SELECT SINGLE * FROM TKA01 WHERE kokrs = GD_LKO99-KOKRS.
  IF NOT SY-subrc IS INITIAL.
     IF NOT SY-binpt IS INITIAL OR
        NOT SY-batch IS INITIAL.
        MESSAGE e118(CZ) WITH GD_LKO99-KOKRS.
     ELSE.
        MESSAGE i118(CZ) WITH GD_LKO99-KOKRS.
        EXIT.
     ENDIF.
  ENDIF.

* Step 2: Check, if WERKS exists in table T001W...
  IF NOT GD_LKO99-WERKS IS INITIAL.
     SELECT SINGLE * FROM T001W WHERE werks = GD_LKO99-WERKS.
     IF NOT SY-subrc IS INITIAL.
        IF NOT SY-binpt IS INITIAL OR
           NOT SY-batch IS INITIAL.
           MESSAGE e003(IW).
       ELSE.
           MESSAGE i003(IW).
           EXIT.
        ENDIF.
     ENDIF.
  ENDIF.



* Step 3: Check, if WERKS belongs to KOKRS...
  IF NOT GD_LKO99-WERKS IS INITIAL.
     CALL FUNCTION 'RM_KOKRS_TO_PLANT_FIND'
          EXPORTING
              WERKS           = GD_LKO99-WERKS
          IMPORTING
               E_KOKRS         = l_kokrs
          EXCEPTIONS
               BUKRS_NOT_FOUND = 01
               KOKRS_NOT_FOUND = 02.
     IF l_kokrs <> GD_LKO99-KOKRS.
        IF NOT SY-binpt IS INITIAL OR
           NOT SY-batch IS INITIAL.
           MESSAGE e509(KW) WITH GD_LKO99-WERKS.
        ELSE.
           MESSAGE i509(KW) WITH GD_LKO99-WERKS.
           EXIT.
        ENDIF.
     ENDIF.
  ENDIF.

* Step 4: If only PM-orders are concerned, WERKS must be a
* Planning Plant;...table T399I...
  IF NOT GD_LKO99-WERKS IS INITIAL AND
     NOT GD_LKO99-INCL_PMAUF IS INITIAL
     AND GD_LKO99-INCL_FAUF  IS INITIAL.
     SELECT SINGLE * FROM T399I WHERE iwerk = GD_LKO99-WERKS.
     IF NOT SY-subrc IS INITIAL.
        IF NOT SY-binpt IS INITIAL OR
           NOT SY-batch IS INITIAL.
           MESSAGE e006(IW).
        ELSE.
           MESSAGE i006(IW).
           EXIT.
        ENDIF.
     ENDIF.
  ENDIF.

* Step 5: Check, if AUART exists in T003O...
  IF NOT GD_LKO99-AUART IS INITIAL.
     SELECT SINGLE * FROM T003O WHERE auart = GD_LKO99-AUART.
     IF NOT SY-subrc IS INITIAL.
        IF NOT SY-binpt IS INITIAL OR
           NOT SY-batch IS INITIAL.
           MESSAGE e205(IW).
        ELSE.
           MESSAGE i205(IW).
           EXIT.
        ENDIF.
     ENDIF.
*    Step 5.1: If only COPP orders are selected, AUART must be '04'...
     IF GD_LKO99-INCL_PMAUF IS INITIAL AND NOT
        GD_LKO99-INCL_FAUF  IS INITIAL.
        SELECT SINGLE * FROM T003O WHERE auart = GD_LKO99-AUART
                                   AND   autyp = AUFTRAGSTYP-COPP.
        IF NOT SY-subrc IS INITIAL.
           IF NOT SY-binpt IS INITIAL OR
              NOT SY-batch IS INITIAL.
              MESSAGE e190(CO).
           ELSE.
              MESSAGE i190(CO).
              EXIT.
           ENDIF.
        ENDIF.
*    Step 5.2: If only PM orders are selected, AUART must be '30'...
     ELSEIF GD_LKO99-INCL_FAUF  IS INITIAL AND
        NOT GD_LKO99-INCL_PMAUF IS INITIAL.
        SELECT SINGLE * FROM T003O WHERE auart = GD_LKO99-AUART
                                   AND   autyp = AUFTRAGSTYP-INST.
        IF NOT SY-subrc IS INITIAL.
           IF NOT SY-binpt IS INITIAL OR
              NOT SY-batch IS INITIAL.
              MESSAGE e202(IW) WITH GD_LKO99-AUART.
           ELSE.
              MESSAGE i202(IW) WITH GD_LKO99-AUART.
              EXIT.
           ENDIF.
        ENDIF.
     ENDIF.
  ENDIF.
* <<--END OF NOTE 914733----------------------------------------914733-*

*PERFORM EXEC IN PROGRAM SAPLKO99
PERFORM EXEC IN PROGRAM SAPLZKO99
   USING
      GD_LKO99.
COMMIT WORK.


* Begin Insert MOD-001
ENDFORM.

* End Insert MOD-001
*Selection text£º
*P_AUART:        Order Type
*P_FAUF:        With production orders
*P_KOKRS:        Controlling area
*P_PMAUF:        With maintenance orders
*P_RESZT:        Residence time
*P_RFCGRP:        Server group
*P_TESTM:        Test run
*S_WERKS:        Plant
