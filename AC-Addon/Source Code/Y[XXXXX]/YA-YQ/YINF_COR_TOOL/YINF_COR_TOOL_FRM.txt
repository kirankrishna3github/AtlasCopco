*&---------------------------------------------------------------------*
*&  Include           YINF_COR_TOOL_FRM
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  Read_objects
*&---------------------------------------------------------------------*
*       Read custom objects
*----------------------------------------------------------------------*
FORM read_objects .

  DATA: lv_var1(50) TYPE c,
        lv_var2(50) TYPE c,
        lv_var3(50) TYPE c,
        lv_var4(50) TYPE c,
        lv_var5(50) TYPE c,
        lv_var6(50) TYPE c,
        lv_var7(20) TYPE c,
        lv_pgmna(20) TYPE c.


  CASE gc_option.

    WHEN p_table.
*     Read data for Tables
      SELECT tabname
             INTO TABLE gt_objt
             FROM dd02l
             WHERE tabname IN s_object
             AND   ( tabclass EQ 'TRANSP'
             OR      tabclass EQ 'CLUSTER'
             OR      tabclass EQ 'POOL' ).
      IF sy-subrc = 0.
        LOOP AT gt_objt INTO wa_objt.
*         System language
          SELECT SINGLE * FROM dd02t
                         WHERE tabname = wa_objt-object
                           AND ddlanguage = sy-langu.

          IF sy-subrc = 0.
            wa_objt-desc = dd02t-ddtext.
          ELSE.

*           English language
            SELECT SINGLE * FROM dd02t
                           WHERE tabname = wa_objt-object
                             AND ddlanguage = 'EN'.
            IF sy-subrc = 0.
              wa_objt-desc = dd02t-ddtext.
            ELSE.
*             Any Language
              SELECT SINGLE * FROM dd02t
                             WHERE tabname = wa_objt-object.
              IF sy-subrc = 0.
                wa_objt-desc = dd02t-ddtext.
              ENDIF.
            ENDIF.
          ENDIF.
          IF s_dev[] IS INITIAL.
            MODIFY gt_objt FROM wa_objt.
          ELSE.
            SELECT SINGLE devclass INTO wa_objt-dev
                                   FROM tadir
                                   WHERE devclass IN s_dev
                                     AND obj_name = wa_objt-object
                                     AND object = 'TABL'.
            IF sy-subrc = 0.
              MODIFY gt_objt FROM wa_objt.
            ELSE.
              DELETE gt_objt INDEX sy-tabix.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.

    WHEN p_stru.
*     Read data for Structures
      SELECT tabname
             INTO TABLE gt_objt
             FROM dd02l
             WHERE tabname IN s_object
             AND   ( tabclass EQ 'INTTAB'
             OR      tabclass EQ 'APPEND').
      IF sy-subrc = 0.
        LOOP AT gt_objt INTO wa_objt.
*         System language
          SELECT SINGLE * FROM dd02t
                         WHERE tabname = wa_objt-object
                           AND ddlanguage = sy-langu.

          IF sy-subrc = 0.
            wa_objt-desc = dd02t-ddtext.
          ELSE.

*           English language
            SELECT SINGLE * FROM dd02t
                           WHERE tabname = wa_objt-object
                             AND ddlanguage = 'EN'.
            IF sy-subrc = 0.
              wa_objt-desc = dd02t-ddtext.
            ELSE.
*             Any Language
              SELECT SINGLE * FROM dd02t
                             WHERE tabname = wa_objt-object.
              IF sy-subrc = 0.
                wa_objt-desc = dd02t-ddtext.
              ENDIF.
            ENDIF.
          ENDIF.

          IF s_dev[] IS INITIAL.
            MODIFY gt_objt FROM wa_objt.
          ELSE.
            SELECT SINGLE devclass INTO wa_objt-dev
                                   FROM tadir
                                   WHERE devclass IN s_dev
                                     AND obj_name = wa_objt-object
                                     AND object = 'TABL'.
            IF sy-subrc = 0.
              MODIFY gt_objt FROM wa_objt.
            ELSE.
              DELETE gt_objt INDEX sy-tabix.
            ENDIF.
          ENDIF.

        ENDLOOP.
      ENDIF.

    WHEN p_view.

*     Read data for Views
      SELECT tabname
             INTO TABLE gt_objt
             FROM dd02l
             WHERE tabname IN s_object
             AND   tabclass EQ 'VIEW'.
      IF sy-subrc = 0.
        LOOP AT gt_objt INTO wa_objt.
*         System language
          SELECT SINGLE * FROM dd02t
                         WHERE tabname = wa_objt-object
                           AND ddlanguage = sy-langu.

          IF sy-subrc = 0.
            wa_objt-desc = dd02t-ddtext.
          ELSE.

*           English language
            SELECT SINGLE * FROM dd02t
                           WHERE tabname = wa_objt-object
                             AND ddlanguage = 'EN'.
            IF sy-subrc = 0.
              wa_objt-desc = dd02t-ddtext.
            ELSE.
*             Any Language
              SELECT SINGLE * FROM dd02t
                             WHERE tabname = wa_objt-object.
              IF sy-subrc = 0.
                wa_objt-desc = dd02t-ddtext.
              ENDIF.
            ENDIF.
          ENDIF.


          IF s_dev[] IS INITIAL.
            MODIFY gt_objt FROM wa_objt.
          ELSE.
            SELECT SINGLE devclass INTO wa_objt-dev
                                   FROM tadir
                                   WHERE devclass IN s_dev
                                     AND obj_name = wa_objt-object
                                     AND object = 'VIEW'.
            IF sy-subrc = 0.
              MODIFY gt_objt FROM wa_objt.
            ELSE.
              DELETE gt_objt INDEX sy-tabix.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.

    WHEN p_trans.
*     Read data for Transactions
      SELECT tcode pgmna
             INTO TABLE gt_tran
             FROM tstc
             WHERE tcode IN s_object
             AND   pgmna NE space.
      IF sy-subrc = 0.
        LOOP AT gt_tran INTO wa_tran.
*         System language
          SELECT SINGLE * FROM tstct
                         WHERE tcode = wa_tran-object
                           AND sprsl = sy-langu.

          IF sy-subrc = 0.
            wa_tran-desc = tstct-ttext.
          ELSE.

*           English language
            SELECT SINGLE * FROM tstct
                           WHERE tcode = wa_tran-object
                             AND sprsl = 'EN'.
            IF sy-subrc = 0.
              wa_tran-desc = tstct-ttext.
            ELSE.
*             Any Language
              SELECT SINGLE * FROM tstct
                             WHERE tcode = wa_tran-object.
              IF sy-subrc = 0.
                wa_tran-desc = tstct-ttext.
              ENDIF.
            ENDIF.
          ENDIF.
*         read data for development class
          IF s_dev[] IS INITIAL.
            MODIFY gt_tran FROM wa_tran.
          ELSE.
            SELECT SINGLE devclass INTO wa_tran-dev
                                   FROM tadir
                                   WHERE devclass IN s_dev
                                     AND obj_name = wa_tran-object
                                     AND object = 'TRAN'.
            IF sy-subrc = 0.
              MODIFY gt_tran FROM wa_tran.
            ELSE.
              DELETE gt_tran INDEX sy-tabix.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.

    WHEN p_ptrans.
*     Read data for Parameter Transactions
      SELECT tcode
             INTO TABLE gt_tran
             FROM tstc
             WHERE tcode IN s_object
             AND   pgmna EQ space.
      IF sy-subrc = 0.
        LOOP AT gt_tran INTO wa_tran.
*         Read Texts
*         System language
          SELECT SINGLE * FROM tstct
                         WHERE tcode = wa_tran-object
                           AND sprsl = sy-langu.

          IF sy-subrc = 0.
            wa_tran-desc = tstct-ttext.
          ELSE.

*           English language
            SELECT SINGLE * FROM tstct
                           WHERE tcode = wa_tran-object
                             AND sprsl = 'EN'.
            IF sy-subrc = 0.
              wa_tran-desc = tstct-ttext.
            ELSE.
*             Any Language
              SELECT SINGLE * FROM tstct
                             WHERE tcode = wa_tran-object.
              IF sy-subrc = 0.
                wa_tran-desc = tstct-ttext.
              ENDIF.
            ENDIF.
          ENDIF.

*         Read the program name.
          SELECT SINGLE * FROM tstcp
                         WHERE tcode = wa_tran-object.
          IF sy-subrc = 0.
            SPLIT tstcp-param AT ';'
               INTO lv_var1 lv_var2 lv_var3 lv_var4 lv_var5 lv_var6.
            IF tstcp-param CS 'SM30' OR
               tstcp-param CS 'SM34'.
*           Read Program name and type
              IF NOT lv_var1 IS INITIAL.
                IF lv_var1 CS 'NAME'.
                  SPLIT lv_var1 AT '='
                     INTO lv_var7 lv_pgmna.
                  IF NOT lv_pgmna IS INITIAL.
                    wa_tran-pgmna = lv_pgmna.
                  ENDIF.
                ELSE.
                  CLEAR: lv_var5, lv_var6.
                  SPLIT lv_var1 AT '='
                      INTO lv_var5 lv_var6.
                  IF NOT lv_var6 IS INITIAL.
                    wa_tran-type = lv_var6.
                  ENDIF.
                ENDIF.

                IF NOT lv_var2  IS INITIAL.
                  IF lv_var2 CS 'NAME'.
                    SPLIT lv_var2 AT '='
                       INTO lv_var7 lv_pgmna.
                    IF NOT lv_pgmna IS INITIAL.
                      wa_tran-pgmna = lv_pgmna.
                    ENDIF.
                  ELSE.
                    CLEAR: lv_var5, lv_var6.
                    SPLIT lv_var2 AT '='
                        INTO lv_var5 lv_var6.
                    IF NOT lv_var6 IS INITIAL.
                      wa_tran-type = lv_var6.
                    ENDIF.
                  ENDIF.

                ENDIF.

              ENDIF.
*
            ELSE.

*           Read program type
              IF NOT lv_var1 IS INITIAL.
                CLEAR: lv_var5, lv_var6.
                SPLIT lv_var1 AT '='
                      INTO lv_var5 lv_var6.
              ENDIF.
              IF NOT lv_var6 IS INITIAL.
                wa_tran-type = lv_var6.
              ENDIF.

*           Read Program name
              IF NOT lv_var2 IS INITIAL.
                SPLIT lv_var2 AT '='
                      INTO lv_var7 lv_pgmna.
              ENDIF.

              IF NOT lv_pgmna IS INITIAL.
                wa_tran-pgmna = lv_pgmna.
              ENDIF.

            ENDIF.
          ENDIF.

*         read data for the development class
          IF s_dev[] IS INITIAL.
            MODIFY gt_tran FROM wa_tran.
          ELSE.
            SELECT SINGLE devclass INTO wa_tran-dev
                                   FROM tadir
                                   WHERE devclass IN s_dev
                                     AND obj_name = wa_tran-object
                                     AND object = 'TRAN'.
            IF sy-subrc = 0.
              MODIFY gt_tran FROM wa_tran.
            ELSE.
              DELETE gt_tran INDEX sy-tabix.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.

    WHEN p_messg.

*     Read data for Messages
      SELECT DISTINCT arbgb
             INTO TABLE gt_objt
             FROM t100a
             WHERE arbgb IN s_object.

      IF sy-subrc = 0.
        LOOP AT gt_objt INTO wa_objt.
*         System language
          SELECT SINGLE * FROM t100a
                         WHERE arbgb = wa_objt-object
                           AND masterlang = sy-langu.

          IF sy-subrc = 0.
            wa_objt-desc = t100a-stext.
          ELSE.

*           English language
            SELECT SINGLE * FROM t100a
                           WHERE arbgb = wa_objt-object
                             AND masterlang = 'EN'.
            IF sy-subrc = 0.
              wa_objt-desc = t100a-stext.
            ELSE.
*             Any Language
              SELECT SINGLE * FROM t100a
                             WHERE arbgb = wa_objt-object.
              IF sy-subrc = 0.
                wa_objt-desc = t100a-stext.
              ENDIF.
            ENDIF.
          ENDIF.
*         read data for the development class
          IF s_dev[] IS INITIAL.
            MODIFY gt_objt FROM wa_objt.
          ELSE.
            SELECT SINGLE devclass INTO wa_objt-dev
                                   FROM tadir
                                   WHERE devclass IN s_dev
                                     AND obj_name = wa_objt-object
                                     AND object = 'MSAG'.
            IF sy-subrc = 0.
              MODIFY gt_objt FROM wa_objt.
            ELSE.
              DELETE gt_objt INDEX sy-tabix.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.

    WHEN p_match.

*     read data for match codes
      SELECT DISTINCT mconame
                 INTO TABLE gt_objt
                 FROM dd24s
                 WHERE mconame IN s_object.
      IF sy-subrc = 0.
        LOOP AT gt_objt INTO wa_objt.
*         System language
          SELECT SINGLE * FROM dd20t
                         WHERE mconame = wa_objt-object
                           AND ddlanguage = sy-langu.

          IF sy-subrc = 0.
            wa_objt-desc = dd20t-mctext.
          ELSE.

*           English language
            SELECT SINGLE * FROM dd20t
                           WHERE mconame = wa_objt-object
                             AND ddlanguage = 'EN'.
            IF sy-subrc = 0.
              wa_objt-desc = dd20t-mctext.
            ELSE.
*             Any Language
              SELECT SINGLE * FROM dd20t
                             WHERE mconame = wa_objt-object.
              IF sy-subrc = 0.
                wa_objt-desc = dd20t-mctext.
              ENDIF.
            ENDIF.
          ENDIF.
*         read data for the development class
          IF s_dev[] IS INITIAL.
            MODIFY gt_objt FROM wa_objt.
          ELSE.
            SELECT SINGLE devclass INTO wa_objt-dev
                                   FROM tadir
                                   WHERE devclass IN s_dev
                                     AND obj_name = wa_objt-object
                                     AND object = 'MCOB'.
            IF sy-subrc = 0.
              MODIFY gt_objt FROM wa_objt.
            ELSE.
              DELETE gt_objt INDEX sy-tabix.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.

    WHEN p_domain.

*     read data for Domains
      SELECT domname
              INTO TABLE gt_objt
              FROM dd01l
             WHERE domname IN s_object.
      IF sy-subrc = 0.
        LOOP AT gt_objt INTO wa_objt.
*         System language
          SELECT SINGLE * FROM dd01t
                         WHERE domname = wa_objt-object
                           AND ddlanguage = sy-langu.

          IF sy-subrc = 0.
            wa_objt-desc = dd01t-ddtext.
          ELSE.

*           English language
            SELECT SINGLE * FROM dd01t
                           WHERE domname = wa_objt-object
                             AND ddlanguage = 'EN'.
            IF sy-subrc = 0.
              wa_objt-desc = dd01t-ddtext.
            ELSE.
*             Any Language
              SELECT SINGLE * FROM dd01t
                             WHERE domname = wa_objt-object.
              IF sy-subrc = 0.
                wa_objt-desc = dd01t-ddtext.
              ENDIF.
            ENDIF.
          ENDIF.
*         read data for the development class
          IF s_dev[] IS INITIAL.
            MODIFY gt_objt FROM wa_objt.
          ELSE.
            SELECT SINGLE devclass INTO wa_objt-dev
                                   FROM tadir
                                   WHERE devclass IN s_dev
                                     AND obj_name = wa_objt-object
                                     AND object = 'DOMA'.
            IF sy-subrc = 0.
              MODIFY gt_objt FROM wa_objt.
            ELSE.
              DELETE gt_objt INDEX sy-tabix.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.

    WHEN p_dtel.

*     read data for Data elements
      SELECT rollname
              INTO TABLE gt_objt
              FROM dd04l
             WHERE rollname IN s_object.
      IF sy-subrc = 0.
        LOOP AT gt_objt INTO wa_objt.
*         System language
          SELECT SINGLE * FROM dd04t
                         WHERE rollname = wa_objt-object
                           AND ddlanguage = sy-langu.

          IF sy-subrc = 0.
            wa_objt-desc = dd04t-ddtext.
          ELSE.

*           English language
            SELECT SINGLE * FROM dd04t
                           WHERE rollname = wa_objt-object
                             AND ddlanguage = 'EN'.
            IF sy-subrc = 0.
              wa_objt-desc = dd04t-ddtext.
            ELSE.
*             Any Language
              SELECT SINGLE * FROM dd04t
                             WHERE rollname = wa_objt-object.
              IF sy-subrc = 0.
                wa_objt-desc = dd04t-ddtext.
              ENDIF.
            ENDIF.
          ENDIF.
*         read data for the development class
          IF s_dev[] IS INITIAL.
            MODIFY gt_objt FROM wa_objt.
          ELSE.
            SELECT SINGLE devclass INTO wa_objt-dev
                                   FROM tadir
                                   WHERE devclass IN s_dev
                                     AND obj_name = wa_objt-object
                                     AND object = 'DTEL'.
            IF sy-subrc = 0.
              MODIFY gt_objt FROM wa_objt.
            ELSE.
              DELETE gt_objt INDEX sy-tabix.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.

    WHEN p_sform.
*     read data for smart forms
      SELECT sform
           INTO TABLE gt_objt
           FROM tnapr
           WHERE sform IN s_object.
      IF sy-subrc = 0.
        LOOP AT gt_objt INTO wa_objt.
*         system language
          SELECT SINGLE * FROM stxfadmt
                         WHERE formname = wa_objt-object
                           AND langu = sy-langu.

          IF sy-subrc = 0.
            wa_objt-desc = stxfadmt-caption.
          ELSE.

*           English language
            SELECT SINGLE * FROM stxfadmt
                           WHERE formname = wa_objt-object
                             AND langu = 'EN'.
            IF sy-subrc = 0.
              wa_objt-desc = stxfadmt-caption.
            ELSE.
*             Any Language
              SELECT SINGLE * FROM stxfadmt
                             WHERE formname = wa_objt-object.
              IF sy-subrc = 0.
                wa_objt-desc = stxfadmt-caption.
              ENDIF.
            ENDIF.
          ENDIF.
*         read data for the development class
          IF s_dev[] IS INITIAL.
            MODIFY gt_objt FROM wa_objt.
          ELSE.
            SELECT SINGLE devclass INTO wa_objt-dev
                                   FROM tadir
                                   WHERE devclass IN s_dev
                                     AND obj_name = wa_objt-object
                                     AND object = 'SSFO'.
            IF sy-subrc = 0.
              MODIFY gt_objt FROM wa_objt.
            ELSE.
              DELETE gt_objt INDEX sy-tabix.
            ENDIF.
          ENDIF.

        ENDLOOP.
      ENDIF.

    WHEN p_script.
*     read data for SAP scripts
      SELECT fonam
           INTO TABLE gt_objt
           FROM tnapr
           WHERE fonam IN s_object.
      IF sy-subrc = 0.
        LOOP AT gt_objt INTO wa_objt.
*         read data for the development class
          IF s_dev[] IS NOT INITIAL.
            SELECT SINGLE devclass INTO wa_objt-dev
                                   FROM tadir
                                   WHERE devclass IN s_dev
                                     AND obj_name = wa_objt-object
                                     AND object = 'FORM'.
            IF sy-subrc = 0.
              MODIFY gt_objt FROM wa_objt.
            ELSE.
              DELETE gt_objt INDEX sy-tabix.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.

    WHEN p_fm.
*     read data for Function modules
      SELECT funcname
           INTO TABLE gt_objt
           FROM tfdir
           WHERE funcname IN s_object.
      IF sy-subrc = 0.
        LOOP AT gt_objt INTO wa_objt.
*         system language
          SELECT SINGLE * FROM tftit
                         WHERE funcname = wa_objt-object
                           AND spras = sy-langu.

          IF sy-subrc = 0.
            wa_objt-desc = tftit-stext.
          ELSE.

*           English language
            SELECT SINGLE * FROM tftit
                           WHERE funcname = wa_objt-object
                             AND spras = 'EN'.
            IF sy-subrc = 0.
              wa_objt-desc = tftit-stext.
            ELSE.
*             Any Language
              SELECT SINGLE * FROM tftit
                             WHERE funcname = wa_objt-object.
              IF sy-subrc = 0.
                wa_objt-desc = tftit-stext.
              ENDIF.
            ENDIF.
          ENDIF.

          MODIFY gt_objt FROM wa_objt.

        ENDLOOP.
      ENDIF.
    WHEN p_fg.

* read data for fucntion groups

      SELECT area
           INTO TABLE gt_objt
           FROM tlibg
           WHERE area IN s_object.
      IF sy-subrc = 0.
        LOOP AT gt_objt INTO wa_objt.
*         system language
          SELECT SINGLE * FROM tlibt
                         WHERE area = wa_objt-object
                           AND spras = sy-langu.

          IF sy-subrc = 0.
            wa_objt-desc = tlibt-areat.
          ELSE.

*           English language
            SELECT SINGLE * FROM tlibt
                           WHERE area = wa_objt-object
                             AND spras = 'EN'.
            IF sy-subrc = 0.
              wa_objt-desc = tlibt-areat.
            ELSE.
*             Any Language
              SELECT SINGLE * FROM tlibt
                             WHERE area = wa_objt-object.
              IF sy-subrc = 0.
                wa_objt-desc = tlibt-areat.
              ENDIF.
            ENDIF.
          ENDIF.
*         read data for the development class
          IF s_dev[] IS INITIAL.
            MODIFY gt_objt FROM wa_objt.
          ELSE.
            SELECT SINGLE devclass INTO wa_objt-dev
                                   FROM tadir
                                   WHERE devclass IN s_dev
                                     AND obj_name = wa_objt-object
                                     AND object = 'FUGR'.
            IF sy-subrc = 0.
              MODIFY gt_objt FROM wa_objt.
            ELSE.
              DELETE gt_objt INDEX sy-tabix.
            ENDIF.
          ENDIF.


        ENDLOOP.
      ENDIF.

    WHEN p_enh.

*     read data for enhancements
      SELECT name
             INTO wa_enhc-exitincl
             FROM trdir
            WHERE name LIKE 'ZX%U__'
              AND subc EQ 'I'.
        READ REPORT wa_enhc-exitincl INTO gt_source.
        DELETE gt_source WHERE table_line IS INITIAL.
        DELETE gt_source WHERE table_line CP '#**'.
        CHECK NOT gt_source[] IS INITIAL.
        CONCATENATE 'L' wa_enhc-exitincl+1 INTO wa_enhc-fmincl.
        sy-tfill = STRLEN( wa_enhc-fmincl ).
        SUBTRACT 3 FROM sy-tfill.
        CONCATENATE 'SAP' wa_enhc-fmincl(sy-tfill) INTO wa_enhc-mainprog
.
        ADD 1 TO sy-tfill.
        w_inclnum = wa_enhc-fmincl+sy-tfill.
        SELECT SINGLE funcname
                 INTO wa_enhc-funcname
                 FROM tfdir
                WHERE pname = wa_enhc-mainprog
                  AND include = w_inclnum.
        SELECT SINGLE stext
                 FROM tftit
                 INTO wa_enhc-stext
                WHERE funcname = wa_enhc-funcname
                  AND spras = sy-langu.
        IF sy-subrc NE 0.
          SELECT SINGLE stext FROM tftit INTO wa_enhc-stext
           WHERE funcname = wa_enhc-funcname.
        ENDIF.
        SELECT SINGLE name
                 FROM modsap
                 INTO wa_enhc-enhancement
                WHERE member = wa_enhc-funcname.
        IF sy-subrc EQ 0.
          SELECT SINGLE name
                   FROM modact
                   INTO wa_enhc-project
                  WHERE member = wa_enhc-enhancement.
          IF sy-subrc EQ 0.
            SELECT SINGLE status
                     INTO wa_enhc-active
                     FROM modattr
                    WHERE name = wa_enhc-project.
          ENDIF.
        ENDIF.
        APPEND wa_enhc TO gt_enhc.
        CLEAR wa_enhc.
      ENDSELECT.

    WHEN p_cexits.

      SELECT obj_name INTO wa_uexit-include FROM adiraccess
       WHERE object = 'PROG'.
        REFRESH gt_source.
        READ REPORT wa_uexit-include INTO gt_source.
        DELETE gt_source WHERE table_line IS INITIAL.
        DELETE gt_source WHERE table_line CP '#**'.
        CHECK NOT gt_source[] IS INITIAL.
        LOOP AT gt_source.
          IF gt_source CS '"'.
            IF sy-fdpos GT 0.
              gt_source = gt_source(sy-fdpos).
            ELSE.
              CONTINUE.
            ENDIF.
          ENDIF.
          IF gt_source CP '*FORM# *USER*EXIT*'
          AND gt_source NS 'ENDFORM'
          AND gt_source NS 'PERFORM'.
            IF gt_source CS 'TABLES'
            OR gt_source CS 'CHANGING'
            OR gt_source CS 'USING'.
              gt_source = gt_source(sy-fdpos).
            ENDIF.
            IF gt_source CS 'FORM'.
              gt_source = gt_source+5.
            ENDIF.
            wa_uexit-perform = gt_source.
          ENDIF.
          IF wa_uexit-perform IS NOT INITIAL
          AND gt_source NS 'ENDFORM.'
          AND gt_source NE wa_uexit-perform.
            APPEND gt_source TO gt_temp.
          ENDIF.
          IF gt_source CS 'ENDFORM.'.
            IF gt_temp[] IS NOT INITIAL.
              TRANSLATE wa_uexit-perform USING '. '.
              TRANSLATE wa_uexit-perform TO UPPER CASE.
              APPEND wa_uexit TO gt_uexit.
            ENDIF.
            CLEAR: wa_uexit-perform, gt_temp[].
          ENDIF.
        ENDLOOP.
        CLEAR wa_uexit.
      ENDSELECT.

    WHEN p_badi.

*     read data for BADIs.
      SELECT imp_name imp_class
        INTO (wa_badi-impl, wa_badi-class)
        FROM sxc_class
       WHERE imp_name LIKE 'Z%'.
        SELECT SINGLE active INTO wa_badi-active FROM sxc_attr
         WHERE imp_name EQ wa_badi-impl.
        SELECT SINGLE exit_name INTO wa_badi-def FROM sxc_exit
         WHERE imp_name EQ wa_badi-impl.
        SELECT SINGLE text INTO wa_badi-itext FROM sxc_attrt
         WHERE imp_name EQ wa_badi-impl
           AND sprsl EQ sy-langu.
        SELECT SINGLE text INTO wa_badi-dtext FROM sxs_attrt
         WHERE exit_name EQ wa_badi-def
           AND sprsl EQ sy-langu.

        CONCATENATE wa_badi-class '%CM%' INTO w_class.
        SELECT name INTO wa_enhc-exitincl FROM trdir
         WHERE name LIKE w_class
           AND subc EQ 'I'.
          REFRESH gt_source.
          READ REPORT wa_enhc-exitincl INTO gt_source.
          DELETE gt_source WHERE table_line IS INITIAL.
          DELETE gt_source WHERE table_line CP '#**'.
          CHECK NOT gt_source[] IS INITIAL.
          LOOP AT gt_source.
            IF gt_source CS '"'.
              IF sy-fdpos GT 0.
                gt_source = gt_source(sy-fdpos).
              ELSE.
                CONTINUE.
              ENDIF.
            ENDIF.
            IF gt_source CP 'METHOD# *'.
              gt_source = gt_source+7.
              wa_badi-method = gt_source.
            ENDIF.
            IF wa_badi-method IS NOT INITIAL
            AND gt_source NS 'ENDMETHOD.'
            AND gt_source NE wa_badi-method.
              APPEND gt_source TO gt_temp.
            ENDIF.
            IF gt_source CS 'ENDMETHOD'.
              IF gt_temp[] IS NOT INITIAL.
                TRANSLATE wa_badi-method USING '. '.
                TRANSLATE wa_badi-method TO UPPER CASE.
                APPEND wa_badi TO gt_badi.
              ENDIF.
              CLEAR: wa_badi-method, gt_temp[].
            ENDIF.
          ENDLOOP.
          CLEAR wa_badi-class.
        ENDSELECT.
      ENDSELECT.

    WHEN p_prog.

*     Read data for Programs
      SELECT name subc
             INTO TABLE gt_prog
             FROM trdir
             WHERE name IN s_object.
      IF sy-subrc = 0.
        LOOP AT gt_prog INTO wa_prog.
*         System language
          SELECT SINGLE * FROM trdirt
                         WHERE name = wa_prog-name
                           AND sprsl = sy-langu.

          IF sy-subrc = 0.
            wa_prog-text = trdirt-text.
          ELSE.

*           English language
            SELECT SINGLE * FROM trdirt
                           WHERE name = wa_prog-name
                             AND sprsl = 'EN'.
            IF sy-subrc = 0.
              wa_prog-text = trdirt-text.
            ELSE.
*             Any Language
              SELECT SINGLE * FROM trdirt
                             WHERE name = wa_prog-name.
              IF sy-subrc = 0.
                wa_prog-text = trdirt-text.
              ENDIF.
            ENDIF.
          ENDIF.
*         Application type
          SELECT SINGLE appl FROM progdir
                             INTO wa_prog-appl
                            WHERE name = wa_prog-name.
*         Application test

          SELECT SINGLE atext FROM taplt
                              INTO wa_prog-ktext
                             WHERE appl = wa_prog-appl
                               AND sprsl = 'EN'.

          IF s_dev[] IS INITIAL.
            MODIFY gt_prog FROM wa_prog.
          ELSE.
            SELECT SINGLE devclass INTO wa_prog-dev
                                   FROM tadir
                                   WHERE devclass IN s_dev
                                     AND obj_name = wa_prog-name
                                     AND object = 'PROG'.
            IF sy-subrc = 0.
              MODIFY gt_prog FROM wa_prog.
            ELSE.
              DELETE gt_prog INDEX sy-tabix.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.


  ENDCASE.

ENDFORM.                    " Read_objects
*&---------------------------------------------------------------------*
*&      Form  display_objects
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM display_objects .
  DATA : f_variant TYPE disvariant-variant,
         li_events TYPE slis_t_event.

  IF p_disp = 'X'.
*   Build the catlog for the ALV.
    IF NOT gt_tran[] IS INITIAL.
      PERFORM build_catalog_tran.
    ELSEIF NOT gt_objt[] IS INITIAL.
      PERFORM build_catalog.
    ELSEIF NOT gt_enhc[] IS INITIAL.
      PERFORM build_catalog_enhc.
    ELSEIF NOT gt_uexit[] IS INITIAL.
      PERFORM build_catalog_uexit.
    ELSEIF NOT gt_badi[] IS INITIAL.
      PERFORM build_catalog_badi.
    ELSEIF NOT gt_prog[] IS INITIAL.
      PERFORM build_catalog_prog.
    ENDIF.


*   Build the layout for the ALV.
    PERFORM build_layout.
*   Perform the ALV grid display.
    IF NOT gt_tran[] IS INITIAL.
      PERFORM grid_display TABLES gt_tran
                                  li_events
                           USING  f_variant
                                  wa_layout.

    ELSEIF NOT gt_objt[] IS INITIAL.
      PERFORM grid_display TABLES gt_objt
                                  li_events
                            USING f_variant
                                  wa_layout.

    ELSEIF NOT gt_enhc[] IS INITIAL.
      PERFORM grid_display TABLES gt_enhc
                                  li_events
                            USING f_variant
                                  wa_layout.

    ELSEIF NOT gt_uexit[] IS INITIAL.
      PERFORM grid_display TABLES gt_uexit
                                  li_events
                            USING f_variant
                                  wa_layout.


    ELSEIF NOT gt_badi[] IS INITIAL.
      PERFORM grid_display TABLES gt_badi
                                  li_events
                            USING f_variant
                                  wa_layout.


    ELSEIF NOT gt_prog[] IS INITIAL.
      PERFORM grid_display TABLES gt_prog
                                  li_events
                            USING f_variant
                                  wa_layout.
    ENDIF.
  ENDIF.
* Download output
  IF p_down = 'X'.
    IF NOT gt_tran[] IS INITIAL.
      wa_tran-object = 'Transaction Code'.
      wa_tran-type   = 'Program type'.
      wa_tran-pgmna  = 'Program Name'.
      wa_tran-desc   = 'Description'.
*      wa_tran-dev    = ' Dev Class'.
      INSERT wa_tran INTO gt_tran INDEX 1.
      PERFORM download TABLES gt_tran.

    ELSEIF NOT gt_objt[] IS INITIAL.
      wa_objt-object = 'Object Name'.
      wa_objt-desc   = 'Description'.
*      wa_objt-dev    = 'Dev Class'.
      INSERT wa_objt INTO gt_objt INDEX 1.
      PERFORM download TABLES gt_objt.

    ELSEIF NOT gt_enhc[] IS INITIAL.
      wa_enhc-funcname    = 'Function Module'.
      wa_enhc-stext       = 'Short text'.
      wa_enhc-enhancement = 'Enhancement'.
      wa_enhc-project     = 'Project'.
      wa_enhc-active      = 'Active'.
      wa_enhc-exitincl    = 'Include'.
      wa_enhc-fmincl      = 'FM Include'.
      wa_enhc-mainprog    = 'Main program'.
      INSERT wa_enhc INTO gt_enhc INDEX 1.
      PERFORM download TABLES gt_enhc.
    ELSEIF NOT gt_uexit[] IS INITIAL.
      wa_uexit-include    = 'Include'.
      wa_uexit-perform    = 'Perform'.
      INSERT wa_uexit INTO gt_uexit INDEX 1.
      PERFORM download TABLES gt_uexit.
    ELSEIF NOT gt_badi[] IS INITIAL.
      wa_badi-impl        = 'Implementation'.
      wa_badi-itext       = 'Short text'.
      wa_badi-active      = 'Active'.
      wa_badi-def         = 'Definition'.
      wa_badi-dtext       = 'Short text'.
      wa_badi-class       = 'Class'.
      wa_badi-method      = 'Method'.
      INSERT wa_badi INTO gt_badi INDEX 1.
      PERFORM download TABLES gt_badi.
    ELSEIF NOT gt_prog[] IS INITIAL.
      wa_prog-name        = 'Program'.
      wa_prog-subc        = 'Type'.
      wa_prog-text        = 'Description'.
      wa_prog-appl        = 'Application'.
      wa_prog-ktext       = 'Application text'.
*      wa_prog-dev         = 'Dev class'.
      INSERT wa_prog INTO gt_prog INDEX 1.
      PERFORM download TABLES gt_prog.
    ENDIF.


  ENDIF.

ENDFORM.                    " display_objects
*&---------------------------------------------------------------------*
*&      Form  build_catalog
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM build_catalog .

  REFRESH gt_fieldcatalog.

  PERFORM fill_catalog USING:
            'OBJECT' 'GT_OBJT' '' 'Object Name' '',
            'DESC'   'GT_OBJT' '' 'Description' ''.
*            'DEV'   'GT_OBJT' '' 'Development class' ''.



ENDFORM.                    " build_catalog
*&---------------------------------------------------------------------*
*&      Form  build_layout
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM build_layout .

  CLEAR wa_layout.
* Layout
  wa_layout-colwidth_optimize = gc_x.
*  wa_layout-box_fieldname     = 'BOX'.
  wa_layout-box_tabname       = 'GT_OBJT'.


ENDFORM.                    " build_layout
*&---------------------------------------------------------------------*
*&      Form  build_catalog_tran
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM build_catalog_tran .
  REFRESH gt_fieldcatalog.

  PERFORM fill_catalog USING:
            'OBJECT' 'GT_TRAN' '' 'Object Name' '',
            'TYPE'   'GT_TRAN' '' 'Program Type' '',
            'PGMNA'  'GT_TRAN' '' 'Program Name' '',
            'DESC'   'GT_TRAN' '' 'Description' ''.
*            'DEV'    'GT_TRAN' '' 'Development class' ''.

ENDFORM.                    " build_catalog_tran
*&---------------------------------------------------------------------*
*&      Form  build_catalog_enhc
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM build_catalog_enhc .
  REFRESH gt_fieldcatalog.

  PERFORM fill_catalog USING:
            'FUNCNAME'      'GT_ENHC' '' 'Function module' '',
            'ENHANCEMENT'   'GT_ENHC' '' 'Enhancement' '',
            'PROJECT'       'GT_ENHC' '' 'Project' '',
            'ACTIVE'        'GT_ENHC' '' 'Active' '',
            'EXITINCL'      'GT_ENHC' '' 'Exit Include' '',
            'FMINCL'        'GT_ENHC' '' 'FM Include' '',
            'MAINPROG'      'GT_ENHC' '' 'Main Program' ''.


ENDFORM.                    " build_catalog_enhc

*---------------------------------------------------------------------*
*       FORM SET_STATUS                                               *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  EXTAB                                                         *
*---------------------------------------------------------------------*
FORM set_status USING extab TYPE slis_t_extab.

  SET PF-STATUS 'STANDARD'.

ENDFORM.                    "STATUS_SET
*&---------------------------------------------------------------------*
*&      Form  build_catalog_uexit
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM build_catalog_uexit .
  PERFORM fill_catalog USING:
            'INCLUDE' 'GT_UEXIT' '' 'Include' '',
            'PERFORM' 'GT_UEXIT' '' 'Perform' ''.

ENDFORM.                    " build_catalog_uexit
*&---------------------------------------------------------------------*
*&      Form  build_catalog_badi
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM build_catalog_badi .


  PERFORM fill_catalog USING:
            'IMPL'    'GT_BADI' '' 'Implimentation' '',
            'INEXT'   'GT_BADI' '' 'Text' '',
            'ACTIVE'  'GT_BADI' '' 'Active Flag' '',
            'DEF'     'GT_BADI' '' 'Definition' '',
            'DTEXT'   'GT_BADI' '' 'Text' '',
            'CLASS'   'GT_BADI' '' 'Class' '',
            'METHOD'  'GT_BADI' '' 'Method' ''.

ENDFORM.                    " build_catalog_badi
*&---------------------------------------------------------------------*
*&      Form  build_catalog_prog
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM build_catalog_prog .

  PERFORM fill_catalog USING:
            'NAME'  'GT_PROG' '' 'Program Name' '',
            'SUBC'  'GT_PROG' '' 'Type' '',
            'TEXT'  'GT_PROG' '' 'Description' '',
            'APPL'  'GT_PROG' '' 'Application' '',
            'KTEXT' 'GT_PROG' '' 'Application Text' ''.
*            'DEV'   'GT_PROG' '' 'Development class' ''.


ENDFORM.                    " build_catalog_prog
*&---------------------------------------------------------------------*
*&      Form  download
*&---------------------------------------------------------------------*
*       Download report
*----------------------------------------------------------------------*
FORM download  TABLES  p_gt_table.
  DATA: lv_file TYPE string.

  IF p_file IS INITIAL.
    MESSAGE s000(YINF_MSGMISC) WITH 'Enter file path to proceed'.
    LEAVE LIST-PROCESSING.
  ENDIF.
  lv_file = p_file.

  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename                = lv_file
      filetype                = 'ASC'
      write_field_separator   = 'X'
    TABLES
      data_tab                = p_gt_table
    EXCEPTIONS
      file_write_error        = 1
      no_batch                = 2
      gui_refuse_filetransfer = 3
      invalid_type            = 4
      no_authority            = 5
      unknown_error           = 6
      header_not_allowed      = 7
      separator_not_allowed   = 8
      filesize_not_allowed    = 9
      header_too_long         = 10
      dp_error_create         = 11
      dp_error_send           = 12
      dp_error_write          = 13
      unknown_dp_error        = 14
      access_denied           = 15
      dp_out_of_memory        = 16
      disk_full               = 17
      dp_timeout              = 18
      file_not_found          = 19
      dataprovider_exception  = 20
      control_flush_error     = 21
      OTHERS                  = 22.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
       WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.




ENDFORM.                    " download


*&-------------------------------------------------------------------*
*&      Form  GRID_DISPLAY
*&-------------------------------------------------------------------*
*       Display the output table thru grid display
*--------------------------------------------------------------------*
*  -->  P_GT_TABLE  Output internal table
*  -->  P_GT_EVENTS Events
*  <--  P_VARIAN    Variant
*--------------------------------------------------------------------*
FORM grid_display TABLES p_gt_table
                         p_gt_events TYPE slis_t_event
                   USING p_varian TYPE disvariant-variant
                         p_wa_layout           .

  gv_repid = sy-repid.
  gv_variant-variant = p_varian.
  gv_variant-report = sy-repid.	

* Clearing the global error field.
  CLEAR gv_error.

* Displaying the ALV grid.
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_pf_status_set = 'SET_STATUS'    "gc_set_status
      i_callback_program       = gv_repid
      i_grid_title             = gv_title
      is_layout                = p_wa_layout
      it_fieldcat              = gt_fieldcatalog[]
      it_sort                  = gt_sort[]
      it_filter                = gt_filter[]
      i_default                = c_x
      i_save                   = gc_a
      is_variant               = gv_variant
      is_print                 = gv_print
      it_events                = p_gt_events[]
    TABLES
      t_outtab                 = p_gt_table[]
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.

* Error handling for the ALV Grid.
  IF sy-subrc <> 0.
    gv_error = 'X'.
    MESSAGE ID sy-msgid
            TYPE 'E'
            NUMBER sy-msgno
            WITH sy-msgv1
                 sy-msgv2
                 sy-msgv3
                 sy-msgv4
            INTO gv_msg.

  ENDIF.


ENDFORM.                    " GRID_DISPLAY

*&---------------------------------------------------------------------*
*&      Form  FILL_CATALOG
*&---------------------------------------------------------------------*
*      Fill the field catalog values
*----------------------------------------------------------------------*
FORM fill_catalog USING p_fieldname  TYPE slis_fieldname
                        p_reftabname TYPE slis_tabname
                        p_reffield   TYPE slis_fieldname
                        p_coltext    TYPE dd03p-scrtext_l
                        p_hotspot    TYPE c.

  DATA: lt_field TYPE slis_fieldcat_alv.
* Filling the field catalog values.
  lt_field-fieldname     = p_fieldname.
  lt_field-ref_tabname   = p_reftabname.
  lt_field-ref_fieldname = p_reffield.

  IF NOT p_coltext IS INITIAL.
    lt_field-seltext_l     = p_coltext.
    lt_field-seltext_m     = p_coltext.
    lt_field-seltext_s     = p_coltext.
    lt_field-reptext_ddic  = p_coltext.
  ENDIF.

* Setting the hotspot for the field.
  lt_field-hotspot       = p_hotspot.
  APPEND lt_field TO gt_fieldcatalog.

ENDFORM.                    " fill_catalog
