
* 470 600 FELAC0K023787 16.11.2004 popup texts are no more hard-coded
* 4.6C
* XRRL9CK055566  050601 Making PNP900 SLIN comnpliant
*                130900 Archive access screen handling added
*  VRMPH0K001124 170100 New code !
* L6BK025032 Removed text elements 090,091,092 and 093 line numbers 369,
*            370, 371 and 399


TYPES: t_py_org_fields LIKE pyorgfields.

*---------------------------------------------------------------------*
CLASS cgui_org DEFINITION  INHERITING FROM cgui .
*---------------------------------------------------------------------*
* handles the display of organisational sel-options on the
* ldb screen (in contrast to time selections).
  PUBLIC SECTION.
    CLASS-METHODS: class_constructor.
* customizing
*   CLASS-METHODS: get_org_fields_db  EXPORTING itab_org TYPE table
    CLASS-METHODS: get_org_fields_db                         "XRRK055566
                     EXPORTING itab_org TYPE standard table
                                                error TYPE i.


    METHODS: is_on_selscreen IMPORTING field TYPE c
                         EXPORTING is_on TYPE i.
*alle m#glichen felder
    METHODS: get_all_org_fields
*    EXPORTING itab_org TYPE table.                          "XRRK055566
     EXPORTING itab_org TYPE standard table.
* die zur Zeit angezeigten lesen
*   METHODS: get_org_fields  EXPORTING itab_org TYPE table.  "XRRK055566
    METHODS: get_org_fields  EXPORTING itab_org TYPE standard table.

* die zur Zeit angezeigten setzen
*   METHODS: set_org_fields  IMPORTING itab_org TYPE table.  "XRRK055566
    METHODS: set_org_fields  IMPORTING itab_org TYPE standard table.

* Archiv selection screen ON
    METHODS: set_org_fields_archive_on.

* Archiv selection screen OFF
    METHODS: set_org_fields_archive_off.

*Ask user about selection fields:
    METHODS: set_org_fields_gui.
*felder nach reportklasse
*    METHODS: read_rpclass_org_fields  IMPORTING reportname TYPE c.
  PRIVATE SECTION.

*1 all fields possilbe fields as listed in pyorgscreen
    CLASS-DATA:  org_all TYPE TABLE OF pyorgfields.

    CLASS-DATA:  wa_org_all LIKE LINE OF org_all.

*2 maximum allowed list of fields for the current report
    CLASS-DATA:  org_all_report TYPE TABLE OF pyorgfields.
    CLASS-DATA:  wa_org_all_report LIKE LINE OF org_all.

*3 all fields that are displayed at startup, user can get more via
*  popup*up to the org_all_report list.
    CLASS-DATA:  wa_org_current LIKE wa_org_all.
    CLASS-DATA:  org_current LIKE org_all.

*4 if archive is active, backup the previous selection
    CLASS-DATA:  wa_org_current_bkup LIKE wa_org_all.
    CLASS-DATA:  org_current_bkup LIKE org_all.

*5 texts                                            "FELAC0K023787
    CLASS-DATA  mv_text_pt1 type TEXTPOOL-ENTRY.
    CLASS-DATA  mv_text_pt2 type TEXTPOOL-ENTRY.
    CLASS-DATA  mv_text_pt3 type TEXTPOOL-ENTRY.
*    DATA org_selected LIKE dd03d-fieldname OCCURS 0 .

* read texts
    CLASS-METHODS: read_texts.                          "FELAC0K023787

ENDCLASS.

*---------------------------------------------------------------------*
*       CLASS nn IMPLEMENTATION
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
CLASS cgui_org IMPLEMENTATION.

*-----------------------------------*
  METHOD class_constructor.
*-----------------------------------*
    TYPES: d1 TYPE dfies.
    DATA: it_dfies  TYPE TABLE OF d1.
    DATA: wa_it_dfies LIKE LINE OF it_dfies.

    DATA: org_tmp LIKE org_all.
    DATA: wa_org_tmp LIKE wa_org_all.
    DATA: wa_dummy LIKE wa_org_all.

    DATA: org_all_db LIKE org_all.
    DATA: wa_all_db LIKE wa_org_all.

    DATA: it_rsel_info TYPE TABLE OF rsel_info.
    DATA: wa_rsel_info LIKE LINE OF  it_rsel_info.

    DATA: i TYPE i.
    DATA: rc TYPE i.

    DATA: lc_repcl type t599c_py-repcl.              "XRRK055566

* read texts
    call method read_texts.                          "FELAC0K023787

*   get report class                                 "XRRK055566
    call method get_reportclass importing get_reportclass = lc_repcl.


    CALL METHOD get_org_fields_db IMPORTING itab_org = org_all_db
                                            error = rc.

*    IF rc = 0.

* Schiefstand zw screen und ddic: wie ?
*zun#chst die TAB f¨¹r WPBP und RDIR einlesen
    CALL FUNCTION 'DDIF_FIELDINFO_GET'
         EXPORTING
              tabname        = 'PYORGSCREEN'
*         FIELDNAME      = ' '
*         LANGU          = SY-LANGU
*         LFIELDNAME     = ' '
*         ALL_TYPES      = ' '
*    IMPORTING
*         X030L_WA       =
*         DDOBJTYPE      =
*         DFIES_WA       =
      TABLES
             dfies_tab      = it_dfies "nun pyorgscreen !
*         FIXED_VALUES   =
        EXCEPTIONS
             not_found      = 1
             internal_error = 2
             OTHERS         = 3
              .

    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    LOOP AT it_dfies INTO wa_it_dfies.
      MOVE wa_it_dfies-fieldtext  TO wa_org_all-text.
      MOVE wa_it_dfies-tabname  TO wa_org_all-ddic_table.
      MOVE wa_it_dfies-rollname  TO wa_org_all-ddic_com_type.
      MOVE wa_it_dfies-fieldname  TO wa_org_all-ddic_com.
      APPEND wa_org_all TO org_all.
*screenname ! (brauche ich den ¨¹berhapt ?
    ENDLOOP.

*    IF my_ldb <> space.
*Read selections to get screen name
    CALL FUNCTION 'RS_REPORTSELECTIONS_INFO'
         EXPORTING
              report              = 'SAPDBPNP' "my_ldb   "ldb !
             default_values      = ' '
         TABLES
              field_info          = it_rsel_info
*             DEF_VALUES          =
        EXCEPTIONS
             no_selections       = 1
             report_not_existent = 2
             subroutine_pool     = 3
             OTHERS              = 4
              .
    IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

*FILTER the ones we need (PY* without PY0)
    LOOP AT it_rsel_info INTO  wa_rsel_info.
      IF wa_rsel_info+0(2) = 'PY' .
*         wa_rsel_info+2(1) <> '0' .    "noch zu renamenn
        wa_org_tmp-screenname = wa_rsel_info-name.

        SPLIT wa_rsel_info-dbfield AT '-' INTO    wa_org_tmp-ddic_table
                                                    wa_org_tmp-ddic_com.

        IF wa_org_tmp-ddic_table = 'PYORGSCREEN' .
          APPEND wa_org_tmp TO org_tmp.
        ENDIF.
      ENDIF.
    ENDLOOP.

*now: mix the tables:
* if field in ddic, not in selscreen -> no screenname but in org_all
* if field in sel, not in org_all list -> not in org_all -> stays dark
    LOOP AT org_all INTO wa_org_all.
      READ TABLE org_tmp WITH KEY ddic_com = wa_org_all-ddic_com
      INTO wa_org_tmp.
      IF sy-subrc <> 0.
                                       "error
      ENDIF.
      wa_org_all-screenname = wa_org_tmp-screenname.
      MODIFY org_all FROM wa_org_all.
    ENDLOOP.
*    ENDIF.                             "my_ldb

    DESCRIBE TABLE org_all_db LINES i.


* fill org_current
    IF i > 0.                          "es existiert ein customizing !
*     CLEAR wa_org_tmp. REFRESH org_tmp.                   "XRRK055566
      CLEAR wa_org_tmp. CLEAR org_tmp.
      LOOP AT org_all INTO wa_org_tmp.
        READ TABLE org_all_db TRANSPORTING NO FIELDS
        WITH KEY screenname = wa_org_tmp-screenname.
        IF sy-subrc = 0.
          APPEND wa_org_tmp TO org_tmp.
*Nachlesen von Info: first page ? -> org_current !
          SELECT SINGLE * FROM t599f_py INTO wa_dummy
*           WHERE slnam = wa_org_tmp-screenname         "XRRK055566
            WHERE repcl = lc_repcl
            and  slnam = wa_org_tmp-screenname
            AND  fpage = 'X'.
          IF sy-subrc = 0.
            APPEND wa_org_tmp TO org_current.
          ENDIF.                       "sy-sub2
        ENDIF.                         "sy-sub1
      ENDLOOP.
      org_all[] = org_tmp[].
    ELSE.
      org_current[] = org_all[].
    ENDIF.                             "i>0


*ORG_CURRENT Remark: IF a variant is used, the org_current structure
*will be overwritten at PBO and re-filled at PAI. This can not be done
*here since we can not access pyorgcur (the sel screen field used for
*storage) from here without sacryfing the encapsulation.

  ENDMETHOD.



*-----------------------------------*
  METHOD  get_all_org_fields.
*-----------------------------------*
* do test here
    itab_org[] = org_all[] .
  ENDMETHOD.

*-----------------------------------*
  METHOD: is_on_selscreen.
*-----------------------------------*
    is_on = 0.
    DATA dummy TYPE pyorgfields.
    READ TABLE org_current WITH KEY screenname = field INTO dummy.
    IF sy-subrc = 0.
      is_on = 1.
    ENDIF.
  ENDMETHOD.

*-----------------------------------*
  METHOD: set_org_fields.
*-----------------------------------*
* do test here

* ...
    DATA: wa_itab_org TYPE t_py_org_fields.

    CLEAR org_current.

    LOOP AT itab_org INTO wa_itab_org.
      READ TABLE org_all WITH KEY screenname = wa_itab_org-screenname
                                               INTO wa_org_current.
      IF sy-subrc <> 0.
        READ TABLE org_all WITH KEY ddic_com = wa_itab_org-ddic_com
                                                INTO wa_org_current.
      ENDIF.
      IF sy-subrc <> 0.
        READ TABLE org_all
        WITH KEY ddic_com_type = wa_itab_org-ddic_com_type
                                                INTO wa_org_current.
      ENDIF.

      IF sy-subrc = 0.
        APPEND wa_org_current TO org_current.
      ENDIF.
    ENDLOOP.

*  org_current[] = itab_org[].
  ENDMETHOD.
*-----------------------------------*
  METHOD: set_org_fields_archive_on.
*-----------------------------------*

loop at org_current into wa_org_current.
wa_org_current_bkup = wa_org_current.
append wa_org_current_bkup to org_current_bkup.
endloop.

*    org_current_bkup[] = org_current[].
    CLEAR org_current.
    READ TABLE org_all WITH KEY screenname = 'PYPERNR'
                                 INTO wa_org_current.
    APPEND wa_org_current TO org_current.

  ENDMETHOD.

*-----------------------------------*
  METHOD: set_org_fields_archive_off.
*-----------------------------------*

    if not org_current_bkup is  initial.
      "do only something if ...archive_on was called first
      org_current[] = org_current_bkup[].
      CLEAR org_current_bkup.
    endif.

  ENDMETHOD.

*-----------------------------------*
  METHOD: get_org_fields.
*-----------------------------------*
* do test here
    itab_org[] = org_current[].
  ENDMETHOD.


*-----------------------------------*
  METHOD: get_org_fields_db.
*-----------------------------------*
* do test here

*habe: reportname -> reportclasse, lese cust und f¨¹lle org_all und
*current

* rname aus ldb
* rclasse aus t599w / t599b
    DATA: wa_t599w TYPE t599w.

    DATA: wa_t599f_py TYPE t599f_py.
    TYPES ty_t599f_py TYPE t599f_py.
    DATA: it_t599f_py TYPE TABLE OF ty_t599f_py.

    DATA: wa_itab_org TYPE t_py_org_fields.


    data:lc_repcl type t599c_py-repcl.
*    DATA lc_pyct TYPE REF TO cgui_time.  "local class

*   create object lc_pyct.
    call method get_reportclass importing get_reportclass = lc_repcl.

*t599f_py repclass -> fields
    SELECT * FROM t599f_py INTO wa_t599f_py
     WHERE repcl = lc_repcl.
      wa_itab_org-screenname = wa_t599f_py-slnam.
      APPEND wa_itab_org TO itab_org[].
    ENDSELECT.
*  if sy-su
*    error = 0.
*  ELSE.
*    error = 1.                         "noch nicht benutzt!
*  ENDIF.
  ENDMETHOD.


*-----------------------------------*
  METHOD: set_org_fields_gui.
*-----------------------------------*
*pnp_ rp_pnp_seloption, dann fieldchoice
    DATA: rc TYPE i.


*angezeigt wird jeweils die erste Spalte
    CALL FUNCTION 'FIELD_CHOICE'
        EXPORTING
*           MAXFIELDS                 =
             titel1         = mv_text_pt1 "'Selektionsmoeglichkeiten'
             titel2         = mv_text_pt2 "'Selektionsfelder'
             popuptitel     = mv_text_pt3 "'Selektionsfelder auswaehlen'
*           NOTDELETEABLE             =
*           INFO_TEXT                 =
*           DYN_PUSHBUTTON_TEXT1      =
*           DYN_PUSHBUTTON_TEXT2      =
*           DYN_PUSHBUTTON_TEXT3      =
*           NOSORT                    = ' '
              nomove                    = 'X'
*           INITIAL_SORT              = 0
        IMPORTING
             return_code               = rc

         TABLES
              fieldtabin                = org_all
              selfields                 = org_current
*           EXCEPT_TAB                =
*      EXCEPTIONS
*           NO_TAB_FIELD_INPUT        = 1
*           TO_MANY_SELFIELDS_ENTRIES = 2
*           OTHERS                    = 3
              .
    IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
    IF sy-subrc <> 0.
*   internal error: should never occure
      MESSAGE i016(pn)
             WITH 'Internal Error: FIELD_CHOICE failed'.    "#EC NOTEXT
      EXIT.
    ENDIF.

    IF rc = 4.                         "CANCEL button was pressed
      EXIT.
    ENDIF.
  ENDMETHOD.
*-----------------------------------*
  METHOD read_texts.                                    "FELAC0K023787
*-----------------------------------*
    data lt_texts type table of textpool.
    data ls_text type textpool.
* read texts
    read textpool 'SAPLPNPPY' into lt_texts language sy-langu.
    if sy-subrc ne 0.
      read textpool 'SAPLPNPPY' into lt_texts language 'E'.
    endif.
    read table lt_texts into ls_text with key key = 'PT1'.
    mv_text_pt1 = ls_text-entry.
    read table lt_texts into ls_text with key key = 'PT2'.
    mv_text_pt2 = ls_text-entry.
    read table lt_texts into ls_text with key key = 'PT3'.
    mv_text_pt3 = ls_text-entry.

  endmethod.
ENDCLASS.
