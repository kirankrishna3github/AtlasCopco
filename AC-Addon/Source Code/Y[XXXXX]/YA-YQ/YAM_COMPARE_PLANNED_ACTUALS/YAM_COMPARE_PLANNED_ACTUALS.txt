*----------------------------------------------------------------------*
* PROGRAM ID           : YAM_COMPARE_PLANNED_ACTUALS                   *
* PROGRAM TITLE        : AM: Compare Planned and planned hours in SEO  *
* AUTHOR               : Marc Jacobs                                   *
* DATE                 : 05/11/2008                                    *
*                                                                      *
* CHANGE REQUEST NUMBER: CD1K9944375                                   *
*                                                                      *
*  Compare planned and actual hours of closed service jobs             *
*----------------------------------------------------------------------*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
* MOD. NO.|  DATE    | NAME                 |CORRNUMBER|CHANGE REF.    *
*----------------------------------------------------------------------*
* MOD-001 |2009.01.29|L. Mertens USG Innotiv|CD1K945932| CR0530        *
*      - possibility to create outputfile on application server        *
*----------------------------------------------------------------------*
* MOD-002 |30/03/2009|M.Jacobs              |CD1K947337|report-usage   *
*----------------------------------------------------------------------*
* MOD-003 |13/04/2012|L. Mertens USG Innotiv|CD1K971345| CR2500        *
************************************************************************

REPORT  yam_compare_planned_actuals MESSAGE-ID yam_re.

*.................. Tables definitions................................ *
TABLES: caufv,
        rihafvr.

*.................. ranges              .............................. *
RANGES: arbid_c FOR afru-arbid.        " id of work center (conf.)
*.................. Variable definitions.............................. *
TYPE-POOLS: slis.

TYPES: BEGIN OF ty_caufv.
        INCLUDE STRUCTURE yam_cr0418_plan_actu.
TYPES:  vaplz LIKE caufv-vaplz,
       END   OF ty_caufv.
* begin of insert MOD-001
TYPES: BEGIN OF ty_caufv_out.
        INCLUDE STRUCTURE yam_cr0418_plan_actu_file.
TYPES:  vaplz LIKE caufv-vaplz,
       END   OF ty_caufv_out.
* end of insert MOD-001

*.. Global variables

DATA: gt_caufv    TYPE STANDARD TABLE OF ty_caufv WITH HEADER LINE.
* begin of insert MOD-001
DATA: gt_caufv_out TYPE STANDARD TABLE OF ty_caufv_out WITH HEADER LINE.

DATA: g_directory(25) TYPE c VALUE '/var/load/xxx/UK/read/',
      g_ofile         LIKE /sapdmc/lsoinp-filename,
      g_ersda(14)     type c,                              " YYYYMMDDHHMMSS
      p_logsys        LIKE tbdlst-logsys.
* end of insert MOD-001

DATA: BEGIN OF gt_serv OCCURS 0,
       aufnr LIKE caufv-aufnr,
       bemot LIKE caufv-bemot,
       auart LIKE caufv-auart,
       objnr LIKE jest-objnr.
DATA: END   OF gt_serv.

DATA : gv_jest_chgnr   LIKE jest-chgnr.

DATA : wa_header  LIKE bapi_alm_order_header_e,
       wa_srvdata LIKE bapi_alm_order_srvdat_e.

DATA: BEGIN OF gt_operations OCCURS 100.
        INCLUDE STRUCTURE bapi_alm_order_operation_e.
DATA: END OF gt_operations.

DATA: BEGIN OF gt_partner OCCURS 100.
        INCLUDE STRUCTURE bapi_alm_order_partner.
DATA: END OF gt_partner.

DATA: BEGIN OF gt_plas OCCURS 0,
        plnty     LIKE plas-plnty,
        plnnr     LIKE plas-plnnr,
        plnal     LIKE plas-plnal,
        plnfl     LIKE plas-plnfl,
        plnkn     LIKE plas-plnkn,
        zaehl     LIKE plas-zaehl,
      END OF gt_plas.

DATA: BEGIN OF gt_plpo OCCURS 0,
        plnty     LIKE plas-plnty,
        plnnr     LIKE plas-plnnr,
        plnkn     LIKE plas-plnkn,
        zaehl     LIKE plas-zaehl,
        steus     LIKE plpo-steus,
        larnt     LIKE plpo-larnt,
        arbei     LIKE plpo-arbei,
        arbeh     LIKE plpo-arbeh,
        werks     LIKE plpo-werks,
      END OF gt_plpo.

DATA :  it_afru TYPE TABLE OF afru ,
        wa_afru TYPE afru.
DATA: gt_return TYPE STANDARD TABLE OF bapiret2.

DATA: gt_errmsg  TYPE TABLE OF bdcmsgcoll,
      wa_errmsg  LIKE LINE OF gt_errmsg.
DATA: i_bapiret2             TYPE STANDARD TABLE OF bapiret2.

DATA: lt_fieldcat TYPE slis_t_fieldcat_alv.

DATA:   BEGIN OF stat_tab OCCURS 0.    " Internal status setting table
        INCLUDE STRUCTURE jstat.                            "
DATA:   END   OF stat_tab.
DATA:   gv_werks  TYPE werks_d,
        g_vbtyp   LIKE vbak-vbtyp,
        gv_arbpl  TYPE arbpl,
        gv_plan   TYPE cms_dte_dec_13_3_crm,
        gv_plant  TYPE cms_dte_dec_13_3_crm,
        gv_hours  TYPE cms_dte_dec_13_3_crm,
        gv_prdha  TYPE prodh_d,
        gv_nrdays TYPE i,
        gv_answer TYPE c,
        gv_objid  LIKE crtx-objid,
        gv_datum  LIKE sy-datum,
        gv_numb_wrkcntr TYPE i.

DATA: BEGIN OF arbid_tab_c OCCURS 0,
        arbid LIKE crhd-objid,
        arbpl LIKE crhd-arbpl.
DATA: END OF arbid_tab_c.

* begin of insert MOD-003
DATA: g_variant          LIKE disvariant.
DATA: g_altern_act       TYPE flag.
DATA: g_selmod.                                "Selektionsmodus
DATA: selmod_d           VALUE 'D',            "Selektion aller Objekte dunkel
      selmod_0           VALUE '0'.            "Keine Selektion
DATA: g_repid            LIKE sy-repid.
DATA: gx_variant         LIKE disvariant.
DATA: g_variant_save     VALUE 'U'.

DATA:
   BEGIN OF g_feldlist,
     filler(10) VALUE 'OBJECT_TAB',
     s_field(21),                      "Sortierfeld
     g_sort_flag,                      "Liste bereits sortiert
     g_boundary LIKE sy-cucol,         "Bl#ttersplalte gesetzt
     g_opt_flag VALUE 'Y',             "Liste bereits optimiert
     g_var_flag,                       "Liste bereits gestarted ¨¹ber Var
END OF g_feldlist.
* end of insert MOD-003

*.. Global constants
CONSTANTS: c_i0046     LIKE jest-stat    VALUE 'I0046',     "closed
           c_x(1)      TYPE c            VALUE 'X',
           c_a(1)      TYPE c            VALUE 'A',
           c_charx     TYPE c            VALUE 'X',
           c_blank(3)  TYPE c            VALUE '   ',
* begin of insert MOD-001
           c_rec(15)   TYPE c            VALUE 'YAM_SC_PLAN_ACT',
           c_underscore(1) type c  value '_',               " Underscore
* begin of insert MOD-003
* end of insert MOD-001
           c_u                           VALUE 'U',
* end of insert MOD-003
           c_zsm5      LIKE caufv-auart  VALUE 'ZSM5',
           c_gmix(4)   TYPE c            VALUE 'GMIX',
           c_zco3      TYPE steus        VALUE 'ZCO3',
           c_zco4      TYPE steus        VALUE 'ZCO4',
           c_zam001    TYPE lstar        VALUE 'ZAM001',
           c_zam004    TYPE lstar        VALUE 'ZAM004',
           c_zam005    TYPE lstar        VALUE 'ZAM005',
           c_zam006    TYPE lstar        VALUE 'ZAM006',
           c_zam013    TYPE lstar        VALUE 'ZAM013',
           c_zam019    TYPE lstar        VALUE 'ZAM019',
           c_zam025    TYPE lstar        VALUE 'ZAM025',
           c_zam030    TYPE lstar        VALUE 'ZAM030'.

*.................. Layout selection screen........................... *
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-b01.
SELECT-OPTIONS:
  s_werki FOR rihafvr-werki OBLIGATORY,
  s_aufnr FOR caufv-aufnr.
PARAMETERS:
  p_idat3l LIKE caufv-idat3 OBLIGATORY,
  p_idat3h LIKE caufv-idat3 OBLIGATORY.
SELECT-OPTIONS :
 s_auart FOR caufv-auart,
 s_bemot FOR caufv-bemot,
 s_arbpl FOR rihafvr-iarbpl.
SELECTION-SCREEN END   OF BLOCK b1.

* begin of insert MOD-001
SELECTION-SCREEN SKIP.
SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE text-b02.
PARAMETERS:
  p_ofile as checkbox,
  p_init(1) type c default ' '.
SELECTION-SCREEN END   OF BLOCK b2.
* end of insert MOD-001

* begin of insert MOD-003
* list variant
SELECTION-SCREEN BEGIN OF BLOCK b3 WITH FRAME TITLE text-b03.
PARAMETERS: variant LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b3.

PARAMETERS:
  dy_selm DEFAULT '0' NO-DISPLAY,      " selection mode
  dy_tcode LIKE sy-tcode NO-DISPLAY,   " transaction
  p_ocall NO-DISPLAY.                  " 'X' => prog called from
" pm order

* end of insert MOD-003

*.................. Selection screen validations...................... *
AT SELECTION-SCREEN ON s_werki.

  LOOP AT s_werki.
    AUTHORITY-CHECK OBJECT 'I_IWERK'
             ID 'TCD'   FIELD sy-tcode
             ID 'IWERK' FIELD s_werki-low.

    IF sy-subrc NE 0.
*.... No authorization for plant
      MESSAGE e001(00) WITH text-e02 s_werki-low.
    ENDIF.
  ENDLOOP.

AT SELECTION-SCREEN ON p_idat3h.
  gv_answer = '1'.
  IF p_idat3h < p_idat3l.
    MESSAGE e001(00) WITH text-e03.
    gv_answer = '2'.
  ELSE.
* begin of insert MOD-001
   if sy-tcode = 'YAM_PLAN_ACTUAL'.
* end of insert MOD-001
    gv_nrdays = p_idat3h - p_idat3l.
    IF gv_nrdays >= 31.
      CALL FUNCTION 'POPUP_TO_DECIDE'
        EXPORTING
          defaultoption = '1'
          textline1     = text-p01
          textline2     = text-p02
          textline3     = text-p03
          text_option1  = 'Yes'
          text_option2  = 'No'
          titel         = 'Continue Report planned - Actual Hours ? '
        IMPORTING
          answer        = gv_answer.
    ENDIF.
* begin of insert MOD-001
   endif.
* end of insert MOD-001
  ENDIF.

* begin of insert MOD-001
AT SELECTION-SCREEN ON p_ofile.

  IF p_ofile = c_x and sy-tcode = 'YAM_PLAN_ACTUAL'.
*.. No authorization for creating outputfile
    MESSAGE e001(00) WITH text-e06.
  ENDIF.
* end of insert MOD-001

*.................. Main program...................................... *
INITIALIZATION.

* begin of insert MOD-001
  CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
    IMPORTING
      own_logical_system             = p_logsys
    EXCEPTIONS
      own_logical_system_not_defined = 1
      OTHERS                         = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
* end of insert MOD-001

* begin of insert MOD-003
* get variant for selection screen
  PERFORM variant_start_f16.

* initializes g_variant
  PERFORM variant_init_f14 USING '    ' '    ' '    '.

* fill variant with the default variant
  IF variant IS INITIAL.
    PERFORM get_default_variant_f14 USING variant.
  ENDIF.
* end of insert MOD-003

**.. Prepare field catalog
  PERFORM build_field_catlog CHANGING lt_fieldcat.

* begin of insert MOD-003
*----------------------------------------------------------------------*
* F4 help for list variant                                             *
*----------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR variant.

  PERFORM variant_inputhelp_f14 USING variant.
* end of insert MOD-003

AT SELECTION-SCREEN.

  REFRESH arbid_tab_c.
  REFRESH arbid_c.

* begin of insert MOD-003
* Take always default variant
  IF variant IS INITIAL.
    PERFORM get_default_variant_f14 USING variant.
  ENDIF.
* Correct Listvariant chosen ?
  PERFORM variant_existence_f14 USING variant.
* end of insert MOD-003

START-OF-SELECTION.

* begin of insertion MOD-001
*...................Transaction counter...............................*
  CALL METHOD ycl_statistics=>record_transaction .
* end of insertion MOD-002

  PERFORM get_arbid TABLES arbid_tab_c s_arbpl arbid_c
                    s_werki.
  IF gv_answer = 1.
*.. Select the relevant service order
    PERFORM select_service_orders .

* begin of insert MOD-001
    if p_ofile = c_x.
      perform output_file.
    else.
* end of insert MOD-001

*.. Output the ALV list with selected maintenance plans
    PERFORM output_list_serv.

* begin of insert MOD-001
    endif.
* end of insert MOD-001
  ELSE.
    MESSAGE i001(00) WITH text-w01.
  ENDIF.

*&---------------------------------------------------------------------*
*&      Form  select_service_orders
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM select_service_orders .

  REFRESH: gt_caufv,
           gt_serv.
* select order data

  SELECT aufnr objnr auart bemot vaplz
        INTO CORRESPONDING FIELDS OF TABLE gt_serv
        FROM caufv
        WHERE aufnr IN s_aufnr
        AND   werks IN s_werki
        AND   auart NE c_zsm5
        AND   auart IN s_auart
        AND   idat3 >= p_idat3l
        AND   idat3 <= p_idat3h
        AND   bemot IN s_bemot
        AND   vaplz IN s_arbpl .

  CLEAR gt_serv.

* check if closed
  IF NOT gt_serv[] IS INITIAL.
    LOOP AT gt_serv.
      SELECT SINGLE chgnr INTO gv_jest_chgnr
         FROM jest WHERE objnr EQ gt_serv-objnr
                     AND stat  EQ c_i0046
                     AND inact NE c_x.
      IF sy-subrc NE 0.
        DELETE gt_serv.
      ENDIF.
    ENDLOOP.
  ENDIF.

* get all the information
  LOOP AT gt_serv.

    CLEAR : gv_werks.

    CALL FUNCTION 'BAPI_ALM_ORDER_GET_DETAIL'
      EXPORTING
        number                 = gt_serv-aufnr
     IMPORTING
       es_header               = wa_header
       es_srvdata              = wa_srvdata
      TABLES
       et_partner              = gt_partner
       et_operations           = gt_operations
*       ET_COMPONENTS          =
*       ET_RELATIONS           =
*       ET_SRULES              =
*       ET_OLIST               =
*       ET_OPROL               =
*       ET_TEXTS               =
*       ET_TEXT_LINES          =
*       ET_PRTS                =
*       ET_COSTS_SUM           =
*       ET_COSTS_DETAILS       =
        return                 = gt_return.
*       EXTENSION_IN           =
*       EXTENSION_OUT          =        .

* fill internal table
    MOVE-CORRESPONDING gt_serv TO gt_caufv.
* customer number (sold to)
    LOOP AT gt_partner WHERE partn_role_old = 'AG'.
      gt_caufv-kunnr = gt_partner-partner_old.
      WRITE gt_caufv-kunnr TO gt_caufv-kunnr NO-ZERO.
    ENDLOOP.
* equipment
    gt_caufv-equnr = wa_header-equipment.
    WRITE gt_caufv-equnr TO gt_caufv-equnr NO-ZERO.
    SELECT SINGLE eqktx INTO gt_caufv-eqktx FROM v_equi
      WHERE equnr = wa_header-equipment.
* gac and pgc
    CLEAR gv_prdha.
    SELECT SINGLE prdha INTO gv_prdha FROM mara
      WHERE matnr = wa_header-material.
    gt_caufv-gac = gv_prdha+0(4).
    gt_caufv-pgc = gv_prdha+4(4).
* workcenter + description
    SORT gt_operations BY control_key work_cntr.
    CLEAR: gv_numb_wrkcntr, gv_arbpl, gv_objid.
    LOOP AT gt_operations.
      IF gt_operations-activity = '0010'.
        gt_caufv-arbpl = gt_operations-work_cntr.
        SELECT SINGLE objid INTO gv_objid FROM crhd
           WHERE objty = c_a
             AND arbpl = gt_caufv-arbpl.
        SELECT SINGLE ktext INTO gt_caufv-ktext FROM crtx
           WHERE objty = c_a
             AND objid = gv_objid
             AND spras = sy-langu.
      ENDIF.
      IF gt_operations-control_key = 'ZCO3'.
        IF gt_operations-work_cntr <> gv_arbpl.
          gv_numb_wrkcntr = gv_numb_wrkcntr + 1.
          gv_arbpl = gt_operations-work_cntr.
        ENDIF.
      ENDIF.
    ENDLOOP.
* more then 1 workcenter
    IF gv_numb_wrkcntr > 1.
      gt_caufv-more = 'X'.
    ENDIF.
* task list and task list counter
    gt_caufv-plnnr = wa_header-task_list_group.
    gt_caufv-plnal = wa_header-group_counter.
* description of task list

    SELECT SINGLE ktext werks INTO (gt_caufv-plantext, gv_werks)
       FROM plko
       WHERE plnty = c_a
         AND plnnr = wa_header-task_list_group
         AND plnal = wa_header-group_counter.

    IF sy-subrc = 0.
* workcenter(s)
      IF gv_werks = c_gmix.
* gmix task list
        REFRESH gt_plas.
*.... Select tasklist info
        SELECT plnkn plnty plnnr plnal plnfl zaehl
           INTO CORRESPONDING FIELDS OF TABLE gt_plas
           FROM plas
           WHERE plnty = c_a
             AND plnnr = wa_header-task_list_group
             AND plnal = wa_header-group_counter
             AND loekz = space.
* planned hours
        IF NOT gt_plas[] IS INITIAL.
          REFRESH gt_plpo.
          SELECT arbei arbeh steus werks
                 plnty plnnr plnkn zaehl
             INTO CORRESPONDING FIELDS OF TABLE gt_plpo
             FROM plpo
             FOR ALL ENTRIES IN gt_plas
             WHERE plnty = gt_plas-plnty
               AND plnnr = gt_plas-plnnr
               AND plnkn = gt_plas-plnkn
               AND loekz = space
               AND ( steus = c_zco3
                OR larnt = c_zam001 ).
          IF NOT gt_plpo[] IS INITIAL.
            LOOP AT gt_plpo.
              gt_caufv-planh = gt_caufv-planh + gt_plpo-arbei.
            ENDLOOP.
          ENDIF.
        ENDIF.
* planned travel hours
        LOOP AT gt_operations.
          IF ( gt_operations-control_key = c_zco3 AND
              gt_operations-acttype = c_zam001 ).
            gt_caufv-plant = gt_caufv-plant + gt_operations-work_activity.
          ENDIF.
        ENDLOOP.
        gt_caufv-plant = gt_caufv-plant - gt_caufv-planh.

* no gmix task list
      ELSE.

* planned hours
        LOOP AT gt_operations.
          IF ( gt_operations-control_key = c_zco3 AND
              gt_operations-acttype = c_zam001 ) OR
            ( gt_operations-control_key = c_zco4 AND
            gt_operations-acttype = c_zam025 ).
            gt_caufv-planh = gt_caufv-planh + gt_operations-work_activity.
          ENDIF.
        ENDLOOP.
* planned travel hours
      ENDIF.
    ENDIF.

    CLEAR : gv_plan, gv_plant.
* actual hours
    LOOP AT gt_operations WHERE control_key = c_zco3.
      REFRESH it_afru.
      SELECT * FROM afru INTO TABLE it_afru
        WHERE rueck  = gt_operations-conf_no
          AND learr <> c_zam019.
      IF NOT it_afru[] IS INITIAL.
        LOOP AT it_afru INTO wa_afru.
          CLEAR gv_hours.
          IF wa_afru-ismne = 'MIN'.
            gv_hours = wa_afru-ismnw / 60.
          ELSEIF wa_afru-ismne = 'HR'.
            gv_hours = wa_afru-ismnw.
          ELSEIF wa_afru-ismne = 'STD'.
            gv_hours = wa_afru-ismnw.
          ENDIF.
          IF wa_afru-learr = c_zam004 OR
             wa_afru-learr = c_zam005 OR
             wa_afru-learr = c_zam006 OR
             wa_afru-learr = c_zam013 OR
             wa_afru-learr = c_zam025 OR
             wa_afru-learr = c_zam030.
            IF wa_afru-stzhl IS INITIAL.
              gv_plant = gv_plant + gv_hours.
            ELSE.
              gv_plant = gv_plant + ( gv_hours * -1 ).
            ENDIF.
          ENDIF.
          IF wa_afru-stzhl IS INITIAL.
            gv_plan = gv_plan + gv_hours.
          ELSE.
            gv_plan = gv_plan + ( gv_hours * -1 ).
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDLOOP.
    gv_plan = gv_plan - gv_plant.

    gt_caufv-actualh = gv_plan.
    gt_caufv-actualt = gv_plant.

* total planned hours
    gt_caufv-plantot = gt_caufv-planh + gt_caufv-plant.
* total actual hours
    gt_caufv-actualtot = gt_caufv-actualh + gt_caufv-actualt.
* difference in hours
    gt_caufv-difh = gt_caufv-actualtot - gt_caufv-plantot.
* difference in percentage
    IF NOT gt_caufv-plantot IS INITIAL.
      gt_caufv-difpct = ( gt_caufv-actualtot / gt_caufv-plantot * 100 ) - 100.
    ENDIF.
* difference in labour hours
    gt_caufv-difl = gt_caufv-actualh - gt_caufv-planh.
* difference in travel hours
    gt_caufv-dift = gt_caufv-actualt - gt_caufv-plant.
* difference in labour hours percentage
    IF NOT gt_caufv-planh IS INITIAL.
      gt_caufv-diflpct = ( gt_caufv-actualh / gt_caufv-planh * 100 ) - 100.
    ENDIF.
* difference in travel hours percentage
    IF NOT gt_caufv-plant IS INITIAL.
      gt_caufv-diftpct = ( gt_caufv-actualt / gt_caufv-plant * 100 ) - 100.
    ENDIF.

    WRITE gt_caufv-aufnr TO gt_caufv-aufnr NO-ZERO.
    APPEND gt_caufv.
    CLEAR gt_caufv.

  ENDLOOP.

* sorting output-table
  SORT gt_caufv BY aufnr arbpl.

ENDFORM.                    "select_service_orders

*&---------------------------------------------------------------------*
*&      Form  output_list_serv
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM output_list_serv.

*.. Local variables
  DATA: ls_layout TYPE slis_layout_alv,
        ls_grid   TYPE lvc_s_glay,
        ls_events TYPE slis_alv_event.

  DATA: lt_events TYPE slis_t_event,
        lt_event_exits TYPE slis_t_event_exit.
*        lt_fieldcat TYPE slis_t_fieldcat_alv.

*.. Fill events
  REFRESH lt_events.
  ls_events-name = 'USER_COMMAND'.
  ls_events-form = 'USER_COMMAND_SERV'.
  APPEND ls_events TO lt_events.
  ls_events-name = 'PF_STATUS_SET'.
  ls_events-form = 'PF_STATUS_SET_SERV'.
  APPEND ls_events TO lt_events.
  ls_events-name = 'TOP_OF_PAGE'.
  ls_events-form = 'TOP_OF_PAGE_SERV'.
  APPEND ls_events TO lt_events.
*  ls_events-form = ls_events-name = 'END_OF_LIST'.
*  APPEND ls_events TO lt_events.

*.. Define layout
  CLEAR ls_layout.
  ls_layout-get_selinfos      = c_charx.
  ls_layout-colwidth_optimize = c_charx.
  ls_layout-detail_popup      = c_charx.
  ls_layout-box_fieldname     = 'SELKZ'.
  ls_layout-no_keyfix         = c_charx.
  ls_layout-info_fieldname    = 'ZZCOL'.

*.. Define grid settings
  ls_grid-coll_end_l = c_charx.

**.. Prepare field catalog
*  PERFORM build_field_catlog CHANGING lt_fieldcat.

*.. Call ALV grid output
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program = 'YAM_COMPARE_PLANNED_ACTUALS'
*      i_structure_name   = 'YAM_CR342_CONTR_MP'
*      i_grid_settings    = ls_grid
*      is_layout          = ls_layout
      i_save             = 'A'
      it_fieldcat        = lt_fieldcat
      it_events          = lt_events
      is_variant         = g_variant
    TABLES
      t_outtab           = gt_caufv
    EXCEPTIONS
      program_error      = 1
      OTHERS             = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    "output_list_cont_mplans
*&---------------------------------------------------------------------*
*&      Form  build_field_catlog
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->PT_FIELDCAT  text
*----------------------------------------------------------------------*
FORM build_field_catlog  CHANGING lt_fieldcat TYPE slis_t_fieldcat_alv.

  DATA : ls_fcat TYPE slis_fieldcat_alv.
*------------ Service Order--------------*
  ls_fcat-fieldname = 'AUFNR'.
  ls_fcat-seltext_l = 'Service Order'.
  ls_fcat-outputlen = '12'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ Sold to--------------*
  ls_fcat-fieldname = 'KUNNR'.
  ls_fcat-seltext_l = 'Sold to'.
  ls_fcat-outputlen = '10'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ Equipment--------------*
  ls_fcat-fieldname = 'EQUNR'.
  ls_fcat-seltext_l = 'Equipment'.
  ls_fcat-outputlen = '10'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ Equipment desc--------------*
  ls_fcat-fieldname = 'EQKTX'.
  ls_fcat-seltext_l = 'Equipment Description'.
  ls_fcat-outputlen = '30'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ Work Center --------------*
  ls_fcat-fieldname = 'ARBPL'.
  ls_fcat-seltext_l = 'Workcenter'.
  ls_fcat-outputlen = '10'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*--------Workcenter Description----------*
  ls_fcat-fieldname = 'KTEXT'.
  ls_fcat-seltext_l = 'Workcenter Description'.
  ls_fcat-outputlen = '25'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*-------- More workcenters ---------*
  ls_fcat-fieldname = 'MORE'.
  ls_fcat-seltext_l = 'More'.
  ls_fcat-outputlen = '4'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ GAC--------------*
  ls_fcat-fieldname = 'GAC'.
  ls_fcat-seltext_l = 'GAC'.
  ls_fcat-outputlen = '4'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ PGC --------------*
  ls_fcat-fieldname = 'PGC'.
  ls_fcat-seltext_l = 'PGC'.
  ls_fcat-outputlen = '4'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*---------- ACC Ind ----------*
  ls_fcat-fieldname = 'BEMOT'.
  ls_fcat-seltext_l = 'AI'.
  ls_fcat-outputlen = '2'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------Task list -------------*
  ls_fcat-fieldname = 'PLNNR'.
  ls_fcat-seltext_l = 'Task List'.
  ls_fcat-outputlen = '8'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ task list counter-------------*
  ls_fcat-fieldname = 'PLNAL'.
  ls_fcat-seltext_l = 'Cntr'.
  ls_fcat-outputlen = '4'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ Task list description-------------*
  ls_fcat-fieldname = 'PLANTEXT'.
  ls_fcat-seltext_l = 'Task List Description'.
  ls_fcat-outputlen = '25'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ Planned hours -------------*
  ls_fcat-fieldname = 'PLANH'.
  ls_fcat-seltext_l = 'Pl. Hours'.
  ls_fcat-outputlen = '15'.
  ls_fcat-no_zero   = 'X'.
  ls_fcat-emphasize = 'C100'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ Planned travel hours -------------*
  ls_fcat-fieldname = 'PLANT'.
  ls_fcat-seltext_l = 'Pl. Travel Hours'.
  ls_fcat-outputlen = '15'.
  ls_fcat-no_zero   = 'X'.
  ls_fcat-emphasize = 'C100'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ Planned total hours -------------*
  ls_fcat-fieldname = 'PLANTOT'.
  ls_fcat-seltext_l = 'Pl. Total Hours'.
  ls_fcat-outputlen = '15'.
  ls_fcat-no_zero   = 'X'.
  ls_fcat-emphasize = 'C100'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ Actual hours -------------*
  ls_fcat-fieldname = 'ACTUALH'.
  ls_fcat-seltext_l = 'Act. Hours'.
  ls_fcat-outputlen = '15'.
  ls_fcat-no_zero   = 'X'.
  ls_fcat-emphasize = 'C500'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ Actual travel hours -------------*
  ls_fcat-fieldname = 'ACTUALT'.
  ls_fcat-seltext_l = 'Act. Travel Hours'.
  ls_fcat-outputlen = '15'.
  ls_fcat-no_zero   = 'X'.
  ls_fcat-emphasize = 'C500'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ Actual total hours -------------*
  ls_fcat-fieldname = 'ACTUALTOT'.
  ls_fcat-seltext_l = 'Act. Total Hours'.
  ls_fcat-outputlen = '15'.
  ls_fcat-no_zero   = 'X'.
  ls_fcat-emphasize = 'C500'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ Difference in hours -------------*
  ls_fcat-fieldname = 'DIFL'.
  ls_fcat-seltext_l = 'Diff.Labour Hours'.
  ls_fcat-no_zero   = 'X'.
  ls_fcat-outputlen = '15'.
  ls_fcat-edit_mask = '==NUMCV'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ Difference in pct -------------*
  ls_fcat-fieldname = 'DIFLPCT'.
  ls_fcat-seltext_l = 'Diff.Labour %'.
  ls_fcat-outputlen = '12'.
  ls_fcat-no_sum    = 'X'.
  ls_fcat-no_zero   = 'X'.
  ls_fcat-edit_mask = '==NUMCV'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ Difference travel hours -------------*
  ls_fcat-fieldname = 'DIFT'.
  ls_fcat-seltext_l = 'Diff.Travel Hours'.
  ls_fcat-no_zero   = 'X'.
  ls_fcat-outputlen = '15'.
  ls_fcat-edit_mask = '==NUMCV'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ Difference in pct -------------*
  ls_fcat-fieldname = 'DIFTPCT'.
  ls_fcat-seltext_l = 'Diff.Travel %'.
  ls_fcat-outputlen = '12'.
  ls_fcat-no_sum    = 'X'.
  ls_fcat-no_zero   = 'X'.
  ls_fcat-edit_mask = '==NUMCV'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ Difference in hours -------------*
  ls_fcat-fieldname = 'DIFH'.
  ls_fcat-seltext_l = 'Diff.Total Hours'.
  ls_fcat-outputlen = '15'.
  ls_fcat-no_zero   = 'X'.
  ls_fcat-edit_mask = '==NUMCV'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.
*------------ Difference in pct -------------*
  ls_fcat-fieldname = 'DIFPCT'.
  ls_fcat-seltext_l = 'Diff.Total %'.
  ls_fcat-outputlen = '12'.
  ls_fcat-no_sum    = 'X'.
  ls_fcat-no_zero   = 'X'.
  ls_fcat-edit_mask = '==NUMCV'.
  APPEND ls_fcat TO lt_fieldcat.
  CLEAR ls_fcat.

ENDFORM.                    " build_field_catlog

*&---------------------------------------------------------------------*
*&      Form  user_command_serv
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->R_UCOMM      text
*      -->RS_SELFIELD  text
*----------------------------------------------------------------------*
FORM user_command_serv USING r_ucomm LIKE sy-ucomm
                        rs_selfield TYPE slis_selfield.

  CASE r_ucomm.

* display equipment
    WHEN 'EQUI'.
      READ TABLE gt_caufv INDEX rs_selfield-tabindex.
      IF sy-subrc = 0.
        gt_caufv-selkz = c_charx.
        MODIFY gt_caufv INDEX rs_selfield-tabindex.
      ENDIF.
      PERFORM display_equipment.
* display service order
    WHEN 'ORDE'.
      READ TABLE gt_caufv INDEX rs_selfield-tabindex.
      IF sy-subrc = 0.
        gt_caufv-selkz = c_charx.
        MODIFY gt_caufv INDEX rs_selfield-tabindex.
      ENDIF.
      PERFORM display_service_order.
* display time confirmations
    WHEN 'CONF'.
      READ TABLE gt_caufv INDEX rs_selfield-tabindex.
      IF sy-subrc = 0.
        gt_caufv-selkz = c_charx.
        MODIFY gt_caufv INDEX rs_selfield-tabindex.
      ENDIF.
      PERFORM time_confirmations.
  ENDCASE.

ENDFORM.                    "user_command_serv


*&---------------------------------------------------------------------*
*&      Form  pf_status_set_serv
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->RT_EXTAB   text
*----------------------------------------------------------------------*
FORM pf_status_set_serv USING rt_extab TYPE slis_t_extab.

  SET PF-STATUS 'YAM_SERV'.

ENDFORM.                    "pf_status_set_serv


*&---------------------------------------------------------------------*
*&      Form  top_of_page_cont
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM top_of_page_serv.

*.. Local variables
  DATA: lt_comment TYPE slis_t_listheader,
        ls_comment TYPE slis_listheader.

*.. Header
  ls_comment-typ  = 'H'.
  ls_comment-info = text-h00.
  APPEND ls_comment TO lt_comment.
  CLEAR ls_comment.

*.. Selection

  IF NOT s_werki IS INITIAL.
    ls_comment-typ  = 'S'.
    ls_comment-key  = text-h07.
    CONCATENATE s_werki-low s_werki-high INTO ls_comment-info SEPARATED
           BY space.
    APPEND ls_comment TO lt_comment.
    CLEAR ls_comment.
  ENDIF.

  IF NOT s_aufnr IS INITIAL.
    ls_comment-typ  = 'S'.
    ls_comment-key  = text-h02.
    CONCATENATE s_aufnr-low s_aufnr-high INTO ls_comment-info SEPARATED
           BY space.
    APPEND ls_comment TO lt_comment.
    CLEAR ls_comment.
  ENDIF.

  IF NOT p_idat3l IS INITIAL.
    ls_comment-typ  = 'S'.
    ls_comment-key  = text-h03.
    CONCATENATE p_idat3l p_idat3h INTO ls_comment-info SEPARATED
       BY space.
    APPEND ls_comment TO lt_comment.
    CLEAR ls_comment.
  ENDIF.

  IF NOT s_auart IS INITIAL.
    ls_comment-typ  = 'S'.
    ls_comment-key  = text-h04.
    CONCATENATE s_auart-low s_auart-high INTO ls_comment-info SEPARATED
           BY space.
    APPEND ls_comment TO lt_comment.
    CLEAR ls_comment.
  ENDIF.

  IF NOT s_bemot IS INITIAL.
    ls_comment-typ  = 'S'.
    ls_comment-key  = text-h05.
    CONCATENATE s_bemot-low s_bemot-high INTO ls_comment-info SEPARATED
           BY space.
    APPEND ls_comment TO lt_comment.
    CLEAR ls_comment.
  ENDIF.

  IF NOT s_arbpl IS INITIAL.
    ls_comment-typ  = 'S'.
    ls_comment-key  = text-h06.
    CONCATENATE s_arbpl-low s_arbpl-high INTO ls_comment-info SEPARATED
           BY space.
    APPEND ls_comment TO lt_comment.
    CLEAR ls_comment.
  ENDIF.

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      it_list_commentary = lt_comment.

ENDFORM.                    "top_of_page_serv



*&---------------------------------------------------------------------*
*&      Form  display_service_order
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM display_service_order.

  LOOP AT gt_caufv WHERE selkz EQ c_charx.
    SET PARAMETER ID 'ANR' FIELD gt_caufv-aufnr.
    CALL TRANSACTION 'IW33' AND SKIP FIRST SCREEN.
    CLEAR gt_caufv-selkz.
    MODIFY gt_caufv TRANSPORTING selkz.
    EXIT.
  ENDLOOP.
ENDFORM.                    "display_service_order

*&---------------------------------------------------------------------*
*&      Form  display_equipment
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM display_equipment.

  LOOP AT gt_caufv WHERE selkz EQ c_charx.
    SET PARAMETER ID 'EQN' FIELD gt_caufv-equnr.
    CALL TRANSACTION 'IE03' AND SKIP FIRST SCREEN.
    CLEAR gt_caufv-selkz.
    MODIFY gt_caufv TRANSPORTING selkz.
    EXIT.
  ENDLOOP.

ENDFORM.                    "display_equipment

*&---------------------------------------------------------------------*
*&      Form  time_confirmations
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM time_confirmations.

  DATA: seltab     TYPE TABLE OF rsparams,
      seltab_wa  LIKE LINE OF seltab.

  LOOP AT gt_caufv WHERE selkz EQ c_charx.
    gv_datum = sy-datum - 1500.
    REFRESH seltab.
    MOVE: 'AUFNR_O'  TO seltab_wa-selname,
          'S'      TO seltab_wa-kind,
          'I'      TO seltab_wa-sign,
          'EQ'     TO seltab_wa-option,
          gt_caufv-aufnr+2(10) TO seltab_wa-low.
    APPEND seltab_wa TO seltab.
    CLEAR seltab_wa.
    MOVE: 'ERSDA_C'  TO seltab_wa-selname,
          'S'      TO seltab_wa-kind,
          'I'      TO seltab_wa-sign,
          'BT'     TO seltab_wa-option,
          gv_datum TO seltab_wa-low,
          sy-datum TO seltab_wa-high.
    APPEND seltab_wa TO seltab.
    CLEAR seltab_wa.
    SUBMIT riafru20
    WITH SELECTION-TABLE seltab
    AND RETURN.
    CLEAR gt_caufv-selkz.
    MODIFY gt_caufv TRANSPORTING selkz.
    EXIT.
  ENDLOOP.
ENDFORM.                    "time_confirmations

*&---------------------------------------------------------------------*
*&      Form  get_arbid
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->ARBID_TAB  text
*      -->ARBPL      text
*      -->ARBID      text
*      -->WERKI      text
*----------------------------------------------------------------------*
FORM get_arbid TABLES arbid_tab STRUCTURE arbid_tab_c
                      arbpl STRUCTURE s_arbpl
                      arbid STRUCTURE arbid_c
                      werki STRUCTURE s_werki.

* read internal number of a work center -------------------------------*
  DESCRIBE TABLE arbpl LINES sy-tabix.
  IF NOT sy-tabix IS INITIAL.
    SELECT objid arbpl FROM crhd INTO TABLE arbid_tab
      WHERE arbpl IN arbpl
* begin of change MOD-009
*     AND werks EQ p_g_werki.
      AND werks IN werki.
* end of change MOD-009

*-- no work center found ----------------------------------------------*
    DESCRIBE TABLE arbid_tab LINES sy-tabix.
    IF sy-tabix IS INITIAL.
      MESSAGE s047(ih).
      STOP.
    ENDIF.

*-- too many work centers for select-----------------------------------*
    IF sy-tabix > 255.
      MESSAGE i103(ih).
      STOP.
    ENDIF.

*-- fill range for selection ------------------------------------------*
    arbid-option = 'EQ'.
    arbid-sign = 'I'.
    LOOP AT arbid_tab.
      arbid-low = arbid_tab-arbid.
      APPEND arbid.
    ENDLOOP.
    SORT arbid_tab.
  ENDIF.

ENDFORM.                               " GET_ARBID
*&---------------------------------------------------------------------*
*&      Form  OUTPUT_FILE                         " MOD-001
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM OUTPUT_FILE .

* In case there are structures with 'non-character' fields (C,N,D,T)
* these need to be converted before writing them to the outputfile
* fields were zeroes were taken away have to be changed
  loop at gt_caufv.
    move-corresponding gt_caufv to gt_caufv_out.
    move '00'         to gt_caufv_out-aufnr+0(2).
    move '0'          to gt_caufv_out-kunnr+0(1).
    move '0000000000' to gt_caufv_out-equnr+0(10).
    append gt_caufv_out.
    clear gt_caufv_out.
  endloop.

* Create outputfile
  REPLACE 'xxx' IN g_directory WITH p_logsys(3).

  if p_init = 'X'.
    CONCATENATE sy-datum sy-uzeit into g_ersda.
    CONCATENATE g_directory c_rec c_underscore g_ersda INTO g_ofile.
  else.
    CONCATENATE g_directory c_rec INTO g_ofile.
  endif.

  OPEN DATASET g_ofile FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.
  IF sy-subrc <> 0.
    WRITE: / text-e04, g_ofile.
    EXIT.
  ENDIF.

  loop at gt_caufv_out.
    transfer gt_caufv_out to g_ofile.
  endloop.

  CLOSE DATASET g_ofile.
  IF sy-subrc <> 0.
    WRITE: / text-e05, g_ofile.
    EXIT.
  ENDIF.

ENDFORM.                    " OUTPUT_FILE

*&---------------------------------------------------------------------*
*&      Form  GET_DEFAULT_VARIANT_F14
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_VARIANT  text
*----------------------------------------------------------------------*
form GET_DEFAULT_VARIANT_F14  using    p_variant.

  gx_variant = g_variant.
  CLEAR gx_variant-variant.
  CLEAR gx_variant-text.

  IF NOT p_variant IS INITIAL.
    gx_variant-variant = p_variant.
  ENDIF.

  CALL FUNCTION 'REUSE_ALV_VARIANT_DEFAULT_GET'
    EXPORTING
      i_save        = g_variant_save
    CHANGING
      cs_variant    = gx_variant
    EXCEPTIONS
      wrong_input   = 1
      not_found     = 2
      program_error = 3
      OTHERS        = 4.

  CASE sy-subrc.
    WHEN 0.
      p_variant = gx_variant-variant.
    WHEN 2.
      CLEAR p_variant.
  ENDCASE.

endform.                    " GET_DEFAULT_VARIANT_F14

*&---------------------------------------------------------------------*
*&      Form  VARIANT_EXISTENCE_F14
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_VARIANT  text
*----------------------------------------------------------------------*
form VARIANT_EXISTENCE_F14  using    p_variant.

*--- globale field must contain same value as parameter
  g_variant-variant = p_variant.

  CHECK NOT g_variant-variant IS INITIAL.

  CALL FUNCTION 'REUSE_ALV_VARIANT_EXISTENCE'
    EXPORTING
      i_save     = g_variant_save
    CHANGING
      cs_variant = g_variant.

endform.                    " VARIANT_EXISTENCE_F14

*&---------------------------------------------------------------------*
*&      Form  VARIANT_INIT_F14
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM variant_init_f14 USING handle    TYPE slis_handl
                            log_group TYPE slis_loggr
                            text      TYPE slis_varbz.

  DATA l_itobcust LIKE itobcust.

  CLEAR g_variant.

  g_repid              = sy-repid.
  g_variant-report     = g_repid.
  g_variant-handle     = handle.
  g_variant-log_group  = log_group.
  g_variant-text       = text.
  g_variant-username   = sy-uname.

*--- Wenn Report aus Customizing gerufen dann Globale Varianten aktiv
  IMPORT g_variant_save FROM MEMORY ID 'G_VARIANT_SAVE'.
  IF NOT sy-subrc IS INITIAL.
    g_variant_save = c_u.
  ENDIF.
*--- mit diesem FB wird '--' nicht als Linie dargestellt
  CALL FUNCTION 'LIST_ALLOW_SEQUENCE_OF_HYPHENS'
    EXCEPTIONS
      OTHERS = 1.

*   when alternativ labeling is activ/deactiv use special views
  CALL FUNCTION 'ILOX_ITOBCUST_READ'
    IMPORTING
      e_itobcust     = l_itobcust
    EXCEPTIONS
      not_maintained = 1
      OTHERS         = 2.

  IF l_itobcust-state NE '1'.
    g_altern_act = c_x.
    IF l_itobcust-alcnv NE c_x AND
               g_selmod NE selmod_d.
      MESSAGE s518(il).
    ENDIF.
  ENDIF.

ENDFORM.                    "variant_init_f14

*---------------------------------------------------------------------*
*       FORM VARIANT_INPUTHELP_F14                                    *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM variant_inputhelp_f14 USING p_variant LIKE g_variant-variant.

  DATA h_exit.
 DATA: lt_objects TYPE table of VANZ,      "N1240297
       lt_valutab TYPE table of RSPARAMS.  "N1240297
 DATA: ls_objects TYPE VANZ.               "N1240297


  CLEAR gx_variant.

  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
       EXPORTING
            is_variant          = g_variant
*           I_TABNAME_HEADER    =
*           I_TABNAME_ITEM      =
*           IT_DEFAULT_FIELDCAT =
            i_save              = g_variant_save
       IMPORTING
            e_exit              = h_exit
            es_variant          = gx_variant
        EXCEPTIONS
            not_found           = 1
            program_error       = 2
            OTHERS              = 3.

  IF sy-subrc IS INITIAL AND h_exit IS INITIAL.
*  Start Note1240297
 CALL FUNCTION 'RS_VARIANT_CONTENTS'
  EXPORTING
    report                      = sy-repid
    variant                     = SY-SLSET
*   MOVE_OR_WRITE               = 'W'
*   NO_IMPORT                   = ' '
*   EXECUTE_DIRECT              = ' '
* IMPORTING
*   SP                          =
  tables
*   L_PARAMS                    =
*   L_PARAMS_NONV               =
*   L_SELOP                     =
*   L_SELOP_NONV                =
    valutab                     = lt_valutab
    OBJECTS                     = lt_objects
*   FREE_SELECTIONS_DESC        =
*   FREE_SELECTIONS_VALUE       =
 EXCEPTIONS
   VARIANT_NON_EXISTENT        = 1
   VARIANT_OBSOLETE            = 2
   OTHERS                      = 3
          .
IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.

READ TABLE lt_objects INTO ls_objects WITH KEY name = 'VARIANT'.
*Start Note 1313203
IF NOT SY-SUBRC IS INITIAL.
 READ TABLE lt_objects INTO ls_objects WITH KEY name = 'SP_VARI'.
ENDIF.
*End Note 1313203
 IF ls_objects-protected IS INITIAL.
    g_variant-variant = gx_variant-variant.
    p_variant         = gx_variant-variant.
 ENDIF.
  ELSE.
    MESSAGE ID sy-msgid TYPE 'S'
                 NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
*  End Note1240297
ENDFORM.                    "variant_inputhelp_f14

*---------------------------------------------------------------------*
*       FORM VARIANT_START_F16                                        *
*---------------------------------------------------------------------*
*       Start ¨¹ber Variante                                           *
*---------------------------------------------------------------------*
FORM variant_start_f16.

  DATA: h_subrc   LIKE sy-subrc.
  DATA: h_repid   LIKE rsvar-report.
  DATA: h_variant LIKE rsvar-variant.
  DATA: h_tcode   LIKE sy-tcode.

*--- Tcode merken, kann durch Varainte ¨¹berschrieben werden
  h_tcode  = dy_tcode.
*--- Einstiegsvarianten nicht bei Submit m#glich da zum Zeitpunkt
*--- INITIALISATION dy-tcode nicht bekannt und sy-tcode = T-code
*--- des Aufrufers ist
*--- desweiteren k#nnten interne Parameter wie DY_SELMD durch
*--- Variante ¨¹berschrieben werden
  IF sy-slset              IS INITIAL AND
     sy-calld              IS INITIAL AND
     g_feldlist-g_var_flag IS INITIAL AND
     sy-tcode <> 'SE38'               AND
     sy-tcode <> 'SA38'.

    g_selmod = selmod_0.
    h_repid = sy-repid.
    CLEAR h_variant.
    h_variant = 'U_'.
    WRITE sy-uname TO h_variant+2.
*--- User specific variant
    CALL FUNCTION 'RS_VARIANT_EXISTS'
      EXPORTING
        report  = h_repid
        variant = h_variant
      IMPORTING
        r_c     = h_subrc.
    IF NOT h_subrc IS INITIAL.
*--- customizing variant
      CLEAR h_variant.
      h_variant = 'SAP_TCODE_'.
      WRITE sy-tcode TO h_variant+10.
      CALL FUNCTION 'RS_VARIANT_EXISTS'
        EXPORTING
          report  = h_repid
          variant = h_variant
        IMPORTING
          r_c     = h_subrc.
      IF NOT h_subrc IS INITIAL.
*--- system variant
        CLEAR h_variant.
        h_variant = 'SAP&TCODE_'.
        WRITE sy-tcode TO h_variant+10.
        CALL FUNCTION 'RS_VARIANT_EXISTS'
          EXPORTING
            report  = h_repid
            variant = h_variant
          IMPORTING
            r_c     = h_subrc.
      ENDIF.
    ENDIF.
    IF h_subrc = 0.
      g_feldlist-g_var_flag = 'X'.
      CALL FUNCTION 'RS_SUPPORT_SELECTIONS'
        EXPORTING
          report               = h_repid
          variant              = h_variant
        EXCEPTIONS
          variant_not_existent = 01
          variant_obsolete     = 02.
    ENDIF.
  ENDIF.

  dy_tcode = h_tcode.                  "gemerkter T-code zur¨¹ckschreiben

ENDFORM.                    "variant_start_f16

*Text symbol text£º
*B01:Selection Screen Input
*B02:Output
*B03:Variant
*E01:No authorization for company :
*E02:No authorisation for plant
*E03:Order Closedate to must be > Order Closedate from
*E04:Open dataset failed for :
*E05:Close dataset failed for :
*E06:You have no authorization for creating outputfile
*H00:Planned - Actual hours
*H02:Orders :
*H03:Order Close Date :
*H04:Order Type :
*H05:Acc. Ind. :
*H06:Workcenter :
*H07:Plant :
*P01:The execution of this report will take a lot of time.
*P02:Please consider to run this program in background
*P03:Do you want to proceed ?

*W01:Report cancelled
*Selection text£º
*P_IDAT3H:        Order Close Date to
*P_IDAT3L:        Order Close Date from
*P_INIT:        Initial load ? X=yes
*P_OFILE:        Create outputfile
*S_ARBPL:        Workcenter
*S_AUART:        Order Type
*S_AUFNR:        Service Order
*S_BEMOT:        Accounting Indicator
*S_WERKI:        Plant
*VARIANT:        Layout
