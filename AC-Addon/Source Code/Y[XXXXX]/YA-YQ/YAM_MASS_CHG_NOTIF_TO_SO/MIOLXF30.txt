***INCLUDE MIOLXF30.

*---------------------------------------------------------------------*
*       FORM USER_COMMAND_F30                                         *
*---------------------------------------------------------------------*
*       central f-codes for all notification lists                    *
*---------------------------------------------------------------------*
*  -->  P_UCOMM                                                       *
*  -->  P_SELFIELD                                                    *
*---------------------------------------------------------------------*
FORM user_command_f30 USING p_ucomm LIKE sy-ucomm
                           p_selfield TYPE slis_selfield.

  CASE p_ucomm.
    WHEN 'IGRF'.
*--- Grafik einblenden ----------------------------------------------
      PERFORM check_object_tab_marked_f14 USING p_ucomm
                                                p_selfield.
      PERFORM grafics_l USING p_selfield.
    WHEN 'EQAZ'.
*--- Equipmentliste aufrufen ----------------------------------------
      PERFORM check_object_tab_marked_f14 USING p_ucomm
                                                p_selfield.
      PERFORM display_equi_l.
    WHEN 'TPAZ'.
*--- Techn.Platzliste aufrufen --------------------------------------
      PERFORM check_object_tab_marked_f14 USING p_ucomm
                                                p_selfield.
      PERFORM display_iflo_l.
    WHEN 'BTAZ'.
*--- Materialliste aufrufen -----------------------------------------
      PERFORM check_object_tab_marked_f14 USING p_ucomm
                                                p_selfield.
      PERFORM display_mara_l.
    WHEN 'AUFK'.
*--- Auftragsliste aufrufen -----------------------------------------
      PERFORM check_object_tab_marked_f14 USING p_ucomm
                                                p_selfield.
      PERFORM display_aufk_l.
      CLEAR p_ucomm.
    WHEN 'MUEQ'.
*--- mehrstufige Equiliste aufrufen --------------------------------
      PERFORM check_object_tab_marked_f14 USING p_ucomm
                                                p_selfield.
      PERFORM multi_equi_l.
    WHEN 'MUTP'.
*--- mehrstufige Techn.Platzliste aufrufen --------------------------
      PERFORM check_object_tab_marked_f14 USING p_ucomm
                                                p_selfield.
      PERFORM multi_iflo_l.
    WHEN 'MUQM'.
*--- mehrstufige Meldungsliste aufrufen -----------------------------
      PERFORM check_object_tab_marked_f14 USING p_ucomm
                                                p_selfield.
      PERFORM multi_qmel_l.
    WHEN 'MUAU'.
*--- mehrstufige Auftragsliste Aufrufen -----------------------------
      PERFORM check_object_tab_marked_f14 USING p_ucomm
                                                p_selfield.
      PERFORM multi_aufk_l.
    WHEN 'ORDE'.
*--- aus Meldungen Auftrag anlegen ----------------------------------
      PERFORM check_object_tab_marked_f14 USING p_ucomm
                                                p_selfield.
      PERFORM notifications_to_order.
*--- link notification to order
    WHEN 'ORDZ'.
      PERFORM check_object_tab_marked_f14 USING p_ucomm
                                                p_selfield.

      PERFORM link_notifications_to_order.
    WHEN 'MELD'.
*--- Meldung anzeigen/#ndern ----------------------------------------
      PERFORM fcodes_with_mark_f16 USING p_ucomm
                                         p_selfield.
    WHEN 'MALT'.
*--- Ma#nahmen zur Meldung anzeigen ---------------------------------
      PERFORM fcodes_with_mark_f16 USING p_ucomm
                                         p_selfield.
    WHEN 'MFLT'.
*--- Ma#nahmen zur Meldung anzeigen ---------------------------------
      PERFORM fcodes_with_mark_f16 USING p_ucomm
                                         p_selfield.
    WHEN 'ANLV'.
*--- Detailbild Anlagenverf¨¹gbarkeit aufrufen -----------------------
      PERFORM fcodes_with_mark_f16 USING p_ucomm
                                         p_selfield.
    WHEN 'ILOA'.
*--- Iloadetailbild aufrufen ----------------------------------------
      PERFORM fcodes_with_mark_f16 USING p_ucomm
                                         p_selfield.
    WHEN 'PSLT'.
*--- Detailbild Position aufrufen ----------------------------------
      PERFORM fcodes_with_mark_f16 USING p_ucomm
                                         p_selfield.
    WHEN 'LIZU'.
*--- Meldung Zur¨¹ckstellen (Status#nderung) ------------------------
      CLEAR g_status_change.
      PERFORM fcodes_with_mark_f16 USING p_ucomm
                                         p_selfield.
      IF NOT g_status_change IS INITIAL.
        MESSAGE i690.
      ENDIF.
    WHEN 'LIIA'.
*--- Meldung in Arbeit     (Status#nderung) ------------------------
      CLEAR g_status_change.
      PERFORM fcodes_with_mark_f16 USING p_ucomm
                                         p_selfield.
      IF NOT g_status_change IS INITIAL.
        MESSAGE i691.
      ENDIF.
    WHEN 'LIAR'.
*--- Meldung abschlie#en   (Status#nderung) ------------------------
      PERFORM check_object_tab_marked_f14 USING p_ucomm       "1273255
                                                p_selfield.   "1273255
      PERFORM arch_popup_send USING g_exit.
      IF g_exit <> '8'.
        PERFORM init_bal.
        PERFORM fcodes_with_mark_f16 USING p_ucomm
                                           p_selfield.
        PERFORM memory_liar_clear.
        PERFORM commit_bal.
      ENDIF.
    WHEN 'AFDT'.
*--- Detailbild Ausfalldaten aufrufen ------------------------------
      PERFORM fcodes_with_mark_f16 USING p_ucomm
                                         p_selfield.
    WHEN 'WFMS'.
*--- Detailbild Ma#nahmen aufrufen ---------------------------------
      PERFORM fcodes_with_mark_f16 USING p_ucomm
                                         p_selfield.
    WHEN 'PRLT'.
*--- Meldung drucken       (Status#nderung) ------------------------
      REFRESH iworkpaper.
      EXPORT iworkpaper device TO MEMORY ID 'ID_IPRT_PAPERS'.
      PERFORM fcodes_with_mark_f16 USING p_ucomm
                                         p_selfield.
    WHEN 'LGTX'.
*--- Detailbild Langtext zu Aktion aufrufen ------------------------
      PERFORM fcodes_with_mark_f16 USING p_ucomm
                                         p_selfield.
    WHEN 'PHON'.
*--- Telefonanruf initieren ----------------------------------------
      PERFORM fcodes_with_mark_f16 USING p_ucomm
                                         p_selfield.
    WHEN 'MONI'.
      PERFORM monitor_on_off_f30 USING p_selfield.
    WHEN 'DOWN'.
*--- Download Daten nach MS-Access (Sonderlocke Meldung/Auftrag)
      p_selfield-refresh = space.
      PERFORM prepare_data_f_download_f30 USING p_ucomm
                                                p_selfield.
      PERFORM download_f16.
    WHEN OTHERS.
ENHANCEMENT-SECTION     user_command_f30_01 SPOTS es_miolxf30 INCLUDE BOUND.
*--- zentrale F-codes aufrufen -------------------------------------
      PERFORM user_command_f16 USING p_ucomm p_selfield.
END-ENHANCEMENT-SECTION.
  ENDCASE.

ENDFORM.                    "user_command_f30
*eject
*---------------------------------------------------------------------*
*       FORM  CALL_MELDUNG_L
*---------------------------------------------------------------------*
*       display/change notification
*---------------------------------------------------------------------*
FORM call_meldung_l USING f_ucomm LIKE sy-ucomm
                          f_selfield TYPE slis_selfield.

  DATA  ok_memory LIKE sy-ucomm.
  DATA  idiqmel LIKE diqmel OCCURS 0 WITH HEADER LINE.
  DATA  iviqmsm LIKE wqmsm OCCURS 0 WITH HEADER LINE.

  DATA: f_retc LIKE sy-subrc.
  DATA: f_tcode LIKE sy-tcode.
  DATA: inst LIKE tq80-qmtyp VALUE '01'.    "Instandhaltung
  DATA: serv LIKE tq80-qmtyp VALUE '03'.    "Service

  DATA: l_riarch   LIKE riarch.
  DATA: l_t_riarch LIKE riarch OCCURS 0 WITH HEADER LINE.

  IF NOT f_ucomm IS INITIAL AND
         f_ucomm <> 'WFMS'  AND
         f_ucomm <> 'IOBJ'.
    ok_memory = f_ucomm.
    EXPORT ok_memory TO MEMORY ID 'PM'.
  ENDIF.

*--- check PHASE if status change is possible. If not don't call IW22
*--- PHASE = ' ' if PHASE is not active
*--- notification only can be postponed if it is open.
  IF f_ucomm = 'LIZU' AND object_tab-phase > '1'.
    g_status_change = 'X'.
    EXIT.
  ENDIF.
*--- notification only can be go in process if it is open or postponed
  IF f_ucomm = 'LIIA' AND object_tab-phase > '2'.
    g_status_change = 'X'.
    EXIT.
  ENDIF.

*  close notification
  IF f_ucomm = 'LIAR'.
*--- g_t_riarch and g_riarch were filled in ARCH_POPUP_SEND
    IF g_t_riarch[] IS INITIAL.
*--- export riarch to memory
      l_riarch = g_riarch.
      l_riarch-objnr = rihqmel-objnr.
*--- export riarch to memory
      EXPORT l_riarch TO MEMORY ID 'GI_VCI'.
    ELSE.
      MOVE g_t_riarch[] TO l_t_riarch[].
      EXPORT l_t_riarch TO MEMORY ID 'GI_VCI'.
    ENDIF.
  ENDIF.

  SET PARAMETER ID 'IQM' FIELD rihqmel-qmnum.

*--- find transaction via notification type ------------------------*
  SELECT SINGLE * FROM tq80 WHERE qmart = rihqmel-qmart.
  CHECK sy-subrc IS INITIAL.
  CASE tq80-qmtyp.
    WHEN inst.
      IF t370a-aktyp = 'V'.
        f_tcode = 'IW22'.              "IH-Meldung #ndern
      ELSE.
        f_tcode = 'IW23'.              "IH-Meldung anzeigen
      ENDIF.
    WHEN serv.
      IF t370a-aktyp = 'V'.
        f_tcode = 'IW52'.              "Service-Meldung #ndern
      ELSE.
        f_tcode = 'IW53'.              "Service-Meldung anzeigen
      ENDIF.
  ENDCASE.
*--- authority check on t-code ------------------------------------*
  PERFORM auth_check_tcode_f16 USING f_tcode
                               CHANGING f_retc.
  IF f_retc IS INITIAL.
    FREE MEMORY ID 'QMOB'.
    CLEAR return_code.                                      "note632978
    CALL TRANSACTION f_tcode AND SKIP FIRST SCREEN.
*---  update object_tab only when detail in change mode -------------*
    IMPORT return_code FROM MEMORY ID 'QMOB'.
    IF f_ucomm = 'PRLT' AND return_code IS INITIAL.
*--- display printing symbol when object has been printed
      PERFORM mark_printed_f16 CHANGING object_tab-selected
                                        object_tab-pm_selected.
    ENDIF.
    IF f_ucomm = 'LIAR'.
      DATA: l_msg TYPE bal_s_msg.
      IMPORT l_msg FROM MEMORY ID 'VCI_MSG'.
      IF sy-subrc = 0.
        PERFORM fill_bal USING l_msg.
        FREE MEMORY ID 'VCI_MSG'.
      ENDIF.
    ENDIF.
    IF t370a-aktyp = 'V'.
      PERFORM fill_object_tab_late_l.
    ENDIF.
  ENDIF.

ENDFORM.                    "call_meldung_l

*eject
*---------------------------------------------------------------------*
*       FORM DISPLAY_AUFK_L                                           *
*---------------------------------------------------------------------*
*       display pm orders                                            *
*---------------------------------------------------------------------*
FORM display_aufk_l.

  DATA: f_tcode LIKE sy-tcode.
  DATA: f_retc LIKE sy-subrc.
  IF g_aktyp = 'V'.
    IF dy_tcode = 'IW58' OR dy_tcode = 'IW59'.
      f_tcode = 'IW72'.
    ELSE.
      f_tcode = 'IW38'.
    ENDIF.
  ELSE.
    IF dy_tcode = 'IW58' OR dy_tcode = 'IW59'.
      f_tcode = 'IW73'.
    ELSE.
      f_tcode = 'IW39'.
    ENDIF.
  ENDIF.
*--- authority-check on t-code ------------------------------------*
  PERFORM auth_check_tcode_f16 USING f_tcode
                               CHANGING f_retc.
  IF f_retc IS INITIAL.
    PERFORM create_range_aufk_l.
    IF NOT i_aufnr IS INITIAL.
      EXPORT f_tcode TO MEMORY ID 'RIAUFK20'.
      SUBMIT riaufk20 WITH aufnr IN i_aufnr
                      WITH dy_ofn   = 'X'
                      WITH dy_iar   = 'X'
                      WITH dy_mab   = 'X'
                      WITH dy_his   = 'X'
                      WITH dy_tcode = f_tcode
                      WITH datuv    = '19000101'
                      WITH datub    = '99991231'
             AND RETURN.
    ENDIF.
  ENDIF.

ENDFORM.                    "display_aufk_l

*eject
*---------------------------------------------------------------------*
*       FORM DISPLAY_IFLO_L                                           *
*---------------------------------------------------------------------*
*       functional locations                                          *
*---------------------------------------------------------------------*
FORM display_iflo_l.

  DATA: f_tcode LIKE sy-tcode.
  DATA: f_retc LIKE sy-subrc.

*--- when in service-mode jump into list in service mode -------------*
  IF dy_tcode = 'IW58' OR dy_tcode = 'IW59'.
    f_tcode = 'IH11'.
  ELSE.
    f_tcode = 'IH06'.
  ENDIF.

*--- authority-check on t-code ------------------------------------*
  PERFORM auth_check_tcode_f16 USING f_tcode
                              CHANGING f_retc.
  IF f_retc IS INITIAL.
    PERFORM create_range_iflo_l.
    IF NOT i_tplnr IS INITIAL.
      EXPORT f_tcode TO MEMORY ID 'RIIFLO20'.
      SUBMIT riiflo20 WITH tplnr IN i_tplnr
                      WITH dy_tcode = f_tcode
             AND RETURN.
    ENDIF.
  ENDIF.

ENDFORM.                    "display_iflo_l

*eject
*---------------------------------------------------------------------*
*       FORM DISPLAY_EQUI_L                                           *
*---------------------------------------------------------------------*
*       Equipments                                                    *
*---------------------------------------------------------------------*
FORM display_equi_l.

  DATA: f_tcode LIKE sy-tcode.
  DATA: f_retc LIKE sy-subrc.

*--- when in service mode jump in list with service mode ------------
  IF dy_tcode = 'IW58' OR dy_tcode = 'IW59'.
    f_tcode = 'IH10'.
  ELSE.
    f_tcode = 'IH08'.
  ENDIF.

*--- authority check on T-code -------------------------------------*
  PERFORM auth_check_tcode_f16 USING f_tcode
                               CHANGING f_retc.
  IF f_retc IS INITIAL.
    PERFORM create_range_equi_l.
    IF NOT i_equnr IS INITIAL.
      EXPORT f_tcode TO MEMORY ID 'RIEQUI20'.
      SUBMIT riequi20 WITH equnr IN i_equnr
                      WITH dy_tcode = f_tcode
             AND RETURN.
    ENDIF.
  ENDIF.

ENDFORM.                    "display_equi_l

*eject
*---------------------------------------------------------------------*
*       FORM MULTI_IFLO_l                                             *
*---------------------------------------------------------------------*
*       Techn. Pl. mehrstufig                                         *
*---------------------------------------------------------------------*
FORM multi_iflo_l.

  DATA: f_retc LIKE sy-subrc.

*--- authority check on T-code --------------------------------------*
  PERFORM auth_check_tcode_f16 USING 'IL07'
                               CHANGING f_retc.
  IF f_retc IS INITIAL.
    PERFORM create_range_iflo_l.
    IF NOT i_tplnr IS INITIAL.
      SUBMIT riiflo30 WITH tplnr IN i_tplnr
             VIA SELECTION-SCREEN
             AND RETURN.
    ENDIF.
  ENDIF.

ENDFORM.                    "multi_iflo_l

*eject
*---------------------------------------------------------------------*
*       FORM MULTI_EQUI_l                                             *
*---------------------------------------------------------------------*
*       Equipments multi level list                                   *
*---------------------------------------------------------------------*
FORM multi_equi_l.

  DATA: f_retc LIKE sy-subrc.

*--- authority check on T-code ---------------------------------------*
  PERFORM auth_check_tcode_f16 USING 'IE07'
                               CHANGING f_retc.
  IF f_retc IS INITIAL.
    PERFORM create_range_equi_l.
    IF NOT i_equnr IS INITIAL.
      SUBMIT riequi30 WITH equnr IN i_equnr
             VIA SELECTION-SCREEN
             AND RETURN.
    ENDIF.
  ENDIF.

ENDFORM.                    "multi_equi_l

*eject
*---------------------------------------------------------------------*
*       FORM MULTI_QMEL_l                                             *
*---------------------------------------------------------------------*
*       notifications multi level list                                *
*---------------------------------------------------------------------*
FORM multi_qmel_l.

  DATA: f_retc LIKE sy-subrc.

*--- authority check on T-code --------------------------------------*
  PERFORM auth_check_tcode_f16 USING 'IW30'
                               CHANGING f_retc.
  IF f_retc IS INITIAL.
    PERFORM create_range_qmel_l.
    IF NOT i_qmnum IS INITIAL.
      SUBMIT riqmel10 WITH qmnum IN i_qmnum
                      WITH dy_ofn   = 'X'
                      WITH dy_rst   = 'X'
                      WITH dy_iar   = 'X'
                      WITH dy_mab   = 'X'
                      WITH datuv    = datuv
                      WITH datub    = datub
             VIA SELECTION-SCREEN
             AND RETURN.
    ENDIF.
  ENDIF.

ENDFORM.                    "multi_qmel_l

*---------------------------------------------------------------------*
*       FORM MULTI_AUFK_l                                             *
*---------------------------------------------------------------------*
*       pm orders multi level list                                    *
*---------------------------------------------------------------------*
FORM multi_aufk_l.

  DATA: f_retc LIKE sy-subrc.

*--- authority check on T-code --------------------------------------*
  PERFORM auth_check_tcode_f16 USING 'IW40'
                               CHANGING f_retc.
  IF f_retc IS INITIAL.
    PERFORM create_range_aufk_l.
    IF NOT i_aufnr IS INITIAL.
      SUBMIT riaufk10 WITH aufnr IN i_aufnr
                      WITH dy_ofn   = 'X'
                      WITH dy_iar   = 'X'
                      WITH dy_mab   = 'X'
                      WITH datuv    = '00000000'
                      WITH datub    = '99991231'
             VIA SELECTION-SCREEN
             AND RETURN.
    ENDIF.
  ENDIF.

ENDFORM.                    "multi_aufk_l

*eject
*---------------------------------------------------------------------*
*       FORM DISPLAY_MARA_L                                           *
*---------------------------------------------------------------------*
*       pm asselbly list                                              *
*---------------------------------------------------------------------*
FORM display_mara_l.

  DATA: f_tcode LIKE sy-tcode.
  DATA: f_retc LIKE sy-subrc.

  f_tcode = 'IH09'.

*--- auhthority check on T-code -------------------------------------*
* perform auth_check_tcode_f10 using f_tcode
*                              changing f_retc.
  IF f_retc IS INITIAL.
    PERFORM create_range_mara_l.
    IF NOT i_bautl IS INITIAL.
      SUBMIT rimara20 WITH ms_matnr IN i_bautl
                      WITH dy_tcode = f_tcode
             AND RETURN.
    ENDIF.
  ENDIF.

ENDFORM.                    "display_mara_l

*eject
*---------------------------------------------------------------------*
*       FORM NOTIFICATIONS_TO_ORDER                                   *
*---------------------------------------------------------------------*
*       create order to notifications selected                        *
*---------------------------------------------------------------------*
FORM notifications_to_order.

  DATA: BEGIN OF h_diqmel OCCURS 0.
          INCLUDE STRUCTURE diqmel.
  DATA: END OF h_diqmel.

  DATA: f_retc LIKE sy-subrc.

*--- flag order from notification
  DATA lv_no VALUE 'X'.                                     "1067644
  EXPORT lv_no TO MEMORY ID 'NO'.                           "1067644

  PERFORM auth_check_tcode_f16 USING 'IW34'
                               CHANGING f_retc.
  IF NOT f_retc IS INITIAL.
    EXIT.
  ENDIF.

  REFRESH h_diqmel.
  CLEAR   f_retc.
  LOOP AT object_tab WHERE selected = g_x.
    IF NOT object_tab-aufnr IS INITIAL.
      f_retc = 8.
    ENDIF.
    CLEAR h_diqmel.
    MOVE-CORRESPONDING object_tab TO h_diqmel.
    APPEND h_diqmel.
  ENDLOOP.
*--- Meldungen ausgew#hlt die bereits Auftr#gen zugeordnet sind
  IF NOT f_retc IS INITIAL.
    MESSAGE i121.
    EXIT.
  ENDIF.

  CALL FUNCTION 'IWOL_IW28_CREATE_ORDER'
    TABLES
      i_diqmel = h_diqmel
    EXCEPTIONS
      OTHERS   = 2.

  LOOP AT object_tab WHERE selected = g_x.
    READ TABLE h_diqmel WITH KEY qmnum = object_tab-qmnum.
    IF sy-subrc = 0.
      MOVE-CORRESPONDING h_diqmel TO object_tab.
      MOVE  h_diqmel-tplnr        TO object_tab-tplnr_int.
      WRITE h_diqmel-tplnr        TO object_tab-tplnr.
      IF NOT object_tab-arbpl_i IS INITIAL.
        CALL FUNCTION 'CR_WORKSTATION_READ'
          EXPORTING
            id        = object_tab-arbpl_i
          IMPORTING
            arbpl     = object_tab-arbpl
          EXCEPTIONS
            not_found = 01.
        IF NOT sy-subrc IS INITIAL.
          CLEAR object_tab-arbpl.
        ENDIF.
      ENDIF.
      MODIFY object_tab.
    ENDIF.
  ENDLOOP.

ENDFORM.                    "notifications_to_order

*eject
*---------------------------------------------------------------------*
*       FORM AUTHORITY_CHECK_F30                                      *
*---------------------------------------------------------------------*
*       authority check on list output                                *
*---------------------------------------------------------------------*
FORM authority_check_f30.

  DATA: BEGIN OF h_equi_tab OCCURS 100,
            mandt LIKE sy-mandt,
            equnr LIKE equi-equnr,
            begru LIKE equi-begru.
  DATA: END OF h_equi_tab.

  DATA: BEGIN OF h_iflo_tab OCCURS 100,
             mandt LIKE sy-mandt,
             tplnr LIKE iflot-tplnr,
             begru LIKE iflot-begru.
  DATA: END OF h_iflo_tab.

  DATA: h_t370b_wa   LIKE t370b.
  DATA: h_begru      LIKE equi-begru.
  DATA: f_tcode      LIKE sy-tcode.
  DATA: h_no_auth.

  DATA: inst         LIKE tq80-qmtyp VALUE '01'.  "Instandh
  DATA: serv         LIKE tq80-qmtyp VALUE '03'.  "Service
  DATA: h_begru_ind  LIKE sy-dbcnt.
  DATA mtext type string. "N1597610

  FIELD-SYMBOLS: <ls_object_tab> LIKE LINE OF object_tab.

*--- Pr¨¹fung Berechtigungsgruppe nur wenn im Cust. gepflegt --------*
  SELECT SINGLE * FROM t370b INTO h_t370b_wa.
  IF sy-subrc IS INITIAL. h_begru_ind = 1. ENDIF.

  IF NOT g_equnr_tab[] IS INITIAL.
    SORT g_equnr_tab.
    DELETE ADJACENT DUPLICATES FROM g_equnr_tab.
    IF NOT h_begru_ind IS INITIAL.
      SELECT mandt equnr begru INTO TABLE h_equi_tab FROM equi
                                    FOR ALL ENTRIES IN g_equnr_tab
                                    WHERE equnr = g_equnr_tab-equnr
                                    ORDER BY PRIMARY KEY.
    ENDIF.
  ENDIF.
  IF NOT g_tplnr_tab[] IS INITIAL.
    SORT g_tplnr_tab.
    DELETE ADJACENT DUPLICATES FROM g_tplnr_tab.
    IF NOT h_begru_ind IS INITIAL.
      SELECT mandt tplnr begru INTO TABLE h_iflo_tab FROM iflot
                                    FOR ALL ENTRIES IN g_tplnr_tab
                                    WHERE tplnr = g_tplnr_tab-tplnr
                                    ORDER BY PRIMARY KEY.
    ENDIF.
  ENDIF.

  h_no_auth = no.

  SORT object_tab BY qmart iwerk swerk equnr tplnr.
  SORT t_tq80.

  LOOP AT object_tab ASSIGNING <ls_object_tab>.
    IF NOT t_tq80-qmart = <ls_object_tab>-qmart.
      READ TABLE t_tq80 WITH KEY mandt = sy-mandt
                                 qmart = <ls_object_tab>-qmart
                                 BINARY SEARCH.
    ELSE.                                                   "note314937
      sy-subrc = 0.                                         "note314937
    ENDIF.
    IF sy-subrc IS INITIAL.
      CASE t_tq80-qmtyp.
        WHEN inst.
          f_tcode = 'IW23'.
        WHEN serv.
          f_tcode = 'IW53'.
      ENDCASE.
    ENDIF.
*--- Lesen Berechtigungsgruppe Bezugsobjekt
    IF NOT h_begru_ind IS INITIAL.
      CLEAR h_begru.
      IF NOT <ls_object_tab>-equnr IS INITIAL.
        IF NOT h_equi_tab-equnr = <ls_object_tab>-equnr.
          READ TABLE h_equi_tab WITH KEY mandt = sy-mandt
                                         equnr = <ls_object_tab>-equnr
                                         BINARY SEARCH.
        ENDIF.
        IF sy-subrc IS INITIAL.
          h_begru = h_equi_tab-begru.
        ENDIF.
      ELSEIF NOT <ls_object_tab>-tplnr_int IS INITIAL.
        IF NOT h_iflo_tab-tplnr = <ls_object_tab>-tplnr_int.
          READ TABLE h_iflo_tab WITH KEY mandt = sy-mandt
                                         tplnr = <ls_object_tab>-tplnr_int
                                         BINARY SEARCH.
        ENDIF.
        IF sy-subrc IS INITIAL.
          h_begru = h_iflo_tab-begru.
        ENDIF.
      ENDIF.
    ENDIF.
*--- Sonstige Berechtigungspr¨¹fung
    CALL FUNCTION 'INST_AUTHORITY_CHECK_ALL'
      EXPORTING
        qmart                    = <ls_object_tab>-qmart
        begrp                    = h_begru
        iwerk                    = <ls_object_tab>-iwerk
        swerk                    = <ls_object_tab>-swerk
        tcode                    = f_tcode
        ingrp                    = <ls_object_tab>-ingrp
        kostl                    = <ls_object_tab>-kostl       "1240024
        kokrs                    = <ls_object_tab>-kokrs       "1240024
      EXCEPTIONS
        keine_berechtigung_begrp = 1
        keine_berechtigung_iwerk = 2
        keine_berechtigung_swerk = 3
        keine_berechtigung_auart = 4
        keine_berechtigung_ingrp = 5
        keine_berechtigung_kostl = 6
        OTHERS                   = 7.

    IF sy-subrc <> 0.
      h_no_auth = yes.
      DELETE object_tab. CONTINUE.
    ENDIF.
  ENDLOOP.

* start of note 1597610
  IF h_no_auth = yes AND dy_selm = 'D' AND NOT dy_msgty IS INITIAL.
    MESSAGE ID 'IH' TYPE dy_msgty NUMBER '046' INTO mtext.
  ELSEIF h_no_auth = yes AND NOT dy_msgty IS INITIAL.
    MESSAGE ID 'IH' TYPE dy_msgty NUMBER '046'.
  ENDIF.
* End of note 1597610

ENDFORM.                    "authority_check_f30

*eject
*---------------------------------------------------------------------*
*       FORM CREATE_RANGE_AUFK_L                                      *
*---------------------------------------------------------------------*
*       Range mit selektierten Auftr#gen                              *
*---------------------------------------------------------------------*
FORM create_range_aufk_l.

  CLEAR i_aufnr.
  REFRESH i_aufnr.
  LOOP AT object_tab WHERE selected = g_x.
*--- aus checkbox wird Haken auf Liste
    PERFORM mark_selected_f16 CHANGING object_tab-selected
                                       object_tab-pm_selected.
    CHECK NOT object_tab-aufnr IS INITIAL.
    CLEAR i_aufnr.
    i_aufnr-option = 'EQ'.
    i_aufnr-sign   = 'I'.
    i_aufnr-low    = object_tab-aufnr.
    APPEND i_aufnr.
  ENDLOOP.
  IF i_aufnr IS INITIAL.
    MESSAGE i172.
  ENDIF.


ENDFORM.                    "create_range_aufk_l

*---------------------------------------------------------------------*
*       FORM CREATE_RANGE_QMEL_L                                      *
*---------------------------------------------------------------------*
*       create range with notification numbers                        *
*---------------------------------------------------------------------*
FORM create_range_qmel_l.

  CLEAR i_qmnum.
  REFRESH i_qmnum.
  LOOP AT object_tab WHERE selected = g_x.
    CHECK NOT object_tab-qmnum IS INITIAL.
    CLEAR i_qmnum.
    i_qmnum-option = 'EQ'.
    i_qmnum-sign   = 'I'.
    i_qmnum-low    = object_tab-qmnum.
    APPEND i_qmnum.
  ENDLOOP.
  IF i_qmnum IS INITIAL.
    MESSAGE i173.
  ENDIF.


ENDFORM.                    "create_range_qmel_l

*eject
*---------------------------------------------------------------------*
*       FORM CREATE_RANGE_IFLO_L                                      *
*---------------------------------------------------------------------*
*       create range with functional locations                        *
*---------------------------------------------------------------------*
FORM create_range_iflo_l.

  CLEAR i_tplnr.
  REFRESH i_tplnr.
  LOOP AT object_tab WHERE selected = g_x.
*--- aus checkbox wird Haken auf Liste
    PERFORM mark_selected_f16 CHANGING object_tab-selected
                                       object_tab-pm_selected.
    CHECK NOT object_tab-tplnr_int IS INITIAL.
    CLEAR i_tplnr.
    i_tplnr-option = 'EQ'.
    i_tplnr-sign   = 'I'.
    i_tplnr-low    = object_tab-tplnr_int.
    COLLECT i_tplnr.
  ENDLOOP.
  IF i_tplnr IS INITIAL.
    MESSAGE i170.
  ENDIF.


ENDFORM.                    "create_range_iflo_l

*eject
*---------------------------------------------------------------------*
*       FORM CREATE_RANGE_EQUI_L                                      *
*---------------------------------------------------------------------*
*       create range with equipments                                  *
*---------------------------------------------------------------------*
FORM create_range_equi_l.

  CLEAR i_equnr.
  REFRESH i_equnr.
  LOOP AT object_tab WHERE selected = g_x.
*--- aus checkbox wird Haken auf Liste
    PERFORM mark_selected_f16 CHANGING object_tab-selected
                                       object_tab-pm_selected.
    CHECK NOT object_tab-equnr IS INITIAL.
    CLEAR i_equnr.
    i_equnr-option = 'EQ'.
    i_equnr-sign   = 'I'.
    i_equnr-low    = object_tab-equnr.
    COLLECT i_equnr.
  ENDLOOP.
  IF i_equnr IS INITIAL.
    MESSAGE i171.
  ENDIF.


ENDFORM.                    "create_range_equi_l

*eject
*---------------------------------------------------------------------*
*       FORM CREATE_RANGE_MARA_L                                      *
*---------------------------------------------------------------------*
*       create range with materials                                   *
*---------------------------------------------------------------------*
FORM create_range_mara_l.

  CLEAR i_bautl.
  REFRESH i_bautl.
  LOOP AT object_tab WHERE selected = g_x.
*--- aus checkbox wird Haken auf Liste
    PERFORM mark_selected_f16 CHANGING object_tab-selected
                                       object_tab-pm_selected.
    CHECK NOT object_tab-bautl IS INITIAL.
    CLEAR i_bautl.
    i_bautl-option = 'EQ'.
    i_bautl-sign   = 'I'.
    i_bautl-low    = object_tab-bautl.
    COLLECT i_bautl.
  ENDLOOP.
  IF i_bautl IS INITIAL.
    MESSAGE i174.
  ENDIF.

ENDFORM.                    "create_range_mara_l

*eject
*---------------------------------------------------------------------*
*       FORM MOVE_VIQMELST_TO_OBJECT_TAB_L                            *
*---------------------------------------------------------------------*
*       Move von VIQMELST nach OBJECT_TAB                             *
*       mit versorgen aller besonders zu ermittelnden Felder          *
*---------------------------------------------------------------------*
FORM move_viqmelst_to_object_tab_l.

*--- object_tab f¨¹llen ----------------------------------------------*
  MOVE-CORRESPONDING viqmelst TO object_tab.
*--- Interne AUSZT ind EAUSZT umrechnen ------------------------------*
  IF g_eauszt_flag = yes.
    PERFORM extern_auszt_ermitteln_f30 USING
                                     viqmelst-auszt
                                     object_tab-eauszt
                                     object_tab-maueh.
  ENDIF.
*--- expl.write wegen Konvertierungsexit
  WRITE viqmelst-tplnr TO object_tab-tplnr.

  object_tab-tplnr_int = viqmelst-tplnr.
  object_tab-kzmla     = viqmelst-kzmla.
  object_tab-objnr     = viqmelst-objnr.
  l_jsto_pre_tab       = viqmelst-objnr.
  APPEND l_jsto_pre_tab.
  object_tab-arbpl_i  = viqmelst-arbpl.
*--- Bezugsobjektnummern in separater Tabelle w. Authority check -----*
  IF NOT object_tab-equnr IS INITIAL.
    g_equnr_tab-equnr = object_tab-equnr.
    COLLECT g_equnr_tab.
  ENDIF.
  IF NOT object_tab-tplnr_int IS INITIAL.
    g_tplnr_tab-tplnr = object_tab-tplnr_int.
    COLLECT g_tplnr_tab.
  ENDIF.

ENDFORM.                    "move_viqmelst_to_object_tab_l

*---------------------------------------------------------------------*
*       FORM FIND_STATUS_SCHEME_L                                     *
*---------------------------------------------------------------------*
*       Statusschema ermitteln und puffern                            *
*---------------------------------------------------------------------*
*  -->  F_QMART                                                       *
*  -->  F_STSMA                                                       *
*---------------------------------------------------------------------*
FORM find_status_scheme_l USING f_qmart TYPE qmart
                                f_stsma TYPE j_stsma.

  READ TABLE t_tq80 WITH KEY qmart = f_qmart.
  IF sy-subrc <> 0.
    SELECT SINGLE * FROM tq80 WHERE qmart = f_qmart.
    IF sy-subrc <> 0.
      CLEAR: f_stsma.
      EXIT.
    ENDIF.
    t_tq80 = tq80.
    APPEND t_tq80.
  ENDIF.

  READ TABLE t_tq8t WITH KEY qmtyp = t_tq80-qmtyp.
  IF sy-subrc <> 0.
    SELECT SINGLE * FROM tq8t WHERE qmtyp = t_tq80-qmtyp.
    IF sy-subrc <> 0.
      MESSAGE x041(im) WITH t_tq80-qmtyp.
    ENDIF.
    t_tq8t = tq8t.
    APPEND t_tq8t.
  ENDIF.
  f_stsma = t_tq8t-stsma.

ENDFORM.                    "find_status_scheme_l

*----------------------------------------------------------------------*
* Definition der ITEM-Tabelle (Zeilen der Grafik)
*----------------------------------------------------------------------*

DATA: BEGIN OF item OCCURS 1.
        INCLUDE STRUCTURE ggait.
DATA: END OF item.

*----------------------------------------------------------------------*
* Definition der ELEM-Tabelle (Objekte in der Grafik)
*----------------------------------------------------------------------*

DATA: BEGIN OF elem OCCURS 1.
        INCLUDE STRUCTURE ggael.
DATA: END OF elem.
DATA: BEGIN OF lgel OCCURS 1.
        INCLUDE STRUCTURE ggael.
DATA: END OF lgel.
DATA: BEGIN OF dfel OCCURS 1.
        INCLUDE STRUCTURE ggael.
DATA: END OF dfel.

*----------------------------------------------------------------------*
* Definition der MIST-Tabelle (Objekte in der Grafik)
*----------------------------------------------------------------------*

DATA: BEGIN OF mist OCCURS 1.
        INCLUDE STRUCTURE ggami.
DATA: END OF mist.
DATA: BEGIN OF lgms OCCURS 1.
        INCLUDE STRUCTURE ggami.
DATA: END OF lgms.
DATA: BEGIN OF dfms OCCURS 1.
        INCLUDE STRUCTURE ggami.
DATA: END OF dfms.

*----------------------------------------------------------------------*
* Definition der Rueckmeldetabelle
*----------------------------------------------------------------------*

DATA: BEGIN OF back OCCURS 1.
        INCLUDE STRUCTURE ggaba.
DATA: END OF back.

*---------------------------------------------------------------------*
*       FORM GRAFICS_L                                                *
*---------------------------------------------------------------------*
*       Grafik aufrufen                                               *
*---------------------------------------------------------------------*
FORM grafics_l USING p_selfield TYPE slis_selfield.

  DATA: h_dur LIKE ggael-dur,
        h_tabix LIKE sy-tabix,
        h_selec,
        h_strlen     LIKE sy-fdpos,
        h_strlen_tmp LIKE sy-fdpos.


  REFRESH: item,
           mist,
           elem,
           lgel,
           back.

  h_selec  = no.
  h_tabix  = 0.
  h_strlen = 0.

  LOOP AT object_tab WHERE selected = g_x.
    PERFORM select_for_quickinfo_l USING p_selfield.
    PERFORM mark_selected_f16 CHANGING object_tab-selected
                                       object_tab-pm_selected.
    h_selec = yes.
    h_tabix = h_tabix + 1.
    IF ( NOT object_tab-strmn IS INITIAL ) AND
       ( NOT object_tab-ltrmn IS INITIAL ).
      h_dur = object_tab-ltrmn - object_tab-strmn.
      h_dur = h_dur * 24 * 60 * 60.
      IF object_tab-ltrur = '000000'.                       "502088
        object_tab-ltrur = '240000'.                        "502088
      ENDIF.                                                "502088
      h_dur = h_dur + ( object_tab-ltrur - object_tab-strur ).
      PERFORM fill_elem USING
                  h_tabix              "Itemnummer
                  ' '                  "Balkenbeschriftung
                  object_tab-strmn     "Beginndatum
                  object_tab-strur     "Beginnuhrzeit
                  h_dur                "Dauer
                  'S'                  "Zeiteinheit Dauer
                  'BLUE'               "Farbe Balken
                  '4'                  "Gr##e Balken
                  'U'.                 "Position Balken
    ENDIF.
    IF ( NOT object_tab-pster IS INITIAL ) AND              "497622
       ( NOT object_tab-peter IS INITIAL ).                 "497622
      h_dur = object_tab-peter - object_tab-pster.          "497622
      h_dur = h_dur * 24 * 60 * 60.                         "497622
      IF h_dur = 0 AND object_tab-petur = '000000'          "502088
                   AND object_tab-pstur = '000000'.         "502088
        object_tab-petur = '240000'.                        "502088
      ENDIF.                                                "502088
      h_dur = h_dur + ( object_tab-petur - object_tab-pstur )."497622
      PERFORM fill_elem USING                               "497622
                h_tabix              "Itemnummer            "497622
                ' '                  "Balkenbeschriftung    "497622
                object_tab-pster     "Beginndatum Ma#nahme  "497622
                object_tab-pstur     "Beginnuhrzeit         "497622
                h_dur                "Dauer                 "497622
                'S'                  "Zeiteinheit Dauer     "497622
                'BLACK'              "Farbe Balken          "497622
                '4'                  "Gr##e Balken          "497622
                'U'.                 "Position Balken       "497622
    ENDIF.
    IF ( NOT object_tab-ausvn IS INITIAL ) AND
       ( NOT object_tab-ausbs IS INITIAL ).
      h_dur = object_tab-ausbs - object_tab-ausvn.
      h_dur = h_dur * 24 * 60 * 60.
      h_dur = h_dur + ( object_tab-auztb - object_tab-auztv ).
      PERFORM fill_elem USING
                  h_tabix              "Itemnummer
                  ' '                  "Balkenbeschriftung
                  object_tab-ausvn     "Beginndatum
                  object_tab-auztv     "Beginnuhrzeit
                  h_dur                "Dauer
                  'S'                  "Zeiteinheit Dauer
                  'RED'                "Farbe Balken
                  '4'                  "Gr##e Balken
                  'C'.                 "Position Balken
    ENDIF.
    IF ( NOT object_tab-qmdat IS INITIAL ) AND
       ( NOT object_tab-qmdab IS INITIAL ).
      h_dur = object_tab-qmdab - object_tab-qmdat.
      h_dur = h_dur * 24 * 60 * 60.
      h_dur = h_dur + ( object_tab-qmzab - object_tab-mzeit ).
      PERFORM fill_elem USING
                  h_tabix              "Itemnummer
                  ' '                  "Balkenbeschriftung
                  object_tab-qmdat     "Beginndatum
                  object_tab-mzeit     "Beginnuhrzeit
                  h_dur                "Dauer
                  'S'                  "Zeiteinheit Dauer
                  'GREEN'              "Farbe Balken
                  '4'                  "Gr##e Balken
                  'L'.                 "Position Balken
    ENDIF.
*--- Fill Text line , depending from called program
    PERFORM fill_graphic_text_line_l USING object_tab item-itext.

    CONDENSE item-itext.
    h_strlen_tmp = STRLEN( item-itext ).
    IF h_strlen_tmp > h_strlen.
      h_strlen = h_strlen_tmp.
    ENDIF.
    APPEND item.
  ENDLOOP.

  IF h_selec = no.
    MESSAGE i011.
  ELSE.
    REFRESH back.
    dfel-filld = '1'.
    dfel-brdon = '1'.
    CLEAR g_ttext.
    g_ttext-typ     = tstct-ttext.
    g_ttext-filler = ':'.
    g_ttext-seltext = text-204.
    CONDENSE g_ttext.

*--- Legende aufbauen ----------------------------------------------*
    lgel-itemno = 1.
    lgel-txt = text-201.
    lgel-dur = 60 * 60 * 24 * 5.
    lgel-bakgr = 'BLUE'.
    lgel-heigh = 4.
    lgel-place = 'CENTER'.
    APPEND lgel.
    lgel-itemno = 1.
    lgel-txt = text-202.
    lgel-dur = 60 * 60 * 24 * 5.
    lgel-bakgr = 'RED'.
    lgel-heigh = 4.
    lgel-place = 'CENTER'.
    APPEND lgel.
    lgel-itemno = 1.
    lgel-txt = text-203.
    lgel-dur = 60 * 60 * 24 * 5.
    lgel-bakgr = 'GREEN'.
    lgel-heigh = 4.
    lgel-place = 'CENTER'.
    APPEND lgel.
    lgel-itemno = 1.                                        "497622
    lgel-txt = text-304.                                    "497622
    lgel-dur = 60 * 60 * 24 * 5.                            "497622
    lgel-bakgr = 'BLACK'.                                   "497622
    lgel-heigh = 4.                                         "497622
    lgel-place = 'CENTER'.                                  "497622
    APPEND lgel.                                            "497622
*--- PF-Status setzten (sichern inaktiv)
    CALL FUNCTION 'GRAPH_SET_CUA_STATUS'
      EXPORTING
        program      = 'SAPLIESC'
        status       = 'GANT'
      EXCEPTIONS
        inv_cua_info = 1
        OTHERS       = 2.
*--- Grafik aufrufen
    CALL FUNCTION 'GRAPH_GANTT'
         EXPORTING
              vgrid   = ' '
              hgrid   = 'X'
              tlength = h_strlen
              wheader = g_ttext        "Meldungen: Termin¨¹bersicht
              ttext   = text-205       "Meldungen
              legend  = text-206       "Legende
* (RSYNLINT)  TLENGTH = 40
              notxt   = space
              tunit   = 'D'
              dfel    = dfel
              dfms    = dfms
         TABLES
              item    = item
              mist    = mist
              elem    = elem
              lgms    = mist
              lgel    = lgel
              msgt    = back.
  ENDIF.

ENDFORM.                    "grafics_l

*---------------------------------------------------------------------*
*       FORM FILL_ELEM                                                *
*---------------------------------------------------------------------*
*       Grafik-Balken erstellen                                       *
*---------------------------------------------------------------------*
*  -->  F_ITEMNO               Itemnummer                             *
*  -->  F_TEXT                 Balkentext                             *
*  -->  F_DBEG                 Beginntag                              *
*  -->  F_TBEG                 Beginnuhrzeit                          *
*  -->  F_F_DUR                  Dauer
*  -->  F_UNIT                 Zeiteinheit Dauer                      *
*  -->  f_COL                  Farbe Balken                           *
*  -->  F_SIZE                 Gr##e Balken                           *
*  -->  F_POS                  Position Balken                        *
*---------------------------------------------------------------------*
FORM fill_elem USING f_itemno TYPE sytabix
                     f_text   TYPE char80
                     f_dbeg   TYPE d
                     f_tbeg   TYPE t
                     f_dur    TYPE sekunden
                     f_unit   TYPE char01
                     f_col    TYPE char20
                     f_size   TYPE char5
                     f_pos    TYPE char01.

  DATA: t TYPE t,
        d TYPE d.

  elem-itemno = f_itemno.
  elem-txt = f_text.
  d = f_dbeg.
  t = f_tbeg.
  elem-beg = ( d - date_null ) * 86400 + t.
  CASE f_unit.
    WHEN 'S'.
      elem-dur = f_dur.
    WHEN 'M'.
      elem-dur = f_dur * 60.
    WHEN 'H'.
      elem-dur = f_dur * 60 * 60.
    WHEN 'D'.
      elem-dur = f_dur * 60 * 60 * 24.
    WHEN 'W'.
      elem-dur = f_dur * 60 * 60 * 24 * 7.
    WHEN 'N'.
      elem-dur = f_dur * 60 * 60 * 24 * 30.
    WHEN 'Q'.
      elem-dur = f_dur * 60 * 60 * 24 * 90.
    WHEN 'Y'.
      elem-dur = f_dur * 60 * 60 * 24 * 365.
  ENDCASE.
  elem-bakgr = f_col.
  elem-heigh = f_size.
  CASE f_pos.
    WHEN 'U'.
      elem-place = 'OVER'.
    WHEN 'C'.
      elem-place = 'CENTER'.
    WHEN 'L'.
      elem-place = 'BELOW'.
  ENDCASE.
  CHECK elem-dur > 0.
  APPEND elem.
ENDFORM.                    "fill_elem
*&---------------------------------------------------------------------*
*&      Form  USE_CORRECT_QMART_F30.
*&---------------------------------------------------------------------*
*       Es sollen nur IH- bzw Service-Meldungen selekt. werden         *
*----------------------------------------------------------------------*
FORM use_correct_qmart_f30.

  DATA: inst LIKE tq80-qmtyp VALUE '01'.    "Instandhaltung
  DATA: serv LIKE tq80-qmtyp VALUE '03'.    "Service

  REFRESH: i_qmart.
  REFRESH: i_parvw.

  i_qmart-sign   = 'I'.
  i_qmart-option = 'EQ'.

  i_parvw-sign   = 'I'.
  i_parvw-option = 'EQ'.

  SELECT * FROM tq80 INTO TABLE t_tq80 WHERE qmart IN qmart
                                      AND ( qmtyp = inst
                                         OR qmtyp = serv ).

  IF NOT sy-subrc IS INITIAL.
    SELECT * FROM tq80 INTO TABLE t_tq80 WHERE qmtyp = inst
                                            OR qmtyp = serv.
  ENDIF.

  LOOP AT t_tq80.
    i_qmart-low = t_tq80-qmart.
    APPEND i_qmart.
    IF NOT t_tq80-parvw_int IS INITIAL.
      i_parvw-low = t_tq80-parvw_int.
      APPEND i_parvw.
    ENDIF.
    IF NOT t_tq80-parvw_vera IS INITIAL.
      i_parvw-low = t_tq80-parvw_vera.
      APPEND i_parvw.
    ENDIF.
  ENDLOOP.

  SORT t_tq80 BY qmart.

ENDFORM.                               " USE_CORRECT_QMART_f30.

*&---------------------------------------------------------------------*
*&      Form  HELP_F4_Group_F30
*&---------------------------------------------------------------------*
*       Eingabehilfe Codegruppenauswahl                                *
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM help_f4_group_f30 USING cat      LIKE tq80-fekat
                             gruppe   TYPE c
                             f_zeiger TYPE c.

  DATA: h_qpk1gr LIKE qpk1gr.

*--- Richtige Katalogart finden --------------------------------------*
  PERFORM find_proper_catalog_f10 USING cat f_zeiger.
*--- Aufruf FB zur Codegruppenauswahl --------------------------------*
  CALL FUNCTION 'QPK1_GP_GROUP_PICKUP'
    EXPORTING
      i_katalogart = cat
    IMPORTING
      e_qpk1gr     = h_qpk1gr
    EXCEPTIONS
      OTHERS       = 01.
  IF sy-subrc IS INITIAL.
    gruppe =  h_qpk1gr-codegruppe.
  ELSE.
    CLEAR cat.
  ENDIF.

ENDFORM.                    "help_f4_group_f30

*&---------------------------------------------------------------------*
*&      Form  HELP_F4_CODE_F30
*&---------------------------------------------------------------------*
*       Eingabehilfe Codeauswahl bei ausgew#hlter Codegruppe           *
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM help_f4_code_f30 USING cat     LIKE tq80-fekat
                            gruppe  TYPE c
                            code    TYPE c
                            feld    TYPE c.

  DATA: h_gruppe LIKE qpk1cd-codegruppe.
  DATA: h_qpk1cd LIKE qpk1cd.

*--- Richtige Katalogart finden --------------------------------------*
  IF cat IS INITIAL.
    PERFORM find_proper_catalog_f10 USING cat feld.
  ENDIF.
*--- Feld Codegruppe auf Dynpro gef¨¹llt? -----------------------------*
  PERFORM get_dynfeld_f30 USING gruppe feld.
*--- Codegruppe versorgt? --------------------------------------------*
  IF gruppe IS INITIAL.
    h_gruppe = '*'.
  ELSE.
    h_gruppe = gruppe.
  ENDIF.
*--- Aufruf FB zur Codegruppe/Codeauswahl ----------------------------*
  CALL FUNCTION 'QPK1_GP_CODE_PICKUP'
    EXPORTING
      i_katalogart = cat
      i_codegruppe = h_gruppe
    IMPORTING
      e_qpk1cd     = h_qpk1cd
    EXCEPTIONS
      OTHERS       = 01.
  IF sy-subrc IS INITIAL.
    gruppe =  h_qpk1cd-codegruppe.
    code   =  h_qpk1cd-code.
*--- Feld Codegruppe auf Dynpro versorgen ----------------------------*
    PERFORM set_dynfeld_f30 USING gruppe feld.
  ENDIF.

ENDFORM.                               " HELP_F4_CODE_F30

*---------------------------------------------------------------------*
*       FORM FIND_PROPER_CATALOG_F10                                  *
*---------------------------------------------------------------------*
*       Richtigen Katalog finden -> bei mehreren -> Popup             *
*---------------------------------------------------------------------*
*  -->  H_CAT                                                         *
*  -->  H_ZEIGER                                                      *
*---------------------------------------------------------------------*
FORM find_proper_catalog_f10 USING h_cat  LIKE tq80-fekat
                                   zeiger TYPE c.

  DATA: h_fields LIKE help_value OCCURS 0 WITH HEADER LINE.
  DATA: h_werte(40)              OCCURS 0 WITH HEADER LINE.

  DATA: BEGIN OF h_cat_tab OCCURS 0,
     katalog LIKE tq15t-katalogart.
  DATA: END OF h_cat_tab.

  DATA: h_line   LIKE sy-tabix.
  DATA: h_zeiger(2).

  REFRESH: h_cat_tab.
  CLEAR:   h_cat_tab.

*--- Wurde Meldungsart schon eingebeben -> Feld aus Dynpro holen ----*
  DESCRIBE TABLE qmart LINES sy-tabix.
  IF sy-tabix IS INITIAL.
    PERFORM get_dynfeld_f30 USING qmart-low
                                  'QMART-LOW'.
    IF NOT qmart-low IS INITIAL.
      qmart-sign = 'I'.
      qmart-option = 'EQ'.
      APPEND qmart.
    ENDIF.
  ENDIF.

  h_zeiger = zeiger.

*--- Katalog f¨¹r welchen Bereich ------------------------------------*
  CASE h_zeiger.
    WHEN 'FE'.                         "Fehlercodes
      SORT t_tq80 BY fekat.
      LOOP AT t_tq80 WHERE NOT fekat IS INITIAL AND
                               qmart IN qmart.
        IF t_tq80-fekat <> h_cat_tab-katalog.
          h_cat_tab-katalog = t_tq80-fekat. APPEND h_cat_tab.
        ENDIF.
      ENDLOOP.
    WHEN 'UR'.                         "Ursachencodes
      SORT t_tq80 BY urkat.
      LOOP AT t_tq80 WHERE NOT urkat IS INITIAL AND
                               qmart IN qmart.
        IF t_tq80-urkat <> h_cat_tab-katalog.
          h_cat_tab-katalog = t_tq80-urkat. APPEND h_cat_tab.
        ENDIF.
      ENDLOOP.
    WHEN 'OT'.                         "Ojectteilcodes
      SORT t_tq80 BY otkat.
      LOOP AT t_tq80 WHERE NOT otkat IS INITIAL AND
                               qmart IN qmart.
        IF t_tq80-otkat <> h_cat_tab-katalog.
          h_cat_tab-katalog = t_tq80-otkat. APPEND h_cat_tab.
        ENDIF.
      ENDLOOP.
    WHEN 'MN'.                         "Ma#nahmencodes
      SORT t_tq80 BY makat.
      LOOP AT t_tq80 WHERE NOT makat IS INITIAL AND
                               qmart IN qmart.
        IF t_tq80-makat <> h_cat_tab-katalog.
          h_cat_tab-katalog = t_tq80-makat. APPEND h_cat_tab.
        ENDIF.
      ENDLOOP.
    WHEN 'MF'.                         "T#tigkeitscodes
      SORT t_tq80 BY mfkat.
      LOOP AT t_tq80 WHERE NOT mfkat IS INITIAL AND
                               qmart IN qmart.
        IF t_tq80-mfkat <> h_cat_tab-katalog.
          h_cat_tab-katalog = t_tq80-mfkat. APPEND h_cat_tab.
        ENDIF.
      ENDLOOP.
    WHEN 'QM'.                         "Codierung Meldungskopf
      SORT t_tq80 BY sakat.
      LOOP AT t_tq80 WHERE NOT sakat IS INITIAL AND
                               qmart IN qmart.
        IF t_tq80-sakat <> h_cat_tab-katalog.
          h_cat_tab-katalog = t_tq80-sakat. APPEND h_cat_tab.
        ENDIF.
      ENDLOOP.
  ENDCASE.
*--- Unterschiedliche Katalogarten pro Meldungsart zugeordnet? ------*
  DESCRIBE TABLE h_cat_tab LINES h_line.
  CASE h_line.
    WHEN space.
*--- Keine Kataloge zugeordnet --------------------------------------*
      h_cat = space.
      EXIT.
    WHEN '1'.
*--- Nur ein Katalog zugeordnet -------------------------------------*
      READ TABLE h_cat_tab INDEX 1.
      h_cat = h_cat_tab-katalog.
    WHEN OTHERS.
*--- unterschiedliche Kataloge pro Meldungsart? ---------------------*
*--- Tabellen f¨¹r Auswahlpopup f¨¹llen -------------------------------*
      LOOP AT h_cat_tab.
        LOOP AT t_tq15t WHERE katalogart = h_cat_tab-katalog.
          h_werte = t_tq15t-katalogart.
          APPEND h_werte.
          h_werte = t_tq15t-katalogtxt.
          APPEND h_werte.
          h_werte = t_tq15t-schlagwort.
          APPEND h_werte.
        ENDLOOP.
      ENDLOOP.
      CLEAR h_fields.
      h_fields-tabname    = 'TQ15T'.
      h_fields-fieldname  = 'KATALOGART'.
      h_fields-selectflag = 'X'.
      APPEND h_fields.
      h_fields-fieldname  = 'KATALOGTXT'.
      h_fields-selectflag = ' '.
      APPEND h_fields.
      h_fields-fieldname  = 'SCHLAGWORT'.
      APPEND h_fields.
*--- Auswahlpopup aufrufen ------------------------------------------*
      CALL FUNCTION 'HELP_VALUES_GET_WITH_TABLE'
        EXPORTING
          tabname      = 'TQ15T'
        IMPORTING
          select_value = h_cat
        TABLES
          fields       = h_fields
          valuetab     = h_werte
        EXCEPTIONS
          OTHERS       = 1.
  ENDCASE.

ENDFORM.                    "find_proper_catalog_f10
*&---------------------------------------------------------------------*
*&      Form  PRE_READ_CATALOG_F30
*&---------------------------------------------------------------------*
*       Katalogarten werden gelesen                                    *
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM pre_read_catalog_f30.

  SELECT * FROM tq15t INTO TABLE t_tq15t
                      WHERE sprache  = sy-langu.

ENDFORM.                               " PRE_READ_CATALOG_F30

*---------------------------------------------------------------------*
*       FORM GET_DYNFELD_F30                                          *
*---------------------------------------------------------------------*
*       Feldinhalt aus Dynpro holen                                   *
*---------------------------------------------------------------------*
*  -->  FELD_VALUE                                                    *
*  -->  FELD                                                          *
*---------------------------------------------------------------------*
FORM get_dynfeld_f30 USING feld_value TYPE c
                           feld       TYPE c.

  DATA: BEGIN OF h_dynpfields OCCURS 0.
          INCLUDE STRUCTURE dynpread.
  DATA: END OF h_dynpfields.

  h_dynpfields-fieldname = feld.
  APPEND h_dynpfields.

  CALL FUNCTION 'DYNP_VALUES_READ'
    EXPORTING
      dyname     = sy-cprog
      dynumb     = sy-dynnr
    TABLES
      dynpfields = h_dynpfields
    EXCEPTIONS
      OTHERS     = 1.

  IF sy-subrc IS INITIAL.
    READ TABLE h_dynpfields WITH KEY fieldname = feld.
    IF h_dynpfields-fieldvalue IS INITIAL.
      CLEAR feld_value.
    ELSE.
      SET LOCALE LANGUAGE sy-langu.
      TRANSLATE h_dynpfields-fieldvalue TO UPPER CASE.   "#EC TRANSLANG
      feld_value = h_dynpfields-fieldvalue.
    ENDIF.
  ENDIF.

ENDFORM.                    "get_dynfeld_f30
*---------------------------------------------------------------------*
*       FORM SET_DYNFELD_F30                                          *
*---------------------------------------------------------------------*
*       Feldinhalt ins Dynpro stellen                                 *
*---------------------------------------------------------------------*
*  -->  FELD                                                          *
*---------------------------------------------------------------------*
FORM set_dynfeld_f30 USING feld_value TYPE c
                           feld       TYPE c.

  DATA: BEGIN OF h_dynpfields OCCURS 0.
          INCLUDE STRUCTURE dynpread.
  DATA: END OF h_dynpfields.

  h_dynpfields-fieldname = feld.
  h_dynpfields-fieldvalue = feld_value.
  APPEND h_dynpfields.

  CALL FUNCTION 'DYNP_VALUES_UPDATE'
    EXPORTING
      dyname     = sy-cprog
      dynumb     = sy-dynnr
    TABLES
      dynpfields = h_dynpfields
    EXCEPTIONS
      OTHERS     = 1.

ENDFORM.                    "set_dynfeld_f30
*&---------------------------------------------------------------------*
*&      Form  GET_QMNUM_FROM_IHPA_F30
*&---------------------------------------------------------------------*
*       Meldungen ¨¹ber Objektnummern aus IHPA ermitteln                *
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
*FORM get_qmnum_from_ihpa_f30.                                  "1086217
FORM get_qmnum_from_ihpa_f30 changing ep_no_partners type xfeld."1086217

  DATA: BEGIN OF h_objnr_tab OCCURS 0, "F¨¹r Partnerselektion
          objnr LIKE qmel-objnr,
        END OF h_objnr_tab.

  DATA: BEGIN OF h_ionra.
          INCLUDE STRUCTURE ionra.
  DATA: END OF h_ionra.

  RANGES: lr_qmnum FOR qmel-qmnum.

  clear ep_no_partners.                                         "1086217

* g_par_dbcnt = 2000.                                   "Note_1633875
  g_par_dbcnt = 10000.                                  "Note_1633875
  SELECT objnr FROM ihpa UP TO g_par_dbcnt ROWS
                     INTO TABLE h_objnr_tab
                     WHERE parnr = dy_parnr
                     AND   parvw = dy_parvw
                     AND   obtyp = 'QMI'
                     AND   kzloesch = ' '.

*--- Treffermenge pr¨¹fen
  IF sy-dbcnt = g_par_dbcnt.
*--- Vorselektion bringt zu viele Treffer -> Nachselektion Partner
    CLEAR g_par_dbcnt.
    EXIT.
  ENDIF.

*--- sichern der Meldungsnummern
  lr_qmnum[] = qmnum[].
  REFRESH qmnum. CLEAR qmnum.
  qmnum-sign   = 'I'.
  qmnum-option = 'EQ'.

  LOOP AT h_objnr_tab.
*--- aus der Objectnummer wird die Meldungsnummer ermittelt ---------*
    CALL FUNCTION 'OBJECT_KEY_GET'
      EXPORTING
        i_objnr = h_objnr_tab-objnr
      IMPORTING
        e_ionra = h_ionra
      EXCEPTIONS
        OTHERS  = 1.

    IF sy-subrc IS INITIAL.
*--- Selektionsergebnis mit select-option abmischen ------------------*
      CHECK h_ionra-qmnum IN lr_qmnum.
      qmnum-low = h_ionra-qmnum.
      APPEND qmnum.
    ENDIF.
  ENDLOOP.

  IF qmnum[] IS INITIAL.
    ep_no_partners = 'X'.                                   "1086217
*--- es wurde nicht selektiert
    MESSAGE s047.
*   STOP.                                                    "1034462
    EXIT.                                                    "1034462
  ENDIF.

ENDFORM.                               " GET_QMNUM_FROM_IHPA_F30
*&---------------------------------------------------------------------*
*&      Form  GET_ADRESS_F30
*&---------------------------------------------------------------------*
*       postread adress data
*----------------------------------------------------------------------*
*      -->I_ADRNR  text
*      -->I_ADRNR_ILOA  text
*      -->I_KUNUM  text
*      -->E_NAME_LIST  text
*      -->E_POST_CODE1  text
*      -->E_CITY1  text
*      -->E_CITY2  text
*      -->E_COUNTRY  text
*      -->E_REGION  text
*      -->E_STREET  text
*      -->E_TEL_NUMBER  text
*----------------------------------------------------------------------*
FORM get_adress_f30 USING
                      i_objnr      LIKE viqmel-objnr
                      i_adrnr      LIKE viqmel-adrnr
                      i_adrnr_iloa LIKE viqmel-adrnr_iloa
                      i_kunum      LIKE viqmel-kunum
                      e_name_list  LIKE rihqmel-name_list
                      e_post_code1 LIKE rihqmel-post_code1
                      e_city1      LIKE rihqmel-city1
                      e_city2      LIKE rihqmel-city2
                      e_country    LIKE rihqmel-country
                      e_region     LIKE rihqmel-region
                      e_street     LIKE rihqmel-street
                      e_tel_number LIKE rihqmel-tel_number.

  IF NOT i_adrnr IS INITIAL.
    PERFORM get_adress_f17 USING i_adrnr
                                 e_tel_number
                                 e_name_list
                                 e_post_code1
                                 e_city1
                                 e_city2
                                 e_country
                                 e_region
                                 e_street.
  ELSEIF NOT i_adrnr_iloa IS INITIAL.
    PERFORM get_adress_f17 USING i_adrnr_iloa
                                 e_tel_number
                                 e_name_list
                                 e_post_code1
                                 e_city1
                                 e_city2
                                 e_country
                                 e_region
                                 e_street.
  ELSEIF NOT i_kunum IS INITIAL.
    PERFORM customer_adress_read_f17 USING i_objnr
                                           i_kunum
                                           e_tel_number
                                           e_name_list
                                           e_post_code1
                                           e_city1
                                           e_city2
                                           e_country
                                           e_region
                                           e_street.
  ENDIF.

ENDFORM.                               " GET_ADRESS_F30
*eject
*&---------------------------------------------------------------------*
*&      Form  DIMENSION_UNIT_F30
*&---------------------------------------------------------------------*
* Ermittlung der Dimension / Interne bzw Externe Einheit               *
* Interne Einheit immer in Sekunde
* Externe Einheit immer in stunden
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM dimension_unit_f30.

  DATA: h_dimid LIKE t006d-dimid.
  DATA: h_ltimex LIKE t006d-timex VALUE 1.
  DATA: h_lzaehl LIKE t006-zaehl VALUE 1.
  DATA: h_lnennr LIKE t006-nennr VALUE 1.

  REFRESH i_auszt.

*--- Dimension fuer Sekunde ermitteln --------------------------------*
  CALL FUNCTION 'FIND_BASE_DIMENSION'
    EXPORTING
      timex = h_ltimex
    IMPORTING
      dimid = h_dimid.

*--- Einheit fuer Sekunde ermitteln ----------------------------------*
  CALL FUNCTION 'FIND_BASE_UNIT'
    EXPORTING
      dimid          = h_dimid
      nennr          = h_lnennr
      zaehl          = h_lzaehl
    IMPORTING
      msehi          = g_imaueh
    EXCEPTIONS
      unit_not_found = 4.

*--- Einheit fuer Stunde  ermitteln ----------------------------------*
  h_lzaehl = 3600.
  CALL FUNCTION 'FIND_BASE_UNIT'
    EXPORTING
      dimid          = h_dimid
      nennr          = h_lnennr
      zaehl          = h_lzaehl
    IMPORTING
      msehi          = g_emaueh
    EXCEPTIONS
      unit_not_found = 4.

*--- Selektion nach Ausfalldauer -> Feld umrechnen in Sekunden ------*
  DESCRIBE TABLE eauszt LINES sy-tabix.
  CHECK NOT sy-tabix IS INITIAL.
  LOOP AT eauszt.
    i_auszt-sign   = eauszt-sign.
    i_auszt-option = eauszt-option.
    IF NOT eauszt-low IS INITIAL.
      CALL FUNCTION 'UNIT_CONVERSION_SIMPLE'
        EXPORTING
          input    = eauszt-low
          unit_in  = g_emaueh
          unit_out = g_imaueh
        IMPORTING
          output   = i_auszt-low
        EXCEPTIONS
          OTHERS   = 01.
    ENDIF.
    IF NOT eauszt-high IS INITIAL.
      CALL FUNCTION 'UNIT_CONVERSION_SIMPLE'
        EXPORTING
          input    = eauszt-high
          unit_in  = g_emaueh
          unit_out = g_imaueh
        IMPORTING
          output   = i_auszt-high
        EXCEPTIONS
          OTHERS   = 01.
    ENDIF.
    APPEND i_auszt.
  ENDLOOP.

ENDFORM.                               " DIMENSION_UNIT_F30
*---------------------------------------------------------------------*
*       FORM SET_LIGHTS_BY_DATE_f30                                   *
*---------------------------------------------------------------------*
*       set monitor based on date and time                            *
*---------------------------------------------------------------------*
*  -->  H_DATVON                                                      *
*  -->  H_TIMVON                                                      *
*  -->  H_DATBIS                                                      *
*  -->  H_TIMBIS                                                      *
*---------------------------------------------------------------------*
FORM set_lights_by_date_f30 USING h_datvon LIKE sy-datlo
                                  h_timvon LIKE sy-timlo
                                  h_datbis LIKE sy-datlo
                                  h_timbis LIKE sy-timlo
                         CHANGING e_lights TYPE c.

  IF h_datvon IS INITIAL AND h_datbis IS INITIAL.
    CLEAR e_lights.           " Keine Termine
  ELSE.
    IF sy-datlo < h_datvon OR
       ( sy-datlo = h_datvon AND
         sy-timlo < h_timvon ).
      e_lights = '3'.         "start nicht erreicht -> gr¨¹n
    ELSE.
      IF ( sy-datlo < h_datbis ) OR
         ( h_datbis IS INITIAL ) OR
         ( sy-datlo = h_datbis AND
           sy-timlo < h_timbis ).
        e_lights = '2'.       "ende nicht erreicht -> gelb
      ELSE.
        e_lights = '1'.       "ende erreicht -> rot
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    "set_lights_by_date_f30
*---------------------------------------------------------------------*
*       FORM SET_LIGHTS_BY_PRIO_F30                                   *
*---------------------------------------------------------------------*
*       set monitor based on priority                                 *
*---------------------------------------------------------------------*
FORM set_lights_by_prio_f30 USING    i_priok TYPE priok
                                     i_artpr TYPE artpr
                            CHANGING e_lights TYPE c.

  IF NOT i_priok IS INITIAL AND
     NOT i_artpr IS INITIAL.
*--- Farbe (1,2,3) wird aus t_t356 ¨¹bernommen ------------------------
    IF  t_t356-artpr = i_artpr AND
        t_t356-priok = i_priok.
      e_lights = t_t356-color.
    ELSE.
      READ TABLE t_t356 WITH KEY artpr = i_artpr
                                 priok = i_priok
                                 BINARY SEARCH.
      IF sy-subrc IS INITIAL.
        e_lights = t_t356-color.
      ENDIF.
    ENDIF.
  ELSE.
*--- keine Prio -> Ampel macht keinen Sinn --------------------------
    e_lights = '0'.
  ENDIF.

ENDFORM.                    "set_lights_by_prio_f30
*---------------------------------------------------------------------*
*       FORM CHECK_MONITOR_INPUT_F30                                  *
*---------------------------------------------------------------------*
*       proof base for monitorfunction                               *
*---------------------------------------------------------------------*
FORM check_monitor_input_f30.

  DATA h_count LIKE sy-tabix.

  IF NOT monitor IS INITIAL.
    READ TABLE g_monitor_tab WITH KEY counter = monitor.
    IF sy-subrc IS INITIAL.
      g_monitor_field = g_monitor_tab-fieldname.
      PERFORM fill_layout_lights_f14.
*      g_layout-lights_fieldname = 'LIGHTS'.
      IF g_monitor_field = 'PRIOK'.
        SELECT * FROM t356 INTO TABLE t_t356
            FOR ALL ENTRIES IN t_tq80
            WHERE artpr = t_tq80-artpr
            ORDER BY PRIMARY KEY.
        h_count = 1.
*--- die ersten drei Prio's pro priorit#tsart werden mit 1,2,3    --
*--- vorbelegt f¨¹r Ampelfunktion alle weiteren vorbelegt mit 3    --
        LOOP AT t_t356.
*--- bei gruppenwechsel zur¨¹cksetzten -------------------------------
          ON CHANGE OF t_t356-artpr.
            h_count = 1.
          ENDON.
          t_t356-color = h_count.
          MODIFY t_t356.
          IF h_count <> 3.
            h_count = h_count + 1.
          ENDIF.
        ENDLOOP.
      ENDIF.
      CALL FUNCTION 'IREP2_ALV_TOOLTIPS_FILL'
        EXPORTING
          i_monitor = g_monitor_field
        IMPORTING
          et_qinf   = gt_qinf.
    ENDIF.
  ENDIF.

ENDFORM.                    "check_monitor_input_f30
*---------------------------------------------------------------------*
*       FORM CREATE_MONITOR_TAB_F30                                   *
*---------------------------------------------------------------------*
*       Possible referencefields for monitorfunction (generall)       *
*---------------------------------------------------------------------*
FORM create_monitor_tab_f30.

  g_monitor_tab-counter = 1.
  g_monitor_tab-fieldname = 'PRIOK'.
  g_monitor_tab-textline  = text-mo1.
  APPEND g_monitor_tab.

  g_monitor_tab-counter = 2.
  g_monitor_tab-fieldname = 'STRMN'.
  g_monitor_tab-textline  = text-mo4.
  APPEND g_monitor_tab.

  PERFORM create_monitor_tab_l.

ENDFORM.                    "create_monitor_tab_f30
*---------------------------------------------------------------------*
*       FORM MONITOR_INPUTHELP_F30                                    *
*---------------------------------------------------------------------*
*       Bezugfeld f¨¹r Ampelfunktion in Liste ausw#hlen                *
*---------------------------------------------------------------------*
*  -->  P_MONITOR                                                     *
*---------------------------------------------------------------------*
FORM monitor_inputhelp_f30 USING p_monitor TYPE c.

  DATA: lt_return_tab TYPE dmc_ddshretval_table.
  DATA: BEGIN OF lt_monitor_tab OCCURS 5,
         counter  LIKE rihea-pm_selfield,
         textline LIKE rihea-pm_reffield,
        END OF lt_monitor_tab.

  FIELD-SYMBOLS: <return_tab> TYPE ddshretval.

  APPEND LINES OF g_monitor_tab TO lt_monitor_tab.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
*     DDIC_STRUCTURE         = ' '
      retfield               = 'COUNTER'
*     PVALKEY                = ' '
*     DYNPPROG               = ' '
*     DYNPNR                 = ' '
*     DYNPROFIELD            = ' '
*     STEPL                  = 0
      window_title           = text-f05
*     VALUE                  = ' '
      value_org              = 'S'
*     MULTIPLE_CHOICE        = ' '
*     DISPLAY                = ' '
*     CALLBACK_PROGRAM       = ' '
*     CALLBACK_FORM          = ' '
*     MARK_TAB               =
*   IMPORTING
*     USER_RESET             =
    TABLES
      value_tab              = lt_monitor_tab
*     FIELD_TAB              =
      return_tab             = lt_return_tab
*     DYNPFLD_MAPPING        =
    EXCEPTIONS
      parameter_error        = 1
      no_values_found        = 2
      OTHERS                 = 3
            .

  IF sy-subrc IS INITIAL.
    READ TABLE lt_return_tab ASSIGNING <return_tab> INDEX 1.
    IF sy-subrc IS INITIAL.
      p_monitor = <return_tab>-fieldval.
    ENDIF.
  ENDIF.

ENDFORM.                    "monitor_inputhelp_f30
*---------------------------------------------------------------------*
*       FORM CREATE_FIELDGROUPS_F30                                   *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM create_fieldgroups_f30.

  DATA h_fieldgroups TYPE slis_sp_group_alv.

  DATA lt_fieldcat   TYPE SLIS_T_FIELDCAT_ALV.               "1592818
  DATA lt_fieldgroup TYPE SLIS_T_SP_GROUP_ALV.               "1592818

  FIELD-SYMBOLS: <ls_fieldcat> TYPE slis_fieldcat_alv.

*--- create fieldgroups ---------------------------------------------*
*--- allgem.Daten Verwaltungsdaten
  h_fieldgroups-sp_group = 'A'.
  h_fieldgroups-text     = text-fg1.
  APPEND h_fieldgroups TO g_fieldgroups_tab.
*--- St#rungsdaten Anlagenverf¨¹gbarkeit -----------------------------*
  h_fieldgroups-sp_group = 'B'.
  h_fieldgroups-text     = text-fg2.
  APPEND h_fieldgroups TO g_fieldgroups_tab.
*--- Standortdaten Kontierung --------------------------------------*
  h_fieldgroups-sp_group = 'C'.
  h_fieldgroups-text     = text-fg3.
  APPEND h_fieldgroups TO g_fieldgroups_tab.
*--- Adressdata ----------------------------------------------------*
  h_fieldgroups-sp_group = 'D'.
  h_fieldgroups-text     = text-fg5.
  APPEND h_fieldgroups TO g_fieldgroups_tab.
*--- locally defined fieldgroups -----------------------------------*
  PERFORM create_fieldgroups_l.
*--- assign fields in g_fieldcat_tab to fieldgroups ----------------*
  LOOP AT g_fieldcat_tab ASSIGNING <ls_fieldcat>.
    CLEAR <ls_fieldcat>-sp_group.
    CASE <ls_fieldcat>-fieldname.
      WHEN 'MANDT'.
        <ls_fieldcat>-sp_group = 'A'.
        <ls_fieldcat>-tech     = g_x.
      WHEN 'QMNUM'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'OBJNR'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'QMART'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'TPLNR'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'PLTXT'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'EQUNR'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'EQKTX'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'STTXT'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'USTXT'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'AUFNR'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'QMDAT'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'QMTXT'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'ERNAM'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'ERDAT'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'ERZEIT'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'MZEIT'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'BEZDT'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'BEZUR'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'PRIOK'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'ARTPR'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'QMNAM'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'AENAM'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'AEDAT'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'AEZEIT'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'ARBPL'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'VAWRK'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'IWERK'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'INGRP'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'INSPK'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'DATAN'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'STRMN'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'STRUR'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'LTRMN'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'LTRUR'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'QMDAB'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'QMZAB'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'RBNR'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'BAUTL'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'KUNUM'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'VBELN'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'KDAUF'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'KDPOS'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'BSTNK'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'BSTDK'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'VKORG'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'VTWEG'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'SPART'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'WAERS'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'MATNR'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'SERIALNR'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'DEVICEID'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'MAKTX'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'BAUTLX'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'QMGRP'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'QMCOD'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'PAGESTAT'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'PRIOKX'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'KTXTGR'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'KTXTCD'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'INDTX'.
        <ls_fieldcat>-sp_group = 'A'.
      WHEN 'ARBPLWERK'.
        <ls_fieldcat>-sp_group = 'A'.

      WHEN 'MSAUS'.
        <ls_fieldcat>-sp_group = 'B'.
      WHEN 'AUSVN'.
        <ls_fieldcat>-sp_group = 'B'.
      WHEN 'AUSBS'.
        <ls_fieldcat>-sp_group = 'B'.
      WHEN 'AUZTV'.
        <ls_fieldcat>-sp_group = 'B'.
      WHEN 'AUZTB'.
        <ls_fieldcat>-sp_group = 'B'.
      WHEN 'BTPLN'.
        <ls_fieldcat>-sp_group = 'B'.
      WHEN 'BEQUI'.
        <ls_fieldcat>-sp_group = 'B'.
      WHEN 'AUSWK'.
        <ls_fieldcat>-sp_group = 'B'.
      WHEN 'EAUSZT'.
        <ls_fieldcat>-sp_group = 'B'.
      WHEN 'MAUEH'.
        <ls_fieldcat>-sp_group = 'B'.
      WHEN 'VERFV'.
        <ls_fieldcat>-sp_group = 'B'.
      WHEN 'VERFN'.
        <ls_fieldcat>-sp_group = 'B'.
      WHEN 'VERFM'.
        <ls_fieldcat>-sp_group = 'B'.
      WHEN 'ANLZV'.
        <ls_fieldcat>-sp_group = 'B'.
      WHEN 'ANLZN'.
        <ls_fieldcat>-sp_group = 'B'.
      WHEN 'ANLZE'.
        <ls_fieldcat>-sp_group = 'B'.

      WHEN 'ILOAN'.
        <ls_fieldcat>-sp_group = 'C'.
      WHEN 'SWERK'.
        <ls_fieldcat>-sp_group = 'C'.
      WHEN 'STORT'.
        <ls_fieldcat>-sp_group = 'C'.
      WHEN 'MSGRP'.
        <ls_fieldcat>-sp_group = 'C'.
      WHEN 'BEBER'.
        <ls_fieldcat>-sp_group = 'C'.
      WHEN 'ABCKZ'.
        <ls_fieldcat>-sp_group = 'C'.
      WHEN 'KOSTL'.
        <ls_fieldcat>-sp_group = 'C'.
      WHEN 'ANLUN'.
        <ls_fieldcat>-sp_group = 'C'.
      WHEN 'ANLNR'.
        <ls_fieldcat>-sp_group = 'C'.
      WHEN 'GSBER'.
        <ls_fieldcat>-sp_group = 'C'.
      WHEN 'BUKRS'.
        <ls_fieldcat>-sp_group = 'C'.

      WHEN 'ADRNR'.
        <ls_fieldcat>-sp_group = 'D'.
      WHEN 'NAME_LIST'.
        <ls_fieldcat>-sp_group = 'D'.
      WHEN 'TEL_NUMBER'.
        <ls_fieldcat>-sp_group = 'D'.
      WHEN 'POST_CODE1'.
        <ls_fieldcat>-sp_group = 'D'.
      WHEN 'CITY1'.
        <ls_fieldcat>-sp_group = 'D'.
      WHEN 'CITY2'.
        <ls_fieldcat>-sp_group = 'D'.
      WHEN 'COUNTRY'.
        <ls_fieldcat>-sp_group = 'D'.
      WHEN 'REGION'.
        <ls_fieldcat>-sp_group = 'D'.
      WHEN 'STREET'.
        <ls_fieldcat>-sp_group = 'D'.
      WHEN 'UII'.                                     "EHP603 IUID
        <ls_fieldcat>-tech = g_x.                     "EHP603 IUID
ENHANCEMENT-POINT EHP603_CREATE_FIELDGROUPS_F_01 SPOTS ES_MIOLXF30 INCLUDE BOUND .

      WHEN OTHERS.
        PERFORM assign_field_to_fieldgroup_l USING <ls_fieldcat>.
    ENDCASE.
  ENDLOOP.

* Start of note 1592818
*-call BAdI
  CALL BADI gb_badi_eam_singlelevel_int->change_fieldcatalog
    CHANGING
      ct_fieldcatalog   = lt_fieldcat
      ct_fieldgroup     = lt_fieldgroup.

   APPEND LINES OF lt_fieldgroup TO g_fieldgroups_tab.
   APPEND LINES OF lt_fieldcat   TO g_fieldcat_tab.
   SORT g_fieldcat_tab BY key DESCENDING.
* End of note 1592818

ENDFORM.                    "create_fieldgroups_f30
*---------------------------------------------------------------------*
*       FORM SET_OBJECT_TAB_LIGHTS_F30                                *
*---------------------------------------------------------------------*
*       maintain OBJECT_TAB-LIGHTS for monitorfunction                *
*---------------------------------------------------------------------*
FORM set_object_tab_lights_f30
                      CHANGING cs_object_tab LIKE LINE OF object_tab.

  CASE g_monitor_field.
    WHEN 'PRIOK'.                      "Prio
      PERFORM set_lights_by_prio_f30 USING    cs_object_tab-priok
                                              cs_object_tab-artpr
                                     CHANGING cs_object_tab-lights.

    WHEN 'STRMN'.                      "gew. Start
      PERFORM set_lights_by_date_f30 USING cs_object_tab-strmn
                                           cs_object_tab-strur
                                           cs_object_tab-ltrmn
                                           cs_object_tab-ltrur
                                  CHANGING cs_object_tab-lights.
    WHEN OTHERS.
      PERFORM set_object_tab_lights_l CHANGING cs_object_tab.
  ENDCASE.

ENDFORM.                    "set_object_tab_lights_f30
*&---------------------------------------------------------------------*
*&      Form  MONITOR_ON_OFF_F30
*&---------------------------------------------------------------------*
*       activate/inactivate Monitor function
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM monitor_on_off_f30 USING p_selfield TYPE slis_selfield.

  PERFORM get_fieldcat_actual_info_f14.

  IF monitor IS INITIAL.
*--- monitor is switched on
    PERFORM monitor_inputhelp_f30 USING monitor.
    CHECK NOT monitor IS INITIAL.
    PERFORM check_monitor_input_f30.
    PERFORM check_fieldcat_variant_l.
    PERFORM selection_l.
  ELSE.
*--- monitor is switched off
    LOOP AT object_tab.
      CLEAR object_tab-lights.
      MODIFY object_tab.
    ENDLOOP.
    CLEAR monitor.
    CLEAR g_layout-lights_fieldname.
    CLEAR g_monitor_field.
  ENDIF.

  PERFORM set_fieldcat_actual_f14.

ENDFORM.                               " MONITOR_ON_OFF_F30
*&---------------------------------------------------------------------*
*&      Form  CLEAR_FLAGS_F30
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM clear_flags_f30.

  CLEAR: g_sttxt_flag,
         g_arbpl_flag,
         g_eauszt_flag,
         g_stasl_flag,
         g_eqktx_flag,
         g_pltxt_flag,
         g_adres_flag,
         g_maktx_flag,
         g_priokx_flag,
         g_crhd_flag,
         g_qmfe_flag,
         g_qmcod_flag,
         g_mncod_flag,
         g_fecod_flag,
         g_macod_flag,
         g_otcod_flag,
         g_urcod_flag.


ENDFORM.                               " CLEAR_FLAGS_F30
*&---------------------------------------------------------------------*
*&      Form  SET_ALL_FLAGS_F30
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_all_flags_f30.

*--- wurde Feldcatalog importiert, Flags nicht automatisch setzen
  CHECK g_fieldcat_imp IS INITIAL.

  g_sttxt_flag  = yes.
  g_arbpl_flag  = yes.
  g_eqktx_flag  = yes.
  g_pltxt_flag  = yes.
  g_adres_flag  = yes.
  g_maktx_flag  = yes.
  g_page_flag   = yes.
  g_priokx_flag = yes.
  g_crhd_flag   = yes.
  g_qmfe_flag   = yes.
  g_qmcod_flag  = yes.
  g_mncod_flag  = yes.
  g_fecod_flag  = yes.
  g_macod_flag  = yes.
  g_otcod_flag  = yes.
  g_urcod_flag  = yes.

ENDFORM.                               " SET_ALL_FLAGS_F30
*&---------------------------------------------------------------------*
*&      Form  START_PREFETCH_F30
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM start_prefetch_f30.

*--- Prefetch Meldungspositionsdaten
  IF g_qmfe_flag = yes.
    PERFORM pre_read_qmfe_f30.
  ENDIF.
*--- prefetch Status -----------------------------------------------*
  IF g_sttxt_flag = yes OR g_stasl_flag = yes.
*--- merker pr¨¹fen, prefetch bereits erfolgt
    IF g_statbuf_flag IS INITIAL.
      CALL FUNCTION 'STATUS_PRE_READ'
        TABLES
          jsto_pre_tab = l_jsto_pre_tab.
    ENDIF.
  ENDIF.
*--- prefetch Arbeitsplatz -----------------------------------------*
  IF g_arbpl_flag = yes.
    CALL FUNCTION 'CR_WORKCENTER_PRE_READ'
      TABLES
        tarbid = l_tarbid.
    FREE l_tarbid.
  ENDIF.
*--- Bezeichnung Technischer Platz lesen ----------------------------*
  IF g_pltxt_flag = yes.
    CALL FUNCTION 'IREP1_LOCATION_TEXT_PRE_FETCH'
      TABLES
        tplnr_tab     = g_tplnr_tab
      EXCEPTIONS
        no_text_found = 1
        OTHERS        = 2.
  ENDIF.
*--- Bezeichung Equipment lesen -------------------------------------*
  IF g_eqktx_flag = yes.
    CALL FUNCTION 'IREP1_EQUIPMENT_TEXT_PRE_FETCH'
      TABLES
        equnr_tab     = g_equnr_tab
      EXCEPTIONS
        no_text_found = 1
        OTHERS        = 2.
  ENDIF.
*--- Bezeichnung Material lesen -------------------------------------*
  IF g_maktx_flag = yes.
    CALL FUNCTION 'IREP1_MATERIAL_TEXT_PRE_FETCH'
      TABLES
        matnr_tab     = g_matnr_tab
      EXCEPTIONS
        no_text_found = 1
        OTHERS        = 2.
  ENDIF.
*--- Adressen lesen -------------------------------------------------*
  IF g_adres_flag = yes.
*--- Spezielle Adresse bzw. Objektadresse lesen
    PERFORM pre_read_adrnr_f17.
*--- Adresse ¨¹ber Kundenstamm lesen
    PERFORM pre_read_adrnr_ihpa_f17
                         TABLES g_ihpap_tab.
  ENDIF.
*--- Prefetch Pagingstatus
  IF g_page_flag = yes.
    PERFORM prefetch_paging_f19.
  ENDIF.

ENDFORM.                               " START_PREFETCH_F30
*&---------------------------------------------------------------------*
*&      Form  CHECK_PRE_READ_F30
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_pre_read_f30.

*--- Statuszeile nachlesen ? ----------------------------------------*
  IF g_grstat IS INITIAL.
    PERFORM check_field_display_f14 USING 'STTXT' g_sttxt_flag.
    IF g_sttxt_flag <> yes.
      PERFORM check_field_display_f14 USING 'USTXT' g_sttxt_flag.
    ENDIF.
  ELSE.
    g_sttxt_flag = yes.
  ENDIF.
*--- externe Arbeitsplatzbez. nachlesen ? --------------------------*
  PERFORM check_field_display_f14 USING 'ARBPL' g_arbpl_flag.
  IF g_arbpl_flag <> yes.
    PERFORM check_field_display_f14 USING 'VAWRK' g_arbpl_flag.
  ENDIF.
*--- Range-Tab gef¨¹llt, prefetch nicht m#glich -> check n#tig
  IF g_crhd_flag = yes. g_arbpl_flag = yes. ENDIF.
*--- Equipmentbezeichnung nachlesen ? ------------------------------*
  PERFORM check_field_display_f14 USING 'EQKTX' g_eqktx_flag.
*--- Tech. Platzbezeichnung nachlesen ? ----------------------------*
  PERFORM check_field_display_f14 USING 'PLTXT' g_pltxt_flag.
*--- Adresse nachlesen ? -------------------------------------------*
  PERFORM check_adress_sel_necc_17.
*--- Materialbezeichung nachlesen? ----------------------------------*
  PERFORM check_field_display_f14 USING 'MAKTX' g_maktx_flag.
  IF g_maktx_flag <> yes.
    PERFORM check_field_display_f14 USING 'BAUTLX' g_maktx_flag.
  ENDIF.
*--- Pagingstatus nachlesen? ---------------------------------------*
  PERFORM check_field_display_f14 USING 'PAGESTAT' g_page_flag.
*--- Priori#tstext nachlesen?
  PERFORM check_field_display_f14 USING 'PRIOKX' g_priokx_flag.
*--- Text Codierung nachlesen?
  PERFORM check_field_display_f14 USING 'KTXTGR' g_qmcod_flag.
  IF g_qmcod_flag <> yes.
    PERFORM check_field_display_f14 USING 'KTXTCD' g_qmcod_flag.
  ENDIF.
*--- Text Ma#nahmenkatalog nachlesen?
  PERFORM check_field_display_f14 USING 'SMCODETEXT' g_mncod_flag.
  IF g_mncod_flag <> yes.
    PERFORM check_field_display_f14 USING 'SMGRPTEXT' g_mncod_flag.
  ENDIF.
*--- Text Fehlerkatalog nachlesen?
  PERFORM check_field_display_f14 USING 'FECODETEXT' g_fecod_flag.
  IF g_fecod_flag <> yes.
    PERFORM check_field_display_f14 USING 'FEGRPTEXT' g_fecod_flag.
  ENDIF.
*--- Text Objektkatalog nachlesen?
  PERFORM check_field_display_f14 USING 'OTCODETEXT' g_otcod_flag.
  IF g_otcod_flag <> yes.
    PERFORM check_field_display_f14 USING 'OTGRPTEXT' g_otcod_flag.
  ENDIF.
*--- Text Ursachenkatalog nachlesen?
  PERFORM check_field_display_f14 USING 'URCODETEXT' g_urcod_flag.
  IF g_urcod_flag <> yes.
    PERFORM check_field_display_f14 USING 'URGRPTEXT' g_urcod_flag.
  ENDIF.
*--- Text Aktionskatalog nachlesen?
  PERFORM check_field_display_f14 USING 'MACODETEXT' g_macod_flag.
  IF g_macod_flag <> yes.
    PERFORM check_field_display_f14 USING 'MAGRPTEXT' g_macod_flag.
  ENDIF.

ENDFORM.                               " CHECK_PRE_READ_F30
*&---------------------------------------------------------------------*
*&      Form  SET_FLAGS_OK_F30
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_flags_ok_f30.

  IF g_arbpl_flag = yes.
    g_arbpl_flag = ok.
  ENDIF.

  IF g_eqktx_flag = yes.
    g_eqktx_flag = ok.
  ENDIF.

  IF g_pltxt_flag = yes.
    g_pltxt_flag = ok.
  ENDIF.

  IF g_adres_flag = yes.
    g_adres_flag = ok.
  ENDIF.

  IF g_maktx_flag = yes.
    g_maktx_flag = ok.
  ENDIF.

  IF g_qmfe_flag = yes.
    g_qmfe_flag = ok.
  ENDIF.

  IF g_qmcod_flag = yes.
    g_qmcod_flag = ok.
  ENDIF.

  IF g_mncod_flag = yes.
    g_mncod_flag = ok.
  ENDIF.

  IF g_fecod_flag = yes.
    g_fecod_flag = ok.
  ENDIF.

  IF g_otcod_flag = yes.
    g_otcod_flag = ok.
  ENDIF.

  IF g_urcod_flag = yes.
    g_urcod_flag = ok.
  ENDIF.

  IF g_macod_flag = yes.
    g_macod_flag = ok.
  ENDIF.

ENDFORM.                               " SET_FLAGS_OK_F30
*eject
*----------------------------------------------------------------------
* FORM EXTERN_AUSZT_ERMITTELN_f30
*----------------------------------------------------------------------
* Externe / Interne dauer Umrechnen und ermitteln
*----------------------------------------------------------------------
FORM extern_auszt_ermitteln_f30 USING
                              f_iauszt TYPE auszt
                              f_oauszt TYPE eauszt
                              f_maueh  TYPE maueh.

  DATA: h_liauszt TYPE f.
  DATA: h_loauszt TYPE f.

*--- Alle Zeilen mit Eiheit Stunde ausgeben
  f_maueh  = g_emaueh.

  IF f_iauszt IS INITIAL.
    CLEAR f_oauszt.
    EXIT.
  ENDIF.

*--- data in FB-Naustein-kompatible Felder --------------------------*
  h_liauszt = f_iauszt.
  h_loauszt = f_oauszt.

*---- Konvertierung der Werte ----------------------------------------*
  CALL FUNCTION 'UNIT_CONVERSION_SIMPLE'
    EXPORTING
      input    = h_liauszt
      unit_in  = g_imaueh
      unit_out = g_emaueh
    IMPORTING
      output   = h_loauszt.

*--- Rueck-konvertierung ---------------------------------------------*
  f_iauszt = h_liauszt.
  f_oauszt = h_loauszt.

ENDFORM.                    "extern_auszt_ermitteln_f30
*&---------------------------------------------------------------------*
*&      Form  CHECK_SEL_STATI_F30
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_STAT  text
*      --> I_otyp      object type
*      <-- E_OBJ_FOUND Object for status found? Yes/No
*----------------------------------------------------------------------*
FORM check_sel_stati_f30 TABLES p_stat_ex
                         USING i_otyp      TYPE c
                               e_obj_found TYPE c.

  RANGES: h_qmnum FOR viqmel-qmnum.

  STATICS: h_once.

  STATICS: BEGIN OF h_qmnum2 OCCURS 0,
            sign(1),
            option(2),
            low  LIKE viqmel-qmnum,
            high LIKE viqmel-qmnum,
           END OF h_qmnum2.

  CLEAR e_obj_found.

  CHECK NOT stai1[] IS INITIAL.

  IF h_once IS INITIAL.
    h_qmnum2[] = qmnum[].
    h_once = g_x.
  ENDIF.

  PERFORM preselect_status_f22 TABLES stai1
                                      p_stat_ex
                                      h_qmnum
                               USING  i_otyp
                                      e_obj_found.

*--- nothing found or too many entries
  IF e_obj_found NE yes.
    EXIT.
  ENDIF.

*--- Select-option f¨¹r QMNUM f¨¹llen, vorhanden Eingrenzungen
*--- ber¨¹cksichtigen, Mehrfacheintr#ge l#schen
  CLEAR qmnum. REFRESH qmnum.

  LOOP AT h_qmnum WHERE low IN h_qmnum2.
    APPEND h_qmnum TO qmnum.
  ENDLOOP.

  IF qmnum[] IS INITIAL.
*--- es wurde nicht selektiert
    MESSAGE s047(ih).
    e_obj_found = no.
    EXIT.
  ELSE.
    e_obj_found = yes.
  ENDIF.

  SORT qmnum.
  DELETE ADJACENT DUPLICATES FROM qmnum.

ENDFORM.                               " CHECK_SEL_STATI_F30

*&---------------------------------------------------------------------*
*&      Form  READ_WORKCENTER_F30
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_OBJECT_TAB_ARBPL_I  text
*      -->P_OBJECT_TAB_ARBPL  text
*----------------------------------------------------------------------*
FORM read_workcenter_f30 USING    p_arbpli LIKE crhd-objid
                         CHANGING p_arbple LIKE crhd-arbpl
                                  p_werkse LIKE crhd-werks.

  CLEAR p_arbple.

  IF NOT p_arbpli IS INITIAL.
    CALL FUNCTION 'CR_WORKSTATION_READ'
      EXPORTING
        id        = p_arbpli
        msgty     = 'S'
      IMPORTING
        arbpl     = p_arbple
        werks     = p_werkse
      EXCEPTIONS
        not_found = 01.
    IF sy-subrc <> 0.
      CLEAR p_arbple.
    ENDIF.
  ENDIF.

ENDFORM.                               " READ_WORKCENTER_F30
*---------------------------------------------------------------------*
*       FORM pre_read_qmfe_f30                                        *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM pre_read_qmfe_f30.

  DATA h_qmfe_wa LIKE qmfe.
*--- check input
  CHECK NOT g_qmfe_sel_tab[] IS INITIAL.
*--- delete multiple entries
  SORT g_qmfe_sel_tab BY qmnum fenum.
  DELETE ADJACENT DUPLICATES FROM g_qmfe_sel_tab
                  COMPARING qmnum fenum.
*--- pre-fetch notification item data
  SELECT * FROM viqmfe2 INTO CORRESPONDING FIELDS OF h_qmfe_wa
    FOR ALL ENTRIES IN g_qmfe_sel_tab
        WHERE qmnum = g_qmfe_sel_tab-qmnum
        AND   fenum = g_qmfe_sel_tab-fenum.
    g_qmfe_data_tab = h_qmfe_wa.
    APPEND g_qmfe_data_tab.
    IF NOT h_qmfe_wa-bautl IS INITIAL.
      g_matnr_tab-matnr = h_qmfe_wa-bautl.
      APPEND g_matnr_tab.
    ENDIF.
  ENDSELECT.
*--- sort for binary search at later stage
  SORT g_qmfe_data_tab BY qmnum fenum.

ENDFORM.                    "pre_read_qmfe_f30
*---------------------------------------------------------------------*
*       FORM read_qmfe_f30                                            *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  p_qmnum                                                       *
*  -->  p_fenum                                                       *
*  -->  p_qmfe_wa                                                     *
*---------------------------------------------------------------------*
FORM read_qmfe_f30 USING    p_qmnum LIKE qmfe-qmnum
                            p_fenum LIKE qmfe-fenum
                   CHANGING p_qmfe_wa LIKE rihqmfe2
                            p_fekat   LIKE qmfe-fekat
                            p_otkat   LIKE qmfe-otkat
                            p_subrc   LIKE sy-subrc.

  CLEAR p_qmfe_wa.
*--- check input data
  IF p_qmnum IS INITIAL OR p_fenum IS INITIAL.
    EXIT.
  ENDIF.
*--- read item from pre-fetch table
  READ TABLE g_qmfe_data_tab WITH KEY qmnum = p_qmnum
                                      fenum = p_fenum
                                      BINARY SEARCH.
  p_subrc = sy-subrc.
  IF p_subrc IS INITIAL.
    MOVE-CORRESPONDING g_qmfe_data_tab TO p_qmfe_wa.
    MOVE g_qmfe_data_tab-bautl         TO p_qmfe_wa-bautl_itm.
    MOVE g_qmfe_data_tab-fekat         TO p_fekat.
    MOVE g_qmfe_data_tab-otkat         TO p_otkat.
  ELSE.
*--- read item from database
    SELECT SINGLE * FROM viqmfe2
                    INTO CORRESPONDING FIELDS OF g_qmfe_data_tab
                    WHERE qmnum = p_qmnum
                    AND   fenum = p_fenum.
    p_subrc = sy-subrc.
    IF p_subrc IS INITIAL.
      MOVE-CORRESPONDING g_qmfe_data_tab TO p_qmfe_wa.
      MOVE g_qmfe_data_tab-bautl         TO p_qmfe_wa-bautl_itm.
      MOVE g_qmfe_data_tab-fekat         TO p_fekat.
      MOVE g_qmfe_data_tab-otkat         TO p_otkat.
    ENDIF.
  ENDIF.

ENDFORM.                    "read_qmfe_f30

*&---------------------------------------------------------------------*
*&      Form  CHECK_ITEM_PRE_READ_F30
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_item_pre_read_f30.

*--- Meldungspositionsdaten nachlesen
  PERFORM check_field_display_f14 USING 'BAUTLX_ITM' g_qmfe_flag.
  IF g_qmfe_flag = yes. g_maktx_flag = yes. EXIT. ENDIF.
*--- Wird Katalog angezeigt mu# Position gelesen werden
  IF g_fecod_flag = yes. g_qmfe_flag = yes. EXIT. ENDIF.
  IF g_urcod_flag = yes. g_qmfe_flag = yes. EXIT. ENDIF.
  IF g_otcod_flag = yes. g_qmfe_flag = yes. EXIT. ENDIF.

  PERFORM check_field_display_f14 USING 'BAUTL_ITM' g_qmfe_flag.
  IF g_qmfe_flag = yes. EXIT. ENDIF.
  PERFORM check_field_display_f14 USING 'POSNR' g_qmfe_flag.
  IF g_qmfe_flag = yes. EXIT. ENDIF.
  PERFORM check_field_display_f14 USING 'FETXT' g_qmfe_flag.
  IF g_qmfe_flag = yes. EXIT. ENDIF.
  PERFORM check_field_display_f14 USING 'FEGRP' g_qmfe_flag.
  IF g_qmfe_flag = yes. EXIT. ENDIF.
  PERFORM check_field_display_f14 USING 'FECOD' g_qmfe_flag.
  IF g_qmfe_flag = yes. EXIT. ENDIF.
  PERFORM check_field_display_f14 USING 'OTGRP' g_qmfe_flag.
  IF g_qmfe_flag = yes. EXIT. ENDIF.
  PERFORM check_field_display_f14 USING 'OTEIL' g_qmfe_flag.
  IF g_qmfe_flag = yes. EXIT. ENDIF.
  PERFORM check_field_display_f14 USING 'FEQKLAS'   g_qmfe_flag.
  IF g_qmfe_flag = yes. EXIT. ENDIF.

ENDFORM.                               " CHECK_ITEM_PRE_READ_F30

*&---------------------------------------------------------------------*
*&      Form  STATUS_CHECK_F30
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM status_check_f30.

*--- Sortieren wegen binary search ----------------------------------*
  SORT g_fieldcat_tab BY fieldname.
*--- Statuszeile nachlesen ? ----------------------------------------*
  IF g_grstat IS INITIAL.
    PERFORM check_field_display_f14 USING 'STTXT' g_sttxt_flag.
    IF g_sttxt_flag <> yes.
      PERFORM check_field_display_f14 USING 'USTXT' g_sttxt_flag.
    ENDIF.
  ELSE.
    g_sttxt_flag = yes.
  ENDIF.
*--- Selektion Status inclusive/exclusisve -------------------------*
  DESCRIBE TABLE stai1 LINES g_stai1_lines.
  DESCRIBE TABLE stae1 LINES g_stae1_lines.
  IF g_stai1_lines IS INITIAL AND
     g_stae1_lines IS INITIAL.
  ELSE.
    g_stasl_flag = yes.
  ENDIF.
*--- prefetch Status, merker setzten --------------------------------*
  IF g_stasl_flag = yes OR g_sttxt_flag = yes.
    CALL FUNCTION 'STATUS_PRE_READ'
      TABLES
        jsto_pre_tab = l_jsto_pre_tab.
    g_statbuf_flag = yes.
  ELSE.
    g_statbuf_flag = space.
  ENDIF.
*--- Status Eintr#ge in Object_tab pr¨¹fen ggf. l#schen
*--- nachfolgende pre-fetch Tabellen neu aufbauen
  IF g_stasl_flag = yes.
    REFRESH: g_equnr_tab,
             g_tplnr_tab.
    LOOP AT object_tab.
*--- Statuspr¨¹fung
      PERFORM status_proof_l USING g_answer.
      IF g_answer = no.
        DELETE object_tab.
      ENDIF.
      CHECK g_answer = yes.
*--- Prefetchtabellen f¨¹r Authority check neu f¨¹llen
      IF NOT object_tab-equnr IS INITIAL.
        g_equnr_tab-equnr = object_tab-equnr.
        COLLECT g_equnr_tab.
      ENDIF.
      IF NOT object_tab-tplnr_int IS INITIAL.
        g_tplnr_tab-tplnr = object_tab-tplnr_int.
        COLLECT g_tplnr_tab.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.                               " STATUS_CHECK_F30
*&---------------------------------------------------------------------*
*&      Form  FILL_PREFETCH_TABS_F30
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM fill_prefetch_tabs_f30.

  FIELD-SYMBOLS: <ls_object_tab> LIKE LINE OF object_tab.

  SORT t_tq80 BY qmart.

  REFRESH: l_tarbid,
           g_equnr_tab,
           g_tplnr_tab,
           g_matnr_tab,
           g_bor_tab,
           g_ihpap_tab,
           g_adrnr_sel_tab.

  LOOP AT object_tab ASSIGNING <ls_object_tab>.
*--- Arbeitsplatz-ID
    IF NOT <ls_object_tab>-arbpl IS INITIAL.
      l_tarbid-mandt = sy-mandt.
      l_tarbid-objty = 'A'.
      l_tarbid-objid = <ls_object_tab>-arbpl_i.
      COLLECT l_tarbid.
    ENDIF.
*--- Bezugsobjektnummern in separater Tabelle w. Authority check -----*
    IF NOT <ls_object_tab>-equnr IS INITIAL.
      g_equnr_tab-equnr = <ls_object_tab>-equnr.
      COLLECT g_equnr_tab.
    ENDIF.
    IF NOT <ls_object_tab>-tplnr_int IS INITIAL.
      g_tplnr_tab-tplnr = <ls_object_tab>-tplnr_int.
      COLLECT g_tplnr_tab.
    ENDIF.
*--- Meldungs- bzw. Bezugsobjektadresse in prefetch-Tab stellen -----*
    IF NOT <ls_object_tab>-adrnr IS INITIAL.
      g_adrnr_sel_tab-addrnumber = <ls_object_tab>-adrnr.
      COLLECT g_adrnr_sel_tab.
    ELSEIF NOT <ls_object_tab>-adrnr_iloa IS INITIAL.
      g_adrnr_sel_tab-addrnumber = <ls_object_tab>-adrnr_iloa.
      COLLECT g_adrnr_sel_tab.
*--- Kundennummer Objectnummer in prefetch-Tab stellen --------------*
    ELSEIF NOT <ls_object_tab>-kunum IS INITIAL.
      g_ihpap_tab-objnr = <ls_object_tab>-objnr.
      g_ihpap_tab-parnr = <ls_object_tab>-kunum.
      IF viqmelst-qmart <> t_tq80-qmart.
        READ TABLE t_tq80 WITH KEY qmart = <ls_object_tab>-qmart
                               BINARY SEARCH.
      ENDIF.
      g_ihpap_tab-parvw = t_tq80-parvw_kund.
      COLLECT g_ihpap_tab.
    ENDIF.
*--- Materialnummer in prefetch-Tab stellen
    IF NOT <ls_object_tab>-matnr IS INITIAL.
      g_matnr_tab-matnr = <ls_object_tab>-matnr.
      COLLECT g_matnr_tab.
    ENDIF.
*--- Bauteil in prefetch-Tab stellen
    IF NOT <ls_object_tab>-bautl IS INITIAL.
      g_matnr_tab-matnr = <ls_object_tab>-bautl.
      COLLECT g_matnr_tab.
    ENDIF.
*--- Tabelle f¨¹r Pagingstatus f¨¹llen
    g_bor_tab-objkey = <ls_object_tab>-qmnum.
    IF t_tq80-qmart <> <ls_object_tab>-qmart.
      READ TABLE t_tq80 WITH KEY qmart = <ls_object_tab>-qmart
                             BINARY SEARCH.
    ENDIF.
    IF t_tq80-qmtyp = '01'. g_bor_tab-objtype = 'BUS2038'. ENDIF.
    IF t_tq80-qmtyp = '03'. g_bor_tab-objtype = 'BUS2080'. ENDIF.
    g_bor_tab-logsys = g_logsys.
    APPEND g_bor_tab.
  ENDLOOP.

ENDFORM.                               " FILL_PREFETCH_TABS_F30
*&---------------------------------------------------------------------*
*&      Form  POST_READ_PARNR_F30
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM post_read_parnr_f30.

  DATA: BEGIN OF ht_ihpa OCCURS 0,
          objnr LIKE ihpa-objnr,
        END OF ht_ihpa.
*--- Vorraussetzungen f¨¹r Nachselektion pr¨¹fen
  IF object_tab[] IS INITIAL.
    EXIT.
  ENDIF.
  IF dy_parnr IS INITIAL OR dy_parvw IS INITIAL.
    EXIT.
  ENDIF.
*--- Nachselektion Partner zum Object/Beleg
  SELECT objnr FROM ihpa INTO TABLE ht_ihpa
               FOR ALL ENTRIES IN object_tab
               WHERE   objnr     = object_tab-objnr
               AND     parvw     = dy_parvw
               AND     parnr     = dy_parnr
               AND     kzloesch  =  space.

  SORT ht_ihpa BY objnr.

  CLEAR l_jsto_pre_tab. REFRESH l_jsto_pre_tab.
*--- Object_tab aktualisieren
  LOOP AT object_tab.
    READ TABLE ht_ihpa WITH KEY objnr = object_tab-objnr
                                BINARY SEARCH.
    IF NOT sy-subrc IS INITIAL.
      DELETE object_tab.
    ELSE.
*--- Tabelle f¨¹r Status Check neu aufbauen
      l_jsto_pre_tab = object_tab-objnr.
      APPEND l_jsto_pre_tab.
    ENDIF.
  ENDLOOP.

ENDFORM.                               " POST_READ_PARNR_F30

*--- include f¨¹r Selektion Status inclusive
INCLUDE miolxf22.
*--- include f¨¹r Nachselektion Priorit#tstexte
INCLUDE miolxf23.
*--- include for BAL (Business-Application-Log)
INCLUDE rivci000.
*&---------------------------------------------------------------------*
*&      Form  CHECK_QMCOD_FOR_SELECTION_F30
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_qmcod_for_selection_f30.

  PERFORM check_field_for_selection_f14 USING 'KTXTGR' 'QMCOD'.
  PERFORM check_field_for_selection_f14 USING 'KTXTGR' 'QMGRP'.
  PERFORM check_field_for_selection_f14 USING 'KTXTGR' 'QMKAT'.
  PERFORM check_field_for_selection_f14 USING 'KTXTCD' 'QMCOD'.
  PERFORM check_field_for_selection_f14 USING 'KTXTCD' 'QMGRP'.
  PERFORM check_field_for_selection_f14 USING 'KTXTCD' 'QMKAT'.

ENDFORM.                               " CHECK_QMCOD_FOR_SELECTION_F30
*&---------------------------------------------------------------------*
*&      Form  PREPARE_DATA_F_DOWNLOAD_F30
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_UCOMM  text
*      -->P_P_SELFIELD  text
*----------------------------------------------------------------------*
FORM prepare_data_f_download_f30 USING p_ucomm    LIKE sy-ucomm
                                       p_selfield TYPE slis_selfield.

*--- check entries marked
  PERFORM check_object_tab_marked_f14 USING p_ucomm
                                             p_selfield.
*--- post read data
  LOOP AT object_tab WHERE selected = g_x.
    PERFORM select_for_quickinfo_l USING p_selfield.
  ENDLOOP.

ENDFORM.                               " PREPARE_DATA_F_DOWNLOAD_F30
*&---------------------------------------------------------------------*
*&      Form  link_notifications_to_order
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM link_notifications_to_order .

  DATA: BEGIN OF h_diqmel OCCURS 0.
          INCLUDE STRUCTURE diqmel.
  DATA: END OF h_diqmel.

  DATA: f_retc LIKE sy-subrc.

  DATA: idiqmel     LIKE diqmel OCCURS 0 WITH HEADER LINE,  "1146884
        return_code LIKE sy-subrc.                          "1146884

*--- flag order from notification
  DATA lv_no VALUE 'X'.                                     "1067644
  EXPORT lv_no TO MEMORY ID 'NO'.                           "1067644



  PERFORM auth_check_tcode_f16 USING 'IW34'
                               CHANGING f_retc.
  IF NOT f_retc IS INITIAL.
    EXIT.
  ENDIF.

  REFRESH h_diqmel.
  CLEAR   f_retc.
  LOOP AT object_tab WHERE selected = g_x.
    IF NOT object_tab-aufnr IS INITIAL.
      f_retc = 8.
    ENDIF.
    CLEAR h_diqmel.
    MOVE-CORRESPONDING object_tab TO h_diqmel.
    APPEND h_diqmel.
  ENDLOOP.
*--- Meldungen ausgew#hlt die bereits Auftr#gen zugeordnet sind
  IF NOT f_retc IS INITIAL.
    MESSAGE i121.
    EXIT.
  ENDIF.

  CALL FUNCTION 'IOPEXT_NOTIFS_FROM_LIST'
    TABLES
      it_diqmel = h_diqmel
    EXCEPTIONS
      OTHERS    = 2.

  IMPORT idiqmel return_code FROM MEMORY ID 'QMOB'.        "1146884
  LOOP AT object_tab WHERE selected = g_x.
    PERFORM fill_object_tab_late_l.
    EXPORT idiqmel return_code TO MEMORY ID 'QMOB'.        "1146884
  ENDLOOP.
  FREE MEMORY ID 'QMOB'.                                   "1146884

ENDFORM.                    " link_notifications_to_order
*&---------------------------------------------------------------------*
*&      Form  arch_popup_send
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_L_GOFORIT  text
*----------------------------------------------------------------------*
FORM arch_popup_send  USING p_exit LIKE sy-ucomm.

  RANGES: qmnum_range FOR qmih-qmnum.
  DATA:   l_follow_up_object.
  DATA:   l_ind_confirmation_date LIKE t399w-mpconfdate.
  TABLES: qmih.
  DATA:   schablone LIKE caufvd-objnr VALUE 'QM                    '.
  DATA:   l_t_object LIKE conf_objects OCCURS 0 WITH HEADER LINE.

  clear p_exit.                                                "1276064
*--- check whether the functionality related to the confirmation date
*    of a maintenance plan is active or not
*    (maintenance plan type; table t399w)
  CALL FUNCTION 'IWP3_GET_IND_CONFIRMATION_DATE'
    EXPORTING
      i_ind_one               = 'X'
    IMPORTING
      e_ind_confirmation_date = l_ind_confirmation_date.

  IF l_ind_confirmation_date EQ 'X'.
*--- at least one maintenance plan type with an active flag
*    "CONFIRMATION DATE" was found
  ELSE.
*--- no maintenance plan type with active flag found
*      CLEAR p_ind_linked_mplan.
    EXIT.
  ENDIF.

*--- fill object table with all marked entries
  LOOP AT object_tab WHERE selected = g_x.
*--- fill object tab with all marked entries
    l_t_object-qmnum = object_tab-qmnum.
    l_t_object-warpl = object_tab-warpl.
    APPEND l_t_object.
  ENDLOOP.

*--- clear and refresh data
  CLEAR g_riarch.
  CLEAR g_t_riarch. REFRESH g_t_riarch.

*--- leave to function
  CALL FUNCTION 'CO_I0_ARCH_POPUP'
    EXPORTING
      SOURCE         = 'IW28'
      nplda_inactive = l_follow_up_object    "knz. NPLDA ist offen
    IMPORTING
      riarch_exp     = g_riarch
    TABLES
      t_object       = l_t_object
      t_riarch       = g_t_riarch
    EXCEPTIONS
      escape         = 8.

  IF sy-subrc = 8.
    CLEAR g_riarch.
    CLEAR g_t_riarch.
    p_exit = '8'.
  ENDIF.

ENDFORM.                    " arch_popup_send
