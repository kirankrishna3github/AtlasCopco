*&---------------------------------------------------------------------*
*&  Include           RIVCI000                                         *
*&---------------------------------------------------------------------*
FORM init_bal.

  DATA  ls_loginfo_hw   TYPE bal_s_log.

*  letztes BAL l#schen, falls vorhanden
  IF NOT g_balloghndl_hw IS INITIAL.
    CALL FUNCTION 'BAL_GLB_MEMORY_REFRESH'
      EXPORTING
        i_refresh_all = 'X'.
  ENDIF.


* neuen BAl initialisieren
  CALL FUNCTION 'BAL_LOG_CREATE'
    EXPORTING
      i_s_log      = ls_loginfo_hw
    IMPORTING
      e_log_handle = g_balloghndl_hw.


ENDFORM.                    "INIT_BAL
*&---------------------------------------------------------------------*
*&      Form  COMMIT_BAL
*&---------------------------------------------------------------------*
FORM commit_bal.

  DATA: l_logprofil TYPE  bal_s_prof.

  CHECK g_msg_counter > 0.

* BAL ausgeben
  CALL FUNCTION 'BAL_DSP_PROFILE_POPUP_GET'
    IMPORTING
      e_s_display_profile = l_logprofil.

  CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
    EXPORTING
      i_s_display_profile = l_logprofil
    EXCEPTIONS
      no_data_available   = 1.

  CLEAR g_msg_counter.

  " I_T_LOG_HANDLE      = g_balloghndl_HW.

ENDFORM.                               " COMMIT_BAL
*&---------------------------------------------------------------------*
*&      Form  Memory_LIAR_clear
*&---------------------------------------------------------------------*

FORM memory_liar_clear.

  FREE MEMORY ID 'GI_VCI'.
  FREE MEMORY ID 'VCI_MSG'.

ENDFORM.                    "Memory_LIAR_clear
*&---------------------------------------------------------------------*
*&      Form  FILL_BAL
*&---------------------------------------------------------------------*
FORM fill_bal USING p_msg TYPE bal_s_msg.


  CALL FUNCTION 'BAL_LOG_MSG_ADD'
    EXPORTING
      i_log_handle = g_balloghndl_hw
      i_s_msg      = p_msg.

  g_msg_counter = g_msg_counter + 1.

ENDFORM.                    "FILL_BAL
