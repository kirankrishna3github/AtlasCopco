***INCLUDE MIOLXF14 .
*---------------------------------------------------------------------*
*       FORM DISPLAY_LIST_F14                                         *
*---------------------------------------------------------------------*
*       call listviewer                                               *
*---------------------------------------------------------------------*
FORM display_list_f14 USING f_ucomm LIKE sy-ucomm.

  DATA h_lines    LIKE sy-tabix.
  DATA h_selfield TYPE slis_selfield.

  IF g_variant_save = g_x.
*--- special case: report called from customizing -> always list-screen
    PERFORM call_listviewer_f14.
  ELSE.
*--- normal case: further processing depending of hits ---------------
    DESCRIBE TABLE object_tab LINES h_lines.
    CASE h_lines.
      WHEN 0.
        IF sy-binpt = g_x AND g_selmod <> selmod_d.
*--- Report called via batch-input -> show list always
          PERFORM call_listviewer_f14.
        ELSE.
          MESSAGE s047(ih).
          ind_empty = 'X'.
          EXPORT sel_tab ind_empty TO MEMORY ID sy-repid.
        ENDIF.
      WHEN 1.
*--- Index auf erste Zeile Setzten
        READ TABLE object_tab INDEX 1. g_index = 1.
        IF f_ucomm IS INITIAL AND g_selmod NE selmod_d.
*--- one line will be displayed --------------------------------------
          PERFORM call_listviewer_f14.
        ELSE.
          PERFORM mark_all_f16.
*--- Batch-Input
          IF sy-binpt = g_x.
*--- Selection-mode -> put hit into memory, leave programm
            IF g_selmod = selmod_1 OR
               g_selmod = selmod_x OR
               g_selmod = selmod_d.
              PERFORM select_object_f16 USING f_ucomm
                                              h_selfield.
            ELSE.
*--- display-mode -> show list with one hit
              CLEAR g_event_exit_tab. REFRESH g_event_exit_tab.
              PERFORM call_listviewer_f14.
            ENDIF.
          ENDIF.
*--- Program run in Batch-Job without Batch-Input -> show list  -----
          IF sy-binpt IS INITIAL AND sy-batch = g_x.
            IF  g_selmod = selmod_1 OR                "N1100384
                g_selmod = selmod_d.
              PERFORM select_object_f16 USING f_ucomm h_selfield.
            ELSE.
              PERFORM call_listviewer_f14.
            ENDIF.
          ENDIF.
*--- ordinary online report show list or jump into transaction--------
          IF sy-binpt IS INITIAL AND sy-batch IS INITIAL.
            IF g_selmod = selmod_0 OR g_selmod = selmod_s.
              PERFORM fcodes_with_mark_f16 USING f_ucomm h_selfield.
              IF sy-calld IS INITIAL OR g_selmod = selmod_s.
                EXIT.
              ENDIF.
            ELSE.
              PERFORM select_object_f16 USING f_ucomm h_selfield.
            ENDIF.
          ENDIF.
        ENDIF.
      WHEN OTHERS.
*--- several hits -> put list into memory leave programm ------------
        IF g_selmod = selmod_d.
          PERFORM mark_all_f16.
          PERFORM select_object_f16 USING f_ucomm h_selfield.
        ELSE.
          PERFORM call_listviewer_f14.
        ENDIF.
    ENDCASE.
  ENDIF.

ENDFORM.                    "display_list_f14

*---------------------------------------------------------------------*
*       FORM CALL_LISTVIEWER_F14                                      *
*---------------------------------------------------------------------*
*       Call SALV                                                     *
*---------------------------------------------------------------------*
FORM call_listviewer_f14.

  GET PARAMETER ID 'Q_ALV_GRID_INACTIVE' FIELD g_grid.
*--- call customer function to change ALV settings
  CALL FUNCTION 'IREP1_CHANGE_SETTINGS_ALV'
    EXPORTING
      is_repid            = g_repid
      is_variant          = g_variant
      is_form_top_of_page = 'TOP_OF_PAGE_F14'
    CHANGING
      i_grid_inactive     = g_grid
      is_layout           = g_layout
      is_print            = g_print
      it_fieldcat         = g_fieldcat_tab[]
      it_special_groups   = g_fieldgroups_tab[]
      it_list_commentary  = g_listheader_tab[]
      it_event_tab        = g_events_tab[].
*--- call list viewer
  IF g_grid IS INITIAL.
    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
         EXPORTING
              i_buffer_active          = g_alv_buffer
              i_callback_program       = g_repid
              i_callback_pf_status_set =  g_form_set_pf_stat
*           I_CALLBACK_USER_COMMAND  = ' '
*           I_STRUCTURE_NAME         =
              is_layout                = g_layout
              it_fieldcat              = g_fieldcat_tab[]
*           it_excluding             =
              it_special_groups        = g_fieldgroups_tab[]
              it_sort                  = g_sortfields_tab[]
*           it_filter                =
*           is_sel_hide              =
              i_default                = g_n
*              i_save                   = g_variant_save
              i_save                   = g_a
              is_variant               = g_variant
              it_events                = g_events_tab[]
              it_event_exit            = g_event_exit_tab[]
              is_print                 = g_print
              i_screen_start_column    = g_screen_start_column
              i_screen_start_line      = g_screen_start_line
              i_screen_end_column      = g_screen_end_column
              i_screen_end_line        = g_screen_end_line
              it_except_qinfo          = gt_qinf
*      importing
*           e_exit_caused_by_caller  =
         TABLES
              t_outtab                 =  object_tab
         EXCEPTIONS
              program_error            = 1
              OTHERS                   = 2.
    IF NOT sy-subrc IS INITIAL.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ELSE.
    CALL FUNCTION 'REUSE_ALV_LIST_DISPLAY'
         EXPORTING
              i_buffer_active          = g_alv_buffer
              i_callback_program       = g_repid
*           I_CALLBACK_PF_STATUS_SET = ' '
*           I_CALLBACK_USER_COMMAND  = ' '
*           I_STRUCTURE_NAME         =
              is_layout                = g_layout
              it_fieldcat              = g_fieldcat_tab[]
*           it_excluding             =
              it_special_groups        = g_fieldgroups_tab[]
              it_sort                  = g_sortfields_tab[]
*           it_filter                =
*           is_sel_hide              =
              i_default                = g_n
*              i_save                   = g_variant_save
              i_save                   = g_a
              is_variant               = g_variant
              it_events                = g_events_tab[]
              it_event_exit            = g_event_exit_tab[]
              is_print                 = g_print
              i_screen_start_column    = g_screen_start_column
              i_screen_start_line      = g_screen_start_line
              i_screen_end_column      = g_screen_end_column
              i_screen_end_line        = g_screen_end_line
              it_except_qinfo          = gt_qinf
*      importing
*           e_exit_caused_by_caller  =
         TABLES
              t_outtab                 =  object_tab
         EXCEPTIONS
              program_error            = 1
              OTHERS                   = 2.
    IF NOT sy-subrc IS INITIAL.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDIF.

ENDFORM.                    "call_listviewer_f14

*---------------------------------------------------------------------*
*       FORM PREPARE_DISPLAY_LIST_F14                                 *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM prepare_display_list_f14.

  PERFORM fill_events_f14.
  PERFORM fill_event_exit_tab_f14.
  PERFORM fill_layout_f14.

*--- get default tooltips for symbols and traffic lights
  CALL FUNCTION 'IREP2_ALV_TOOLTIPS_FILL'
    IMPORTING
      et_qinf = gt_qinf.

ENDFORM.                    "prepare_display_list_f14

*---------------------------------------------------------------------*
*       FORM VARIANT_INIT_F14                                         *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM variant_init_f14 USING handle    TYPE slis_handl
                            log_group TYPE slis_loggr
                            text      TYPE slis_varbz.

  DATA l_itobcust LIKE itobcust.

  CLEAR g_variant.

  g_repid              = sy-repid.
  g_variant-report     = g_repid.
  g_variant-handle     = handle.
  g_variant-log_group  = log_group.
  g_variant-text       = text.
  g_variant-username   = sy-uname.

*--- Wenn Report aus Customizing gerufen dann Globale Varianten aktiv
  IMPORT g_variant_save FROM MEMORY ID 'G_VARIANT_SAVE'.
  IF NOT sy-subrc IS INITIAL.
    g_variant_save = g_u.
  ENDIF.
*--- mit diesem FB wird '--' nicht als Linie dargestellt
  CALL FUNCTION 'LIST_ALLOW_SEQUENCE_OF_HYPHENS'
    EXCEPTIONS
      OTHERS = 1.

*   when alternativ labeling is activ/deactiv use special views
  CALL FUNCTION 'ILOX_ITOBCUST_READ'
    IMPORTING
      e_itobcust     = l_itobcust
    EXCEPTIONS
      not_maintained = 1
      OTHERS         = 2.

  IF l_itobcust-state NE '1'.
    g_altern_act = g_x.
    IF l_itobcust-alcnv NE g_x AND
               g_selmod NE selmod_d.
      MESSAGE s518(il).
    ENDIF.
  ENDIF.

ENDFORM.                    "variant_init_f14

*---------------------------------------------------------------------*
*       FORM GET_DEFAULT_VARIANT_F14                                  *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM get_default_variant_f14 USING p_variant LIKE g_variant-variant.

  gx_variant = g_variant.
  CLEAR gx_variant-variant.
  CLEAR gx_variant-text.

  IF NOT p_variant IS INITIAL.
    gx_variant-variant = p_variant.
  ENDIF.

  CALL FUNCTION 'REUSE_ALV_VARIANT_DEFAULT_GET'
    EXPORTING
      i_save        = g_variant_save
    CHANGING
      cs_variant    = gx_variant
    EXCEPTIONS
      wrong_input   = 1
      not_found     = 2
      program_error = 3
      OTHERS        = 4.

  CASE sy-subrc.
    WHEN 0.
      p_variant = gx_variant-variant.
    WHEN 2.
      CLEAR p_variant.
  ENDCASE.

ENDFORM.                    "get_default_variant_f14

*---------------------------------------------------------------------*
*       FORM VARIANT_INPUTHELP_F14                                    *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM variant_inputhelp_f14 USING p_variant LIKE g_variant-variant.

  DATA h_exit.
 DATA: lt_objects TYPE table of VANZ,      "N1240297
       lt_valutab TYPE table of RSPARAMS.  "N1240297
 DATA: ls_objects TYPE VANZ.               "N1240297


  CLEAR gx_variant.

  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
       EXPORTING
            is_variant          = g_variant
*           I_TABNAME_HEADER    =
*           I_TABNAME_ITEM      =
*           IT_DEFAULT_FIELDCAT =
            i_save              = g_variant_save
       IMPORTING
            e_exit              = h_exit
            es_variant          = gx_variant
        EXCEPTIONS
            not_found           = 1
            program_error       = 2
            OTHERS              = 3.

  IF sy-subrc IS INITIAL AND h_exit IS INITIAL.
*  Start Note1240297
 CALL FUNCTION 'RS_VARIANT_CONTENTS'
  EXPORTING
    report                      = sy-repid
    variant                     = SY-SLSET
*   MOVE_OR_WRITE               = 'W'
*   NO_IMPORT                   = ' '
*   EXECUTE_DIRECT              = ' '
* IMPORTING
*   SP                          =
  tables
*   L_PARAMS                    =
*   L_PARAMS_NONV               =
*   L_SELOP                     =
*   L_SELOP_NONV                =
    valutab                     = lt_valutab
    OBJECTS                     = lt_objects
*   FREE_SELECTIONS_DESC        =
*   FREE_SELECTIONS_VALUE       =
 EXCEPTIONS
   VARIANT_NON_EXISTENT        = 1
   VARIANT_OBSOLETE            = 2
   OTHERS                      = 3
          .
IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.

READ TABLE lt_objects INTO ls_objects WITH KEY name = 'VARIANT'.
*Start Note 1313203
IF NOT SY-SUBRC IS INITIAL.
 READ TABLE lt_objects INTO ls_objects WITH KEY name = 'SP_VARI'.
ENDIF.
*End Note 1313203
 IF ls_objects-protected IS INITIAL.
    g_variant-variant = gx_variant-variant.
    p_variant         = gx_variant-variant.
 ENDIF.
  ELSE.
    MESSAGE ID sy-msgid TYPE 'S'
                 NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
*  End Note1240297
ENDFORM.                    "variant_inputhelp_f14

*---------------------------------------------------------------------*
*       FORM FILL_EVENTS_F14                                          *
*---------------------------------------------------------------------*
*       assign forms to different events during list proccessing      *
*---------------------------------------------------------------------*
FORM fill_events_f14.

  DATA h_event       TYPE slis_alv_event.

  CALL FUNCTION 'REUSE_ALV_EVENTS_GET'
    EXPORTING
      i_list_type = 0
    IMPORTING
      et_events   = g_events_tab.

* Only allocate top-of-page if needed.
  IF NOT g_event_needed IS INITIAL.
*--- allocate form for top-of-page ----------------------------------*
    READ TABLE g_events_tab WITH KEY name = slis_ev_top_of_page
                          INTO h_event.
    IF sy-subrc = 0.
      MOVE g_form_top_of_page TO h_event-form.
      MODIFY g_events_tab FROM h_event INDEX sy-tabix.
    ENDIF.
  ENDIF.

*--- allocate form for user-command ---------------------------------*
  READ TABLE g_events_tab WITH KEY name = slis_ev_user_command
                        INTO h_event.
  IF sy-subrc = 0.
    MOVE g_form_user_command TO h_event-form.
    MODIFY g_events_tab FROM h_event INDEX sy-tabix.
  ENDIF.

*--- allocate form for set-pf-status---------------------------------*
  READ TABLE g_events_tab WITH KEY name = slis_ev_pf_status_set
                        INTO h_event.
  IF sy-subrc = 0.
    MOVE g_form_set_pf_stat TO h_event-form.
    MODIFY g_events_tab FROM h_event INDEX sy-tabix.
  ENDIF.

ENDFORM.                    "fill_events_f14
*---------------------------------------------------------------------*
*       FORM FILL_EVENT_EXIT_TAB_F14                                  *
*---------------------------------------------------------------------*
*       standard fcodes listviewer with affect to local programm      *
*---------------------------------------------------------------------*
FORM fill_event_exit_tab_f14.

  DATA h_event_exit_wa TYPE slis_event_exit.
*--- fcode get acual Variant via Icon -------------------------------*
  h_event_exit_wa-ucomm = g_ol0.
  h_event_exit_wa-after = g_x.
  APPEND h_event_exit_wa TO g_event_exit_tab.
*--- fcode select Variant -------------------------------------------*
  h_event_exit_wa-ucomm = g_oad.
  h_event_exit_wa-after = g_x.
  APPEND h_event_exit_wa TO g_event_exit_tab.
*--- fcode change actual variant ------------------------------------*
  h_event_exit_wa-ucomm = g_olx.
  h_event_exit_wa-after = g_x.
  APPEND h_event_exit_wa TO g_event_exit_tab.
*--- fcode show original list layout --------------------------------*
  h_event_exit_wa-ucomm = g_lis.
  h_event_exit_wa-after = g_x.
  APPEND h_event_exit_wa TO g_event_exit_tab.
*--- pf2 used by salv and also by application (dobble-click) --------*
  h_event_exit_wa-ucomm = g_ic1.
  h_event_exit_wa-after = g_x.
  APPEND h_event_exit_wa TO g_event_exit_tab.
*--- set/change filter on list --------------------------------------*
  h_event_exit_wa-ucomm = g_ilt.
  h_event_exit_wa-after = g_x.
  APPEND h_event_exit_wa TO g_event_exit_tab.
*--- fcode show Quickinfo -------------------------------------------*
  CLEAR h_event_exit_wa.
  h_event_exit_wa-ucomm  = g_eta.
  h_event_exit_wa-before = g_x.
  APPEND h_event_exit_wa TO g_event_exit_tab.
*--- fcode delete all markings --------------------------------------*
  h_event_exit_wa-ucomm  = g_sal.
  h_event_exit_wa-before = g_x.
  APPEND h_event_exit_wa TO g_event_exit_tab.

ENDFORM.                    "fill_event_exit_tab_f14
*---------------------------------------------------------------------*
*       FORM FILL_LAYOUT_F14                                          *
*---------------------------------------------------------------------*
*       generall layout info for list display                         *
*---------------------------------------------------------------------*
FORM fill_layout_f14.

  g_layout-box_fieldname        = 'SELECTED'.  "field for checkbox
  g_layout-get_selinfos         = g_x. "show selection screen
  g_layout-detail_popup         = g_x. "show detail via popup
  g_layout-detail_initial_lines = g_x. "all fields in detail
  g_layout-zebra                = g_x. "striped pattern

ENDFORM.                    "fill_layout_f14
*---------------------------------------------------------------------*
*       FORM FILL_LAYOUT_LIGHTS_F14                                   *
*---------------------------------------------------------------------*
*       Name of fields for lisghts + data element for F1-help
*---------------------------------------------------------------------*
FORM fill_layout_lights_f14.

  g_layout-lights_fieldname     = 'LIGHTS'.    " name of monitor field
  g_layout-lights_rollname      = 'QQMNOTLIGHTS'. "F1 help for monitor

ENDFORM.                    "fill_layout_lights_f14
*---------------------------------------------------------------------*
*       FORM CREATE_FIELDCAT_F14                                      *
*---------------------------------------------------------------------*
*       create g_fieldcat_tab for DDIC structure                      *
*---------------------------------------------------------------------*
*  -->  TABNAME  (DDIC-Structure for Report-Output)                   *
*---------------------------------------------------------------------*
FORM create_fieldcat_f14 USING tabname TYPE slis_tabname.

  DATA h_index       LIKE sy-tabix.

  FIELD-SYMBOLS: <ls_fieldcat> TYPE slis_fieldcat_alv.

ENHANCEMENT-SECTION     create_fieldcat_f14_01 SPOTS es_miolxf14 INCLUDE BOUND .
  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_program_name         = g_repid
      i_internal_tabname     = 'OBJECT_TAB'
      i_structure_name       = tabname
      i_client_never_display = ' '
    CHANGING
      ct_fieldcat            = g_fieldcat_tab[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.
END-ENHANCEMENT-SECTION.

  IF sy-subrc IS INITIAL.
    SORT g_fieldcat_tab BY key DESCENDING.
    h_index = 1.
    DO.
*--- make sure that no mandantory fields in list display ------------
      READ TABLE g_fieldcat_tab ASSIGNING <ls_fieldcat> INDEX h_index.
      IF sy-subrc IS INITIAL AND <ls_fieldcat>-key = g_x.
        <ls_fieldcat>-key = space.
        h_index = h_index + 1.
      ELSE.
        EXIT.
      ENDIF.
    ENDDO.
  ENDIF.
*--- add field for int. purposes to fieldcatalog
  PERFORM add_pm_selected_fieldcat_f14.

ENDFORM.                    "create_fieldcat_f14

*---------------------------------------------------------------------*
*       FORM UPDATE_FIELDCAT_VARIANT_F14                              *
*---------------------------------------------------------------------*
*       update fieldcat with variant input data                       *
*       create g_selfields_tab for dynamic select                     *
*---------------------------------------------------------------------*
FORM update_fieldcat_variant_f14.

  IF NOT g_variant-variant IS INITIAL.
    CALL FUNCTION 'REUSE_ALV_VARIANT_SELECT'
         EXPORTING
              i_dialog            = ' '
              i_user_specific     = g_x
              i_default           = ' '
*             I_TABNAME_HEADER    =
*             I_TABNAME_ITEM      =
              it_default_fieldcat = g_fieldcat_tab[]
              i_layout            = g_layout
         IMPORTING
*             E_EXIT              =
              et_fieldcat         = g_fieldcat_tab[]
              et_sort             = g_sortfields_tab[]
              et_filter           = g_filter_tab[]
         CHANGING
              cs_variant          = g_variant
         EXCEPTIONS
              wrong_input         = 1
              fc_not_complete     = 2
              not_found           = 3
              program_error       = 4
              OTHERS              = 5.

    IF sy-subrc IS INITIAL.
*--- create itab for dynamic select ----------------------------------
      PERFORM create_g_selfields_tab_f14.
    ENDIF.
  ENDIF.

ENDFORM.                    "update_fieldcat_variant_f14
*---------------------------------------------------------------------*
*       FORM import_fieldcat_f14                                      *
*---------------------------------------------------------------------*
*       import fieldcatalog via memory (for external call of report)  *
*---------------------------------------------------------------------*
FORM import_fieldcat_f14.

  DATA  h_fieldcat_tab  TYPE slis_t_fieldcat_alv.
  DATA: BEGIN OF h_mem_id,
          repid     LIKE sy-repid,
          fieldcat  TYPE char30 VALUE '_FIELDCAT',
        END OF h_mem_id.

  CLEAR g_fieldcat_imp.

*--- define memory id (<sy-repid>_fieldcat e.g. RIAUFK20_FIELDCAT)
  h_mem_id-repid = sy-repid.
  CONDENSE h_mem_id NO-GAPS.

*--- import fieldcatalog form memory-id (reportname)
  IMPORT h_fieldcat_tab FROM MEMORY ID h_mem_id.
  IF sy-subrc IS INITIAL.
    IF NOT h_fieldcat_tab[] IS INITIAL.
*--- set global indicator
      g_fieldcat_imp   = g_x.
      g_fieldcat_tab[] = h_fieldcat_tab[].
*--- create itab for dynamic select
      PERFORM create_g_selfields_tab_f14.
    ENDIF.
  ENDIF.

ENDFORM.                    "import_fieldcat_f14
*---------------------------------------------------------------------*
*       FORM GET_FIELDCAT_ACTUAL_F14                                  *
*---------------------------------------------------------------------*
*       modify g_fieldcat_tab with acual setting (display off/on)     *
*---------------------------------------------------------------------*
FORM get_fieldcat_actual_f14 USING h_change LIKE sy-ucomm.

  DATA h_fieldcat_tab LIKE g_fieldcat_tab.
  DATA h_fieldcat_wa1 TYPE slis_fieldcat_alv.
  DATA h_fieldcat_wa2 TYPE slis_fieldcat_alv.
  DATA h_index LIKE sy-tabix.

  h_fieldcat_tab[] = g_fieldcat_tab[].

  CLEAR h_change.

  PERFORM get_fieldcat_actual_info_f14.

  SORT h_fieldcat_tab BY fieldname.
  SORT g_fieldcat_tab BY no_out ASCENDING.
  h_index = 1.
  DO.
    READ TABLE g_fieldcat_tab INTO h_fieldcat_wa1 INDEX h_index.
    IF sy-subrc IS INITIAL AND h_fieldcat_wa1-no_out = space.
      READ TABLE h_fieldcat_tab INTO h_fieldcat_wa2 WITH KEY
                   fieldname = h_fieldcat_wa1-fieldname BINARY SEARCH.
      IF h_fieldcat_wa1-no_out <> h_fieldcat_wa2-no_out.
        h_change = yes.
      ENDIF.
      h_index = h_index + 1.
    ELSE.
      EXIT.
    ENDIF.
  ENDDO.
  IF h_change = yes.
*--- rebuild itab for dynamic select ---------------------------------
    PERFORM create_g_selfields_tab_f14.
  ENDIF.

ENDFORM.                    "get_fieldcat_actual_f14
*---------------------------------------------------------------------*
*       FORM GET_FIELDCAT_ACTUAL_INFO_F14                             *
*---------------------------------------------------------------------*
*       get actual infos from Listviewer settings
*---------------------------------------------------------------------*
FORM get_fieldcat_actual_info_f14.

  IF g_grid IS INITIAL.
    CALL FUNCTION 'REUSE_ALV_GRID_LAYOUT_INFO_GET'
         IMPORTING
              es_layout      = g_layout
              et_fieldcat    = g_fieldcat_tab[]
              et_sort        = g_sortfields_tab[]
              et_filter      = g_filter_tab[]
*           ES_LIST_SCROLL = G_SCROLL
              es_variant     = g_variant
         EXCEPTIONS
              no_infos       = 1
              program_error  = 2
              OTHERS         = 3.
  ELSE.
    CALL FUNCTION 'REUSE_ALV_LIST_LAYOUT_INFO_GET'
      IMPORTING
        es_layout      = g_layout
        et_fieldcat    = g_fieldcat_tab[]
        et_sort        = g_sortfields_tab[]
        et_filter      = g_filter_tab[]
        es_list_scroll = g_scroll
        es_variant     = g_variant
      EXCEPTIONS
        no_infos       = 1
        program_error  = 2
        OTHERS         = 3.
  ENDIF.

ENDFORM.                    "get_fieldcat_actual_info_f14
*---------------------------------------------------------------------*
*       FORM SET_FIELDCAT_ACTUAL_F14                                  *
*---------------------------------------------------------------------*
*       move actual display options to list viewer                    *
*---------------------------------------------------------------------*
FORM set_fieldcat_actual_f14.

  IF g_grid IS INITIAL.
    CALL FUNCTION 'REUSE_ALV_GRID_LAYOUT_INFO_SET'
         EXPORTING
              is_layout      = g_layout
              it_fieldcat    = g_fieldcat_tab[]
              it_sort        = g_sortfields_tab[]
              it_filter      = g_filter_tab[]
*             IS_LIST_SCROLL = G_SCROLL
         EXCEPTIONS
              OTHERS         = 0.
  ELSE.
    CALL FUNCTION 'REUSE_ALV_LIST_LAYOUT_INFO_SET'
      EXPORTING
        is_layout      = g_layout
        it_fieldcat    = g_fieldcat_tab[]
        it_sort        = g_sortfields_tab[]
        it_filter      = g_filter_tab[]
        is_list_scroll = g_scroll
      EXCEPTIONS
        OTHERS         = 0.
  ENDIF.

ENDFORM.                    "set_fieldcat_actual_f14
*---------------------------------------------------------------------*
*       FORM CREATE_G_SELFIELDS_TAB_F14                               *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM create_g_selfields_tab_f14.

  DATA: ls_fieldcat  TYPE slis_fieldcat_alv,
        ls_filter    TYPE slis_filter_alv,
        ls_selfield  LIKE g_selfields_tab.

*--- g_selfields_tab consists of fields marked for display -----------*
  REFRESH g_selfields_tab.
  CLEAR   g_selfields_tab.

  SORT g_fieldcat_tab BY no_out ASCENDING.

  LOOP AT g_fieldcat_tab INTO ls_fieldcat.
*--- if called for selection w/o showing list, select all fields
    IF ls_fieldcat-no_out NE space AND g_selmod NE selmod_d.
      EXIT.
    ENDIF.
    IF ls_fieldcat-fieldname <> 'LIGHTS'       AND
       ls_fieldcat-fieldname <> 'SELECTED'     AND
       ls_fieldcat-fieldname <> 'PM_SELECTED'.
      ls_selfield-field = ls_fieldcat-fieldname.
      APPEND ls_selfield TO g_selfields_tab.
    ENDIF.
  ENDLOOP.

*--- also select fields from filter
  LOOP AT g_filter_tab INTO ls_filter.
    ls_selfield-field = ls_filter-fieldname.
    COLLECT ls_selfield INTO g_selfields_tab.
  ENDLOOP.

ENDFORM.                    "create_g_selfields_tab_f14

*---------------------------------------------------------------------*
*       FORM CHECK_FIELD_FOR_SELECTION_F14                            *
*---------------------------------------------------------------------*
*       adds field to g_selfields_tab with check for display          *
*---------------------------------------------------------------------*
*  -->  OUTPUTFIELD      fieldname for list-output                    *
*  -->  SELECTFIELD      fieldname for database selection             *
*---------------------------------------------------------------------*
FORM check_field_for_selection_f14 USING
                              outputfield TYPE slis_fieldname
                              selectfield LIKE g_selfields_tab-field.

  DATA h_answer      TYPE c.

  PERFORM check_field_display_f14 USING outputfield
                                        h_answer.
  IF h_answer = yes.
    PERFORM add_to_g_selfields_tab_f14 USING selectfield.
  ENDIF.

ENDFORM.                    "check_field_for_selection_f14
*---------------------------------------------------------------------*
*       FORM CHECK_FIELD_DISPLAY_F14                                  *
*---------------------------------------------------------------------*
*       check for display                                             *
*---------------------------------------------------------------------*
*  -->  OUTPUTFIELD      fieldname for list-output                    *
*  -->  ANSWER           YES/NO                                       *
*---------------------------------------------------------------------*
FORM check_field_display_f14 USING
                              outputfield TYPE slis_fieldname
                              answer      TYPE c.

  DATA h_fieldcat_wa TYPE slis_fieldcat_alv.

  READ TABLE g_fieldcat_tab INTO h_fieldcat_wa
       WITH KEY fieldname = outputfield BINARY SEARCH.
  IF sy-subrc IS INITIAL AND h_fieldcat_wa-no_out = space.
    answer = yes.
  ELSE.
    answer = no.
*--- also select fields from filter
    READ TABLE g_filter_tab TRANSPORTING NO FIELDS
         WITH KEY fieldname = outputfield.
    IF sy-subrc IS INITIAL.
      answer = yes.
    ENDIF.
  ENDIF.

ENDFORM.                    "check_field_display_f14
*---------------------------------------------------------------------*
*       FORM ADD_TO_G_SELFIELDS_TAB_F14                               *
*---------------------------------------------------------------------*
*       add field in G_SELFIELDS_TAB                                  *
*---------------------------------------------------------------------*
*  -->  FIELD                                                         *
*---------------------------------------------------------------------*
FORM add_to_g_selfields_tab_f14 USING field LIKE g_selfields_tab-field.

  g_selfields_tab-field = field.
  COLLECT g_selfields_tab.

ENDFORM.                    "add_to_g_selfields_tab_f14
*---------------------------------------------------------------------*
*       FORM TOP_OF_PAGE_F14                                          *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM top_of_page_f14.

*--- Display header lines above list display -------------------------
  IF NOT g_listheader_tab[] IS INITIAL.
    CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
      EXPORTING
        it_list_commentary = g_listheader_tab.
  ENDIF.

ENDFORM.                    "top_of_page_f14
*---------------------------------------------------------------------*
*       FORM SET_PF_STAT_F14                                          *
*---------------------------------------------------------------------*
*       pf-stat: MAIN -> Display mode, AEND -> Change mode            *
*---------------------------------------------------------------------*
*  -->  RT_EXTAG                                                      *
*---------------------------------------------------------------------*
FORM set_pf_stat_f14 USING rt_extag TYPE slis_t_extab.      "#EC CALLED
* EAM CC 200                                                "1656798
  data: lv_hide_eam_cc_button type c VALUE g_x.             "1656798


data: lv_webgui_active(1) type c.                              "974434

*start 974434
* if WEBGUI --> deactivate some functions
  CALL FUNCTION 'WEBGUI_CHECK'
    IMPORTING
      WEBGUI_ACTIVE       =  lv_webgui_active.
  if lv_webgui_active = g_x.
    append 'XXL ' to rt_extag.
  endif.
*end 974434

* If '&XXL' exists in rt_extag, append new entry = 'XXL'      "1534954
  READ TABLE rt_extag WITH KEY FCODE = '&XXL'                 "1534954
    TRANSPORTING NO FIELDS.                                   "1534954
  IF SY-subrc IS INITIAL.                                     "1534954
    APPEND 'XXL' TO rt_extag.                                 "1534954
  ENDIF.                                                      "1534954

*--- link to SAPPHONE not aktive -> deaktivate function --------------
  IF NOT g_sapphone_active = g_x.
    APPEND 'PHON' TO rt_extag.
  ENDIF.
*--- not in select mode -> deaktivate function -----------------------
  IF g_selmod = selmod_0 OR g_selmod = selmod_s.
    APPEND 'ISEL' TO rt_extag.
  ENDIF.
*--- customizing mode -> display/change mode inactive ----------------
  IF g_variant_save = g_x.
    APPEND 'V-A ' TO rt_extag.
  ENDIF.
*--- Monitorfunction not acitve with grid control
  IF g_grid IS INITIAL.
    APPEND 'MONI' TO rt_extag.
  ENDIF.

*************************************************************************************
* begin of note 1656798
* EAM CC 200
  include eamcc_miolxf14 if found.

  if lv_hide_eam_cc_button is not INITIAL.
    APPEND 'CLLO' TO rt_extag.
  endif.
* end of note 1656798
*************************************************************************************

*--- Mass change not available (only in extention)
  IF g_badi_mass_change_act IS INITIAL.
    APPEND 'MASS' TO rt_extag.
  ENDIF.

  IF gv_time_zone_active NE tzs1_active-yes.
*--- Time zone not active -> hide button
    APPEND tzs1_fcode_button TO rt_extag.
  ENDIF.

  SET TITLEBAR 'LVS' WITH tstct-ttext.                  "#EC *  "1615433

  IF g_aktyp IS INITIAL.
    g_aktyp = t370a-aktyp.
  ENDIF.
*--- inactivate function (todo and slin) as not used in all programms
  IF g_aktyp = 'V'.                                         "#EC *
    SET PF-STATUS 'AEND' EXCLUDING rt_extag.                "#EC *
  ELSE.                                                     "#EC *
    SET PF-STATUS 'MAIN' EXCLUDING rt_extag.                "#EC *
  ENDIF.                                                    "#EC *

ENDFORM.                    "set_pf_stat_f14
*&---------------------------------------------------------------------*
*&      Form  VARIANT_EXISTENCE_F14
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_VARIANT  text                                              *
*----------------------------------------------------------------------*
FORM variant_existence_f14 USING p_variant LIKE g_variant-variant.

*--- globale field must contain same value as parameter
  g_variant-variant = p_variant.

  CHECK NOT g_variant-variant IS INITIAL.

  CALL FUNCTION 'REUSE_ALV_VARIANT_EXISTENCE'
    EXPORTING
      i_save     = g_variant_save
    CHANGING
      cs_variant = g_variant.

ENDFORM.                               " VARIANT_EXISTENCE_F14
*&---------------------------------------------------------------------*
*&      Form  CHECK_OBJECT_TAB_MARKED_F14
*&---------------------------------------------------------------------*
*       What has been marked in object tab
*----------------------------------------------------------------------*
*      -->P_P_SELFIELD-TABINDEX  text                                  *
*----------------------------------------------------------------------*
FORM check_object_tab_marked_f14 USING p_ucomm    LIKE sy-ucomm
                                       p_selfield TYPE slis_selfield.

  READ TABLE object_tab WITH KEY selected = g_x.
  IF NOT sy-subrc IS INITIAL.
    IF NOT p_selfield-tabindex IS INITIAL.
      READ TABLE object_tab INDEX p_selfield-tabindex.
      object_tab-selected = g_x.
      MODIFY object_tab INDEX p_selfield-tabindex.
    ENDIF.
  ELSE.
*--- Checkbox markiert -----------------------------------------------*
    p_selfield-sel_tab_field = 'G_MARK'.
  ENDIF.

ENDFORM.                               " CHECK_OBJECT_TAB_MARKED_F14
*&---------------------------------------------------------------------*
*&      Form  CHECK_SAPPHONE_AKTIVE_F14
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_sapphone_aktive_f14.

*--- if report called via rfc-function do not check sapphone
  CALL 'RFCControl' ID 'CODE' FIELD '?'.                  "#EC CI_CCALL
  CHECK sy-subrc IS INITIAL.

  CALL FUNCTION 'TELEPHONY_ACTIVE_GET'
    IMPORTING
      active = g_sapphone_active
    EXCEPTIONS
      OTHERS = 1.

  IF NOT sy-subrc IS INITIAL.
    CLEAR g_sapphone_active.
  ENDIF.

ENDFORM.                               " CHECK_SAPPHONE_AKTIVE_F14
*&---------------------------------------------------------------------*
*&      Form  ADD_PM_SELECTED_FIELDCAT_F14
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM add_pm_selected_fieldcat_f14.

  DATA h_fieldcat_wa TYPE slis_fieldcat_alv.
  DATA h_dd04v_wa    LIKE dd04v.
*--- field pm_selected will be shown as symbol-box in list
  READ TABLE g_fieldcat_tab WITH KEY fieldname = 'PM_SELECTED'
                            INTO h_fieldcat_wa.
  IF NOT sy-subrc IS INITIAL.
    CLEAR h_fieldcat_wa.
    CALL FUNCTION 'DDIF_DTEL_GET'
      EXPORTING
        name     = 'PM_SELECTED'
        langu    = sy-langu
      IMPORTING
        dd04v_wa = h_dd04v_wa
      EXCEPTIONS
        OTHERS   = 1.
    IF sy-subrc IS INITIAL.
      MOVE-CORRESPONDING h_dd04v_wa TO h_fieldcat_wa.
      h_fieldcat_wa-tabname   = 'OBJECT_TAB'.
      h_fieldcat_wa-fieldname = 'PM_SELECTED'.
      h_fieldcat_wa-symbol    = g_x.
      h_fieldcat_wa-emphasize = 'C000'.
      h_fieldcat_wa-key       = g_x.
      h_fieldcat_wa-key_sel   = g_x.
      APPEND h_fieldcat_wa TO g_fieldcat_tab.
    ENDIF.
  ENDIF.

ENDFORM.                               " ADD_PM_SELECTED_FIELDCAT_F14
*---------------------------------------------------------------------*
*       FORM DEL_PM_SELECTED_FIELDCAT_F1                              *
*---------------------------------------------------------------------*
*       Field pm_selected will be delete out of fieldcatalog          *
*       Column of fields in same row will be adjusted                  *
*       g_fieldcat_tab has to be properly sorted before!!!             *
*---------------------------------------------------------------------*
FORM del_pm_selected_fieldcat_f14.

  DATA h_fieldcat_wa TYPE slis_fieldcat_alv.
  DATA h_row_pos     TYPE slis_fieldcat_alv-row_pos.
  DATA h_index       LIKE sy-tabix.

  READ TABLE g_fieldcat_tab WITH KEY fieldname = 'PM_SELECTED'
                            INTO h_fieldcat_wa.
  IF sy-subrc IS INITIAL.
    h_index = sy-tabix.
    IF h_fieldcat_wa-no_out IS INITIAL.
*--- field was visible, save row, delete entry
      h_row_pos = h_fieldcat_wa-row_pos.
      DELETE g_fieldcat_tab INDEX h_index.
      DO.
*--- all following visible fields in same row reduce column number
        READ TABLE g_fieldcat_tab INDEX h_index INTO h_fieldcat_wa.
        IF sy-subrc IS INITIAL               AND
           h_fieldcat_wa-no_out  IS INITIAL  AND
           h_fieldcat_wa-row_pos = h_row_pos.
          h_fieldcat_wa-col_pos = h_fieldcat_wa-col_pos - 1.
          MODIFY g_fieldcat_tab FROM h_fieldcat_wa INDEX h_index.
          h_index = h_index + 1.
        ELSE.
          EXIT.
        ENDIF.
      ENDDO.
    ENDIF.
  ENDIF.

ENDFORM.                    "del_pm_selected_fieldcat_f14

*&---------------------------------------------------------------------*
*&      Form  CREATE_FIELDGROUPS_BADI_F14
*&---------------------------------------------------------------------*
*       Fill additional fields in field catalog via BAdI
*       BADI_EAM_SINGLELEVEL_LIST
*       it is only possible to add new field groups, not to change
*       existing field groups.
*----------------------------------------------------------------------*
*      <->CS_FIELDCAT     field catalog entry for one field
*      <->CT_FIELDGROUPS  field groups
*----------------------------------------------------------------------*
FORM create_fieldgroups_badi_f14  CHANGING cs_fieldcat    TYPE slis_fieldcat_alv
                                           ct_fieldgroups TYPE slis_t_sp_group_alv.

  DATA: ls_fieldgroup TYPE slis_sp_group_alv.

*--- disable APPEND fields by default (not customer fields)
  IF cs_fieldcat-fieldname    NE 'PM_SELECTED' AND
     cs_fieldcat-fieldname(1) NE 'Z'.
    cs_fieldcat-tech = g_x.
  ENDIF.

*--- only if BAdI BADI_EAM_SINGLELEVEL_LIST is active
  IF cl_badi_query=>number_of_implementations( gb_badi_eam_singlelevel_list ) = 0.
    RETURN.
  ENDIF.

*--- call BAdI
  CALL BADI gb_badi_eam_singlelevel_list->change_field_catalog
    CHANGING
      cs_fieldcatalog = cs_fieldcat
      cs_fieldgroup   = ls_fieldgroup.

*--- add new fieldgroup if necessary.
  IF ls_fieldgroup IS NOT INITIAL.
    READ TABLE ct_fieldgroups WITH KEY sp_group = ls_fieldgroup-sp_group
                              TRANSPORTING NO FIELDS.
    IF sy-subrc IS NOT INITIAL.
      APPEND ls_fieldgroup TO ct_fieldgroups.
    ENDIF.
  ENDIF.

ENDFORM.                    " CREATE_FIELDGROUPS_BADI_F14
